
dc_load_f103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bb60  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c98  0800bc70  0800bc70  0000cc70  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c908  0800c908  0000e208  2**0
                  CONTENTS
  4 .ARM          00000008  0800c908  0800c908  0000d908  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c910  0800c910  0000e208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c910  0800c910  0000d910  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c914  0800c914  0000d914  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000208  20000000  0800c918  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000770  20000208  0800cb20  0000e208  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000978  0800cb20  0000e978  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000e208  2**0
                  CONTENTS, READONLY
 12 .debug_info   000104ad  00000000  00000000  0000e231  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030cf  00000000  00000000  0001e6de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e28  00000000  00000000  000217b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ac5  00000000  00000000  000225d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a159  00000000  00000000  0002309d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000148a6  00000000  00000000  0003d1f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d604  00000000  00000000  00051a9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000df0a0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d7c  00000000  00000000  000df0e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  000e3e60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000208 	.word	0x20000208
 800012c:	00000000 	.word	0x00000000
 8000130:	0800bc58 	.word	0x0800bc58

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000020c 	.word	0x2000020c
 800014c:	0800bc58 	.word	0x0800bc58

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	@ 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000dd6:	2afd      	cmp	r2, #253	@ 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	@ 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	@ 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	@ 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__aeabi_f2uiz>:
 8001024:	0042      	lsls	r2, r0, #1
 8001026:	d20e      	bcs.n	8001046 <__aeabi_f2uiz+0x22>
 8001028:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 800102c:	d30b      	bcc.n	8001046 <__aeabi_f2uiz+0x22>
 800102e:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8001032:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001036:	d409      	bmi.n	800104c <__aeabi_f2uiz+0x28>
 8001038:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800103c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001040:	fa23 f002 	lsr.w	r0, r3, r2
 8001044:	4770      	bx	lr
 8001046:	f04f 0000 	mov.w	r0, #0
 800104a:	4770      	bx	lr
 800104c:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001050:	d101      	bne.n	8001056 <__aeabi_f2uiz+0x32>
 8001052:	0242      	lsls	r2, r0, #9
 8001054:	d102      	bne.n	800105c <__aeabi_f2uiz+0x38>
 8001056:	f04f 30ff 	mov.w	r0, #4294967295
 800105a:	4770      	bx	lr
 800105c:	f04f 0000 	mov.w	r0, #0
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop

08001064 <__aeabi_d2lz>:
 8001064:	b538      	push	{r3, r4, r5, lr}
 8001066:	2200      	movs	r2, #0
 8001068:	2300      	movs	r3, #0
 800106a:	4604      	mov	r4, r0
 800106c:	460d      	mov	r5, r1
 800106e:	f7ff fca5 	bl	80009bc <__aeabi_dcmplt>
 8001072:	b928      	cbnz	r0, 8001080 <__aeabi_d2lz+0x1c>
 8001074:	4620      	mov	r0, r4
 8001076:	4629      	mov	r1, r5
 8001078:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800107c:	f000 b80a 	b.w	8001094 <__aeabi_d2ulz>
 8001080:	4620      	mov	r0, r4
 8001082:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8001086:	f000 f805 	bl	8001094 <__aeabi_d2ulz>
 800108a:	4240      	negs	r0, r0
 800108c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001090:	bd38      	pop	{r3, r4, r5, pc}
 8001092:	bf00      	nop

08001094 <__aeabi_d2ulz>:
 8001094:	b5d0      	push	{r4, r6, r7, lr}
 8001096:	2200      	movs	r2, #0
 8001098:	4b0b      	ldr	r3, [pc, #44]	@ (80010c8 <__aeabi_d2ulz+0x34>)
 800109a:	4606      	mov	r6, r0
 800109c:	460f      	mov	r7, r1
 800109e:	f7ff fa1b 	bl	80004d8 <__aeabi_dmul>
 80010a2:	f7ff fcf1 	bl	8000a88 <__aeabi_d2uiz>
 80010a6:	4604      	mov	r4, r0
 80010a8:	f7ff f99c 	bl	80003e4 <__aeabi_ui2d>
 80010ac:	2200      	movs	r2, #0
 80010ae:	4b07      	ldr	r3, [pc, #28]	@ (80010cc <__aeabi_d2ulz+0x38>)
 80010b0:	f7ff fa12 	bl	80004d8 <__aeabi_dmul>
 80010b4:	4602      	mov	r2, r0
 80010b6:	460b      	mov	r3, r1
 80010b8:	4630      	mov	r0, r6
 80010ba:	4639      	mov	r1, r7
 80010bc:	f7ff f854 	bl	8000168 <__aeabi_dsub>
 80010c0:	f7ff fce2 	bl	8000a88 <__aeabi_d2uiz>
 80010c4:	4621      	mov	r1, r4
 80010c6:	bdd0      	pop	{r4, r6, r7, pc}
 80010c8:	3df00000 	.word	0x3df00000
 80010cc:	41f00000 	.word	0x41f00000

080010d0 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b084      	sub	sp, #16
 80010d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010d6:	1d3b      	adds	r3, r7, #4
 80010d8:	2200      	movs	r2, #0
 80010da:	601a      	str	r2, [r3, #0]
 80010dc:	605a      	str	r2, [r3, #4]
 80010de:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80010e0:	4b18      	ldr	r3, [pc, #96]	@ (8001144 <MX_ADC1_Init+0x74>)
 80010e2:	4a19      	ldr	r2, [pc, #100]	@ (8001148 <MX_ADC1_Init+0x78>)
 80010e4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80010e6:	4b17      	ldr	r3, [pc, #92]	@ (8001144 <MX_ADC1_Init+0x74>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80010ec:	4b15      	ldr	r3, [pc, #84]	@ (8001144 <MX_ADC1_Init+0x74>)
 80010ee:	2201      	movs	r2, #1
 80010f0:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010f2:	4b14      	ldr	r3, [pc, #80]	@ (8001144 <MX_ADC1_Init+0x74>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010f8:	4b12      	ldr	r3, [pc, #72]	@ (8001144 <MX_ADC1_Init+0x74>)
 80010fa:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 80010fe:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001100:	4b10      	ldr	r3, [pc, #64]	@ (8001144 <MX_ADC1_Init+0x74>)
 8001102:	2200      	movs	r2, #0
 8001104:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001106:	4b0f      	ldr	r3, [pc, #60]	@ (8001144 <MX_ADC1_Init+0x74>)
 8001108:	2201      	movs	r2, #1
 800110a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800110c:	480d      	ldr	r0, [pc, #52]	@ (8001144 <MX_ADC1_Init+0x74>)
 800110e:	f000 feef 	bl	8001ef0 <HAL_ADC_Init>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d001      	beq.n	800111c <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001118:	f000 fc82 	bl	8001a20 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800111c:	2309      	movs	r3, #9
 800111e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001120:	2301      	movs	r3, #1
 8001122:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 8001124:	2305      	movs	r3, #5
 8001126:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001128:	1d3b      	adds	r3, r7, #4
 800112a:	4619      	mov	r1, r3
 800112c:	4805      	ldr	r0, [pc, #20]	@ (8001144 <MX_ADC1_Init+0x74>)
 800112e:	f001 f977 	bl	8002420 <HAL_ADC_ConfigChannel>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d001      	beq.n	800113c <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001138:	f000 fc72 	bl	8001a20 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800113c:	bf00      	nop
 800113e:	3710      	adds	r7, #16
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	20000224 	.word	0x20000224
 8001148:	40012400 	.word	0x40012400

0800114c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b088      	sub	sp, #32
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001154:	f107 0310 	add.w	r3, r7, #16
 8001158:	2200      	movs	r2, #0
 800115a:	601a      	str	r2, [r3, #0]
 800115c:	605a      	str	r2, [r3, #4]
 800115e:	609a      	str	r2, [r3, #8]
 8001160:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4a14      	ldr	r2, [pc, #80]	@ (80011b8 <HAL_ADC_MspInit+0x6c>)
 8001168:	4293      	cmp	r3, r2
 800116a:	d121      	bne.n	80011b0 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800116c:	4b13      	ldr	r3, [pc, #76]	@ (80011bc <HAL_ADC_MspInit+0x70>)
 800116e:	699b      	ldr	r3, [r3, #24]
 8001170:	4a12      	ldr	r2, [pc, #72]	@ (80011bc <HAL_ADC_MspInit+0x70>)
 8001172:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001176:	6193      	str	r3, [r2, #24]
 8001178:	4b10      	ldr	r3, [pc, #64]	@ (80011bc <HAL_ADC_MspInit+0x70>)
 800117a:	699b      	ldr	r3, [r3, #24]
 800117c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001180:	60fb      	str	r3, [r7, #12]
 8001182:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001184:	4b0d      	ldr	r3, [pc, #52]	@ (80011bc <HAL_ADC_MspInit+0x70>)
 8001186:	699b      	ldr	r3, [r3, #24]
 8001188:	4a0c      	ldr	r2, [pc, #48]	@ (80011bc <HAL_ADC_MspInit+0x70>)
 800118a:	f043 0308 	orr.w	r3, r3, #8
 800118e:	6193      	str	r3, [r2, #24]
 8001190:	4b0a      	ldr	r3, [pc, #40]	@ (80011bc <HAL_ADC_MspInit+0x70>)
 8001192:	699b      	ldr	r3, [r3, #24]
 8001194:	f003 0308 	and.w	r3, r3, #8
 8001198:	60bb      	str	r3, [r7, #8]
 800119a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = BATT_SENSE_Pin;
 800119c:	2302      	movs	r3, #2
 800119e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011a0:	2303      	movs	r3, #3
 80011a2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(BATT_SENSE_GPIO_Port, &GPIO_InitStruct);
 80011a4:	f107 0310 	add.w	r3, r7, #16
 80011a8:	4619      	mov	r1, r3
 80011aa:	4805      	ldr	r0, [pc, #20]	@ (80011c0 <HAL_ADC_MspInit+0x74>)
 80011ac:	f001 fe6e 	bl	8002e8c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80011b0:	bf00      	nop
 80011b2:	3720      	adds	r7, #32
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	40012400 	.word	0x40012400
 80011bc:	40021000 	.word	0x40021000
 80011c0:	40010c00 	.word	0x40010c00

080011c4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80011ca:	4b0c      	ldr	r3, [pc, #48]	@ (80011fc <MX_DMA_Init+0x38>)
 80011cc:	695b      	ldr	r3, [r3, #20]
 80011ce:	4a0b      	ldr	r2, [pc, #44]	@ (80011fc <MX_DMA_Init+0x38>)
 80011d0:	f043 0301 	orr.w	r3, r3, #1
 80011d4:	6153      	str	r3, [r2, #20]
 80011d6:	4b09      	ldr	r3, [pc, #36]	@ (80011fc <MX_DMA_Init+0x38>)
 80011d8:	695b      	ldr	r3, [r3, #20]
 80011da:	f003 0301 	and.w	r3, r3, #1
 80011de:	607b      	str	r3, [r7, #4]
 80011e0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80011e2:	2200      	movs	r2, #0
 80011e4:	2100      	movs	r1, #0
 80011e6:	2010      	movs	r0, #16
 80011e8:	f001 fc33 	bl	8002a52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80011ec:	2010      	movs	r0, #16
 80011ee:	f001 fc4c 	bl	8002a8a <HAL_NVIC_EnableIRQ>

}
 80011f2:	bf00      	nop
 80011f4:	3708      	adds	r7, #8
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	40021000 	.word	0x40021000

08001200 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b088      	sub	sp, #32
 8001204:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001206:	f107 0310 	add.w	r3, r7, #16
 800120a:	2200      	movs	r2, #0
 800120c:	601a      	str	r2, [r3, #0]
 800120e:	605a      	str	r2, [r3, #4]
 8001210:	609a      	str	r2, [r3, #8]
 8001212:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001214:	4b39      	ldr	r3, [pc, #228]	@ (80012fc <MX_GPIO_Init+0xfc>)
 8001216:	699b      	ldr	r3, [r3, #24]
 8001218:	4a38      	ldr	r2, [pc, #224]	@ (80012fc <MX_GPIO_Init+0xfc>)
 800121a:	f043 0310 	orr.w	r3, r3, #16
 800121e:	6193      	str	r3, [r2, #24]
 8001220:	4b36      	ldr	r3, [pc, #216]	@ (80012fc <MX_GPIO_Init+0xfc>)
 8001222:	699b      	ldr	r3, [r3, #24]
 8001224:	f003 0310 	and.w	r3, r3, #16
 8001228:	60fb      	str	r3, [r7, #12]
 800122a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800122c:	4b33      	ldr	r3, [pc, #204]	@ (80012fc <MX_GPIO_Init+0xfc>)
 800122e:	699b      	ldr	r3, [r3, #24]
 8001230:	4a32      	ldr	r2, [pc, #200]	@ (80012fc <MX_GPIO_Init+0xfc>)
 8001232:	f043 0320 	orr.w	r3, r3, #32
 8001236:	6193      	str	r3, [r2, #24]
 8001238:	4b30      	ldr	r3, [pc, #192]	@ (80012fc <MX_GPIO_Init+0xfc>)
 800123a:	699b      	ldr	r3, [r3, #24]
 800123c:	f003 0320 	and.w	r3, r3, #32
 8001240:	60bb      	str	r3, [r7, #8]
 8001242:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001244:	4b2d      	ldr	r3, [pc, #180]	@ (80012fc <MX_GPIO_Init+0xfc>)
 8001246:	699b      	ldr	r3, [r3, #24]
 8001248:	4a2c      	ldr	r2, [pc, #176]	@ (80012fc <MX_GPIO_Init+0xfc>)
 800124a:	f043 0304 	orr.w	r3, r3, #4
 800124e:	6193      	str	r3, [r2, #24]
 8001250:	4b2a      	ldr	r3, [pc, #168]	@ (80012fc <MX_GPIO_Init+0xfc>)
 8001252:	699b      	ldr	r3, [r3, #24]
 8001254:	f003 0304 	and.w	r3, r3, #4
 8001258:	607b      	str	r3, [r7, #4]
 800125a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800125c:	4b27      	ldr	r3, [pc, #156]	@ (80012fc <MX_GPIO_Init+0xfc>)
 800125e:	699b      	ldr	r3, [r3, #24]
 8001260:	4a26      	ldr	r2, [pc, #152]	@ (80012fc <MX_GPIO_Init+0xfc>)
 8001262:	f043 0308 	orr.w	r3, r3, #8
 8001266:	6193      	str	r3, [r2, #24]
 8001268:	4b24      	ldr	r3, [pc, #144]	@ (80012fc <MX_GPIO_Init+0xfc>)
 800126a:	699b      	ldr	r3, [r3, #24]
 800126c:	f003 0308 	and.w	r3, r3, #8
 8001270:	603b      	str	r3, [r7, #0]
 8001272:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_RED_Pin|LED_GRN_Pin|LED_BLU_Pin, GPIO_PIN_RESET);
 8001274:	2200      	movs	r2, #0
 8001276:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 800127a:	4821      	ldr	r0, [pc, #132]	@ (8001300 <MX_GPIO_Init+0x100>)
 800127c:	f001 ff8a 	bl	8003194 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LTC4151_SHDN_N_GPIO_Port, LTC4151_SHDN_N_Pin, GPIO_PIN_RESET);
 8001280:	2200      	movs	r2, #0
 8001282:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001286:	481f      	ldr	r0, [pc, #124]	@ (8001304 <MX_GPIO_Init+0x104>)
 8001288:	f001 ff84 	bl	8003194 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = LED_RED_Pin|LED_GRN_Pin|LED_BLU_Pin;
 800128c:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8001290:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001292:	2301      	movs	r3, #1
 8001294:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001296:	2300      	movs	r3, #0
 8001298:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800129a:	2302      	movs	r3, #2
 800129c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800129e:	f107 0310 	add.w	r3, r7, #16
 80012a2:	4619      	mov	r1, r3
 80012a4:	4816      	ldr	r0, [pc, #88]	@ (8001300 <MX_GPIO_Init+0x100>)
 80012a6:	f001 fdf1 	bl	8002e8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LTC2944_ALCC_Pin;
 80012aa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80012ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80012b0:	4b15      	ldr	r3, [pc, #84]	@ (8001308 <MX_GPIO_Init+0x108>)
 80012b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012b4:	2301      	movs	r3, #1
 80012b6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LTC2944_ALCC_GPIO_Port, &GPIO_InitStruct);
 80012b8:	f107 0310 	add.w	r3, r7, #16
 80012bc:	4619      	mov	r1, r3
 80012be:	4811      	ldr	r0, [pc, #68]	@ (8001304 <MX_GPIO_Init+0x104>)
 80012c0:	f001 fde4 	bl	8002e8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LTC4151_SHDN_N_Pin;
 80012c4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80012c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ca:	2301      	movs	r3, #1
 80012cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ce:	2300      	movs	r3, #0
 80012d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d2:	2302      	movs	r3, #2
 80012d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LTC4151_SHDN_N_GPIO_Port, &GPIO_InitStruct);
 80012d6:	f107 0310 	add.w	r3, r7, #16
 80012da:	4619      	mov	r1, r3
 80012dc:	4809      	ldr	r0, [pc, #36]	@ (8001304 <MX_GPIO_Init+0x104>)
 80012de:	f001 fdd5 	bl	8002e8c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80012e2:	2200      	movs	r2, #0
 80012e4:	2100      	movs	r1, #0
 80012e6:	2017      	movs	r0, #23
 80012e8:	f001 fbb3 	bl	8002a52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80012ec:	2017      	movs	r0, #23
 80012ee:	f001 fbcc 	bl	8002a8a <HAL_NVIC_EnableIRQ>

}
 80012f2:	bf00      	nop
 80012f4:	3720      	adds	r7, #32
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	40021000 	.word	0x40021000
 8001300:	40011000 	.word	0x40011000
 8001304:	40010c00 	.word	0x40010c00
 8001308:	10210000 	.word	0x10210000

0800130c <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c2;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001310:	4b12      	ldr	r3, [pc, #72]	@ (800135c <MX_I2C1_Init+0x50>)
 8001312:	4a13      	ldr	r2, [pc, #76]	@ (8001360 <MX_I2C1_Init+0x54>)
 8001314:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001316:	4b11      	ldr	r3, [pc, #68]	@ (800135c <MX_I2C1_Init+0x50>)
 8001318:	4a12      	ldr	r2, [pc, #72]	@ (8001364 <MX_I2C1_Init+0x58>)
 800131a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800131c:	4b0f      	ldr	r3, [pc, #60]	@ (800135c <MX_I2C1_Init+0x50>)
 800131e:	2200      	movs	r2, #0
 8001320:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001322:	4b0e      	ldr	r3, [pc, #56]	@ (800135c <MX_I2C1_Init+0x50>)
 8001324:	2200      	movs	r2, #0
 8001326:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001328:	4b0c      	ldr	r3, [pc, #48]	@ (800135c <MX_I2C1_Init+0x50>)
 800132a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800132e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001330:	4b0a      	ldr	r3, [pc, #40]	@ (800135c <MX_I2C1_Init+0x50>)
 8001332:	2200      	movs	r2, #0
 8001334:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001336:	4b09      	ldr	r3, [pc, #36]	@ (800135c <MX_I2C1_Init+0x50>)
 8001338:	2200      	movs	r2, #0
 800133a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800133c:	4b07      	ldr	r3, [pc, #28]	@ (800135c <MX_I2C1_Init+0x50>)
 800133e:	2200      	movs	r2, #0
 8001340:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001342:	4b06      	ldr	r3, [pc, #24]	@ (800135c <MX_I2C1_Init+0x50>)
 8001344:	2200      	movs	r2, #0
 8001346:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001348:	4804      	ldr	r0, [pc, #16]	@ (800135c <MX_I2C1_Init+0x50>)
 800134a:	f001 ff77 	bl	800323c <HAL_I2C_Init>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d001      	beq.n	8001358 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001354:	f000 fb64 	bl	8001a20 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001358:	bf00      	nop
 800135a:	bd80      	pop	{r7, pc}
 800135c:	20000254 	.word	0x20000254
 8001360:	40005400 	.word	0x40005400
 8001364:	000186a0 	.word	0x000186a0

08001368 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800136c:	4b12      	ldr	r3, [pc, #72]	@ (80013b8 <MX_I2C2_Init+0x50>)
 800136e:	4a13      	ldr	r2, [pc, #76]	@ (80013bc <MX_I2C2_Init+0x54>)
 8001370:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8001372:	4b11      	ldr	r3, [pc, #68]	@ (80013b8 <MX_I2C2_Init+0x50>)
 8001374:	4a12      	ldr	r2, [pc, #72]	@ (80013c0 <MX_I2C2_Init+0x58>)
 8001376:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001378:	4b0f      	ldr	r3, [pc, #60]	@ (80013b8 <MX_I2C2_Init+0x50>)
 800137a:	2200      	movs	r2, #0
 800137c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800137e:	4b0e      	ldr	r3, [pc, #56]	@ (80013b8 <MX_I2C2_Init+0x50>)
 8001380:	2200      	movs	r2, #0
 8001382:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001384:	4b0c      	ldr	r3, [pc, #48]	@ (80013b8 <MX_I2C2_Init+0x50>)
 8001386:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800138a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800138c:	4b0a      	ldr	r3, [pc, #40]	@ (80013b8 <MX_I2C2_Init+0x50>)
 800138e:	2200      	movs	r2, #0
 8001390:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001392:	4b09      	ldr	r3, [pc, #36]	@ (80013b8 <MX_I2C2_Init+0x50>)
 8001394:	2200      	movs	r2, #0
 8001396:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001398:	4b07      	ldr	r3, [pc, #28]	@ (80013b8 <MX_I2C2_Init+0x50>)
 800139a:	2200      	movs	r2, #0
 800139c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800139e:	4b06      	ldr	r3, [pc, #24]	@ (80013b8 <MX_I2C2_Init+0x50>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80013a4:	4804      	ldr	r0, [pc, #16]	@ (80013b8 <MX_I2C2_Init+0x50>)
 80013a6:	f001 ff49 	bl	800323c <HAL_I2C_Init>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d001      	beq.n	80013b4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80013b0:	f000 fb36 	bl	8001a20 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80013b4:	bf00      	nop
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	200002a8 	.word	0x200002a8
 80013bc:	40005800 	.word	0x40005800
 80013c0:	00061a80 	.word	0x00061a80

080013c4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b08a      	sub	sp, #40	@ 0x28
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013cc:	f107 0318 	add.w	r3, r7, #24
 80013d0:	2200      	movs	r2, #0
 80013d2:	601a      	str	r2, [r3, #0]
 80013d4:	605a      	str	r2, [r3, #4]
 80013d6:	609a      	str	r2, [r3, #8]
 80013d8:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4a42      	ldr	r2, [pc, #264]	@ (80014e8 <HAL_I2C_MspInit+0x124>)
 80013e0:	4293      	cmp	r3, r2
 80013e2:	d152      	bne.n	800148a <HAL_I2C_MspInit+0xc6>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013e4:	4b41      	ldr	r3, [pc, #260]	@ (80014ec <HAL_I2C_MspInit+0x128>)
 80013e6:	699b      	ldr	r3, [r3, #24]
 80013e8:	4a40      	ldr	r2, [pc, #256]	@ (80014ec <HAL_I2C_MspInit+0x128>)
 80013ea:	f043 0308 	orr.w	r3, r3, #8
 80013ee:	6193      	str	r3, [r2, #24]
 80013f0:	4b3e      	ldr	r3, [pc, #248]	@ (80014ec <HAL_I2C_MspInit+0x128>)
 80013f2:	699b      	ldr	r3, [r3, #24]
 80013f4:	f003 0308 	and.w	r3, r3, #8
 80013f8:	617b      	str	r3, [r7, #20]
 80013fa:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80013fc:	23c0      	movs	r3, #192	@ 0xc0
 80013fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001400:	2312      	movs	r3, #18
 8001402:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001404:	2303      	movs	r3, #3
 8001406:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001408:	f107 0318 	add.w	r3, r7, #24
 800140c:	4619      	mov	r1, r3
 800140e:	4838      	ldr	r0, [pc, #224]	@ (80014f0 <HAL_I2C_MspInit+0x12c>)
 8001410:	f001 fd3c 	bl	8002e8c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001414:	4b35      	ldr	r3, [pc, #212]	@ (80014ec <HAL_I2C_MspInit+0x128>)
 8001416:	69db      	ldr	r3, [r3, #28]
 8001418:	4a34      	ldr	r2, [pc, #208]	@ (80014ec <HAL_I2C_MspInit+0x128>)
 800141a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800141e:	61d3      	str	r3, [r2, #28]
 8001420:	4b32      	ldr	r3, [pc, #200]	@ (80014ec <HAL_I2C_MspInit+0x128>)
 8001422:	69db      	ldr	r3, [r3, #28]
 8001424:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001428:	613b      	str	r3, [r7, #16]
 800142a:	693b      	ldr	r3, [r7, #16]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 800142c:	4b31      	ldr	r3, [pc, #196]	@ (80014f4 <HAL_I2C_MspInit+0x130>)
 800142e:	4a32      	ldr	r2, [pc, #200]	@ (80014f8 <HAL_I2C_MspInit+0x134>)
 8001430:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001432:	4b30      	ldr	r3, [pc, #192]	@ (80014f4 <HAL_I2C_MspInit+0x130>)
 8001434:	2210      	movs	r2, #16
 8001436:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001438:	4b2e      	ldr	r3, [pc, #184]	@ (80014f4 <HAL_I2C_MspInit+0x130>)
 800143a:	2200      	movs	r2, #0
 800143c:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800143e:	4b2d      	ldr	r3, [pc, #180]	@ (80014f4 <HAL_I2C_MspInit+0x130>)
 8001440:	2280      	movs	r2, #128	@ 0x80
 8001442:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001444:	4b2b      	ldr	r3, [pc, #172]	@ (80014f4 <HAL_I2C_MspInit+0x130>)
 8001446:	2200      	movs	r2, #0
 8001448:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800144a:	4b2a      	ldr	r3, [pc, #168]	@ (80014f4 <HAL_I2C_MspInit+0x130>)
 800144c:	2200      	movs	r2, #0
 800144e:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8001450:	4b28      	ldr	r3, [pc, #160]	@ (80014f4 <HAL_I2C_MspInit+0x130>)
 8001452:	2200      	movs	r2, #0
 8001454:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001456:	4b27      	ldr	r3, [pc, #156]	@ (80014f4 <HAL_I2C_MspInit+0x130>)
 8001458:	2200      	movs	r2, #0
 800145a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 800145c:	4825      	ldr	r0, [pc, #148]	@ (80014f4 <HAL_I2C_MspInit+0x130>)
 800145e:	f001 fb2f 	bl	8002ac0 <HAL_DMA_Init>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d001      	beq.n	800146c <HAL_I2C_MspInit+0xa8>
    {
      Error_Handler();
 8001468:	f000 fada 	bl	8001a20 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	4a21      	ldr	r2, [pc, #132]	@ (80014f4 <HAL_I2C_MspInit+0x130>)
 8001470:	635a      	str	r2, [r3, #52]	@ 0x34
 8001472:	4a20      	ldr	r2, [pc, #128]	@ (80014f4 <HAL_I2C_MspInit+0x130>)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6253      	str	r3, [r2, #36]	@ 0x24

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001478:	2200      	movs	r2, #0
 800147a:	2100      	movs	r1, #0
 800147c:	201f      	movs	r0, #31
 800147e:	f001 fae8 	bl	8002a52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001482:	201f      	movs	r0, #31
 8001484:	f001 fb01 	bl	8002a8a <HAL_NVIC_EnableIRQ>
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001488:	e029      	b.n	80014de <HAL_I2C_MspInit+0x11a>
  else if(i2cHandle->Instance==I2C2)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4a1b      	ldr	r2, [pc, #108]	@ (80014fc <HAL_I2C_MspInit+0x138>)
 8001490:	4293      	cmp	r3, r2
 8001492:	d124      	bne.n	80014de <HAL_I2C_MspInit+0x11a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001494:	4b15      	ldr	r3, [pc, #84]	@ (80014ec <HAL_I2C_MspInit+0x128>)
 8001496:	699b      	ldr	r3, [r3, #24]
 8001498:	4a14      	ldr	r2, [pc, #80]	@ (80014ec <HAL_I2C_MspInit+0x128>)
 800149a:	f043 0308 	orr.w	r3, r3, #8
 800149e:	6193      	str	r3, [r2, #24]
 80014a0:	4b12      	ldr	r3, [pc, #72]	@ (80014ec <HAL_I2C_MspInit+0x128>)
 80014a2:	699b      	ldr	r3, [r3, #24]
 80014a4:	f003 0308 	and.w	r3, r3, #8
 80014a8:	60fb      	str	r3, [r7, #12]
 80014aa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80014ac:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80014b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014b2:	2312      	movs	r3, #18
 80014b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014b6:	2303      	movs	r3, #3
 80014b8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014ba:	f107 0318 	add.w	r3, r7, #24
 80014be:	4619      	mov	r1, r3
 80014c0:	480b      	ldr	r0, [pc, #44]	@ (80014f0 <HAL_I2C_MspInit+0x12c>)
 80014c2:	f001 fce3 	bl	8002e8c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80014c6:	4b09      	ldr	r3, [pc, #36]	@ (80014ec <HAL_I2C_MspInit+0x128>)
 80014c8:	69db      	ldr	r3, [r3, #28]
 80014ca:	4a08      	ldr	r2, [pc, #32]	@ (80014ec <HAL_I2C_MspInit+0x128>)
 80014cc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80014d0:	61d3      	str	r3, [r2, #28]
 80014d2:	4b06      	ldr	r3, [pc, #24]	@ (80014ec <HAL_I2C_MspInit+0x128>)
 80014d4:	69db      	ldr	r3, [r3, #28]
 80014d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80014da:	60bb      	str	r3, [r7, #8]
 80014dc:	68bb      	ldr	r3, [r7, #8]
}
 80014de:	bf00      	nop
 80014e0:	3728      	adds	r7, #40	@ 0x28
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	40005400 	.word	0x40005400
 80014ec:	40021000 	.word	0x40021000
 80014f0:	40010c00 	.word	0x40010c00
 80014f4:	200002fc 	.word	0x200002fc
 80014f8:	4002006c 	.word	0x4002006c
 80014fc:	40005800 	.word	0x40005800

08001500 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8001508:	1d39      	adds	r1, r7, #4
 800150a:	f04f 33ff 	mov.w	r3, #4294967295
 800150e:	2201      	movs	r2, #1
 8001510:	4803      	ldr	r0, [pc, #12]	@ (8001520 <__io_putchar+0x20>)
 8001512:	f005 fa11 	bl	8006938 <HAL_UART_Transmit>
  return ch;
 8001516:	687b      	ldr	r3, [r7, #4]
}
 8001518:	4618      	mov	r0, r3
 800151a:	3708      	adds	r7, #8
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}
 8001520:	200003c4 	.word	0x200003c4

08001524 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001524:	b590      	push	{r4, r7, lr}
 8001526:	b093      	sub	sp, #76	@ 0x4c
 8001528:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800152a:	f000 fc5b 	bl	8001de4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800152e:	f000 f975 	bl	800181c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001532:	f7ff fe65 	bl	8001200 <MX_GPIO_Init>
  MX_DMA_Init();
 8001536:	f7ff fe45 	bl	80011c4 <MX_DMA_Init>
  MX_I2C2_Init();
 800153a:	f7ff ff15 	bl	8001368 <MX_I2C2_Init>
  MX_I2C1_Init();
 800153e:	f7ff fee5 	bl	800130c <MX_I2C1_Init>
  MX_ADC1_Init();
 8001542:	f7ff fdc5 	bl	80010d0 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8001546:	f000 fbb3 	bl	8001cb0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  ssd1306_Init();
 800154a:	f005 fe19 	bl	8007180 <ssd1306_Init>
  HAL_ADCEx_Calibration_Start(&hadc1);
 800154e:	4899      	ldr	r0, [pc, #612]	@ (80017b4 <main+0x290>)
 8001550:	f001 f8fa 	bl	8002748 <HAL_ADCEx_Calibration_Start>
  HAL_Delay(100);
 8001554:	2064      	movs	r0, #100	@ 0x64
 8001556:	f000 fca7 	bl	8001ea8 <HAL_Delay>
  HAL_ADC_Start(&hadc1);
 800155a:	4896      	ldr	r0, [pc, #600]	@ (80017b4 <main+0x290>)
 800155c:	f000 fda0 	bl	80020a0 <HAL_ADC_Start>

  myMCP4725 = MCP4725_init(&hi2c1, MCP4725_ADDR, MCP47255_REF_VOLT);
 8001560:	4c95      	ldr	r4, [pc, #596]	@ (80017b8 <main+0x294>)
 8001562:	4638      	mov	r0, r7
 8001564:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001568:	2262      	movs	r2, #98	@ 0x62
 800156a:	4994      	ldr	r1, [pc, #592]	@ (80017bc <main+0x298>)
 800156c:	f005 fd5e 	bl	800702c <MCP4725_init>
 8001570:	4622      	mov	r2, r4
 8001572:	463b      	mov	r3, r7
 8001574:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001578:	e882 0003 	stmia.w	r2, {r0, r1}
  LoadCurrent_t selected_current = DEFAULT_OFF;  // Default selection
 800157c:	2300      	movs	r3, #0
 800157e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

  /* Initialise PID controller */
  PIDController pid = { PID_KP, PID_KI, PID_KD, PID_TAU, PID_LIM_MIN, PID_LIM_MAX,
 8001582:	f107 030c 	add.w	r3, r7, #12
 8001586:	2238      	movs	r2, #56	@ 0x38
 8001588:	2100      	movs	r1, #0
 800158a:	4618      	mov	r0, r3
 800158c:	f006 ffb3 	bl	80084f6 <memset>
 8001590:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001594:	60fb      	str	r3, [r7, #12]
 8001596:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800159a:	613b      	str	r3, [r7, #16]
 800159c:	4b88      	ldr	r3, [pc, #544]	@ (80017c0 <main+0x29c>)
 800159e:	61bb      	str	r3, [r7, #24]
 80015a0:	f04f 438b 	mov.w	r3, #1166016512	@ 0x45800000
 80015a4:	623b      	str	r3, [r7, #32]
 80015a6:	4b87      	ldr	r3, [pc, #540]	@ (80017c4 <main+0x2a0>)
 80015a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80015aa:	4b87      	ldr	r3, [pc, #540]	@ (80017c8 <main+0x2a4>)
 80015ac:	62bb      	str	r3, [r7, #40]	@ 0x28
 80015ae:	4b87      	ldr	r3, [pc, #540]	@ (80017cc <main+0x2a8>)
 80015b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
		  	  	  	  	  PID_LIM_MIN_INT, PID_LIM_MAX_INT, SAMPLE_TIME_S};
  PIDController_Init(&pid);
 80015b2:	f107 030c 	add.w	r3, r7, #12
 80015b6:	4618      	mov	r0, r3
 80015b8:	f005 fd8c 	bl	80070d4 <PIDController_Init>

  // Print the basic format (main page)
  HAL_Delay(100);
 80015bc:	2064      	movs	r0, #100	@ 0x64
 80015be:	f000 fc73 	bl	8001ea8 <HAL_Delay>
  myOLED_char(1, 12, "Volt = ");
 80015c2:	4a83      	ldr	r2, [pc, #524]	@ (80017d0 <main+0x2ac>)
 80015c4:	210c      	movs	r1, #12
 80015c6:	2001      	movs	r0, #1
 80015c8:	f000 f9bc 	bl	8001944 <myOLED_char>
  myOLED_char(1, 24, "Curr = ");
 80015cc:	4a81      	ldr	r2, [pc, #516]	@ (80017d4 <main+0x2b0>)
 80015ce:	2118      	movs	r1, #24
 80015d0:	2001      	movs	r0, #1
 80015d2:	f000 f9b7 	bl	8001944 <myOLED_char>
  myOLED_char(1, 36, "Chg  = ");
 80015d6:	4a80      	ldr	r2, [pc, #512]	@ (80017d8 <main+0x2b4>)
 80015d8:	2124      	movs	r1, #36	@ 0x24
 80015da:	2001      	movs	r0, #1
 80015dc:	f000 f9b2 	bl	8001944 <myOLED_char>
  myOLED_char(1, 48, "Temp = ");
 80015e0:	4a7e      	ldr	r2, [pc, #504]	@ (80017dc <main+0x2b8>)
 80015e2:	2130      	movs	r1, #48	@ 0x30
 80015e4:	2001      	movs	r0, #1
 80015e6:	f000 f9ad 	bl	8001944 <myOLED_char>
  ssd1306_UpdateScreen();
 80015ea:	f005 fe55 	bl	8007298 <ssd1306_UpdateScreen>
  HAL_Delay(100);
 80015ee:	2064      	movs	r0, #100	@ 0x64
 80015f0:	f000 fc5a 	bl	8001ea8 <HAL_Delay>
//  	}
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  selected_current = CURRENT_2000mA;
 80015f4:	2304      	movs	r3, #4
 80015f6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  MCP4725_Set_Voltage(&myMCP4725, dac_voltage[selected_current]);
 80015fa:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80015fe:	4a78      	ldr	r2, [pc, #480]	@ (80017e0 <main+0x2bc>)
 8001600:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001604:	4619      	mov	r1, r3
 8001606:	486c      	ldr	r0, [pc, #432]	@ (80017b8 <main+0x294>)
 8001608:	f005 fd30 	bl	800706c <MCP4725_Set_Voltage>

  while (1)
  {
	  tick = HAL_GetTick();
 800160c:	f000 fc42 	bl	8001e94 <HAL_GetTick>
 8001610:	4603      	mov	r3, r0
 8001612:	4a74      	ldr	r2, [pc, #464]	@ (80017e4 <main+0x2c0>)
 8001614:	6013      	str	r3, [r2, #0]
	  myOLED_int(1, 2, tick);
 8001616:	4b73      	ldr	r3, [pc, #460]	@ (80017e4 <main+0x2c0>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	b29b      	uxth	r3, r3
 800161c:	461a      	mov	r2, r3
 800161e:	2102      	movs	r1, #2
 8001620:	2001      	movs	r0, #1
 8001622:	f000 f9d5 	bl	80019d0 <myOLED_int>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
//      MCP4725_Set_Voltage(&myMCP4725, dac_voltage[selected_current]);

	  HAL_ADC_PollForConversion(&hadc1, 10);
 8001626:	210a      	movs	r1, #10
 8001628:	4862      	ldr	r0, [pc, #392]	@ (80017b4 <main+0x290>)
 800162a:	f000 fde7 	bl	80021fc <HAL_ADC_PollForConversion>
  	  if(HAL_ADC_GetValue(&hadc1) >= 200){
 800162e:	4861      	ldr	r0, [pc, #388]	@ (80017b4 <main+0x290>)
 8001630:	f000 feea 	bl	8002408 <HAL_ADC_GetValue>
 8001634:	4603      	mov	r3, r0
 8001636:	2bc7      	cmp	r3, #199	@ 0xc7
 8001638:	d903      	bls.n	8001642 <main+0x11e>
  		  battery_detect = true;
 800163a:	4b6b      	ldr	r3, [pc, #428]	@ (80017e8 <main+0x2c4>)
 800163c:	2201      	movs	r2, #1
 800163e:	701a      	strb	r2, [r3, #0]
 8001640:	e008      	b.n	8001654 <main+0x130>
  	  }else if(HAL_ADC_GetValue(&hadc1) < 200){
 8001642:	485c      	ldr	r0, [pc, #368]	@ (80017b4 <main+0x290>)
 8001644:	f000 fee0 	bl	8002408 <HAL_ADC_GetValue>
 8001648:	4603      	mov	r3, r0
 800164a:	2bc7      	cmp	r3, #199	@ 0xc7
 800164c:	d802      	bhi.n	8001654 <main+0x130>
  		  battery_detect = false;
 800164e:	4b66      	ldr	r3, [pc, #408]	@ (80017e8 <main+0x2c4>)
 8001650:	2200      	movs	r2, #0
 8001652:	701a      	strb	r2, [r3, #0]
  	  }
	  switch(state){
 8001654:	4b65      	ldr	r3, [pc, #404]	@ (80017ec <main+0x2c8>)
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	2b02      	cmp	r3, #2
 800165a:	d03d      	beq.n	80016d8 <main+0x1b4>
 800165c:	2b02      	cmp	r3, #2
 800165e:	f300 8085 	bgt.w	800176c <main+0x248>
 8001662:	2b00      	cmp	r3, #0
 8001664:	d002      	beq.n	800166c <main+0x148>
 8001666:	2b01      	cmp	r3, #1
 8001668:	d02a      	beq.n	80016c0 <main+0x19c>
 800166a:	e07f      	b.n	800176c <main+0x248>
	  case IDLE:
		  if(battery_detect){
 800166c:	4b5e      	ldr	r3, [pc, #376]	@ (80017e8 <main+0x2c4>)
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d003      	beq.n	800167c <main+0x158>
			  state = BATT_CONN;
 8001674:	4b5d      	ldr	r3, [pc, #372]	@ (80017ec <main+0x2c8>)
 8001676:	2201      	movs	r2, #1
 8001678:	701a      	strb	r2, [r3, #0]
			  // Resets the seconds count every time battery is removed
			  if(seconds > 1){
				  seconds = 0;
			  }
		  }
		  break;
 800167a:	e076      	b.n	800176a <main+0x246>
			  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, RESET);
 800167c:	2200      	movs	r2, #0
 800167e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001682:	485b      	ldr	r0, [pc, #364]	@ (80017f0 <main+0x2cc>)
 8001684:	f001 fd86 	bl	8003194 <HAL_GPIO_WritePin>
			  myOLED_char(50, 24, "        ");	// print empty spaces in curr
 8001688:	4a5a      	ldr	r2, [pc, #360]	@ (80017f4 <main+0x2d0>)
 800168a:	2118      	movs	r1, #24
 800168c:	2032      	movs	r0, #50	@ 0x32
 800168e:	f000 f959 	bl	8001944 <myOLED_char>
			  myOLED_char(50, 36, "       ");	// print empty spaces in chg
 8001692:	4a59      	ldr	r2, [pc, #356]	@ (80017f8 <main+0x2d4>)
 8001694:	2124      	movs	r1, #36	@ 0x24
 8001696:	2032      	movs	r0, #50	@ 0x32
 8001698:	f000 f954 	bl	8001944 <myOLED_char>
			  myOLED_char(50, 48, "  ");		// print empty spaces in temp
 800169c:	4a57      	ldr	r2, [pc, #348]	@ (80017fc <main+0x2d8>)
 800169e:	2130      	movs	r1, #48	@ 0x30
 80016a0:	2032      	movs	r0, #50	@ 0x32
 80016a2:	f000 f94f 	bl	8001944 <myOLED_char>
			  myOLED_int(50, 2, 0);
 80016a6:	2200      	movs	r2, #0
 80016a8:	2102      	movs	r1, #2
 80016aa:	2032      	movs	r0, #50	@ 0x32
 80016ac:	f000 f990 	bl	80019d0 <myOLED_int>
			  if(seconds > 1){
 80016b0:	4b53      	ldr	r3, [pc, #332]	@ (8001800 <main+0x2dc>)
 80016b2:	881b      	ldrh	r3, [r3, #0]
 80016b4:	2b01      	cmp	r3, #1
 80016b6:	d958      	bls.n	800176a <main+0x246>
				  seconds = 0;
 80016b8:	4b51      	ldr	r3, [pc, #324]	@ (8001800 <main+0x2dc>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	801a      	strh	r2, [r3, #0]
		  break;
 80016be:	e054      	b.n	800176a <main+0x246>

	  case BATT_CONN:
		  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, SET); 		// Turn on RED led for indication
 80016c0:	2201      	movs	r2, #1
 80016c2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80016c6:	484a      	ldr	r0, [pc, #296]	@ (80017f0 <main+0x2cc>)
 80016c8:	f001 fd64 	bl	8003194 <HAL_GPIO_WritePin>
		  LTC2944_Device_Config();
 80016cc:	f000 f902 	bl	80018d4 <LTC2944_Device_Config>
		  state = RUN;
 80016d0:	4b46      	ldr	r3, [pc, #280]	@ (80017ec <main+0x2c8>)
 80016d2:	2202      	movs	r2, #2
 80016d4:	701a      	strb	r2, [r3, #0]
		  break;
 80016d6:	e049      	b.n	800176c <main+0x248>

	  case RUN:
		  /*
		  * test timer for run condition
		  */
		  if(tick - sec_prev >= 1000){		// 1000ms = 1 sec
 80016d8:	4b42      	ldr	r3, [pc, #264]	@ (80017e4 <main+0x2c0>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a49      	ldr	r2, [pc, #292]	@ (8001804 <main+0x2e0>)
 80016de:	8812      	ldrh	r2, [r2, #0]
 80016e0:	1a9b      	subs	r3, r3, r2
 80016e2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80016e6:	d30f      	bcc.n	8001708 <main+0x1e4>
			  sec_prev = tick;
 80016e8:	4b3e      	ldr	r3, [pc, #248]	@ (80017e4 <main+0x2c0>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	b29a      	uxth	r2, r3
 80016ee:	4b45      	ldr	r3, [pc, #276]	@ (8001804 <main+0x2e0>)
 80016f0:	801a      	strh	r2, [r3, #0]
			  myOLED_int(50, 2, seconds++);
 80016f2:	4b43      	ldr	r3, [pc, #268]	@ (8001800 <main+0x2dc>)
 80016f4:	881b      	ldrh	r3, [r3, #0]
 80016f6:	1c5a      	adds	r2, r3, #1
 80016f8:	b291      	uxth	r1, r2
 80016fa:	4a41      	ldr	r2, [pc, #260]	@ (8001800 <main+0x2dc>)
 80016fc:	8011      	strh	r1, [r2, #0]
 80016fe:	461a      	mov	r2, r3
 8001700:	2102      	movs	r1, #2
 8001702:	2032      	movs	r0, #50	@ 0x32
 8001704:	f000 f964 	bl	80019d0 <myOLED_int>
		  }
		  if(battery_detect){
 8001708:	4b37      	ldr	r3, [pc, #220]	@ (80017e8 <main+0x2c4>)
 800170a:	781b      	ldrb	r3, [r3, #0]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d028      	beq.n	8001762 <main+0x23e>
			  status = LTC2944_Get_Battery_Data(&ltc2944_struct);
 8001710:	483d      	ldr	r0, [pc, #244]	@ (8001808 <main+0x2e4>)
 8001712:	f005 fba9 	bl	8006e68 <LTC2944_Get_Battery_Data>
 8001716:	4603      	mov	r3, r0
 8001718:	461a      	mov	r2, r3
 800171a:	4b3c      	ldr	r3, [pc, #240]	@ (800180c <main+0x2e8>)
 800171c:	701a      	strb	r2, [r3, #0]
			  // print the battery values on oled screen
			  myOLED_float(50, 12, ltc2944_data.voltage);
 800171e:	4b3c      	ldr	r3, [pc, #240]	@ (8001810 <main+0x2ec>)
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	461a      	mov	r2, r3
 8001724:	210c      	movs	r1, #12
 8001726:	2032      	movs	r0, #50	@ 0x32
 8001728:	f000 f928 	bl	800197c <myOLED_float>
			  myOLED_float(50, 24, ltc2944_data.current);
 800172c:	4b38      	ldr	r3, [pc, #224]	@ (8001810 <main+0x2ec>)
 800172e:	689b      	ldr	r3, [r3, #8]
 8001730:	461a      	mov	r2, r3
 8001732:	2118      	movs	r1, #24
 8001734:	2032      	movs	r0, #50	@ 0x32
 8001736:	f000 f921 	bl	800197c <myOLED_float>
			  myOLED_float(50, 36, ltc2944_data.acc_charge);
 800173a:	4b35      	ldr	r3, [pc, #212]	@ (8001810 <main+0x2ec>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	461a      	mov	r2, r3
 8001740:	2124      	movs	r1, #36	@ 0x24
 8001742:	2032      	movs	r0, #50	@ 0x32
 8001744:	f000 f91a 	bl	800197c <myOLED_float>
			  myOLED_int(50, 48, ltc2944_data.temperature);
 8001748:	4b31      	ldr	r3, [pc, #196]	@ (8001810 <main+0x2ec>)
 800174a:	68db      	ldr	r3, [r3, #12]
 800174c:	4618      	mov	r0, r3
 800174e:	f7ff fc69 	bl	8001024 <__aeabi_f2uiz>
 8001752:	4603      	mov	r3, r0
 8001754:	b29b      	uxth	r3, r3
 8001756:	461a      	mov	r2, r3
 8001758:	2130      	movs	r1, #48	@ 0x30
 800175a:	2032      	movs	r0, #50	@ 0x32
 800175c:	f000 f938 	bl	80019d0 <myOLED_int>
//				  break;
//			  }
		  }else{
			  state = IDLE;
		  }
		  break;
 8001760:	e004      	b.n	800176c <main+0x248>
			  state = IDLE;
 8001762:	4b22      	ldr	r3, [pc, #136]	@ (80017ec <main+0x2c8>)
 8001764:	2200      	movs	r2, #0
 8001766:	701a      	strb	r2, [r3, #0]
		  break;
 8001768:	e000      	b.n	800176c <main+0x248>
		  break;
 800176a:	bf00      	nop

	  default:
	  }

	  if(tick - prev_tick >= blink_delay){
 800176c:	4b1d      	ldr	r3, [pc, #116]	@ (80017e4 <main+0x2c0>)
 800176e:	681a      	ldr	r2, [r3, #0]
 8001770:	4b28      	ldr	r3, [pc, #160]	@ (8001814 <main+0x2f0>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	1ad3      	subs	r3, r2, r3
 8001776:	4a28      	ldr	r2, [pc, #160]	@ (8001818 <main+0x2f4>)
 8001778:	8812      	ldrh	r2, [r2, #0]
 800177a:	4293      	cmp	r3, r2
 800177c:	f4ff af46 	bcc.w	800160c <main+0xe8>
		  prev_tick = tick;
 8001780:	4b18      	ldr	r3, [pc, #96]	@ (80017e4 <main+0x2c0>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a23      	ldr	r2, [pc, #140]	@ (8001814 <main+0x2f0>)
 8001786:	6013      	str	r3, [r2, #0]
		  HAL_GPIO_TogglePin(LED_BLU_GPIO_Port, LED_BLU_Pin);
 8001788:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800178c:	4818      	ldr	r0, [pc, #96]	@ (80017f0 <main+0x2cc>)
 800178e:	f001 fd19 	bl	80031c4 <HAL_GPIO_TogglePin>
		  myOLED_int(75, 48, state);
 8001792:	4b16      	ldr	r3, [pc, #88]	@ (80017ec <main+0x2c8>)
 8001794:	781b      	ldrb	r3, [r3, #0]
 8001796:	461a      	mov	r2, r3
 8001798:	2130      	movs	r1, #48	@ 0x30
 800179a:	204b      	movs	r0, #75	@ 0x4b
 800179c:	f000 f918 	bl	80019d0 <myOLED_int>
		  myOLED_int(95, 48, status);
 80017a0:	4b1a      	ldr	r3, [pc, #104]	@ (800180c <main+0x2e8>)
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	461a      	mov	r2, r3
 80017a6:	2130      	movs	r1, #48	@ 0x30
 80017a8:	205f      	movs	r0, #95	@ 0x5f
 80017aa:	f000 f911 	bl	80019d0 <myOLED_int>
		  ssd1306_UpdateScreen();
 80017ae:	f005 fd73 	bl	8007298 <ssd1306_UpdateScreen>
	  tick = HAL_GetTick();
 80017b2:	e72b      	b.n	800160c <main+0xe8>
 80017b4:	20000224 	.word	0x20000224
 80017b8:	20000348 	.word	0x20000348
 80017bc:	20000254 	.word	0x20000254
 80017c0:	3ca3d70a 	.word	0x3ca3d70a
 80017c4:	c0a00000 	.word	0xc0a00000
 80017c8:	40a00000 	.word	0x40a00000
 80017cc:	3c23d70a 	.word	0x3c23d70a
 80017d0:	0800bcc4 	.word	0x0800bcc4
 80017d4:	0800bccc 	.word	0x0800bccc
 80017d8:	0800bcd4 	.word	0x0800bcd4
 80017dc:	0800bcdc 	.word	0x0800bcdc
 80017e0:	20000004 	.word	0x20000004
 80017e4:	20000340 	.word	0x20000340
 80017e8:	200003be 	.word	0x200003be
 80017ec:	200003bc 	.word	0x200003bc
 80017f0:	40011000 	.word	0x40011000
 80017f4:	0800bce4 	.word	0x0800bce4
 80017f8:	0800bcf0 	.word	0x0800bcf0
 80017fc:	0800bcf8 	.word	0x0800bcf8
 8001800:	200003ba 	.word	0x200003ba
 8001804:	200003b8 	.word	0x200003b8
 8001808:	20000350 	.word	0x20000350
 800180c:	200003bd 	.word	0x200003bd
 8001810:	20000410 	.word	0x20000410
 8001814:	20000344 	.word	0x20000344
 8001818:	20000000 	.word	0x20000000

0800181c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b094      	sub	sp, #80	@ 0x50
 8001820:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001822:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001826:	2228      	movs	r2, #40	@ 0x28
 8001828:	2100      	movs	r1, #0
 800182a:	4618      	mov	r0, r3
 800182c:	f006 fe63 	bl	80084f6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001830:	f107 0314 	add.w	r3, r7, #20
 8001834:	2200      	movs	r2, #0
 8001836:	601a      	str	r2, [r3, #0]
 8001838:	605a      	str	r2, [r3, #4]
 800183a:	609a      	str	r2, [r3, #8]
 800183c:	60da      	str	r2, [r3, #12]
 800183e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001840:	1d3b      	adds	r3, r7, #4
 8001842:	2200      	movs	r2, #0
 8001844:	601a      	str	r2, [r3, #0]
 8001846:	605a      	str	r2, [r3, #4]
 8001848:	609a      	str	r2, [r3, #8]
 800184a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800184c:	2301      	movs	r3, #1
 800184e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001850:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001854:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001856:	2300      	movs	r3, #0
 8001858:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800185a:	2301      	movs	r3, #1
 800185c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800185e:	2302      	movs	r3, #2
 8001860:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001862:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001866:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001868:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800186c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800186e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001872:	4618      	mov	r0, r3
 8001874:	f004 fa94 	bl	8005da0 <HAL_RCC_OscConfig>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d001      	beq.n	8001882 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800187e:	f000 f8cf 	bl	8001a20 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001882:	230f      	movs	r3, #15
 8001884:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001886:	2302      	movs	r3, #2
 8001888:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800188a:	2300      	movs	r3, #0
 800188c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800188e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001892:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001894:	2300      	movs	r3, #0
 8001896:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001898:	f107 0314 	add.w	r3, r7, #20
 800189c:	2102      	movs	r1, #2
 800189e:	4618      	mov	r0, r3
 80018a0:	f004 fd00 	bl	80062a4 <HAL_RCC_ClockConfig>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d001      	beq.n	80018ae <SystemClock_Config+0x92>
  {
    Error_Handler();
 80018aa:	f000 f8b9 	bl	8001a20 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80018ae:	2302      	movs	r3, #2
 80018b0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80018b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80018b6:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018b8:	1d3b      	adds	r3, r7, #4
 80018ba:	4618      	mov	r0, r3
 80018bc:	f004 fe80 	bl	80065c0 <HAL_RCCEx_PeriphCLKConfig>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d001      	beq.n	80018ca <SystemClock_Config+0xae>
  {
    Error_Handler();
 80018c6:	f000 f8ab 	bl	8001a20 <Error_Handler>
  }
}
 80018ca:	bf00      	nop
 80018cc:	3750      	adds	r7, #80	@ 0x50
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
	...

080018d4 <LTC2944_Device_Config>:

/* USER CODE BEGIN 4 */

HAL_StatusTypeDef LTC2944_Device_Config(void){
 80018d4:	b590      	push	{r4, r7, lr}
 80018d6:	b097      	sub	sp, #92	@ 0x5c
 80018d8:	af16      	add	r7, sp, #88	@ 0x58
	ltc2944_struct.adc_mode 		=	Automatic_Mode;
 80018da:	4b15      	ldr	r3, [pc, #84]	@ (8001930 <LTC2944_Device_Config+0x5c>)
 80018dc:	2203      	movs	r2, #3
 80018de:	701a      	strb	r2, [r3, #0]
	ltc2944_struct.alcc_mode 		= 	ALCC_Disable;
 80018e0:	4b13      	ldr	r3, [pc, #76]	@ (8001930 <LTC2944_Device_Config+0x5c>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	705a      	strb	r2, [r3, #1]
	ltc2944_struct.sense_resistor 	= 	5;
 80018e6:	4b12      	ldr	r3, [pc, #72]	@ (8001930 <LTC2944_Device_Config+0x5c>)
 80018e8:	4a12      	ldr	r2, [pc, #72]	@ (8001934 <LTC2944_Device_Config+0x60>)
 80018ea:	605a      	str	r2, [r3, #4]
	ltc2944_struct.batt_capacity 	=	7000;
 80018ec:	4b10      	ldr	r3, [pc, #64]	@ (8001930 <LTC2944_Device_Config+0x5c>)
 80018ee:	4a12      	ldr	r2, [pc, #72]	@ (8001938 <LTC2944_Device_Config+0x64>)
 80018f0:	609a      	str	r2, [r3, #8]
	ltc2944_struct.i2c_handle 		= 	hi2c2;
 80018f2:	4b0f      	ldr	r3, [pc, #60]	@ (8001930 <LTC2944_Device_Config+0x5c>)
 80018f4:	4a11      	ldr	r2, [pc, #68]	@ (800193c <LTC2944_Device_Config+0x68>)
 80018f6:	330c      	adds	r3, #12
 80018f8:	4611      	mov	r1, r2
 80018fa:	2254      	movs	r2, #84	@ 0x54
 80018fc:	4618      	mov	r0, r3
 80018fe:	f006 fe88 	bl	8008612 <memcpy>
	ltc2944_struct.vth_max 			=	MAX_LOAD_VOLTAGE;
 8001902:	4b0b      	ldr	r3, [pc, #44]	@ (8001930 <LTC2944_Device_Config+0x5c>)
 8001904:	4a0e      	ldr	r2, [pc, #56]	@ (8001940 <LTC2944_Device_Config+0x6c>)
 8001906:	661a      	str	r2, [r3, #96]	@ 0x60
	ltc2944_struct.cth_max			= 	MAX_LOAD_CURRENT;
 8001908:	4b09      	ldr	r3, [pc, #36]	@ (8001930 <LTC2944_Device_Config+0x5c>)
 800190a:	4a0a      	ldr	r2, [pc, #40]	@ (8001934 <LTC2944_Device_Config+0x60>)
 800190c:	665a      	str	r2, [r3, #100]	@ 0x64
	return LTC2944_Init(ltc2944_struct);
 800190e:	4c08      	ldr	r4, [pc, #32]	@ (8001930 <LTC2944_Device_Config+0x5c>)
 8001910:	4668      	mov	r0, sp
 8001912:	f104 0310 	add.w	r3, r4, #16
 8001916:	2258      	movs	r2, #88	@ 0x58
 8001918:	4619      	mov	r1, r3
 800191a:	f006 fe7a 	bl	8008612 <memcpy>
 800191e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001922:	f005 f9dd 	bl	8006ce0 <LTC2944_Init>
 8001926:	4603      	mov	r3, r0
}
 8001928:	4618      	mov	r0, r3
 800192a:	3704      	adds	r7, #4
 800192c:	46bd      	mov	sp, r7
 800192e:	bd90      	pop	{r4, r7, pc}
 8001930:	20000350 	.word	0x20000350
 8001934:	40a00000 	.word	0x40a00000
 8001938:	45dac000 	.word	0x45dac000
 800193c:	200002a8 	.word	0x200002a8
 8001940:	41f00000 	.word	0x41f00000

08001944 <myOLED_char>:

void myOLED_char(uint16_t cursorX, uint16_t cursorY, char* data){
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0
 800194a:	4603      	mov	r3, r0
 800194c:	603a      	str	r2, [r7, #0]
 800194e:	80fb      	strh	r3, [r7, #6]
 8001950:	460b      	mov	r3, r1
 8001952:	80bb      	strh	r3, [r7, #4]

	ssd1306_SetCursor(cursorX, cursorY);
 8001954:	88fb      	ldrh	r3, [r7, #6]
 8001956:	b2db      	uxtb	r3, r3
 8001958:	88ba      	ldrh	r2, [r7, #4]
 800195a:	b2d2      	uxtb	r2, r2
 800195c:	4611      	mov	r1, r2
 800195e:	4618      	mov	r0, r3
 8001960:	f005 fdc2 	bl	80074e8 <ssd1306_SetCursor>
	ssd1306_WriteString(data, Font_7x10, White);
 8001964:	4a04      	ldr	r2, [pc, #16]	@ (8001978 <myOLED_char+0x34>)
 8001966:	2301      	movs	r3, #1
 8001968:	ca06      	ldmia	r2, {r1, r2}
 800196a:	6838      	ldr	r0, [r7, #0]
 800196c:	f005 fd96 	bl	800749c <ssd1306_WriteString>
}
 8001970:	bf00      	nop
 8001972:	3708      	adds	r7, #8
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}
 8001978:	20000038 	.word	0x20000038

0800197c <myOLED_float>:

void myOLED_float(uint16_t cursorX, uint16_t cursorY, float data){
 800197c:	b580      	push	{r7, lr}
 800197e:	b086      	sub	sp, #24
 8001980:	af00      	add	r7, sp, #0
 8001982:	4603      	mov	r3, r0
 8001984:	603a      	str	r2, [r7, #0]
 8001986:	80fb      	strh	r3, [r7, #6]
 8001988:	460b      	mov	r3, r1
 800198a:	80bb      	strh	r3, [r7, #4]
	char str_data[10];

	sprintf(str_data, "%.3f", data);
 800198c:	6838      	ldr	r0, [r7, #0]
 800198e:	f7fe fd4b 	bl	8000428 <__aeabi_f2d>
 8001992:	4602      	mov	r2, r0
 8001994:	460b      	mov	r3, r1
 8001996:	f107 000c 	add.w	r0, r7, #12
 800199a:	490b      	ldr	r1, [pc, #44]	@ (80019c8 <myOLED_float+0x4c>)
 800199c:	f006 fd2e 	bl	80083fc <siprintf>
	ssd1306_SetCursor(cursorX, cursorY);
 80019a0:	88fb      	ldrh	r3, [r7, #6]
 80019a2:	b2db      	uxtb	r3, r3
 80019a4:	88ba      	ldrh	r2, [r7, #4]
 80019a6:	b2d2      	uxtb	r2, r2
 80019a8:	4611      	mov	r1, r2
 80019aa:	4618      	mov	r0, r3
 80019ac:	f005 fd9c 	bl	80074e8 <ssd1306_SetCursor>
	ssd1306_WriteString(str_data, Font_7x10, White);
 80019b0:	4a06      	ldr	r2, [pc, #24]	@ (80019cc <myOLED_float+0x50>)
 80019b2:	f107 000c 	add.w	r0, r7, #12
 80019b6:	2301      	movs	r3, #1
 80019b8:	ca06      	ldmia	r2, {r1, r2}
 80019ba:	f005 fd6f 	bl	800749c <ssd1306_WriteString>
}
 80019be:	bf00      	nop
 80019c0:	3718      	adds	r7, #24
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	0800bcfc 	.word	0x0800bcfc
 80019cc:	20000038 	.word	0x20000038

080019d0 <myOLED_int>:

void myOLED_int(uint16_t cursorX, uint16_t cursorY, uint16_t data){
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b086      	sub	sp, #24
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	4603      	mov	r3, r0
 80019d8:	80fb      	strh	r3, [r7, #6]
 80019da:	460b      	mov	r3, r1
 80019dc:	80bb      	strh	r3, [r7, #4]
 80019de:	4613      	mov	r3, r2
 80019e0:	807b      	strh	r3, [r7, #2]
	char str_data[10];

	sprintf(str_data, "%u", data);
 80019e2:	887a      	ldrh	r2, [r7, #2]
 80019e4:	f107 030c 	add.w	r3, r7, #12
 80019e8:	490b      	ldr	r1, [pc, #44]	@ (8001a18 <myOLED_int+0x48>)
 80019ea:	4618      	mov	r0, r3
 80019ec:	f006 fd06 	bl	80083fc <siprintf>
	ssd1306_SetCursor(cursorX, cursorY);
 80019f0:	88fb      	ldrh	r3, [r7, #6]
 80019f2:	b2db      	uxtb	r3, r3
 80019f4:	88ba      	ldrh	r2, [r7, #4]
 80019f6:	b2d2      	uxtb	r2, r2
 80019f8:	4611      	mov	r1, r2
 80019fa:	4618      	mov	r0, r3
 80019fc:	f005 fd74 	bl	80074e8 <ssd1306_SetCursor>
	ssd1306_WriteString(str_data, Font_7x10, White);
 8001a00:	4a06      	ldr	r2, [pc, #24]	@ (8001a1c <myOLED_int+0x4c>)
 8001a02:	f107 000c 	add.w	r0, r7, #12
 8001a06:	2301      	movs	r3, #1
 8001a08:	ca06      	ldmia	r2, {r1, r2}
 8001a0a:	f005 fd47 	bl	800749c <ssd1306_WriteString>
}
 8001a0e:	bf00      	nop
 8001a10:	3718      	adds	r7, #24
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	0800bd04 	.word	0x0800bd04
 8001a1c:	20000038 	.word	0x20000038

08001a20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a20:	b480      	push	{r7}
 8001a22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a24:	b672      	cpsid	i
}
 8001a26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a28:	bf00      	nop
 8001a2a:	e7fd      	b.n	8001a28 <Error_Handler+0x8>

08001a2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b085      	sub	sp, #20
 8001a30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001a32:	4b15      	ldr	r3, [pc, #84]	@ (8001a88 <HAL_MspInit+0x5c>)
 8001a34:	699b      	ldr	r3, [r3, #24]
 8001a36:	4a14      	ldr	r2, [pc, #80]	@ (8001a88 <HAL_MspInit+0x5c>)
 8001a38:	f043 0301 	orr.w	r3, r3, #1
 8001a3c:	6193      	str	r3, [r2, #24]
 8001a3e:	4b12      	ldr	r3, [pc, #72]	@ (8001a88 <HAL_MspInit+0x5c>)
 8001a40:	699b      	ldr	r3, [r3, #24]
 8001a42:	f003 0301 	and.w	r3, r3, #1
 8001a46:	60bb      	str	r3, [r7, #8]
 8001a48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a4a:	4b0f      	ldr	r3, [pc, #60]	@ (8001a88 <HAL_MspInit+0x5c>)
 8001a4c:	69db      	ldr	r3, [r3, #28]
 8001a4e:	4a0e      	ldr	r2, [pc, #56]	@ (8001a88 <HAL_MspInit+0x5c>)
 8001a50:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a54:	61d3      	str	r3, [r2, #28]
 8001a56:	4b0c      	ldr	r3, [pc, #48]	@ (8001a88 <HAL_MspInit+0x5c>)
 8001a58:	69db      	ldr	r3, [r3, #28]
 8001a5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a5e:	607b      	str	r3, [r7, #4]
 8001a60:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001a62:	4b0a      	ldr	r3, [pc, #40]	@ (8001a8c <HAL_MspInit+0x60>)
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	60fb      	str	r3, [r7, #12]
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001a6e:	60fb      	str	r3, [r7, #12]
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001a76:	60fb      	str	r3, [r7, #12]
 8001a78:	4a04      	ldr	r2, [pc, #16]	@ (8001a8c <HAL_MspInit+0x60>)
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a7e:	bf00      	nop
 8001a80:	3714      	adds	r7, #20
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bc80      	pop	{r7}
 8001a86:	4770      	bx	lr
 8001a88:	40021000 	.word	0x40021000
 8001a8c:	40010000 	.word	0x40010000

08001a90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a94:	bf00      	nop
 8001a96:	e7fd      	b.n	8001a94 <NMI_Handler+0x4>

08001a98 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a9c:	bf00      	nop
 8001a9e:	e7fd      	b.n	8001a9c <HardFault_Handler+0x4>

08001aa0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001aa4:	bf00      	nop
 8001aa6:	e7fd      	b.n	8001aa4 <MemManage_Handler+0x4>

08001aa8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001aac:	bf00      	nop
 8001aae:	e7fd      	b.n	8001aac <BusFault_Handler+0x4>

08001ab0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ab4:	bf00      	nop
 8001ab6:	e7fd      	b.n	8001ab4 <UsageFault_Handler+0x4>

08001ab8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001abc:	bf00      	nop
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bc80      	pop	{r7}
 8001ac2:	4770      	bx	lr

08001ac4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ac8:	bf00      	nop
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bc80      	pop	{r7}
 8001ace:	4770      	bx	lr

08001ad0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ad4:	bf00      	nop
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bc80      	pop	{r7}
 8001ada:	4770      	bx	lr

08001adc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ae0:	f000 f9c6 	bl	8001e70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ae4:	bf00      	nop
 8001ae6:	bd80      	pop	{r7, pc}

08001ae8 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8001aec:	4802      	ldr	r0, [pc, #8]	@ (8001af8 <DMA1_Channel6_IRQHandler+0x10>)
 8001aee:	f001 f8b9 	bl	8002c64 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8001af2:	bf00      	nop
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	200002fc 	.word	0x200002fc

08001afc <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LTC2944_ALCC_Pin);
 8001b00:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001b04:	f001 fb78 	bl	80031f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001b08:	bf00      	nop
 8001b0a:	bd80      	pop	{r7, pc}

08001b0c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001b10:	4802      	ldr	r0, [pc, #8]	@ (8001b1c <I2C1_EV_IRQHandler+0x10>)
 8001b12:	f002 f957 	bl	8003dc4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001b16:	bf00      	nop
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	20000254 	.word	0x20000254

08001b20 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0
  return 1;
 8001b24:	2301      	movs	r3, #1
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bc80      	pop	{r7}
 8001b2c:	4770      	bx	lr

08001b2e <_kill>:

int _kill(int pid, int sig)
{
 8001b2e:	b580      	push	{r7, lr}
 8001b30:	b082      	sub	sp, #8
 8001b32:	af00      	add	r7, sp, #0
 8001b34:	6078      	str	r0, [r7, #4]
 8001b36:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001b38:	f006 fd30 	bl	800859c <__errno>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2216      	movs	r2, #22
 8001b40:	601a      	str	r2, [r3, #0]
  return -1;
 8001b42:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	3708      	adds	r7, #8
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}

08001b4e <_exit>:

void _exit (int status)
{
 8001b4e:	b580      	push	{r7, lr}
 8001b50:	b082      	sub	sp, #8
 8001b52:	af00      	add	r7, sp, #0
 8001b54:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001b56:	f04f 31ff 	mov.w	r1, #4294967295
 8001b5a:	6878      	ldr	r0, [r7, #4]
 8001b5c:	f7ff ffe7 	bl	8001b2e <_kill>
  while (1) {}    /* Make sure we hang here */
 8001b60:	bf00      	nop
 8001b62:	e7fd      	b.n	8001b60 <_exit+0x12>

08001b64 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b086      	sub	sp, #24
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	60f8      	str	r0, [r7, #12]
 8001b6c:	60b9      	str	r1, [r7, #8]
 8001b6e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b70:	2300      	movs	r3, #0
 8001b72:	617b      	str	r3, [r7, #20]
 8001b74:	e00a      	b.n	8001b8c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001b76:	f3af 8000 	nop.w
 8001b7a:	4601      	mov	r1, r0
 8001b7c:	68bb      	ldr	r3, [r7, #8]
 8001b7e:	1c5a      	adds	r2, r3, #1
 8001b80:	60ba      	str	r2, [r7, #8]
 8001b82:	b2ca      	uxtb	r2, r1
 8001b84:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	3301      	adds	r3, #1
 8001b8a:	617b      	str	r3, [r7, #20]
 8001b8c:	697a      	ldr	r2, [r7, #20]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	429a      	cmp	r2, r3
 8001b92:	dbf0      	blt.n	8001b76 <_read+0x12>
  }

  return len;
 8001b94:	687b      	ldr	r3, [r7, #4]
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	3718      	adds	r7, #24
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}

08001b9e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b9e:	b580      	push	{r7, lr}
 8001ba0:	b086      	sub	sp, #24
 8001ba2:	af00      	add	r7, sp, #0
 8001ba4:	60f8      	str	r0, [r7, #12]
 8001ba6:	60b9      	str	r1, [r7, #8]
 8001ba8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001baa:	2300      	movs	r3, #0
 8001bac:	617b      	str	r3, [r7, #20]
 8001bae:	e009      	b.n	8001bc4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	1c5a      	adds	r2, r3, #1
 8001bb4:	60ba      	str	r2, [r7, #8]
 8001bb6:	781b      	ldrb	r3, [r3, #0]
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f7ff fca1 	bl	8001500 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	3301      	adds	r3, #1
 8001bc2:	617b      	str	r3, [r7, #20]
 8001bc4:	697a      	ldr	r2, [r7, #20]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	dbf1      	blt.n	8001bb0 <_write+0x12>
  }
  return len;
 8001bcc:	687b      	ldr	r3, [r7, #4]
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	3718      	adds	r7, #24
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}

08001bd6 <_close>:

int _close(int file)
{
 8001bd6:	b480      	push	{r7}
 8001bd8:	b083      	sub	sp, #12
 8001bda:	af00      	add	r7, sp, #0
 8001bdc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001bde:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	370c      	adds	r7, #12
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bc80      	pop	{r7}
 8001bea:	4770      	bx	lr

08001bec <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b083      	sub	sp, #12
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
 8001bf4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001bfc:	605a      	str	r2, [r3, #4]
  return 0;
 8001bfe:	2300      	movs	r3, #0
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	370c      	adds	r7, #12
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bc80      	pop	{r7}
 8001c08:	4770      	bx	lr

08001c0a <_isatty>:

int _isatty(int file)
{
 8001c0a:	b480      	push	{r7}
 8001c0c:	b083      	sub	sp, #12
 8001c0e:	af00      	add	r7, sp, #0
 8001c10:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001c12:	2301      	movs	r3, #1
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	370c      	adds	r7, #12
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bc80      	pop	{r7}
 8001c1c:	4770      	bx	lr

08001c1e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c1e:	b480      	push	{r7}
 8001c20:	b085      	sub	sp, #20
 8001c22:	af00      	add	r7, sp, #0
 8001c24:	60f8      	str	r0, [r7, #12]
 8001c26:	60b9      	str	r1, [r7, #8]
 8001c28:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001c2a:	2300      	movs	r3, #0
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	3714      	adds	r7, #20
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bc80      	pop	{r7}
 8001c34:	4770      	bx	lr
	...

08001c38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b086      	sub	sp, #24
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c40:	4a14      	ldr	r2, [pc, #80]	@ (8001c94 <_sbrk+0x5c>)
 8001c42:	4b15      	ldr	r3, [pc, #84]	@ (8001c98 <_sbrk+0x60>)
 8001c44:	1ad3      	subs	r3, r2, r3
 8001c46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c4c:	4b13      	ldr	r3, [pc, #76]	@ (8001c9c <_sbrk+0x64>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d102      	bne.n	8001c5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c54:	4b11      	ldr	r3, [pc, #68]	@ (8001c9c <_sbrk+0x64>)
 8001c56:	4a12      	ldr	r2, [pc, #72]	@ (8001ca0 <_sbrk+0x68>)
 8001c58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c5a:	4b10      	ldr	r3, [pc, #64]	@ (8001c9c <_sbrk+0x64>)
 8001c5c:	681a      	ldr	r2, [r3, #0]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	4413      	add	r3, r2
 8001c62:	693a      	ldr	r2, [r7, #16]
 8001c64:	429a      	cmp	r2, r3
 8001c66:	d207      	bcs.n	8001c78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c68:	f006 fc98 	bl	800859c <__errno>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	220c      	movs	r2, #12
 8001c70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c72:	f04f 33ff 	mov.w	r3, #4294967295
 8001c76:	e009      	b.n	8001c8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c78:	4b08      	ldr	r3, [pc, #32]	@ (8001c9c <_sbrk+0x64>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c7e:	4b07      	ldr	r3, [pc, #28]	@ (8001c9c <_sbrk+0x64>)
 8001c80:	681a      	ldr	r2, [r3, #0]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	4413      	add	r3, r2
 8001c86:	4a05      	ldr	r2, [pc, #20]	@ (8001c9c <_sbrk+0x64>)
 8001c88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	3718      	adds	r7, #24
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}
 8001c94:	20005000 	.word	0x20005000
 8001c98:	00000400 	.word	0x00000400
 8001c9c:	200003c0 	.word	0x200003c0
 8001ca0:	20000978 	.word	0x20000978

08001ca4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ca8:	bf00      	nop
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bc80      	pop	{r7}
 8001cae:	4770      	bx	lr

08001cb0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001cb4:	4b11      	ldr	r3, [pc, #68]	@ (8001cfc <MX_USART2_UART_Init+0x4c>)
 8001cb6:	4a12      	ldr	r2, [pc, #72]	@ (8001d00 <MX_USART2_UART_Init+0x50>)
 8001cb8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001cba:	4b10      	ldr	r3, [pc, #64]	@ (8001cfc <MX_USART2_UART_Init+0x4c>)
 8001cbc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001cc0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001cc2:	4b0e      	ldr	r3, [pc, #56]	@ (8001cfc <MX_USART2_UART_Init+0x4c>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001cc8:	4b0c      	ldr	r3, [pc, #48]	@ (8001cfc <MX_USART2_UART_Init+0x4c>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001cce:	4b0b      	ldr	r3, [pc, #44]	@ (8001cfc <MX_USART2_UART_Init+0x4c>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001cd4:	4b09      	ldr	r3, [pc, #36]	@ (8001cfc <MX_USART2_UART_Init+0x4c>)
 8001cd6:	220c      	movs	r2, #12
 8001cd8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cda:	4b08      	ldr	r3, [pc, #32]	@ (8001cfc <MX_USART2_UART_Init+0x4c>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ce0:	4b06      	ldr	r3, [pc, #24]	@ (8001cfc <MX_USART2_UART_Init+0x4c>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001ce6:	4805      	ldr	r0, [pc, #20]	@ (8001cfc <MX_USART2_UART_Init+0x4c>)
 8001ce8:	f004 fdd6 	bl	8006898 <HAL_UART_Init>
 8001cec:	4603      	mov	r3, r0
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d001      	beq.n	8001cf6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001cf2:	f7ff fe95 	bl	8001a20 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001cf6:	bf00      	nop
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	200003c4 	.word	0x200003c4
 8001d00:	40004400 	.word	0x40004400

08001d04 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b088      	sub	sp, #32
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d0c:	f107 0310 	add.w	r3, r7, #16
 8001d10:	2200      	movs	r2, #0
 8001d12:	601a      	str	r2, [r3, #0]
 8001d14:	605a      	str	r2, [r3, #4]
 8001d16:	609a      	str	r2, [r3, #8]
 8001d18:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a1b      	ldr	r2, [pc, #108]	@ (8001d8c <HAL_UART_MspInit+0x88>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d12f      	bne.n	8001d84 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d24:	4b1a      	ldr	r3, [pc, #104]	@ (8001d90 <HAL_UART_MspInit+0x8c>)
 8001d26:	69db      	ldr	r3, [r3, #28]
 8001d28:	4a19      	ldr	r2, [pc, #100]	@ (8001d90 <HAL_UART_MspInit+0x8c>)
 8001d2a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d2e:	61d3      	str	r3, [r2, #28]
 8001d30:	4b17      	ldr	r3, [pc, #92]	@ (8001d90 <HAL_UART_MspInit+0x8c>)
 8001d32:	69db      	ldr	r3, [r3, #28]
 8001d34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d38:	60fb      	str	r3, [r7, #12]
 8001d3a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d3c:	4b14      	ldr	r3, [pc, #80]	@ (8001d90 <HAL_UART_MspInit+0x8c>)
 8001d3e:	699b      	ldr	r3, [r3, #24]
 8001d40:	4a13      	ldr	r2, [pc, #76]	@ (8001d90 <HAL_UART_MspInit+0x8c>)
 8001d42:	f043 0304 	orr.w	r3, r3, #4
 8001d46:	6193      	str	r3, [r2, #24]
 8001d48:	4b11      	ldr	r3, [pc, #68]	@ (8001d90 <HAL_UART_MspInit+0x8c>)
 8001d4a:	699b      	ldr	r3, [r3, #24]
 8001d4c:	f003 0304 	and.w	r3, r3, #4
 8001d50:	60bb      	str	r3, [r7, #8]
 8001d52:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001d54:	2304      	movs	r3, #4
 8001d56:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d58:	2302      	movs	r3, #2
 8001d5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d5c:	2303      	movs	r3, #3
 8001d5e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d60:	f107 0310 	add.w	r3, r7, #16
 8001d64:	4619      	mov	r1, r3
 8001d66:	480b      	ldr	r0, [pc, #44]	@ (8001d94 <HAL_UART_MspInit+0x90>)
 8001d68:	f001 f890 	bl	8002e8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001d6c:	2308      	movs	r3, #8
 8001d6e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d70:	2300      	movs	r3, #0
 8001d72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d74:	2300      	movs	r3, #0
 8001d76:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d78:	f107 0310 	add.w	r3, r7, #16
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	4805      	ldr	r0, [pc, #20]	@ (8001d94 <HAL_UART_MspInit+0x90>)
 8001d80:	f001 f884 	bl	8002e8c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001d84:	bf00      	nop
 8001d86:	3720      	adds	r7, #32
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	40004400 	.word	0x40004400
 8001d90:	40021000 	.word	0x40021000
 8001d94:	40010800 	.word	0x40010800

08001d98 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001d98:	f7ff ff84 	bl	8001ca4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d9c:	480b      	ldr	r0, [pc, #44]	@ (8001dcc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001d9e:	490c      	ldr	r1, [pc, #48]	@ (8001dd0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001da0:	4a0c      	ldr	r2, [pc, #48]	@ (8001dd4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001da2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001da4:	e002      	b.n	8001dac <LoopCopyDataInit>

08001da6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001da6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001da8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001daa:	3304      	adds	r3, #4

08001dac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001dac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001dae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001db0:	d3f9      	bcc.n	8001da6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001db2:	4a09      	ldr	r2, [pc, #36]	@ (8001dd8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001db4:	4c09      	ldr	r4, [pc, #36]	@ (8001ddc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001db6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001db8:	e001      	b.n	8001dbe <LoopFillZerobss>

08001dba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001dba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001dbc:	3204      	adds	r2, #4

08001dbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001dbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001dc0:	d3fb      	bcc.n	8001dba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001dc2:	f006 fbf1 	bl	80085a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001dc6:	f7ff fbad 	bl	8001524 <main>
  bx lr
 8001dca:	4770      	bx	lr
  ldr r0, =_sdata
 8001dcc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001dd0:	20000208 	.word	0x20000208
  ldr r2, =_sidata
 8001dd4:	0800c918 	.word	0x0800c918
  ldr r2, =_sbss
 8001dd8:	20000208 	.word	0x20000208
  ldr r4, =_ebss
 8001ddc:	20000978 	.word	0x20000978

08001de0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001de0:	e7fe      	b.n	8001de0 <ADC1_2_IRQHandler>
	...

08001de4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001de8:	4b08      	ldr	r3, [pc, #32]	@ (8001e0c <HAL_Init+0x28>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a07      	ldr	r2, [pc, #28]	@ (8001e0c <HAL_Init+0x28>)
 8001dee:	f043 0310 	orr.w	r3, r3, #16
 8001df2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001df4:	2003      	movs	r0, #3
 8001df6:	f000 fe21 	bl	8002a3c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001dfa:	200f      	movs	r0, #15
 8001dfc:	f000 f808 	bl	8001e10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e00:	f7ff fe14 	bl	8001a2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e04:	2300      	movs	r3, #0
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	40022000 	.word	0x40022000

08001e10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b082      	sub	sp, #8
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e18:	4b12      	ldr	r3, [pc, #72]	@ (8001e64 <HAL_InitTick+0x54>)
 8001e1a:	681a      	ldr	r2, [r3, #0]
 8001e1c:	4b12      	ldr	r3, [pc, #72]	@ (8001e68 <HAL_InitTick+0x58>)
 8001e1e:	781b      	ldrb	r3, [r3, #0]
 8001e20:	4619      	mov	r1, r3
 8001e22:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e26:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f000 fe39 	bl	8002aa6 <HAL_SYSTICK_Config>
 8001e34:	4603      	mov	r3, r0
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d001      	beq.n	8001e3e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e00e      	b.n	8001e5c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2b0f      	cmp	r3, #15
 8001e42:	d80a      	bhi.n	8001e5a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e44:	2200      	movs	r2, #0
 8001e46:	6879      	ldr	r1, [r7, #4]
 8001e48:	f04f 30ff 	mov.w	r0, #4294967295
 8001e4c:	f000 fe01 	bl	8002a52 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e50:	4a06      	ldr	r2, [pc, #24]	@ (8001e6c <HAL_InitTick+0x5c>)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e56:	2300      	movs	r3, #0
 8001e58:	e000      	b.n	8001e5c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	3708      	adds	r7, #8
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}
 8001e64:	2000001c 	.word	0x2000001c
 8001e68:	20000024 	.word	0x20000024
 8001e6c:	20000020 	.word	0x20000020

08001e70 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e70:	b480      	push	{r7}
 8001e72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e74:	4b05      	ldr	r3, [pc, #20]	@ (8001e8c <HAL_IncTick+0x1c>)
 8001e76:	781b      	ldrb	r3, [r3, #0]
 8001e78:	461a      	mov	r2, r3
 8001e7a:	4b05      	ldr	r3, [pc, #20]	@ (8001e90 <HAL_IncTick+0x20>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4413      	add	r3, r2
 8001e80:	4a03      	ldr	r2, [pc, #12]	@ (8001e90 <HAL_IncTick+0x20>)
 8001e82:	6013      	str	r3, [r2, #0]
}
 8001e84:	bf00      	nop
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bc80      	pop	{r7}
 8001e8a:	4770      	bx	lr
 8001e8c:	20000024 	.word	0x20000024
 8001e90:	2000040c 	.word	0x2000040c

08001e94 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e94:	b480      	push	{r7}
 8001e96:	af00      	add	r7, sp, #0
  return uwTick;
 8001e98:	4b02      	ldr	r3, [pc, #8]	@ (8001ea4 <HAL_GetTick+0x10>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bc80      	pop	{r7}
 8001ea2:	4770      	bx	lr
 8001ea4:	2000040c 	.word	0x2000040c

08001ea8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b084      	sub	sp, #16
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001eb0:	f7ff fff0 	bl	8001e94 <HAL_GetTick>
 8001eb4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ec0:	d005      	beq.n	8001ece <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ec2:	4b0a      	ldr	r3, [pc, #40]	@ (8001eec <HAL_Delay+0x44>)
 8001ec4:	781b      	ldrb	r3, [r3, #0]
 8001ec6:	461a      	mov	r2, r3
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	4413      	add	r3, r2
 8001ecc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ece:	bf00      	nop
 8001ed0:	f7ff ffe0 	bl	8001e94 <HAL_GetTick>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	68bb      	ldr	r3, [r7, #8]
 8001ed8:	1ad3      	subs	r3, r2, r3
 8001eda:	68fa      	ldr	r2, [r7, #12]
 8001edc:	429a      	cmp	r2, r3
 8001ede:	d8f7      	bhi.n	8001ed0 <HAL_Delay+0x28>
  {
  }
}
 8001ee0:	bf00      	nop
 8001ee2:	bf00      	nop
 8001ee4:	3710      	adds	r7, #16
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	20000024 	.word	0x20000024

08001ef0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b086      	sub	sp, #24
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001efc:	2300      	movs	r3, #0
 8001efe:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001f00:	2300      	movs	r3, #0
 8001f02:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001f04:	2300      	movs	r3, #0
 8001f06:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d101      	bne.n	8001f12 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e0be      	b.n	8002090 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	689b      	ldr	r3, [r3, #8]
 8001f16:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d109      	bne.n	8001f34 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2200      	movs	r2, #0
 8001f24:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f2e:	6878      	ldr	r0, [r7, #4]
 8001f30:	f7ff f90c 	bl	800114c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001f34:	6878      	ldr	r0, [r7, #4]
 8001f36:	f000 fbc5 	bl	80026c4 <ADC_ConversionStop_Disable>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f42:	f003 0310 	and.w	r3, r3, #16
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	f040 8099 	bne.w	800207e <HAL_ADC_Init+0x18e>
 8001f4c:	7dfb      	ldrb	r3, [r7, #23]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	f040 8095 	bne.w	800207e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f58:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001f5c:	f023 0302 	bic.w	r3, r3, #2
 8001f60:	f043 0202 	orr.w	r2, r3, #2
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001f70:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	7b1b      	ldrb	r3, [r3, #12]
 8001f76:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001f78:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001f7a:	68ba      	ldr	r2, [r7, #8]
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	689b      	ldr	r3, [r3, #8]
 8001f84:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001f88:	d003      	beq.n	8001f92 <HAL_ADC_Init+0xa2>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	2b01      	cmp	r3, #1
 8001f90:	d102      	bne.n	8001f98 <HAL_ADC_Init+0xa8>
 8001f92:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001f96:	e000      	b.n	8001f9a <HAL_ADC_Init+0xaa>
 8001f98:	2300      	movs	r3, #0
 8001f9a:	693a      	ldr	r2, [r7, #16]
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	7d1b      	ldrb	r3, [r3, #20]
 8001fa4:	2b01      	cmp	r3, #1
 8001fa6:	d119      	bne.n	8001fdc <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	7b1b      	ldrb	r3, [r3, #12]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d109      	bne.n	8001fc4 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	699b      	ldr	r3, [r3, #24]
 8001fb4:	3b01      	subs	r3, #1
 8001fb6:	035a      	lsls	r2, r3, #13
 8001fb8:	693b      	ldr	r3, [r7, #16]
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001fc0:	613b      	str	r3, [r7, #16]
 8001fc2:	e00b      	b.n	8001fdc <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fc8:	f043 0220 	orr.w	r2, r3, #32
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fd4:	f043 0201 	orr.w	r2, r3, #1
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	693a      	ldr	r2, [r7, #16]
 8001fec:	430a      	orrs	r2, r1
 8001fee:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	689a      	ldr	r2, [r3, #8]
 8001ff6:	4b28      	ldr	r3, [pc, #160]	@ (8002098 <HAL_ADC_Init+0x1a8>)
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	687a      	ldr	r2, [r7, #4]
 8001ffc:	6812      	ldr	r2, [r2, #0]
 8001ffe:	68b9      	ldr	r1, [r7, #8]
 8002000:	430b      	orrs	r3, r1
 8002002:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	689b      	ldr	r3, [r3, #8]
 8002008:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800200c:	d003      	beq.n	8002016 <HAL_ADC_Init+0x126>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	689b      	ldr	r3, [r3, #8]
 8002012:	2b01      	cmp	r3, #1
 8002014:	d104      	bne.n	8002020 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	691b      	ldr	r3, [r3, #16]
 800201a:	3b01      	subs	r3, #1
 800201c:	051b      	lsls	r3, r3, #20
 800201e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002026:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	68fa      	ldr	r2, [r7, #12]
 8002030:	430a      	orrs	r2, r1
 8002032:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	689a      	ldr	r2, [r3, #8]
 800203a:	4b18      	ldr	r3, [pc, #96]	@ (800209c <HAL_ADC_Init+0x1ac>)
 800203c:	4013      	ands	r3, r2
 800203e:	68ba      	ldr	r2, [r7, #8]
 8002040:	429a      	cmp	r2, r3
 8002042:	d10b      	bne.n	800205c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2200      	movs	r2, #0
 8002048:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800204e:	f023 0303 	bic.w	r3, r3, #3
 8002052:	f043 0201 	orr.w	r2, r3, #1
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800205a:	e018      	b.n	800208e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002060:	f023 0312 	bic.w	r3, r3, #18
 8002064:	f043 0210 	orr.w	r2, r3, #16
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002070:	f043 0201 	orr.w	r2, r3, #1
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002078:	2301      	movs	r3, #1
 800207a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800207c:	e007      	b.n	800208e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002082:	f043 0210 	orr.w	r2, r3, #16
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800208e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002090:	4618      	mov	r0, r3
 8002092:	3718      	adds	r7, #24
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}
 8002098:	ffe1f7fd 	.word	0xffe1f7fd
 800209c:	ff1f0efe 	.word	0xff1f0efe

080020a0 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b084      	sub	sp, #16
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020a8:	2300      	movs	r3, #0
 80020aa:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80020b2:	2b01      	cmp	r3, #1
 80020b4:	d101      	bne.n	80020ba <HAL_ADC_Start+0x1a>
 80020b6:	2302      	movs	r3, #2
 80020b8:	e098      	b.n	80021ec <HAL_ADC_Start+0x14c>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2201      	movs	r2, #1
 80020be:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80020c2:	6878      	ldr	r0, [r7, #4]
 80020c4:	f000 faa4 	bl	8002610 <ADC_Enable>
 80020c8:	4603      	mov	r3, r0
 80020ca:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80020cc:	7bfb      	ldrb	r3, [r7, #15]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	f040 8087 	bne.w	80021e2 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020d8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80020dc:	f023 0301 	bic.w	r3, r3, #1
 80020e0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a41      	ldr	r2, [pc, #260]	@ (80021f4 <HAL_ADC_Start+0x154>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d105      	bne.n	80020fe <HAL_ADC_Start+0x5e>
 80020f2:	4b41      	ldr	r3, [pc, #260]	@ (80021f8 <HAL_ADC_Start+0x158>)
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d115      	bne.n	800212a <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002102:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002114:	2b00      	cmp	r3, #0
 8002116:	d026      	beq.n	8002166 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800211c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002120:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002128:	e01d      	b.n	8002166 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800212e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a2f      	ldr	r2, [pc, #188]	@ (80021f8 <HAL_ADC_Start+0x158>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d004      	beq.n	800214a <HAL_ADC_Start+0xaa>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a2b      	ldr	r2, [pc, #172]	@ (80021f4 <HAL_ADC_Start+0x154>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d10d      	bne.n	8002166 <HAL_ADC_Start+0xc6>
 800214a:	4b2b      	ldr	r3, [pc, #172]	@ (80021f8 <HAL_ADC_Start+0x158>)
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002152:	2b00      	cmp	r3, #0
 8002154:	d007      	beq.n	8002166 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800215a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800215e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800216a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800216e:	2b00      	cmp	r3, #0
 8002170:	d006      	beq.n	8002180 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002176:	f023 0206 	bic.w	r2, r3, #6
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800217e:	e002      	b.n	8002186 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2200      	movs	r2, #0
 8002184:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2200      	movs	r2, #0
 800218a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f06f 0202 	mvn.w	r2, #2
 8002196:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	689b      	ldr	r3, [r3, #8]
 800219e:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80021a2:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80021a6:	d113      	bne.n	80021d0 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80021ac:	4a11      	ldr	r2, [pc, #68]	@ (80021f4 <HAL_ADC_Start+0x154>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d105      	bne.n	80021be <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80021b2:	4b11      	ldr	r3, [pc, #68]	@ (80021f8 <HAL_ADC_Start+0x158>)
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d108      	bne.n	80021d0 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	689a      	ldr	r2, [r3, #8]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 80021cc:	609a      	str	r2, [r3, #8]
 80021ce:	e00c      	b.n	80021ea <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	689a      	ldr	r2, [r3, #8]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80021de:	609a      	str	r2, [r3, #8]
 80021e0:	e003      	b.n	80021ea <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2200      	movs	r2, #0
 80021e6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80021ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	3710      	adds	r7, #16
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}
 80021f4:	40012800 	.word	0x40012800
 80021f8:	40012400 	.word	0x40012400

080021fc <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80021fc:	b590      	push	{r4, r7, lr}
 80021fe:	b087      	sub	sp, #28
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
 8002204:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002206:	2300      	movs	r3, #0
 8002208:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800220a:	2300      	movs	r3, #0
 800220c:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 800220e:	2300      	movs	r3, #0
 8002210:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8002212:	f7ff fe3f 	bl	8001e94 <HAL_GetTick>
 8002216:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	689b      	ldr	r3, [r3, #8]
 800221e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002222:	2b00      	cmp	r3, #0
 8002224:	d00b      	beq.n	800223e <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800222a:	f043 0220 	orr.w	r2, r3, #32
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2200      	movs	r2, #0
 8002236:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 800223a:	2301      	movs	r3, #1
 800223c:	e0d3      	b.n	80023e6 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002248:	2b00      	cmp	r3, #0
 800224a:	d131      	bne.n	80022b0 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002252:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002256:	2b00      	cmp	r3, #0
 8002258:	d12a      	bne.n	80022b0 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800225a:	e021      	b.n	80022a0 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002262:	d01d      	beq.n	80022a0 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d007      	beq.n	800227a <HAL_ADC_PollForConversion+0x7e>
 800226a:	f7ff fe13 	bl	8001e94 <HAL_GetTick>
 800226e:	4602      	mov	r2, r0
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	1ad3      	subs	r3, r2, r3
 8002274:	683a      	ldr	r2, [r7, #0]
 8002276:	429a      	cmp	r2, r3
 8002278:	d212      	bcs.n	80022a0 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f003 0302 	and.w	r3, r3, #2
 8002284:	2b00      	cmp	r3, #0
 8002286:	d10b      	bne.n	80022a0 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800228c:	f043 0204 	orr.w	r2, r3, #4
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2200      	movs	r2, #0
 8002298:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 800229c:	2303      	movs	r3, #3
 800229e:	e0a2      	b.n	80023e6 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f003 0302 	and.w	r3, r3, #2
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d0d6      	beq.n	800225c <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80022ae:	e070      	b.n	8002392 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80022b0:	4b4f      	ldr	r3, [pc, #316]	@ (80023f0 <HAL_ADC_PollForConversion+0x1f4>)
 80022b2:	681c      	ldr	r4, [r3, #0]
 80022b4:	2002      	movs	r0, #2
 80022b6:	f004 fa39 	bl	800672c <HAL_RCCEx_GetPeriphCLKFreq>
 80022ba:	4603      	mov	r3, r0
 80022bc:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	6919      	ldr	r1, [r3, #16]
 80022c6:	4b4b      	ldr	r3, [pc, #300]	@ (80023f4 <HAL_ADC_PollForConversion+0x1f8>)
 80022c8:	400b      	ands	r3, r1
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d118      	bne.n	8002300 <HAL_ADC_PollForConversion+0x104>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	68d9      	ldr	r1, [r3, #12]
 80022d4:	4b48      	ldr	r3, [pc, #288]	@ (80023f8 <HAL_ADC_PollForConversion+0x1fc>)
 80022d6:	400b      	ands	r3, r1
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d111      	bne.n	8002300 <HAL_ADC_PollForConversion+0x104>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	6919      	ldr	r1, [r3, #16]
 80022e2:	4b46      	ldr	r3, [pc, #280]	@ (80023fc <HAL_ADC_PollForConversion+0x200>)
 80022e4:	400b      	ands	r3, r1
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d108      	bne.n	80022fc <HAL_ADC_PollForConversion+0x100>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	68d9      	ldr	r1, [r3, #12]
 80022f0:	4b43      	ldr	r3, [pc, #268]	@ (8002400 <HAL_ADC_PollForConversion+0x204>)
 80022f2:	400b      	ands	r3, r1
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d101      	bne.n	80022fc <HAL_ADC_PollForConversion+0x100>
 80022f8:	2314      	movs	r3, #20
 80022fa:	e020      	b.n	800233e <HAL_ADC_PollForConversion+0x142>
 80022fc:	2329      	movs	r3, #41	@ 0x29
 80022fe:	e01e      	b.n	800233e <HAL_ADC_PollForConversion+0x142>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	6919      	ldr	r1, [r3, #16]
 8002306:	4b3d      	ldr	r3, [pc, #244]	@ (80023fc <HAL_ADC_PollForConversion+0x200>)
 8002308:	400b      	ands	r3, r1
 800230a:	2b00      	cmp	r3, #0
 800230c:	d106      	bne.n	800231c <HAL_ADC_PollForConversion+0x120>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	68d9      	ldr	r1, [r3, #12]
 8002314:	4b3a      	ldr	r3, [pc, #232]	@ (8002400 <HAL_ADC_PollForConversion+0x204>)
 8002316:	400b      	ands	r3, r1
 8002318:	2b00      	cmp	r3, #0
 800231a:	d00d      	beq.n	8002338 <HAL_ADC_PollForConversion+0x13c>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	6919      	ldr	r1, [r3, #16]
 8002322:	4b38      	ldr	r3, [pc, #224]	@ (8002404 <HAL_ADC_PollForConversion+0x208>)
 8002324:	400b      	ands	r3, r1
 8002326:	2b00      	cmp	r3, #0
 8002328:	d108      	bne.n	800233c <HAL_ADC_PollForConversion+0x140>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	68d9      	ldr	r1, [r3, #12]
 8002330:	4b34      	ldr	r3, [pc, #208]	@ (8002404 <HAL_ADC_PollForConversion+0x208>)
 8002332:	400b      	ands	r3, r1
 8002334:	2b00      	cmp	r3, #0
 8002336:	d101      	bne.n	800233c <HAL_ADC_PollForConversion+0x140>
 8002338:	2354      	movs	r3, #84	@ 0x54
 800233a:	e000      	b.n	800233e <HAL_ADC_PollForConversion+0x142>
 800233c:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 800233e:	fb02 f303 	mul.w	r3, r2, r3
 8002342:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002344:	e021      	b.n	800238a <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	f1b3 3fff 	cmp.w	r3, #4294967295
 800234c:	d01a      	beq.n	8002384 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d007      	beq.n	8002364 <HAL_ADC_PollForConversion+0x168>
 8002354:	f7ff fd9e 	bl	8001e94 <HAL_GetTick>
 8002358:	4602      	mov	r2, r0
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	1ad3      	subs	r3, r2, r3
 800235e:	683a      	ldr	r2, [r7, #0]
 8002360:	429a      	cmp	r2, r3
 8002362:	d20f      	bcs.n	8002384 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	693a      	ldr	r2, [r7, #16]
 8002368:	429a      	cmp	r2, r3
 800236a:	d90b      	bls.n	8002384 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002370:	f043 0204 	orr.w	r2, r3, #4
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2200      	movs	r2, #0
 800237c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 8002380:	2303      	movs	r3, #3
 8002382:	e030      	b.n	80023e6 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	3301      	adds	r3, #1
 8002388:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	693a      	ldr	r2, [r7, #16]
 800238e:	429a      	cmp	r2, r3
 8002390:	d8d9      	bhi.n	8002346 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f06f 0212 	mvn.w	r2, #18
 800239a:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023a0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	689b      	ldr	r3, [r3, #8]
 80023ae:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80023b2:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80023b6:	d115      	bne.n	80023e4 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d111      	bne.n	80023e4 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023c4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023d0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d105      	bne.n	80023e4 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023dc:	f043 0201 	orr.w	r2, r3, #1
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80023e4:	2300      	movs	r3, #0
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	371c      	adds	r7, #28
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd90      	pop	{r4, r7, pc}
 80023ee:	bf00      	nop
 80023f0:	2000001c 	.word	0x2000001c
 80023f4:	24924924 	.word	0x24924924
 80023f8:	00924924 	.word	0x00924924
 80023fc:	12492492 	.word	0x12492492
 8002400:	00492492 	.word	0x00492492
 8002404:	00249249 	.word	0x00249249

08002408 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002408:	b480      	push	{r7}
 800240a:	b083      	sub	sp, #12
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8002416:	4618      	mov	r0, r3
 8002418:	370c      	adds	r7, #12
 800241a:	46bd      	mov	sp, r7
 800241c:	bc80      	pop	{r7}
 800241e:	4770      	bx	lr

08002420 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002420:	b480      	push	{r7}
 8002422:	b085      	sub	sp, #20
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
 8002428:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800242a:	2300      	movs	r3, #0
 800242c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800242e:	2300      	movs	r3, #0
 8002430:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002438:	2b01      	cmp	r3, #1
 800243a:	d101      	bne.n	8002440 <HAL_ADC_ConfigChannel+0x20>
 800243c:	2302      	movs	r3, #2
 800243e:	e0dc      	b.n	80025fa <HAL_ADC_ConfigChannel+0x1da>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2201      	movs	r2, #1
 8002444:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	2b06      	cmp	r3, #6
 800244e:	d81c      	bhi.n	800248a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	685a      	ldr	r2, [r3, #4]
 800245a:	4613      	mov	r3, r2
 800245c:	009b      	lsls	r3, r3, #2
 800245e:	4413      	add	r3, r2
 8002460:	3b05      	subs	r3, #5
 8002462:	221f      	movs	r2, #31
 8002464:	fa02 f303 	lsl.w	r3, r2, r3
 8002468:	43db      	mvns	r3, r3
 800246a:	4019      	ands	r1, r3
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	6818      	ldr	r0, [r3, #0]
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	685a      	ldr	r2, [r3, #4]
 8002474:	4613      	mov	r3, r2
 8002476:	009b      	lsls	r3, r3, #2
 8002478:	4413      	add	r3, r2
 800247a:	3b05      	subs	r3, #5
 800247c:	fa00 f203 	lsl.w	r2, r0, r3
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	430a      	orrs	r2, r1
 8002486:	635a      	str	r2, [r3, #52]	@ 0x34
 8002488:	e03c      	b.n	8002504 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	2b0c      	cmp	r3, #12
 8002490:	d81c      	bhi.n	80024cc <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	685a      	ldr	r2, [r3, #4]
 800249c:	4613      	mov	r3, r2
 800249e:	009b      	lsls	r3, r3, #2
 80024a0:	4413      	add	r3, r2
 80024a2:	3b23      	subs	r3, #35	@ 0x23
 80024a4:	221f      	movs	r2, #31
 80024a6:	fa02 f303 	lsl.w	r3, r2, r3
 80024aa:	43db      	mvns	r3, r3
 80024ac:	4019      	ands	r1, r3
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	6818      	ldr	r0, [r3, #0]
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	685a      	ldr	r2, [r3, #4]
 80024b6:	4613      	mov	r3, r2
 80024b8:	009b      	lsls	r3, r3, #2
 80024ba:	4413      	add	r3, r2
 80024bc:	3b23      	subs	r3, #35	@ 0x23
 80024be:	fa00 f203 	lsl.w	r2, r0, r3
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	430a      	orrs	r2, r1
 80024c8:	631a      	str	r2, [r3, #48]	@ 0x30
 80024ca:	e01b      	b.n	8002504 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	685a      	ldr	r2, [r3, #4]
 80024d6:	4613      	mov	r3, r2
 80024d8:	009b      	lsls	r3, r3, #2
 80024da:	4413      	add	r3, r2
 80024dc:	3b41      	subs	r3, #65	@ 0x41
 80024de:	221f      	movs	r2, #31
 80024e0:	fa02 f303 	lsl.w	r3, r2, r3
 80024e4:	43db      	mvns	r3, r3
 80024e6:	4019      	ands	r1, r3
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	6818      	ldr	r0, [r3, #0]
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	685a      	ldr	r2, [r3, #4]
 80024f0:	4613      	mov	r3, r2
 80024f2:	009b      	lsls	r3, r3, #2
 80024f4:	4413      	add	r3, r2
 80024f6:	3b41      	subs	r3, #65	@ 0x41
 80024f8:	fa00 f203 	lsl.w	r2, r0, r3
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	430a      	orrs	r2, r1
 8002502:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	2b09      	cmp	r3, #9
 800250a:	d91c      	bls.n	8002546 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	68d9      	ldr	r1, [r3, #12]
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	681a      	ldr	r2, [r3, #0]
 8002516:	4613      	mov	r3, r2
 8002518:	005b      	lsls	r3, r3, #1
 800251a:	4413      	add	r3, r2
 800251c:	3b1e      	subs	r3, #30
 800251e:	2207      	movs	r2, #7
 8002520:	fa02 f303 	lsl.w	r3, r2, r3
 8002524:	43db      	mvns	r3, r3
 8002526:	4019      	ands	r1, r3
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	6898      	ldr	r0, [r3, #8]
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	4613      	mov	r3, r2
 8002532:	005b      	lsls	r3, r3, #1
 8002534:	4413      	add	r3, r2
 8002536:	3b1e      	subs	r3, #30
 8002538:	fa00 f203 	lsl.w	r2, r0, r3
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	430a      	orrs	r2, r1
 8002542:	60da      	str	r2, [r3, #12]
 8002544:	e019      	b.n	800257a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	6919      	ldr	r1, [r3, #16]
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	681a      	ldr	r2, [r3, #0]
 8002550:	4613      	mov	r3, r2
 8002552:	005b      	lsls	r3, r3, #1
 8002554:	4413      	add	r3, r2
 8002556:	2207      	movs	r2, #7
 8002558:	fa02 f303 	lsl.w	r3, r2, r3
 800255c:	43db      	mvns	r3, r3
 800255e:	4019      	ands	r1, r3
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	6898      	ldr	r0, [r3, #8]
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	681a      	ldr	r2, [r3, #0]
 8002568:	4613      	mov	r3, r2
 800256a:	005b      	lsls	r3, r3, #1
 800256c:	4413      	add	r3, r2
 800256e:	fa00 f203 	lsl.w	r2, r0, r3
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	430a      	orrs	r2, r1
 8002578:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	2b10      	cmp	r3, #16
 8002580:	d003      	beq.n	800258a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002586:	2b11      	cmp	r3, #17
 8002588:	d132      	bne.n	80025f0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a1d      	ldr	r2, [pc, #116]	@ (8002604 <HAL_ADC_ConfigChannel+0x1e4>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d125      	bne.n	80025e0 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	689b      	ldr	r3, [r3, #8]
 800259a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d126      	bne.n	80025f0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	689a      	ldr	r2, [r3, #8]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80025b0:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	2b10      	cmp	r3, #16
 80025b8:	d11a      	bne.n	80025f0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80025ba:	4b13      	ldr	r3, [pc, #76]	@ (8002608 <HAL_ADC_ConfigChannel+0x1e8>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a13      	ldr	r2, [pc, #76]	@ (800260c <HAL_ADC_ConfigChannel+0x1ec>)
 80025c0:	fba2 2303 	umull	r2, r3, r2, r3
 80025c4:	0c9a      	lsrs	r2, r3, #18
 80025c6:	4613      	mov	r3, r2
 80025c8:	009b      	lsls	r3, r3, #2
 80025ca:	4413      	add	r3, r2
 80025cc:	005b      	lsls	r3, r3, #1
 80025ce:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80025d0:	e002      	b.n	80025d8 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80025d2:	68bb      	ldr	r3, [r7, #8]
 80025d4:	3b01      	subs	r3, #1
 80025d6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d1f9      	bne.n	80025d2 <HAL_ADC_ConfigChannel+0x1b2>
 80025de:	e007      	b.n	80025f0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025e4:	f043 0220 	orr.w	r2, r3, #32
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 80025ec:	2301      	movs	r3, #1
 80025ee:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2200      	movs	r2, #0
 80025f4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80025f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	3714      	adds	r7, #20
 80025fe:	46bd      	mov	sp, r7
 8002600:	bc80      	pop	{r7}
 8002602:	4770      	bx	lr
 8002604:	40012400 	.word	0x40012400
 8002608:	2000001c 	.word	0x2000001c
 800260c:	431bde83 	.word	0x431bde83

08002610 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b084      	sub	sp, #16
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002618:	2300      	movs	r3, #0
 800261a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 800261c:	2300      	movs	r3, #0
 800261e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	689b      	ldr	r3, [r3, #8]
 8002626:	f003 0301 	and.w	r3, r3, #1
 800262a:	2b01      	cmp	r3, #1
 800262c:	d040      	beq.n	80026b0 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	689a      	ldr	r2, [r3, #8]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f042 0201 	orr.w	r2, r2, #1
 800263c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800263e:	4b1f      	ldr	r3, [pc, #124]	@ (80026bc <ADC_Enable+0xac>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a1f      	ldr	r2, [pc, #124]	@ (80026c0 <ADC_Enable+0xb0>)
 8002644:	fba2 2303 	umull	r2, r3, r2, r3
 8002648:	0c9b      	lsrs	r3, r3, #18
 800264a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800264c:	e002      	b.n	8002654 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800264e:	68bb      	ldr	r3, [r7, #8]
 8002650:	3b01      	subs	r3, #1
 8002652:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d1f9      	bne.n	800264e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800265a:	f7ff fc1b 	bl	8001e94 <HAL_GetTick>
 800265e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002660:	e01f      	b.n	80026a2 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002662:	f7ff fc17 	bl	8001e94 <HAL_GetTick>
 8002666:	4602      	mov	r2, r0
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	1ad3      	subs	r3, r2, r3
 800266c:	2b02      	cmp	r3, #2
 800266e:	d918      	bls.n	80026a2 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	689b      	ldr	r3, [r3, #8]
 8002676:	f003 0301 	and.w	r3, r3, #1
 800267a:	2b01      	cmp	r3, #1
 800267c:	d011      	beq.n	80026a2 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002682:	f043 0210 	orr.w	r2, r3, #16
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800268e:	f043 0201 	orr.w	r2, r3, #1
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2200      	movs	r2, #0
 800269a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	e007      	b.n	80026b2 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	f003 0301 	and.w	r3, r3, #1
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	d1d8      	bne.n	8002662 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80026b0:	2300      	movs	r3, #0
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	3710      	adds	r7, #16
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	2000001c 	.word	0x2000001c
 80026c0:	431bde83 	.word	0x431bde83

080026c4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b084      	sub	sp, #16
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80026cc:	2300      	movs	r3, #0
 80026ce:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	f003 0301 	and.w	r3, r3, #1
 80026da:	2b01      	cmp	r3, #1
 80026dc:	d12e      	bne.n	800273c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	689a      	ldr	r2, [r3, #8]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f022 0201 	bic.w	r2, r2, #1
 80026ec:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80026ee:	f7ff fbd1 	bl	8001e94 <HAL_GetTick>
 80026f2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80026f4:	e01b      	b.n	800272e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80026f6:	f7ff fbcd 	bl	8001e94 <HAL_GetTick>
 80026fa:	4602      	mov	r2, r0
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	1ad3      	subs	r3, r2, r3
 8002700:	2b02      	cmp	r3, #2
 8002702:	d914      	bls.n	800272e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	f003 0301 	and.w	r3, r3, #1
 800270e:	2b01      	cmp	r3, #1
 8002710:	d10d      	bne.n	800272e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002716:	f043 0210 	orr.w	r2, r3, #16
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002722:	f043 0201 	orr.w	r2, r3, #1
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	e007      	b.n	800273e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	f003 0301 	and.w	r3, r3, #1
 8002738:	2b01      	cmp	r3, #1
 800273a:	d0dc      	beq.n	80026f6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800273c:	2300      	movs	r3, #0
}
 800273e:	4618      	mov	r0, r3
 8002740:	3710      	adds	r7, #16
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}
	...

08002748 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8002748:	b590      	push	{r4, r7, lr}
 800274a:	b087      	sub	sp, #28
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002750:	2300      	movs	r3, #0
 8002752:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8002754:	2300      	movs	r3, #0
 8002756:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800275e:	2b01      	cmp	r3, #1
 8002760:	d101      	bne.n	8002766 <HAL_ADCEx_Calibration_Start+0x1e>
 8002762:	2302      	movs	r3, #2
 8002764:	e097      	b.n	8002896 <HAL_ADCEx_Calibration_Start+0x14e>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2201      	movs	r2, #1
 800276a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800276e:	6878      	ldr	r0, [r7, #4]
 8002770:	f7ff ffa8 	bl	80026c4 <ADC_ConversionStop_Disable>
 8002774:	4603      	mov	r3, r0
 8002776:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 8002778:	6878      	ldr	r0, [r7, #4]
 800277a:	f7ff ff49 	bl	8002610 <ADC_Enable>
 800277e:	4603      	mov	r3, r0
 8002780:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 8002782:	7dfb      	ldrb	r3, [r7, #23]
 8002784:	2b00      	cmp	r3, #0
 8002786:	f040 8081 	bne.w	800288c <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800278e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002792:	f023 0302 	bic.w	r3, r3, #2
 8002796:	f043 0202 	orr.w	r2, r3, #2
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800279e:	4b40      	ldr	r3, [pc, #256]	@ (80028a0 <HAL_ADCEx_Calibration_Start+0x158>)
 80027a0:	681c      	ldr	r4, [r3, #0]
 80027a2:	2002      	movs	r0, #2
 80027a4:	f003 ffc2 	bl	800672c <HAL_RCCEx_GetPeriphCLKFreq>
 80027a8:	4603      	mov	r3, r0
 80027aa:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 80027ae:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 80027b0:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 80027b2:	e002      	b.n	80027ba <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	3b01      	subs	r3, #1
 80027b8:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d1f9      	bne.n	80027b4 <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	689a      	ldr	r2, [r3, #8]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f042 0208 	orr.w	r2, r2, #8
 80027ce:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80027d0:	f7ff fb60 	bl	8001e94 <HAL_GetTick>
 80027d4:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80027d6:	e01b      	b.n	8002810 <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80027d8:	f7ff fb5c 	bl	8001e94 <HAL_GetTick>
 80027dc:	4602      	mov	r2, r0
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	1ad3      	subs	r3, r2, r3
 80027e2:	2b0a      	cmp	r3, #10
 80027e4:	d914      	bls.n	8002810 <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	689b      	ldr	r3, [r3, #8]
 80027ec:	f003 0308 	and.w	r3, r3, #8
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d00d      	beq.n	8002810 <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027f8:	f023 0312 	bic.w	r3, r3, #18
 80027fc:	f043 0210 	orr.w	r2, r3, #16
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2200      	movs	r2, #0
 8002808:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 800280c:	2301      	movs	r3, #1
 800280e:	e042      	b.n	8002896 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	f003 0308 	and.w	r3, r3, #8
 800281a:	2b00      	cmp	r3, #0
 800281c:	d1dc      	bne.n	80027d8 <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	689a      	ldr	r2, [r3, #8]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f042 0204 	orr.w	r2, r2, #4
 800282c:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 800282e:	f7ff fb31 	bl	8001e94 <HAL_GetTick>
 8002832:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002834:	e01b      	b.n	800286e <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002836:	f7ff fb2d 	bl	8001e94 <HAL_GetTick>
 800283a:	4602      	mov	r2, r0
 800283c:	693b      	ldr	r3, [r7, #16]
 800283e:	1ad3      	subs	r3, r2, r3
 8002840:	2b0a      	cmp	r3, #10
 8002842:	d914      	bls.n	800286e <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	689b      	ldr	r3, [r3, #8]
 800284a:	f003 0304 	and.w	r3, r3, #4
 800284e:	2b00      	cmp	r3, #0
 8002850:	d00d      	beq.n	800286e <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002856:	f023 0312 	bic.w	r3, r3, #18
 800285a:	f043 0210 	orr.w	r2, r3, #16
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2200      	movs	r2, #0
 8002866:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	e013      	b.n	8002896 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	f003 0304 	and.w	r3, r3, #4
 8002878:	2b00      	cmp	r3, #0
 800287a:	d1dc      	bne.n	8002836 <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002880:	f023 0303 	bic.w	r3, r3, #3
 8002884:	f043 0201 	orr.w	r2, r3, #1
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2200      	movs	r2, #0
 8002890:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002894:	7dfb      	ldrb	r3, [r7, #23]
}
 8002896:	4618      	mov	r0, r3
 8002898:	371c      	adds	r7, #28
 800289a:	46bd      	mov	sp, r7
 800289c:	bd90      	pop	{r4, r7, pc}
 800289e:	bf00      	nop
 80028a0:	2000001c 	.word	0x2000001c

080028a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b085      	sub	sp, #20
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	f003 0307 	and.w	r3, r3, #7
 80028b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028b4:	4b0c      	ldr	r3, [pc, #48]	@ (80028e8 <__NVIC_SetPriorityGrouping+0x44>)
 80028b6:	68db      	ldr	r3, [r3, #12]
 80028b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028ba:	68ba      	ldr	r2, [r7, #8]
 80028bc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80028c0:	4013      	ands	r3, r2
 80028c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028cc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80028d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80028d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028d6:	4a04      	ldr	r2, [pc, #16]	@ (80028e8 <__NVIC_SetPriorityGrouping+0x44>)
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	60d3      	str	r3, [r2, #12]
}
 80028dc:	bf00      	nop
 80028de:	3714      	adds	r7, #20
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bc80      	pop	{r7}
 80028e4:	4770      	bx	lr
 80028e6:	bf00      	nop
 80028e8:	e000ed00 	.word	0xe000ed00

080028ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028ec:	b480      	push	{r7}
 80028ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028f0:	4b04      	ldr	r3, [pc, #16]	@ (8002904 <__NVIC_GetPriorityGrouping+0x18>)
 80028f2:	68db      	ldr	r3, [r3, #12]
 80028f4:	0a1b      	lsrs	r3, r3, #8
 80028f6:	f003 0307 	and.w	r3, r3, #7
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bc80      	pop	{r7}
 8002900:	4770      	bx	lr
 8002902:	bf00      	nop
 8002904:	e000ed00 	.word	0xe000ed00

08002908 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002908:	b480      	push	{r7}
 800290a:	b083      	sub	sp, #12
 800290c:	af00      	add	r7, sp, #0
 800290e:	4603      	mov	r3, r0
 8002910:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002912:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002916:	2b00      	cmp	r3, #0
 8002918:	db0b      	blt.n	8002932 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800291a:	79fb      	ldrb	r3, [r7, #7]
 800291c:	f003 021f 	and.w	r2, r3, #31
 8002920:	4906      	ldr	r1, [pc, #24]	@ (800293c <__NVIC_EnableIRQ+0x34>)
 8002922:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002926:	095b      	lsrs	r3, r3, #5
 8002928:	2001      	movs	r0, #1
 800292a:	fa00 f202 	lsl.w	r2, r0, r2
 800292e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002932:	bf00      	nop
 8002934:	370c      	adds	r7, #12
 8002936:	46bd      	mov	sp, r7
 8002938:	bc80      	pop	{r7}
 800293a:	4770      	bx	lr
 800293c:	e000e100 	.word	0xe000e100

08002940 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002940:	b480      	push	{r7}
 8002942:	b083      	sub	sp, #12
 8002944:	af00      	add	r7, sp, #0
 8002946:	4603      	mov	r3, r0
 8002948:	6039      	str	r1, [r7, #0]
 800294a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800294c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002950:	2b00      	cmp	r3, #0
 8002952:	db0a      	blt.n	800296a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	b2da      	uxtb	r2, r3
 8002958:	490c      	ldr	r1, [pc, #48]	@ (800298c <__NVIC_SetPriority+0x4c>)
 800295a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800295e:	0112      	lsls	r2, r2, #4
 8002960:	b2d2      	uxtb	r2, r2
 8002962:	440b      	add	r3, r1
 8002964:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002968:	e00a      	b.n	8002980 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	b2da      	uxtb	r2, r3
 800296e:	4908      	ldr	r1, [pc, #32]	@ (8002990 <__NVIC_SetPriority+0x50>)
 8002970:	79fb      	ldrb	r3, [r7, #7]
 8002972:	f003 030f 	and.w	r3, r3, #15
 8002976:	3b04      	subs	r3, #4
 8002978:	0112      	lsls	r2, r2, #4
 800297a:	b2d2      	uxtb	r2, r2
 800297c:	440b      	add	r3, r1
 800297e:	761a      	strb	r2, [r3, #24]
}
 8002980:	bf00      	nop
 8002982:	370c      	adds	r7, #12
 8002984:	46bd      	mov	sp, r7
 8002986:	bc80      	pop	{r7}
 8002988:	4770      	bx	lr
 800298a:	bf00      	nop
 800298c:	e000e100 	.word	0xe000e100
 8002990:	e000ed00 	.word	0xe000ed00

08002994 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002994:	b480      	push	{r7}
 8002996:	b089      	sub	sp, #36	@ 0x24
 8002998:	af00      	add	r7, sp, #0
 800299a:	60f8      	str	r0, [r7, #12]
 800299c:	60b9      	str	r1, [r7, #8]
 800299e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	f003 0307 	and.w	r3, r3, #7
 80029a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029a8:	69fb      	ldr	r3, [r7, #28]
 80029aa:	f1c3 0307 	rsb	r3, r3, #7
 80029ae:	2b04      	cmp	r3, #4
 80029b0:	bf28      	it	cs
 80029b2:	2304      	movcs	r3, #4
 80029b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029b6:	69fb      	ldr	r3, [r7, #28]
 80029b8:	3304      	adds	r3, #4
 80029ba:	2b06      	cmp	r3, #6
 80029bc:	d902      	bls.n	80029c4 <NVIC_EncodePriority+0x30>
 80029be:	69fb      	ldr	r3, [r7, #28]
 80029c0:	3b03      	subs	r3, #3
 80029c2:	e000      	b.n	80029c6 <NVIC_EncodePriority+0x32>
 80029c4:	2300      	movs	r3, #0
 80029c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029c8:	f04f 32ff 	mov.w	r2, #4294967295
 80029cc:	69bb      	ldr	r3, [r7, #24]
 80029ce:	fa02 f303 	lsl.w	r3, r2, r3
 80029d2:	43da      	mvns	r2, r3
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	401a      	ands	r2, r3
 80029d8:	697b      	ldr	r3, [r7, #20]
 80029da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029dc:	f04f 31ff 	mov.w	r1, #4294967295
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	fa01 f303 	lsl.w	r3, r1, r3
 80029e6:	43d9      	mvns	r1, r3
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029ec:	4313      	orrs	r3, r2
         );
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	3724      	adds	r7, #36	@ 0x24
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bc80      	pop	{r7}
 80029f6:	4770      	bx	lr

080029f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b082      	sub	sp, #8
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	3b01      	subs	r3, #1
 8002a04:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002a08:	d301      	bcc.n	8002a0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e00f      	b.n	8002a2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a0e:	4a0a      	ldr	r2, [pc, #40]	@ (8002a38 <SysTick_Config+0x40>)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	3b01      	subs	r3, #1
 8002a14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a16:	210f      	movs	r1, #15
 8002a18:	f04f 30ff 	mov.w	r0, #4294967295
 8002a1c:	f7ff ff90 	bl	8002940 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a20:	4b05      	ldr	r3, [pc, #20]	@ (8002a38 <SysTick_Config+0x40>)
 8002a22:	2200      	movs	r2, #0
 8002a24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a26:	4b04      	ldr	r3, [pc, #16]	@ (8002a38 <SysTick_Config+0x40>)
 8002a28:	2207      	movs	r2, #7
 8002a2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a2c:	2300      	movs	r3, #0
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	3708      	adds	r7, #8
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}
 8002a36:	bf00      	nop
 8002a38:	e000e010 	.word	0xe000e010

08002a3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b082      	sub	sp, #8
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a44:	6878      	ldr	r0, [r7, #4]
 8002a46:	f7ff ff2d 	bl	80028a4 <__NVIC_SetPriorityGrouping>
}
 8002a4a:	bf00      	nop
 8002a4c:	3708      	adds	r7, #8
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}

08002a52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a52:	b580      	push	{r7, lr}
 8002a54:	b086      	sub	sp, #24
 8002a56:	af00      	add	r7, sp, #0
 8002a58:	4603      	mov	r3, r0
 8002a5a:	60b9      	str	r1, [r7, #8]
 8002a5c:	607a      	str	r2, [r7, #4]
 8002a5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a60:	2300      	movs	r3, #0
 8002a62:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a64:	f7ff ff42 	bl	80028ec <__NVIC_GetPriorityGrouping>
 8002a68:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a6a:	687a      	ldr	r2, [r7, #4]
 8002a6c:	68b9      	ldr	r1, [r7, #8]
 8002a6e:	6978      	ldr	r0, [r7, #20]
 8002a70:	f7ff ff90 	bl	8002994 <NVIC_EncodePriority>
 8002a74:	4602      	mov	r2, r0
 8002a76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a7a:	4611      	mov	r1, r2
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	f7ff ff5f 	bl	8002940 <__NVIC_SetPriority>
}
 8002a82:	bf00      	nop
 8002a84:	3718      	adds	r7, #24
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}

08002a8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a8a:	b580      	push	{r7, lr}
 8002a8c:	b082      	sub	sp, #8
 8002a8e:	af00      	add	r7, sp, #0
 8002a90:	4603      	mov	r3, r0
 8002a92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f7ff ff35 	bl	8002908 <__NVIC_EnableIRQ>
}
 8002a9e:	bf00      	nop
 8002aa0:	3708      	adds	r7, #8
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}

08002aa6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002aa6:	b580      	push	{r7, lr}
 8002aa8:	b082      	sub	sp, #8
 8002aaa:	af00      	add	r7, sp, #0
 8002aac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002aae:	6878      	ldr	r0, [r7, #4]
 8002ab0:	f7ff ffa2 	bl	80029f8 <SysTick_Config>
 8002ab4:	4603      	mov	r3, r0
}
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	3708      	adds	r7, #8
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}
	...

08002ac0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b085      	sub	sp, #20
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d101      	bne.n	8002ad6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e043      	b.n	8002b5e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	461a      	mov	r2, r3
 8002adc:	4b22      	ldr	r3, [pc, #136]	@ (8002b68 <HAL_DMA_Init+0xa8>)
 8002ade:	4413      	add	r3, r2
 8002ae0:	4a22      	ldr	r2, [pc, #136]	@ (8002b6c <HAL_DMA_Init+0xac>)
 8002ae2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ae6:	091b      	lsrs	r3, r3, #4
 8002ae8:	009a      	lsls	r2, r3, #2
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	4a1f      	ldr	r2, [pc, #124]	@ (8002b70 <HAL_DMA_Init+0xb0>)
 8002af2:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2202      	movs	r2, #2
 8002af8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002b0a:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8002b0e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002b18:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	68db      	ldr	r3, [r3, #12]
 8002b1e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b24:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	695b      	ldr	r3, [r3, #20]
 8002b2a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b30:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	69db      	ldr	r3, [r3, #28]
 8002b36:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002b38:	68fa      	ldr	r2, [r7, #12]
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	68fa      	ldr	r2, [r7, #12]
 8002b44:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2201      	movs	r2, #1
 8002b50:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2200      	movs	r2, #0
 8002b58:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002b5c:	2300      	movs	r3, #0
}
 8002b5e:	4618      	mov	r0, r3
 8002b60:	3714      	adds	r7, #20
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bc80      	pop	{r7}
 8002b66:	4770      	bx	lr
 8002b68:	bffdfff8 	.word	0xbffdfff8
 8002b6c:	cccccccd 	.word	0xcccccccd
 8002b70:	40020000 	.word	0x40020000

08002b74 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b084      	sub	sp, #16
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002b86:	b2db      	uxtb	r3, r3
 8002b88:	2b02      	cmp	r3, #2
 8002b8a:	d005      	beq.n	8002b98 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2204      	movs	r2, #4
 8002b90:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	73fb      	strb	r3, [r7, #15]
 8002b96:	e051      	b.n	8002c3c <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	681a      	ldr	r2, [r3, #0]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f022 020e 	bic.w	r2, r2, #14
 8002ba6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	681a      	ldr	r2, [r3, #0]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f022 0201 	bic.w	r2, r2, #1
 8002bb6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a22      	ldr	r2, [pc, #136]	@ (8002c48 <HAL_DMA_Abort_IT+0xd4>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d029      	beq.n	8002c16 <HAL_DMA_Abort_IT+0xa2>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a21      	ldr	r2, [pc, #132]	@ (8002c4c <HAL_DMA_Abort_IT+0xd8>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d022      	beq.n	8002c12 <HAL_DMA_Abort_IT+0x9e>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a1f      	ldr	r2, [pc, #124]	@ (8002c50 <HAL_DMA_Abort_IT+0xdc>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d01a      	beq.n	8002c0c <HAL_DMA_Abort_IT+0x98>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a1e      	ldr	r2, [pc, #120]	@ (8002c54 <HAL_DMA_Abort_IT+0xe0>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d012      	beq.n	8002c06 <HAL_DMA_Abort_IT+0x92>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a1c      	ldr	r2, [pc, #112]	@ (8002c58 <HAL_DMA_Abort_IT+0xe4>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d00a      	beq.n	8002c00 <HAL_DMA_Abort_IT+0x8c>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a1b      	ldr	r2, [pc, #108]	@ (8002c5c <HAL_DMA_Abort_IT+0xe8>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d102      	bne.n	8002bfa <HAL_DMA_Abort_IT+0x86>
 8002bf4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002bf8:	e00e      	b.n	8002c18 <HAL_DMA_Abort_IT+0xa4>
 8002bfa:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002bfe:	e00b      	b.n	8002c18 <HAL_DMA_Abort_IT+0xa4>
 8002c00:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002c04:	e008      	b.n	8002c18 <HAL_DMA_Abort_IT+0xa4>
 8002c06:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002c0a:	e005      	b.n	8002c18 <HAL_DMA_Abort_IT+0xa4>
 8002c0c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002c10:	e002      	b.n	8002c18 <HAL_DMA_Abort_IT+0xa4>
 8002c12:	2310      	movs	r3, #16
 8002c14:	e000      	b.n	8002c18 <HAL_DMA_Abort_IT+0xa4>
 8002c16:	2301      	movs	r3, #1
 8002c18:	4a11      	ldr	r2, [pc, #68]	@ (8002c60 <HAL_DMA_Abort_IT+0xec>)
 8002c1a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2201      	movs	r2, #1
 8002c20:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2200      	movs	r2, #0
 8002c28:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d003      	beq.n	8002c3c <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c38:	6878      	ldr	r0, [r7, #4]
 8002c3a:	4798      	blx	r3
    } 
  }
  return status;
 8002c3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	3710      	adds	r7, #16
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}
 8002c46:	bf00      	nop
 8002c48:	40020008 	.word	0x40020008
 8002c4c:	4002001c 	.word	0x4002001c
 8002c50:	40020030 	.word	0x40020030
 8002c54:	40020044 	.word	0x40020044
 8002c58:	40020058 	.word	0x40020058
 8002c5c:	4002006c 	.word	0x4002006c
 8002c60:	40020000 	.word	0x40020000

08002c64 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b084      	sub	sp, #16
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c80:	2204      	movs	r2, #4
 8002c82:	409a      	lsls	r2, r3
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	4013      	ands	r3, r2
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d04f      	beq.n	8002d2c <HAL_DMA_IRQHandler+0xc8>
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	f003 0304 	and.w	r3, r3, #4
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d04a      	beq.n	8002d2c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f003 0320 	and.w	r3, r3, #32
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d107      	bne.n	8002cb4 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	681a      	ldr	r2, [r3, #0]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f022 0204 	bic.w	r2, r2, #4
 8002cb2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a66      	ldr	r2, [pc, #408]	@ (8002e54 <HAL_DMA_IRQHandler+0x1f0>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d029      	beq.n	8002d12 <HAL_DMA_IRQHandler+0xae>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a65      	ldr	r2, [pc, #404]	@ (8002e58 <HAL_DMA_IRQHandler+0x1f4>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d022      	beq.n	8002d0e <HAL_DMA_IRQHandler+0xaa>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a63      	ldr	r2, [pc, #396]	@ (8002e5c <HAL_DMA_IRQHandler+0x1f8>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d01a      	beq.n	8002d08 <HAL_DMA_IRQHandler+0xa4>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a62      	ldr	r2, [pc, #392]	@ (8002e60 <HAL_DMA_IRQHandler+0x1fc>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d012      	beq.n	8002d02 <HAL_DMA_IRQHandler+0x9e>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a60      	ldr	r2, [pc, #384]	@ (8002e64 <HAL_DMA_IRQHandler+0x200>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d00a      	beq.n	8002cfc <HAL_DMA_IRQHandler+0x98>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a5f      	ldr	r2, [pc, #380]	@ (8002e68 <HAL_DMA_IRQHandler+0x204>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d102      	bne.n	8002cf6 <HAL_DMA_IRQHandler+0x92>
 8002cf0:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002cf4:	e00e      	b.n	8002d14 <HAL_DMA_IRQHandler+0xb0>
 8002cf6:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8002cfa:	e00b      	b.n	8002d14 <HAL_DMA_IRQHandler+0xb0>
 8002cfc:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8002d00:	e008      	b.n	8002d14 <HAL_DMA_IRQHandler+0xb0>
 8002d02:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002d06:	e005      	b.n	8002d14 <HAL_DMA_IRQHandler+0xb0>
 8002d08:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002d0c:	e002      	b.n	8002d14 <HAL_DMA_IRQHandler+0xb0>
 8002d0e:	2340      	movs	r3, #64	@ 0x40
 8002d10:	e000      	b.n	8002d14 <HAL_DMA_IRQHandler+0xb0>
 8002d12:	2304      	movs	r3, #4
 8002d14:	4a55      	ldr	r2, [pc, #340]	@ (8002e6c <HAL_DMA_IRQHandler+0x208>)
 8002d16:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	f000 8094 	beq.w	8002e4a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d26:	6878      	ldr	r0, [r7, #4]
 8002d28:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002d2a:	e08e      	b.n	8002e4a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d30:	2202      	movs	r2, #2
 8002d32:	409a      	lsls	r2, r3
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	4013      	ands	r3, r2
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d056      	beq.n	8002dea <HAL_DMA_IRQHandler+0x186>
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	f003 0302 	and.w	r3, r3, #2
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d051      	beq.n	8002dea <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f003 0320 	and.w	r3, r3, #32
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d10b      	bne.n	8002d6c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	681a      	ldr	r2, [r3, #0]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f022 020a 	bic.w	r2, r2, #10
 8002d62:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2201      	movs	r2, #1
 8002d68:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a38      	ldr	r2, [pc, #224]	@ (8002e54 <HAL_DMA_IRQHandler+0x1f0>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d029      	beq.n	8002dca <HAL_DMA_IRQHandler+0x166>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a37      	ldr	r2, [pc, #220]	@ (8002e58 <HAL_DMA_IRQHandler+0x1f4>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d022      	beq.n	8002dc6 <HAL_DMA_IRQHandler+0x162>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a35      	ldr	r2, [pc, #212]	@ (8002e5c <HAL_DMA_IRQHandler+0x1f8>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d01a      	beq.n	8002dc0 <HAL_DMA_IRQHandler+0x15c>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a34      	ldr	r2, [pc, #208]	@ (8002e60 <HAL_DMA_IRQHandler+0x1fc>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d012      	beq.n	8002dba <HAL_DMA_IRQHandler+0x156>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a32      	ldr	r2, [pc, #200]	@ (8002e64 <HAL_DMA_IRQHandler+0x200>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d00a      	beq.n	8002db4 <HAL_DMA_IRQHandler+0x150>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a31      	ldr	r2, [pc, #196]	@ (8002e68 <HAL_DMA_IRQHandler+0x204>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d102      	bne.n	8002dae <HAL_DMA_IRQHandler+0x14a>
 8002da8:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002dac:	e00e      	b.n	8002dcc <HAL_DMA_IRQHandler+0x168>
 8002dae:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002db2:	e00b      	b.n	8002dcc <HAL_DMA_IRQHandler+0x168>
 8002db4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002db8:	e008      	b.n	8002dcc <HAL_DMA_IRQHandler+0x168>
 8002dba:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002dbe:	e005      	b.n	8002dcc <HAL_DMA_IRQHandler+0x168>
 8002dc0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002dc4:	e002      	b.n	8002dcc <HAL_DMA_IRQHandler+0x168>
 8002dc6:	2320      	movs	r3, #32
 8002dc8:	e000      	b.n	8002dcc <HAL_DMA_IRQHandler+0x168>
 8002dca:	2302      	movs	r3, #2
 8002dcc:	4a27      	ldr	r2, [pc, #156]	@ (8002e6c <HAL_DMA_IRQHandler+0x208>)
 8002dce:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d034      	beq.n	8002e4a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002de4:	6878      	ldr	r0, [r7, #4]
 8002de6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002de8:	e02f      	b.n	8002e4a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dee:	2208      	movs	r2, #8
 8002df0:	409a      	lsls	r2, r3
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	4013      	ands	r3, r2
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d028      	beq.n	8002e4c <HAL_DMA_IRQHandler+0x1e8>
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	f003 0308 	and.w	r3, r3, #8
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d023      	beq.n	8002e4c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	681a      	ldr	r2, [r3, #0]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f022 020e 	bic.w	r2, r2, #14
 8002e12:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e1c:	2101      	movs	r1, #1
 8002e1e:	fa01 f202 	lsl.w	r2, r1, r2
 8002e22:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2201      	movs	r2, #1
 8002e28:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2201      	movs	r2, #1
 8002e2e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2200      	movs	r2, #0
 8002e36:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d004      	beq.n	8002e4c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e46:	6878      	ldr	r0, [r7, #4]
 8002e48:	4798      	blx	r3
    }
  }
  return;
 8002e4a:	bf00      	nop
 8002e4c:	bf00      	nop
}
 8002e4e:	3710      	adds	r7, #16
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bd80      	pop	{r7, pc}
 8002e54:	40020008 	.word	0x40020008
 8002e58:	4002001c 	.word	0x4002001c
 8002e5c:	40020030 	.word	0x40020030
 8002e60:	40020044 	.word	0x40020044
 8002e64:	40020058 	.word	0x40020058
 8002e68:	4002006c 	.word	0x4002006c
 8002e6c:	40020000 	.word	0x40020000

08002e70 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002e70:	b480      	push	{r7}
 8002e72:	b083      	sub	sp, #12
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002e7e:	b2db      	uxtb	r3, r3
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	370c      	adds	r7, #12
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bc80      	pop	{r7}
 8002e88:	4770      	bx	lr
	...

08002e8c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b08b      	sub	sp, #44	@ 0x2c
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
 8002e94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002e96:	2300      	movs	r3, #0
 8002e98:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e9e:	e169      	b.n	8003174 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002ea0:	2201      	movs	r2, #1
 8002ea2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	69fa      	ldr	r2, [r7, #28]
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002eb4:	69ba      	ldr	r2, [r7, #24]
 8002eb6:	69fb      	ldr	r3, [r7, #28]
 8002eb8:	429a      	cmp	r2, r3
 8002eba:	f040 8158 	bne.w	800316e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	4a9a      	ldr	r2, [pc, #616]	@ (800312c <HAL_GPIO_Init+0x2a0>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d05e      	beq.n	8002f86 <HAL_GPIO_Init+0xfa>
 8002ec8:	4a98      	ldr	r2, [pc, #608]	@ (800312c <HAL_GPIO_Init+0x2a0>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d875      	bhi.n	8002fba <HAL_GPIO_Init+0x12e>
 8002ece:	4a98      	ldr	r2, [pc, #608]	@ (8003130 <HAL_GPIO_Init+0x2a4>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d058      	beq.n	8002f86 <HAL_GPIO_Init+0xfa>
 8002ed4:	4a96      	ldr	r2, [pc, #600]	@ (8003130 <HAL_GPIO_Init+0x2a4>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d86f      	bhi.n	8002fba <HAL_GPIO_Init+0x12e>
 8002eda:	4a96      	ldr	r2, [pc, #600]	@ (8003134 <HAL_GPIO_Init+0x2a8>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d052      	beq.n	8002f86 <HAL_GPIO_Init+0xfa>
 8002ee0:	4a94      	ldr	r2, [pc, #592]	@ (8003134 <HAL_GPIO_Init+0x2a8>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d869      	bhi.n	8002fba <HAL_GPIO_Init+0x12e>
 8002ee6:	4a94      	ldr	r2, [pc, #592]	@ (8003138 <HAL_GPIO_Init+0x2ac>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d04c      	beq.n	8002f86 <HAL_GPIO_Init+0xfa>
 8002eec:	4a92      	ldr	r2, [pc, #584]	@ (8003138 <HAL_GPIO_Init+0x2ac>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d863      	bhi.n	8002fba <HAL_GPIO_Init+0x12e>
 8002ef2:	4a92      	ldr	r2, [pc, #584]	@ (800313c <HAL_GPIO_Init+0x2b0>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d046      	beq.n	8002f86 <HAL_GPIO_Init+0xfa>
 8002ef8:	4a90      	ldr	r2, [pc, #576]	@ (800313c <HAL_GPIO_Init+0x2b0>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d85d      	bhi.n	8002fba <HAL_GPIO_Init+0x12e>
 8002efe:	2b12      	cmp	r3, #18
 8002f00:	d82a      	bhi.n	8002f58 <HAL_GPIO_Init+0xcc>
 8002f02:	2b12      	cmp	r3, #18
 8002f04:	d859      	bhi.n	8002fba <HAL_GPIO_Init+0x12e>
 8002f06:	a201      	add	r2, pc, #4	@ (adr r2, 8002f0c <HAL_GPIO_Init+0x80>)
 8002f08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f0c:	08002f87 	.word	0x08002f87
 8002f10:	08002f61 	.word	0x08002f61
 8002f14:	08002f73 	.word	0x08002f73
 8002f18:	08002fb5 	.word	0x08002fb5
 8002f1c:	08002fbb 	.word	0x08002fbb
 8002f20:	08002fbb 	.word	0x08002fbb
 8002f24:	08002fbb 	.word	0x08002fbb
 8002f28:	08002fbb 	.word	0x08002fbb
 8002f2c:	08002fbb 	.word	0x08002fbb
 8002f30:	08002fbb 	.word	0x08002fbb
 8002f34:	08002fbb 	.word	0x08002fbb
 8002f38:	08002fbb 	.word	0x08002fbb
 8002f3c:	08002fbb 	.word	0x08002fbb
 8002f40:	08002fbb 	.word	0x08002fbb
 8002f44:	08002fbb 	.word	0x08002fbb
 8002f48:	08002fbb 	.word	0x08002fbb
 8002f4c:	08002fbb 	.word	0x08002fbb
 8002f50:	08002f69 	.word	0x08002f69
 8002f54:	08002f7d 	.word	0x08002f7d
 8002f58:	4a79      	ldr	r2, [pc, #484]	@ (8003140 <HAL_GPIO_Init+0x2b4>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d013      	beq.n	8002f86 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002f5e:	e02c      	b.n	8002fba <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	68db      	ldr	r3, [r3, #12]
 8002f64:	623b      	str	r3, [r7, #32]
          break;
 8002f66:	e029      	b.n	8002fbc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	68db      	ldr	r3, [r3, #12]
 8002f6c:	3304      	adds	r3, #4
 8002f6e:	623b      	str	r3, [r7, #32]
          break;
 8002f70:	e024      	b.n	8002fbc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	68db      	ldr	r3, [r3, #12]
 8002f76:	3308      	adds	r3, #8
 8002f78:	623b      	str	r3, [r7, #32]
          break;
 8002f7a:	e01f      	b.n	8002fbc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	68db      	ldr	r3, [r3, #12]
 8002f80:	330c      	adds	r3, #12
 8002f82:	623b      	str	r3, [r7, #32]
          break;
 8002f84:	e01a      	b.n	8002fbc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	689b      	ldr	r3, [r3, #8]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d102      	bne.n	8002f94 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002f8e:	2304      	movs	r3, #4
 8002f90:	623b      	str	r3, [r7, #32]
          break;
 8002f92:	e013      	b.n	8002fbc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	2b01      	cmp	r3, #1
 8002f9a:	d105      	bne.n	8002fa8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002f9c:	2308      	movs	r3, #8
 8002f9e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	69fa      	ldr	r2, [r7, #28]
 8002fa4:	611a      	str	r2, [r3, #16]
          break;
 8002fa6:	e009      	b.n	8002fbc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002fa8:	2308      	movs	r3, #8
 8002faa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	69fa      	ldr	r2, [r7, #28]
 8002fb0:	615a      	str	r2, [r3, #20]
          break;
 8002fb2:	e003      	b.n	8002fbc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	623b      	str	r3, [r7, #32]
          break;
 8002fb8:	e000      	b.n	8002fbc <HAL_GPIO_Init+0x130>
          break;
 8002fba:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002fbc:	69bb      	ldr	r3, [r7, #24]
 8002fbe:	2bff      	cmp	r3, #255	@ 0xff
 8002fc0:	d801      	bhi.n	8002fc6 <HAL_GPIO_Init+0x13a>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	e001      	b.n	8002fca <HAL_GPIO_Init+0x13e>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	3304      	adds	r3, #4
 8002fca:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002fcc:	69bb      	ldr	r3, [r7, #24]
 8002fce:	2bff      	cmp	r3, #255	@ 0xff
 8002fd0:	d802      	bhi.n	8002fd8 <HAL_GPIO_Init+0x14c>
 8002fd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fd4:	009b      	lsls	r3, r3, #2
 8002fd6:	e002      	b.n	8002fde <HAL_GPIO_Init+0x152>
 8002fd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fda:	3b08      	subs	r3, #8
 8002fdc:	009b      	lsls	r3, r3, #2
 8002fde:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	681a      	ldr	r2, [r3, #0]
 8002fe4:	210f      	movs	r1, #15
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	fa01 f303 	lsl.w	r3, r1, r3
 8002fec:	43db      	mvns	r3, r3
 8002fee:	401a      	ands	r2, r3
 8002ff0:	6a39      	ldr	r1, [r7, #32]
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ff8:	431a      	orrs	r2, r3
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003006:	2b00      	cmp	r3, #0
 8003008:	f000 80b1 	beq.w	800316e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800300c:	4b4d      	ldr	r3, [pc, #308]	@ (8003144 <HAL_GPIO_Init+0x2b8>)
 800300e:	699b      	ldr	r3, [r3, #24]
 8003010:	4a4c      	ldr	r2, [pc, #304]	@ (8003144 <HAL_GPIO_Init+0x2b8>)
 8003012:	f043 0301 	orr.w	r3, r3, #1
 8003016:	6193      	str	r3, [r2, #24]
 8003018:	4b4a      	ldr	r3, [pc, #296]	@ (8003144 <HAL_GPIO_Init+0x2b8>)
 800301a:	699b      	ldr	r3, [r3, #24]
 800301c:	f003 0301 	and.w	r3, r3, #1
 8003020:	60bb      	str	r3, [r7, #8]
 8003022:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003024:	4a48      	ldr	r2, [pc, #288]	@ (8003148 <HAL_GPIO_Init+0x2bc>)
 8003026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003028:	089b      	lsrs	r3, r3, #2
 800302a:	3302      	adds	r3, #2
 800302c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003030:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003034:	f003 0303 	and.w	r3, r3, #3
 8003038:	009b      	lsls	r3, r3, #2
 800303a:	220f      	movs	r2, #15
 800303c:	fa02 f303 	lsl.w	r3, r2, r3
 8003040:	43db      	mvns	r3, r3
 8003042:	68fa      	ldr	r2, [r7, #12]
 8003044:	4013      	ands	r3, r2
 8003046:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	4a40      	ldr	r2, [pc, #256]	@ (800314c <HAL_GPIO_Init+0x2c0>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d013      	beq.n	8003078 <HAL_GPIO_Init+0x1ec>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	4a3f      	ldr	r2, [pc, #252]	@ (8003150 <HAL_GPIO_Init+0x2c4>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d00d      	beq.n	8003074 <HAL_GPIO_Init+0x1e8>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	4a3e      	ldr	r2, [pc, #248]	@ (8003154 <HAL_GPIO_Init+0x2c8>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d007      	beq.n	8003070 <HAL_GPIO_Init+0x1e4>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	4a3d      	ldr	r2, [pc, #244]	@ (8003158 <HAL_GPIO_Init+0x2cc>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d101      	bne.n	800306c <HAL_GPIO_Init+0x1e0>
 8003068:	2303      	movs	r3, #3
 800306a:	e006      	b.n	800307a <HAL_GPIO_Init+0x1ee>
 800306c:	2304      	movs	r3, #4
 800306e:	e004      	b.n	800307a <HAL_GPIO_Init+0x1ee>
 8003070:	2302      	movs	r3, #2
 8003072:	e002      	b.n	800307a <HAL_GPIO_Init+0x1ee>
 8003074:	2301      	movs	r3, #1
 8003076:	e000      	b.n	800307a <HAL_GPIO_Init+0x1ee>
 8003078:	2300      	movs	r3, #0
 800307a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800307c:	f002 0203 	and.w	r2, r2, #3
 8003080:	0092      	lsls	r2, r2, #2
 8003082:	4093      	lsls	r3, r2
 8003084:	68fa      	ldr	r2, [r7, #12]
 8003086:	4313      	orrs	r3, r2
 8003088:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800308a:	492f      	ldr	r1, [pc, #188]	@ (8003148 <HAL_GPIO_Init+0x2bc>)
 800308c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800308e:	089b      	lsrs	r3, r3, #2
 8003090:	3302      	adds	r3, #2
 8003092:	68fa      	ldr	r2, [r7, #12]
 8003094:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d006      	beq.n	80030b2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80030a4:	4b2d      	ldr	r3, [pc, #180]	@ (800315c <HAL_GPIO_Init+0x2d0>)
 80030a6:	689a      	ldr	r2, [r3, #8]
 80030a8:	492c      	ldr	r1, [pc, #176]	@ (800315c <HAL_GPIO_Init+0x2d0>)
 80030aa:	69bb      	ldr	r3, [r7, #24]
 80030ac:	4313      	orrs	r3, r2
 80030ae:	608b      	str	r3, [r1, #8]
 80030b0:	e006      	b.n	80030c0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80030b2:	4b2a      	ldr	r3, [pc, #168]	@ (800315c <HAL_GPIO_Init+0x2d0>)
 80030b4:	689a      	ldr	r2, [r3, #8]
 80030b6:	69bb      	ldr	r3, [r7, #24]
 80030b8:	43db      	mvns	r3, r3
 80030ba:	4928      	ldr	r1, [pc, #160]	@ (800315c <HAL_GPIO_Init+0x2d0>)
 80030bc:	4013      	ands	r3, r2
 80030be:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d006      	beq.n	80030da <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80030cc:	4b23      	ldr	r3, [pc, #140]	@ (800315c <HAL_GPIO_Init+0x2d0>)
 80030ce:	68da      	ldr	r2, [r3, #12]
 80030d0:	4922      	ldr	r1, [pc, #136]	@ (800315c <HAL_GPIO_Init+0x2d0>)
 80030d2:	69bb      	ldr	r3, [r7, #24]
 80030d4:	4313      	orrs	r3, r2
 80030d6:	60cb      	str	r3, [r1, #12]
 80030d8:	e006      	b.n	80030e8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80030da:	4b20      	ldr	r3, [pc, #128]	@ (800315c <HAL_GPIO_Init+0x2d0>)
 80030dc:	68da      	ldr	r2, [r3, #12]
 80030de:	69bb      	ldr	r3, [r7, #24]
 80030e0:	43db      	mvns	r3, r3
 80030e2:	491e      	ldr	r1, [pc, #120]	@ (800315c <HAL_GPIO_Init+0x2d0>)
 80030e4:	4013      	ands	r3, r2
 80030e6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d006      	beq.n	8003102 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80030f4:	4b19      	ldr	r3, [pc, #100]	@ (800315c <HAL_GPIO_Init+0x2d0>)
 80030f6:	685a      	ldr	r2, [r3, #4]
 80030f8:	4918      	ldr	r1, [pc, #96]	@ (800315c <HAL_GPIO_Init+0x2d0>)
 80030fa:	69bb      	ldr	r3, [r7, #24]
 80030fc:	4313      	orrs	r3, r2
 80030fe:	604b      	str	r3, [r1, #4]
 8003100:	e006      	b.n	8003110 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003102:	4b16      	ldr	r3, [pc, #88]	@ (800315c <HAL_GPIO_Init+0x2d0>)
 8003104:	685a      	ldr	r2, [r3, #4]
 8003106:	69bb      	ldr	r3, [r7, #24]
 8003108:	43db      	mvns	r3, r3
 800310a:	4914      	ldr	r1, [pc, #80]	@ (800315c <HAL_GPIO_Init+0x2d0>)
 800310c:	4013      	ands	r3, r2
 800310e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003118:	2b00      	cmp	r3, #0
 800311a:	d021      	beq.n	8003160 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800311c:	4b0f      	ldr	r3, [pc, #60]	@ (800315c <HAL_GPIO_Init+0x2d0>)
 800311e:	681a      	ldr	r2, [r3, #0]
 8003120:	490e      	ldr	r1, [pc, #56]	@ (800315c <HAL_GPIO_Init+0x2d0>)
 8003122:	69bb      	ldr	r3, [r7, #24]
 8003124:	4313      	orrs	r3, r2
 8003126:	600b      	str	r3, [r1, #0]
 8003128:	e021      	b.n	800316e <HAL_GPIO_Init+0x2e2>
 800312a:	bf00      	nop
 800312c:	10320000 	.word	0x10320000
 8003130:	10310000 	.word	0x10310000
 8003134:	10220000 	.word	0x10220000
 8003138:	10210000 	.word	0x10210000
 800313c:	10120000 	.word	0x10120000
 8003140:	10110000 	.word	0x10110000
 8003144:	40021000 	.word	0x40021000
 8003148:	40010000 	.word	0x40010000
 800314c:	40010800 	.word	0x40010800
 8003150:	40010c00 	.word	0x40010c00
 8003154:	40011000 	.word	0x40011000
 8003158:	40011400 	.word	0x40011400
 800315c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003160:	4b0b      	ldr	r3, [pc, #44]	@ (8003190 <HAL_GPIO_Init+0x304>)
 8003162:	681a      	ldr	r2, [r3, #0]
 8003164:	69bb      	ldr	r3, [r7, #24]
 8003166:	43db      	mvns	r3, r3
 8003168:	4909      	ldr	r1, [pc, #36]	@ (8003190 <HAL_GPIO_Init+0x304>)
 800316a:	4013      	ands	r3, r2
 800316c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800316e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003170:	3301      	adds	r3, #1
 8003172:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	681a      	ldr	r2, [r3, #0]
 8003178:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800317a:	fa22 f303 	lsr.w	r3, r2, r3
 800317e:	2b00      	cmp	r3, #0
 8003180:	f47f ae8e 	bne.w	8002ea0 <HAL_GPIO_Init+0x14>
  }
}
 8003184:	bf00      	nop
 8003186:	bf00      	nop
 8003188:	372c      	adds	r7, #44	@ 0x2c
 800318a:	46bd      	mov	sp, r7
 800318c:	bc80      	pop	{r7}
 800318e:	4770      	bx	lr
 8003190:	40010400 	.word	0x40010400

08003194 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003194:	b480      	push	{r7}
 8003196:	b083      	sub	sp, #12
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
 800319c:	460b      	mov	r3, r1
 800319e:	807b      	strh	r3, [r7, #2]
 80031a0:	4613      	mov	r3, r2
 80031a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80031a4:	787b      	ldrb	r3, [r7, #1]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d003      	beq.n	80031b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80031aa:	887a      	ldrh	r2, [r7, #2]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80031b0:	e003      	b.n	80031ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80031b2:	887b      	ldrh	r3, [r7, #2]
 80031b4:	041a      	lsls	r2, r3, #16
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	611a      	str	r2, [r3, #16]
}
 80031ba:	bf00      	nop
 80031bc:	370c      	adds	r7, #12
 80031be:	46bd      	mov	sp, r7
 80031c0:	bc80      	pop	{r7}
 80031c2:	4770      	bx	lr

080031c4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b085      	sub	sp, #20
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
 80031cc:	460b      	mov	r3, r1
 80031ce:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	68db      	ldr	r3, [r3, #12]
 80031d4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80031d6:	887a      	ldrh	r2, [r7, #2]
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	4013      	ands	r3, r2
 80031dc:	041a      	lsls	r2, r3, #16
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	43d9      	mvns	r1, r3
 80031e2:	887b      	ldrh	r3, [r7, #2]
 80031e4:	400b      	ands	r3, r1
 80031e6:	431a      	orrs	r2, r3
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	611a      	str	r2, [r3, #16]
}
 80031ec:	bf00      	nop
 80031ee:	3714      	adds	r7, #20
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bc80      	pop	{r7}
 80031f4:	4770      	bx	lr
	...

080031f8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b082      	sub	sp, #8
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	4603      	mov	r3, r0
 8003200:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003202:	4b08      	ldr	r3, [pc, #32]	@ (8003224 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003204:	695a      	ldr	r2, [r3, #20]
 8003206:	88fb      	ldrh	r3, [r7, #6]
 8003208:	4013      	ands	r3, r2
 800320a:	2b00      	cmp	r3, #0
 800320c:	d006      	beq.n	800321c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800320e:	4a05      	ldr	r2, [pc, #20]	@ (8003224 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003210:	88fb      	ldrh	r3, [r7, #6]
 8003212:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003214:	88fb      	ldrh	r3, [r7, #6]
 8003216:	4618      	mov	r0, r3
 8003218:	f000 f806 	bl	8003228 <HAL_GPIO_EXTI_Callback>
  }
}
 800321c:	bf00      	nop
 800321e:	3708      	adds	r7, #8
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}
 8003224:	40010400 	.word	0x40010400

08003228 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003228:	b480      	push	{r7}
 800322a:	b083      	sub	sp, #12
 800322c:	af00      	add	r7, sp, #0
 800322e:	4603      	mov	r3, r0
 8003230:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003232:	bf00      	nop
 8003234:	370c      	adds	r7, #12
 8003236:	46bd      	mov	sp, r7
 8003238:	bc80      	pop	{r7}
 800323a:	4770      	bx	lr

0800323c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b084      	sub	sp, #16
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d101      	bne.n	800324e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	e12b      	b.n	80034a6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003254:	b2db      	uxtb	r3, r3
 8003256:	2b00      	cmp	r3, #0
 8003258:	d106      	bne.n	8003268 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2200      	movs	r2, #0
 800325e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003262:	6878      	ldr	r0, [r7, #4]
 8003264:	f7fe f8ae 	bl	80013c4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2224      	movs	r2, #36	@ 0x24
 800326c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	681a      	ldr	r2, [r3, #0]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f022 0201 	bic.w	r2, r2, #1
 800327e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800328e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	681a      	ldr	r2, [r3, #0]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800329e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80032a0:	f003 f948 	bl	8006534 <HAL_RCC_GetPCLK1Freq>
 80032a4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	4a81      	ldr	r2, [pc, #516]	@ (80034b0 <HAL_I2C_Init+0x274>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d807      	bhi.n	80032c0 <HAL_I2C_Init+0x84>
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	4a80      	ldr	r2, [pc, #512]	@ (80034b4 <HAL_I2C_Init+0x278>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	bf94      	ite	ls
 80032b8:	2301      	movls	r3, #1
 80032ba:	2300      	movhi	r3, #0
 80032bc:	b2db      	uxtb	r3, r3
 80032be:	e006      	b.n	80032ce <HAL_I2C_Init+0x92>
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	4a7d      	ldr	r2, [pc, #500]	@ (80034b8 <HAL_I2C_Init+0x27c>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	bf94      	ite	ls
 80032c8:	2301      	movls	r3, #1
 80032ca:	2300      	movhi	r3, #0
 80032cc:	b2db      	uxtb	r3, r3
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d001      	beq.n	80032d6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80032d2:	2301      	movs	r3, #1
 80032d4:	e0e7      	b.n	80034a6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	4a78      	ldr	r2, [pc, #480]	@ (80034bc <HAL_I2C_Init+0x280>)
 80032da:	fba2 2303 	umull	r2, r3, r2, r3
 80032de:	0c9b      	lsrs	r3, r3, #18
 80032e0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	68ba      	ldr	r2, [r7, #8]
 80032f2:	430a      	orrs	r2, r1
 80032f4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	6a1b      	ldr	r3, [r3, #32]
 80032fc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	4a6a      	ldr	r2, [pc, #424]	@ (80034b0 <HAL_I2C_Init+0x274>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d802      	bhi.n	8003310 <HAL_I2C_Init+0xd4>
 800330a:	68bb      	ldr	r3, [r7, #8]
 800330c:	3301      	adds	r3, #1
 800330e:	e009      	b.n	8003324 <HAL_I2C_Init+0xe8>
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003316:	fb02 f303 	mul.w	r3, r2, r3
 800331a:	4a69      	ldr	r2, [pc, #420]	@ (80034c0 <HAL_I2C_Init+0x284>)
 800331c:	fba2 2303 	umull	r2, r3, r2, r3
 8003320:	099b      	lsrs	r3, r3, #6
 8003322:	3301      	adds	r3, #1
 8003324:	687a      	ldr	r2, [r7, #4]
 8003326:	6812      	ldr	r2, [r2, #0]
 8003328:	430b      	orrs	r3, r1
 800332a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	69db      	ldr	r3, [r3, #28]
 8003332:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003336:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	495c      	ldr	r1, [pc, #368]	@ (80034b0 <HAL_I2C_Init+0x274>)
 8003340:	428b      	cmp	r3, r1
 8003342:	d819      	bhi.n	8003378 <HAL_I2C_Init+0x13c>
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	1e59      	subs	r1, r3, #1
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	005b      	lsls	r3, r3, #1
 800334e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003352:	1c59      	adds	r1, r3, #1
 8003354:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003358:	400b      	ands	r3, r1
 800335a:	2b00      	cmp	r3, #0
 800335c:	d00a      	beq.n	8003374 <HAL_I2C_Init+0x138>
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	1e59      	subs	r1, r3, #1
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	005b      	lsls	r3, r3, #1
 8003368:	fbb1 f3f3 	udiv	r3, r1, r3
 800336c:	3301      	adds	r3, #1
 800336e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003372:	e051      	b.n	8003418 <HAL_I2C_Init+0x1dc>
 8003374:	2304      	movs	r3, #4
 8003376:	e04f      	b.n	8003418 <HAL_I2C_Init+0x1dc>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d111      	bne.n	80033a4 <HAL_I2C_Init+0x168>
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	1e58      	subs	r0, r3, #1
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6859      	ldr	r1, [r3, #4]
 8003388:	460b      	mov	r3, r1
 800338a:	005b      	lsls	r3, r3, #1
 800338c:	440b      	add	r3, r1
 800338e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003392:	3301      	adds	r3, #1
 8003394:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003398:	2b00      	cmp	r3, #0
 800339a:	bf0c      	ite	eq
 800339c:	2301      	moveq	r3, #1
 800339e:	2300      	movne	r3, #0
 80033a0:	b2db      	uxtb	r3, r3
 80033a2:	e012      	b.n	80033ca <HAL_I2C_Init+0x18e>
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	1e58      	subs	r0, r3, #1
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6859      	ldr	r1, [r3, #4]
 80033ac:	460b      	mov	r3, r1
 80033ae:	009b      	lsls	r3, r3, #2
 80033b0:	440b      	add	r3, r1
 80033b2:	0099      	lsls	r1, r3, #2
 80033b4:	440b      	add	r3, r1
 80033b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80033ba:	3301      	adds	r3, #1
 80033bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	bf0c      	ite	eq
 80033c4:	2301      	moveq	r3, #1
 80033c6:	2300      	movne	r3, #0
 80033c8:	b2db      	uxtb	r3, r3
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d001      	beq.n	80033d2 <HAL_I2C_Init+0x196>
 80033ce:	2301      	movs	r3, #1
 80033d0:	e022      	b.n	8003418 <HAL_I2C_Init+0x1dc>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	689b      	ldr	r3, [r3, #8]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d10e      	bne.n	80033f8 <HAL_I2C_Init+0x1bc>
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	1e58      	subs	r0, r3, #1
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6859      	ldr	r1, [r3, #4]
 80033e2:	460b      	mov	r3, r1
 80033e4:	005b      	lsls	r3, r3, #1
 80033e6:	440b      	add	r3, r1
 80033e8:	fbb0 f3f3 	udiv	r3, r0, r3
 80033ec:	3301      	adds	r3, #1
 80033ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80033f6:	e00f      	b.n	8003418 <HAL_I2C_Init+0x1dc>
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	1e58      	subs	r0, r3, #1
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6859      	ldr	r1, [r3, #4]
 8003400:	460b      	mov	r3, r1
 8003402:	009b      	lsls	r3, r3, #2
 8003404:	440b      	add	r3, r1
 8003406:	0099      	lsls	r1, r3, #2
 8003408:	440b      	add	r3, r1
 800340a:	fbb0 f3f3 	udiv	r3, r0, r3
 800340e:	3301      	adds	r3, #1
 8003410:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003414:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003418:	6879      	ldr	r1, [r7, #4]
 800341a:	6809      	ldr	r1, [r1, #0]
 800341c:	4313      	orrs	r3, r2
 800341e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	69da      	ldr	r2, [r3, #28]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6a1b      	ldr	r3, [r3, #32]
 8003432:	431a      	orrs	r2, r3
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	430a      	orrs	r2, r1
 800343a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	689b      	ldr	r3, [r3, #8]
 8003442:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003446:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800344a:	687a      	ldr	r2, [r7, #4]
 800344c:	6911      	ldr	r1, [r2, #16]
 800344e:	687a      	ldr	r2, [r7, #4]
 8003450:	68d2      	ldr	r2, [r2, #12]
 8003452:	4311      	orrs	r1, r2
 8003454:	687a      	ldr	r2, [r7, #4]
 8003456:	6812      	ldr	r2, [r2, #0]
 8003458:	430b      	orrs	r3, r1
 800345a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	68db      	ldr	r3, [r3, #12]
 8003462:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	695a      	ldr	r2, [r3, #20]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	699b      	ldr	r3, [r3, #24]
 800346e:	431a      	orrs	r2, r3
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	430a      	orrs	r2, r1
 8003476:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	681a      	ldr	r2, [r3, #0]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f042 0201 	orr.w	r2, r2, #1
 8003486:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2200      	movs	r2, #0
 800348c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2220      	movs	r2, #32
 8003492:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2200      	movs	r2, #0
 800349a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2200      	movs	r2, #0
 80034a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80034a4:	2300      	movs	r3, #0
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	3710      	adds	r7, #16
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}
 80034ae:	bf00      	nop
 80034b0:	000186a0 	.word	0x000186a0
 80034b4:	001e847f 	.word	0x001e847f
 80034b8:	003d08ff 	.word	0x003d08ff
 80034bc:	431bde83 	.word	0x431bde83
 80034c0:	10624dd3 	.word	0x10624dd3

080034c4 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 80034c4:	b480      	push	{r7}
 80034c6:	b083      	sub	sp, #12
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	695b      	ldr	r3, [r3, #20]
 80034d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034d6:	2b80      	cmp	r3, #128	@ 0x80
 80034d8:	d103      	bne.n	80034e2 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	2200      	movs	r2, #0
 80034e0:	611a      	str	r2, [r3, #16]
  }
}
 80034e2:	bf00      	nop
 80034e4:	370c      	adds	r7, #12
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bc80      	pop	{r7}
 80034ea:	4770      	bx	lr

080034ec <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b088      	sub	sp, #32
 80034f0:	af02      	add	r7, sp, #8
 80034f2:	60f8      	str	r0, [r7, #12]
 80034f4:	607a      	str	r2, [r7, #4]
 80034f6:	461a      	mov	r2, r3
 80034f8:	460b      	mov	r3, r1
 80034fa:	817b      	strh	r3, [r7, #10]
 80034fc:	4613      	mov	r3, r2
 80034fe:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003500:	f7fe fcc8 	bl	8001e94 <HAL_GetTick>
 8003504:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800350c:	b2db      	uxtb	r3, r3
 800350e:	2b20      	cmp	r3, #32
 8003510:	f040 80e0 	bne.w	80036d4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003514:	697b      	ldr	r3, [r7, #20]
 8003516:	9300      	str	r3, [sp, #0]
 8003518:	2319      	movs	r3, #25
 800351a:	2201      	movs	r2, #1
 800351c:	4970      	ldr	r1, [pc, #448]	@ (80036e0 <HAL_I2C_Master_Transmit+0x1f4>)
 800351e:	68f8      	ldr	r0, [r7, #12]
 8003520:	f002 f9bc 	bl	800589c <I2C_WaitOnFlagUntilTimeout>
 8003524:	4603      	mov	r3, r0
 8003526:	2b00      	cmp	r3, #0
 8003528:	d001      	beq.n	800352e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800352a:	2302      	movs	r3, #2
 800352c:	e0d3      	b.n	80036d6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003534:	2b01      	cmp	r3, #1
 8003536:	d101      	bne.n	800353c <HAL_I2C_Master_Transmit+0x50>
 8003538:	2302      	movs	r3, #2
 800353a:	e0cc      	b.n	80036d6 <HAL_I2C_Master_Transmit+0x1ea>
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	2201      	movs	r2, #1
 8003540:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f003 0301 	and.w	r3, r3, #1
 800354e:	2b01      	cmp	r3, #1
 8003550:	d007      	beq.n	8003562 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	681a      	ldr	r2, [r3, #0]
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f042 0201 	orr.w	r2, r2, #1
 8003560:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	681a      	ldr	r2, [r3, #0]
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003570:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	2221      	movs	r2, #33	@ 0x21
 8003576:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	2210      	movs	r2, #16
 800357e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	2200      	movs	r2, #0
 8003586:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	687a      	ldr	r2, [r7, #4]
 800358c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	893a      	ldrh	r2, [r7, #8]
 8003592:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003598:	b29a      	uxth	r2, r3
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	4a50      	ldr	r2, [pc, #320]	@ (80036e4 <HAL_I2C_Master_Transmit+0x1f8>)
 80035a2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80035a4:	8979      	ldrh	r1, [r7, #10]
 80035a6:	697b      	ldr	r3, [r7, #20]
 80035a8:	6a3a      	ldr	r2, [r7, #32]
 80035aa:	68f8      	ldr	r0, [r7, #12]
 80035ac:	f001 fece 	bl	800534c <I2C_MasterRequestWrite>
 80035b0:	4603      	mov	r3, r0
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d001      	beq.n	80035ba <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
 80035b8:	e08d      	b.n	80036d6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035ba:	2300      	movs	r3, #0
 80035bc:	613b      	str	r3, [r7, #16]
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	695b      	ldr	r3, [r3, #20]
 80035c4:	613b      	str	r3, [r7, #16]
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	699b      	ldr	r3, [r3, #24]
 80035cc:	613b      	str	r3, [r7, #16]
 80035ce:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80035d0:	e066      	b.n	80036a0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035d2:	697a      	ldr	r2, [r7, #20]
 80035d4:	6a39      	ldr	r1, [r7, #32]
 80035d6:	68f8      	ldr	r0, [r7, #12]
 80035d8:	f002 fa7a 	bl	8005ad0 <I2C_WaitOnTXEFlagUntilTimeout>
 80035dc:	4603      	mov	r3, r0
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d00d      	beq.n	80035fe <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035e6:	2b04      	cmp	r3, #4
 80035e8:	d107      	bne.n	80035fa <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	681a      	ldr	r2, [r3, #0]
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80035f8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80035fa:	2301      	movs	r3, #1
 80035fc:	e06b      	b.n	80036d6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003602:	781a      	ldrb	r2, [r3, #0]
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800360e:	1c5a      	adds	r2, r3, #1
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003618:	b29b      	uxth	r3, r3
 800361a:	3b01      	subs	r3, #1
 800361c:	b29a      	uxth	r2, r3
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003626:	3b01      	subs	r3, #1
 8003628:	b29a      	uxth	r2, r3
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	695b      	ldr	r3, [r3, #20]
 8003634:	f003 0304 	and.w	r3, r3, #4
 8003638:	2b04      	cmp	r3, #4
 800363a:	d11b      	bne.n	8003674 <HAL_I2C_Master_Transmit+0x188>
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003640:	2b00      	cmp	r3, #0
 8003642:	d017      	beq.n	8003674 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003648:	781a      	ldrb	r2, [r3, #0]
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003654:	1c5a      	adds	r2, r3, #1
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800365e:	b29b      	uxth	r3, r3
 8003660:	3b01      	subs	r3, #1
 8003662:	b29a      	uxth	r2, r3
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800366c:	3b01      	subs	r3, #1
 800366e:	b29a      	uxth	r2, r3
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003674:	697a      	ldr	r2, [r7, #20]
 8003676:	6a39      	ldr	r1, [r7, #32]
 8003678:	68f8      	ldr	r0, [r7, #12]
 800367a:	f002 fa71 	bl	8005b60 <I2C_WaitOnBTFFlagUntilTimeout>
 800367e:	4603      	mov	r3, r0
 8003680:	2b00      	cmp	r3, #0
 8003682:	d00d      	beq.n	80036a0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003688:	2b04      	cmp	r3, #4
 800368a:	d107      	bne.n	800369c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	681a      	ldr	r2, [r3, #0]
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800369a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800369c:	2301      	movs	r3, #1
 800369e:	e01a      	b.n	80036d6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d194      	bne.n	80035d2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	681a      	ldr	r2, [r3, #0]
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80036b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	2220      	movs	r2, #32
 80036bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	2200      	movs	r2, #0
 80036c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	2200      	movs	r2, #0
 80036cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80036d0:	2300      	movs	r3, #0
 80036d2:	e000      	b.n	80036d6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80036d4:	2302      	movs	r3, #2
  }
}
 80036d6:	4618      	mov	r0, r3
 80036d8:	3718      	adds	r7, #24
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}
 80036de:	bf00      	nop
 80036e0:	00100002 	.word	0x00100002
 80036e4:	ffff0000 	.word	0xffff0000

080036e8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b088      	sub	sp, #32
 80036ec:	af02      	add	r7, sp, #8
 80036ee:	60f8      	str	r0, [r7, #12]
 80036f0:	4608      	mov	r0, r1
 80036f2:	4611      	mov	r1, r2
 80036f4:	461a      	mov	r2, r3
 80036f6:	4603      	mov	r3, r0
 80036f8:	817b      	strh	r3, [r7, #10]
 80036fa:	460b      	mov	r3, r1
 80036fc:	813b      	strh	r3, [r7, #8]
 80036fe:	4613      	mov	r3, r2
 8003700:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003702:	f7fe fbc7 	bl	8001e94 <HAL_GetTick>
 8003706:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800370e:	b2db      	uxtb	r3, r3
 8003710:	2b20      	cmp	r3, #32
 8003712:	f040 80d9 	bne.w	80038c8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	9300      	str	r3, [sp, #0]
 800371a:	2319      	movs	r3, #25
 800371c:	2201      	movs	r2, #1
 800371e:	496d      	ldr	r1, [pc, #436]	@ (80038d4 <HAL_I2C_Mem_Write+0x1ec>)
 8003720:	68f8      	ldr	r0, [r7, #12]
 8003722:	f002 f8bb 	bl	800589c <I2C_WaitOnFlagUntilTimeout>
 8003726:	4603      	mov	r3, r0
 8003728:	2b00      	cmp	r3, #0
 800372a:	d001      	beq.n	8003730 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800372c:	2302      	movs	r3, #2
 800372e:	e0cc      	b.n	80038ca <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003736:	2b01      	cmp	r3, #1
 8003738:	d101      	bne.n	800373e <HAL_I2C_Mem_Write+0x56>
 800373a:	2302      	movs	r3, #2
 800373c:	e0c5      	b.n	80038ca <HAL_I2C_Mem_Write+0x1e2>
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	2201      	movs	r2, #1
 8003742:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f003 0301 	and.w	r3, r3, #1
 8003750:	2b01      	cmp	r3, #1
 8003752:	d007      	beq.n	8003764 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	681a      	ldr	r2, [r3, #0]
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f042 0201 	orr.w	r2, r2, #1
 8003762:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	681a      	ldr	r2, [r3, #0]
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003772:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	2221      	movs	r2, #33	@ 0x21
 8003778:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	2240      	movs	r2, #64	@ 0x40
 8003780:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	2200      	movs	r2, #0
 8003788:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	6a3a      	ldr	r2, [r7, #32]
 800378e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003794:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800379a:	b29a      	uxth	r2, r3
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	4a4d      	ldr	r2, [pc, #308]	@ (80038d8 <HAL_I2C_Mem_Write+0x1f0>)
 80037a4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80037a6:	88f8      	ldrh	r0, [r7, #6]
 80037a8:	893a      	ldrh	r2, [r7, #8]
 80037aa:	8979      	ldrh	r1, [r7, #10]
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	9301      	str	r3, [sp, #4]
 80037b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037b2:	9300      	str	r3, [sp, #0]
 80037b4:	4603      	mov	r3, r0
 80037b6:	68f8      	ldr	r0, [r7, #12]
 80037b8:	f001 fe4a 	bl	8005450 <I2C_RequestMemoryWrite>
 80037bc:	4603      	mov	r3, r0
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d052      	beq.n	8003868 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	e081      	b.n	80038ca <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037c6:	697a      	ldr	r2, [r7, #20]
 80037c8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80037ca:	68f8      	ldr	r0, [r7, #12]
 80037cc:	f002 f980 	bl	8005ad0 <I2C_WaitOnTXEFlagUntilTimeout>
 80037d0:	4603      	mov	r3, r0
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d00d      	beq.n	80037f2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037da:	2b04      	cmp	r3, #4
 80037dc:	d107      	bne.n	80037ee <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	681a      	ldr	r2, [r3, #0]
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80037ec:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	e06b      	b.n	80038ca <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037f6:	781a      	ldrb	r2, [r3, #0]
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003802:	1c5a      	adds	r2, r3, #1
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800380c:	3b01      	subs	r3, #1
 800380e:	b29a      	uxth	r2, r3
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003818:	b29b      	uxth	r3, r3
 800381a:	3b01      	subs	r3, #1
 800381c:	b29a      	uxth	r2, r3
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	695b      	ldr	r3, [r3, #20]
 8003828:	f003 0304 	and.w	r3, r3, #4
 800382c:	2b04      	cmp	r3, #4
 800382e:	d11b      	bne.n	8003868 <HAL_I2C_Mem_Write+0x180>
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003834:	2b00      	cmp	r3, #0
 8003836:	d017      	beq.n	8003868 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800383c:	781a      	ldrb	r2, [r3, #0]
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003848:	1c5a      	adds	r2, r3, #1
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003852:	3b01      	subs	r3, #1
 8003854:	b29a      	uxth	r2, r3
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800385e:	b29b      	uxth	r3, r3
 8003860:	3b01      	subs	r3, #1
 8003862:	b29a      	uxth	r2, r3
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800386c:	2b00      	cmp	r3, #0
 800386e:	d1aa      	bne.n	80037c6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003870:	697a      	ldr	r2, [r7, #20]
 8003872:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003874:	68f8      	ldr	r0, [r7, #12]
 8003876:	f002 f973 	bl	8005b60 <I2C_WaitOnBTFFlagUntilTimeout>
 800387a:	4603      	mov	r3, r0
 800387c:	2b00      	cmp	r3, #0
 800387e:	d00d      	beq.n	800389c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003884:	2b04      	cmp	r3, #4
 8003886:	d107      	bne.n	8003898 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	681a      	ldr	r2, [r3, #0]
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003896:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003898:	2301      	movs	r3, #1
 800389a:	e016      	b.n	80038ca <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	681a      	ldr	r2, [r3, #0]
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80038aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	2220      	movs	r2, #32
 80038b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	2200      	movs	r2, #0
 80038b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	2200      	movs	r2, #0
 80038c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80038c4:	2300      	movs	r3, #0
 80038c6:	e000      	b.n	80038ca <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80038c8:	2302      	movs	r3, #2
  }
}
 80038ca:	4618      	mov	r0, r3
 80038cc:	3718      	adds	r7, #24
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}
 80038d2:	bf00      	nop
 80038d4:	00100002 	.word	0x00100002
 80038d8:	ffff0000 	.word	0xffff0000

080038dc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b08c      	sub	sp, #48	@ 0x30
 80038e0:	af02      	add	r7, sp, #8
 80038e2:	60f8      	str	r0, [r7, #12]
 80038e4:	4608      	mov	r0, r1
 80038e6:	4611      	mov	r1, r2
 80038e8:	461a      	mov	r2, r3
 80038ea:	4603      	mov	r3, r0
 80038ec:	817b      	strh	r3, [r7, #10]
 80038ee:	460b      	mov	r3, r1
 80038f0:	813b      	strh	r3, [r7, #8]
 80038f2:	4613      	mov	r3, r2
 80038f4:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80038f6:	2300      	movs	r3, #0
 80038f8:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80038fa:	f7fe facb 	bl	8001e94 <HAL_GetTick>
 80038fe:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003906:	b2db      	uxtb	r3, r3
 8003908:	2b20      	cmp	r3, #32
 800390a:	f040 8250 	bne.w	8003dae <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800390e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003910:	9300      	str	r3, [sp, #0]
 8003912:	2319      	movs	r3, #25
 8003914:	2201      	movs	r2, #1
 8003916:	4982      	ldr	r1, [pc, #520]	@ (8003b20 <HAL_I2C_Mem_Read+0x244>)
 8003918:	68f8      	ldr	r0, [r7, #12]
 800391a:	f001 ffbf 	bl	800589c <I2C_WaitOnFlagUntilTimeout>
 800391e:	4603      	mov	r3, r0
 8003920:	2b00      	cmp	r3, #0
 8003922:	d001      	beq.n	8003928 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8003924:	2302      	movs	r3, #2
 8003926:	e243      	b.n	8003db0 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800392e:	2b01      	cmp	r3, #1
 8003930:	d101      	bne.n	8003936 <HAL_I2C_Mem_Read+0x5a>
 8003932:	2302      	movs	r3, #2
 8003934:	e23c      	b.n	8003db0 <HAL_I2C_Mem_Read+0x4d4>
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	2201      	movs	r2, #1
 800393a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f003 0301 	and.w	r3, r3, #1
 8003948:	2b01      	cmp	r3, #1
 800394a:	d007      	beq.n	800395c <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	681a      	ldr	r2, [r3, #0]
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f042 0201 	orr.w	r2, r2, #1
 800395a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	681a      	ldr	r2, [r3, #0]
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800396a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	2222      	movs	r2, #34	@ 0x22
 8003970:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	2240      	movs	r2, #64	@ 0x40
 8003978:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	2200      	movs	r2, #0
 8003980:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003986:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800398c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003992:	b29a      	uxth	r2, r3
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	4a62      	ldr	r2, [pc, #392]	@ (8003b24 <HAL_I2C_Mem_Read+0x248>)
 800399c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800399e:	88f8      	ldrh	r0, [r7, #6]
 80039a0:	893a      	ldrh	r2, [r7, #8]
 80039a2:	8979      	ldrh	r1, [r7, #10]
 80039a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039a6:	9301      	str	r3, [sp, #4]
 80039a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039aa:	9300      	str	r3, [sp, #0]
 80039ac:	4603      	mov	r3, r0
 80039ae:	68f8      	ldr	r0, [r7, #12]
 80039b0:	f001 fde4 	bl	800557c <I2C_RequestMemoryRead>
 80039b4:	4603      	mov	r3, r0
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d001      	beq.n	80039be <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80039ba:	2301      	movs	r3, #1
 80039bc:	e1f8      	b.n	8003db0 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d113      	bne.n	80039ee <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039c6:	2300      	movs	r3, #0
 80039c8:	61fb      	str	r3, [r7, #28]
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	695b      	ldr	r3, [r3, #20]
 80039d0:	61fb      	str	r3, [r7, #28]
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	699b      	ldr	r3, [r3, #24]
 80039d8:	61fb      	str	r3, [r7, #28]
 80039da:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	681a      	ldr	r2, [r3, #0]
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80039ea:	601a      	str	r2, [r3, #0]
 80039ec:	e1cc      	b.n	8003d88 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039f2:	2b01      	cmp	r3, #1
 80039f4:	d11e      	bne.n	8003a34 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	681a      	ldr	r2, [r3, #0]
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a04:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003a06:	b672      	cpsid	i
}
 8003a08:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	61bb      	str	r3, [r7, #24]
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	695b      	ldr	r3, [r3, #20]
 8003a14:	61bb      	str	r3, [r7, #24]
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	699b      	ldr	r3, [r3, #24]
 8003a1c:	61bb      	str	r3, [r7, #24]
 8003a1e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	681a      	ldr	r2, [r3, #0]
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a2e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003a30:	b662      	cpsie	i
}
 8003a32:	e035      	b.n	8003aa0 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a38:	2b02      	cmp	r3, #2
 8003a3a:	d11e      	bne.n	8003a7a <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	681a      	ldr	r2, [r3, #0]
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003a4a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003a4c:	b672      	cpsid	i
}
 8003a4e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a50:	2300      	movs	r3, #0
 8003a52:	617b      	str	r3, [r7, #20]
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	695b      	ldr	r3, [r3, #20]
 8003a5a:	617b      	str	r3, [r7, #20]
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	699b      	ldr	r3, [r3, #24]
 8003a62:	617b      	str	r3, [r7, #20]
 8003a64:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	681a      	ldr	r2, [r3, #0]
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a74:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003a76:	b662      	cpsie	i
}
 8003a78:	e012      	b.n	8003aa0 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	681a      	ldr	r2, [r3, #0]
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003a88:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	613b      	str	r3, [r7, #16]
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	695b      	ldr	r3, [r3, #20]
 8003a94:	613b      	str	r3, [r7, #16]
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	699b      	ldr	r3, [r3, #24]
 8003a9c:	613b      	str	r3, [r7, #16]
 8003a9e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003aa0:	e172      	b.n	8003d88 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003aa6:	2b03      	cmp	r3, #3
 8003aa8:	f200 811f 	bhi.w	8003cea <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ab0:	2b01      	cmp	r3, #1
 8003ab2:	d123      	bne.n	8003afc <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ab4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ab6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003ab8:	68f8      	ldr	r0, [r7, #12]
 8003aba:	f002 f8cb 	bl	8005c54 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d001      	beq.n	8003ac8 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	e173      	b.n	8003db0 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	691a      	ldr	r2, [r3, #16]
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ad2:	b2d2      	uxtb	r2, r2
 8003ad4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ada:	1c5a      	adds	r2, r3, #1
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ae4:	3b01      	subs	r3, #1
 8003ae6:	b29a      	uxth	r2, r3
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003af0:	b29b      	uxth	r3, r3
 8003af2:	3b01      	subs	r3, #1
 8003af4:	b29a      	uxth	r2, r3
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003afa:	e145      	b.n	8003d88 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b00:	2b02      	cmp	r3, #2
 8003b02:	d152      	bne.n	8003baa <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003b04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b06:	9300      	str	r3, [sp, #0]
 8003b08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	4906      	ldr	r1, [pc, #24]	@ (8003b28 <HAL_I2C_Mem_Read+0x24c>)
 8003b0e:	68f8      	ldr	r0, [r7, #12]
 8003b10:	f001 fec4 	bl	800589c <I2C_WaitOnFlagUntilTimeout>
 8003b14:	4603      	mov	r3, r0
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d008      	beq.n	8003b2c <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	e148      	b.n	8003db0 <HAL_I2C_Mem_Read+0x4d4>
 8003b1e:	bf00      	nop
 8003b20:	00100002 	.word	0x00100002
 8003b24:	ffff0000 	.word	0xffff0000
 8003b28:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003b2c:	b672      	cpsid	i
}
 8003b2e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	681a      	ldr	r2, [r3, #0]
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b3e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	691a      	ldr	r2, [r3, #16]
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b4a:	b2d2      	uxtb	r2, r2
 8003b4c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b52:	1c5a      	adds	r2, r3, #1
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b5c:	3b01      	subs	r3, #1
 8003b5e:	b29a      	uxth	r2, r3
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b68:	b29b      	uxth	r3, r3
 8003b6a:	3b01      	subs	r3, #1
 8003b6c:	b29a      	uxth	r2, r3
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003b72:	b662      	cpsie	i
}
 8003b74:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	691a      	ldr	r2, [r3, #16]
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b80:	b2d2      	uxtb	r2, r2
 8003b82:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b88:	1c5a      	adds	r2, r3, #1
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b92:	3b01      	subs	r3, #1
 8003b94:	b29a      	uxth	r2, r3
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b9e:	b29b      	uxth	r3, r3
 8003ba0:	3b01      	subs	r3, #1
 8003ba2:	b29a      	uxth	r2, r3
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003ba8:	e0ee      	b.n	8003d88 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003baa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bac:	9300      	str	r3, [sp, #0]
 8003bae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	4981      	ldr	r1, [pc, #516]	@ (8003db8 <HAL_I2C_Mem_Read+0x4dc>)
 8003bb4:	68f8      	ldr	r0, [r7, #12]
 8003bb6:	f001 fe71 	bl	800589c <I2C_WaitOnFlagUntilTimeout>
 8003bba:	4603      	mov	r3, r0
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d001      	beq.n	8003bc4 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	e0f5      	b.n	8003db0 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	681a      	ldr	r2, [r3, #0]
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003bd2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003bd4:	b672      	cpsid	i
}
 8003bd6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	691a      	ldr	r2, [r3, #16]
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003be2:	b2d2      	uxtb	r2, r2
 8003be4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bea:	1c5a      	adds	r2, r3, #1
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bf4:	3b01      	subs	r3, #1
 8003bf6:	b29a      	uxth	r2, r3
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c00:	b29b      	uxth	r3, r3
 8003c02:	3b01      	subs	r3, #1
 8003c04:	b29a      	uxth	r2, r3
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003c0a:	4b6c      	ldr	r3, [pc, #432]	@ (8003dbc <HAL_I2C_Mem_Read+0x4e0>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	08db      	lsrs	r3, r3, #3
 8003c10:	4a6b      	ldr	r2, [pc, #428]	@ (8003dc0 <HAL_I2C_Mem_Read+0x4e4>)
 8003c12:	fba2 2303 	umull	r2, r3, r2, r3
 8003c16:	0a1a      	lsrs	r2, r3, #8
 8003c18:	4613      	mov	r3, r2
 8003c1a:	009b      	lsls	r3, r3, #2
 8003c1c:	4413      	add	r3, r2
 8003c1e:	00da      	lsls	r2, r3, #3
 8003c20:	1ad3      	subs	r3, r2, r3
 8003c22:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003c24:	6a3b      	ldr	r3, [r7, #32]
 8003c26:	3b01      	subs	r3, #1
 8003c28:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003c2a:	6a3b      	ldr	r3, [r7, #32]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d118      	bne.n	8003c62 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	2200      	movs	r2, #0
 8003c34:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	2220      	movs	r2, #32
 8003c3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	2200      	movs	r2, #0
 8003c42:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c4a:	f043 0220 	orr.w	r2, r3, #32
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003c52:	b662      	cpsie	i
}
 8003c54:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	e0a6      	b.n	8003db0 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	695b      	ldr	r3, [r3, #20]
 8003c68:	f003 0304 	and.w	r3, r3, #4
 8003c6c:	2b04      	cmp	r3, #4
 8003c6e:	d1d9      	bne.n	8003c24 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	681a      	ldr	r2, [r3, #0]
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c7e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	691a      	ldr	r2, [r3, #16]
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c8a:	b2d2      	uxtb	r2, r2
 8003c8c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c92:	1c5a      	adds	r2, r3, #1
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c9c:	3b01      	subs	r3, #1
 8003c9e:	b29a      	uxth	r2, r3
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ca8:	b29b      	uxth	r3, r3
 8003caa:	3b01      	subs	r3, #1
 8003cac:	b29a      	uxth	r2, r3
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003cb2:	b662      	cpsie	i
}
 8003cb4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	691a      	ldr	r2, [r3, #16]
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cc0:	b2d2      	uxtb	r2, r2
 8003cc2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cc8:	1c5a      	adds	r2, r3, #1
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cd2:	3b01      	subs	r3, #1
 8003cd4:	b29a      	uxth	r2, r3
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cde:	b29b      	uxth	r3, r3
 8003ce0:	3b01      	subs	r3, #1
 8003ce2:	b29a      	uxth	r2, r3
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003ce8:	e04e      	b.n	8003d88 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003cea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003cec:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003cee:	68f8      	ldr	r0, [r7, #12]
 8003cf0:	f001 ffb0 	bl	8005c54 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d001      	beq.n	8003cfe <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	e058      	b.n	8003db0 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	691a      	ldr	r2, [r3, #16]
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d08:	b2d2      	uxtb	r2, r2
 8003d0a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d10:	1c5a      	adds	r2, r3, #1
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d1a:	3b01      	subs	r3, #1
 8003d1c:	b29a      	uxth	r2, r3
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d26:	b29b      	uxth	r3, r3
 8003d28:	3b01      	subs	r3, #1
 8003d2a:	b29a      	uxth	r2, r3
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	695b      	ldr	r3, [r3, #20]
 8003d36:	f003 0304 	and.w	r3, r3, #4
 8003d3a:	2b04      	cmp	r3, #4
 8003d3c:	d124      	bne.n	8003d88 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d42:	2b03      	cmp	r3, #3
 8003d44:	d107      	bne.n	8003d56 <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	681a      	ldr	r2, [r3, #0]
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d54:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	691a      	ldr	r2, [r3, #16]
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d60:	b2d2      	uxtb	r2, r2
 8003d62:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d68:	1c5a      	adds	r2, r3, #1
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d72:	3b01      	subs	r3, #1
 8003d74:	b29a      	uxth	r2, r3
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d7e:	b29b      	uxth	r3, r3
 8003d80:	3b01      	subs	r3, #1
 8003d82:	b29a      	uxth	r2, r3
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	f47f ae88 	bne.w	8003aa2 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	2220      	movs	r2, #32
 8003d96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	2200      	movs	r2, #0
 8003da6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003daa:	2300      	movs	r3, #0
 8003dac:	e000      	b.n	8003db0 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 8003dae:	2302      	movs	r3, #2
  }
}
 8003db0:	4618      	mov	r0, r3
 8003db2:	3728      	adds	r7, #40	@ 0x28
 8003db4:	46bd      	mov	sp, r7
 8003db6:	bd80      	pop	{r7, pc}
 8003db8:	00010004 	.word	0x00010004
 8003dbc:	2000001c 	.word	0x2000001c
 8003dc0:	14f8b589 	.word	0x14f8b589

08003dc4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b088      	sub	sp, #32
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003dcc:	2300      	movs	r3, #0
 8003dce:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ddc:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003de4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003dec:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003dee:	7bfb      	ldrb	r3, [r7, #15]
 8003df0:	2b10      	cmp	r3, #16
 8003df2:	d003      	beq.n	8003dfc <HAL_I2C_EV_IRQHandler+0x38>
 8003df4:	7bfb      	ldrb	r3, [r7, #15]
 8003df6:	2b40      	cmp	r3, #64	@ 0x40
 8003df8:	f040 80b1 	bne.w	8003f5e <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	699b      	ldr	r3, [r3, #24]
 8003e02:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	695b      	ldr	r3, [r3, #20]
 8003e0a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003e0c:	69fb      	ldr	r3, [r7, #28]
 8003e0e:	f003 0301 	and.w	r3, r3, #1
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d10d      	bne.n	8003e32 <HAL_I2C_EV_IRQHandler+0x6e>
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8003e1c:	d003      	beq.n	8003e26 <HAL_I2C_EV_IRQHandler+0x62>
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8003e24:	d101      	bne.n	8003e2a <HAL_I2C_EV_IRQHandler+0x66>
 8003e26:	2301      	movs	r3, #1
 8003e28:	e000      	b.n	8003e2c <HAL_I2C_EV_IRQHandler+0x68>
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	2b01      	cmp	r3, #1
 8003e2e:	f000 8114 	beq.w	800405a <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003e32:	69fb      	ldr	r3, [r7, #28]
 8003e34:	f003 0301 	and.w	r3, r3, #1
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d00b      	beq.n	8003e54 <HAL_I2C_EV_IRQHandler+0x90>
 8003e3c:	697b      	ldr	r3, [r7, #20]
 8003e3e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d006      	beq.n	8003e54 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003e46:	6878      	ldr	r0, [r7, #4]
 8003e48:	f001 ff8f 	bl	8005d6a <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003e4c:	6878      	ldr	r0, [r7, #4]
 8003e4e:	f000 fccd 	bl	80047ec <I2C_Master_SB>
 8003e52:	e083      	b.n	8003f5c <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003e54:	69fb      	ldr	r3, [r7, #28]
 8003e56:	f003 0308 	and.w	r3, r3, #8
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d008      	beq.n	8003e70 <HAL_I2C_EV_IRQHandler+0xac>
 8003e5e:	697b      	ldr	r3, [r7, #20]
 8003e60:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d003      	beq.n	8003e70 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8003e68:	6878      	ldr	r0, [r7, #4]
 8003e6a:	f000 fd44 	bl	80048f6 <I2C_Master_ADD10>
 8003e6e:	e075      	b.n	8003f5c <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003e70:	69fb      	ldr	r3, [r7, #28]
 8003e72:	f003 0302 	and.w	r3, r3, #2
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d008      	beq.n	8003e8c <HAL_I2C_EV_IRQHandler+0xc8>
 8003e7a:	697b      	ldr	r3, [r7, #20]
 8003e7c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d003      	beq.n	8003e8c <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 8003e84:	6878      	ldr	r0, [r7, #4]
 8003e86:	f000 fd5f 	bl	8004948 <I2C_Master_ADDR>
 8003e8a:	e067      	b.n	8003f5c <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003e8c:	69bb      	ldr	r3, [r7, #24]
 8003e8e:	f003 0304 	and.w	r3, r3, #4
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d036      	beq.n	8003f04 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003ea0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003ea4:	f000 80db 	beq.w	800405e <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003ea8:	69fb      	ldr	r3, [r7, #28]
 8003eaa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d00d      	beq.n	8003ece <HAL_I2C_EV_IRQHandler+0x10a>
 8003eb2:	697b      	ldr	r3, [r7, #20]
 8003eb4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d008      	beq.n	8003ece <HAL_I2C_EV_IRQHandler+0x10a>
 8003ebc:	69fb      	ldr	r3, [r7, #28]
 8003ebe:	f003 0304 	and.w	r3, r3, #4
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d103      	bne.n	8003ece <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	f000 f92d 	bl	8004126 <I2C_MasterTransmit_TXE>
 8003ecc:	e046      	b.n	8003f5c <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003ece:	69fb      	ldr	r3, [r7, #28]
 8003ed0:	f003 0304 	and.w	r3, r3, #4
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	f000 80c2 	beq.w	800405e <HAL_I2C_EV_IRQHandler+0x29a>
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	f000 80bc 	beq.w	800405e <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003ee6:	7bbb      	ldrb	r3, [r7, #14]
 8003ee8:	2b21      	cmp	r3, #33	@ 0x21
 8003eea:	d103      	bne.n	8003ef4 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8003eec:	6878      	ldr	r0, [r7, #4]
 8003eee:	f000 f9b6 	bl	800425e <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003ef2:	e0b4      	b.n	800405e <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8003ef4:	7bfb      	ldrb	r3, [r7, #15]
 8003ef6:	2b40      	cmp	r3, #64	@ 0x40
 8003ef8:	f040 80b1 	bne.w	800405e <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003efc:	6878      	ldr	r0, [r7, #4]
 8003efe:	f000 fa24 	bl	800434a <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003f02:	e0ac      	b.n	800405e <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003f0e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003f12:	f000 80a4 	beq.w	800405e <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003f16:	69fb      	ldr	r3, [r7, #28]
 8003f18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d00d      	beq.n	8003f3c <HAL_I2C_EV_IRQHandler+0x178>
 8003f20:	697b      	ldr	r3, [r7, #20]
 8003f22:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d008      	beq.n	8003f3c <HAL_I2C_EV_IRQHandler+0x178>
 8003f2a:	69fb      	ldr	r3, [r7, #28]
 8003f2c:	f003 0304 	and.w	r3, r3, #4
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d103      	bne.n	8003f3c <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003f34:	6878      	ldr	r0, [r7, #4]
 8003f36:	f000 faa0 	bl	800447a <I2C_MasterReceive_RXNE>
 8003f3a:	e00f      	b.n	8003f5c <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003f3c:	69fb      	ldr	r3, [r7, #28]
 8003f3e:	f003 0304 	and.w	r3, r3, #4
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	f000 808b 	beq.w	800405e <HAL_I2C_EV_IRQHandler+0x29a>
 8003f48:	697b      	ldr	r3, [r7, #20]
 8003f4a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	f000 8085 	beq.w	800405e <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003f54:	6878      	ldr	r0, [r7, #4]
 8003f56:	f000 fb58 	bl	800460a <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003f5a:	e080      	b.n	800405e <HAL_I2C_EV_IRQHandler+0x29a>
 8003f5c:	e07f      	b.n	800405e <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d004      	beq.n	8003f70 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	695b      	ldr	r3, [r3, #20]
 8003f6c:	61fb      	str	r3, [r7, #28]
 8003f6e:	e007      	b.n	8003f80 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	699b      	ldr	r3, [r3, #24]
 8003f76:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	695b      	ldr	r3, [r3, #20]
 8003f7e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003f80:	69fb      	ldr	r3, [r7, #28]
 8003f82:	f003 0302 	and.w	r3, r3, #2
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d011      	beq.n	8003fae <HAL_I2C_EV_IRQHandler+0x1ea>
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d00c      	beq.n	8003fae <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d003      	beq.n	8003fa4 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	699b      	ldr	r3, [r3, #24]
 8003fa2:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003fa4:	69b9      	ldr	r1, [r7, #24]
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	f000 ff25 	bl	8004df6 <I2C_Slave_ADDR>
 8003fac:	e05a      	b.n	8004064 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003fae:	69fb      	ldr	r3, [r7, #28]
 8003fb0:	f003 0310 	and.w	r3, r3, #16
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d008      	beq.n	8003fca <HAL_I2C_EV_IRQHandler+0x206>
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d003      	beq.n	8003fca <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 8003fc2:	6878      	ldr	r0, [r7, #4]
 8003fc4:	f000 ff60 	bl	8004e88 <I2C_Slave_STOPF>
 8003fc8:	e04c      	b.n	8004064 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003fca:	7bbb      	ldrb	r3, [r7, #14]
 8003fcc:	2b21      	cmp	r3, #33	@ 0x21
 8003fce:	d002      	beq.n	8003fd6 <HAL_I2C_EV_IRQHandler+0x212>
 8003fd0:	7bbb      	ldrb	r3, [r7, #14]
 8003fd2:	2b29      	cmp	r3, #41	@ 0x29
 8003fd4:	d120      	bne.n	8004018 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003fd6:	69fb      	ldr	r3, [r7, #28]
 8003fd8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d00d      	beq.n	8003ffc <HAL_I2C_EV_IRQHandler+0x238>
 8003fe0:	697b      	ldr	r3, [r7, #20]
 8003fe2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d008      	beq.n	8003ffc <HAL_I2C_EV_IRQHandler+0x238>
 8003fea:	69fb      	ldr	r3, [r7, #28]
 8003fec:	f003 0304 	and.w	r3, r3, #4
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d103      	bne.n	8003ffc <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8003ff4:	6878      	ldr	r0, [r7, #4]
 8003ff6:	f000 fe42 	bl	8004c7e <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003ffa:	e032      	b.n	8004062 <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003ffc:	69fb      	ldr	r3, [r7, #28]
 8003ffe:	f003 0304 	and.w	r3, r3, #4
 8004002:	2b00      	cmp	r3, #0
 8004004:	d02d      	beq.n	8004062 <HAL_I2C_EV_IRQHandler+0x29e>
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800400c:	2b00      	cmp	r3, #0
 800400e:	d028      	beq.n	8004062 <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8004010:	6878      	ldr	r0, [r7, #4]
 8004012:	f000 fe71 	bl	8004cf8 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004016:	e024      	b.n	8004062 <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004018:	69fb      	ldr	r3, [r7, #28]
 800401a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800401e:	2b00      	cmp	r3, #0
 8004020:	d00d      	beq.n	800403e <HAL_I2C_EV_IRQHandler+0x27a>
 8004022:	697b      	ldr	r3, [r7, #20]
 8004024:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004028:	2b00      	cmp	r3, #0
 800402a:	d008      	beq.n	800403e <HAL_I2C_EV_IRQHandler+0x27a>
 800402c:	69fb      	ldr	r3, [r7, #28]
 800402e:	f003 0304 	and.w	r3, r3, #4
 8004032:	2b00      	cmp	r3, #0
 8004034:	d103      	bne.n	800403e <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8004036:	6878      	ldr	r0, [r7, #4]
 8004038:	f000 fe7e 	bl	8004d38 <I2C_SlaveReceive_RXNE>
 800403c:	e012      	b.n	8004064 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800403e:	69fb      	ldr	r3, [r7, #28]
 8004040:	f003 0304 	and.w	r3, r3, #4
 8004044:	2b00      	cmp	r3, #0
 8004046:	d00d      	beq.n	8004064 <HAL_I2C_EV_IRQHandler+0x2a0>
 8004048:	697b      	ldr	r3, [r7, #20]
 800404a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800404e:	2b00      	cmp	r3, #0
 8004050:	d008      	beq.n	8004064 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8004052:	6878      	ldr	r0, [r7, #4]
 8004054:	f000 feae 	bl	8004db4 <I2C_SlaveReceive_BTF>
 8004058:	e004      	b.n	8004064 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 800405a:	bf00      	nop
 800405c:	e002      	b.n	8004064 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800405e:	bf00      	nop
 8004060:	e000      	b.n	8004064 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004062:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8004064:	3720      	adds	r7, #32
 8004066:	46bd      	mov	sp, r7
 8004068:	bd80      	pop	{r7, pc}

0800406a <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800406a:	b480      	push	{r7}
 800406c:	b083      	sub	sp, #12
 800406e:	af00      	add	r7, sp, #0
 8004070:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8004072:	bf00      	nop
 8004074:	370c      	adds	r7, #12
 8004076:	46bd      	mov	sp, r7
 8004078:	bc80      	pop	{r7}
 800407a:	4770      	bx	lr

0800407c <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800407c:	b480      	push	{r7}
 800407e:	b083      	sub	sp, #12
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8004084:	bf00      	nop
 8004086:	370c      	adds	r7, #12
 8004088:	46bd      	mov	sp, r7
 800408a:	bc80      	pop	{r7}
 800408c:	4770      	bx	lr

0800408e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800408e:	b480      	push	{r7}
 8004090:	b083      	sub	sp, #12
 8004092:	af00      	add	r7, sp, #0
 8004094:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004096:	bf00      	nop
 8004098:	370c      	adds	r7, #12
 800409a:	46bd      	mov	sp, r7
 800409c:	bc80      	pop	{r7}
 800409e:	4770      	bx	lr

080040a0 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80040a0:	b480      	push	{r7}
 80040a2:	b083      	sub	sp, #12
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80040a8:	bf00      	nop
 80040aa:	370c      	adds	r7, #12
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bc80      	pop	{r7}
 80040b0:	4770      	bx	lr

080040b2 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80040b2:	b480      	push	{r7}
 80040b4:	b083      	sub	sp, #12
 80040b6:	af00      	add	r7, sp, #0
 80040b8:	6078      	str	r0, [r7, #4]
 80040ba:	460b      	mov	r3, r1
 80040bc:	70fb      	strb	r3, [r7, #3]
 80040be:	4613      	mov	r3, r2
 80040c0:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80040c2:	bf00      	nop
 80040c4:	370c      	adds	r7, #12
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bc80      	pop	{r7}
 80040ca:	4770      	bx	lr

080040cc <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80040cc:	b480      	push	{r7}
 80040ce:	b083      	sub	sp, #12
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80040d4:	bf00      	nop
 80040d6:	370c      	adds	r7, #12
 80040d8:	46bd      	mov	sp, r7
 80040da:	bc80      	pop	{r7}
 80040dc:	4770      	bx	lr

080040de <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80040de:	b480      	push	{r7}
 80040e0:	b083      	sub	sp, #12
 80040e2:	af00      	add	r7, sp, #0
 80040e4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80040e6:	bf00      	nop
 80040e8:	370c      	adds	r7, #12
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bc80      	pop	{r7}
 80040ee:	4770      	bx	lr

080040f0 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80040f0:	b480      	push	{r7}
 80040f2:	b083      	sub	sp, #12
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80040f8:	bf00      	nop
 80040fa:	370c      	adds	r7, #12
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bc80      	pop	{r7}
 8004100:	4770      	bx	lr

08004102 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004102:	b480      	push	{r7}
 8004104:	b083      	sub	sp, #12
 8004106:	af00      	add	r7, sp, #0
 8004108:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800410a:	bf00      	nop
 800410c:	370c      	adds	r7, #12
 800410e:	46bd      	mov	sp, r7
 8004110:	bc80      	pop	{r7}
 8004112:	4770      	bx	lr

08004114 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004114:	b480      	push	{r7}
 8004116:	b083      	sub	sp, #12
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800411c:	bf00      	nop
 800411e:	370c      	adds	r7, #12
 8004120:	46bd      	mov	sp, r7
 8004122:	bc80      	pop	{r7}
 8004124:	4770      	bx	lr

08004126 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004126:	b580      	push	{r7, lr}
 8004128:	b084      	sub	sp, #16
 800412a:	af00      	add	r7, sp, #0
 800412c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004134:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800413c:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004142:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004148:	2b00      	cmp	r3, #0
 800414a:	d150      	bne.n	80041ee <I2C_MasterTransmit_TXE+0xc8>
 800414c:	7bfb      	ldrb	r3, [r7, #15]
 800414e:	2b21      	cmp	r3, #33	@ 0x21
 8004150:	d14d      	bne.n	80041ee <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	2b08      	cmp	r3, #8
 8004156:	d01d      	beq.n	8004194 <I2C_MasterTransmit_TXE+0x6e>
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	2b20      	cmp	r3, #32
 800415c:	d01a      	beq.n	8004194 <I2C_MasterTransmit_TXE+0x6e>
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004164:	d016      	beq.n	8004194 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	685a      	ldr	r2, [r3, #4]
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004174:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2211      	movs	r2, #17
 800417a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2200      	movs	r2, #0
 8004180:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2220      	movs	r2, #32
 8004188:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800418c:	6878      	ldr	r0, [r7, #4]
 800418e:	f7ff ff6c 	bl	800406a <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004192:	e060      	b.n	8004256 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	685a      	ldr	r2, [r3, #4]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80041a2:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	681a      	ldr	r2, [r3, #0]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80041b2:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2200      	movs	r2, #0
 80041b8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2220      	movs	r2, #32
 80041be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80041c8:	b2db      	uxtb	r3, r3
 80041ca:	2b40      	cmp	r3, #64	@ 0x40
 80041cc:	d107      	bne.n	80041de <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2200      	movs	r2, #0
 80041d2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80041d6:	6878      	ldr	r0, [r7, #4]
 80041d8:	f7ff ff81 	bl	80040de <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80041dc:	e03b      	b.n	8004256 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2200      	movs	r2, #0
 80041e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80041e6:	6878      	ldr	r0, [r7, #4]
 80041e8:	f7ff ff3f 	bl	800406a <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80041ec:	e033      	b.n	8004256 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80041ee:	7bfb      	ldrb	r3, [r7, #15]
 80041f0:	2b21      	cmp	r3, #33	@ 0x21
 80041f2:	d005      	beq.n	8004200 <I2C_MasterTransmit_TXE+0xda>
 80041f4:	7bbb      	ldrb	r3, [r7, #14]
 80041f6:	2b40      	cmp	r3, #64	@ 0x40
 80041f8:	d12d      	bne.n	8004256 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80041fa:	7bfb      	ldrb	r3, [r7, #15]
 80041fc:	2b22      	cmp	r3, #34	@ 0x22
 80041fe:	d12a      	bne.n	8004256 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004204:	b29b      	uxth	r3, r3
 8004206:	2b00      	cmp	r3, #0
 8004208:	d108      	bne.n	800421c <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	685a      	ldr	r2, [r3, #4]
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004218:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800421a:	e01c      	b.n	8004256 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004222:	b2db      	uxtb	r3, r3
 8004224:	2b40      	cmp	r3, #64	@ 0x40
 8004226:	d103      	bne.n	8004230 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004228:	6878      	ldr	r0, [r7, #4]
 800422a:	f000 f88e 	bl	800434a <I2C_MemoryTransmit_TXE_BTF>
}
 800422e:	e012      	b.n	8004256 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004234:	781a      	ldrb	r2, [r3, #0]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004240:	1c5a      	adds	r2, r3, #1
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800424a:	b29b      	uxth	r3, r3
 800424c:	3b01      	subs	r3, #1
 800424e:	b29a      	uxth	r2, r3
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8004254:	e7ff      	b.n	8004256 <I2C_MasterTransmit_TXE+0x130>
 8004256:	bf00      	nop
 8004258:	3710      	adds	r7, #16
 800425a:	46bd      	mov	sp, r7
 800425c:	bd80      	pop	{r7, pc}

0800425e <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800425e:	b580      	push	{r7, lr}
 8004260:	b084      	sub	sp, #16
 8004262:	af00      	add	r7, sp, #0
 8004264:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800426a:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004272:	b2db      	uxtb	r3, r3
 8004274:	2b21      	cmp	r3, #33	@ 0x21
 8004276:	d164      	bne.n	8004342 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800427c:	b29b      	uxth	r3, r3
 800427e:	2b00      	cmp	r3, #0
 8004280:	d012      	beq.n	80042a8 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004286:	781a      	ldrb	r2, [r3, #0]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004292:	1c5a      	adds	r2, r3, #1
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800429c:	b29b      	uxth	r3, r3
 800429e:	3b01      	subs	r3, #1
 80042a0:	b29a      	uxth	r2, r3
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80042a6:	e04c      	b.n	8004342 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	2b08      	cmp	r3, #8
 80042ac:	d01d      	beq.n	80042ea <I2C_MasterTransmit_BTF+0x8c>
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	2b20      	cmp	r3, #32
 80042b2:	d01a      	beq.n	80042ea <I2C_MasterTransmit_BTF+0x8c>
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80042ba:	d016      	beq.n	80042ea <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	685a      	ldr	r2, [r3, #4]
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80042ca:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2211      	movs	r2, #17
 80042d0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2200      	movs	r2, #0
 80042d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2220      	movs	r2, #32
 80042de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80042e2:	6878      	ldr	r0, [r7, #4]
 80042e4:	f7ff fec1 	bl	800406a <HAL_I2C_MasterTxCpltCallback>
}
 80042e8:	e02b      	b.n	8004342 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	685a      	ldr	r2, [r3, #4]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80042f8:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	681a      	ldr	r2, [r3, #0]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004308:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2200      	movs	r2, #0
 800430e:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2220      	movs	r2, #32
 8004314:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800431e:	b2db      	uxtb	r3, r3
 8004320:	2b40      	cmp	r3, #64	@ 0x40
 8004322:	d107      	bne.n	8004334 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2200      	movs	r2, #0
 8004328:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800432c:	6878      	ldr	r0, [r7, #4]
 800432e:	f7ff fed6 	bl	80040de <HAL_I2C_MemTxCpltCallback>
}
 8004332:	e006      	b.n	8004342 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2200      	movs	r2, #0
 8004338:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800433c:	6878      	ldr	r0, [r7, #4]
 800433e:	f7ff fe94 	bl	800406a <HAL_I2C_MasterTxCpltCallback>
}
 8004342:	bf00      	nop
 8004344:	3710      	adds	r7, #16
 8004346:	46bd      	mov	sp, r7
 8004348:	bd80      	pop	{r7, pc}

0800434a <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800434a:	b580      	push	{r7, lr}
 800434c:	b084      	sub	sp, #16
 800434e:	af00      	add	r7, sp, #0
 8004350:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004358:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800435e:	2b00      	cmp	r3, #0
 8004360:	d11d      	bne.n	800439e <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004366:	2b01      	cmp	r3, #1
 8004368:	d10b      	bne.n	8004382 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800436e:	b2da      	uxtb	r2, r3
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800437a:	1c9a      	adds	r2, r3, #2
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8004380:	e077      	b.n	8004472 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004386:	b29b      	uxth	r3, r3
 8004388:	121b      	asrs	r3, r3, #8
 800438a:	b2da      	uxtb	r2, r3
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004396:	1c5a      	adds	r2, r3, #1
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800439c:	e069      	b.n	8004472 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043a2:	2b01      	cmp	r3, #1
 80043a4:	d10b      	bne.n	80043be <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80043aa:	b2da      	uxtb	r2, r3
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043b6:	1c5a      	adds	r2, r3, #1
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80043bc:	e059      	b.n	8004472 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043c2:	2b02      	cmp	r3, #2
 80043c4:	d152      	bne.n	800446c <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80043c6:	7bfb      	ldrb	r3, [r7, #15]
 80043c8:	2b22      	cmp	r3, #34	@ 0x22
 80043ca:	d10d      	bne.n	80043e8 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	681a      	ldr	r2, [r3, #0]
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80043da:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043e0:	1c5a      	adds	r2, r3, #1
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80043e6:	e044      	b.n	8004472 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043ec:	b29b      	uxth	r3, r3
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d015      	beq.n	800441e <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80043f2:	7bfb      	ldrb	r3, [r7, #15]
 80043f4:	2b21      	cmp	r3, #33	@ 0x21
 80043f6:	d112      	bne.n	800441e <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043fc:	781a      	ldrb	r2, [r3, #0]
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004408:	1c5a      	adds	r2, r3, #1
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004412:	b29b      	uxth	r3, r3
 8004414:	3b01      	subs	r3, #1
 8004416:	b29a      	uxth	r2, r3
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800441c:	e029      	b.n	8004472 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004422:	b29b      	uxth	r3, r3
 8004424:	2b00      	cmp	r3, #0
 8004426:	d124      	bne.n	8004472 <I2C_MemoryTransmit_TXE_BTF+0x128>
 8004428:	7bfb      	ldrb	r3, [r7, #15]
 800442a:	2b21      	cmp	r3, #33	@ 0x21
 800442c:	d121      	bne.n	8004472 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	685a      	ldr	r2, [r3, #4]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800443c:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	681a      	ldr	r2, [r3, #0]
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800444c:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2200      	movs	r2, #0
 8004452:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2220      	movs	r2, #32
 8004458:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2200      	movs	r2, #0
 8004460:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004464:	6878      	ldr	r0, [r7, #4]
 8004466:	f7ff fe3a 	bl	80040de <HAL_I2C_MemTxCpltCallback>
}
 800446a:	e002      	b.n	8004472 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 800446c:	6878      	ldr	r0, [r7, #4]
 800446e:	f7ff f829 	bl	80034c4 <I2C_Flush_DR>
}
 8004472:	bf00      	nop
 8004474:	3710      	adds	r7, #16
 8004476:	46bd      	mov	sp, r7
 8004478:	bd80      	pop	{r7, pc}

0800447a <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800447a:	b580      	push	{r7, lr}
 800447c:	b084      	sub	sp, #16
 800447e:	af00      	add	r7, sp, #0
 8004480:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004488:	b2db      	uxtb	r3, r3
 800448a:	2b22      	cmp	r3, #34	@ 0x22
 800448c:	f040 80b9 	bne.w	8004602 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004494:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800449a:	b29b      	uxth	r3, r3
 800449c:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 800449e:	68bb      	ldr	r3, [r7, #8]
 80044a0:	2b03      	cmp	r3, #3
 80044a2:	d921      	bls.n	80044e8 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	691a      	ldr	r2, [r3, #16]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044ae:	b2d2      	uxtb	r2, r2
 80044b0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044b6:	1c5a      	adds	r2, r3, #1
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044c0:	b29b      	uxth	r3, r3
 80044c2:	3b01      	subs	r3, #1
 80044c4:	b29a      	uxth	r2, r3
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044ce:	b29b      	uxth	r3, r3
 80044d0:	2b03      	cmp	r3, #3
 80044d2:	f040 8096 	bne.w	8004602 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	685a      	ldr	r2, [r3, #4]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80044e4:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80044e6:	e08c      	b.n	8004602 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044ec:	2b02      	cmp	r3, #2
 80044ee:	d07f      	beq.n	80045f0 <I2C_MasterReceive_RXNE+0x176>
 80044f0:	68bb      	ldr	r3, [r7, #8]
 80044f2:	2b01      	cmp	r3, #1
 80044f4:	d002      	beq.n	80044fc <I2C_MasterReceive_RXNE+0x82>
 80044f6:	68bb      	ldr	r3, [r7, #8]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d179      	bne.n	80045f0 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80044fc:	6878      	ldr	r0, [r7, #4]
 80044fe:	f001 fb77 	bl	8005bf0 <I2C_WaitOnSTOPRequestThroughIT>
 8004502:	4603      	mov	r3, r0
 8004504:	2b00      	cmp	r3, #0
 8004506:	d14c      	bne.n	80045a2 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	681a      	ldr	r2, [r3, #0]
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004516:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	685a      	ldr	r2, [r3, #4]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004526:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	691a      	ldr	r2, [r3, #16]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004532:	b2d2      	uxtb	r2, r2
 8004534:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800453a:	1c5a      	adds	r2, r3, #1
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004544:	b29b      	uxth	r3, r3
 8004546:	3b01      	subs	r3, #1
 8004548:	b29a      	uxth	r2, r3
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2220      	movs	r2, #32
 8004552:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800455c:	b2db      	uxtb	r3, r3
 800455e:	2b40      	cmp	r3, #64	@ 0x40
 8004560:	d10a      	bne.n	8004578 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2200      	movs	r2, #0
 8004566:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2200      	movs	r2, #0
 800456e:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8004570:	6878      	ldr	r0, [r7, #4]
 8004572:	f7ff fdbd 	bl	80040f0 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004576:	e044      	b.n	8004602 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2200      	movs	r2, #0
 800457c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	2b08      	cmp	r3, #8
 8004584:	d002      	beq.n	800458c <I2C_MasterReceive_RXNE+0x112>
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	2b20      	cmp	r3, #32
 800458a:	d103      	bne.n	8004594 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2200      	movs	r2, #0
 8004590:	631a      	str	r2, [r3, #48]	@ 0x30
 8004592:	e002      	b.n	800459a <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2212      	movs	r2, #18
 8004598:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800459a:	6878      	ldr	r0, [r7, #4]
 800459c:	f7ff fd6e 	bl	800407c <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80045a0:	e02f      	b.n	8004602 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	685a      	ldr	r2, [r3, #4]
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80045b0:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	691a      	ldr	r2, [r3, #16]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045bc:	b2d2      	uxtb	r2, r2
 80045be:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045c4:	1c5a      	adds	r2, r3, #1
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045ce:	b29b      	uxth	r3, r3
 80045d0:	3b01      	subs	r3, #1
 80045d2:	b29a      	uxth	r2, r3
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2220      	movs	r2, #32
 80045dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2200      	movs	r2, #0
 80045e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80045e8:	6878      	ldr	r0, [r7, #4]
 80045ea:	f7ff fd8a 	bl	8004102 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80045ee:	e008      	b.n	8004602 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	685a      	ldr	r2, [r3, #4]
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80045fe:	605a      	str	r2, [r3, #4]
}
 8004600:	e7ff      	b.n	8004602 <I2C_MasterReceive_RXNE+0x188>
 8004602:	bf00      	nop
 8004604:	3710      	adds	r7, #16
 8004606:	46bd      	mov	sp, r7
 8004608:	bd80      	pop	{r7, pc}

0800460a <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800460a:	b580      	push	{r7, lr}
 800460c:	b084      	sub	sp, #16
 800460e:	af00      	add	r7, sp, #0
 8004610:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004616:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800461c:	b29b      	uxth	r3, r3
 800461e:	2b04      	cmp	r3, #4
 8004620:	d11b      	bne.n	800465a <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	685a      	ldr	r2, [r3, #4]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004630:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	691a      	ldr	r2, [r3, #16]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800463c:	b2d2      	uxtb	r2, r2
 800463e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004644:	1c5a      	adds	r2, r3, #1
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800464e:	b29b      	uxth	r3, r3
 8004650:	3b01      	subs	r3, #1
 8004652:	b29a      	uxth	r2, r3
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8004658:	e0c4      	b.n	80047e4 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800465e:	b29b      	uxth	r3, r3
 8004660:	2b03      	cmp	r3, #3
 8004662:	d129      	bne.n	80046b8 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	685a      	ldr	r2, [r3, #4]
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004672:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	2b04      	cmp	r3, #4
 8004678:	d00a      	beq.n	8004690 <I2C_MasterReceive_BTF+0x86>
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	2b02      	cmp	r3, #2
 800467e:	d007      	beq.n	8004690 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	681a      	ldr	r2, [r3, #0]
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800468e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	691a      	ldr	r2, [r3, #16]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800469a:	b2d2      	uxtb	r2, r2
 800469c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046a2:	1c5a      	adds	r2, r3, #1
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046ac:	b29b      	uxth	r3, r3
 80046ae:	3b01      	subs	r3, #1
 80046b0:	b29a      	uxth	r2, r3
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80046b6:	e095      	b.n	80047e4 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046bc:	b29b      	uxth	r3, r3
 80046be:	2b02      	cmp	r3, #2
 80046c0:	d17d      	bne.n	80047be <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	2b01      	cmp	r3, #1
 80046c6:	d002      	beq.n	80046ce <I2C_MasterReceive_BTF+0xc4>
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	2b10      	cmp	r3, #16
 80046cc:	d108      	bne.n	80046e0 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	681a      	ldr	r2, [r3, #0]
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80046dc:	601a      	str	r2, [r3, #0]
 80046de:	e016      	b.n	800470e <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	2b04      	cmp	r3, #4
 80046e4:	d002      	beq.n	80046ec <I2C_MasterReceive_BTF+0xe2>
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	2b02      	cmp	r3, #2
 80046ea:	d108      	bne.n	80046fe <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	681a      	ldr	r2, [r3, #0]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80046fa:	601a      	str	r2, [r3, #0]
 80046fc:	e007      	b.n	800470e <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	681a      	ldr	r2, [r3, #0]
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800470c:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	691a      	ldr	r2, [r3, #16]
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004718:	b2d2      	uxtb	r2, r2
 800471a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004720:	1c5a      	adds	r2, r3, #1
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800472a:	b29b      	uxth	r3, r3
 800472c:	3b01      	subs	r3, #1
 800472e:	b29a      	uxth	r2, r3
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	691a      	ldr	r2, [r3, #16]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800473e:	b2d2      	uxtb	r2, r2
 8004740:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004746:	1c5a      	adds	r2, r3, #1
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004750:	b29b      	uxth	r3, r3
 8004752:	3b01      	subs	r3, #1
 8004754:	b29a      	uxth	r2, r3
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	685a      	ldr	r2, [r3, #4]
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8004768:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2220      	movs	r2, #32
 800476e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004778:	b2db      	uxtb	r3, r3
 800477a:	2b40      	cmp	r3, #64	@ 0x40
 800477c:	d10a      	bne.n	8004794 <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2200      	movs	r2, #0
 8004782:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2200      	movs	r2, #0
 800478a:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800478c:	6878      	ldr	r0, [r7, #4]
 800478e:	f7ff fcaf 	bl	80040f0 <HAL_I2C_MemRxCpltCallback>
}
 8004792:	e027      	b.n	80047e4 <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2200      	movs	r2, #0
 8004798:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	2b08      	cmp	r3, #8
 80047a0:	d002      	beq.n	80047a8 <I2C_MasterReceive_BTF+0x19e>
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	2b20      	cmp	r3, #32
 80047a6:	d103      	bne.n	80047b0 <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2200      	movs	r2, #0
 80047ac:	631a      	str	r2, [r3, #48]	@ 0x30
 80047ae:	e002      	b.n	80047b6 <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2212      	movs	r2, #18
 80047b4:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80047b6:	6878      	ldr	r0, [r7, #4]
 80047b8:	f7ff fc60 	bl	800407c <HAL_I2C_MasterRxCpltCallback>
}
 80047bc:	e012      	b.n	80047e4 <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	691a      	ldr	r2, [r3, #16]
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047c8:	b2d2      	uxtb	r2, r2
 80047ca:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047d0:	1c5a      	adds	r2, r3, #1
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047da:	b29b      	uxth	r3, r3
 80047dc:	3b01      	subs	r3, #1
 80047de:	b29a      	uxth	r2, r3
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80047e4:	bf00      	nop
 80047e6:	3710      	adds	r7, #16
 80047e8:	46bd      	mov	sp, r7
 80047ea:	bd80      	pop	{r7, pc}

080047ec <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80047ec:	b480      	push	{r7}
 80047ee:	b083      	sub	sp, #12
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80047fa:	b2db      	uxtb	r3, r3
 80047fc:	2b40      	cmp	r3, #64	@ 0x40
 80047fe:	d117      	bne.n	8004830 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004804:	2b00      	cmp	r3, #0
 8004806:	d109      	bne.n	800481c <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800480c:	b2db      	uxtb	r3, r3
 800480e:	461a      	mov	r2, r3
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004818:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800481a:	e067      	b.n	80048ec <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004820:	b2db      	uxtb	r3, r3
 8004822:	f043 0301 	orr.w	r3, r3, #1
 8004826:	b2da      	uxtb	r2, r3
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	611a      	str	r2, [r3, #16]
}
 800482e:	e05d      	b.n	80048ec <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	691b      	ldr	r3, [r3, #16]
 8004834:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004838:	d133      	bne.n	80048a2 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004840:	b2db      	uxtb	r3, r3
 8004842:	2b21      	cmp	r3, #33	@ 0x21
 8004844:	d109      	bne.n	800485a <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800484a:	b2db      	uxtb	r3, r3
 800484c:	461a      	mov	r2, r3
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004856:	611a      	str	r2, [r3, #16]
 8004858:	e008      	b.n	800486c <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800485e:	b2db      	uxtb	r3, r3
 8004860:	f043 0301 	orr.w	r3, r3, #1
 8004864:	b2da      	uxtb	r2, r3
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004870:	2b00      	cmp	r3, #0
 8004872:	d004      	beq.n	800487e <I2C_Master_SB+0x92>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004878:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800487a:	2b00      	cmp	r3, #0
 800487c:	d108      	bne.n	8004890 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004882:	2b00      	cmp	r3, #0
 8004884:	d032      	beq.n	80048ec <I2C_Master_SB+0x100>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800488a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800488c:	2b00      	cmp	r3, #0
 800488e:	d02d      	beq.n	80048ec <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	685a      	ldr	r2, [r3, #4]
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800489e:	605a      	str	r2, [r3, #4]
}
 80048a0:	e024      	b.n	80048ec <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d10e      	bne.n	80048c8 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048ae:	b29b      	uxth	r3, r3
 80048b0:	11db      	asrs	r3, r3, #7
 80048b2:	b2db      	uxtb	r3, r3
 80048b4:	f003 0306 	and.w	r3, r3, #6
 80048b8:	b2db      	uxtb	r3, r3
 80048ba:	f063 030f 	orn	r3, r3, #15
 80048be:	b2da      	uxtb	r2, r3
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	611a      	str	r2, [r3, #16]
}
 80048c6:	e011      	b.n	80048ec <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80048cc:	2b01      	cmp	r3, #1
 80048ce:	d10d      	bne.n	80048ec <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048d4:	b29b      	uxth	r3, r3
 80048d6:	11db      	asrs	r3, r3, #7
 80048d8:	b2db      	uxtb	r3, r3
 80048da:	f003 0306 	and.w	r3, r3, #6
 80048de:	b2db      	uxtb	r3, r3
 80048e0:	f063 030e 	orn	r3, r3, #14
 80048e4:	b2da      	uxtb	r2, r3
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	611a      	str	r2, [r3, #16]
}
 80048ec:	bf00      	nop
 80048ee:	370c      	adds	r7, #12
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bc80      	pop	{r7}
 80048f4:	4770      	bx	lr

080048f6 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80048f6:	b480      	push	{r7}
 80048f8:	b083      	sub	sp, #12
 80048fa:	af00      	add	r7, sp, #0
 80048fc:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004902:	b2da      	uxtb	r2, r3
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800490e:	2b00      	cmp	r3, #0
 8004910:	d004      	beq.n	800491c <I2C_Master_ADD10+0x26>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004916:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004918:	2b00      	cmp	r3, #0
 800491a:	d108      	bne.n	800492e <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004920:	2b00      	cmp	r3, #0
 8004922:	d00c      	beq.n	800493e <I2C_Master_ADD10+0x48>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004928:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800492a:	2b00      	cmp	r3, #0
 800492c:	d007      	beq.n	800493e <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	685a      	ldr	r2, [r3, #4]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800493c:	605a      	str	r2, [r3, #4]
  }
}
 800493e:	bf00      	nop
 8004940:	370c      	adds	r7, #12
 8004942:	46bd      	mov	sp, r7
 8004944:	bc80      	pop	{r7}
 8004946:	4770      	bx	lr

08004948 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8004948:	b480      	push	{r7}
 800494a:	b091      	sub	sp, #68	@ 0x44
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004956:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800495e:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004964:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800496c:	b2db      	uxtb	r3, r3
 800496e:	2b22      	cmp	r3, #34	@ 0x22
 8004970:	f040 8174 	bne.w	8004c5c <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004978:	2b00      	cmp	r3, #0
 800497a:	d10f      	bne.n	800499c <I2C_Master_ADDR+0x54>
 800497c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8004980:	2b40      	cmp	r3, #64	@ 0x40
 8004982:	d10b      	bne.n	800499c <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004984:	2300      	movs	r3, #0
 8004986:	633b      	str	r3, [r7, #48]	@ 0x30
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	695b      	ldr	r3, [r3, #20]
 800498e:	633b      	str	r3, [r7, #48]	@ 0x30
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	699b      	ldr	r3, [r3, #24]
 8004996:	633b      	str	r3, [r7, #48]	@ 0x30
 8004998:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800499a:	e16b      	b.n	8004c74 <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d11d      	bne.n	80049e0 <I2C_Master_ADDR+0x98>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	691b      	ldr	r3, [r3, #16]
 80049a8:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80049ac:	d118      	bne.n	80049e0 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049ae:	2300      	movs	r3, #0
 80049b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	695b      	ldr	r3, [r3, #20]
 80049b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	699b      	ldr	r3, [r3, #24]
 80049c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80049c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	681a      	ldr	r2, [r3, #0]
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80049d2:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049d8:	1c5a      	adds	r2, r3, #1
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	651a      	str	r2, [r3, #80]	@ 0x50
 80049de:	e149      	b.n	8004c74 <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049e4:	b29b      	uxth	r3, r3
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d113      	bne.n	8004a12 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049ea:	2300      	movs	r3, #0
 80049ec:	62bb      	str	r3, [r7, #40]	@ 0x28
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	695b      	ldr	r3, [r3, #20]
 80049f4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	699b      	ldr	r3, [r3, #24]
 80049fc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80049fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	681a      	ldr	r2, [r3, #0]
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a0e:	601a      	str	r2, [r3, #0]
 8004a10:	e120      	b.n	8004c54 <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a16:	b29b      	uxth	r3, r3
 8004a18:	2b01      	cmp	r3, #1
 8004a1a:	f040 808a 	bne.w	8004b32 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8004a1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a20:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004a24:	d137      	bne.n	8004a96 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	681a      	ldr	r2, [r3, #0]
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004a34:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	685b      	ldr	r3, [r3, #4]
 8004a3c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004a40:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a44:	d113      	bne.n	8004a6e <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	681a      	ldr	r2, [r3, #0]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004a54:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a56:	2300      	movs	r3, #0
 8004a58:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	695b      	ldr	r3, [r3, #20]
 8004a60:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	699b      	ldr	r3, [r3, #24]
 8004a68:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a6c:	e0f2      	b.n	8004c54 <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a6e:	2300      	movs	r3, #0
 8004a70:	623b      	str	r3, [r7, #32]
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	695b      	ldr	r3, [r3, #20]
 8004a78:	623b      	str	r3, [r7, #32]
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	699b      	ldr	r3, [r3, #24]
 8004a80:	623b      	str	r3, [r7, #32]
 8004a82:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	681a      	ldr	r2, [r3, #0]
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a92:	601a      	str	r2, [r3, #0]
 8004a94:	e0de      	b.n	8004c54 <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8004a96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a98:	2b08      	cmp	r3, #8
 8004a9a:	d02e      	beq.n	8004afa <I2C_Master_ADDR+0x1b2>
 8004a9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a9e:	2b20      	cmp	r3, #32
 8004aa0:	d02b      	beq.n	8004afa <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8004aa2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004aa4:	2b12      	cmp	r3, #18
 8004aa6:	d102      	bne.n	8004aae <I2C_Master_ADDR+0x166>
 8004aa8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004aaa:	2b01      	cmp	r3, #1
 8004aac:	d125      	bne.n	8004afa <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004aae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ab0:	2b04      	cmp	r3, #4
 8004ab2:	d00e      	beq.n	8004ad2 <I2C_Master_ADDR+0x18a>
 8004ab4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ab6:	2b02      	cmp	r3, #2
 8004ab8:	d00b      	beq.n	8004ad2 <I2C_Master_ADDR+0x18a>
 8004aba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004abc:	2b10      	cmp	r3, #16
 8004abe:	d008      	beq.n	8004ad2 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	681a      	ldr	r2, [r3, #0]
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004ace:	601a      	str	r2, [r3, #0]
 8004ad0:	e007      	b.n	8004ae2 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	681a      	ldr	r2, [r3, #0]
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004ae0:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	61fb      	str	r3, [r7, #28]
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	695b      	ldr	r3, [r3, #20]
 8004aec:	61fb      	str	r3, [r7, #28]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	699b      	ldr	r3, [r3, #24]
 8004af4:	61fb      	str	r3, [r7, #28]
 8004af6:	69fb      	ldr	r3, [r7, #28]
 8004af8:	e0ac      	b.n	8004c54 <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	681a      	ldr	r2, [r3, #0]
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b08:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	61bb      	str	r3, [r7, #24]
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	695b      	ldr	r3, [r3, #20]
 8004b14:	61bb      	str	r3, [r7, #24]
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	699b      	ldr	r3, [r3, #24]
 8004b1c:	61bb      	str	r3, [r7, #24]
 8004b1e:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	681a      	ldr	r2, [r3, #0]
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b2e:	601a      	str	r2, [r3, #0]
 8004b30:	e090      	b.n	8004c54 <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b36:	b29b      	uxth	r3, r3
 8004b38:	2b02      	cmp	r3, #2
 8004b3a:	d158      	bne.n	8004bee <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004b3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b3e:	2b04      	cmp	r3, #4
 8004b40:	d021      	beq.n	8004b86 <I2C_Master_ADDR+0x23e>
 8004b42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b44:	2b02      	cmp	r3, #2
 8004b46:	d01e      	beq.n	8004b86 <I2C_Master_ADDR+0x23e>
 8004b48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b4a:	2b10      	cmp	r3, #16
 8004b4c:	d01b      	beq.n	8004b86 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	681a      	ldr	r2, [r3, #0]
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004b5c:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b5e:	2300      	movs	r3, #0
 8004b60:	617b      	str	r3, [r7, #20]
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	695b      	ldr	r3, [r3, #20]
 8004b68:	617b      	str	r3, [r7, #20]
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	699b      	ldr	r3, [r3, #24]
 8004b70:	617b      	str	r3, [r7, #20]
 8004b72:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	681a      	ldr	r2, [r3, #0]
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b82:	601a      	str	r2, [r3, #0]
 8004b84:	e012      	b.n	8004bac <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	681a      	ldr	r2, [r3, #0]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004b94:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b96:	2300      	movs	r3, #0
 8004b98:	613b      	str	r3, [r7, #16]
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	695b      	ldr	r3, [r3, #20]
 8004ba0:	613b      	str	r3, [r7, #16]
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	699b      	ldr	r3, [r3, #24]
 8004ba8:	613b      	str	r3, [r7, #16]
 8004baa:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	685b      	ldr	r3, [r3, #4]
 8004bb2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004bb6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004bba:	d14b      	bne.n	8004c54 <I2C_Master_ADDR+0x30c>
 8004bbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bbe:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004bc2:	d00b      	beq.n	8004bdc <I2C_Master_ADDR+0x294>
 8004bc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bc6:	2b01      	cmp	r3, #1
 8004bc8:	d008      	beq.n	8004bdc <I2C_Master_ADDR+0x294>
 8004bca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bcc:	2b08      	cmp	r3, #8
 8004bce:	d005      	beq.n	8004bdc <I2C_Master_ADDR+0x294>
 8004bd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bd2:	2b10      	cmp	r3, #16
 8004bd4:	d002      	beq.n	8004bdc <I2C_Master_ADDR+0x294>
 8004bd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bd8:	2b20      	cmp	r3, #32
 8004bda:	d13b      	bne.n	8004c54 <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	685a      	ldr	r2, [r3, #4]
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004bea:	605a      	str	r2, [r3, #4]
 8004bec:	e032      	b.n	8004c54 <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	681a      	ldr	r2, [r3, #0]
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004bfc:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004c08:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004c0c:	d117      	bne.n	8004c3e <I2C_Master_ADDR+0x2f6>
 8004c0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c10:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004c14:	d00b      	beq.n	8004c2e <I2C_Master_ADDR+0x2e6>
 8004c16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c18:	2b01      	cmp	r3, #1
 8004c1a:	d008      	beq.n	8004c2e <I2C_Master_ADDR+0x2e6>
 8004c1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c1e:	2b08      	cmp	r3, #8
 8004c20:	d005      	beq.n	8004c2e <I2C_Master_ADDR+0x2e6>
 8004c22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c24:	2b10      	cmp	r3, #16
 8004c26:	d002      	beq.n	8004c2e <I2C_Master_ADDR+0x2e6>
 8004c28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c2a:	2b20      	cmp	r3, #32
 8004c2c:	d107      	bne.n	8004c3e <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	685a      	ldr	r2, [r3, #4]
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004c3c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c3e:	2300      	movs	r3, #0
 8004c40:	60fb      	str	r3, [r7, #12]
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	695b      	ldr	r3, [r3, #20]
 8004c48:	60fb      	str	r3, [r7, #12]
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	699b      	ldr	r3, [r3, #24]
 8004c50:	60fb      	str	r3, [r7, #12]
 8004c52:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2200      	movs	r2, #0
 8004c58:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004c5a:	e00b      	b.n	8004c74 <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	60bb      	str	r3, [r7, #8]
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	695b      	ldr	r3, [r3, #20]
 8004c66:	60bb      	str	r3, [r7, #8]
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	699b      	ldr	r3, [r3, #24]
 8004c6e:	60bb      	str	r3, [r7, #8]
 8004c70:	68bb      	ldr	r3, [r7, #8]
}
 8004c72:	e7ff      	b.n	8004c74 <I2C_Master_ADDR+0x32c>
 8004c74:	bf00      	nop
 8004c76:	3744      	adds	r7, #68	@ 0x44
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	bc80      	pop	{r7}
 8004c7c:	4770      	bx	lr

08004c7e <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004c7e:	b580      	push	{r7, lr}
 8004c80:	b084      	sub	sp, #16
 8004c82:	af00      	add	r7, sp, #0
 8004c84:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c8c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c92:	b29b      	uxth	r3, r3
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d02b      	beq.n	8004cf0 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c9c:	781a      	ldrb	r2, [r3, #0]
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ca8:	1c5a      	adds	r2, r3, #1
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cb2:	b29b      	uxth	r3, r3
 8004cb4:	3b01      	subs	r3, #1
 8004cb6:	b29a      	uxth	r2, r3
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cc0:	b29b      	uxth	r3, r3
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d114      	bne.n	8004cf0 <I2C_SlaveTransmit_TXE+0x72>
 8004cc6:	7bfb      	ldrb	r3, [r7, #15]
 8004cc8:	2b29      	cmp	r3, #41	@ 0x29
 8004cca:	d111      	bne.n	8004cf0 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	685a      	ldr	r2, [r3, #4]
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004cda:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2221      	movs	r2, #33	@ 0x21
 8004ce0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2228      	movs	r2, #40	@ 0x28
 8004ce6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004cea:	6878      	ldr	r0, [r7, #4]
 8004cec:	f7ff f9cf 	bl	800408e <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004cf0:	bf00      	nop
 8004cf2:	3710      	adds	r7, #16
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	bd80      	pop	{r7, pc}

08004cf8 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	b083      	sub	sp, #12
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d04:	b29b      	uxth	r3, r3
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d011      	beq.n	8004d2e <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d0e:	781a      	ldrb	r2, [r3, #0]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d1a:	1c5a      	adds	r2, r3, #1
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d24:	b29b      	uxth	r3, r3
 8004d26:	3b01      	subs	r3, #1
 8004d28:	b29a      	uxth	r2, r3
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8004d2e:	bf00      	nop
 8004d30:	370c      	adds	r7, #12
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bc80      	pop	{r7}
 8004d36:	4770      	bx	lr

08004d38 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b084      	sub	sp, #16
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d46:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d4c:	b29b      	uxth	r3, r3
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d02c      	beq.n	8004dac <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	691a      	ldr	r2, [r3, #16]
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d5c:	b2d2      	uxtb	r2, r2
 8004d5e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d64:	1c5a      	adds	r2, r3, #1
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d6e:	b29b      	uxth	r3, r3
 8004d70:	3b01      	subs	r3, #1
 8004d72:	b29a      	uxth	r2, r3
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d7c:	b29b      	uxth	r3, r3
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d114      	bne.n	8004dac <I2C_SlaveReceive_RXNE+0x74>
 8004d82:	7bfb      	ldrb	r3, [r7, #15]
 8004d84:	2b2a      	cmp	r3, #42	@ 0x2a
 8004d86:	d111      	bne.n	8004dac <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	685a      	ldr	r2, [r3, #4]
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004d96:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2222      	movs	r2, #34	@ 0x22
 8004d9c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2228      	movs	r2, #40	@ 0x28
 8004da2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004da6:	6878      	ldr	r0, [r7, #4]
 8004da8:	f7ff f97a 	bl	80040a0 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004dac:	bf00      	nop
 8004dae:	3710      	adds	r7, #16
 8004db0:	46bd      	mov	sp, r7
 8004db2:	bd80      	pop	{r7, pc}

08004db4 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004db4:	b480      	push	{r7}
 8004db6:	b083      	sub	sp, #12
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004dc0:	b29b      	uxth	r3, r3
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d012      	beq.n	8004dec <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	691a      	ldr	r2, [r3, #16]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dd0:	b2d2      	uxtb	r2, r2
 8004dd2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dd8:	1c5a      	adds	r2, r3, #1
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004de2:	b29b      	uxth	r3, r3
 8004de4:	3b01      	subs	r3, #1
 8004de6:	b29a      	uxth	r2, r3
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8004dec:	bf00      	nop
 8004dee:	370c      	adds	r7, #12
 8004df0:	46bd      	mov	sp, r7
 8004df2:	bc80      	pop	{r7}
 8004df4:	4770      	bx	lr

08004df6 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8004df6:	b580      	push	{r7, lr}
 8004df8:	b084      	sub	sp, #16
 8004dfa:	af00      	add	r7, sp, #0
 8004dfc:	6078      	str	r0, [r7, #4]
 8004dfe:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004e00:	2300      	movs	r3, #0
 8004e02:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e0a:	b2db      	uxtb	r3, r3
 8004e0c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004e10:	2b28      	cmp	r3, #40	@ 0x28
 8004e12:	d125      	bne.n	8004e60 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	685a      	ldr	r2, [r3, #4]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004e22:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	f003 0304 	and.w	r3, r3, #4
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d101      	bne.n	8004e32 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d103      	bne.n	8004e44 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	68db      	ldr	r3, [r3, #12]
 8004e40:	81bb      	strh	r3, [r7, #12]
 8004e42:	e002      	b.n	8004e4a <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	699b      	ldr	r3, [r3, #24]
 8004e48:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004e52:	89ba      	ldrh	r2, [r7, #12]
 8004e54:	7bfb      	ldrb	r3, [r7, #15]
 8004e56:	4619      	mov	r1, r3
 8004e58:	6878      	ldr	r0, [r7, #4]
 8004e5a:	f7ff f92a 	bl	80040b2 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004e5e:	e00e      	b.n	8004e7e <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e60:	2300      	movs	r3, #0
 8004e62:	60bb      	str	r3, [r7, #8]
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	695b      	ldr	r3, [r3, #20]
 8004e6a:	60bb      	str	r3, [r7, #8]
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	699b      	ldr	r3, [r3, #24]
 8004e72:	60bb      	str	r3, [r7, #8]
 8004e74:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2200      	movs	r2, #0
 8004e7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8004e7e:	bf00      	nop
 8004e80:	3710      	adds	r7, #16
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bd80      	pop	{r7, pc}
	...

08004e88 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b084      	sub	sp, #16
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e96:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	685a      	ldr	r2, [r3, #4]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004ea6:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	60bb      	str	r3, [r7, #8]
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	695b      	ldr	r3, [r3, #20]
 8004eb2:	60bb      	str	r3, [r7, #8]
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	681a      	ldr	r2, [r3, #0]
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f042 0201 	orr.w	r2, r2, #1
 8004ec2:	601a      	str	r2, [r3, #0]
 8004ec4:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	681a      	ldr	r2, [r3, #0]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004ed4:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	685b      	ldr	r3, [r3, #4]
 8004edc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004ee0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004ee4:	d172      	bne.n	8004fcc <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004ee6:	7bfb      	ldrb	r3, [r7, #15]
 8004ee8:	2b22      	cmp	r3, #34	@ 0x22
 8004eea:	d002      	beq.n	8004ef2 <I2C_Slave_STOPF+0x6a>
 8004eec:	7bfb      	ldrb	r3, [r7, #15]
 8004eee:	2b2a      	cmp	r3, #42	@ 0x2a
 8004ef0:	d135      	bne.n	8004f5e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	685b      	ldr	r3, [r3, #4]
 8004efa:	b29a      	uxth	r2, r3
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f04:	b29b      	uxth	r3, r3
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d005      	beq.n	8004f16 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f0e:	f043 0204 	orr.w	r2, r3, #4
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	685a      	ldr	r2, [r3, #4]
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004f24:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	f7fd ffa0 	bl	8002e70 <HAL_DMA_GetState>
 8004f30:	4603      	mov	r3, r0
 8004f32:	2b01      	cmp	r3, #1
 8004f34:	d049      	beq.n	8004fca <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f3a:	4a69      	ldr	r2, [pc, #420]	@ (80050e0 <I2C_Slave_STOPF+0x258>)
 8004f3c:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f42:	4618      	mov	r0, r3
 8004f44:	f7fd fe16 	bl	8002b74 <HAL_DMA_Abort_IT>
 8004f48:	4603      	mov	r3, r0
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d03d      	beq.n	8004fca <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f54:	687a      	ldr	r2, [r7, #4]
 8004f56:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004f58:	4610      	mov	r0, r2
 8004f5a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004f5c:	e035      	b.n	8004fca <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	685b      	ldr	r3, [r3, #4]
 8004f66:	b29a      	uxth	r2, r3
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f70:	b29b      	uxth	r3, r3
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d005      	beq.n	8004f82 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f7a:	f043 0204 	orr.w	r2, r3, #4
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	685a      	ldr	r2, [r3, #4]
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004f90:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f96:	4618      	mov	r0, r3
 8004f98:	f7fd ff6a 	bl	8002e70 <HAL_DMA_GetState>
 8004f9c:	4603      	mov	r3, r0
 8004f9e:	2b01      	cmp	r3, #1
 8004fa0:	d014      	beq.n	8004fcc <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004fa6:	4a4e      	ldr	r2, [pc, #312]	@ (80050e0 <I2C_Slave_STOPF+0x258>)
 8004fa8:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004fae:	4618      	mov	r0, r3
 8004fb0:	f7fd fde0 	bl	8002b74 <HAL_DMA_Abort_IT>
 8004fb4:	4603      	mov	r3, r0
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d008      	beq.n	8004fcc <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004fbe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004fc0:	687a      	ldr	r2, [r7, #4]
 8004fc2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004fc4:	4610      	mov	r0, r2
 8004fc6:	4798      	blx	r3
 8004fc8:	e000      	b.n	8004fcc <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004fca:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004fd0:	b29b      	uxth	r3, r3
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d03e      	beq.n	8005054 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	695b      	ldr	r3, [r3, #20]
 8004fdc:	f003 0304 	and.w	r3, r3, #4
 8004fe0:	2b04      	cmp	r3, #4
 8004fe2:	d112      	bne.n	800500a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	691a      	ldr	r2, [r3, #16]
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fee:	b2d2      	uxtb	r2, r2
 8004ff0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ff6:	1c5a      	adds	r2, r3, #1
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005000:	b29b      	uxth	r3, r3
 8005002:	3b01      	subs	r3, #1
 8005004:	b29a      	uxth	r2, r3
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	695b      	ldr	r3, [r3, #20]
 8005010:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005014:	2b40      	cmp	r3, #64	@ 0x40
 8005016:	d112      	bne.n	800503e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	691a      	ldr	r2, [r3, #16]
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005022:	b2d2      	uxtb	r2, r2
 8005024:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800502a:	1c5a      	adds	r2, r3, #1
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005034:	b29b      	uxth	r3, r3
 8005036:	3b01      	subs	r3, #1
 8005038:	b29a      	uxth	r2, r3
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005042:	b29b      	uxth	r3, r3
 8005044:	2b00      	cmp	r3, #0
 8005046:	d005      	beq.n	8005054 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800504c:	f043 0204 	orr.w	r2, r3, #4
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005058:	2b00      	cmp	r3, #0
 800505a:	d003      	beq.n	8005064 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800505c:	6878      	ldr	r0, [r7, #4]
 800505e:	f000 f843 	bl	80050e8 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8005062:	e039      	b.n	80050d8 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005064:	7bfb      	ldrb	r3, [r7, #15]
 8005066:	2b2a      	cmp	r3, #42	@ 0x2a
 8005068:	d109      	bne.n	800507e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2200      	movs	r2, #0
 800506e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2228      	movs	r2, #40	@ 0x28
 8005074:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005078:	6878      	ldr	r0, [r7, #4]
 800507a:	f7ff f811 	bl	80040a0 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005084:	b2db      	uxtb	r3, r3
 8005086:	2b28      	cmp	r3, #40	@ 0x28
 8005088:	d111      	bne.n	80050ae <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	4a15      	ldr	r2, [pc, #84]	@ (80050e4 <I2C_Slave_STOPF+0x25c>)
 800508e:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2200      	movs	r2, #0
 8005094:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2220      	movs	r2, #32
 800509a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2200      	movs	r2, #0
 80050a2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80050a6:	6878      	ldr	r0, [r7, #4]
 80050a8:	f7ff f810 	bl	80040cc <HAL_I2C_ListenCpltCallback>
}
 80050ac:	e014      	b.n	80050d8 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050b2:	2b22      	cmp	r3, #34	@ 0x22
 80050b4:	d002      	beq.n	80050bc <I2C_Slave_STOPF+0x234>
 80050b6:	7bfb      	ldrb	r3, [r7, #15]
 80050b8:	2b22      	cmp	r3, #34	@ 0x22
 80050ba:	d10d      	bne.n	80050d8 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2200      	movs	r2, #0
 80050c0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2220      	movs	r2, #32
 80050c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2200      	movs	r2, #0
 80050ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80050d2:	6878      	ldr	r0, [r7, #4]
 80050d4:	f7fe ffe4 	bl	80040a0 <HAL_I2C_SlaveRxCpltCallback>
}
 80050d8:	bf00      	nop
 80050da:	3710      	adds	r7, #16
 80050dc:	46bd      	mov	sp, r7
 80050de:	bd80      	pop	{r7, pc}
 80050e0:	0800574d 	.word	0x0800574d
 80050e4:	ffff0000 	.word	0xffff0000

080050e8 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b084      	sub	sp, #16
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80050f6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80050fe:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005100:	7bbb      	ldrb	r3, [r7, #14]
 8005102:	2b10      	cmp	r3, #16
 8005104:	d002      	beq.n	800510c <I2C_ITError+0x24>
 8005106:	7bbb      	ldrb	r3, [r7, #14]
 8005108:	2b40      	cmp	r3, #64	@ 0x40
 800510a:	d10a      	bne.n	8005122 <I2C_ITError+0x3a>
 800510c:	7bfb      	ldrb	r3, [r7, #15]
 800510e:	2b22      	cmp	r3, #34	@ 0x22
 8005110:	d107      	bne.n	8005122 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	681a      	ldr	r2, [r3, #0]
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005120:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005122:	7bfb      	ldrb	r3, [r7, #15]
 8005124:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005128:	2b28      	cmp	r3, #40	@ 0x28
 800512a:	d107      	bne.n	800513c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2200      	movs	r2, #0
 8005130:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2228      	movs	r2, #40	@ 0x28
 8005136:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800513a:	e015      	b.n	8005168 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	685b      	ldr	r3, [r3, #4]
 8005142:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005146:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800514a:	d00a      	beq.n	8005162 <I2C_ITError+0x7a>
 800514c:	7bfb      	ldrb	r3, [r7, #15]
 800514e:	2b60      	cmp	r3, #96	@ 0x60
 8005150:	d007      	beq.n	8005162 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2220      	movs	r2, #32
 8005156:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2200      	movs	r2, #0
 800515e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2200      	movs	r2, #0
 8005166:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	685b      	ldr	r3, [r3, #4]
 800516e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005172:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005176:	d162      	bne.n	800523e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	685a      	ldr	r2, [r3, #4]
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005186:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800518c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8005190:	b2db      	uxtb	r3, r3
 8005192:	2b01      	cmp	r3, #1
 8005194:	d020      	beq.n	80051d8 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800519a:	4a6a      	ldr	r2, [pc, #424]	@ (8005344 <I2C_ITError+0x25c>)
 800519c:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80051a2:	4618      	mov	r0, r3
 80051a4:	f7fd fce6 	bl	8002b74 <HAL_DMA_Abort_IT>
 80051a8:	4603      	mov	r3, r0
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	f000 8089 	beq.w	80052c2 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	681a      	ldr	r2, [r3, #0]
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f022 0201 	bic.w	r2, r2, #1
 80051be:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2220      	movs	r2, #32
 80051c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80051cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80051ce:	687a      	ldr	r2, [r7, #4]
 80051d0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80051d2:	4610      	mov	r0, r2
 80051d4:	4798      	blx	r3
 80051d6:	e074      	b.n	80052c2 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051dc:	4a59      	ldr	r2, [pc, #356]	@ (8005344 <I2C_ITError+0x25c>)
 80051de:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051e4:	4618      	mov	r0, r3
 80051e6:	f7fd fcc5 	bl	8002b74 <HAL_DMA_Abort_IT>
 80051ea:	4603      	mov	r3, r0
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d068      	beq.n	80052c2 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	695b      	ldr	r3, [r3, #20]
 80051f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051fa:	2b40      	cmp	r3, #64	@ 0x40
 80051fc:	d10b      	bne.n	8005216 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	691a      	ldr	r2, [r3, #16]
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005208:	b2d2      	uxtb	r2, r2
 800520a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005210:	1c5a      	adds	r2, r3, #1
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	681a      	ldr	r2, [r3, #0]
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f022 0201 	bic.w	r2, r2, #1
 8005224:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2220      	movs	r2, #32
 800522a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005232:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005234:	687a      	ldr	r2, [r7, #4]
 8005236:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005238:	4610      	mov	r0, r2
 800523a:	4798      	blx	r3
 800523c:	e041      	b.n	80052c2 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005244:	b2db      	uxtb	r3, r3
 8005246:	2b60      	cmp	r3, #96	@ 0x60
 8005248:	d125      	bne.n	8005296 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2220      	movs	r2, #32
 800524e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2200      	movs	r2, #0
 8005256:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	695b      	ldr	r3, [r3, #20]
 800525e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005262:	2b40      	cmp	r3, #64	@ 0x40
 8005264:	d10b      	bne.n	800527e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	691a      	ldr	r2, [r3, #16]
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005270:	b2d2      	uxtb	r2, r2
 8005272:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005278:	1c5a      	adds	r2, r3, #1
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	681a      	ldr	r2, [r3, #0]
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f022 0201 	bic.w	r2, r2, #1
 800528c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800528e:	6878      	ldr	r0, [r7, #4]
 8005290:	f7fe ff40 	bl	8004114 <HAL_I2C_AbortCpltCallback>
 8005294:	e015      	b.n	80052c2 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	695b      	ldr	r3, [r3, #20]
 800529c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052a0:	2b40      	cmp	r3, #64	@ 0x40
 80052a2:	d10b      	bne.n	80052bc <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	691a      	ldr	r2, [r3, #16]
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052ae:	b2d2      	uxtb	r2, r2
 80052b0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052b6:	1c5a      	adds	r2, r3, #1
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80052bc:	6878      	ldr	r0, [r7, #4]
 80052be:	f7fe ff20 	bl	8004102 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052c6:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80052c8:	68bb      	ldr	r3, [r7, #8]
 80052ca:	f003 0301 	and.w	r3, r3, #1
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d10e      	bne.n	80052f0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80052d2:	68bb      	ldr	r3, [r7, #8]
 80052d4:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d109      	bne.n	80052f0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80052dc:	68bb      	ldr	r3, [r7, #8]
 80052de:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d104      	bne.n	80052f0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80052e6:	68bb      	ldr	r3, [r7, #8]
 80052e8:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d007      	beq.n	8005300 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	685a      	ldr	r2, [r3, #4]
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80052fe:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005306:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800530c:	f003 0304 	and.w	r3, r3, #4
 8005310:	2b04      	cmp	r3, #4
 8005312:	d113      	bne.n	800533c <I2C_ITError+0x254>
 8005314:	7bfb      	ldrb	r3, [r7, #15]
 8005316:	2b28      	cmp	r3, #40	@ 0x28
 8005318:	d110      	bne.n	800533c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	4a0a      	ldr	r2, [pc, #40]	@ (8005348 <I2C_ITError+0x260>)
 800531e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2200      	movs	r2, #0
 8005324:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2220      	movs	r2, #32
 800532a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2200      	movs	r2, #0
 8005332:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005336:	6878      	ldr	r0, [r7, #4]
 8005338:	f7fe fec8 	bl	80040cc <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800533c:	bf00      	nop
 800533e:	3710      	adds	r7, #16
 8005340:	46bd      	mov	sp, r7
 8005342:	bd80      	pop	{r7, pc}
 8005344:	0800574d 	.word	0x0800574d
 8005348:	ffff0000 	.word	0xffff0000

0800534c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b088      	sub	sp, #32
 8005350:	af02      	add	r7, sp, #8
 8005352:	60f8      	str	r0, [r7, #12]
 8005354:	607a      	str	r2, [r7, #4]
 8005356:	603b      	str	r3, [r7, #0]
 8005358:	460b      	mov	r3, r1
 800535a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005360:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005362:	697b      	ldr	r3, [r7, #20]
 8005364:	2b08      	cmp	r3, #8
 8005366:	d006      	beq.n	8005376 <I2C_MasterRequestWrite+0x2a>
 8005368:	697b      	ldr	r3, [r7, #20]
 800536a:	2b01      	cmp	r3, #1
 800536c:	d003      	beq.n	8005376 <I2C_MasterRequestWrite+0x2a>
 800536e:	697b      	ldr	r3, [r7, #20]
 8005370:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005374:	d108      	bne.n	8005388 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	681a      	ldr	r2, [r3, #0]
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005384:	601a      	str	r2, [r3, #0]
 8005386:	e00b      	b.n	80053a0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800538c:	2b12      	cmp	r3, #18
 800538e:	d107      	bne.n	80053a0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	681a      	ldr	r2, [r3, #0]
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800539e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	9300      	str	r3, [sp, #0]
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2200      	movs	r2, #0
 80053a8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80053ac:	68f8      	ldr	r0, [r7, #12]
 80053ae:	f000 fa75 	bl	800589c <I2C_WaitOnFlagUntilTimeout>
 80053b2:	4603      	mov	r3, r0
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d00d      	beq.n	80053d4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80053c6:	d103      	bne.n	80053d0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80053ce:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80053d0:	2303      	movs	r3, #3
 80053d2:	e035      	b.n	8005440 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	691b      	ldr	r3, [r3, #16]
 80053d8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80053dc:	d108      	bne.n	80053f0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80053de:	897b      	ldrh	r3, [r7, #10]
 80053e0:	b2db      	uxtb	r3, r3
 80053e2:	461a      	mov	r2, r3
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80053ec:	611a      	str	r2, [r3, #16]
 80053ee:	e01b      	b.n	8005428 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80053f0:	897b      	ldrh	r3, [r7, #10]
 80053f2:	11db      	asrs	r3, r3, #7
 80053f4:	b2db      	uxtb	r3, r3
 80053f6:	f003 0306 	and.w	r3, r3, #6
 80053fa:	b2db      	uxtb	r3, r3
 80053fc:	f063 030f 	orn	r3, r3, #15
 8005400:	b2da      	uxtb	r2, r3
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	687a      	ldr	r2, [r7, #4]
 800540c:	490e      	ldr	r1, [pc, #56]	@ (8005448 <I2C_MasterRequestWrite+0xfc>)
 800540e:	68f8      	ldr	r0, [r7, #12]
 8005410:	f000 fabe 	bl	8005990 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005414:	4603      	mov	r3, r0
 8005416:	2b00      	cmp	r3, #0
 8005418:	d001      	beq.n	800541e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800541a:	2301      	movs	r3, #1
 800541c:	e010      	b.n	8005440 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800541e:	897b      	ldrh	r3, [r7, #10]
 8005420:	b2da      	uxtb	r2, r3
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	687a      	ldr	r2, [r7, #4]
 800542c:	4907      	ldr	r1, [pc, #28]	@ (800544c <I2C_MasterRequestWrite+0x100>)
 800542e:	68f8      	ldr	r0, [r7, #12]
 8005430:	f000 faae 	bl	8005990 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005434:	4603      	mov	r3, r0
 8005436:	2b00      	cmp	r3, #0
 8005438:	d001      	beq.n	800543e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800543a:	2301      	movs	r3, #1
 800543c:	e000      	b.n	8005440 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800543e:	2300      	movs	r3, #0
}
 8005440:	4618      	mov	r0, r3
 8005442:	3718      	adds	r7, #24
 8005444:	46bd      	mov	sp, r7
 8005446:	bd80      	pop	{r7, pc}
 8005448:	00010008 	.word	0x00010008
 800544c:	00010002 	.word	0x00010002

08005450 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b088      	sub	sp, #32
 8005454:	af02      	add	r7, sp, #8
 8005456:	60f8      	str	r0, [r7, #12]
 8005458:	4608      	mov	r0, r1
 800545a:	4611      	mov	r1, r2
 800545c:	461a      	mov	r2, r3
 800545e:	4603      	mov	r3, r0
 8005460:	817b      	strh	r3, [r7, #10]
 8005462:	460b      	mov	r3, r1
 8005464:	813b      	strh	r3, [r7, #8]
 8005466:	4613      	mov	r3, r2
 8005468:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	681a      	ldr	r2, [r3, #0]
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005478:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800547a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800547c:	9300      	str	r3, [sp, #0]
 800547e:	6a3b      	ldr	r3, [r7, #32]
 8005480:	2200      	movs	r2, #0
 8005482:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005486:	68f8      	ldr	r0, [r7, #12]
 8005488:	f000 fa08 	bl	800589c <I2C_WaitOnFlagUntilTimeout>
 800548c:	4603      	mov	r3, r0
 800548e:	2b00      	cmp	r3, #0
 8005490:	d00d      	beq.n	80054ae <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800549c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80054a0:	d103      	bne.n	80054aa <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80054a8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80054aa:	2303      	movs	r3, #3
 80054ac:	e05f      	b.n	800556e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80054ae:	897b      	ldrh	r3, [r7, #10]
 80054b0:	b2db      	uxtb	r3, r3
 80054b2:	461a      	mov	r2, r3
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80054bc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80054be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054c0:	6a3a      	ldr	r2, [r7, #32]
 80054c2:	492d      	ldr	r1, [pc, #180]	@ (8005578 <I2C_RequestMemoryWrite+0x128>)
 80054c4:	68f8      	ldr	r0, [r7, #12]
 80054c6:	f000 fa63 	bl	8005990 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80054ca:	4603      	mov	r3, r0
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d001      	beq.n	80054d4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80054d0:	2301      	movs	r3, #1
 80054d2:	e04c      	b.n	800556e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80054d4:	2300      	movs	r3, #0
 80054d6:	617b      	str	r3, [r7, #20]
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	695b      	ldr	r3, [r3, #20]
 80054de:	617b      	str	r3, [r7, #20]
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	699b      	ldr	r3, [r3, #24]
 80054e6:	617b      	str	r3, [r7, #20]
 80054e8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80054ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80054ec:	6a39      	ldr	r1, [r7, #32]
 80054ee:	68f8      	ldr	r0, [r7, #12]
 80054f0:	f000 faee 	bl	8005ad0 <I2C_WaitOnTXEFlagUntilTimeout>
 80054f4:	4603      	mov	r3, r0
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d00d      	beq.n	8005516 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054fe:	2b04      	cmp	r3, #4
 8005500:	d107      	bne.n	8005512 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	681a      	ldr	r2, [r3, #0]
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005510:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005512:	2301      	movs	r3, #1
 8005514:	e02b      	b.n	800556e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005516:	88fb      	ldrh	r3, [r7, #6]
 8005518:	2b01      	cmp	r3, #1
 800551a:	d105      	bne.n	8005528 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800551c:	893b      	ldrh	r3, [r7, #8]
 800551e:	b2da      	uxtb	r2, r3
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	611a      	str	r2, [r3, #16]
 8005526:	e021      	b.n	800556c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005528:	893b      	ldrh	r3, [r7, #8]
 800552a:	0a1b      	lsrs	r3, r3, #8
 800552c:	b29b      	uxth	r3, r3
 800552e:	b2da      	uxtb	r2, r3
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005536:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005538:	6a39      	ldr	r1, [r7, #32]
 800553a:	68f8      	ldr	r0, [r7, #12]
 800553c:	f000 fac8 	bl	8005ad0 <I2C_WaitOnTXEFlagUntilTimeout>
 8005540:	4603      	mov	r3, r0
 8005542:	2b00      	cmp	r3, #0
 8005544:	d00d      	beq.n	8005562 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800554a:	2b04      	cmp	r3, #4
 800554c:	d107      	bne.n	800555e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	681a      	ldr	r2, [r3, #0]
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800555c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800555e:	2301      	movs	r3, #1
 8005560:	e005      	b.n	800556e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005562:	893b      	ldrh	r3, [r7, #8]
 8005564:	b2da      	uxtb	r2, r3
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800556c:	2300      	movs	r3, #0
}
 800556e:	4618      	mov	r0, r3
 8005570:	3718      	adds	r7, #24
 8005572:	46bd      	mov	sp, r7
 8005574:	bd80      	pop	{r7, pc}
 8005576:	bf00      	nop
 8005578:	00010002 	.word	0x00010002

0800557c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b088      	sub	sp, #32
 8005580:	af02      	add	r7, sp, #8
 8005582:	60f8      	str	r0, [r7, #12]
 8005584:	4608      	mov	r0, r1
 8005586:	4611      	mov	r1, r2
 8005588:	461a      	mov	r2, r3
 800558a:	4603      	mov	r3, r0
 800558c:	817b      	strh	r3, [r7, #10]
 800558e:	460b      	mov	r3, r1
 8005590:	813b      	strh	r3, [r7, #8]
 8005592:	4613      	mov	r3, r2
 8005594:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	681a      	ldr	r2, [r3, #0]
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80055a4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	681a      	ldr	r2, [r3, #0]
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80055b4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80055b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055b8:	9300      	str	r3, [sp, #0]
 80055ba:	6a3b      	ldr	r3, [r7, #32]
 80055bc:	2200      	movs	r2, #0
 80055be:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80055c2:	68f8      	ldr	r0, [r7, #12]
 80055c4:	f000 f96a 	bl	800589c <I2C_WaitOnFlagUntilTimeout>
 80055c8:	4603      	mov	r3, r0
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d00d      	beq.n	80055ea <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055d8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80055dc:	d103      	bne.n	80055e6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80055e4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80055e6:	2303      	movs	r3, #3
 80055e8:	e0aa      	b.n	8005740 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80055ea:	897b      	ldrh	r3, [r7, #10]
 80055ec:	b2db      	uxtb	r3, r3
 80055ee:	461a      	mov	r2, r3
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80055f8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80055fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055fc:	6a3a      	ldr	r2, [r7, #32]
 80055fe:	4952      	ldr	r1, [pc, #328]	@ (8005748 <I2C_RequestMemoryRead+0x1cc>)
 8005600:	68f8      	ldr	r0, [r7, #12]
 8005602:	f000 f9c5 	bl	8005990 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005606:	4603      	mov	r3, r0
 8005608:	2b00      	cmp	r3, #0
 800560a:	d001      	beq.n	8005610 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800560c:	2301      	movs	r3, #1
 800560e:	e097      	b.n	8005740 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005610:	2300      	movs	r3, #0
 8005612:	617b      	str	r3, [r7, #20]
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	695b      	ldr	r3, [r3, #20]
 800561a:	617b      	str	r3, [r7, #20]
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	699b      	ldr	r3, [r3, #24]
 8005622:	617b      	str	r3, [r7, #20]
 8005624:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005626:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005628:	6a39      	ldr	r1, [r7, #32]
 800562a:	68f8      	ldr	r0, [r7, #12]
 800562c:	f000 fa50 	bl	8005ad0 <I2C_WaitOnTXEFlagUntilTimeout>
 8005630:	4603      	mov	r3, r0
 8005632:	2b00      	cmp	r3, #0
 8005634:	d00d      	beq.n	8005652 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800563a:	2b04      	cmp	r3, #4
 800563c:	d107      	bne.n	800564e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	681a      	ldr	r2, [r3, #0]
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800564c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800564e:	2301      	movs	r3, #1
 8005650:	e076      	b.n	8005740 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005652:	88fb      	ldrh	r3, [r7, #6]
 8005654:	2b01      	cmp	r3, #1
 8005656:	d105      	bne.n	8005664 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005658:	893b      	ldrh	r3, [r7, #8]
 800565a:	b2da      	uxtb	r2, r3
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	611a      	str	r2, [r3, #16]
 8005662:	e021      	b.n	80056a8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005664:	893b      	ldrh	r3, [r7, #8]
 8005666:	0a1b      	lsrs	r3, r3, #8
 8005668:	b29b      	uxth	r3, r3
 800566a:	b2da      	uxtb	r2, r3
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005672:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005674:	6a39      	ldr	r1, [r7, #32]
 8005676:	68f8      	ldr	r0, [r7, #12]
 8005678:	f000 fa2a 	bl	8005ad0 <I2C_WaitOnTXEFlagUntilTimeout>
 800567c:	4603      	mov	r3, r0
 800567e:	2b00      	cmp	r3, #0
 8005680:	d00d      	beq.n	800569e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005686:	2b04      	cmp	r3, #4
 8005688:	d107      	bne.n	800569a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	681a      	ldr	r2, [r3, #0]
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005698:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800569a:	2301      	movs	r3, #1
 800569c:	e050      	b.n	8005740 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800569e:	893b      	ldrh	r3, [r7, #8]
 80056a0:	b2da      	uxtb	r2, r3
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80056a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80056aa:	6a39      	ldr	r1, [r7, #32]
 80056ac:	68f8      	ldr	r0, [r7, #12]
 80056ae:	f000 fa0f 	bl	8005ad0 <I2C_WaitOnTXEFlagUntilTimeout>
 80056b2:	4603      	mov	r3, r0
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d00d      	beq.n	80056d4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056bc:	2b04      	cmp	r3, #4
 80056be:	d107      	bne.n	80056d0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	681a      	ldr	r2, [r3, #0]
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80056ce:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80056d0:	2301      	movs	r3, #1
 80056d2:	e035      	b.n	8005740 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	681a      	ldr	r2, [r3, #0]
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80056e2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80056e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056e6:	9300      	str	r3, [sp, #0]
 80056e8:	6a3b      	ldr	r3, [r7, #32]
 80056ea:	2200      	movs	r2, #0
 80056ec:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80056f0:	68f8      	ldr	r0, [r7, #12]
 80056f2:	f000 f8d3 	bl	800589c <I2C_WaitOnFlagUntilTimeout>
 80056f6:	4603      	mov	r3, r0
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d00d      	beq.n	8005718 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005706:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800570a:	d103      	bne.n	8005714 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005712:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005714:	2303      	movs	r3, #3
 8005716:	e013      	b.n	8005740 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005718:	897b      	ldrh	r3, [r7, #10]
 800571a:	b2db      	uxtb	r3, r3
 800571c:	f043 0301 	orr.w	r3, r3, #1
 8005720:	b2da      	uxtb	r2, r3
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005728:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800572a:	6a3a      	ldr	r2, [r7, #32]
 800572c:	4906      	ldr	r1, [pc, #24]	@ (8005748 <I2C_RequestMemoryRead+0x1cc>)
 800572e:	68f8      	ldr	r0, [r7, #12]
 8005730:	f000 f92e 	bl	8005990 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005734:	4603      	mov	r3, r0
 8005736:	2b00      	cmp	r3, #0
 8005738:	d001      	beq.n	800573e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800573a:	2301      	movs	r3, #1
 800573c:	e000      	b.n	8005740 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800573e:	2300      	movs	r3, #0
}
 8005740:	4618      	mov	r0, r3
 8005742:	3718      	adds	r7, #24
 8005744:	46bd      	mov	sp, r7
 8005746:	bd80      	pop	{r7, pc}
 8005748:	00010002 	.word	0x00010002

0800574c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b086      	sub	sp, #24
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005754:	2300      	movs	r3, #0
 8005756:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800575c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800575e:	697b      	ldr	r3, [r7, #20]
 8005760:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005764:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005766:	4b4b      	ldr	r3, [pc, #300]	@ (8005894 <I2C_DMAAbort+0x148>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	08db      	lsrs	r3, r3, #3
 800576c:	4a4a      	ldr	r2, [pc, #296]	@ (8005898 <I2C_DMAAbort+0x14c>)
 800576e:	fba2 2303 	umull	r2, r3, r2, r3
 8005772:	0a1a      	lsrs	r2, r3, #8
 8005774:	4613      	mov	r3, r2
 8005776:	009b      	lsls	r3, r3, #2
 8005778:	4413      	add	r3, r2
 800577a:	00da      	lsls	r2, r3, #3
 800577c:	1ad3      	subs	r3, r2, r3
 800577e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d106      	bne.n	8005794 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005786:	697b      	ldr	r3, [r7, #20]
 8005788:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800578a:	f043 0220 	orr.w	r2, r3, #32
 800578e:	697b      	ldr	r3, [r7, #20]
 8005790:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8005792:	e00a      	b.n	80057aa <I2C_DMAAbort+0x5e>
    }
    count--;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	3b01      	subs	r3, #1
 8005798:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800579a:	697b      	ldr	r3, [r7, #20]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80057a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80057a8:	d0ea      	beq.n	8005780 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80057aa:	697b      	ldr	r3, [r7, #20]
 80057ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d003      	beq.n	80057ba <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80057b2:	697b      	ldr	r3, [r7, #20]
 80057b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80057b6:	2200      	movs	r2, #0
 80057b8:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  if (hi2c->hdmarx != NULL)
 80057ba:	697b      	ldr	r3, [r7, #20]
 80057bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d003      	beq.n	80057ca <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80057c2:	697b      	ldr	r3, [r7, #20]
 80057c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057c6:	2200      	movs	r2, #0
 80057c8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80057ca:	697b      	ldr	r3, [r7, #20]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	681a      	ldr	r2, [r3, #0]
 80057d0:	697b      	ldr	r3, [r7, #20]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80057d8:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80057da:	697b      	ldr	r3, [r7, #20]
 80057dc:	2200      	movs	r2, #0
 80057de:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80057e0:	697b      	ldr	r3, [r7, #20]
 80057e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d003      	beq.n	80057f0 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80057e8:	697b      	ldr	r3, [r7, #20]
 80057ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80057ec:	2200      	movs	r2, #0
 80057ee:	635a      	str	r2, [r3, #52]	@ 0x34
  }
  if (hi2c->hdmarx != NULL)
 80057f0:	697b      	ldr	r3, [r7, #20]
 80057f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d003      	beq.n	8005800 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80057f8:	697b      	ldr	r3, [r7, #20]
 80057fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057fc:	2200      	movs	r2, #0
 80057fe:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8005800:	697b      	ldr	r3, [r7, #20]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	681a      	ldr	r2, [r3, #0]
 8005806:	697b      	ldr	r3, [r7, #20]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f022 0201 	bic.w	r2, r2, #1
 800580e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005810:	697b      	ldr	r3, [r7, #20]
 8005812:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005816:	b2db      	uxtb	r3, r3
 8005818:	2b60      	cmp	r3, #96	@ 0x60
 800581a:	d10e      	bne.n	800583a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800581c:	697b      	ldr	r3, [r7, #20]
 800581e:	2220      	movs	r2, #32
 8005820:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005824:	697b      	ldr	r3, [r7, #20]
 8005826:	2200      	movs	r2, #0
 8005828:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800582c:	697b      	ldr	r3, [r7, #20]
 800582e:	2200      	movs	r2, #0
 8005830:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005832:	6978      	ldr	r0, [r7, #20]
 8005834:	f7fe fc6e 	bl	8004114 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005838:	e027      	b.n	800588a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800583a:	7cfb      	ldrb	r3, [r7, #19]
 800583c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005840:	2b28      	cmp	r3, #40	@ 0x28
 8005842:	d117      	bne.n	8005874 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8005844:	697b      	ldr	r3, [r7, #20]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	681a      	ldr	r2, [r3, #0]
 800584a:	697b      	ldr	r3, [r7, #20]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f042 0201 	orr.w	r2, r2, #1
 8005852:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005854:	697b      	ldr	r3, [r7, #20]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	681a      	ldr	r2, [r3, #0]
 800585a:	697b      	ldr	r3, [r7, #20]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005862:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005864:	697b      	ldr	r3, [r7, #20]
 8005866:	2200      	movs	r2, #0
 8005868:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800586a:	697b      	ldr	r3, [r7, #20]
 800586c:	2228      	movs	r2, #40	@ 0x28
 800586e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8005872:	e007      	b.n	8005884 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8005874:	697b      	ldr	r3, [r7, #20]
 8005876:	2220      	movs	r2, #32
 8005878:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800587c:	697b      	ldr	r3, [r7, #20]
 800587e:	2200      	movs	r2, #0
 8005880:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005884:	6978      	ldr	r0, [r7, #20]
 8005886:	f7fe fc3c 	bl	8004102 <HAL_I2C_ErrorCallback>
}
 800588a:	bf00      	nop
 800588c:	3718      	adds	r7, #24
 800588e:	46bd      	mov	sp, r7
 8005890:	bd80      	pop	{r7, pc}
 8005892:	bf00      	nop
 8005894:	2000001c 	.word	0x2000001c
 8005898:	14f8b589 	.word	0x14f8b589

0800589c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b084      	sub	sp, #16
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	60f8      	str	r0, [r7, #12]
 80058a4:	60b9      	str	r1, [r7, #8]
 80058a6:	603b      	str	r3, [r7, #0]
 80058a8:	4613      	mov	r3, r2
 80058aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80058ac:	e048      	b.n	8005940 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058b4:	d044      	beq.n	8005940 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058b6:	f7fc faed 	bl	8001e94 <HAL_GetTick>
 80058ba:	4602      	mov	r2, r0
 80058bc:	69bb      	ldr	r3, [r7, #24]
 80058be:	1ad3      	subs	r3, r2, r3
 80058c0:	683a      	ldr	r2, [r7, #0]
 80058c2:	429a      	cmp	r2, r3
 80058c4:	d302      	bcc.n	80058cc <I2C_WaitOnFlagUntilTimeout+0x30>
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d139      	bne.n	8005940 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	0c1b      	lsrs	r3, r3, #16
 80058d0:	b2db      	uxtb	r3, r3
 80058d2:	2b01      	cmp	r3, #1
 80058d4:	d10d      	bne.n	80058f2 <I2C_WaitOnFlagUntilTimeout+0x56>
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	695b      	ldr	r3, [r3, #20]
 80058dc:	43da      	mvns	r2, r3
 80058de:	68bb      	ldr	r3, [r7, #8]
 80058e0:	4013      	ands	r3, r2
 80058e2:	b29b      	uxth	r3, r3
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	bf0c      	ite	eq
 80058e8:	2301      	moveq	r3, #1
 80058ea:	2300      	movne	r3, #0
 80058ec:	b2db      	uxtb	r3, r3
 80058ee:	461a      	mov	r2, r3
 80058f0:	e00c      	b.n	800590c <I2C_WaitOnFlagUntilTimeout+0x70>
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	699b      	ldr	r3, [r3, #24]
 80058f8:	43da      	mvns	r2, r3
 80058fa:	68bb      	ldr	r3, [r7, #8]
 80058fc:	4013      	ands	r3, r2
 80058fe:	b29b      	uxth	r3, r3
 8005900:	2b00      	cmp	r3, #0
 8005902:	bf0c      	ite	eq
 8005904:	2301      	moveq	r3, #1
 8005906:	2300      	movne	r3, #0
 8005908:	b2db      	uxtb	r3, r3
 800590a:	461a      	mov	r2, r3
 800590c:	79fb      	ldrb	r3, [r7, #7]
 800590e:	429a      	cmp	r2, r3
 8005910:	d116      	bne.n	8005940 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	2200      	movs	r2, #0
 8005916:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	2220      	movs	r2, #32
 800591c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	2200      	movs	r2, #0
 8005924:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800592c:	f043 0220 	orr.w	r2, r3, #32
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	2200      	movs	r2, #0
 8005938:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800593c:	2301      	movs	r3, #1
 800593e:	e023      	b.n	8005988 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	0c1b      	lsrs	r3, r3, #16
 8005944:	b2db      	uxtb	r3, r3
 8005946:	2b01      	cmp	r3, #1
 8005948:	d10d      	bne.n	8005966 <I2C_WaitOnFlagUntilTimeout+0xca>
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	695b      	ldr	r3, [r3, #20]
 8005950:	43da      	mvns	r2, r3
 8005952:	68bb      	ldr	r3, [r7, #8]
 8005954:	4013      	ands	r3, r2
 8005956:	b29b      	uxth	r3, r3
 8005958:	2b00      	cmp	r3, #0
 800595a:	bf0c      	ite	eq
 800595c:	2301      	moveq	r3, #1
 800595e:	2300      	movne	r3, #0
 8005960:	b2db      	uxtb	r3, r3
 8005962:	461a      	mov	r2, r3
 8005964:	e00c      	b.n	8005980 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	699b      	ldr	r3, [r3, #24]
 800596c:	43da      	mvns	r2, r3
 800596e:	68bb      	ldr	r3, [r7, #8]
 8005970:	4013      	ands	r3, r2
 8005972:	b29b      	uxth	r3, r3
 8005974:	2b00      	cmp	r3, #0
 8005976:	bf0c      	ite	eq
 8005978:	2301      	moveq	r3, #1
 800597a:	2300      	movne	r3, #0
 800597c:	b2db      	uxtb	r3, r3
 800597e:	461a      	mov	r2, r3
 8005980:	79fb      	ldrb	r3, [r7, #7]
 8005982:	429a      	cmp	r2, r3
 8005984:	d093      	beq.n	80058ae <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005986:	2300      	movs	r3, #0
}
 8005988:	4618      	mov	r0, r3
 800598a:	3710      	adds	r7, #16
 800598c:	46bd      	mov	sp, r7
 800598e:	bd80      	pop	{r7, pc}

08005990 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b084      	sub	sp, #16
 8005994:	af00      	add	r7, sp, #0
 8005996:	60f8      	str	r0, [r7, #12]
 8005998:	60b9      	str	r1, [r7, #8]
 800599a:	607a      	str	r2, [r7, #4]
 800599c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800599e:	e071      	b.n	8005a84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	695b      	ldr	r3, [r3, #20]
 80059a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80059aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80059ae:	d123      	bne.n	80059f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	681a      	ldr	r2, [r3, #0]
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80059be:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80059c8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	2200      	movs	r2, #0
 80059ce:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	2220      	movs	r2, #32
 80059d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	2200      	movs	r2, #0
 80059dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059e4:	f043 0204 	orr.w	r2, r3, #4
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	2200      	movs	r2, #0
 80059f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80059f4:	2301      	movs	r3, #1
 80059f6:	e067      	b.n	8005ac8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059fe:	d041      	beq.n	8005a84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a00:	f7fc fa48 	bl	8001e94 <HAL_GetTick>
 8005a04:	4602      	mov	r2, r0
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	1ad3      	subs	r3, r2, r3
 8005a0a:	687a      	ldr	r2, [r7, #4]
 8005a0c:	429a      	cmp	r2, r3
 8005a0e:	d302      	bcc.n	8005a16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d136      	bne.n	8005a84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8005a16:	68bb      	ldr	r3, [r7, #8]
 8005a18:	0c1b      	lsrs	r3, r3, #16
 8005a1a:	b2db      	uxtb	r3, r3
 8005a1c:	2b01      	cmp	r3, #1
 8005a1e:	d10c      	bne.n	8005a3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	695b      	ldr	r3, [r3, #20]
 8005a26:	43da      	mvns	r2, r3
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	4013      	ands	r3, r2
 8005a2c:	b29b      	uxth	r3, r3
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	bf14      	ite	ne
 8005a32:	2301      	movne	r3, #1
 8005a34:	2300      	moveq	r3, #0
 8005a36:	b2db      	uxtb	r3, r3
 8005a38:	e00b      	b.n	8005a52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	699b      	ldr	r3, [r3, #24]
 8005a40:	43da      	mvns	r2, r3
 8005a42:	68bb      	ldr	r3, [r7, #8]
 8005a44:	4013      	ands	r3, r2
 8005a46:	b29b      	uxth	r3, r3
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	bf14      	ite	ne
 8005a4c:	2301      	movne	r3, #1
 8005a4e:	2300      	moveq	r3, #0
 8005a50:	b2db      	uxtb	r3, r3
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d016      	beq.n	8005a84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	2200      	movs	r2, #0
 8005a5a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	2220      	movs	r2, #32
 8005a60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	2200      	movs	r2, #0
 8005a68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a70:	f043 0220 	orr.w	r2, r3, #32
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005a80:	2301      	movs	r3, #1
 8005a82:	e021      	b.n	8005ac8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	0c1b      	lsrs	r3, r3, #16
 8005a88:	b2db      	uxtb	r3, r3
 8005a8a:	2b01      	cmp	r3, #1
 8005a8c:	d10c      	bne.n	8005aa8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	695b      	ldr	r3, [r3, #20]
 8005a94:	43da      	mvns	r2, r3
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	4013      	ands	r3, r2
 8005a9a:	b29b      	uxth	r3, r3
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	bf14      	ite	ne
 8005aa0:	2301      	movne	r3, #1
 8005aa2:	2300      	moveq	r3, #0
 8005aa4:	b2db      	uxtb	r3, r3
 8005aa6:	e00b      	b.n	8005ac0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	699b      	ldr	r3, [r3, #24]
 8005aae:	43da      	mvns	r2, r3
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	4013      	ands	r3, r2
 8005ab4:	b29b      	uxth	r3, r3
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	bf14      	ite	ne
 8005aba:	2301      	movne	r3, #1
 8005abc:	2300      	moveq	r3, #0
 8005abe:	b2db      	uxtb	r3, r3
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	f47f af6d 	bne.w	80059a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8005ac6:	2300      	movs	r3, #0
}
 8005ac8:	4618      	mov	r0, r3
 8005aca:	3710      	adds	r7, #16
 8005acc:	46bd      	mov	sp, r7
 8005ace:	bd80      	pop	{r7, pc}

08005ad0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b084      	sub	sp, #16
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	60f8      	str	r0, [r7, #12]
 8005ad8:	60b9      	str	r1, [r7, #8]
 8005ada:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005adc:	e034      	b.n	8005b48 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005ade:	68f8      	ldr	r0, [r7, #12]
 8005ae0:	f000 f915 	bl	8005d0e <I2C_IsAcknowledgeFailed>
 8005ae4:	4603      	mov	r3, r0
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d001      	beq.n	8005aee <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005aea:	2301      	movs	r3, #1
 8005aec:	e034      	b.n	8005b58 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005aee:	68bb      	ldr	r3, [r7, #8]
 8005af0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005af4:	d028      	beq.n	8005b48 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005af6:	f7fc f9cd 	bl	8001e94 <HAL_GetTick>
 8005afa:	4602      	mov	r2, r0
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	1ad3      	subs	r3, r2, r3
 8005b00:	68ba      	ldr	r2, [r7, #8]
 8005b02:	429a      	cmp	r2, r3
 8005b04:	d302      	bcc.n	8005b0c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005b06:	68bb      	ldr	r3, [r7, #8]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d11d      	bne.n	8005b48 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	695b      	ldr	r3, [r3, #20]
 8005b12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b16:	2b80      	cmp	r3, #128	@ 0x80
 8005b18:	d016      	beq.n	8005b48 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	2220      	movs	r2, #32
 8005b24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b34:	f043 0220 	orr.w	r2, r3, #32
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005b44:	2301      	movs	r3, #1
 8005b46:	e007      	b.n	8005b58 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	695b      	ldr	r3, [r3, #20]
 8005b4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b52:	2b80      	cmp	r3, #128	@ 0x80
 8005b54:	d1c3      	bne.n	8005ade <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005b56:	2300      	movs	r3, #0
}
 8005b58:	4618      	mov	r0, r3
 8005b5a:	3710      	adds	r7, #16
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	bd80      	pop	{r7, pc}

08005b60 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b084      	sub	sp, #16
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	60f8      	str	r0, [r7, #12]
 8005b68:	60b9      	str	r1, [r7, #8]
 8005b6a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005b6c:	e034      	b.n	8005bd8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005b6e:	68f8      	ldr	r0, [r7, #12]
 8005b70:	f000 f8cd 	bl	8005d0e <I2C_IsAcknowledgeFailed>
 8005b74:	4603      	mov	r3, r0
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d001      	beq.n	8005b7e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	e034      	b.n	8005be8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b7e:	68bb      	ldr	r3, [r7, #8]
 8005b80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b84:	d028      	beq.n	8005bd8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b86:	f7fc f985 	bl	8001e94 <HAL_GetTick>
 8005b8a:	4602      	mov	r2, r0
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	1ad3      	subs	r3, r2, r3
 8005b90:	68ba      	ldr	r2, [r7, #8]
 8005b92:	429a      	cmp	r2, r3
 8005b94:	d302      	bcc.n	8005b9c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005b96:	68bb      	ldr	r3, [r7, #8]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d11d      	bne.n	8005bd8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	695b      	ldr	r3, [r3, #20]
 8005ba2:	f003 0304 	and.w	r3, r3, #4
 8005ba6:	2b04      	cmp	r3, #4
 8005ba8:	d016      	beq.n	8005bd8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	2200      	movs	r2, #0
 8005bae:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	2220      	movs	r2, #32
 8005bb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	2200      	movs	r2, #0
 8005bbc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bc4:	f043 0220 	orr.w	r2, r3, #32
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	2200      	movs	r2, #0
 8005bd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005bd4:	2301      	movs	r3, #1
 8005bd6:	e007      	b.n	8005be8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	695b      	ldr	r3, [r3, #20]
 8005bde:	f003 0304 	and.w	r3, r3, #4
 8005be2:	2b04      	cmp	r3, #4
 8005be4:	d1c3      	bne.n	8005b6e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005be6:	2300      	movs	r3, #0
}
 8005be8:	4618      	mov	r0, r3
 8005bea:	3710      	adds	r7, #16
 8005bec:	46bd      	mov	sp, r7
 8005bee:	bd80      	pop	{r7, pc}

08005bf0 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8005bf0:	b480      	push	{r7}
 8005bf2:	b085      	sub	sp, #20
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8005bfc:	4b13      	ldr	r3, [pc, #76]	@ (8005c4c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	08db      	lsrs	r3, r3, #3
 8005c02:	4a13      	ldr	r2, [pc, #76]	@ (8005c50 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8005c04:	fba2 2303 	umull	r2, r3, r2, r3
 8005c08:	0a1a      	lsrs	r2, r3, #8
 8005c0a:	4613      	mov	r3, r2
 8005c0c:	009b      	lsls	r3, r3, #2
 8005c0e:	4413      	add	r3, r2
 8005c10:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	3b01      	subs	r3, #1
 8005c16:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d107      	bne.n	8005c2e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c22:	f043 0220 	orr.w	r2, r3, #32
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8005c2a:	2301      	movs	r3, #1
 8005c2c:	e008      	b.n	8005c40 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005c38:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005c3c:	d0e9      	beq.n	8005c12 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8005c3e:	2300      	movs	r3, #0
}
 8005c40:	4618      	mov	r0, r3
 8005c42:	3714      	adds	r7, #20
 8005c44:	46bd      	mov	sp, r7
 8005c46:	bc80      	pop	{r7}
 8005c48:	4770      	bx	lr
 8005c4a:	bf00      	nop
 8005c4c:	2000001c 	.word	0x2000001c
 8005c50:	14f8b589 	.word	0x14f8b589

08005c54 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b084      	sub	sp, #16
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	60f8      	str	r0, [r7, #12]
 8005c5c:	60b9      	str	r1, [r7, #8]
 8005c5e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005c60:	e049      	b.n	8005cf6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	695b      	ldr	r3, [r3, #20]
 8005c68:	f003 0310 	and.w	r3, r3, #16
 8005c6c:	2b10      	cmp	r3, #16
 8005c6e:	d119      	bne.n	8005ca4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f06f 0210 	mvn.w	r2, #16
 8005c78:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	2220      	movs	r2, #32
 8005c84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005ca0:	2301      	movs	r3, #1
 8005ca2:	e030      	b.n	8005d06 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ca4:	f7fc f8f6 	bl	8001e94 <HAL_GetTick>
 8005ca8:	4602      	mov	r2, r0
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	1ad3      	subs	r3, r2, r3
 8005cae:	68ba      	ldr	r2, [r7, #8]
 8005cb0:	429a      	cmp	r2, r3
 8005cb2:	d302      	bcc.n	8005cba <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d11d      	bne.n	8005cf6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	695b      	ldr	r3, [r3, #20]
 8005cc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cc4:	2b40      	cmp	r3, #64	@ 0x40
 8005cc6:	d016      	beq.n	8005cf6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	2200      	movs	r2, #0
 8005ccc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	2220      	movs	r2, #32
 8005cd2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	2200      	movs	r2, #0
 8005cda:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ce2:	f043 0220 	orr.w	r2, r3, #32
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	2200      	movs	r2, #0
 8005cee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	e007      	b.n	8005d06 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	695b      	ldr	r3, [r3, #20]
 8005cfc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d00:	2b40      	cmp	r3, #64	@ 0x40
 8005d02:	d1ae      	bne.n	8005c62 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005d04:	2300      	movs	r3, #0
}
 8005d06:	4618      	mov	r0, r3
 8005d08:	3710      	adds	r7, #16
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	bd80      	pop	{r7, pc}

08005d0e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005d0e:	b480      	push	{r7}
 8005d10:	b083      	sub	sp, #12
 8005d12:	af00      	add	r7, sp, #0
 8005d14:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	695b      	ldr	r3, [r3, #20]
 8005d1c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005d20:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005d24:	d11b      	bne.n	8005d5e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005d2e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2200      	movs	r2, #0
 8005d34:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2220      	movs	r2, #32
 8005d3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2200      	movs	r2, #0
 8005d42:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d4a:	f043 0204 	orr.w	r2, r3, #4
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2200      	movs	r2, #0
 8005d56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	e000      	b.n	8005d60 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005d5e:	2300      	movs	r3, #0
}
 8005d60:	4618      	mov	r0, r3
 8005d62:	370c      	adds	r7, #12
 8005d64:	46bd      	mov	sp, r7
 8005d66:	bc80      	pop	{r7}
 8005d68:	4770      	bx	lr

08005d6a <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8005d6a:	b480      	push	{r7}
 8005d6c:	b083      	sub	sp, #12
 8005d6e:	af00      	add	r7, sp, #0
 8005d70:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d76:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8005d7a:	d103      	bne.n	8005d84 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2201      	movs	r2, #1
 8005d80:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8005d82:	e007      	b.n	8005d94 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d88:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8005d8c:	d102      	bne.n	8005d94 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2208      	movs	r2, #8
 8005d92:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8005d94:	bf00      	nop
 8005d96:	370c      	adds	r7, #12
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	bc80      	pop	{r7}
 8005d9c:	4770      	bx	lr
	...

08005da0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b086      	sub	sp, #24
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d101      	bne.n	8005db2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005dae:	2301      	movs	r3, #1
 8005db0:	e272      	b.n	8006298 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f003 0301 	and.w	r3, r3, #1
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	f000 8087 	beq.w	8005ece <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005dc0:	4b92      	ldr	r3, [pc, #584]	@ (800600c <HAL_RCC_OscConfig+0x26c>)
 8005dc2:	685b      	ldr	r3, [r3, #4]
 8005dc4:	f003 030c 	and.w	r3, r3, #12
 8005dc8:	2b04      	cmp	r3, #4
 8005dca:	d00c      	beq.n	8005de6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005dcc:	4b8f      	ldr	r3, [pc, #572]	@ (800600c <HAL_RCC_OscConfig+0x26c>)
 8005dce:	685b      	ldr	r3, [r3, #4]
 8005dd0:	f003 030c 	and.w	r3, r3, #12
 8005dd4:	2b08      	cmp	r3, #8
 8005dd6:	d112      	bne.n	8005dfe <HAL_RCC_OscConfig+0x5e>
 8005dd8:	4b8c      	ldr	r3, [pc, #560]	@ (800600c <HAL_RCC_OscConfig+0x26c>)
 8005dda:	685b      	ldr	r3, [r3, #4]
 8005ddc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005de0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005de4:	d10b      	bne.n	8005dfe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005de6:	4b89      	ldr	r3, [pc, #548]	@ (800600c <HAL_RCC_OscConfig+0x26c>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d06c      	beq.n	8005ecc <HAL_RCC_OscConfig+0x12c>
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	685b      	ldr	r3, [r3, #4]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d168      	bne.n	8005ecc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005dfa:	2301      	movs	r3, #1
 8005dfc:	e24c      	b.n	8006298 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	685b      	ldr	r3, [r3, #4]
 8005e02:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e06:	d106      	bne.n	8005e16 <HAL_RCC_OscConfig+0x76>
 8005e08:	4b80      	ldr	r3, [pc, #512]	@ (800600c <HAL_RCC_OscConfig+0x26c>)
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	4a7f      	ldr	r2, [pc, #508]	@ (800600c <HAL_RCC_OscConfig+0x26c>)
 8005e0e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005e12:	6013      	str	r3, [r2, #0]
 8005e14:	e02e      	b.n	8005e74 <HAL_RCC_OscConfig+0xd4>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	685b      	ldr	r3, [r3, #4]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d10c      	bne.n	8005e38 <HAL_RCC_OscConfig+0x98>
 8005e1e:	4b7b      	ldr	r3, [pc, #492]	@ (800600c <HAL_RCC_OscConfig+0x26c>)
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	4a7a      	ldr	r2, [pc, #488]	@ (800600c <HAL_RCC_OscConfig+0x26c>)
 8005e24:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005e28:	6013      	str	r3, [r2, #0]
 8005e2a:	4b78      	ldr	r3, [pc, #480]	@ (800600c <HAL_RCC_OscConfig+0x26c>)
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	4a77      	ldr	r2, [pc, #476]	@ (800600c <HAL_RCC_OscConfig+0x26c>)
 8005e30:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005e34:	6013      	str	r3, [r2, #0]
 8005e36:	e01d      	b.n	8005e74 <HAL_RCC_OscConfig+0xd4>
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	685b      	ldr	r3, [r3, #4]
 8005e3c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005e40:	d10c      	bne.n	8005e5c <HAL_RCC_OscConfig+0xbc>
 8005e42:	4b72      	ldr	r3, [pc, #456]	@ (800600c <HAL_RCC_OscConfig+0x26c>)
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	4a71      	ldr	r2, [pc, #452]	@ (800600c <HAL_RCC_OscConfig+0x26c>)
 8005e48:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005e4c:	6013      	str	r3, [r2, #0]
 8005e4e:	4b6f      	ldr	r3, [pc, #444]	@ (800600c <HAL_RCC_OscConfig+0x26c>)
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	4a6e      	ldr	r2, [pc, #440]	@ (800600c <HAL_RCC_OscConfig+0x26c>)
 8005e54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005e58:	6013      	str	r3, [r2, #0]
 8005e5a:	e00b      	b.n	8005e74 <HAL_RCC_OscConfig+0xd4>
 8005e5c:	4b6b      	ldr	r3, [pc, #428]	@ (800600c <HAL_RCC_OscConfig+0x26c>)
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	4a6a      	ldr	r2, [pc, #424]	@ (800600c <HAL_RCC_OscConfig+0x26c>)
 8005e62:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005e66:	6013      	str	r3, [r2, #0]
 8005e68:	4b68      	ldr	r3, [pc, #416]	@ (800600c <HAL_RCC_OscConfig+0x26c>)
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	4a67      	ldr	r2, [pc, #412]	@ (800600c <HAL_RCC_OscConfig+0x26c>)
 8005e6e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005e72:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	685b      	ldr	r3, [r3, #4]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d013      	beq.n	8005ea4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e7c:	f7fc f80a 	bl	8001e94 <HAL_GetTick>
 8005e80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e82:	e008      	b.n	8005e96 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005e84:	f7fc f806 	bl	8001e94 <HAL_GetTick>
 8005e88:	4602      	mov	r2, r0
 8005e8a:	693b      	ldr	r3, [r7, #16]
 8005e8c:	1ad3      	subs	r3, r2, r3
 8005e8e:	2b64      	cmp	r3, #100	@ 0x64
 8005e90:	d901      	bls.n	8005e96 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005e92:	2303      	movs	r3, #3
 8005e94:	e200      	b.n	8006298 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e96:	4b5d      	ldr	r3, [pc, #372]	@ (800600c <HAL_RCC_OscConfig+0x26c>)
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d0f0      	beq.n	8005e84 <HAL_RCC_OscConfig+0xe4>
 8005ea2:	e014      	b.n	8005ece <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ea4:	f7fb fff6 	bl	8001e94 <HAL_GetTick>
 8005ea8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005eaa:	e008      	b.n	8005ebe <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005eac:	f7fb fff2 	bl	8001e94 <HAL_GetTick>
 8005eb0:	4602      	mov	r2, r0
 8005eb2:	693b      	ldr	r3, [r7, #16]
 8005eb4:	1ad3      	subs	r3, r2, r3
 8005eb6:	2b64      	cmp	r3, #100	@ 0x64
 8005eb8:	d901      	bls.n	8005ebe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005eba:	2303      	movs	r3, #3
 8005ebc:	e1ec      	b.n	8006298 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005ebe:	4b53      	ldr	r3, [pc, #332]	@ (800600c <HAL_RCC_OscConfig+0x26c>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d1f0      	bne.n	8005eac <HAL_RCC_OscConfig+0x10c>
 8005eca:	e000      	b.n	8005ece <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ecc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f003 0302 	and.w	r3, r3, #2
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d063      	beq.n	8005fa2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005eda:	4b4c      	ldr	r3, [pc, #304]	@ (800600c <HAL_RCC_OscConfig+0x26c>)
 8005edc:	685b      	ldr	r3, [r3, #4]
 8005ede:	f003 030c 	and.w	r3, r3, #12
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d00b      	beq.n	8005efe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005ee6:	4b49      	ldr	r3, [pc, #292]	@ (800600c <HAL_RCC_OscConfig+0x26c>)
 8005ee8:	685b      	ldr	r3, [r3, #4]
 8005eea:	f003 030c 	and.w	r3, r3, #12
 8005eee:	2b08      	cmp	r3, #8
 8005ef0:	d11c      	bne.n	8005f2c <HAL_RCC_OscConfig+0x18c>
 8005ef2:	4b46      	ldr	r3, [pc, #280]	@ (800600c <HAL_RCC_OscConfig+0x26c>)
 8005ef4:	685b      	ldr	r3, [r3, #4]
 8005ef6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d116      	bne.n	8005f2c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005efe:	4b43      	ldr	r3, [pc, #268]	@ (800600c <HAL_RCC_OscConfig+0x26c>)
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f003 0302 	and.w	r3, r3, #2
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d005      	beq.n	8005f16 <HAL_RCC_OscConfig+0x176>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	691b      	ldr	r3, [r3, #16]
 8005f0e:	2b01      	cmp	r3, #1
 8005f10:	d001      	beq.n	8005f16 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005f12:	2301      	movs	r3, #1
 8005f14:	e1c0      	b.n	8006298 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f16:	4b3d      	ldr	r3, [pc, #244]	@ (800600c <HAL_RCC_OscConfig+0x26c>)
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	695b      	ldr	r3, [r3, #20]
 8005f22:	00db      	lsls	r3, r3, #3
 8005f24:	4939      	ldr	r1, [pc, #228]	@ (800600c <HAL_RCC_OscConfig+0x26c>)
 8005f26:	4313      	orrs	r3, r2
 8005f28:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005f2a:	e03a      	b.n	8005fa2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	691b      	ldr	r3, [r3, #16]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d020      	beq.n	8005f76 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005f34:	4b36      	ldr	r3, [pc, #216]	@ (8006010 <HAL_RCC_OscConfig+0x270>)
 8005f36:	2201      	movs	r2, #1
 8005f38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f3a:	f7fb ffab 	bl	8001e94 <HAL_GetTick>
 8005f3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f40:	e008      	b.n	8005f54 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005f42:	f7fb ffa7 	bl	8001e94 <HAL_GetTick>
 8005f46:	4602      	mov	r2, r0
 8005f48:	693b      	ldr	r3, [r7, #16]
 8005f4a:	1ad3      	subs	r3, r2, r3
 8005f4c:	2b02      	cmp	r3, #2
 8005f4e:	d901      	bls.n	8005f54 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005f50:	2303      	movs	r3, #3
 8005f52:	e1a1      	b.n	8006298 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f54:	4b2d      	ldr	r3, [pc, #180]	@ (800600c <HAL_RCC_OscConfig+0x26c>)
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f003 0302 	and.w	r3, r3, #2
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d0f0      	beq.n	8005f42 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f60:	4b2a      	ldr	r3, [pc, #168]	@ (800600c <HAL_RCC_OscConfig+0x26c>)
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	695b      	ldr	r3, [r3, #20]
 8005f6c:	00db      	lsls	r3, r3, #3
 8005f6e:	4927      	ldr	r1, [pc, #156]	@ (800600c <HAL_RCC_OscConfig+0x26c>)
 8005f70:	4313      	orrs	r3, r2
 8005f72:	600b      	str	r3, [r1, #0]
 8005f74:	e015      	b.n	8005fa2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005f76:	4b26      	ldr	r3, [pc, #152]	@ (8006010 <HAL_RCC_OscConfig+0x270>)
 8005f78:	2200      	movs	r2, #0
 8005f7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f7c:	f7fb ff8a 	bl	8001e94 <HAL_GetTick>
 8005f80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005f82:	e008      	b.n	8005f96 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005f84:	f7fb ff86 	bl	8001e94 <HAL_GetTick>
 8005f88:	4602      	mov	r2, r0
 8005f8a:	693b      	ldr	r3, [r7, #16]
 8005f8c:	1ad3      	subs	r3, r2, r3
 8005f8e:	2b02      	cmp	r3, #2
 8005f90:	d901      	bls.n	8005f96 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005f92:	2303      	movs	r3, #3
 8005f94:	e180      	b.n	8006298 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005f96:	4b1d      	ldr	r3, [pc, #116]	@ (800600c <HAL_RCC_OscConfig+0x26c>)
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f003 0302 	and.w	r3, r3, #2
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d1f0      	bne.n	8005f84 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f003 0308 	and.w	r3, r3, #8
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d03a      	beq.n	8006024 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	699b      	ldr	r3, [r3, #24]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d019      	beq.n	8005fea <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005fb6:	4b17      	ldr	r3, [pc, #92]	@ (8006014 <HAL_RCC_OscConfig+0x274>)
 8005fb8:	2201      	movs	r2, #1
 8005fba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005fbc:	f7fb ff6a 	bl	8001e94 <HAL_GetTick>
 8005fc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005fc2:	e008      	b.n	8005fd6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005fc4:	f7fb ff66 	bl	8001e94 <HAL_GetTick>
 8005fc8:	4602      	mov	r2, r0
 8005fca:	693b      	ldr	r3, [r7, #16]
 8005fcc:	1ad3      	subs	r3, r2, r3
 8005fce:	2b02      	cmp	r3, #2
 8005fd0:	d901      	bls.n	8005fd6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005fd2:	2303      	movs	r3, #3
 8005fd4:	e160      	b.n	8006298 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005fd6:	4b0d      	ldr	r3, [pc, #52]	@ (800600c <HAL_RCC_OscConfig+0x26c>)
 8005fd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fda:	f003 0302 	and.w	r3, r3, #2
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d0f0      	beq.n	8005fc4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005fe2:	2001      	movs	r0, #1
 8005fe4:	f000 face 	bl	8006584 <RCC_Delay>
 8005fe8:	e01c      	b.n	8006024 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005fea:	4b0a      	ldr	r3, [pc, #40]	@ (8006014 <HAL_RCC_OscConfig+0x274>)
 8005fec:	2200      	movs	r2, #0
 8005fee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ff0:	f7fb ff50 	bl	8001e94 <HAL_GetTick>
 8005ff4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005ff6:	e00f      	b.n	8006018 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005ff8:	f7fb ff4c 	bl	8001e94 <HAL_GetTick>
 8005ffc:	4602      	mov	r2, r0
 8005ffe:	693b      	ldr	r3, [r7, #16]
 8006000:	1ad3      	subs	r3, r2, r3
 8006002:	2b02      	cmp	r3, #2
 8006004:	d908      	bls.n	8006018 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8006006:	2303      	movs	r3, #3
 8006008:	e146      	b.n	8006298 <HAL_RCC_OscConfig+0x4f8>
 800600a:	bf00      	nop
 800600c:	40021000 	.word	0x40021000
 8006010:	42420000 	.word	0x42420000
 8006014:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006018:	4b92      	ldr	r3, [pc, #584]	@ (8006264 <HAL_RCC_OscConfig+0x4c4>)
 800601a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800601c:	f003 0302 	and.w	r3, r3, #2
 8006020:	2b00      	cmp	r3, #0
 8006022:	d1e9      	bne.n	8005ff8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f003 0304 	and.w	r3, r3, #4
 800602c:	2b00      	cmp	r3, #0
 800602e:	f000 80a6 	beq.w	800617e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006032:	2300      	movs	r3, #0
 8006034:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006036:	4b8b      	ldr	r3, [pc, #556]	@ (8006264 <HAL_RCC_OscConfig+0x4c4>)
 8006038:	69db      	ldr	r3, [r3, #28]
 800603a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800603e:	2b00      	cmp	r3, #0
 8006040:	d10d      	bne.n	800605e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006042:	4b88      	ldr	r3, [pc, #544]	@ (8006264 <HAL_RCC_OscConfig+0x4c4>)
 8006044:	69db      	ldr	r3, [r3, #28]
 8006046:	4a87      	ldr	r2, [pc, #540]	@ (8006264 <HAL_RCC_OscConfig+0x4c4>)
 8006048:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800604c:	61d3      	str	r3, [r2, #28]
 800604e:	4b85      	ldr	r3, [pc, #532]	@ (8006264 <HAL_RCC_OscConfig+0x4c4>)
 8006050:	69db      	ldr	r3, [r3, #28]
 8006052:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006056:	60bb      	str	r3, [r7, #8]
 8006058:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800605a:	2301      	movs	r3, #1
 800605c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800605e:	4b82      	ldr	r3, [pc, #520]	@ (8006268 <HAL_RCC_OscConfig+0x4c8>)
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006066:	2b00      	cmp	r3, #0
 8006068:	d118      	bne.n	800609c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800606a:	4b7f      	ldr	r3, [pc, #508]	@ (8006268 <HAL_RCC_OscConfig+0x4c8>)
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	4a7e      	ldr	r2, [pc, #504]	@ (8006268 <HAL_RCC_OscConfig+0x4c8>)
 8006070:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006074:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006076:	f7fb ff0d 	bl	8001e94 <HAL_GetTick>
 800607a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800607c:	e008      	b.n	8006090 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800607e:	f7fb ff09 	bl	8001e94 <HAL_GetTick>
 8006082:	4602      	mov	r2, r0
 8006084:	693b      	ldr	r3, [r7, #16]
 8006086:	1ad3      	subs	r3, r2, r3
 8006088:	2b64      	cmp	r3, #100	@ 0x64
 800608a:	d901      	bls.n	8006090 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800608c:	2303      	movs	r3, #3
 800608e:	e103      	b.n	8006298 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006090:	4b75      	ldr	r3, [pc, #468]	@ (8006268 <HAL_RCC_OscConfig+0x4c8>)
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006098:	2b00      	cmp	r3, #0
 800609a:	d0f0      	beq.n	800607e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	68db      	ldr	r3, [r3, #12]
 80060a0:	2b01      	cmp	r3, #1
 80060a2:	d106      	bne.n	80060b2 <HAL_RCC_OscConfig+0x312>
 80060a4:	4b6f      	ldr	r3, [pc, #444]	@ (8006264 <HAL_RCC_OscConfig+0x4c4>)
 80060a6:	6a1b      	ldr	r3, [r3, #32]
 80060a8:	4a6e      	ldr	r2, [pc, #440]	@ (8006264 <HAL_RCC_OscConfig+0x4c4>)
 80060aa:	f043 0301 	orr.w	r3, r3, #1
 80060ae:	6213      	str	r3, [r2, #32]
 80060b0:	e02d      	b.n	800610e <HAL_RCC_OscConfig+0x36e>
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	68db      	ldr	r3, [r3, #12]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d10c      	bne.n	80060d4 <HAL_RCC_OscConfig+0x334>
 80060ba:	4b6a      	ldr	r3, [pc, #424]	@ (8006264 <HAL_RCC_OscConfig+0x4c4>)
 80060bc:	6a1b      	ldr	r3, [r3, #32]
 80060be:	4a69      	ldr	r2, [pc, #420]	@ (8006264 <HAL_RCC_OscConfig+0x4c4>)
 80060c0:	f023 0301 	bic.w	r3, r3, #1
 80060c4:	6213      	str	r3, [r2, #32]
 80060c6:	4b67      	ldr	r3, [pc, #412]	@ (8006264 <HAL_RCC_OscConfig+0x4c4>)
 80060c8:	6a1b      	ldr	r3, [r3, #32]
 80060ca:	4a66      	ldr	r2, [pc, #408]	@ (8006264 <HAL_RCC_OscConfig+0x4c4>)
 80060cc:	f023 0304 	bic.w	r3, r3, #4
 80060d0:	6213      	str	r3, [r2, #32]
 80060d2:	e01c      	b.n	800610e <HAL_RCC_OscConfig+0x36e>
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	68db      	ldr	r3, [r3, #12]
 80060d8:	2b05      	cmp	r3, #5
 80060da:	d10c      	bne.n	80060f6 <HAL_RCC_OscConfig+0x356>
 80060dc:	4b61      	ldr	r3, [pc, #388]	@ (8006264 <HAL_RCC_OscConfig+0x4c4>)
 80060de:	6a1b      	ldr	r3, [r3, #32]
 80060e0:	4a60      	ldr	r2, [pc, #384]	@ (8006264 <HAL_RCC_OscConfig+0x4c4>)
 80060e2:	f043 0304 	orr.w	r3, r3, #4
 80060e6:	6213      	str	r3, [r2, #32]
 80060e8:	4b5e      	ldr	r3, [pc, #376]	@ (8006264 <HAL_RCC_OscConfig+0x4c4>)
 80060ea:	6a1b      	ldr	r3, [r3, #32]
 80060ec:	4a5d      	ldr	r2, [pc, #372]	@ (8006264 <HAL_RCC_OscConfig+0x4c4>)
 80060ee:	f043 0301 	orr.w	r3, r3, #1
 80060f2:	6213      	str	r3, [r2, #32]
 80060f4:	e00b      	b.n	800610e <HAL_RCC_OscConfig+0x36e>
 80060f6:	4b5b      	ldr	r3, [pc, #364]	@ (8006264 <HAL_RCC_OscConfig+0x4c4>)
 80060f8:	6a1b      	ldr	r3, [r3, #32]
 80060fa:	4a5a      	ldr	r2, [pc, #360]	@ (8006264 <HAL_RCC_OscConfig+0x4c4>)
 80060fc:	f023 0301 	bic.w	r3, r3, #1
 8006100:	6213      	str	r3, [r2, #32]
 8006102:	4b58      	ldr	r3, [pc, #352]	@ (8006264 <HAL_RCC_OscConfig+0x4c4>)
 8006104:	6a1b      	ldr	r3, [r3, #32]
 8006106:	4a57      	ldr	r2, [pc, #348]	@ (8006264 <HAL_RCC_OscConfig+0x4c4>)
 8006108:	f023 0304 	bic.w	r3, r3, #4
 800610c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	68db      	ldr	r3, [r3, #12]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d015      	beq.n	8006142 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006116:	f7fb febd 	bl	8001e94 <HAL_GetTick>
 800611a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800611c:	e00a      	b.n	8006134 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800611e:	f7fb feb9 	bl	8001e94 <HAL_GetTick>
 8006122:	4602      	mov	r2, r0
 8006124:	693b      	ldr	r3, [r7, #16]
 8006126:	1ad3      	subs	r3, r2, r3
 8006128:	f241 3288 	movw	r2, #5000	@ 0x1388
 800612c:	4293      	cmp	r3, r2
 800612e:	d901      	bls.n	8006134 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8006130:	2303      	movs	r3, #3
 8006132:	e0b1      	b.n	8006298 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006134:	4b4b      	ldr	r3, [pc, #300]	@ (8006264 <HAL_RCC_OscConfig+0x4c4>)
 8006136:	6a1b      	ldr	r3, [r3, #32]
 8006138:	f003 0302 	and.w	r3, r3, #2
 800613c:	2b00      	cmp	r3, #0
 800613e:	d0ee      	beq.n	800611e <HAL_RCC_OscConfig+0x37e>
 8006140:	e014      	b.n	800616c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006142:	f7fb fea7 	bl	8001e94 <HAL_GetTick>
 8006146:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006148:	e00a      	b.n	8006160 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800614a:	f7fb fea3 	bl	8001e94 <HAL_GetTick>
 800614e:	4602      	mov	r2, r0
 8006150:	693b      	ldr	r3, [r7, #16]
 8006152:	1ad3      	subs	r3, r2, r3
 8006154:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006158:	4293      	cmp	r3, r2
 800615a:	d901      	bls.n	8006160 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800615c:	2303      	movs	r3, #3
 800615e:	e09b      	b.n	8006298 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006160:	4b40      	ldr	r3, [pc, #256]	@ (8006264 <HAL_RCC_OscConfig+0x4c4>)
 8006162:	6a1b      	ldr	r3, [r3, #32]
 8006164:	f003 0302 	and.w	r3, r3, #2
 8006168:	2b00      	cmp	r3, #0
 800616a:	d1ee      	bne.n	800614a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800616c:	7dfb      	ldrb	r3, [r7, #23]
 800616e:	2b01      	cmp	r3, #1
 8006170:	d105      	bne.n	800617e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006172:	4b3c      	ldr	r3, [pc, #240]	@ (8006264 <HAL_RCC_OscConfig+0x4c4>)
 8006174:	69db      	ldr	r3, [r3, #28]
 8006176:	4a3b      	ldr	r2, [pc, #236]	@ (8006264 <HAL_RCC_OscConfig+0x4c4>)
 8006178:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800617c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	69db      	ldr	r3, [r3, #28]
 8006182:	2b00      	cmp	r3, #0
 8006184:	f000 8087 	beq.w	8006296 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006188:	4b36      	ldr	r3, [pc, #216]	@ (8006264 <HAL_RCC_OscConfig+0x4c4>)
 800618a:	685b      	ldr	r3, [r3, #4]
 800618c:	f003 030c 	and.w	r3, r3, #12
 8006190:	2b08      	cmp	r3, #8
 8006192:	d061      	beq.n	8006258 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	69db      	ldr	r3, [r3, #28]
 8006198:	2b02      	cmp	r3, #2
 800619a:	d146      	bne.n	800622a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800619c:	4b33      	ldr	r3, [pc, #204]	@ (800626c <HAL_RCC_OscConfig+0x4cc>)
 800619e:	2200      	movs	r2, #0
 80061a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061a2:	f7fb fe77 	bl	8001e94 <HAL_GetTick>
 80061a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80061a8:	e008      	b.n	80061bc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80061aa:	f7fb fe73 	bl	8001e94 <HAL_GetTick>
 80061ae:	4602      	mov	r2, r0
 80061b0:	693b      	ldr	r3, [r7, #16]
 80061b2:	1ad3      	subs	r3, r2, r3
 80061b4:	2b02      	cmp	r3, #2
 80061b6:	d901      	bls.n	80061bc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80061b8:	2303      	movs	r3, #3
 80061ba:	e06d      	b.n	8006298 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80061bc:	4b29      	ldr	r3, [pc, #164]	@ (8006264 <HAL_RCC_OscConfig+0x4c4>)
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d1f0      	bne.n	80061aa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6a1b      	ldr	r3, [r3, #32]
 80061cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80061d0:	d108      	bne.n	80061e4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80061d2:	4b24      	ldr	r3, [pc, #144]	@ (8006264 <HAL_RCC_OscConfig+0x4c4>)
 80061d4:	685b      	ldr	r3, [r3, #4]
 80061d6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	689b      	ldr	r3, [r3, #8]
 80061de:	4921      	ldr	r1, [pc, #132]	@ (8006264 <HAL_RCC_OscConfig+0x4c4>)
 80061e0:	4313      	orrs	r3, r2
 80061e2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80061e4:	4b1f      	ldr	r3, [pc, #124]	@ (8006264 <HAL_RCC_OscConfig+0x4c4>)
 80061e6:	685b      	ldr	r3, [r3, #4]
 80061e8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6a19      	ldr	r1, [r3, #32]
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061f4:	430b      	orrs	r3, r1
 80061f6:	491b      	ldr	r1, [pc, #108]	@ (8006264 <HAL_RCC_OscConfig+0x4c4>)
 80061f8:	4313      	orrs	r3, r2
 80061fa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80061fc:	4b1b      	ldr	r3, [pc, #108]	@ (800626c <HAL_RCC_OscConfig+0x4cc>)
 80061fe:	2201      	movs	r2, #1
 8006200:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006202:	f7fb fe47 	bl	8001e94 <HAL_GetTick>
 8006206:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006208:	e008      	b.n	800621c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800620a:	f7fb fe43 	bl	8001e94 <HAL_GetTick>
 800620e:	4602      	mov	r2, r0
 8006210:	693b      	ldr	r3, [r7, #16]
 8006212:	1ad3      	subs	r3, r2, r3
 8006214:	2b02      	cmp	r3, #2
 8006216:	d901      	bls.n	800621c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8006218:	2303      	movs	r3, #3
 800621a:	e03d      	b.n	8006298 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800621c:	4b11      	ldr	r3, [pc, #68]	@ (8006264 <HAL_RCC_OscConfig+0x4c4>)
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006224:	2b00      	cmp	r3, #0
 8006226:	d0f0      	beq.n	800620a <HAL_RCC_OscConfig+0x46a>
 8006228:	e035      	b.n	8006296 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800622a:	4b10      	ldr	r3, [pc, #64]	@ (800626c <HAL_RCC_OscConfig+0x4cc>)
 800622c:	2200      	movs	r2, #0
 800622e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006230:	f7fb fe30 	bl	8001e94 <HAL_GetTick>
 8006234:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006236:	e008      	b.n	800624a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006238:	f7fb fe2c 	bl	8001e94 <HAL_GetTick>
 800623c:	4602      	mov	r2, r0
 800623e:	693b      	ldr	r3, [r7, #16]
 8006240:	1ad3      	subs	r3, r2, r3
 8006242:	2b02      	cmp	r3, #2
 8006244:	d901      	bls.n	800624a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8006246:	2303      	movs	r3, #3
 8006248:	e026      	b.n	8006298 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800624a:	4b06      	ldr	r3, [pc, #24]	@ (8006264 <HAL_RCC_OscConfig+0x4c4>)
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006252:	2b00      	cmp	r3, #0
 8006254:	d1f0      	bne.n	8006238 <HAL_RCC_OscConfig+0x498>
 8006256:	e01e      	b.n	8006296 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	69db      	ldr	r3, [r3, #28]
 800625c:	2b01      	cmp	r3, #1
 800625e:	d107      	bne.n	8006270 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8006260:	2301      	movs	r3, #1
 8006262:	e019      	b.n	8006298 <HAL_RCC_OscConfig+0x4f8>
 8006264:	40021000 	.word	0x40021000
 8006268:	40007000 	.word	0x40007000
 800626c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006270:	4b0b      	ldr	r3, [pc, #44]	@ (80062a0 <HAL_RCC_OscConfig+0x500>)
 8006272:	685b      	ldr	r3, [r3, #4]
 8006274:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	6a1b      	ldr	r3, [r3, #32]
 8006280:	429a      	cmp	r2, r3
 8006282:	d106      	bne.n	8006292 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800628e:	429a      	cmp	r2, r3
 8006290:	d001      	beq.n	8006296 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8006292:	2301      	movs	r3, #1
 8006294:	e000      	b.n	8006298 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8006296:	2300      	movs	r3, #0
}
 8006298:	4618      	mov	r0, r3
 800629a:	3718      	adds	r7, #24
 800629c:	46bd      	mov	sp, r7
 800629e:	bd80      	pop	{r7, pc}
 80062a0:	40021000 	.word	0x40021000

080062a4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b084      	sub	sp, #16
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
 80062ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d101      	bne.n	80062b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80062b4:	2301      	movs	r3, #1
 80062b6:	e0d0      	b.n	800645a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80062b8:	4b6a      	ldr	r3, [pc, #424]	@ (8006464 <HAL_RCC_ClockConfig+0x1c0>)
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f003 0307 	and.w	r3, r3, #7
 80062c0:	683a      	ldr	r2, [r7, #0]
 80062c2:	429a      	cmp	r2, r3
 80062c4:	d910      	bls.n	80062e8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80062c6:	4b67      	ldr	r3, [pc, #412]	@ (8006464 <HAL_RCC_ClockConfig+0x1c0>)
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f023 0207 	bic.w	r2, r3, #7
 80062ce:	4965      	ldr	r1, [pc, #404]	@ (8006464 <HAL_RCC_ClockConfig+0x1c0>)
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	4313      	orrs	r3, r2
 80062d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80062d6:	4b63      	ldr	r3, [pc, #396]	@ (8006464 <HAL_RCC_ClockConfig+0x1c0>)
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f003 0307 	and.w	r3, r3, #7
 80062de:	683a      	ldr	r2, [r7, #0]
 80062e0:	429a      	cmp	r2, r3
 80062e2:	d001      	beq.n	80062e8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80062e4:	2301      	movs	r3, #1
 80062e6:	e0b8      	b.n	800645a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f003 0302 	and.w	r3, r3, #2
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d020      	beq.n	8006336 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f003 0304 	and.w	r3, r3, #4
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d005      	beq.n	800630c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006300:	4b59      	ldr	r3, [pc, #356]	@ (8006468 <HAL_RCC_ClockConfig+0x1c4>)
 8006302:	685b      	ldr	r3, [r3, #4]
 8006304:	4a58      	ldr	r2, [pc, #352]	@ (8006468 <HAL_RCC_ClockConfig+0x1c4>)
 8006306:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800630a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f003 0308 	and.w	r3, r3, #8
 8006314:	2b00      	cmp	r3, #0
 8006316:	d005      	beq.n	8006324 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006318:	4b53      	ldr	r3, [pc, #332]	@ (8006468 <HAL_RCC_ClockConfig+0x1c4>)
 800631a:	685b      	ldr	r3, [r3, #4]
 800631c:	4a52      	ldr	r2, [pc, #328]	@ (8006468 <HAL_RCC_ClockConfig+0x1c4>)
 800631e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8006322:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006324:	4b50      	ldr	r3, [pc, #320]	@ (8006468 <HAL_RCC_ClockConfig+0x1c4>)
 8006326:	685b      	ldr	r3, [r3, #4]
 8006328:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	689b      	ldr	r3, [r3, #8]
 8006330:	494d      	ldr	r1, [pc, #308]	@ (8006468 <HAL_RCC_ClockConfig+0x1c4>)
 8006332:	4313      	orrs	r3, r2
 8006334:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f003 0301 	and.w	r3, r3, #1
 800633e:	2b00      	cmp	r3, #0
 8006340:	d040      	beq.n	80063c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	685b      	ldr	r3, [r3, #4]
 8006346:	2b01      	cmp	r3, #1
 8006348:	d107      	bne.n	800635a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800634a:	4b47      	ldr	r3, [pc, #284]	@ (8006468 <HAL_RCC_ClockConfig+0x1c4>)
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006352:	2b00      	cmp	r3, #0
 8006354:	d115      	bne.n	8006382 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006356:	2301      	movs	r3, #1
 8006358:	e07f      	b.n	800645a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	685b      	ldr	r3, [r3, #4]
 800635e:	2b02      	cmp	r3, #2
 8006360:	d107      	bne.n	8006372 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006362:	4b41      	ldr	r3, [pc, #260]	@ (8006468 <HAL_RCC_ClockConfig+0x1c4>)
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800636a:	2b00      	cmp	r3, #0
 800636c:	d109      	bne.n	8006382 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800636e:	2301      	movs	r3, #1
 8006370:	e073      	b.n	800645a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006372:	4b3d      	ldr	r3, [pc, #244]	@ (8006468 <HAL_RCC_ClockConfig+0x1c4>)
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f003 0302 	and.w	r3, r3, #2
 800637a:	2b00      	cmp	r3, #0
 800637c:	d101      	bne.n	8006382 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800637e:	2301      	movs	r3, #1
 8006380:	e06b      	b.n	800645a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006382:	4b39      	ldr	r3, [pc, #228]	@ (8006468 <HAL_RCC_ClockConfig+0x1c4>)
 8006384:	685b      	ldr	r3, [r3, #4]
 8006386:	f023 0203 	bic.w	r2, r3, #3
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	685b      	ldr	r3, [r3, #4]
 800638e:	4936      	ldr	r1, [pc, #216]	@ (8006468 <HAL_RCC_ClockConfig+0x1c4>)
 8006390:	4313      	orrs	r3, r2
 8006392:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006394:	f7fb fd7e 	bl	8001e94 <HAL_GetTick>
 8006398:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800639a:	e00a      	b.n	80063b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800639c:	f7fb fd7a 	bl	8001e94 <HAL_GetTick>
 80063a0:	4602      	mov	r2, r0
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	1ad3      	subs	r3, r2, r3
 80063a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80063aa:	4293      	cmp	r3, r2
 80063ac:	d901      	bls.n	80063b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80063ae:	2303      	movs	r3, #3
 80063b0:	e053      	b.n	800645a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80063b2:	4b2d      	ldr	r3, [pc, #180]	@ (8006468 <HAL_RCC_ClockConfig+0x1c4>)
 80063b4:	685b      	ldr	r3, [r3, #4]
 80063b6:	f003 020c 	and.w	r2, r3, #12
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	685b      	ldr	r3, [r3, #4]
 80063be:	009b      	lsls	r3, r3, #2
 80063c0:	429a      	cmp	r2, r3
 80063c2:	d1eb      	bne.n	800639c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80063c4:	4b27      	ldr	r3, [pc, #156]	@ (8006464 <HAL_RCC_ClockConfig+0x1c0>)
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f003 0307 	and.w	r3, r3, #7
 80063cc:	683a      	ldr	r2, [r7, #0]
 80063ce:	429a      	cmp	r2, r3
 80063d0:	d210      	bcs.n	80063f4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80063d2:	4b24      	ldr	r3, [pc, #144]	@ (8006464 <HAL_RCC_ClockConfig+0x1c0>)
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f023 0207 	bic.w	r2, r3, #7
 80063da:	4922      	ldr	r1, [pc, #136]	@ (8006464 <HAL_RCC_ClockConfig+0x1c0>)
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	4313      	orrs	r3, r2
 80063e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80063e2:	4b20      	ldr	r3, [pc, #128]	@ (8006464 <HAL_RCC_ClockConfig+0x1c0>)
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f003 0307 	and.w	r3, r3, #7
 80063ea:	683a      	ldr	r2, [r7, #0]
 80063ec:	429a      	cmp	r2, r3
 80063ee:	d001      	beq.n	80063f4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80063f0:	2301      	movs	r3, #1
 80063f2:	e032      	b.n	800645a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f003 0304 	and.w	r3, r3, #4
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d008      	beq.n	8006412 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006400:	4b19      	ldr	r3, [pc, #100]	@ (8006468 <HAL_RCC_ClockConfig+0x1c4>)
 8006402:	685b      	ldr	r3, [r3, #4]
 8006404:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	68db      	ldr	r3, [r3, #12]
 800640c:	4916      	ldr	r1, [pc, #88]	@ (8006468 <HAL_RCC_ClockConfig+0x1c4>)
 800640e:	4313      	orrs	r3, r2
 8006410:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f003 0308 	and.w	r3, r3, #8
 800641a:	2b00      	cmp	r3, #0
 800641c:	d009      	beq.n	8006432 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800641e:	4b12      	ldr	r3, [pc, #72]	@ (8006468 <HAL_RCC_ClockConfig+0x1c4>)
 8006420:	685b      	ldr	r3, [r3, #4]
 8006422:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	691b      	ldr	r3, [r3, #16]
 800642a:	00db      	lsls	r3, r3, #3
 800642c:	490e      	ldr	r1, [pc, #56]	@ (8006468 <HAL_RCC_ClockConfig+0x1c4>)
 800642e:	4313      	orrs	r3, r2
 8006430:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006432:	f000 f821 	bl	8006478 <HAL_RCC_GetSysClockFreq>
 8006436:	4602      	mov	r2, r0
 8006438:	4b0b      	ldr	r3, [pc, #44]	@ (8006468 <HAL_RCC_ClockConfig+0x1c4>)
 800643a:	685b      	ldr	r3, [r3, #4]
 800643c:	091b      	lsrs	r3, r3, #4
 800643e:	f003 030f 	and.w	r3, r3, #15
 8006442:	490a      	ldr	r1, [pc, #40]	@ (800646c <HAL_RCC_ClockConfig+0x1c8>)
 8006444:	5ccb      	ldrb	r3, [r1, r3]
 8006446:	fa22 f303 	lsr.w	r3, r2, r3
 800644a:	4a09      	ldr	r2, [pc, #36]	@ (8006470 <HAL_RCC_ClockConfig+0x1cc>)
 800644c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800644e:	4b09      	ldr	r3, [pc, #36]	@ (8006474 <HAL_RCC_ClockConfig+0x1d0>)
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	4618      	mov	r0, r3
 8006454:	f7fb fcdc 	bl	8001e10 <HAL_InitTick>

  return HAL_OK;
 8006458:	2300      	movs	r3, #0
}
 800645a:	4618      	mov	r0, r3
 800645c:	3710      	adds	r7, #16
 800645e:	46bd      	mov	sp, r7
 8006460:	bd80      	pop	{r7, pc}
 8006462:	bf00      	nop
 8006464:	40022000 	.word	0x40022000
 8006468:	40021000 	.word	0x40021000
 800646c:	0800bd30 	.word	0x0800bd30
 8006470:	2000001c 	.word	0x2000001c
 8006474:	20000020 	.word	0x20000020

08006478 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006478:	b480      	push	{r7}
 800647a:	b087      	sub	sp, #28
 800647c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800647e:	2300      	movs	r3, #0
 8006480:	60fb      	str	r3, [r7, #12]
 8006482:	2300      	movs	r3, #0
 8006484:	60bb      	str	r3, [r7, #8]
 8006486:	2300      	movs	r3, #0
 8006488:	617b      	str	r3, [r7, #20]
 800648a:	2300      	movs	r3, #0
 800648c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800648e:	2300      	movs	r3, #0
 8006490:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8006492:	4b1e      	ldr	r3, [pc, #120]	@ (800650c <HAL_RCC_GetSysClockFreq+0x94>)
 8006494:	685b      	ldr	r3, [r3, #4]
 8006496:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	f003 030c 	and.w	r3, r3, #12
 800649e:	2b04      	cmp	r3, #4
 80064a0:	d002      	beq.n	80064a8 <HAL_RCC_GetSysClockFreq+0x30>
 80064a2:	2b08      	cmp	r3, #8
 80064a4:	d003      	beq.n	80064ae <HAL_RCC_GetSysClockFreq+0x36>
 80064a6:	e027      	b.n	80064f8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80064a8:	4b19      	ldr	r3, [pc, #100]	@ (8006510 <HAL_RCC_GetSysClockFreq+0x98>)
 80064aa:	613b      	str	r3, [r7, #16]
      break;
 80064ac:	e027      	b.n	80064fe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	0c9b      	lsrs	r3, r3, #18
 80064b2:	f003 030f 	and.w	r3, r3, #15
 80064b6:	4a17      	ldr	r2, [pc, #92]	@ (8006514 <HAL_RCC_GetSysClockFreq+0x9c>)
 80064b8:	5cd3      	ldrb	r3, [r2, r3]
 80064ba:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d010      	beq.n	80064e8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80064c6:	4b11      	ldr	r3, [pc, #68]	@ (800650c <HAL_RCC_GetSysClockFreq+0x94>)
 80064c8:	685b      	ldr	r3, [r3, #4]
 80064ca:	0c5b      	lsrs	r3, r3, #17
 80064cc:	f003 0301 	and.w	r3, r3, #1
 80064d0:	4a11      	ldr	r2, [pc, #68]	@ (8006518 <HAL_RCC_GetSysClockFreq+0xa0>)
 80064d2:	5cd3      	ldrb	r3, [r2, r3]
 80064d4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	4a0d      	ldr	r2, [pc, #52]	@ (8006510 <HAL_RCC_GetSysClockFreq+0x98>)
 80064da:	fb03 f202 	mul.w	r2, r3, r2
 80064de:	68bb      	ldr	r3, [r7, #8]
 80064e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80064e4:	617b      	str	r3, [r7, #20]
 80064e6:	e004      	b.n	80064f2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	4a0c      	ldr	r2, [pc, #48]	@ (800651c <HAL_RCC_GetSysClockFreq+0xa4>)
 80064ec:	fb02 f303 	mul.w	r3, r2, r3
 80064f0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80064f2:	697b      	ldr	r3, [r7, #20]
 80064f4:	613b      	str	r3, [r7, #16]
      break;
 80064f6:	e002      	b.n	80064fe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80064f8:	4b05      	ldr	r3, [pc, #20]	@ (8006510 <HAL_RCC_GetSysClockFreq+0x98>)
 80064fa:	613b      	str	r3, [r7, #16]
      break;
 80064fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80064fe:	693b      	ldr	r3, [r7, #16]
}
 8006500:	4618      	mov	r0, r3
 8006502:	371c      	adds	r7, #28
 8006504:	46bd      	mov	sp, r7
 8006506:	bc80      	pop	{r7}
 8006508:	4770      	bx	lr
 800650a:	bf00      	nop
 800650c:	40021000 	.word	0x40021000
 8006510:	007a1200 	.word	0x007a1200
 8006514:	0800bd48 	.word	0x0800bd48
 8006518:	0800bd58 	.word	0x0800bd58
 800651c:	003d0900 	.word	0x003d0900

08006520 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006520:	b480      	push	{r7}
 8006522:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006524:	4b02      	ldr	r3, [pc, #8]	@ (8006530 <HAL_RCC_GetHCLKFreq+0x10>)
 8006526:	681b      	ldr	r3, [r3, #0]
}
 8006528:	4618      	mov	r0, r3
 800652a:	46bd      	mov	sp, r7
 800652c:	bc80      	pop	{r7}
 800652e:	4770      	bx	lr
 8006530:	2000001c 	.word	0x2000001c

08006534 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006534:	b580      	push	{r7, lr}
 8006536:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006538:	f7ff fff2 	bl	8006520 <HAL_RCC_GetHCLKFreq>
 800653c:	4602      	mov	r2, r0
 800653e:	4b05      	ldr	r3, [pc, #20]	@ (8006554 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006540:	685b      	ldr	r3, [r3, #4]
 8006542:	0a1b      	lsrs	r3, r3, #8
 8006544:	f003 0307 	and.w	r3, r3, #7
 8006548:	4903      	ldr	r1, [pc, #12]	@ (8006558 <HAL_RCC_GetPCLK1Freq+0x24>)
 800654a:	5ccb      	ldrb	r3, [r1, r3]
 800654c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006550:	4618      	mov	r0, r3
 8006552:	bd80      	pop	{r7, pc}
 8006554:	40021000 	.word	0x40021000
 8006558:	0800bd40 	.word	0x0800bd40

0800655c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800655c:	b580      	push	{r7, lr}
 800655e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006560:	f7ff ffde 	bl	8006520 <HAL_RCC_GetHCLKFreq>
 8006564:	4602      	mov	r2, r0
 8006566:	4b05      	ldr	r3, [pc, #20]	@ (800657c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006568:	685b      	ldr	r3, [r3, #4]
 800656a:	0adb      	lsrs	r3, r3, #11
 800656c:	f003 0307 	and.w	r3, r3, #7
 8006570:	4903      	ldr	r1, [pc, #12]	@ (8006580 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006572:	5ccb      	ldrb	r3, [r1, r3]
 8006574:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006578:	4618      	mov	r0, r3
 800657a:	bd80      	pop	{r7, pc}
 800657c:	40021000 	.word	0x40021000
 8006580:	0800bd40 	.word	0x0800bd40

08006584 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006584:	b480      	push	{r7}
 8006586:	b085      	sub	sp, #20
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800658c:	4b0a      	ldr	r3, [pc, #40]	@ (80065b8 <RCC_Delay+0x34>)
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	4a0a      	ldr	r2, [pc, #40]	@ (80065bc <RCC_Delay+0x38>)
 8006592:	fba2 2303 	umull	r2, r3, r2, r3
 8006596:	0a5b      	lsrs	r3, r3, #9
 8006598:	687a      	ldr	r2, [r7, #4]
 800659a:	fb02 f303 	mul.w	r3, r2, r3
 800659e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80065a0:	bf00      	nop
  }
  while (Delay --);
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	1e5a      	subs	r2, r3, #1
 80065a6:	60fa      	str	r2, [r7, #12]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d1f9      	bne.n	80065a0 <RCC_Delay+0x1c>
}
 80065ac:	bf00      	nop
 80065ae:	bf00      	nop
 80065b0:	3714      	adds	r7, #20
 80065b2:	46bd      	mov	sp, r7
 80065b4:	bc80      	pop	{r7}
 80065b6:	4770      	bx	lr
 80065b8:	2000001c 	.word	0x2000001c
 80065bc:	10624dd3 	.word	0x10624dd3

080065c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b086      	sub	sp, #24
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80065c8:	2300      	movs	r3, #0
 80065ca:	613b      	str	r3, [r7, #16]
 80065cc:	2300      	movs	r3, #0
 80065ce:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f003 0301 	and.w	r3, r3, #1
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d07d      	beq.n	80066d8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80065dc:	2300      	movs	r3, #0
 80065de:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80065e0:	4b4f      	ldr	r3, [pc, #316]	@ (8006720 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80065e2:	69db      	ldr	r3, [r3, #28]
 80065e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d10d      	bne.n	8006608 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80065ec:	4b4c      	ldr	r3, [pc, #304]	@ (8006720 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80065ee:	69db      	ldr	r3, [r3, #28]
 80065f0:	4a4b      	ldr	r2, [pc, #300]	@ (8006720 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80065f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80065f6:	61d3      	str	r3, [r2, #28]
 80065f8:	4b49      	ldr	r3, [pc, #292]	@ (8006720 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80065fa:	69db      	ldr	r3, [r3, #28]
 80065fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006600:	60bb      	str	r3, [r7, #8]
 8006602:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006604:	2301      	movs	r3, #1
 8006606:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006608:	4b46      	ldr	r3, [pc, #280]	@ (8006724 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006610:	2b00      	cmp	r3, #0
 8006612:	d118      	bne.n	8006646 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006614:	4b43      	ldr	r3, [pc, #268]	@ (8006724 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	4a42      	ldr	r2, [pc, #264]	@ (8006724 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800661a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800661e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006620:	f7fb fc38 	bl	8001e94 <HAL_GetTick>
 8006624:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006626:	e008      	b.n	800663a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006628:	f7fb fc34 	bl	8001e94 <HAL_GetTick>
 800662c:	4602      	mov	r2, r0
 800662e:	693b      	ldr	r3, [r7, #16]
 8006630:	1ad3      	subs	r3, r2, r3
 8006632:	2b64      	cmp	r3, #100	@ 0x64
 8006634:	d901      	bls.n	800663a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8006636:	2303      	movs	r3, #3
 8006638:	e06d      	b.n	8006716 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800663a:	4b3a      	ldr	r3, [pc, #232]	@ (8006724 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006642:	2b00      	cmp	r3, #0
 8006644:	d0f0      	beq.n	8006628 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006646:	4b36      	ldr	r3, [pc, #216]	@ (8006720 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006648:	6a1b      	ldr	r3, [r3, #32]
 800664a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800664e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d02e      	beq.n	80066b4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	685b      	ldr	r3, [r3, #4]
 800665a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800665e:	68fa      	ldr	r2, [r7, #12]
 8006660:	429a      	cmp	r2, r3
 8006662:	d027      	beq.n	80066b4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006664:	4b2e      	ldr	r3, [pc, #184]	@ (8006720 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006666:	6a1b      	ldr	r3, [r3, #32]
 8006668:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800666c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800666e:	4b2e      	ldr	r3, [pc, #184]	@ (8006728 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006670:	2201      	movs	r2, #1
 8006672:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006674:	4b2c      	ldr	r3, [pc, #176]	@ (8006728 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006676:	2200      	movs	r2, #0
 8006678:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800667a:	4a29      	ldr	r2, [pc, #164]	@ (8006720 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	f003 0301 	and.w	r3, r3, #1
 8006686:	2b00      	cmp	r3, #0
 8006688:	d014      	beq.n	80066b4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800668a:	f7fb fc03 	bl	8001e94 <HAL_GetTick>
 800668e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006690:	e00a      	b.n	80066a8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006692:	f7fb fbff 	bl	8001e94 <HAL_GetTick>
 8006696:	4602      	mov	r2, r0
 8006698:	693b      	ldr	r3, [r7, #16]
 800669a:	1ad3      	subs	r3, r2, r3
 800669c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80066a0:	4293      	cmp	r3, r2
 80066a2:	d901      	bls.n	80066a8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80066a4:	2303      	movs	r3, #3
 80066a6:	e036      	b.n	8006716 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80066a8:	4b1d      	ldr	r3, [pc, #116]	@ (8006720 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80066aa:	6a1b      	ldr	r3, [r3, #32]
 80066ac:	f003 0302 	and.w	r3, r3, #2
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d0ee      	beq.n	8006692 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80066b4:	4b1a      	ldr	r3, [pc, #104]	@ (8006720 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80066b6:	6a1b      	ldr	r3, [r3, #32]
 80066b8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	685b      	ldr	r3, [r3, #4]
 80066c0:	4917      	ldr	r1, [pc, #92]	@ (8006720 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80066c2:	4313      	orrs	r3, r2
 80066c4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80066c6:	7dfb      	ldrb	r3, [r7, #23]
 80066c8:	2b01      	cmp	r3, #1
 80066ca:	d105      	bne.n	80066d8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80066cc:	4b14      	ldr	r3, [pc, #80]	@ (8006720 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80066ce:	69db      	ldr	r3, [r3, #28]
 80066d0:	4a13      	ldr	r2, [pc, #76]	@ (8006720 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80066d2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80066d6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f003 0302 	and.w	r3, r3, #2
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d008      	beq.n	80066f6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80066e4:	4b0e      	ldr	r3, [pc, #56]	@ (8006720 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80066e6:	685b      	ldr	r3, [r3, #4]
 80066e8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	689b      	ldr	r3, [r3, #8]
 80066f0:	490b      	ldr	r1, [pc, #44]	@ (8006720 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80066f2:	4313      	orrs	r3, r2
 80066f4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f003 0310 	and.w	r3, r3, #16
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d008      	beq.n	8006714 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006702:	4b07      	ldr	r3, [pc, #28]	@ (8006720 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006704:	685b      	ldr	r3, [r3, #4]
 8006706:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	68db      	ldr	r3, [r3, #12]
 800670e:	4904      	ldr	r1, [pc, #16]	@ (8006720 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006710:	4313      	orrs	r3, r2
 8006712:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8006714:	2300      	movs	r3, #0
}
 8006716:	4618      	mov	r0, r3
 8006718:	3718      	adds	r7, #24
 800671a:	46bd      	mov	sp, r7
 800671c:	bd80      	pop	{r7, pc}
 800671e:	bf00      	nop
 8006720:	40021000 	.word	0x40021000
 8006724:	40007000 	.word	0x40007000
 8006728:	42420440 	.word	0x42420440

0800672c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800672c:	b580      	push	{r7, lr}
 800672e:	b088      	sub	sp, #32
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8006734:	2300      	movs	r3, #0
 8006736:	617b      	str	r3, [r7, #20]
 8006738:	2300      	movs	r3, #0
 800673a:	61fb      	str	r3, [r7, #28]
 800673c:	2300      	movs	r3, #0
 800673e:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8006740:	2300      	movs	r3, #0
 8006742:	60fb      	str	r3, [r7, #12]
 8006744:	2300      	movs	r3, #0
 8006746:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2b10      	cmp	r3, #16
 800674c:	d00a      	beq.n	8006764 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2b10      	cmp	r3, #16
 8006752:	f200 808a 	bhi.w	800686a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	2b01      	cmp	r3, #1
 800675a:	d045      	beq.n	80067e8 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2b02      	cmp	r3, #2
 8006760:	d075      	beq.n	800684e <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8006762:	e082      	b.n	800686a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8006764:	4b46      	ldr	r3, [pc, #280]	@ (8006880 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8006766:	685b      	ldr	r3, [r3, #4]
 8006768:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800676a:	4b45      	ldr	r3, [pc, #276]	@ (8006880 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006772:	2b00      	cmp	r3, #0
 8006774:	d07b      	beq.n	800686e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	0c9b      	lsrs	r3, r3, #18
 800677a:	f003 030f 	and.w	r3, r3, #15
 800677e:	4a41      	ldr	r2, [pc, #260]	@ (8006884 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8006780:	5cd3      	ldrb	r3, [r2, r3]
 8006782:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800678a:	2b00      	cmp	r3, #0
 800678c:	d015      	beq.n	80067ba <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800678e:	4b3c      	ldr	r3, [pc, #240]	@ (8006880 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8006790:	685b      	ldr	r3, [r3, #4]
 8006792:	0c5b      	lsrs	r3, r3, #17
 8006794:	f003 0301 	and.w	r3, r3, #1
 8006798:	4a3b      	ldr	r2, [pc, #236]	@ (8006888 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 800679a:	5cd3      	ldrb	r3, [r2, r3]
 800679c:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d00d      	beq.n	80067c4 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80067a8:	4a38      	ldr	r2, [pc, #224]	@ (800688c <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80067aa:	697b      	ldr	r3, [r7, #20]
 80067ac:	fbb2 f2f3 	udiv	r2, r2, r3
 80067b0:	693b      	ldr	r3, [r7, #16]
 80067b2:	fb02 f303 	mul.w	r3, r2, r3
 80067b6:	61fb      	str	r3, [r7, #28]
 80067b8:	e004      	b.n	80067c4 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80067ba:	693b      	ldr	r3, [r7, #16]
 80067bc:	4a34      	ldr	r2, [pc, #208]	@ (8006890 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80067be:	fb02 f303 	mul.w	r3, r2, r3
 80067c2:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80067c4:	4b2e      	ldr	r3, [pc, #184]	@ (8006880 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80067c6:	685b      	ldr	r3, [r3, #4]
 80067c8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80067cc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80067d0:	d102      	bne.n	80067d8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 80067d2:	69fb      	ldr	r3, [r7, #28]
 80067d4:	61bb      	str	r3, [r7, #24]
      break;
 80067d6:	e04a      	b.n	800686e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 80067d8:	69fb      	ldr	r3, [r7, #28]
 80067da:	005b      	lsls	r3, r3, #1
 80067dc:	4a2d      	ldr	r2, [pc, #180]	@ (8006894 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80067de:	fba2 2303 	umull	r2, r3, r2, r3
 80067e2:	085b      	lsrs	r3, r3, #1
 80067e4:	61bb      	str	r3, [r7, #24]
      break;
 80067e6:	e042      	b.n	800686e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 80067e8:	4b25      	ldr	r3, [pc, #148]	@ (8006880 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80067ea:	6a1b      	ldr	r3, [r3, #32]
 80067ec:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80067f4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80067f8:	d108      	bne.n	800680c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	f003 0302 	and.w	r3, r3, #2
 8006800:	2b00      	cmp	r3, #0
 8006802:	d003      	beq.n	800680c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8006804:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006808:	61bb      	str	r3, [r7, #24]
 800680a:	e01f      	b.n	800684c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006812:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006816:	d109      	bne.n	800682c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8006818:	4b19      	ldr	r3, [pc, #100]	@ (8006880 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800681a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800681c:	f003 0302 	and.w	r3, r3, #2
 8006820:	2b00      	cmp	r3, #0
 8006822:	d003      	beq.n	800682c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8006824:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8006828:	61bb      	str	r3, [r7, #24]
 800682a:	e00f      	b.n	800684c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006832:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006836:	d11c      	bne.n	8006872 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8006838:	4b11      	ldr	r3, [pc, #68]	@ (8006880 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006840:	2b00      	cmp	r3, #0
 8006842:	d016      	beq.n	8006872 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8006844:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8006848:	61bb      	str	r3, [r7, #24]
      break;
 800684a:	e012      	b.n	8006872 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 800684c:	e011      	b.n	8006872 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800684e:	f7ff fe85 	bl	800655c <HAL_RCC_GetPCLK2Freq>
 8006852:	4602      	mov	r2, r0
 8006854:	4b0a      	ldr	r3, [pc, #40]	@ (8006880 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8006856:	685b      	ldr	r3, [r3, #4]
 8006858:	0b9b      	lsrs	r3, r3, #14
 800685a:	f003 0303 	and.w	r3, r3, #3
 800685e:	3301      	adds	r3, #1
 8006860:	005b      	lsls	r3, r3, #1
 8006862:	fbb2 f3f3 	udiv	r3, r2, r3
 8006866:	61bb      	str	r3, [r7, #24]
      break;
 8006868:	e004      	b.n	8006874 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800686a:	bf00      	nop
 800686c:	e002      	b.n	8006874 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800686e:	bf00      	nop
 8006870:	e000      	b.n	8006874 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8006872:	bf00      	nop
    }
  }
  return (frequency);
 8006874:	69bb      	ldr	r3, [r7, #24]
}
 8006876:	4618      	mov	r0, r3
 8006878:	3720      	adds	r7, #32
 800687a:	46bd      	mov	sp, r7
 800687c:	bd80      	pop	{r7, pc}
 800687e:	bf00      	nop
 8006880:	40021000 	.word	0x40021000
 8006884:	0800bd5c 	.word	0x0800bd5c
 8006888:	0800bd6c 	.word	0x0800bd6c
 800688c:	007a1200 	.word	0x007a1200
 8006890:	003d0900 	.word	0x003d0900
 8006894:	aaaaaaab 	.word	0xaaaaaaab

08006898 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006898:	b580      	push	{r7, lr}
 800689a:	b082      	sub	sp, #8
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d101      	bne.n	80068aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80068a6:	2301      	movs	r3, #1
 80068a8:	e042      	b.n	8006930 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80068b0:	b2db      	uxtb	r3, r3
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d106      	bne.n	80068c4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2200      	movs	r2, #0
 80068ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80068be:	6878      	ldr	r0, [r7, #4]
 80068c0:	f7fb fa20 	bl	8001d04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2224      	movs	r2, #36	@ 0x24
 80068c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	68da      	ldr	r2, [r3, #12]
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80068da:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80068dc:	6878      	ldr	r0, [r7, #4]
 80068de:	f000 f971 	bl	8006bc4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	691a      	ldr	r2, [r3, #16]
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80068f0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	695a      	ldr	r2, [r3, #20]
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006900:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	68da      	ldr	r2, [r3, #12]
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006910:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	2200      	movs	r2, #0
 8006916:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2220      	movs	r2, #32
 800691c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2220      	movs	r2, #32
 8006924:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2200      	movs	r2, #0
 800692c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800692e:	2300      	movs	r3, #0
}
 8006930:	4618      	mov	r0, r3
 8006932:	3708      	adds	r7, #8
 8006934:	46bd      	mov	sp, r7
 8006936:	bd80      	pop	{r7, pc}

08006938 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006938:	b580      	push	{r7, lr}
 800693a:	b08a      	sub	sp, #40	@ 0x28
 800693c:	af02      	add	r7, sp, #8
 800693e:	60f8      	str	r0, [r7, #12]
 8006940:	60b9      	str	r1, [r7, #8]
 8006942:	603b      	str	r3, [r7, #0]
 8006944:	4613      	mov	r3, r2
 8006946:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006948:	2300      	movs	r3, #0
 800694a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006952:	b2db      	uxtb	r3, r3
 8006954:	2b20      	cmp	r3, #32
 8006956:	d175      	bne.n	8006a44 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006958:	68bb      	ldr	r3, [r7, #8]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d002      	beq.n	8006964 <HAL_UART_Transmit+0x2c>
 800695e:	88fb      	ldrh	r3, [r7, #6]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d101      	bne.n	8006968 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006964:	2301      	movs	r3, #1
 8006966:	e06e      	b.n	8006a46 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	2200      	movs	r2, #0
 800696c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	2221      	movs	r2, #33	@ 0x21
 8006972:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006976:	f7fb fa8d 	bl	8001e94 <HAL_GetTick>
 800697a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	88fa      	ldrh	r2, [r7, #6]
 8006980:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	88fa      	ldrh	r2, [r7, #6]
 8006986:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	689b      	ldr	r3, [r3, #8]
 800698c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006990:	d108      	bne.n	80069a4 <HAL_UART_Transmit+0x6c>
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	691b      	ldr	r3, [r3, #16]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d104      	bne.n	80069a4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800699a:	2300      	movs	r3, #0
 800699c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800699e:	68bb      	ldr	r3, [r7, #8]
 80069a0:	61bb      	str	r3, [r7, #24]
 80069a2:	e003      	b.n	80069ac <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80069a4:	68bb      	ldr	r3, [r7, #8]
 80069a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80069a8:	2300      	movs	r3, #0
 80069aa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80069ac:	e02e      	b.n	8006a0c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	9300      	str	r3, [sp, #0]
 80069b2:	697b      	ldr	r3, [r7, #20]
 80069b4:	2200      	movs	r2, #0
 80069b6:	2180      	movs	r1, #128	@ 0x80
 80069b8:	68f8      	ldr	r0, [r7, #12]
 80069ba:	f000 f848 	bl	8006a4e <UART_WaitOnFlagUntilTimeout>
 80069be:	4603      	mov	r3, r0
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d005      	beq.n	80069d0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	2220      	movs	r2, #32
 80069c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80069cc:	2303      	movs	r3, #3
 80069ce:	e03a      	b.n	8006a46 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80069d0:	69fb      	ldr	r3, [r7, #28]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d10b      	bne.n	80069ee <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80069d6:	69bb      	ldr	r3, [r7, #24]
 80069d8:	881b      	ldrh	r3, [r3, #0]
 80069da:	461a      	mov	r2, r3
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80069e4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80069e6:	69bb      	ldr	r3, [r7, #24]
 80069e8:	3302      	adds	r3, #2
 80069ea:	61bb      	str	r3, [r7, #24]
 80069ec:	e007      	b.n	80069fe <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80069ee:	69fb      	ldr	r3, [r7, #28]
 80069f0:	781a      	ldrb	r2, [r3, #0]
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80069f8:	69fb      	ldr	r3, [r7, #28]
 80069fa:	3301      	adds	r3, #1
 80069fc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006a02:	b29b      	uxth	r3, r3
 8006a04:	3b01      	subs	r3, #1
 8006a06:	b29a      	uxth	r2, r3
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006a10:	b29b      	uxth	r3, r3
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d1cb      	bne.n	80069ae <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	9300      	str	r3, [sp, #0]
 8006a1a:	697b      	ldr	r3, [r7, #20]
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	2140      	movs	r1, #64	@ 0x40
 8006a20:	68f8      	ldr	r0, [r7, #12]
 8006a22:	f000 f814 	bl	8006a4e <UART_WaitOnFlagUntilTimeout>
 8006a26:	4603      	mov	r3, r0
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d005      	beq.n	8006a38 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	2220      	movs	r2, #32
 8006a30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8006a34:	2303      	movs	r3, #3
 8006a36:	e006      	b.n	8006a46 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	2220      	movs	r2, #32
 8006a3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8006a40:	2300      	movs	r3, #0
 8006a42:	e000      	b.n	8006a46 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8006a44:	2302      	movs	r3, #2
  }
}
 8006a46:	4618      	mov	r0, r3
 8006a48:	3720      	adds	r7, #32
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	bd80      	pop	{r7, pc}

08006a4e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006a4e:	b580      	push	{r7, lr}
 8006a50:	b086      	sub	sp, #24
 8006a52:	af00      	add	r7, sp, #0
 8006a54:	60f8      	str	r0, [r7, #12]
 8006a56:	60b9      	str	r1, [r7, #8]
 8006a58:	603b      	str	r3, [r7, #0]
 8006a5a:	4613      	mov	r3, r2
 8006a5c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a5e:	e03b      	b.n	8006ad8 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a60:	6a3b      	ldr	r3, [r7, #32]
 8006a62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a66:	d037      	beq.n	8006ad8 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a68:	f7fb fa14 	bl	8001e94 <HAL_GetTick>
 8006a6c:	4602      	mov	r2, r0
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	1ad3      	subs	r3, r2, r3
 8006a72:	6a3a      	ldr	r2, [r7, #32]
 8006a74:	429a      	cmp	r2, r3
 8006a76:	d302      	bcc.n	8006a7e <UART_WaitOnFlagUntilTimeout+0x30>
 8006a78:	6a3b      	ldr	r3, [r7, #32]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d101      	bne.n	8006a82 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006a7e:	2303      	movs	r3, #3
 8006a80:	e03a      	b.n	8006af8 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	68db      	ldr	r3, [r3, #12]
 8006a88:	f003 0304 	and.w	r3, r3, #4
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d023      	beq.n	8006ad8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006a90:	68bb      	ldr	r3, [r7, #8]
 8006a92:	2b80      	cmp	r3, #128	@ 0x80
 8006a94:	d020      	beq.n	8006ad8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006a96:	68bb      	ldr	r3, [r7, #8]
 8006a98:	2b40      	cmp	r3, #64	@ 0x40
 8006a9a:	d01d      	beq.n	8006ad8 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f003 0308 	and.w	r3, r3, #8
 8006aa6:	2b08      	cmp	r3, #8
 8006aa8:	d116      	bne.n	8006ad8 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006aaa:	2300      	movs	r3, #0
 8006aac:	617b      	str	r3, [r7, #20]
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	617b      	str	r3, [r7, #20]
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	685b      	ldr	r3, [r3, #4]
 8006abc:	617b      	str	r3, [r7, #20]
 8006abe:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006ac0:	68f8      	ldr	r0, [r7, #12]
 8006ac2:	f000 f81d 	bl	8006b00 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	2208      	movs	r2, #8
 8006aca:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	2200      	movs	r2, #0
 8006ad0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006ad4:	2301      	movs	r3, #1
 8006ad6:	e00f      	b.n	8006af8 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	681a      	ldr	r2, [r3, #0]
 8006ade:	68bb      	ldr	r3, [r7, #8]
 8006ae0:	4013      	ands	r3, r2
 8006ae2:	68ba      	ldr	r2, [r7, #8]
 8006ae4:	429a      	cmp	r2, r3
 8006ae6:	bf0c      	ite	eq
 8006ae8:	2301      	moveq	r3, #1
 8006aea:	2300      	movne	r3, #0
 8006aec:	b2db      	uxtb	r3, r3
 8006aee:	461a      	mov	r2, r3
 8006af0:	79fb      	ldrb	r3, [r7, #7]
 8006af2:	429a      	cmp	r2, r3
 8006af4:	d0b4      	beq.n	8006a60 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006af6:	2300      	movs	r3, #0
}
 8006af8:	4618      	mov	r0, r3
 8006afa:	3718      	adds	r7, #24
 8006afc:	46bd      	mov	sp, r7
 8006afe:	bd80      	pop	{r7, pc}

08006b00 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006b00:	b480      	push	{r7}
 8006b02:	b095      	sub	sp, #84	@ 0x54
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	330c      	adds	r3, #12
 8006b0e:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b12:	e853 3f00 	ldrex	r3, [r3]
 8006b16:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006b18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b1a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006b1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	330c      	adds	r3, #12
 8006b26:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006b28:	643a      	str	r2, [r7, #64]	@ 0x40
 8006b2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b2c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006b2e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006b30:	e841 2300 	strex	r3, r2, [r1]
 8006b34:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006b36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d1e5      	bne.n	8006b08 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	3314      	adds	r3, #20
 8006b42:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b44:	6a3b      	ldr	r3, [r7, #32]
 8006b46:	e853 3f00 	ldrex	r3, [r3]
 8006b4a:	61fb      	str	r3, [r7, #28]
   return(result);
 8006b4c:	69fb      	ldr	r3, [r7, #28]
 8006b4e:	f023 0301 	bic.w	r3, r3, #1
 8006b52:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	3314      	adds	r3, #20
 8006b5a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006b5c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006b5e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b60:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006b62:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006b64:	e841 2300 	strex	r3, r2, [r1]
 8006b68:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006b6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d1e5      	bne.n	8006b3c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b74:	2b01      	cmp	r3, #1
 8006b76:	d119      	bne.n	8006bac <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	330c      	adds	r3, #12
 8006b7e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	e853 3f00 	ldrex	r3, [r3]
 8006b86:	60bb      	str	r3, [r7, #8]
   return(result);
 8006b88:	68bb      	ldr	r3, [r7, #8]
 8006b8a:	f023 0310 	bic.w	r3, r3, #16
 8006b8e:	647b      	str	r3, [r7, #68]	@ 0x44
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	330c      	adds	r3, #12
 8006b96:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006b98:	61ba      	str	r2, [r7, #24]
 8006b9a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b9c:	6979      	ldr	r1, [r7, #20]
 8006b9e:	69ba      	ldr	r2, [r7, #24]
 8006ba0:	e841 2300 	strex	r3, r2, [r1]
 8006ba4:	613b      	str	r3, [r7, #16]
   return(result);
 8006ba6:	693b      	ldr	r3, [r7, #16]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d1e5      	bne.n	8006b78 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2220      	movs	r2, #32
 8006bb0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006bba:	bf00      	nop
 8006bbc:	3754      	adds	r7, #84	@ 0x54
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	bc80      	pop	{r7}
 8006bc2:	4770      	bx	lr

08006bc4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	b084      	sub	sp, #16
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	691b      	ldr	r3, [r3, #16]
 8006bd2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	68da      	ldr	r2, [r3, #12]
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	430a      	orrs	r2, r1
 8006be0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	689a      	ldr	r2, [r3, #8]
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	691b      	ldr	r3, [r3, #16]
 8006bea:	431a      	orrs	r2, r3
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	695b      	ldr	r3, [r3, #20]
 8006bf0:	4313      	orrs	r3, r2
 8006bf2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	68db      	ldr	r3, [r3, #12]
 8006bfa:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8006bfe:	f023 030c 	bic.w	r3, r3, #12
 8006c02:	687a      	ldr	r2, [r7, #4]
 8006c04:	6812      	ldr	r2, [r2, #0]
 8006c06:	68b9      	ldr	r1, [r7, #8]
 8006c08:	430b      	orrs	r3, r1
 8006c0a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	695b      	ldr	r3, [r3, #20]
 8006c12:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	699a      	ldr	r2, [r3, #24]
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	430a      	orrs	r2, r1
 8006c20:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	4a2c      	ldr	r2, [pc, #176]	@ (8006cd8 <UART_SetConfig+0x114>)
 8006c28:	4293      	cmp	r3, r2
 8006c2a:	d103      	bne.n	8006c34 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006c2c:	f7ff fc96 	bl	800655c <HAL_RCC_GetPCLK2Freq>
 8006c30:	60f8      	str	r0, [r7, #12]
 8006c32:	e002      	b.n	8006c3a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006c34:	f7ff fc7e 	bl	8006534 <HAL_RCC_GetPCLK1Freq>
 8006c38:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006c3a:	68fa      	ldr	r2, [r7, #12]
 8006c3c:	4613      	mov	r3, r2
 8006c3e:	009b      	lsls	r3, r3, #2
 8006c40:	4413      	add	r3, r2
 8006c42:	009a      	lsls	r2, r3, #2
 8006c44:	441a      	add	r2, r3
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	685b      	ldr	r3, [r3, #4]
 8006c4a:	009b      	lsls	r3, r3, #2
 8006c4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c50:	4a22      	ldr	r2, [pc, #136]	@ (8006cdc <UART_SetConfig+0x118>)
 8006c52:	fba2 2303 	umull	r2, r3, r2, r3
 8006c56:	095b      	lsrs	r3, r3, #5
 8006c58:	0119      	lsls	r1, r3, #4
 8006c5a:	68fa      	ldr	r2, [r7, #12]
 8006c5c:	4613      	mov	r3, r2
 8006c5e:	009b      	lsls	r3, r3, #2
 8006c60:	4413      	add	r3, r2
 8006c62:	009a      	lsls	r2, r3, #2
 8006c64:	441a      	add	r2, r3
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	685b      	ldr	r3, [r3, #4]
 8006c6a:	009b      	lsls	r3, r3, #2
 8006c6c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006c70:	4b1a      	ldr	r3, [pc, #104]	@ (8006cdc <UART_SetConfig+0x118>)
 8006c72:	fba3 0302 	umull	r0, r3, r3, r2
 8006c76:	095b      	lsrs	r3, r3, #5
 8006c78:	2064      	movs	r0, #100	@ 0x64
 8006c7a:	fb00 f303 	mul.w	r3, r0, r3
 8006c7e:	1ad3      	subs	r3, r2, r3
 8006c80:	011b      	lsls	r3, r3, #4
 8006c82:	3332      	adds	r3, #50	@ 0x32
 8006c84:	4a15      	ldr	r2, [pc, #84]	@ (8006cdc <UART_SetConfig+0x118>)
 8006c86:	fba2 2303 	umull	r2, r3, r2, r3
 8006c8a:	095b      	lsrs	r3, r3, #5
 8006c8c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006c90:	4419      	add	r1, r3
 8006c92:	68fa      	ldr	r2, [r7, #12]
 8006c94:	4613      	mov	r3, r2
 8006c96:	009b      	lsls	r3, r3, #2
 8006c98:	4413      	add	r3, r2
 8006c9a:	009a      	lsls	r2, r3, #2
 8006c9c:	441a      	add	r2, r3
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	685b      	ldr	r3, [r3, #4]
 8006ca2:	009b      	lsls	r3, r3, #2
 8006ca4:	fbb2 f2f3 	udiv	r2, r2, r3
 8006ca8:	4b0c      	ldr	r3, [pc, #48]	@ (8006cdc <UART_SetConfig+0x118>)
 8006caa:	fba3 0302 	umull	r0, r3, r3, r2
 8006cae:	095b      	lsrs	r3, r3, #5
 8006cb0:	2064      	movs	r0, #100	@ 0x64
 8006cb2:	fb00 f303 	mul.w	r3, r0, r3
 8006cb6:	1ad3      	subs	r3, r2, r3
 8006cb8:	011b      	lsls	r3, r3, #4
 8006cba:	3332      	adds	r3, #50	@ 0x32
 8006cbc:	4a07      	ldr	r2, [pc, #28]	@ (8006cdc <UART_SetConfig+0x118>)
 8006cbe:	fba2 2303 	umull	r2, r3, r2, r3
 8006cc2:	095b      	lsrs	r3, r3, #5
 8006cc4:	f003 020f 	and.w	r2, r3, #15
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	440a      	add	r2, r1
 8006cce:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006cd0:	bf00      	nop
 8006cd2:	3710      	adds	r7, #16
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	bd80      	pop	{r7, pc}
 8006cd8:	40013800 	.word	0x40013800
 8006cdc:	51eb851f 	.word	0x51eb851f

08006ce0 <LTC2944_Init>:

ltc2944_data_t ltc2944_data;
uint16_t Prescaler_Table[] = {1, 4, 16, 64, 256, 1024, 4096};
//uint16_t prescaler_value;

HAL_StatusTypeDef LTC2944_Init(ltc2944_configuration_t ltc2944){
 8006ce0:	b084      	sub	sp, #16
 8006ce2:	b5b0      	push	{r4, r5, r7, lr}
 8006ce4:	b088      	sub	sp, #32
 8006ce6:	af04      	add	r7, sp, #16
 8006ce8:	f107 0420 	add.w	r4, r7, #32
 8006cec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t ctrl_reg = 0;
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	713b      	strb	r3, [r7, #4]
	float psc_temp;
	uint8_t status;
//	uint16_t *acc_default;
//	acc_default[0] = 65535;
	// calculate prescalar value based on the battery parameters
	psc_temp = (4096.0f * ltc2944.batt_capacity * ltc2944.sense_resistor)
 8006cf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cf6:	f04f 418b 	mov.w	r1, #1166016512	@ 0x45800000
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	f7fa f842 	bl	8000d84 <__aeabi_fmul>
 8006d00:	4603      	mov	r3, r0
 8006d02:	461a      	mov	r2, r3
 8006d04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d06:	4619      	mov	r1, r3
 8006d08:	4610      	mov	r0, r2
 8006d0a:	f7fa f83b 	bl	8000d84 <__aeabi_fmul>
 8006d0e:	4603      	mov	r3, r0
 8006d10:	494f      	ldr	r1, [pc, #316]	@ (8006e50 <LTC2944_Init+0x170>)
 8006d12:	4618      	mov	r0, r3
 8006d14:	f7fa f8ea 	bl	8000eec <__aeabi_fdiv>
 8006d18:	4603      	mov	r3, r0
 8006d1a:	60bb      	str	r3, [r7, #8]
					/ (65535.0f * FACTOR_CHARGE_QLSB * 50.0f);
	// loop through the Prescaler_Table[] to find the best match of
	// prescalar based on battery and sense resistor values.
	for(uint8_t i = 0; i <= sizeof(Prescaler_Table); i++){
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	73fb      	strb	r3, [r7, #15]
 8006d20:	e024      	b.n	8006d6c <LTC2944_Init+0x8c>
		if((uint16_t)psc_temp <= Prescaler_Table[i]){
 8006d22:	68b8      	ldr	r0, [r7, #8]
 8006d24:	f7fa f97e 	bl	8001024 <__aeabi_f2uiz>
 8006d28:	4603      	mov	r3, r0
 8006d2a:	b29a      	uxth	r2, r3
 8006d2c:	7bfb      	ldrb	r3, [r7, #15]
 8006d2e:	4949      	ldr	r1, [pc, #292]	@ (8006e54 <LTC2944_Init+0x174>)
 8006d30:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8006d34:	429a      	cmp	r2, r3
 8006d36:	d816      	bhi.n	8006d66 <LTC2944_Init+0x86>
			if(i != 0){
 8006d38:	7bfb      	ldrb	r3, [r7, #15]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d011      	beq.n	8006d62 <LTC2944_Init+0x82>
				if((uint16_t)psc_temp >= Prescaler_Table[i-1]){
 8006d3e:	68b8      	ldr	r0, [r7, #8]
 8006d40:	f7fa f970 	bl	8001024 <__aeabi_f2uiz>
 8006d44:	4603      	mov	r3, r0
 8006d46:	b29a      	uxth	r2, r3
 8006d48:	7bfb      	ldrb	r3, [r7, #15]
 8006d4a:	3b01      	subs	r3, #1
 8006d4c:	4941      	ldr	r1, [pc, #260]	@ (8006e54 <LTC2944_Init+0x174>)
 8006d4e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8006d52:	429a      	cmp	r2, r3
 8006d54:	d307      	bcc.n	8006d66 <LTC2944_Init+0x86>
					prescaler_value = Prescaler_Table[i];
 8006d56:	7bfb      	ldrb	r3, [r7, #15]
 8006d58:	4a3e      	ldr	r2, [pc, #248]	@ (8006e54 <LTC2944_Init+0x174>)
 8006d5a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006d5e:	80fb      	strh	r3, [r7, #6]
					break;			// break from the for loop when a match is found,
 8006d60:	e007      	b.n	8006d72 <LTC2944_Init+0x92>
									// otherwise it will loop through the whole table
				}
			}else{
				prescaler_value = 1;
 8006d62:	2301      	movs	r3, #1
 8006d64:	80fb      	strh	r3, [r7, #6]
	for(uint8_t i = 0; i <= sizeof(Prescaler_Table); i++){
 8006d66:	7bfb      	ldrb	r3, [r7, #15]
 8006d68:	3301      	adds	r3, #1
 8006d6a:	73fb      	strb	r3, [r7, #15]
 8006d6c:	7bfb      	ldrb	r3, [r7, #15]
 8006d6e:	2b0e      	cmp	r3, #14
 8006d70:	d9d7      	bls.n	8006d22 <LTC2944_Init+0x42>
//	HAL_I2C_Mem_Write(&(ltc2944.i2c_handle), LTC2944_ADDRESS,
//			ACCUMULATED_CHARGE_MSB, 1, acc_default , 1, 10);

	// calculate the amount of charge represented by the
	// least significant bit (qLSB) of the accumulated charge registers
	prescaler_value = 1024; // for testing, delete this TODO
 8006d72:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006d76:	80fb      	strh	r3, [r7, #6]
	ltc2944_data.qLSB = (float)(0.340 * 50 * prescaler_value)
 8006d78:	88fb      	ldrh	r3, [r7, #6]
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	f7f9 fb42 	bl	8000404 <__aeabi_i2d>
 8006d80:	f04f 0200 	mov.w	r2, #0
 8006d84:	4b34      	ldr	r3, [pc, #208]	@ (8006e58 <LTC2944_Init+0x178>)
 8006d86:	f7f9 fba7 	bl	80004d8 <__aeabi_dmul>
 8006d8a:	4602      	mov	r2, r0
 8006d8c:	460b      	mov	r3, r1
 8006d8e:	4610      	mov	r0, r2
 8006d90:	4619      	mov	r1, r3
 8006d92:	f7f9 fe99 	bl	8000ac8 <__aeabi_d2f>
 8006d96:	4603      	mov	r3, r0
 8006d98:	4618      	mov	r0, r3
 8006d9a:	f7f9 fb45 	bl	8000428 <__aeabi_f2d>
 8006d9e:	4604      	mov	r4, r0
 8006da0:	460d      	mov	r5, r1
							/ (ltc2944.sense_resistor * 4096.0);
 8006da2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006da4:	4618      	mov	r0, r3
 8006da6:	f7f9 fb3f 	bl	8000428 <__aeabi_f2d>
 8006daa:	f04f 0200 	mov.w	r2, #0
 8006dae:	4b2b      	ldr	r3, [pc, #172]	@ (8006e5c <LTC2944_Init+0x17c>)
 8006db0:	f7f9 fb92 	bl	80004d8 <__aeabi_dmul>
 8006db4:	4602      	mov	r2, r0
 8006db6:	460b      	mov	r3, r1
 8006db8:	4620      	mov	r0, r4
 8006dba:	4629      	mov	r1, r5
 8006dbc:	f7f9 fcb6 	bl	800072c <__aeabi_ddiv>
 8006dc0:	4602      	mov	r2, r0
 8006dc2:	460b      	mov	r3, r1
 8006dc4:	4610      	mov	r0, r2
 8006dc6:	4619      	mov	r1, r3
 8006dc8:	f7f9 fe7e 	bl	8000ac8 <__aeabi_d2f>
 8006dcc:	4603      	mov	r3, r0
	ltc2944_data.qLSB = (float)(0.340 * 50 * prescaler_value)
 8006dce:	4a24      	ldr	r2, [pc, #144]	@ (8006e60 <LTC2944_Init+0x180>)
 8006dd0:	6113      	str	r3, [r2, #16]
	printf("QLSB %f\n\r", ltc2944_data.qLSB);
 8006dd2:	4b23      	ldr	r3, [pc, #140]	@ (8006e60 <LTC2944_Init+0x180>)
 8006dd4:	691b      	ldr	r3, [r3, #16]
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	f7f9 fb26 	bl	8000428 <__aeabi_f2d>
 8006ddc:	4602      	mov	r2, r0
 8006dde:	460b      	mov	r3, r1
 8006de0:	4820      	ldr	r0, [pc, #128]	@ (8006e64 <LTC2944_Init+0x184>)
 8006de2:	f001 faf9 	bl	80083d8 <iprintf>
	// calculate the value to put in the control register
	ctrl_reg |= ltc2944.adc_mode << 6;
 8006de6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006dea:	019b      	lsls	r3, r3, #6
 8006dec:	b25a      	sxtb	r2, r3
 8006dee:	793b      	ldrb	r3, [r7, #4]
 8006df0:	b25b      	sxtb	r3, r3
 8006df2:	4313      	orrs	r3, r2
 8006df4:	b25b      	sxtb	r3, r3
 8006df6:	b2db      	uxtb	r3, r3
 8006df8:	713b      	strb	r3, [r7, #4]
	ctrl_reg |= (uint8_t)prescaler_value << 3;
 8006dfa:	88fb      	ldrh	r3, [r7, #6]
 8006dfc:	b2db      	uxtb	r3, r3
 8006dfe:	00db      	lsls	r3, r3, #3
 8006e00:	b25a      	sxtb	r2, r3
 8006e02:	793b      	ldrb	r3, [r7, #4]
 8006e04:	b25b      	sxtb	r3, r3
 8006e06:	4313      	orrs	r3, r2
 8006e08:	b25b      	sxtb	r3, r3
 8006e0a:	b2db      	uxtb	r3, r3
 8006e0c:	713b      	strb	r3, [r7, #4]
	ctrl_reg |= ltc2944.alcc_mode << 1;
 8006e0e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8006e12:	005b      	lsls	r3, r3, #1
 8006e14:	b25a      	sxtb	r2, r3
 8006e16:	793b      	ldrb	r3, [r7, #4]
 8006e18:	b25b      	sxtb	r3, r3
 8006e1a:	4313      	orrs	r3, r2
 8006e1c:	b25b      	sxtb	r3, r3
 8006e1e:	b2db      	uxtb	r3, r3
 8006e20:	713b      	strb	r3, [r7, #4]

	status = HAL_I2C_Mem_Write(&(ltc2944.i2c_handle), LTC2944_ADDRESS,
 8006e22:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8006e26:	230a      	movs	r3, #10
 8006e28:	9302      	str	r3, [sp, #8]
 8006e2a:	2301      	movs	r3, #1
 8006e2c:	9301      	str	r3, [sp, #4]
 8006e2e:	1d3b      	adds	r3, r7, #4
 8006e30:	9300      	str	r3, [sp, #0]
 8006e32:	2301      	movs	r3, #1
 8006e34:	2201      	movs	r2, #1
 8006e36:	21c8      	movs	r1, #200	@ 0xc8
 8006e38:	f7fc fc56 	bl	80036e8 <HAL_I2C_Mem_Write>
 8006e3c:	4603      	mov	r3, r0
 8006e3e:	717b      	strb	r3, [r7, #5]
			CONTROL_REGISTER, 1, &ctrl_reg, 1, 10);

	return status;
 8006e40:	797b      	ldrb	r3, [r7, #5]
}
 8006e42:	4618      	mov	r0, r3
 8006e44:	3710      	adds	r7, #16
 8006e46:	46bd      	mov	sp, r7
 8006e48:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8006e4c:	b004      	add	sp, #16
 8006e4e:	4770      	bx	lr
 8006e50:	448b430a 	.word	0x448b430a
 8006e54:	20000028 	.word	0x20000028
 8006e58:	40310000 	.word	0x40310000
 8006e5c:	40b00000 	.word	0x40b00000
 8006e60:	20000410 	.word	0x20000410
 8006e64:	0800bd0c 	.word	0x0800bd0c

08006e68 <LTC2944_Get_Battery_Data>:


HAL_StatusTypeDef LTC2944_Get_Battery_Data(ltc2944_configuration_t *ltc2944){
 8006e68:	b590      	push	{r4, r7, lr}
 8006e6a:	b08f      	sub	sp, #60	@ 0x3c
 8006e6c:	af04      	add	r7, sp, #16
 8006e6e:	6078      	str	r0, [r7, #4]
	uint16_t temp;
	uint8_t status;
	uint8_t data_buffer[NUMBER_OF_REGISTERS];

	status = HAL_I2C_Mem_Read(&(ltc2944->i2c_handle), LTC2944_ADDRESS, STATUS_REGISTER,
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	f103 000c 	add.w	r0, r3, #12
 8006e76:	2301      	movs	r3, #1
 8006e78:	9302      	str	r3, [sp, #8]
 8006e7a:	2317      	movs	r3, #23
 8006e7c:	9301      	str	r3, [sp, #4]
 8006e7e:	f107 030c 	add.w	r3, r7, #12
 8006e82:	9300      	str	r3, [sp, #0]
 8006e84:	2301      	movs	r3, #1
 8006e86:	2200      	movs	r2, #0
 8006e88:	21c8      	movs	r1, #200	@ 0xc8
 8006e8a:	f7fc fd27 	bl	80038dc <HAL_I2C_Mem_Read>
 8006e8e:	4603      	mov	r3, r0
 8006e90:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			1 , data_buffer, NUMBER_OF_REGISTERS, 1);

	if(status == HAL_OK){
 8006e94:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	f040 809b 	bne.w	8006fd4 <LTC2944_Get_Battery_Data+0x16c>

		temp = data_buffer[ACCUMULATED_CHARGE_MSB] << 8 | data_buffer[ACCUMULATED_CHARGE_LSB];
 8006e9e:	7bbb      	ldrb	r3, [r7, #14]
 8006ea0:	021b      	lsls	r3, r3, #8
 8006ea2:	b21a      	sxth	r2, r3
 8006ea4:	7bfb      	ldrb	r3, [r7, #15]
 8006ea6:	b21b      	sxth	r3, r3
 8006ea8:	4313      	orrs	r3, r2
 8006eaa:	b21b      	sxth	r3, r3
 8006eac:	84bb      	strh	r3, [r7, #36]	@ 0x24
		ltc2944_data.acc_charge = (ltc2944_data.qLSB * (32767.0f - (float)temp));
 8006eae:	4b58      	ldr	r3, [pc, #352]	@ (8007010 <LTC2944_Get_Battery_Data+0x1a8>)
 8006eb0:	691c      	ldr	r4, [r3, #16]
 8006eb2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	f7f9 ff0d 	bl	8000cd4 <__aeabi_ui2f>
 8006eba:	4603      	mov	r3, r0
 8006ebc:	4619      	mov	r1, r3
 8006ebe:	4855      	ldr	r0, [pc, #340]	@ (8007014 <LTC2944_Get_Battery_Data+0x1ac>)
 8006ec0:	f7f9 fe56 	bl	8000b70 <__aeabi_fsub>
 8006ec4:	4603      	mov	r3, r0
 8006ec6:	4619      	mov	r1, r3
 8006ec8:	4620      	mov	r0, r4
 8006eca:	f7f9 ff5b 	bl	8000d84 <__aeabi_fmul>
 8006ece:	4603      	mov	r3, r0
 8006ed0:	461a      	mov	r2, r3
 8006ed2:	4b4f      	ldr	r3, [pc, #316]	@ (8007010 <LTC2944_Get_Battery_Data+0x1a8>)
 8006ed4:	601a      	str	r2, [r3, #0]
		printf("temp chg %d\t chg %f\n\r ", temp, ltc2944_data.acc_charge);
 8006ed6:	8cbc      	ldrh	r4, [r7, #36]	@ 0x24
 8006ed8:	4b4d      	ldr	r3, [pc, #308]	@ (8007010 <LTC2944_Get_Battery_Data+0x1a8>)
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	4618      	mov	r0, r3
 8006ede:	f7f9 faa3 	bl	8000428 <__aeabi_f2d>
 8006ee2:	4602      	mov	r2, r0
 8006ee4:	460b      	mov	r3, r1
 8006ee6:	4621      	mov	r1, r4
 8006ee8:	484b      	ldr	r0, [pc, #300]	@ (8007018 <LTC2944_Get_Battery_Data+0x1b0>)
 8006eea:	f001 fa75 	bl	80083d8 <iprintf>

		temp = data_buffer[VOLTAGE_MSB] << 8 | (data_buffer[VOLTAGE_LSB]);
 8006eee:	7d3b      	ldrb	r3, [r7, #20]
 8006ef0:	021b      	lsls	r3, r3, #8
 8006ef2:	b21a      	sxth	r2, r3
 8006ef4:	7d7b      	ldrb	r3, [r7, #21]
 8006ef6:	b21b      	sxth	r3, r3
 8006ef8:	4313      	orrs	r3, r2
 8006efa:	b21b      	sxth	r3, r3
 8006efc:	84bb      	strh	r3, [r7, #36]	@ 0x24
		ltc2944_data.voltage = 70.8f * (temp/65535.0f);
 8006efe:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006f00:	4618      	mov	r0, r3
 8006f02:	f7f9 feeb 	bl	8000cdc <__aeabi_i2f>
 8006f06:	4603      	mov	r3, r0
 8006f08:	4944      	ldr	r1, [pc, #272]	@ (800701c <LTC2944_Get_Battery_Data+0x1b4>)
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	f7f9 ffee 	bl	8000eec <__aeabi_fdiv>
 8006f10:	4603      	mov	r3, r0
 8006f12:	4943      	ldr	r1, [pc, #268]	@ (8007020 <LTC2944_Get_Battery_Data+0x1b8>)
 8006f14:	4618      	mov	r0, r3
 8006f16:	f7f9 ff35 	bl	8000d84 <__aeabi_fmul>
 8006f1a:	4603      	mov	r3, r0
 8006f1c:	461a      	mov	r2, r3
 8006f1e:	4b3c      	ldr	r3, [pc, #240]	@ (8007010 <LTC2944_Get_Battery_Data+0x1a8>)
 8006f20:	605a      	str	r2, [r3, #4]

		temp = data_buffer[CURRENT_MSB] << 8 | (data_buffer)[CURRENT_LSB];
 8006f22:	7ebb      	ldrb	r3, [r7, #26]
 8006f24:	021b      	lsls	r3, r3, #8
 8006f26:	b21a      	sxth	r2, r3
 8006f28:	7efb      	ldrb	r3, [r7, #27]
 8006f2a:	b21b      	sxth	r3, r3
 8006f2c:	4313      	orrs	r3, r2
 8006f2e:	b21b      	sxth	r3, r3
 8006f30:	84bb      	strh	r3, [r7, #36]	@ 0x24
		ltc2944_data.current = ((((float)temp / 32767.0f) - 1) * (64.0f / ltc2944->sense_resistor)) + 0.005;
 8006f32:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006f34:	4618      	mov	r0, r3
 8006f36:	f7f9 fecd 	bl	8000cd4 <__aeabi_ui2f>
 8006f3a:	4603      	mov	r3, r0
 8006f3c:	4935      	ldr	r1, [pc, #212]	@ (8007014 <LTC2944_Get_Battery_Data+0x1ac>)
 8006f3e:	4618      	mov	r0, r3
 8006f40:	f7f9 ffd4 	bl	8000eec <__aeabi_fdiv>
 8006f44:	4603      	mov	r3, r0
 8006f46:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	f7f9 fe10 	bl	8000b70 <__aeabi_fsub>
 8006f50:	4603      	mov	r3, r0
 8006f52:	461c      	mov	r4, r3
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	685b      	ldr	r3, [r3, #4]
 8006f58:	4619      	mov	r1, r3
 8006f5a:	f04f 4085 	mov.w	r0, #1115684864	@ 0x42800000
 8006f5e:	f7f9 ffc5 	bl	8000eec <__aeabi_fdiv>
 8006f62:	4603      	mov	r3, r0
 8006f64:	4619      	mov	r1, r3
 8006f66:	4620      	mov	r0, r4
 8006f68:	f7f9 ff0c 	bl	8000d84 <__aeabi_fmul>
 8006f6c:	4603      	mov	r3, r0
 8006f6e:	4618      	mov	r0, r3
 8006f70:	f7f9 fa5a 	bl	8000428 <__aeabi_f2d>
 8006f74:	a324      	add	r3, pc, #144	@ (adr r3, 8007008 <LTC2944_Get_Battery_Data+0x1a0>)
 8006f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f7a:	f7f9 f8f7 	bl	800016c <__adddf3>
 8006f7e:	4602      	mov	r2, r0
 8006f80:	460b      	mov	r3, r1
 8006f82:	4610      	mov	r0, r2
 8006f84:	4619      	mov	r1, r3
 8006f86:	f7f9 fd9f 	bl	8000ac8 <__aeabi_d2f>
 8006f8a:	4603      	mov	r3, r0
 8006f8c:	4a20      	ldr	r2, [pc, #128]	@ (8007010 <LTC2944_Get_Battery_Data+0x1a8>)
 8006f8e:	6093      	str	r3, [r2, #8]

		temp = data_buffer[TEMPERATURE_MSB] << 8 | (data_buffer[TEMPERATURE_LSB]);
 8006f90:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006f94:	021b      	lsls	r3, r3, #8
 8006f96:	b21a      	sxth	r2, r3
 8006f98:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8006f9c:	b21b      	sxth	r3, r3
 8006f9e:	4313      	orrs	r3, r2
 8006fa0:	b21b      	sxth	r3, r3
 8006fa2:	84bb      	strh	r3, [r7, #36]	@ 0x24
		ltc2944_data.temperature = (501.0f * (temp / 65535.0f)) - 273.0f;
 8006fa4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	f7f9 fe98 	bl	8000cdc <__aeabi_i2f>
 8006fac:	4603      	mov	r3, r0
 8006fae:	491b      	ldr	r1, [pc, #108]	@ (800701c <LTC2944_Get_Battery_Data+0x1b4>)
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	f7f9 ff9b 	bl	8000eec <__aeabi_fdiv>
 8006fb6:	4603      	mov	r3, r0
 8006fb8:	491a      	ldr	r1, [pc, #104]	@ (8007024 <LTC2944_Get_Battery_Data+0x1bc>)
 8006fba:	4618      	mov	r0, r3
 8006fbc:	f7f9 fee2 	bl	8000d84 <__aeabi_fmul>
 8006fc0:	4603      	mov	r3, r0
 8006fc2:	4919      	ldr	r1, [pc, #100]	@ (8007028 <LTC2944_Get_Battery_Data+0x1c0>)
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	f7f9 fdd3 	bl	8000b70 <__aeabi_fsub>
 8006fca:	4603      	mov	r3, r0
 8006fcc:	461a      	mov	r2, r3
 8006fce:	4b10      	ldr	r3, [pc, #64]	@ (8007010 <LTC2944_Get_Battery_Data+0x1a8>)
 8006fd0:	60da      	str	r2, [r3, #12]
 8006fd2:	e013      	b.n	8006ffc <LTC2944_Get_Battery_Data+0x194>
	}
	else{
		ltc2944_data.acc_charge =	0.0;
 8006fd4:	4b0e      	ldr	r3, [pc, #56]	@ (8007010 <LTC2944_Get_Battery_Data+0x1a8>)
 8006fd6:	f04f 0200 	mov.w	r2, #0
 8006fda:	601a      	str	r2, [r3, #0]
		ltc2944_data.current = 		0.0;
 8006fdc:	4b0c      	ldr	r3, [pc, #48]	@ (8007010 <LTC2944_Get_Battery_Data+0x1a8>)
 8006fde:	f04f 0200 	mov.w	r2, #0
 8006fe2:	609a      	str	r2, [r3, #8]
		ltc2944_data.qLSB = 		0.0;
 8006fe4:	4b0a      	ldr	r3, [pc, #40]	@ (8007010 <LTC2944_Get_Battery_Data+0x1a8>)
 8006fe6:	f04f 0200 	mov.w	r2, #0
 8006fea:	611a      	str	r2, [r3, #16]
		ltc2944_data.temperature = 	0.0;
 8006fec:	4b08      	ldr	r3, [pc, #32]	@ (8007010 <LTC2944_Get_Battery_Data+0x1a8>)
 8006fee:	f04f 0200 	mov.w	r2, #0
 8006ff2:	60da      	str	r2, [r3, #12]
		ltc2944_data.voltage = 		0.0;
 8006ff4:	4b06      	ldr	r3, [pc, #24]	@ (8007010 <LTC2944_Get_Battery_Data+0x1a8>)
 8006ff6:	f04f 0200 	mov.w	r2, #0
 8006ffa:	605a      	str	r2, [r3, #4]
	}

	return status;
 8006ffc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8007000:	4618      	mov	r0, r3
 8007002:	372c      	adds	r7, #44	@ 0x2c
 8007004:	46bd      	mov	sp, r7
 8007006:	bd90      	pop	{r4, r7, pc}
 8007008:	47ae147b 	.word	0x47ae147b
 800700c:	3f747ae1 	.word	0x3f747ae1
 8007010:	20000410 	.word	0x20000410
 8007014:	46fffe00 	.word	0x46fffe00
 8007018:	0800bd18 	.word	0x0800bd18
 800701c:	477fff00 	.word	0x477fff00
 8007020:	428d999a 	.word	0x428d999a
 8007024:	43fa8000 	.word	0x43fa8000
 8007028:	43888000 	.word	0x43888000

0800702c <MCP4725_init>:

#include "i2c.h"


MCP4725 MCP4725_init(I2C_HandleTypeDef* hi2c, MCP4725_I2C_ADDRESS addr, uint16_t refV)
{
 800702c:	b480      	push	{r7}
 800702e:	b087      	sub	sp, #28
 8007030:	af00      	add	r7, sp, #0
 8007032:	60f8      	str	r0, [r7, #12]
 8007034:	60b9      	str	r1, [r7, #8]
 8007036:	4611      	mov	r1, r2
 8007038:	461a      	mov	r2, r3
 800703a:	460b      	mov	r3, r1
 800703c:	71fb      	strb	r3, [r7, #7]
 800703e:	4613      	mov	r3, r2
 8007040:	80bb      	strh	r3, [r7, #4]
	MCP4725 _MCP4725;
	_MCP4725._i2cAddress	= (uint16_t)(addr<<1);
 8007042:	79fb      	ldrb	r3, [r7, #7]
 8007044:	005b      	lsls	r3, r3, #1
 8007046:	b2db      	uxtb	r3, r3
 8007048:	753b      	strb	r3, [r7, #20]
	_MCP4725.hi2c			= hi2c;
 800704a:	68bb      	ldr	r3, [r7, #8]
 800704c:	613b      	str	r3, [r7, #16]
	_MCP4725._refVoltage	= refV;
 800704e:	88bb      	ldrh	r3, [r7, #4]
 8007050:	82fb      	strh	r3, [r7, #22]
	return _MCP4725;
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	461a      	mov	r2, r3
 8007056:	f107 0310 	add.w	r3, r7, #16
 800705a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800705e:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8007062:	68f8      	ldr	r0, [r7, #12]
 8007064:	371c      	adds	r7, #28
 8007066:	46bd      	mov	sp, r7
 8007068:	bc80      	pop	{r7}
 800706a:	4770      	bx	lr

0800706c <MCP4725_Set_Voltage>:


void MCP4725_Set_Voltage(MCP4725* _MCP4725, uint16_t value) {
 800706c:	b580      	push	{r7, lr}
 800706e:	b086      	sub	sp, #24
 8007070:	af02      	add	r7, sp, #8
 8007072:	6078      	str	r0, [r7, #4]
 8007074:	460b      	mov	r3, r1
 8007076:	807b      	strh	r3, [r7, #2]
	uint8_t data[2];

	if (_MCP4725->_refVoltage == 0) {
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	88db      	ldrh	r3, [r3, #6]
 800707c:	2b00      	cmp	r3, #0
 800707e:	d025      	beq.n	80070cc <MCP4725_Set_Voltage+0x60>
		// Avoid division by zero
		return;
	}

    // Calculate the DAC value based on the desired voltage
    uint16_t dac_value = (value * 4095) / _MCP4725->_refVoltage;
 8007080:	887a      	ldrh	r2, [r7, #2]
 8007082:	4613      	mov	r3, r2
 8007084:	031b      	lsls	r3, r3, #12
 8007086:	1a9b      	subs	r3, r3, r2
 8007088:	687a      	ldr	r2, [r7, #4]
 800708a:	88d2      	ldrh	r2, [r2, #6]
 800708c:	fb93 f3f2 	sdiv	r3, r3, r2
 8007090:	81fb      	strh	r3, [r7, #14]
    if(dac_value > MCP4725_MAX_DAC_VALUE){
 8007092:	89fb      	ldrh	r3, [r7, #14]
 8007094:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007098:	d302      	bcc.n	80070a0 <MCP4725_Set_Voltage+0x34>
    		dac_value = MCP4725_MAX_DAC_VALUE;
 800709a:	f640 73ff 	movw	r3, #4095	@ 0xfff
 800709e:	81fb      	strh	r3, [r7, #14]
    	}
    // Prepare the data to be sent to the MCP4725
    data[0] = dac_value >> 8; // MSB of DAC value
 80070a0:	89fb      	ldrh	r3, [r7, #14]
 80070a2:	0a1b      	lsrs	r3, r3, #8
 80070a4:	b29b      	uxth	r3, r3
 80070a6:	b2db      	uxtb	r3, r3
 80070a8:	733b      	strb	r3, [r7, #12]
    data[1] = dac_value;        // LSB of DAC value
 80070aa:	89fb      	ldrh	r3, [r7, #14]
 80070ac:	b2db      	uxtb	r3, r3
 80070ae:	737b      	strb	r3, [r7, #13]
    // Send data to MCP4725
    HAL_I2C_Master_Transmit(_MCP4725->hi2c, _MCP4725->_i2cAddress, data, 2, HAL_MAX_DELAY);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	6818      	ldr	r0, [r3, #0]
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	791b      	ldrb	r3, [r3, #4]
 80070b8:	4619      	mov	r1, r3
 80070ba:	f107 020c 	add.w	r2, r7, #12
 80070be:	f04f 33ff 	mov.w	r3, #4294967295
 80070c2:	9300      	str	r3, [sp, #0]
 80070c4:	2302      	movs	r3, #2
 80070c6:	f7fc fa11 	bl	80034ec <HAL_I2C_Master_Transmit>
 80070ca:	e000      	b.n	80070ce <MCP4725_Set_Voltage+0x62>
		return;
 80070cc:	bf00      	nop
}
 80070ce:	3710      	adds	r7, #16
 80070d0:	46bd      	mov	sp, r7
 80070d2:	bd80      	pop	{r7, pc}

080070d4 <PIDController_Init>:
 *      Author: phil
 *      https://github.com/pms67/PID/blob/master/PID.c
 */
#include "../../pid/pid.h"

void PIDController_Init(PIDController *pid) {
 80070d4:	b480      	push	{r7}
 80070d6:	b083      	sub	sp, #12
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]

	/* Clear controller variables */
	pid->integrator = 0.0f;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	f04f 0200 	mov.w	r2, #0
 80070e2:	625a      	str	r2, [r3, #36]	@ 0x24
	pid->prevError  = 0.0f;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	f04f 0200 	mov.w	r2, #0
 80070ea:	629a      	str	r2, [r3, #40]	@ 0x28

	pid->differentiator  = 0.0f;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	f04f 0200 	mov.w	r2, #0
 80070f2:	62da      	str	r2, [r3, #44]	@ 0x2c
	pid->prevMeasurement = 0.0f;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	f04f 0200 	mov.w	r2, #0
 80070fa:	631a      	str	r2, [r3, #48]	@ 0x30

	pid->out = 0.0f;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	f04f 0200 	mov.w	r2, #0
 8007102:	635a      	str	r2, [r3, #52]	@ 0x34

}
 8007104:	bf00      	nop
 8007106:	370c      	adds	r7, #12
 8007108:	46bd      	mov	sp, r7
 800710a:	bc80      	pop	{r7}
 800710c:	4770      	bx	lr

0800710e <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 800710e:	b480      	push	{r7}
 8007110:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8007112:	bf00      	nop
 8007114:	46bd      	mov	sp, r7
 8007116:	bc80      	pop	{r7}
 8007118:	4770      	bx	lr
	...

0800711c <ssd1306_WriteCommand>:
/*
 * DMA settings
 * ADD I2Cx_TX in normal mode. Byte | Byte
 * In NVIC Settings, Enable "I2Cx event interrupt"
 */
void ssd1306_WriteCommand(uint8_t byte) {
 800711c:	b580      	push	{r7, lr}
 800711e:	b086      	sub	sp, #24
 8007120:	af04      	add	r7, sp, #16
 8007122:	4603      	mov	r3, r0
 8007124:	71fb      	strb	r3, [r7, #7]
#ifdef USE_DMA
	while(HAL_I2C_GetState(&SSD1306_I2C_PORT) != HAL_I2C_STATE_READY);
	HAL_I2C_Mem_Write_DMA(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1);
#else
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8007126:	f04f 33ff 	mov.w	r3, #4294967295
 800712a:	9302      	str	r3, [sp, #8]
 800712c:	2301      	movs	r3, #1
 800712e:	9301      	str	r3, [sp, #4]
 8007130:	1dfb      	adds	r3, r7, #7
 8007132:	9300      	str	r3, [sp, #0]
 8007134:	2301      	movs	r3, #1
 8007136:	2200      	movs	r2, #0
 8007138:	2178      	movs	r1, #120	@ 0x78
 800713a:	4803      	ldr	r0, [pc, #12]	@ (8007148 <ssd1306_WriteCommand+0x2c>)
 800713c:	f7fc fad4 	bl	80036e8 <HAL_I2C_Mem_Write>
#endif
}
 8007140:	bf00      	nop
 8007142:	3708      	adds	r7, #8
 8007144:	46bd      	mov	sp, r7
 8007146:	bd80      	pop	{r7, pc}
 8007148:	20000254 	.word	0x20000254

0800714c <ssd1306_WriteData>:


void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 800714c:	b580      	push	{r7, lr}
 800714e:	b086      	sub	sp, #24
 8007150:	af04      	add	r7, sp, #16
 8007152:	6078      	str	r0, [r7, #4]
 8007154:	6039      	str	r1, [r7, #0]
#ifdef USE_DMA
	while(HAL_I2C_GetState(&SSD1306_I2C_PORT) != HAL_I2C_STATE_READY);
	HAL_I2C_Mem_Write_DMA(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size);
#else
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8007156:	683b      	ldr	r3, [r7, #0]
 8007158:	b29b      	uxth	r3, r3
 800715a:	f04f 32ff 	mov.w	r2, #4294967295
 800715e:	9202      	str	r2, [sp, #8]
 8007160:	9301      	str	r3, [sp, #4]
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	9300      	str	r3, [sp, #0]
 8007166:	2301      	movs	r3, #1
 8007168:	2240      	movs	r2, #64	@ 0x40
 800716a:	2178      	movs	r1, #120	@ 0x78
 800716c:	4803      	ldr	r0, [pc, #12]	@ (800717c <ssd1306_WriteData+0x30>)
 800716e:	f7fc fabb 	bl	80036e8 <HAL_I2C_Mem_Write>
#endif
}
 8007172:	bf00      	nop
 8007174:	3708      	adds	r7, #8
 8007176:	46bd      	mov	sp, r7
 8007178:	bd80      	pop	{r7, pc}
 800717a:	bf00      	nop
 800717c:	20000254 	.word	0x20000254

08007180 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8007180:	b580      	push	{r7, lr}
 8007182:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8007184:	f7ff ffc3 	bl	800710e <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8007188:	2064      	movs	r0, #100	@ 0x64
 800718a:	f7fa fe8d 	bl	8001ea8 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 800718e:	2000      	movs	r0, #0
 8007190:	f000 f9d6 	bl	8007540 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8007194:	2020      	movs	r0, #32
 8007196:	f7ff ffc1 	bl	800711c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 800719a:	2000      	movs	r0, #0
 800719c:	f7ff ffbe 	bl	800711c <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80071a0:	20b0      	movs	r0, #176	@ 0xb0
 80071a2:	f7ff ffbb 	bl	800711c <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 80071a6:	20c8      	movs	r0, #200	@ 0xc8
 80071a8:	f7ff ffb8 	bl	800711c <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 80071ac:	2000      	movs	r0, #0
 80071ae:	f7ff ffb5 	bl	800711c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 80071b2:	2010      	movs	r0, #16
 80071b4:	f7ff ffb2 	bl	800711c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 80071b8:	2040      	movs	r0, #64	@ 0x40
 80071ba:	f7ff ffaf 	bl	800711c <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 80071be:	20ff      	movs	r0, #255	@ 0xff
 80071c0:	f000 f9aa 	bl	8007518 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 80071c4:	20a1      	movs	r0, #161	@ 0xa1
 80071c6:	f7ff ffa9 	bl	800711c <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 80071ca:	20a6      	movs	r0, #166	@ 0xa6
 80071cc:	f7ff ffa6 	bl	800711c <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80071d0:	20a8      	movs	r0, #168	@ 0xa8
 80071d2:	f7ff ffa3 	bl	800711c <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 80071d6:	203f      	movs	r0, #63	@ 0x3f
 80071d8:	f7ff ffa0 	bl	800711c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80071dc:	20a4      	movs	r0, #164	@ 0xa4
 80071de:	f7ff ff9d 	bl	800711c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 80071e2:	20d3      	movs	r0, #211	@ 0xd3
 80071e4:	f7ff ff9a 	bl	800711c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 80071e8:	2000      	movs	r0, #0
 80071ea:	f7ff ff97 	bl	800711c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80071ee:	20d5      	movs	r0, #213	@ 0xd5
 80071f0:	f7ff ff94 	bl	800711c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 80071f4:	20f0      	movs	r0, #240	@ 0xf0
 80071f6:	f7ff ff91 	bl	800711c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80071fa:	20d9      	movs	r0, #217	@ 0xd9
 80071fc:	f7ff ff8e 	bl	800711c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8007200:	2022      	movs	r0, #34	@ 0x22
 8007202:	f7ff ff8b 	bl	800711c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8007206:	20da      	movs	r0, #218	@ 0xda
 8007208:	f7ff ff88 	bl	800711c <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 800720c:	2012      	movs	r0, #18
 800720e:	f7ff ff85 	bl	800711c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8007212:	20db      	movs	r0, #219	@ 0xdb
 8007214:	f7ff ff82 	bl	800711c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8007218:	2020      	movs	r0, #32
 800721a:	f7ff ff7f 	bl	800711c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 800721e:	208d      	movs	r0, #141	@ 0x8d
 8007220:	f7ff ff7c 	bl	800711c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8007224:	2014      	movs	r0, #20
 8007226:	f7ff ff79 	bl	800711c <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 800722a:	2001      	movs	r0, #1
 800722c:	f000 f988 	bl	8007540 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8007230:	2000      	movs	r0, #0
 8007232:	f000 f80f 	bl	8007254 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8007236:	f000 f82f 	bl	8007298 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 800723a:	4b05      	ldr	r3, [pc, #20]	@ (8007250 <ssd1306_Init+0xd0>)
 800723c:	2200      	movs	r2, #0
 800723e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8007240:	4b03      	ldr	r3, [pc, #12]	@ (8007250 <ssd1306_Init+0xd0>)
 8007242:	2200      	movs	r2, #0
 8007244:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8007246:	4b02      	ldr	r3, [pc, #8]	@ (8007250 <ssd1306_Init+0xd0>)
 8007248:	2201      	movs	r2, #1
 800724a:	711a      	strb	r2, [r3, #4]
}
 800724c:	bf00      	nop
 800724e:	bd80      	pop	{r7, pc}
 8007250:	20000824 	.word	0x20000824

08007254 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8007254:	b480      	push	{r7}
 8007256:	b085      	sub	sp, #20
 8007258:	af00      	add	r7, sp, #0
 800725a:	4603      	mov	r3, r0
 800725c:	71fb      	strb	r3, [r7, #7]
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 800725e:	2300      	movs	r3, #0
 8007260:	60fb      	str	r3, [r7, #12]
 8007262:	e00d      	b.n	8007280 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8007264:	79fb      	ldrb	r3, [r7, #7]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d101      	bne.n	800726e <ssd1306_Fill+0x1a>
 800726a:	2100      	movs	r1, #0
 800726c:	e000      	b.n	8007270 <ssd1306_Fill+0x1c>
 800726e:	21ff      	movs	r1, #255	@ 0xff
 8007270:	4a08      	ldr	r2, [pc, #32]	@ (8007294 <ssd1306_Fill+0x40>)
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	4413      	add	r3, r2
 8007276:	460a      	mov	r2, r1
 8007278:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	3301      	adds	r3, #1
 800727e:	60fb      	str	r3, [r7, #12]
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007286:	d3ed      	bcc.n	8007264 <ssd1306_Fill+0x10>
    }
}
 8007288:	bf00      	nop
 800728a:	bf00      	nop
 800728c:	3714      	adds	r7, #20
 800728e:	46bd      	mov	sp, r7
 8007290:	bc80      	pop	{r7}
 8007292:	4770      	bx	lr
 8007294:	20000424 	.word	0x20000424

08007298 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8007298:	b580      	push	{r7, lr}
 800729a:	b082      	sub	sp, #8
 800729c:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800729e:	2300      	movs	r3, #0
 80072a0:	71fb      	strb	r3, [r7, #7]
 80072a2:	e016      	b.n	80072d2 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 80072a4:	79fb      	ldrb	r3, [r7, #7]
 80072a6:	3b50      	subs	r3, #80	@ 0x50
 80072a8:	b2db      	uxtb	r3, r3
 80072aa:	4618      	mov	r0, r3
 80072ac:	f7ff ff36 	bl	800711c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 80072b0:	2001      	movs	r0, #1
 80072b2:	f7ff ff33 	bl	800711c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 80072b6:	2010      	movs	r0, #16
 80072b8:	f7ff ff30 	bl	800711c <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 80072bc:	79fb      	ldrb	r3, [r7, #7]
 80072be:	01db      	lsls	r3, r3, #7
 80072c0:	4a08      	ldr	r2, [pc, #32]	@ (80072e4 <ssd1306_UpdateScreen+0x4c>)
 80072c2:	4413      	add	r3, r2
 80072c4:	2180      	movs	r1, #128	@ 0x80
 80072c6:	4618      	mov	r0, r3
 80072c8:	f7ff ff40 	bl	800714c <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80072cc:	79fb      	ldrb	r3, [r7, #7]
 80072ce:	3301      	adds	r3, #1
 80072d0:	71fb      	strb	r3, [r7, #7]
 80072d2:	79fb      	ldrb	r3, [r7, #7]
 80072d4:	2b07      	cmp	r3, #7
 80072d6:	d9e5      	bls.n	80072a4 <ssd1306_UpdateScreen+0xc>
    }
}
 80072d8:	bf00      	nop
 80072da:	bf00      	nop
 80072dc:	3708      	adds	r7, #8
 80072de:	46bd      	mov	sp, r7
 80072e0:	bd80      	pop	{r7, pc}
 80072e2:	bf00      	nop
 80072e4:	20000424 	.word	0x20000424

080072e8 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80072e8:	b480      	push	{r7}
 80072ea:	b083      	sub	sp, #12
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	4603      	mov	r3, r0
 80072f0:	71fb      	strb	r3, [r7, #7]
 80072f2:	460b      	mov	r3, r1
 80072f4:	71bb      	strb	r3, [r7, #6]
 80072f6:	4613      	mov	r3, r2
 80072f8:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80072fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	db3d      	blt.n	800737e <ssd1306_DrawPixel+0x96>
 8007302:	79bb      	ldrb	r3, [r7, #6]
 8007304:	2b3f      	cmp	r3, #63	@ 0x3f
 8007306:	d83a      	bhi.n	800737e <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8007308:	797b      	ldrb	r3, [r7, #5]
 800730a:	2b01      	cmp	r3, #1
 800730c:	d11a      	bne.n	8007344 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800730e:	79fa      	ldrb	r2, [r7, #7]
 8007310:	79bb      	ldrb	r3, [r7, #6]
 8007312:	08db      	lsrs	r3, r3, #3
 8007314:	b2d8      	uxtb	r0, r3
 8007316:	4603      	mov	r3, r0
 8007318:	01db      	lsls	r3, r3, #7
 800731a:	4413      	add	r3, r2
 800731c:	4a1a      	ldr	r2, [pc, #104]	@ (8007388 <ssd1306_DrawPixel+0xa0>)
 800731e:	5cd3      	ldrb	r3, [r2, r3]
 8007320:	b25a      	sxtb	r2, r3
 8007322:	79bb      	ldrb	r3, [r7, #6]
 8007324:	f003 0307 	and.w	r3, r3, #7
 8007328:	2101      	movs	r1, #1
 800732a:	fa01 f303 	lsl.w	r3, r1, r3
 800732e:	b25b      	sxtb	r3, r3
 8007330:	4313      	orrs	r3, r2
 8007332:	b259      	sxtb	r1, r3
 8007334:	79fa      	ldrb	r2, [r7, #7]
 8007336:	4603      	mov	r3, r0
 8007338:	01db      	lsls	r3, r3, #7
 800733a:	4413      	add	r3, r2
 800733c:	b2c9      	uxtb	r1, r1
 800733e:	4a12      	ldr	r2, [pc, #72]	@ (8007388 <ssd1306_DrawPixel+0xa0>)
 8007340:	54d1      	strb	r1, [r2, r3]
 8007342:	e01d      	b.n	8007380 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8007344:	79fa      	ldrb	r2, [r7, #7]
 8007346:	79bb      	ldrb	r3, [r7, #6]
 8007348:	08db      	lsrs	r3, r3, #3
 800734a:	b2d8      	uxtb	r0, r3
 800734c:	4603      	mov	r3, r0
 800734e:	01db      	lsls	r3, r3, #7
 8007350:	4413      	add	r3, r2
 8007352:	4a0d      	ldr	r2, [pc, #52]	@ (8007388 <ssd1306_DrawPixel+0xa0>)
 8007354:	5cd3      	ldrb	r3, [r2, r3]
 8007356:	b25a      	sxtb	r2, r3
 8007358:	79bb      	ldrb	r3, [r7, #6]
 800735a:	f003 0307 	and.w	r3, r3, #7
 800735e:	2101      	movs	r1, #1
 8007360:	fa01 f303 	lsl.w	r3, r1, r3
 8007364:	b25b      	sxtb	r3, r3
 8007366:	43db      	mvns	r3, r3
 8007368:	b25b      	sxtb	r3, r3
 800736a:	4013      	ands	r3, r2
 800736c:	b259      	sxtb	r1, r3
 800736e:	79fa      	ldrb	r2, [r7, #7]
 8007370:	4603      	mov	r3, r0
 8007372:	01db      	lsls	r3, r3, #7
 8007374:	4413      	add	r3, r2
 8007376:	b2c9      	uxtb	r1, r1
 8007378:	4a03      	ldr	r2, [pc, #12]	@ (8007388 <ssd1306_DrawPixel+0xa0>)
 800737a:	54d1      	strb	r1, [r2, r3]
 800737c:	e000      	b.n	8007380 <ssd1306_DrawPixel+0x98>
        return;
 800737e:	bf00      	nop
    }
}
 8007380:	370c      	adds	r7, #12
 8007382:	46bd      	mov	sp, r7
 8007384:	bc80      	pop	{r7}
 8007386:	4770      	bx	lr
 8007388:	20000424 	.word	0x20000424

0800738c <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 800738c:	b590      	push	{r4, r7, lr}
 800738e:	b089      	sub	sp, #36	@ 0x24
 8007390:	af00      	add	r7, sp, #0
 8007392:	4604      	mov	r4, r0
 8007394:	1d38      	adds	r0, r7, #4
 8007396:	e880 0006 	stmia.w	r0, {r1, r2}
 800739a:	461a      	mov	r2, r3
 800739c:	4623      	mov	r3, r4
 800739e:	73fb      	strb	r3, [r7, #15]
 80073a0:	4613      	mov	r3, r2
 80073a2:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 80073a4:	7bfb      	ldrb	r3, [r7, #15]
 80073a6:	2b1f      	cmp	r3, #31
 80073a8:	d902      	bls.n	80073b0 <ssd1306_WriteChar+0x24>
 80073aa:	7bfb      	ldrb	r3, [r7, #15]
 80073ac:	2b7e      	cmp	r3, #126	@ 0x7e
 80073ae:	d901      	bls.n	80073b4 <ssd1306_WriteChar+0x28>
        return 0;
 80073b0:	2300      	movs	r3, #0
 80073b2:	e06c      	b.n	800748e <ssd1306_WriteChar+0x102>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80073b4:	4b38      	ldr	r3, [pc, #224]	@ (8007498 <ssd1306_WriteChar+0x10c>)
 80073b6:	881b      	ldrh	r3, [r3, #0]
 80073b8:	461a      	mov	r2, r3
 80073ba:	793b      	ldrb	r3, [r7, #4]
 80073bc:	4413      	add	r3, r2
 80073be:	2b80      	cmp	r3, #128	@ 0x80
 80073c0:	dc06      	bgt.n	80073d0 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 80073c2:	4b35      	ldr	r3, [pc, #212]	@ (8007498 <ssd1306_WriteChar+0x10c>)
 80073c4:	885b      	ldrh	r3, [r3, #2]
 80073c6:	461a      	mov	r2, r3
 80073c8:	797b      	ldrb	r3, [r7, #5]
 80073ca:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80073cc:	2b40      	cmp	r3, #64	@ 0x40
 80073ce:	dd01      	ble.n	80073d4 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 80073d0:	2300      	movs	r3, #0
 80073d2:	e05c      	b.n	800748e <ssd1306_WriteChar+0x102>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 80073d4:	2300      	movs	r3, #0
 80073d6:	61fb      	str	r3, [r7, #28]
 80073d8:	e04c      	b.n	8007474 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 80073da:	68ba      	ldr	r2, [r7, #8]
 80073dc:	7bfb      	ldrb	r3, [r7, #15]
 80073de:	3b20      	subs	r3, #32
 80073e0:	7979      	ldrb	r1, [r7, #5]
 80073e2:	fb01 f303 	mul.w	r3, r1, r3
 80073e6:	4619      	mov	r1, r3
 80073e8:	69fb      	ldr	r3, [r7, #28]
 80073ea:	440b      	add	r3, r1
 80073ec:	005b      	lsls	r3, r3, #1
 80073ee:	4413      	add	r3, r2
 80073f0:	881b      	ldrh	r3, [r3, #0]
 80073f2:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 80073f4:	2300      	movs	r3, #0
 80073f6:	61bb      	str	r3, [r7, #24]
 80073f8:	e034      	b.n	8007464 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 80073fa:	697a      	ldr	r2, [r7, #20]
 80073fc:	69bb      	ldr	r3, [r7, #24]
 80073fe:	fa02 f303 	lsl.w	r3, r2, r3
 8007402:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007406:	2b00      	cmp	r3, #0
 8007408:	d012      	beq.n	8007430 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 800740a:	4b23      	ldr	r3, [pc, #140]	@ (8007498 <ssd1306_WriteChar+0x10c>)
 800740c:	881b      	ldrh	r3, [r3, #0]
 800740e:	b2da      	uxtb	r2, r3
 8007410:	69bb      	ldr	r3, [r7, #24]
 8007412:	b2db      	uxtb	r3, r3
 8007414:	4413      	add	r3, r2
 8007416:	b2d8      	uxtb	r0, r3
 8007418:	4b1f      	ldr	r3, [pc, #124]	@ (8007498 <ssd1306_WriteChar+0x10c>)
 800741a:	885b      	ldrh	r3, [r3, #2]
 800741c:	b2da      	uxtb	r2, r3
 800741e:	69fb      	ldr	r3, [r7, #28]
 8007420:	b2db      	uxtb	r3, r3
 8007422:	4413      	add	r3, r2
 8007424:	b2db      	uxtb	r3, r3
 8007426:	7bba      	ldrb	r2, [r7, #14]
 8007428:	4619      	mov	r1, r3
 800742a:	f7ff ff5d 	bl	80072e8 <ssd1306_DrawPixel>
 800742e:	e016      	b.n	800745e <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8007430:	4b19      	ldr	r3, [pc, #100]	@ (8007498 <ssd1306_WriteChar+0x10c>)
 8007432:	881b      	ldrh	r3, [r3, #0]
 8007434:	b2da      	uxtb	r2, r3
 8007436:	69bb      	ldr	r3, [r7, #24]
 8007438:	b2db      	uxtb	r3, r3
 800743a:	4413      	add	r3, r2
 800743c:	b2d8      	uxtb	r0, r3
 800743e:	4b16      	ldr	r3, [pc, #88]	@ (8007498 <ssd1306_WriteChar+0x10c>)
 8007440:	885b      	ldrh	r3, [r3, #2]
 8007442:	b2da      	uxtb	r2, r3
 8007444:	69fb      	ldr	r3, [r7, #28]
 8007446:	b2db      	uxtb	r3, r3
 8007448:	4413      	add	r3, r2
 800744a:	b2d9      	uxtb	r1, r3
 800744c:	7bbb      	ldrb	r3, [r7, #14]
 800744e:	2b00      	cmp	r3, #0
 8007450:	bf0c      	ite	eq
 8007452:	2301      	moveq	r3, #1
 8007454:	2300      	movne	r3, #0
 8007456:	b2db      	uxtb	r3, r3
 8007458:	461a      	mov	r2, r3
 800745a:	f7ff ff45 	bl	80072e8 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 800745e:	69bb      	ldr	r3, [r7, #24]
 8007460:	3301      	adds	r3, #1
 8007462:	61bb      	str	r3, [r7, #24]
 8007464:	793b      	ldrb	r3, [r7, #4]
 8007466:	461a      	mov	r2, r3
 8007468:	69bb      	ldr	r3, [r7, #24]
 800746a:	4293      	cmp	r3, r2
 800746c:	d3c5      	bcc.n	80073fa <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 800746e:	69fb      	ldr	r3, [r7, #28]
 8007470:	3301      	adds	r3, #1
 8007472:	61fb      	str	r3, [r7, #28]
 8007474:	797b      	ldrb	r3, [r7, #5]
 8007476:	461a      	mov	r2, r3
 8007478:	69fb      	ldr	r3, [r7, #28]
 800747a:	4293      	cmp	r3, r2
 800747c:	d3ad      	bcc.n	80073da <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 800747e:	4b06      	ldr	r3, [pc, #24]	@ (8007498 <ssd1306_WriteChar+0x10c>)
 8007480:	881b      	ldrh	r3, [r3, #0]
 8007482:	793a      	ldrb	r2, [r7, #4]
 8007484:	4413      	add	r3, r2
 8007486:	b29a      	uxth	r2, r3
 8007488:	4b03      	ldr	r3, [pc, #12]	@ (8007498 <ssd1306_WriteChar+0x10c>)
 800748a:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 800748c:	7bfb      	ldrb	r3, [r7, #15]
}
 800748e:	4618      	mov	r0, r3
 8007490:	3724      	adds	r7, #36	@ 0x24
 8007492:	46bd      	mov	sp, r7
 8007494:	bd90      	pop	{r4, r7, pc}
 8007496:	bf00      	nop
 8007498:	20000824 	.word	0x20000824

0800749c <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 800749c:	b580      	push	{r7, lr}
 800749e:	b084      	sub	sp, #16
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	60f8      	str	r0, [r7, #12]
 80074a4:	1d38      	adds	r0, r7, #4
 80074a6:	e880 0006 	stmia.w	r0, {r1, r2}
 80074aa:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 80074ac:	e012      	b.n	80074d4 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	7818      	ldrb	r0, [r3, #0]
 80074b2:	78fb      	ldrb	r3, [r7, #3]
 80074b4:	1d3a      	adds	r2, r7, #4
 80074b6:	ca06      	ldmia	r2, {r1, r2}
 80074b8:	f7ff ff68 	bl	800738c <ssd1306_WriteChar>
 80074bc:	4603      	mov	r3, r0
 80074be:	461a      	mov	r2, r3
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	781b      	ldrb	r3, [r3, #0]
 80074c4:	429a      	cmp	r2, r3
 80074c6:	d002      	beq.n	80074ce <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	781b      	ldrb	r3, [r3, #0]
 80074cc:	e008      	b.n	80074e0 <ssd1306_WriteString+0x44>
        }
        str++;
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	3301      	adds	r3, #1
 80074d2:	60fb      	str	r3, [r7, #12]
    while (*str) {
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	781b      	ldrb	r3, [r3, #0]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d1e8      	bne.n	80074ae <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	781b      	ldrb	r3, [r3, #0]
}
 80074e0:	4618      	mov	r0, r3
 80074e2:	3710      	adds	r7, #16
 80074e4:	46bd      	mov	sp, r7
 80074e6:	bd80      	pop	{r7, pc}

080074e8 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 80074e8:	b480      	push	{r7}
 80074ea:	b083      	sub	sp, #12
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	4603      	mov	r3, r0
 80074f0:	460a      	mov	r2, r1
 80074f2:	71fb      	strb	r3, [r7, #7]
 80074f4:	4613      	mov	r3, r2
 80074f6:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 80074f8:	79fb      	ldrb	r3, [r7, #7]
 80074fa:	b29a      	uxth	r2, r3
 80074fc:	4b05      	ldr	r3, [pc, #20]	@ (8007514 <ssd1306_SetCursor+0x2c>)
 80074fe:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8007500:	79bb      	ldrb	r3, [r7, #6]
 8007502:	b29a      	uxth	r2, r3
 8007504:	4b03      	ldr	r3, [pc, #12]	@ (8007514 <ssd1306_SetCursor+0x2c>)
 8007506:	805a      	strh	r2, [r3, #2]
}
 8007508:	bf00      	nop
 800750a:	370c      	adds	r7, #12
 800750c:	46bd      	mov	sp, r7
 800750e:	bc80      	pop	{r7}
 8007510:	4770      	bx	lr
 8007512:	bf00      	nop
 8007514:	20000824 	.word	0x20000824

08007518 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8007518:	b580      	push	{r7, lr}
 800751a:	b084      	sub	sp, #16
 800751c:	af00      	add	r7, sp, #0
 800751e:	4603      	mov	r3, r0
 8007520:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8007522:	2381      	movs	r3, #129	@ 0x81
 8007524:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8007526:	7bfb      	ldrb	r3, [r7, #15]
 8007528:	4618      	mov	r0, r3
 800752a:	f7ff fdf7 	bl	800711c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 800752e:	79fb      	ldrb	r3, [r7, #7]
 8007530:	4618      	mov	r0, r3
 8007532:	f7ff fdf3 	bl	800711c <ssd1306_WriteCommand>
}
 8007536:	bf00      	nop
 8007538:	3710      	adds	r7, #16
 800753a:	46bd      	mov	sp, r7
 800753c:	bd80      	pop	{r7, pc}
	...

08007540 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8007540:	b580      	push	{r7, lr}
 8007542:	b084      	sub	sp, #16
 8007544:	af00      	add	r7, sp, #0
 8007546:	4603      	mov	r3, r0
 8007548:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 800754a:	79fb      	ldrb	r3, [r7, #7]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d005      	beq.n	800755c <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8007550:	23af      	movs	r3, #175	@ 0xaf
 8007552:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8007554:	4b08      	ldr	r3, [pc, #32]	@ (8007578 <ssd1306_SetDisplayOn+0x38>)
 8007556:	2201      	movs	r2, #1
 8007558:	715a      	strb	r2, [r3, #5]
 800755a:	e004      	b.n	8007566 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 800755c:	23ae      	movs	r3, #174	@ 0xae
 800755e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8007560:	4b05      	ldr	r3, [pc, #20]	@ (8007578 <ssd1306_SetDisplayOn+0x38>)
 8007562:	2200      	movs	r2, #0
 8007564:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8007566:	7bfb      	ldrb	r3, [r7, #15]
 8007568:	4618      	mov	r0, r3
 800756a:	f7ff fdd7 	bl	800711c <ssd1306_WriteCommand>
}
 800756e:	bf00      	nop
 8007570:	3710      	adds	r7, #16
 8007572:	46bd      	mov	sp, r7
 8007574:	bd80      	pop	{r7, pc}
 8007576:	bf00      	nop
 8007578:	20000824 	.word	0x20000824

0800757c <__cvt>:
 800757c:	2b00      	cmp	r3, #0
 800757e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007582:	461d      	mov	r5, r3
 8007584:	bfbb      	ittet	lt
 8007586:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 800758a:	461d      	movlt	r5, r3
 800758c:	2300      	movge	r3, #0
 800758e:	232d      	movlt	r3, #45	@ 0x2d
 8007590:	b088      	sub	sp, #32
 8007592:	4614      	mov	r4, r2
 8007594:	bfb8      	it	lt
 8007596:	4614      	movlt	r4, r2
 8007598:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800759a:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 800759c:	7013      	strb	r3, [r2, #0]
 800759e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80075a0:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 80075a4:	f023 0820 	bic.w	r8, r3, #32
 80075a8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80075ac:	d005      	beq.n	80075ba <__cvt+0x3e>
 80075ae:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80075b2:	d100      	bne.n	80075b6 <__cvt+0x3a>
 80075b4:	3601      	adds	r6, #1
 80075b6:	2302      	movs	r3, #2
 80075b8:	e000      	b.n	80075bc <__cvt+0x40>
 80075ba:	2303      	movs	r3, #3
 80075bc:	aa07      	add	r2, sp, #28
 80075be:	9204      	str	r2, [sp, #16]
 80075c0:	aa06      	add	r2, sp, #24
 80075c2:	e9cd a202 	strd	sl, r2, [sp, #8]
 80075c6:	e9cd 3600 	strd	r3, r6, [sp]
 80075ca:	4622      	mov	r2, r4
 80075cc:	462b      	mov	r3, r5
 80075ce:	f001 f8bb 	bl	8008748 <_dtoa_r>
 80075d2:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80075d6:	4607      	mov	r7, r0
 80075d8:	d119      	bne.n	800760e <__cvt+0x92>
 80075da:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80075dc:	07db      	lsls	r3, r3, #31
 80075de:	d50e      	bpl.n	80075fe <__cvt+0x82>
 80075e0:	eb00 0906 	add.w	r9, r0, r6
 80075e4:	2200      	movs	r2, #0
 80075e6:	2300      	movs	r3, #0
 80075e8:	4620      	mov	r0, r4
 80075ea:	4629      	mov	r1, r5
 80075ec:	f7f9 f9dc 	bl	80009a8 <__aeabi_dcmpeq>
 80075f0:	b108      	cbz	r0, 80075f6 <__cvt+0x7a>
 80075f2:	f8cd 901c 	str.w	r9, [sp, #28]
 80075f6:	2230      	movs	r2, #48	@ 0x30
 80075f8:	9b07      	ldr	r3, [sp, #28]
 80075fa:	454b      	cmp	r3, r9
 80075fc:	d31e      	bcc.n	800763c <__cvt+0xc0>
 80075fe:	4638      	mov	r0, r7
 8007600:	9b07      	ldr	r3, [sp, #28]
 8007602:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8007604:	1bdb      	subs	r3, r3, r7
 8007606:	6013      	str	r3, [r2, #0]
 8007608:	b008      	add	sp, #32
 800760a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800760e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007612:	eb00 0906 	add.w	r9, r0, r6
 8007616:	d1e5      	bne.n	80075e4 <__cvt+0x68>
 8007618:	7803      	ldrb	r3, [r0, #0]
 800761a:	2b30      	cmp	r3, #48	@ 0x30
 800761c:	d10a      	bne.n	8007634 <__cvt+0xb8>
 800761e:	2200      	movs	r2, #0
 8007620:	2300      	movs	r3, #0
 8007622:	4620      	mov	r0, r4
 8007624:	4629      	mov	r1, r5
 8007626:	f7f9 f9bf 	bl	80009a8 <__aeabi_dcmpeq>
 800762a:	b918      	cbnz	r0, 8007634 <__cvt+0xb8>
 800762c:	f1c6 0601 	rsb	r6, r6, #1
 8007630:	f8ca 6000 	str.w	r6, [sl]
 8007634:	f8da 3000 	ldr.w	r3, [sl]
 8007638:	4499      	add	r9, r3
 800763a:	e7d3      	b.n	80075e4 <__cvt+0x68>
 800763c:	1c59      	adds	r1, r3, #1
 800763e:	9107      	str	r1, [sp, #28]
 8007640:	701a      	strb	r2, [r3, #0]
 8007642:	e7d9      	b.n	80075f8 <__cvt+0x7c>

08007644 <__exponent>:
 8007644:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007646:	2900      	cmp	r1, #0
 8007648:	bfb6      	itet	lt
 800764a:	232d      	movlt	r3, #45	@ 0x2d
 800764c:	232b      	movge	r3, #43	@ 0x2b
 800764e:	4249      	neglt	r1, r1
 8007650:	2909      	cmp	r1, #9
 8007652:	7002      	strb	r2, [r0, #0]
 8007654:	7043      	strb	r3, [r0, #1]
 8007656:	dd29      	ble.n	80076ac <__exponent+0x68>
 8007658:	f10d 0307 	add.w	r3, sp, #7
 800765c:	461d      	mov	r5, r3
 800765e:	270a      	movs	r7, #10
 8007660:	fbb1 f6f7 	udiv	r6, r1, r7
 8007664:	461a      	mov	r2, r3
 8007666:	fb07 1416 	mls	r4, r7, r6, r1
 800766a:	3430      	adds	r4, #48	@ 0x30
 800766c:	f802 4c01 	strb.w	r4, [r2, #-1]
 8007670:	460c      	mov	r4, r1
 8007672:	2c63      	cmp	r4, #99	@ 0x63
 8007674:	4631      	mov	r1, r6
 8007676:	f103 33ff 	add.w	r3, r3, #4294967295
 800767a:	dcf1      	bgt.n	8007660 <__exponent+0x1c>
 800767c:	3130      	adds	r1, #48	@ 0x30
 800767e:	1e94      	subs	r4, r2, #2
 8007680:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007684:	4623      	mov	r3, r4
 8007686:	1c41      	adds	r1, r0, #1
 8007688:	42ab      	cmp	r3, r5
 800768a:	d30a      	bcc.n	80076a2 <__exponent+0x5e>
 800768c:	f10d 0309 	add.w	r3, sp, #9
 8007690:	1a9b      	subs	r3, r3, r2
 8007692:	42ac      	cmp	r4, r5
 8007694:	bf88      	it	hi
 8007696:	2300      	movhi	r3, #0
 8007698:	3302      	adds	r3, #2
 800769a:	4403      	add	r3, r0
 800769c:	1a18      	subs	r0, r3, r0
 800769e:	b003      	add	sp, #12
 80076a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80076a2:	f813 6b01 	ldrb.w	r6, [r3], #1
 80076a6:	f801 6f01 	strb.w	r6, [r1, #1]!
 80076aa:	e7ed      	b.n	8007688 <__exponent+0x44>
 80076ac:	2330      	movs	r3, #48	@ 0x30
 80076ae:	3130      	adds	r1, #48	@ 0x30
 80076b0:	7083      	strb	r3, [r0, #2]
 80076b2:	70c1      	strb	r1, [r0, #3]
 80076b4:	1d03      	adds	r3, r0, #4
 80076b6:	e7f1      	b.n	800769c <__exponent+0x58>

080076b8 <_printf_float>:
 80076b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076bc:	b091      	sub	sp, #68	@ 0x44
 80076be:	460c      	mov	r4, r1
 80076c0:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 80076c4:	4616      	mov	r6, r2
 80076c6:	461f      	mov	r7, r3
 80076c8:	4605      	mov	r5, r0
 80076ca:	f000 ff1d 	bl	8008508 <_localeconv_r>
 80076ce:	6803      	ldr	r3, [r0, #0]
 80076d0:	4618      	mov	r0, r3
 80076d2:	9308      	str	r3, [sp, #32]
 80076d4:	f7f8 fd3c 	bl	8000150 <strlen>
 80076d8:	2300      	movs	r3, #0
 80076da:	930e      	str	r3, [sp, #56]	@ 0x38
 80076dc:	f8d8 3000 	ldr.w	r3, [r8]
 80076e0:	9009      	str	r0, [sp, #36]	@ 0x24
 80076e2:	3307      	adds	r3, #7
 80076e4:	f023 0307 	bic.w	r3, r3, #7
 80076e8:	f103 0208 	add.w	r2, r3, #8
 80076ec:	f894 a018 	ldrb.w	sl, [r4, #24]
 80076f0:	f8d4 b000 	ldr.w	fp, [r4]
 80076f4:	f8c8 2000 	str.w	r2, [r8]
 80076f8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80076fc:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007700:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007702:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8007706:	f04f 32ff 	mov.w	r2, #4294967295
 800770a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800770e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8007712:	4b9c      	ldr	r3, [pc, #624]	@ (8007984 <_printf_float+0x2cc>)
 8007714:	f7f9 f97a 	bl	8000a0c <__aeabi_dcmpun>
 8007718:	bb70      	cbnz	r0, 8007778 <_printf_float+0xc0>
 800771a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800771e:	f04f 32ff 	mov.w	r2, #4294967295
 8007722:	4b98      	ldr	r3, [pc, #608]	@ (8007984 <_printf_float+0x2cc>)
 8007724:	f7f9 f954 	bl	80009d0 <__aeabi_dcmple>
 8007728:	bb30      	cbnz	r0, 8007778 <_printf_float+0xc0>
 800772a:	2200      	movs	r2, #0
 800772c:	2300      	movs	r3, #0
 800772e:	4640      	mov	r0, r8
 8007730:	4649      	mov	r1, r9
 8007732:	f7f9 f943 	bl	80009bc <__aeabi_dcmplt>
 8007736:	b110      	cbz	r0, 800773e <_printf_float+0x86>
 8007738:	232d      	movs	r3, #45	@ 0x2d
 800773a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800773e:	4a92      	ldr	r2, [pc, #584]	@ (8007988 <_printf_float+0x2d0>)
 8007740:	4b92      	ldr	r3, [pc, #584]	@ (800798c <_printf_float+0x2d4>)
 8007742:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007746:	bf94      	ite	ls
 8007748:	4690      	movls	r8, r2
 800774a:	4698      	movhi	r8, r3
 800774c:	2303      	movs	r3, #3
 800774e:	f04f 0900 	mov.w	r9, #0
 8007752:	6123      	str	r3, [r4, #16]
 8007754:	f02b 0304 	bic.w	r3, fp, #4
 8007758:	6023      	str	r3, [r4, #0]
 800775a:	4633      	mov	r3, r6
 800775c:	4621      	mov	r1, r4
 800775e:	4628      	mov	r0, r5
 8007760:	9700      	str	r7, [sp, #0]
 8007762:	aa0f      	add	r2, sp, #60	@ 0x3c
 8007764:	f000 f9d4 	bl	8007b10 <_printf_common>
 8007768:	3001      	adds	r0, #1
 800776a:	f040 8090 	bne.w	800788e <_printf_float+0x1d6>
 800776e:	f04f 30ff 	mov.w	r0, #4294967295
 8007772:	b011      	add	sp, #68	@ 0x44
 8007774:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007778:	4642      	mov	r2, r8
 800777a:	464b      	mov	r3, r9
 800777c:	4640      	mov	r0, r8
 800777e:	4649      	mov	r1, r9
 8007780:	f7f9 f944 	bl	8000a0c <__aeabi_dcmpun>
 8007784:	b148      	cbz	r0, 800779a <_printf_float+0xe2>
 8007786:	464b      	mov	r3, r9
 8007788:	2b00      	cmp	r3, #0
 800778a:	bfb8      	it	lt
 800778c:	232d      	movlt	r3, #45	@ 0x2d
 800778e:	4a80      	ldr	r2, [pc, #512]	@ (8007990 <_printf_float+0x2d8>)
 8007790:	bfb8      	it	lt
 8007792:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8007796:	4b7f      	ldr	r3, [pc, #508]	@ (8007994 <_printf_float+0x2dc>)
 8007798:	e7d3      	b.n	8007742 <_printf_float+0x8a>
 800779a:	6863      	ldr	r3, [r4, #4]
 800779c:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 80077a0:	1c5a      	adds	r2, r3, #1
 80077a2:	d13f      	bne.n	8007824 <_printf_float+0x16c>
 80077a4:	2306      	movs	r3, #6
 80077a6:	6063      	str	r3, [r4, #4]
 80077a8:	2200      	movs	r2, #0
 80077aa:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 80077ae:	6023      	str	r3, [r4, #0]
 80077b0:	9206      	str	r2, [sp, #24]
 80077b2:	aa0e      	add	r2, sp, #56	@ 0x38
 80077b4:	e9cd a204 	strd	sl, r2, [sp, #16]
 80077b8:	aa0d      	add	r2, sp, #52	@ 0x34
 80077ba:	9203      	str	r2, [sp, #12]
 80077bc:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 80077c0:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80077c4:	6863      	ldr	r3, [r4, #4]
 80077c6:	4642      	mov	r2, r8
 80077c8:	9300      	str	r3, [sp, #0]
 80077ca:	4628      	mov	r0, r5
 80077cc:	464b      	mov	r3, r9
 80077ce:	910a      	str	r1, [sp, #40]	@ 0x28
 80077d0:	f7ff fed4 	bl	800757c <__cvt>
 80077d4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80077d6:	4680      	mov	r8, r0
 80077d8:	2947      	cmp	r1, #71	@ 0x47
 80077da:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80077dc:	d128      	bne.n	8007830 <_printf_float+0x178>
 80077de:	1cc8      	adds	r0, r1, #3
 80077e0:	db02      	blt.n	80077e8 <_printf_float+0x130>
 80077e2:	6863      	ldr	r3, [r4, #4]
 80077e4:	4299      	cmp	r1, r3
 80077e6:	dd40      	ble.n	800786a <_printf_float+0x1b2>
 80077e8:	f1aa 0a02 	sub.w	sl, sl, #2
 80077ec:	fa5f fa8a 	uxtb.w	sl, sl
 80077f0:	4652      	mov	r2, sl
 80077f2:	3901      	subs	r1, #1
 80077f4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80077f8:	910d      	str	r1, [sp, #52]	@ 0x34
 80077fa:	f7ff ff23 	bl	8007644 <__exponent>
 80077fe:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007800:	4681      	mov	r9, r0
 8007802:	1813      	adds	r3, r2, r0
 8007804:	2a01      	cmp	r2, #1
 8007806:	6123      	str	r3, [r4, #16]
 8007808:	dc02      	bgt.n	8007810 <_printf_float+0x158>
 800780a:	6822      	ldr	r2, [r4, #0]
 800780c:	07d2      	lsls	r2, r2, #31
 800780e:	d501      	bpl.n	8007814 <_printf_float+0x15c>
 8007810:	3301      	adds	r3, #1
 8007812:	6123      	str	r3, [r4, #16]
 8007814:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8007818:	2b00      	cmp	r3, #0
 800781a:	d09e      	beq.n	800775a <_printf_float+0xa2>
 800781c:	232d      	movs	r3, #45	@ 0x2d
 800781e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007822:	e79a      	b.n	800775a <_printf_float+0xa2>
 8007824:	2947      	cmp	r1, #71	@ 0x47
 8007826:	d1bf      	bne.n	80077a8 <_printf_float+0xf0>
 8007828:	2b00      	cmp	r3, #0
 800782a:	d1bd      	bne.n	80077a8 <_printf_float+0xf0>
 800782c:	2301      	movs	r3, #1
 800782e:	e7ba      	b.n	80077a6 <_printf_float+0xee>
 8007830:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007834:	d9dc      	bls.n	80077f0 <_printf_float+0x138>
 8007836:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800783a:	d118      	bne.n	800786e <_printf_float+0x1b6>
 800783c:	2900      	cmp	r1, #0
 800783e:	6863      	ldr	r3, [r4, #4]
 8007840:	dd0b      	ble.n	800785a <_printf_float+0x1a2>
 8007842:	6121      	str	r1, [r4, #16]
 8007844:	b913      	cbnz	r3, 800784c <_printf_float+0x194>
 8007846:	6822      	ldr	r2, [r4, #0]
 8007848:	07d0      	lsls	r0, r2, #31
 800784a:	d502      	bpl.n	8007852 <_printf_float+0x19a>
 800784c:	3301      	adds	r3, #1
 800784e:	440b      	add	r3, r1
 8007850:	6123      	str	r3, [r4, #16]
 8007852:	f04f 0900 	mov.w	r9, #0
 8007856:	65a1      	str	r1, [r4, #88]	@ 0x58
 8007858:	e7dc      	b.n	8007814 <_printf_float+0x15c>
 800785a:	b913      	cbnz	r3, 8007862 <_printf_float+0x1aa>
 800785c:	6822      	ldr	r2, [r4, #0]
 800785e:	07d2      	lsls	r2, r2, #31
 8007860:	d501      	bpl.n	8007866 <_printf_float+0x1ae>
 8007862:	3302      	adds	r3, #2
 8007864:	e7f4      	b.n	8007850 <_printf_float+0x198>
 8007866:	2301      	movs	r3, #1
 8007868:	e7f2      	b.n	8007850 <_printf_float+0x198>
 800786a:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800786e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007870:	4299      	cmp	r1, r3
 8007872:	db05      	blt.n	8007880 <_printf_float+0x1c8>
 8007874:	6823      	ldr	r3, [r4, #0]
 8007876:	6121      	str	r1, [r4, #16]
 8007878:	07d8      	lsls	r0, r3, #31
 800787a:	d5ea      	bpl.n	8007852 <_printf_float+0x19a>
 800787c:	1c4b      	adds	r3, r1, #1
 800787e:	e7e7      	b.n	8007850 <_printf_float+0x198>
 8007880:	2900      	cmp	r1, #0
 8007882:	bfcc      	ite	gt
 8007884:	2201      	movgt	r2, #1
 8007886:	f1c1 0202 	rsble	r2, r1, #2
 800788a:	4413      	add	r3, r2
 800788c:	e7e0      	b.n	8007850 <_printf_float+0x198>
 800788e:	6823      	ldr	r3, [r4, #0]
 8007890:	055a      	lsls	r2, r3, #21
 8007892:	d407      	bmi.n	80078a4 <_printf_float+0x1ec>
 8007894:	6923      	ldr	r3, [r4, #16]
 8007896:	4642      	mov	r2, r8
 8007898:	4631      	mov	r1, r6
 800789a:	4628      	mov	r0, r5
 800789c:	47b8      	blx	r7
 800789e:	3001      	adds	r0, #1
 80078a0:	d12b      	bne.n	80078fa <_printf_float+0x242>
 80078a2:	e764      	b.n	800776e <_printf_float+0xb6>
 80078a4:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80078a8:	f240 80dc 	bls.w	8007a64 <_printf_float+0x3ac>
 80078ac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80078b0:	2200      	movs	r2, #0
 80078b2:	2300      	movs	r3, #0
 80078b4:	f7f9 f878 	bl	80009a8 <__aeabi_dcmpeq>
 80078b8:	2800      	cmp	r0, #0
 80078ba:	d033      	beq.n	8007924 <_printf_float+0x26c>
 80078bc:	2301      	movs	r3, #1
 80078be:	4631      	mov	r1, r6
 80078c0:	4628      	mov	r0, r5
 80078c2:	4a35      	ldr	r2, [pc, #212]	@ (8007998 <_printf_float+0x2e0>)
 80078c4:	47b8      	blx	r7
 80078c6:	3001      	adds	r0, #1
 80078c8:	f43f af51 	beq.w	800776e <_printf_float+0xb6>
 80078cc:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 80078d0:	4543      	cmp	r3, r8
 80078d2:	db02      	blt.n	80078da <_printf_float+0x222>
 80078d4:	6823      	ldr	r3, [r4, #0]
 80078d6:	07d8      	lsls	r0, r3, #31
 80078d8:	d50f      	bpl.n	80078fa <_printf_float+0x242>
 80078da:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80078de:	4631      	mov	r1, r6
 80078e0:	4628      	mov	r0, r5
 80078e2:	47b8      	blx	r7
 80078e4:	3001      	adds	r0, #1
 80078e6:	f43f af42 	beq.w	800776e <_printf_float+0xb6>
 80078ea:	f04f 0900 	mov.w	r9, #0
 80078ee:	f108 38ff 	add.w	r8, r8, #4294967295
 80078f2:	f104 0a1a 	add.w	sl, r4, #26
 80078f6:	45c8      	cmp	r8, r9
 80078f8:	dc09      	bgt.n	800790e <_printf_float+0x256>
 80078fa:	6823      	ldr	r3, [r4, #0]
 80078fc:	079b      	lsls	r3, r3, #30
 80078fe:	f100 8102 	bmi.w	8007b06 <_printf_float+0x44e>
 8007902:	68e0      	ldr	r0, [r4, #12]
 8007904:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007906:	4298      	cmp	r0, r3
 8007908:	bfb8      	it	lt
 800790a:	4618      	movlt	r0, r3
 800790c:	e731      	b.n	8007772 <_printf_float+0xba>
 800790e:	2301      	movs	r3, #1
 8007910:	4652      	mov	r2, sl
 8007912:	4631      	mov	r1, r6
 8007914:	4628      	mov	r0, r5
 8007916:	47b8      	blx	r7
 8007918:	3001      	adds	r0, #1
 800791a:	f43f af28 	beq.w	800776e <_printf_float+0xb6>
 800791e:	f109 0901 	add.w	r9, r9, #1
 8007922:	e7e8      	b.n	80078f6 <_printf_float+0x23e>
 8007924:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007926:	2b00      	cmp	r3, #0
 8007928:	dc38      	bgt.n	800799c <_printf_float+0x2e4>
 800792a:	2301      	movs	r3, #1
 800792c:	4631      	mov	r1, r6
 800792e:	4628      	mov	r0, r5
 8007930:	4a19      	ldr	r2, [pc, #100]	@ (8007998 <_printf_float+0x2e0>)
 8007932:	47b8      	blx	r7
 8007934:	3001      	adds	r0, #1
 8007936:	f43f af1a 	beq.w	800776e <_printf_float+0xb6>
 800793a:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800793e:	ea59 0303 	orrs.w	r3, r9, r3
 8007942:	d102      	bne.n	800794a <_printf_float+0x292>
 8007944:	6823      	ldr	r3, [r4, #0]
 8007946:	07d9      	lsls	r1, r3, #31
 8007948:	d5d7      	bpl.n	80078fa <_printf_float+0x242>
 800794a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800794e:	4631      	mov	r1, r6
 8007950:	4628      	mov	r0, r5
 8007952:	47b8      	blx	r7
 8007954:	3001      	adds	r0, #1
 8007956:	f43f af0a 	beq.w	800776e <_printf_float+0xb6>
 800795a:	f04f 0a00 	mov.w	sl, #0
 800795e:	f104 0b1a 	add.w	fp, r4, #26
 8007962:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007964:	425b      	negs	r3, r3
 8007966:	4553      	cmp	r3, sl
 8007968:	dc01      	bgt.n	800796e <_printf_float+0x2b6>
 800796a:	464b      	mov	r3, r9
 800796c:	e793      	b.n	8007896 <_printf_float+0x1de>
 800796e:	2301      	movs	r3, #1
 8007970:	465a      	mov	r2, fp
 8007972:	4631      	mov	r1, r6
 8007974:	4628      	mov	r0, r5
 8007976:	47b8      	blx	r7
 8007978:	3001      	adds	r0, #1
 800797a:	f43f aef8 	beq.w	800776e <_printf_float+0xb6>
 800797e:	f10a 0a01 	add.w	sl, sl, #1
 8007982:	e7ee      	b.n	8007962 <_printf_float+0x2aa>
 8007984:	7fefffff 	.word	0x7fefffff
 8007988:	0800c4dc 	.word	0x0800c4dc
 800798c:	0800c4e0 	.word	0x0800c4e0
 8007990:	0800c4e4 	.word	0x0800c4e4
 8007994:	0800c4e8 	.word	0x0800c4e8
 8007998:	0800c4ec 	.word	0x0800c4ec
 800799c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800799e:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80079a2:	4553      	cmp	r3, sl
 80079a4:	bfa8      	it	ge
 80079a6:	4653      	movge	r3, sl
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	4699      	mov	r9, r3
 80079ac:	dc36      	bgt.n	8007a1c <_printf_float+0x364>
 80079ae:	f04f 0b00 	mov.w	fp, #0
 80079b2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80079b6:	f104 021a 	add.w	r2, r4, #26
 80079ba:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80079bc:	930a      	str	r3, [sp, #40]	@ 0x28
 80079be:	eba3 0309 	sub.w	r3, r3, r9
 80079c2:	455b      	cmp	r3, fp
 80079c4:	dc31      	bgt.n	8007a2a <_printf_float+0x372>
 80079c6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80079c8:	459a      	cmp	sl, r3
 80079ca:	dc3a      	bgt.n	8007a42 <_printf_float+0x38a>
 80079cc:	6823      	ldr	r3, [r4, #0]
 80079ce:	07da      	lsls	r2, r3, #31
 80079d0:	d437      	bmi.n	8007a42 <_printf_float+0x38a>
 80079d2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80079d4:	ebaa 0903 	sub.w	r9, sl, r3
 80079d8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80079da:	ebaa 0303 	sub.w	r3, sl, r3
 80079de:	4599      	cmp	r9, r3
 80079e0:	bfa8      	it	ge
 80079e2:	4699      	movge	r9, r3
 80079e4:	f1b9 0f00 	cmp.w	r9, #0
 80079e8:	dc33      	bgt.n	8007a52 <_printf_float+0x39a>
 80079ea:	f04f 0800 	mov.w	r8, #0
 80079ee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80079f2:	f104 0b1a 	add.w	fp, r4, #26
 80079f6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80079f8:	ebaa 0303 	sub.w	r3, sl, r3
 80079fc:	eba3 0309 	sub.w	r3, r3, r9
 8007a00:	4543      	cmp	r3, r8
 8007a02:	f77f af7a 	ble.w	80078fa <_printf_float+0x242>
 8007a06:	2301      	movs	r3, #1
 8007a08:	465a      	mov	r2, fp
 8007a0a:	4631      	mov	r1, r6
 8007a0c:	4628      	mov	r0, r5
 8007a0e:	47b8      	blx	r7
 8007a10:	3001      	adds	r0, #1
 8007a12:	f43f aeac 	beq.w	800776e <_printf_float+0xb6>
 8007a16:	f108 0801 	add.w	r8, r8, #1
 8007a1a:	e7ec      	b.n	80079f6 <_printf_float+0x33e>
 8007a1c:	4642      	mov	r2, r8
 8007a1e:	4631      	mov	r1, r6
 8007a20:	4628      	mov	r0, r5
 8007a22:	47b8      	blx	r7
 8007a24:	3001      	adds	r0, #1
 8007a26:	d1c2      	bne.n	80079ae <_printf_float+0x2f6>
 8007a28:	e6a1      	b.n	800776e <_printf_float+0xb6>
 8007a2a:	2301      	movs	r3, #1
 8007a2c:	4631      	mov	r1, r6
 8007a2e:	4628      	mov	r0, r5
 8007a30:	920a      	str	r2, [sp, #40]	@ 0x28
 8007a32:	47b8      	blx	r7
 8007a34:	3001      	adds	r0, #1
 8007a36:	f43f ae9a 	beq.w	800776e <_printf_float+0xb6>
 8007a3a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007a3c:	f10b 0b01 	add.w	fp, fp, #1
 8007a40:	e7bb      	b.n	80079ba <_printf_float+0x302>
 8007a42:	4631      	mov	r1, r6
 8007a44:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007a48:	4628      	mov	r0, r5
 8007a4a:	47b8      	blx	r7
 8007a4c:	3001      	adds	r0, #1
 8007a4e:	d1c0      	bne.n	80079d2 <_printf_float+0x31a>
 8007a50:	e68d      	b.n	800776e <_printf_float+0xb6>
 8007a52:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007a54:	464b      	mov	r3, r9
 8007a56:	4631      	mov	r1, r6
 8007a58:	4628      	mov	r0, r5
 8007a5a:	4442      	add	r2, r8
 8007a5c:	47b8      	blx	r7
 8007a5e:	3001      	adds	r0, #1
 8007a60:	d1c3      	bne.n	80079ea <_printf_float+0x332>
 8007a62:	e684      	b.n	800776e <_printf_float+0xb6>
 8007a64:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8007a68:	f1ba 0f01 	cmp.w	sl, #1
 8007a6c:	dc01      	bgt.n	8007a72 <_printf_float+0x3ba>
 8007a6e:	07db      	lsls	r3, r3, #31
 8007a70:	d536      	bpl.n	8007ae0 <_printf_float+0x428>
 8007a72:	2301      	movs	r3, #1
 8007a74:	4642      	mov	r2, r8
 8007a76:	4631      	mov	r1, r6
 8007a78:	4628      	mov	r0, r5
 8007a7a:	47b8      	blx	r7
 8007a7c:	3001      	adds	r0, #1
 8007a7e:	f43f ae76 	beq.w	800776e <_printf_float+0xb6>
 8007a82:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007a86:	4631      	mov	r1, r6
 8007a88:	4628      	mov	r0, r5
 8007a8a:	47b8      	blx	r7
 8007a8c:	3001      	adds	r0, #1
 8007a8e:	f43f ae6e 	beq.w	800776e <_printf_float+0xb6>
 8007a92:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007a96:	2200      	movs	r2, #0
 8007a98:	2300      	movs	r3, #0
 8007a9a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007a9e:	f7f8 ff83 	bl	80009a8 <__aeabi_dcmpeq>
 8007aa2:	b9c0      	cbnz	r0, 8007ad6 <_printf_float+0x41e>
 8007aa4:	4653      	mov	r3, sl
 8007aa6:	f108 0201 	add.w	r2, r8, #1
 8007aaa:	4631      	mov	r1, r6
 8007aac:	4628      	mov	r0, r5
 8007aae:	47b8      	blx	r7
 8007ab0:	3001      	adds	r0, #1
 8007ab2:	d10c      	bne.n	8007ace <_printf_float+0x416>
 8007ab4:	e65b      	b.n	800776e <_printf_float+0xb6>
 8007ab6:	2301      	movs	r3, #1
 8007ab8:	465a      	mov	r2, fp
 8007aba:	4631      	mov	r1, r6
 8007abc:	4628      	mov	r0, r5
 8007abe:	47b8      	blx	r7
 8007ac0:	3001      	adds	r0, #1
 8007ac2:	f43f ae54 	beq.w	800776e <_printf_float+0xb6>
 8007ac6:	f108 0801 	add.w	r8, r8, #1
 8007aca:	45d0      	cmp	r8, sl
 8007acc:	dbf3      	blt.n	8007ab6 <_printf_float+0x3fe>
 8007ace:	464b      	mov	r3, r9
 8007ad0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007ad4:	e6e0      	b.n	8007898 <_printf_float+0x1e0>
 8007ad6:	f04f 0800 	mov.w	r8, #0
 8007ada:	f104 0b1a 	add.w	fp, r4, #26
 8007ade:	e7f4      	b.n	8007aca <_printf_float+0x412>
 8007ae0:	2301      	movs	r3, #1
 8007ae2:	4642      	mov	r2, r8
 8007ae4:	e7e1      	b.n	8007aaa <_printf_float+0x3f2>
 8007ae6:	2301      	movs	r3, #1
 8007ae8:	464a      	mov	r2, r9
 8007aea:	4631      	mov	r1, r6
 8007aec:	4628      	mov	r0, r5
 8007aee:	47b8      	blx	r7
 8007af0:	3001      	adds	r0, #1
 8007af2:	f43f ae3c 	beq.w	800776e <_printf_float+0xb6>
 8007af6:	f108 0801 	add.w	r8, r8, #1
 8007afa:	68e3      	ldr	r3, [r4, #12]
 8007afc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8007afe:	1a5b      	subs	r3, r3, r1
 8007b00:	4543      	cmp	r3, r8
 8007b02:	dcf0      	bgt.n	8007ae6 <_printf_float+0x42e>
 8007b04:	e6fd      	b.n	8007902 <_printf_float+0x24a>
 8007b06:	f04f 0800 	mov.w	r8, #0
 8007b0a:	f104 0919 	add.w	r9, r4, #25
 8007b0e:	e7f4      	b.n	8007afa <_printf_float+0x442>

08007b10 <_printf_common>:
 8007b10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b14:	4616      	mov	r6, r2
 8007b16:	4698      	mov	r8, r3
 8007b18:	688a      	ldr	r2, [r1, #8]
 8007b1a:	690b      	ldr	r3, [r1, #16]
 8007b1c:	4607      	mov	r7, r0
 8007b1e:	4293      	cmp	r3, r2
 8007b20:	bfb8      	it	lt
 8007b22:	4613      	movlt	r3, r2
 8007b24:	6033      	str	r3, [r6, #0]
 8007b26:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007b2a:	460c      	mov	r4, r1
 8007b2c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007b30:	b10a      	cbz	r2, 8007b36 <_printf_common+0x26>
 8007b32:	3301      	adds	r3, #1
 8007b34:	6033      	str	r3, [r6, #0]
 8007b36:	6823      	ldr	r3, [r4, #0]
 8007b38:	0699      	lsls	r1, r3, #26
 8007b3a:	bf42      	ittt	mi
 8007b3c:	6833      	ldrmi	r3, [r6, #0]
 8007b3e:	3302      	addmi	r3, #2
 8007b40:	6033      	strmi	r3, [r6, #0]
 8007b42:	6825      	ldr	r5, [r4, #0]
 8007b44:	f015 0506 	ands.w	r5, r5, #6
 8007b48:	d106      	bne.n	8007b58 <_printf_common+0x48>
 8007b4a:	f104 0a19 	add.w	sl, r4, #25
 8007b4e:	68e3      	ldr	r3, [r4, #12]
 8007b50:	6832      	ldr	r2, [r6, #0]
 8007b52:	1a9b      	subs	r3, r3, r2
 8007b54:	42ab      	cmp	r3, r5
 8007b56:	dc2b      	bgt.n	8007bb0 <_printf_common+0xa0>
 8007b58:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007b5c:	6822      	ldr	r2, [r4, #0]
 8007b5e:	3b00      	subs	r3, #0
 8007b60:	bf18      	it	ne
 8007b62:	2301      	movne	r3, #1
 8007b64:	0692      	lsls	r2, r2, #26
 8007b66:	d430      	bmi.n	8007bca <_printf_common+0xba>
 8007b68:	4641      	mov	r1, r8
 8007b6a:	4638      	mov	r0, r7
 8007b6c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007b70:	47c8      	blx	r9
 8007b72:	3001      	adds	r0, #1
 8007b74:	d023      	beq.n	8007bbe <_printf_common+0xae>
 8007b76:	6823      	ldr	r3, [r4, #0]
 8007b78:	6922      	ldr	r2, [r4, #16]
 8007b7a:	f003 0306 	and.w	r3, r3, #6
 8007b7e:	2b04      	cmp	r3, #4
 8007b80:	bf14      	ite	ne
 8007b82:	2500      	movne	r5, #0
 8007b84:	6833      	ldreq	r3, [r6, #0]
 8007b86:	f04f 0600 	mov.w	r6, #0
 8007b8a:	bf08      	it	eq
 8007b8c:	68e5      	ldreq	r5, [r4, #12]
 8007b8e:	f104 041a 	add.w	r4, r4, #26
 8007b92:	bf08      	it	eq
 8007b94:	1aed      	subeq	r5, r5, r3
 8007b96:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8007b9a:	bf08      	it	eq
 8007b9c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007ba0:	4293      	cmp	r3, r2
 8007ba2:	bfc4      	itt	gt
 8007ba4:	1a9b      	subgt	r3, r3, r2
 8007ba6:	18ed      	addgt	r5, r5, r3
 8007ba8:	42b5      	cmp	r5, r6
 8007baa:	d11a      	bne.n	8007be2 <_printf_common+0xd2>
 8007bac:	2000      	movs	r0, #0
 8007bae:	e008      	b.n	8007bc2 <_printf_common+0xb2>
 8007bb0:	2301      	movs	r3, #1
 8007bb2:	4652      	mov	r2, sl
 8007bb4:	4641      	mov	r1, r8
 8007bb6:	4638      	mov	r0, r7
 8007bb8:	47c8      	blx	r9
 8007bba:	3001      	adds	r0, #1
 8007bbc:	d103      	bne.n	8007bc6 <_printf_common+0xb6>
 8007bbe:	f04f 30ff 	mov.w	r0, #4294967295
 8007bc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007bc6:	3501      	adds	r5, #1
 8007bc8:	e7c1      	b.n	8007b4e <_printf_common+0x3e>
 8007bca:	2030      	movs	r0, #48	@ 0x30
 8007bcc:	18e1      	adds	r1, r4, r3
 8007bce:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007bd2:	1c5a      	adds	r2, r3, #1
 8007bd4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007bd8:	4422      	add	r2, r4
 8007bda:	3302      	adds	r3, #2
 8007bdc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007be0:	e7c2      	b.n	8007b68 <_printf_common+0x58>
 8007be2:	2301      	movs	r3, #1
 8007be4:	4622      	mov	r2, r4
 8007be6:	4641      	mov	r1, r8
 8007be8:	4638      	mov	r0, r7
 8007bea:	47c8      	blx	r9
 8007bec:	3001      	adds	r0, #1
 8007bee:	d0e6      	beq.n	8007bbe <_printf_common+0xae>
 8007bf0:	3601      	adds	r6, #1
 8007bf2:	e7d9      	b.n	8007ba8 <_printf_common+0x98>

08007bf4 <_printf_i>:
 8007bf4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007bf8:	7e0f      	ldrb	r7, [r1, #24]
 8007bfa:	4691      	mov	r9, r2
 8007bfc:	2f78      	cmp	r7, #120	@ 0x78
 8007bfe:	4680      	mov	r8, r0
 8007c00:	460c      	mov	r4, r1
 8007c02:	469a      	mov	sl, r3
 8007c04:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007c06:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007c0a:	d807      	bhi.n	8007c1c <_printf_i+0x28>
 8007c0c:	2f62      	cmp	r7, #98	@ 0x62
 8007c0e:	d80a      	bhi.n	8007c26 <_printf_i+0x32>
 8007c10:	2f00      	cmp	r7, #0
 8007c12:	f000 80d3 	beq.w	8007dbc <_printf_i+0x1c8>
 8007c16:	2f58      	cmp	r7, #88	@ 0x58
 8007c18:	f000 80ba 	beq.w	8007d90 <_printf_i+0x19c>
 8007c1c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007c20:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007c24:	e03a      	b.n	8007c9c <_printf_i+0xa8>
 8007c26:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007c2a:	2b15      	cmp	r3, #21
 8007c2c:	d8f6      	bhi.n	8007c1c <_printf_i+0x28>
 8007c2e:	a101      	add	r1, pc, #4	@ (adr r1, 8007c34 <_printf_i+0x40>)
 8007c30:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007c34:	08007c8d 	.word	0x08007c8d
 8007c38:	08007ca1 	.word	0x08007ca1
 8007c3c:	08007c1d 	.word	0x08007c1d
 8007c40:	08007c1d 	.word	0x08007c1d
 8007c44:	08007c1d 	.word	0x08007c1d
 8007c48:	08007c1d 	.word	0x08007c1d
 8007c4c:	08007ca1 	.word	0x08007ca1
 8007c50:	08007c1d 	.word	0x08007c1d
 8007c54:	08007c1d 	.word	0x08007c1d
 8007c58:	08007c1d 	.word	0x08007c1d
 8007c5c:	08007c1d 	.word	0x08007c1d
 8007c60:	08007da3 	.word	0x08007da3
 8007c64:	08007ccb 	.word	0x08007ccb
 8007c68:	08007d5d 	.word	0x08007d5d
 8007c6c:	08007c1d 	.word	0x08007c1d
 8007c70:	08007c1d 	.word	0x08007c1d
 8007c74:	08007dc5 	.word	0x08007dc5
 8007c78:	08007c1d 	.word	0x08007c1d
 8007c7c:	08007ccb 	.word	0x08007ccb
 8007c80:	08007c1d 	.word	0x08007c1d
 8007c84:	08007c1d 	.word	0x08007c1d
 8007c88:	08007d65 	.word	0x08007d65
 8007c8c:	6833      	ldr	r3, [r6, #0]
 8007c8e:	1d1a      	adds	r2, r3, #4
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	6032      	str	r2, [r6, #0]
 8007c94:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007c98:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007c9c:	2301      	movs	r3, #1
 8007c9e:	e09e      	b.n	8007dde <_printf_i+0x1ea>
 8007ca0:	6833      	ldr	r3, [r6, #0]
 8007ca2:	6820      	ldr	r0, [r4, #0]
 8007ca4:	1d19      	adds	r1, r3, #4
 8007ca6:	6031      	str	r1, [r6, #0]
 8007ca8:	0606      	lsls	r6, r0, #24
 8007caa:	d501      	bpl.n	8007cb0 <_printf_i+0xbc>
 8007cac:	681d      	ldr	r5, [r3, #0]
 8007cae:	e003      	b.n	8007cb8 <_printf_i+0xc4>
 8007cb0:	0645      	lsls	r5, r0, #25
 8007cb2:	d5fb      	bpl.n	8007cac <_printf_i+0xb8>
 8007cb4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007cb8:	2d00      	cmp	r5, #0
 8007cba:	da03      	bge.n	8007cc4 <_printf_i+0xd0>
 8007cbc:	232d      	movs	r3, #45	@ 0x2d
 8007cbe:	426d      	negs	r5, r5
 8007cc0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007cc4:	230a      	movs	r3, #10
 8007cc6:	4859      	ldr	r0, [pc, #356]	@ (8007e2c <_printf_i+0x238>)
 8007cc8:	e011      	b.n	8007cee <_printf_i+0xfa>
 8007cca:	6821      	ldr	r1, [r4, #0]
 8007ccc:	6833      	ldr	r3, [r6, #0]
 8007cce:	0608      	lsls	r0, r1, #24
 8007cd0:	f853 5b04 	ldr.w	r5, [r3], #4
 8007cd4:	d402      	bmi.n	8007cdc <_printf_i+0xe8>
 8007cd6:	0649      	lsls	r1, r1, #25
 8007cd8:	bf48      	it	mi
 8007cda:	b2ad      	uxthmi	r5, r5
 8007cdc:	2f6f      	cmp	r7, #111	@ 0x6f
 8007cde:	6033      	str	r3, [r6, #0]
 8007ce0:	bf14      	ite	ne
 8007ce2:	230a      	movne	r3, #10
 8007ce4:	2308      	moveq	r3, #8
 8007ce6:	4851      	ldr	r0, [pc, #324]	@ (8007e2c <_printf_i+0x238>)
 8007ce8:	2100      	movs	r1, #0
 8007cea:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007cee:	6866      	ldr	r6, [r4, #4]
 8007cf0:	2e00      	cmp	r6, #0
 8007cf2:	bfa8      	it	ge
 8007cf4:	6821      	ldrge	r1, [r4, #0]
 8007cf6:	60a6      	str	r6, [r4, #8]
 8007cf8:	bfa4      	itt	ge
 8007cfa:	f021 0104 	bicge.w	r1, r1, #4
 8007cfe:	6021      	strge	r1, [r4, #0]
 8007d00:	b90d      	cbnz	r5, 8007d06 <_printf_i+0x112>
 8007d02:	2e00      	cmp	r6, #0
 8007d04:	d04b      	beq.n	8007d9e <_printf_i+0x1aa>
 8007d06:	4616      	mov	r6, r2
 8007d08:	fbb5 f1f3 	udiv	r1, r5, r3
 8007d0c:	fb03 5711 	mls	r7, r3, r1, r5
 8007d10:	5dc7      	ldrb	r7, [r0, r7]
 8007d12:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007d16:	462f      	mov	r7, r5
 8007d18:	42bb      	cmp	r3, r7
 8007d1a:	460d      	mov	r5, r1
 8007d1c:	d9f4      	bls.n	8007d08 <_printf_i+0x114>
 8007d1e:	2b08      	cmp	r3, #8
 8007d20:	d10b      	bne.n	8007d3a <_printf_i+0x146>
 8007d22:	6823      	ldr	r3, [r4, #0]
 8007d24:	07df      	lsls	r7, r3, #31
 8007d26:	d508      	bpl.n	8007d3a <_printf_i+0x146>
 8007d28:	6923      	ldr	r3, [r4, #16]
 8007d2a:	6861      	ldr	r1, [r4, #4]
 8007d2c:	4299      	cmp	r1, r3
 8007d2e:	bfde      	ittt	le
 8007d30:	2330      	movle	r3, #48	@ 0x30
 8007d32:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007d36:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007d3a:	1b92      	subs	r2, r2, r6
 8007d3c:	6122      	str	r2, [r4, #16]
 8007d3e:	464b      	mov	r3, r9
 8007d40:	4621      	mov	r1, r4
 8007d42:	4640      	mov	r0, r8
 8007d44:	f8cd a000 	str.w	sl, [sp]
 8007d48:	aa03      	add	r2, sp, #12
 8007d4a:	f7ff fee1 	bl	8007b10 <_printf_common>
 8007d4e:	3001      	adds	r0, #1
 8007d50:	d14a      	bne.n	8007de8 <_printf_i+0x1f4>
 8007d52:	f04f 30ff 	mov.w	r0, #4294967295
 8007d56:	b004      	add	sp, #16
 8007d58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d5c:	6823      	ldr	r3, [r4, #0]
 8007d5e:	f043 0320 	orr.w	r3, r3, #32
 8007d62:	6023      	str	r3, [r4, #0]
 8007d64:	2778      	movs	r7, #120	@ 0x78
 8007d66:	4832      	ldr	r0, [pc, #200]	@ (8007e30 <_printf_i+0x23c>)
 8007d68:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007d6c:	6823      	ldr	r3, [r4, #0]
 8007d6e:	6831      	ldr	r1, [r6, #0]
 8007d70:	061f      	lsls	r7, r3, #24
 8007d72:	f851 5b04 	ldr.w	r5, [r1], #4
 8007d76:	d402      	bmi.n	8007d7e <_printf_i+0x18a>
 8007d78:	065f      	lsls	r7, r3, #25
 8007d7a:	bf48      	it	mi
 8007d7c:	b2ad      	uxthmi	r5, r5
 8007d7e:	6031      	str	r1, [r6, #0]
 8007d80:	07d9      	lsls	r1, r3, #31
 8007d82:	bf44      	itt	mi
 8007d84:	f043 0320 	orrmi.w	r3, r3, #32
 8007d88:	6023      	strmi	r3, [r4, #0]
 8007d8a:	b11d      	cbz	r5, 8007d94 <_printf_i+0x1a0>
 8007d8c:	2310      	movs	r3, #16
 8007d8e:	e7ab      	b.n	8007ce8 <_printf_i+0xf4>
 8007d90:	4826      	ldr	r0, [pc, #152]	@ (8007e2c <_printf_i+0x238>)
 8007d92:	e7e9      	b.n	8007d68 <_printf_i+0x174>
 8007d94:	6823      	ldr	r3, [r4, #0]
 8007d96:	f023 0320 	bic.w	r3, r3, #32
 8007d9a:	6023      	str	r3, [r4, #0]
 8007d9c:	e7f6      	b.n	8007d8c <_printf_i+0x198>
 8007d9e:	4616      	mov	r6, r2
 8007da0:	e7bd      	b.n	8007d1e <_printf_i+0x12a>
 8007da2:	6833      	ldr	r3, [r6, #0]
 8007da4:	6825      	ldr	r5, [r4, #0]
 8007da6:	1d18      	adds	r0, r3, #4
 8007da8:	6961      	ldr	r1, [r4, #20]
 8007daa:	6030      	str	r0, [r6, #0]
 8007dac:	062e      	lsls	r6, r5, #24
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	d501      	bpl.n	8007db6 <_printf_i+0x1c2>
 8007db2:	6019      	str	r1, [r3, #0]
 8007db4:	e002      	b.n	8007dbc <_printf_i+0x1c8>
 8007db6:	0668      	lsls	r0, r5, #25
 8007db8:	d5fb      	bpl.n	8007db2 <_printf_i+0x1be>
 8007dba:	8019      	strh	r1, [r3, #0]
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	4616      	mov	r6, r2
 8007dc0:	6123      	str	r3, [r4, #16]
 8007dc2:	e7bc      	b.n	8007d3e <_printf_i+0x14a>
 8007dc4:	6833      	ldr	r3, [r6, #0]
 8007dc6:	2100      	movs	r1, #0
 8007dc8:	1d1a      	adds	r2, r3, #4
 8007dca:	6032      	str	r2, [r6, #0]
 8007dcc:	681e      	ldr	r6, [r3, #0]
 8007dce:	6862      	ldr	r2, [r4, #4]
 8007dd0:	4630      	mov	r0, r6
 8007dd2:	f000 fc10 	bl	80085f6 <memchr>
 8007dd6:	b108      	cbz	r0, 8007ddc <_printf_i+0x1e8>
 8007dd8:	1b80      	subs	r0, r0, r6
 8007dda:	6060      	str	r0, [r4, #4]
 8007ddc:	6863      	ldr	r3, [r4, #4]
 8007dde:	6123      	str	r3, [r4, #16]
 8007de0:	2300      	movs	r3, #0
 8007de2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007de6:	e7aa      	b.n	8007d3e <_printf_i+0x14a>
 8007de8:	4632      	mov	r2, r6
 8007dea:	4649      	mov	r1, r9
 8007dec:	4640      	mov	r0, r8
 8007dee:	6923      	ldr	r3, [r4, #16]
 8007df0:	47d0      	blx	sl
 8007df2:	3001      	adds	r0, #1
 8007df4:	d0ad      	beq.n	8007d52 <_printf_i+0x15e>
 8007df6:	6823      	ldr	r3, [r4, #0]
 8007df8:	079b      	lsls	r3, r3, #30
 8007dfa:	d413      	bmi.n	8007e24 <_printf_i+0x230>
 8007dfc:	68e0      	ldr	r0, [r4, #12]
 8007dfe:	9b03      	ldr	r3, [sp, #12]
 8007e00:	4298      	cmp	r0, r3
 8007e02:	bfb8      	it	lt
 8007e04:	4618      	movlt	r0, r3
 8007e06:	e7a6      	b.n	8007d56 <_printf_i+0x162>
 8007e08:	2301      	movs	r3, #1
 8007e0a:	4632      	mov	r2, r6
 8007e0c:	4649      	mov	r1, r9
 8007e0e:	4640      	mov	r0, r8
 8007e10:	47d0      	blx	sl
 8007e12:	3001      	adds	r0, #1
 8007e14:	d09d      	beq.n	8007d52 <_printf_i+0x15e>
 8007e16:	3501      	adds	r5, #1
 8007e18:	68e3      	ldr	r3, [r4, #12]
 8007e1a:	9903      	ldr	r1, [sp, #12]
 8007e1c:	1a5b      	subs	r3, r3, r1
 8007e1e:	42ab      	cmp	r3, r5
 8007e20:	dcf2      	bgt.n	8007e08 <_printf_i+0x214>
 8007e22:	e7eb      	b.n	8007dfc <_printf_i+0x208>
 8007e24:	2500      	movs	r5, #0
 8007e26:	f104 0619 	add.w	r6, r4, #25
 8007e2a:	e7f5      	b.n	8007e18 <_printf_i+0x224>
 8007e2c:	0800c4ee 	.word	0x0800c4ee
 8007e30:	0800c4ff 	.word	0x0800c4ff

08007e34 <_scanf_float>:
 8007e34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e38:	b087      	sub	sp, #28
 8007e3a:	9303      	str	r3, [sp, #12]
 8007e3c:	688b      	ldr	r3, [r1, #8]
 8007e3e:	4617      	mov	r7, r2
 8007e40:	1e5a      	subs	r2, r3, #1
 8007e42:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8007e46:	bf82      	ittt	hi
 8007e48:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8007e4c:	eb03 0b05 	addhi.w	fp, r3, r5
 8007e50:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8007e54:	460a      	mov	r2, r1
 8007e56:	f04f 0500 	mov.w	r5, #0
 8007e5a:	bf88      	it	hi
 8007e5c:	608b      	strhi	r3, [r1, #8]
 8007e5e:	680b      	ldr	r3, [r1, #0]
 8007e60:	4680      	mov	r8, r0
 8007e62:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8007e66:	f842 3b1c 	str.w	r3, [r2], #28
 8007e6a:	460c      	mov	r4, r1
 8007e6c:	bf98      	it	ls
 8007e6e:	f04f 0b00 	movls.w	fp, #0
 8007e72:	4616      	mov	r6, r2
 8007e74:	46aa      	mov	sl, r5
 8007e76:	46a9      	mov	r9, r5
 8007e78:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8007e7c:	9201      	str	r2, [sp, #4]
 8007e7e:	9502      	str	r5, [sp, #8]
 8007e80:	68a2      	ldr	r2, [r4, #8]
 8007e82:	b152      	cbz	r2, 8007e9a <_scanf_float+0x66>
 8007e84:	683b      	ldr	r3, [r7, #0]
 8007e86:	781b      	ldrb	r3, [r3, #0]
 8007e88:	2b4e      	cmp	r3, #78	@ 0x4e
 8007e8a:	d865      	bhi.n	8007f58 <_scanf_float+0x124>
 8007e8c:	2b40      	cmp	r3, #64	@ 0x40
 8007e8e:	d83d      	bhi.n	8007f0c <_scanf_float+0xd8>
 8007e90:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8007e94:	b2c8      	uxtb	r0, r1
 8007e96:	280e      	cmp	r0, #14
 8007e98:	d93b      	bls.n	8007f12 <_scanf_float+0xde>
 8007e9a:	f1b9 0f00 	cmp.w	r9, #0
 8007e9e:	d003      	beq.n	8007ea8 <_scanf_float+0x74>
 8007ea0:	6823      	ldr	r3, [r4, #0]
 8007ea2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007ea6:	6023      	str	r3, [r4, #0]
 8007ea8:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007eac:	f1ba 0f01 	cmp.w	sl, #1
 8007eb0:	f200 8118 	bhi.w	80080e4 <_scanf_float+0x2b0>
 8007eb4:	9b01      	ldr	r3, [sp, #4]
 8007eb6:	429e      	cmp	r6, r3
 8007eb8:	f200 8109 	bhi.w	80080ce <_scanf_float+0x29a>
 8007ebc:	2001      	movs	r0, #1
 8007ebe:	b007      	add	sp, #28
 8007ec0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ec4:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8007ec8:	2a0d      	cmp	r2, #13
 8007eca:	d8e6      	bhi.n	8007e9a <_scanf_float+0x66>
 8007ecc:	a101      	add	r1, pc, #4	@ (adr r1, 8007ed4 <_scanf_float+0xa0>)
 8007ece:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007ed2:	bf00      	nop
 8007ed4:	0800801b 	.word	0x0800801b
 8007ed8:	08007e9b 	.word	0x08007e9b
 8007edc:	08007e9b 	.word	0x08007e9b
 8007ee0:	08007e9b 	.word	0x08007e9b
 8007ee4:	0800807b 	.word	0x0800807b
 8007ee8:	08008053 	.word	0x08008053
 8007eec:	08007e9b 	.word	0x08007e9b
 8007ef0:	08007e9b 	.word	0x08007e9b
 8007ef4:	08008029 	.word	0x08008029
 8007ef8:	08007e9b 	.word	0x08007e9b
 8007efc:	08007e9b 	.word	0x08007e9b
 8007f00:	08007e9b 	.word	0x08007e9b
 8007f04:	08007e9b 	.word	0x08007e9b
 8007f08:	08007fe1 	.word	0x08007fe1
 8007f0c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8007f10:	e7da      	b.n	8007ec8 <_scanf_float+0x94>
 8007f12:	290e      	cmp	r1, #14
 8007f14:	d8c1      	bhi.n	8007e9a <_scanf_float+0x66>
 8007f16:	a001      	add	r0, pc, #4	@ (adr r0, 8007f1c <_scanf_float+0xe8>)
 8007f18:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8007f1c:	08007fd1 	.word	0x08007fd1
 8007f20:	08007e9b 	.word	0x08007e9b
 8007f24:	08007fd1 	.word	0x08007fd1
 8007f28:	08008067 	.word	0x08008067
 8007f2c:	08007e9b 	.word	0x08007e9b
 8007f30:	08007f79 	.word	0x08007f79
 8007f34:	08007fb7 	.word	0x08007fb7
 8007f38:	08007fb7 	.word	0x08007fb7
 8007f3c:	08007fb7 	.word	0x08007fb7
 8007f40:	08007fb7 	.word	0x08007fb7
 8007f44:	08007fb7 	.word	0x08007fb7
 8007f48:	08007fb7 	.word	0x08007fb7
 8007f4c:	08007fb7 	.word	0x08007fb7
 8007f50:	08007fb7 	.word	0x08007fb7
 8007f54:	08007fb7 	.word	0x08007fb7
 8007f58:	2b6e      	cmp	r3, #110	@ 0x6e
 8007f5a:	d809      	bhi.n	8007f70 <_scanf_float+0x13c>
 8007f5c:	2b60      	cmp	r3, #96	@ 0x60
 8007f5e:	d8b1      	bhi.n	8007ec4 <_scanf_float+0x90>
 8007f60:	2b54      	cmp	r3, #84	@ 0x54
 8007f62:	d07b      	beq.n	800805c <_scanf_float+0x228>
 8007f64:	2b59      	cmp	r3, #89	@ 0x59
 8007f66:	d198      	bne.n	8007e9a <_scanf_float+0x66>
 8007f68:	2d07      	cmp	r5, #7
 8007f6a:	d196      	bne.n	8007e9a <_scanf_float+0x66>
 8007f6c:	2508      	movs	r5, #8
 8007f6e:	e02c      	b.n	8007fca <_scanf_float+0x196>
 8007f70:	2b74      	cmp	r3, #116	@ 0x74
 8007f72:	d073      	beq.n	800805c <_scanf_float+0x228>
 8007f74:	2b79      	cmp	r3, #121	@ 0x79
 8007f76:	e7f6      	b.n	8007f66 <_scanf_float+0x132>
 8007f78:	6821      	ldr	r1, [r4, #0]
 8007f7a:	05c8      	lsls	r0, r1, #23
 8007f7c:	d51b      	bpl.n	8007fb6 <_scanf_float+0x182>
 8007f7e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8007f82:	6021      	str	r1, [r4, #0]
 8007f84:	f109 0901 	add.w	r9, r9, #1
 8007f88:	f1bb 0f00 	cmp.w	fp, #0
 8007f8c:	d003      	beq.n	8007f96 <_scanf_float+0x162>
 8007f8e:	3201      	adds	r2, #1
 8007f90:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007f94:	60a2      	str	r2, [r4, #8]
 8007f96:	68a3      	ldr	r3, [r4, #8]
 8007f98:	3b01      	subs	r3, #1
 8007f9a:	60a3      	str	r3, [r4, #8]
 8007f9c:	6923      	ldr	r3, [r4, #16]
 8007f9e:	3301      	adds	r3, #1
 8007fa0:	6123      	str	r3, [r4, #16]
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	3b01      	subs	r3, #1
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	607b      	str	r3, [r7, #4]
 8007faa:	f340 8087 	ble.w	80080bc <_scanf_float+0x288>
 8007fae:	683b      	ldr	r3, [r7, #0]
 8007fb0:	3301      	adds	r3, #1
 8007fb2:	603b      	str	r3, [r7, #0]
 8007fb4:	e764      	b.n	8007e80 <_scanf_float+0x4c>
 8007fb6:	eb1a 0105 	adds.w	r1, sl, r5
 8007fba:	f47f af6e 	bne.w	8007e9a <_scanf_float+0x66>
 8007fbe:	460d      	mov	r5, r1
 8007fc0:	468a      	mov	sl, r1
 8007fc2:	6822      	ldr	r2, [r4, #0]
 8007fc4:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8007fc8:	6022      	str	r2, [r4, #0]
 8007fca:	f806 3b01 	strb.w	r3, [r6], #1
 8007fce:	e7e2      	b.n	8007f96 <_scanf_float+0x162>
 8007fd0:	6822      	ldr	r2, [r4, #0]
 8007fd2:	0610      	lsls	r0, r2, #24
 8007fd4:	f57f af61 	bpl.w	8007e9a <_scanf_float+0x66>
 8007fd8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007fdc:	6022      	str	r2, [r4, #0]
 8007fde:	e7f4      	b.n	8007fca <_scanf_float+0x196>
 8007fe0:	f1ba 0f00 	cmp.w	sl, #0
 8007fe4:	d10e      	bne.n	8008004 <_scanf_float+0x1d0>
 8007fe6:	f1b9 0f00 	cmp.w	r9, #0
 8007fea:	d10e      	bne.n	800800a <_scanf_float+0x1d6>
 8007fec:	6822      	ldr	r2, [r4, #0]
 8007fee:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8007ff2:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8007ff6:	d108      	bne.n	800800a <_scanf_float+0x1d6>
 8007ff8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007ffc:	f04f 0a01 	mov.w	sl, #1
 8008000:	6022      	str	r2, [r4, #0]
 8008002:	e7e2      	b.n	8007fca <_scanf_float+0x196>
 8008004:	f1ba 0f02 	cmp.w	sl, #2
 8008008:	d055      	beq.n	80080b6 <_scanf_float+0x282>
 800800a:	2d01      	cmp	r5, #1
 800800c:	d002      	beq.n	8008014 <_scanf_float+0x1e0>
 800800e:	2d04      	cmp	r5, #4
 8008010:	f47f af43 	bne.w	8007e9a <_scanf_float+0x66>
 8008014:	3501      	adds	r5, #1
 8008016:	b2ed      	uxtb	r5, r5
 8008018:	e7d7      	b.n	8007fca <_scanf_float+0x196>
 800801a:	f1ba 0f01 	cmp.w	sl, #1
 800801e:	f47f af3c 	bne.w	8007e9a <_scanf_float+0x66>
 8008022:	f04f 0a02 	mov.w	sl, #2
 8008026:	e7d0      	b.n	8007fca <_scanf_float+0x196>
 8008028:	b97d      	cbnz	r5, 800804a <_scanf_float+0x216>
 800802a:	f1b9 0f00 	cmp.w	r9, #0
 800802e:	f47f af37 	bne.w	8007ea0 <_scanf_float+0x6c>
 8008032:	6822      	ldr	r2, [r4, #0]
 8008034:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8008038:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800803c:	f040 8103 	bne.w	8008246 <_scanf_float+0x412>
 8008040:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008044:	2501      	movs	r5, #1
 8008046:	6022      	str	r2, [r4, #0]
 8008048:	e7bf      	b.n	8007fca <_scanf_float+0x196>
 800804a:	2d03      	cmp	r5, #3
 800804c:	d0e2      	beq.n	8008014 <_scanf_float+0x1e0>
 800804e:	2d05      	cmp	r5, #5
 8008050:	e7de      	b.n	8008010 <_scanf_float+0x1dc>
 8008052:	2d02      	cmp	r5, #2
 8008054:	f47f af21 	bne.w	8007e9a <_scanf_float+0x66>
 8008058:	2503      	movs	r5, #3
 800805a:	e7b6      	b.n	8007fca <_scanf_float+0x196>
 800805c:	2d06      	cmp	r5, #6
 800805e:	f47f af1c 	bne.w	8007e9a <_scanf_float+0x66>
 8008062:	2507      	movs	r5, #7
 8008064:	e7b1      	b.n	8007fca <_scanf_float+0x196>
 8008066:	6822      	ldr	r2, [r4, #0]
 8008068:	0591      	lsls	r1, r2, #22
 800806a:	f57f af16 	bpl.w	8007e9a <_scanf_float+0x66>
 800806e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8008072:	6022      	str	r2, [r4, #0]
 8008074:	f8cd 9008 	str.w	r9, [sp, #8]
 8008078:	e7a7      	b.n	8007fca <_scanf_float+0x196>
 800807a:	6822      	ldr	r2, [r4, #0]
 800807c:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8008080:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8008084:	d006      	beq.n	8008094 <_scanf_float+0x260>
 8008086:	0550      	lsls	r0, r2, #21
 8008088:	f57f af07 	bpl.w	8007e9a <_scanf_float+0x66>
 800808c:	f1b9 0f00 	cmp.w	r9, #0
 8008090:	f000 80d9 	beq.w	8008246 <_scanf_float+0x412>
 8008094:	0591      	lsls	r1, r2, #22
 8008096:	bf58      	it	pl
 8008098:	9902      	ldrpl	r1, [sp, #8]
 800809a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800809e:	bf58      	it	pl
 80080a0:	eba9 0101 	subpl.w	r1, r9, r1
 80080a4:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80080a8:	f04f 0900 	mov.w	r9, #0
 80080ac:	bf58      	it	pl
 80080ae:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80080b2:	6022      	str	r2, [r4, #0]
 80080b4:	e789      	b.n	8007fca <_scanf_float+0x196>
 80080b6:	f04f 0a03 	mov.w	sl, #3
 80080ba:	e786      	b.n	8007fca <_scanf_float+0x196>
 80080bc:	4639      	mov	r1, r7
 80080be:	4640      	mov	r0, r8
 80080c0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80080c4:	4798      	blx	r3
 80080c6:	2800      	cmp	r0, #0
 80080c8:	f43f aeda 	beq.w	8007e80 <_scanf_float+0x4c>
 80080cc:	e6e5      	b.n	8007e9a <_scanf_float+0x66>
 80080ce:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80080d2:	463a      	mov	r2, r7
 80080d4:	4640      	mov	r0, r8
 80080d6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80080da:	4798      	blx	r3
 80080dc:	6923      	ldr	r3, [r4, #16]
 80080de:	3b01      	subs	r3, #1
 80080e0:	6123      	str	r3, [r4, #16]
 80080e2:	e6e7      	b.n	8007eb4 <_scanf_float+0x80>
 80080e4:	1e6b      	subs	r3, r5, #1
 80080e6:	2b06      	cmp	r3, #6
 80080e8:	d824      	bhi.n	8008134 <_scanf_float+0x300>
 80080ea:	2d02      	cmp	r5, #2
 80080ec:	d836      	bhi.n	800815c <_scanf_float+0x328>
 80080ee:	9b01      	ldr	r3, [sp, #4]
 80080f0:	429e      	cmp	r6, r3
 80080f2:	f67f aee3 	bls.w	8007ebc <_scanf_float+0x88>
 80080f6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80080fa:	463a      	mov	r2, r7
 80080fc:	4640      	mov	r0, r8
 80080fe:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008102:	4798      	blx	r3
 8008104:	6923      	ldr	r3, [r4, #16]
 8008106:	3b01      	subs	r3, #1
 8008108:	6123      	str	r3, [r4, #16]
 800810a:	e7f0      	b.n	80080ee <_scanf_float+0x2ba>
 800810c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008110:	463a      	mov	r2, r7
 8008112:	4640      	mov	r0, r8
 8008114:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8008118:	4798      	blx	r3
 800811a:	6923      	ldr	r3, [r4, #16]
 800811c:	3b01      	subs	r3, #1
 800811e:	6123      	str	r3, [r4, #16]
 8008120:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008124:	fa5f fa8a 	uxtb.w	sl, sl
 8008128:	f1ba 0f02 	cmp.w	sl, #2
 800812c:	d1ee      	bne.n	800810c <_scanf_float+0x2d8>
 800812e:	3d03      	subs	r5, #3
 8008130:	b2ed      	uxtb	r5, r5
 8008132:	1b76      	subs	r6, r6, r5
 8008134:	6823      	ldr	r3, [r4, #0]
 8008136:	05da      	lsls	r2, r3, #23
 8008138:	d530      	bpl.n	800819c <_scanf_float+0x368>
 800813a:	055b      	lsls	r3, r3, #21
 800813c:	d511      	bpl.n	8008162 <_scanf_float+0x32e>
 800813e:	9b01      	ldr	r3, [sp, #4]
 8008140:	429e      	cmp	r6, r3
 8008142:	f67f aebb 	bls.w	8007ebc <_scanf_float+0x88>
 8008146:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800814a:	463a      	mov	r2, r7
 800814c:	4640      	mov	r0, r8
 800814e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008152:	4798      	blx	r3
 8008154:	6923      	ldr	r3, [r4, #16]
 8008156:	3b01      	subs	r3, #1
 8008158:	6123      	str	r3, [r4, #16]
 800815a:	e7f0      	b.n	800813e <_scanf_float+0x30a>
 800815c:	46aa      	mov	sl, r5
 800815e:	46b3      	mov	fp, r6
 8008160:	e7de      	b.n	8008120 <_scanf_float+0x2ec>
 8008162:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8008166:	6923      	ldr	r3, [r4, #16]
 8008168:	2965      	cmp	r1, #101	@ 0x65
 800816a:	f103 33ff 	add.w	r3, r3, #4294967295
 800816e:	f106 35ff 	add.w	r5, r6, #4294967295
 8008172:	6123      	str	r3, [r4, #16]
 8008174:	d00c      	beq.n	8008190 <_scanf_float+0x35c>
 8008176:	2945      	cmp	r1, #69	@ 0x45
 8008178:	d00a      	beq.n	8008190 <_scanf_float+0x35c>
 800817a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800817e:	463a      	mov	r2, r7
 8008180:	4640      	mov	r0, r8
 8008182:	4798      	blx	r3
 8008184:	6923      	ldr	r3, [r4, #16]
 8008186:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800818a:	3b01      	subs	r3, #1
 800818c:	1eb5      	subs	r5, r6, #2
 800818e:	6123      	str	r3, [r4, #16]
 8008190:	463a      	mov	r2, r7
 8008192:	4640      	mov	r0, r8
 8008194:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008198:	4798      	blx	r3
 800819a:	462e      	mov	r6, r5
 800819c:	6822      	ldr	r2, [r4, #0]
 800819e:	f012 0210 	ands.w	r2, r2, #16
 80081a2:	d001      	beq.n	80081a8 <_scanf_float+0x374>
 80081a4:	2000      	movs	r0, #0
 80081a6:	e68a      	b.n	8007ebe <_scanf_float+0x8a>
 80081a8:	7032      	strb	r2, [r6, #0]
 80081aa:	6823      	ldr	r3, [r4, #0]
 80081ac:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80081b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80081b4:	d11c      	bne.n	80081f0 <_scanf_float+0x3bc>
 80081b6:	9b02      	ldr	r3, [sp, #8]
 80081b8:	454b      	cmp	r3, r9
 80081ba:	eba3 0209 	sub.w	r2, r3, r9
 80081be:	d123      	bne.n	8008208 <_scanf_float+0x3d4>
 80081c0:	2200      	movs	r2, #0
 80081c2:	4640      	mov	r0, r8
 80081c4:	9901      	ldr	r1, [sp, #4]
 80081c6:	f002 fc27 	bl	800aa18 <_strtod_r>
 80081ca:	9b03      	ldr	r3, [sp, #12]
 80081cc:	6825      	ldr	r5, [r4, #0]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	f015 0f02 	tst.w	r5, #2
 80081d4:	4606      	mov	r6, r0
 80081d6:	460f      	mov	r7, r1
 80081d8:	f103 0204 	add.w	r2, r3, #4
 80081dc:	d01f      	beq.n	800821e <_scanf_float+0x3ea>
 80081de:	9903      	ldr	r1, [sp, #12]
 80081e0:	600a      	str	r2, [r1, #0]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	e9c3 6700 	strd	r6, r7, [r3]
 80081e8:	68e3      	ldr	r3, [r4, #12]
 80081ea:	3301      	adds	r3, #1
 80081ec:	60e3      	str	r3, [r4, #12]
 80081ee:	e7d9      	b.n	80081a4 <_scanf_float+0x370>
 80081f0:	9b04      	ldr	r3, [sp, #16]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d0e4      	beq.n	80081c0 <_scanf_float+0x38c>
 80081f6:	9905      	ldr	r1, [sp, #20]
 80081f8:	230a      	movs	r3, #10
 80081fa:	4640      	mov	r0, r8
 80081fc:	3101      	adds	r1, #1
 80081fe:	f002 fc8b 	bl	800ab18 <_strtol_r>
 8008202:	9b04      	ldr	r3, [sp, #16]
 8008204:	9e05      	ldr	r6, [sp, #20]
 8008206:	1ac2      	subs	r2, r0, r3
 8008208:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800820c:	429e      	cmp	r6, r3
 800820e:	bf28      	it	cs
 8008210:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8008214:	4630      	mov	r0, r6
 8008216:	490d      	ldr	r1, [pc, #52]	@ (800824c <_scanf_float+0x418>)
 8008218:	f000 f8f0 	bl	80083fc <siprintf>
 800821c:	e7d0      	b.n	80081c0 <_scanf_float+0x38c>
 800821e:	076d      	lsls	r5, r5, #29
 8008220:	d4dd      	bmi.n	80081de <_scanf_float+0x3aa>
 8008222:	9d03      	ldr	r5, [sp, #12]
 8008224:	602a      	str	r2, [r5, #0]
 8008226:	681d      	ldr	r5, [r3, #0]
 8008228:	4602      	mov	r2, r0
 800822a:	460b      	mov	r3, r1
 800822c:	f7f8 fbee 	bl	8000a0c <__aeabi_dcmpun>
 8008230:	b120      	cbz	r0, 800823c <_scanf_float+0x408>
 8008232:	4807      	ldr	r0, [pc, #28]	@ (8008250 <_scanf_float+0x41c>)
 8008234:	f000 f9fc 	bl	8008630 <nanf>
 8008238:	6028      	str	r0, [r5, #0]
 800823a:	e7d5      	b.n	80081e8 <_scanf_float+0x3b4>
 800823c:	4630      	mov	r0, r6
 800823e:	4639      	mov	r1, r7
 8008240:	f7f8 fc42 	bl	8000ac8 <__aeabi_d2f>
 8008244:	e7f8      	b.n	8008238 <_scanf_float+0x404>
 8008246:	f04f 0900 	mov.w	r9, #0
 800824a:	e62d      	b.n	8007ea8 <_scanf_float+0x74>
 800824c:	0800c510 	.word	0x0800c510
 8008250:	0800c8a5 	.word	0x0800c8a5

08008254 <std>:
 8008254:	2300      	movs	r3, #0
 8008256:	b510      	push	{r4, lr}
 8008258:	4604      	mov	r4, r0
 800825a:	e9c0 3300 	strd	r3, r3, [r0]
 800825e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008262:	6083      	str	r3, [r0, #8]
 8008264:	8181      	strh	r1, [r0, #12]
 8008266:	6643      	str	r3, [r0, #100]	@ 0x64
 8008268:	81c2      	strh	r2, [r0, #14]
 800826a:	6183      	str	r3, [r0, #24]
 800826c:	4619      	mov	r1, r3
 800826e:	2208      	movs	r2, #8
 8008270:	305c      	adds	r0, #92	@ 0x5c
 8008272:	f000 f940 	bl	80084f6 <memset>
 8008276:	4b0d      	ldr	r3, [pc, #52]	@ (80082ac <std+0x58>)
 8008278:	6224      	str	r4, [r4, #32]
 800827a:	6263      	str	r3, [r4, #36]	@ 0x24
 800827c:	4b0c      	ldr	r3, [pc, #48]	@ (80082b0 <std+0x5c>)
 800827e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008280:	4b0c      	ldr	r3, [pc, #48]	@ (80082b4 <std+0x60>)
 8008282:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008284:	4b0c      	ldr	r3, [pc, #48]	@ (80082b8 <std+0x64>)
 8008286:	6323      	str	r3, [r4, #48]	@ 0x30
 8008288:	4b0c      	ldr	r3, [pc, #48]	@ (80082bc <std+0x68>)
 800828a:	429c      	cmp	r4, r3
 800828c:	d006      	beq.n	800829c <std+0x48>
 800828e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008292:	4294      	cmp	r4, r2
 8008294:	d002      	beq.n	800829c <std+0x48>
 8008296:	33d0      	adds	r3, #208	@ 0xd0
 8008298:	429c      	cmp	r4, r3
 800829a:	d105      	bne.n	80082a8 <std+0x54>
 800829c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80082a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80082a4:	f000 b9a4 	b.w	80085f0 <__retarget_lock_init_recursive>
 80082a8:	bd10      	pop	{r4, pc}
 80082aa:	bf00      	nop
 80082ac:	0800843d 	.word	0x0800843d
 80082b0:	0800845f 	.word	0x0800845f
 80082b4:	08008497 	.word	0x08008497
 80082b8:	080084bb 	.word	0x080084bb
 80082bc:	2000082c 	.word	0x2000082c

080082c0 <stdio_exit_handler>:
 80082c0:	4a02      	ldr	r2, [pc, #8]	@ (80082cc <stdio_exit_handler+0xc>)
 80082c2:	4903      	ldr	r1, [pc, #12]	@ (80082d0 <stdio_exit_handler+0x10>)
 80082c4:	4803      	ldr	r0, [pc, #12]	@ (80082d4 <stdio_exit_handler+0x14>)
 80082c6:	f000 b869 	b.w	800839c <_fwalk_sglue>
 80082ca:	bf00      	nop
 80082cc:	20000040 	.word	0x20000040
 80082d0:	0800b14d 	.word	0x0800b14d
 80082d4:	20000050 	.word	0x20000050

080082d8 <cleanup_stdio>:
 80082d8:	6841      	ldr	r1, [r0, #4]
 80082da:	4b0c      	ldr	r3, [pc, #48]	@ (800830c <cleanup_stdio+0x34>)
 80082dc:	b510      	push	{r4, lr}
 80082de:	4299      	cmp	r1, r3
 80082e0:	4604      	mov	r4, r0
 80082e2:	d001      	beq.n	80082e8 <cleanup_stdio+0x10>
 80082e4:	f002 ff32 	bl	800b14c <_fflush_r>
 80082e8:	68a1      	ldr	r1, [r4, #8]
 80082ea:	4b09      	ldr	r3, [pc, #36]	@ (8008310 <cleanup_stdio+0x38>)
 80082ec:	4299      	cmp	r1, r3
 80082ee:	d002      	beq.n	80082f6 <cleanup_stdio+0x1e>
 80082f0:	4620      	mov	r0, r4
 80082f2:	f002 ff2b 	bl	800b14c <_fflush_r>
 80082f6:	68e1      	ldr	r1, [r4, #12]
 80082f8:	4b06      	ldr	r3, [pc, #24]	@ (8008314 <cleanup_stdio+0x3c>)
 80082fa:	4299      	cmp	r1, r3
 80082fc:	d004      	beq.n	8008308 <cleanup_stdio+0x30>
 80082fe:	4620      	mov	r0, r4
 8008300:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008304:	f002 bf22 	b.w	800b14c <_fflush_r>
 8008308:	bd10      	pop	{r4, pc}
 800830a:	bf00      	nop
 800830c:	2000082c 	.word	0x2000082c
 8008310:	20000894 	.word	0x20000894
 8008314:	200008fc 	.word	0x200008fc

08008318 <global_stdio_init.part.0>:
 8008318:	b510      	push	{r4, lr}
 800831a:	4b0b      	ldr	r3, [pc, #44]	@ (8008348 <global_stdio_init.part.0+0x30>)
 800831c:	4c0b      	ldr	r4, [pc, #44]	@ (800834c <global_stdio_init.part.0+0x34>)
 800831e:	4a0c      	ldr	r2, [pc, #48]	@ (8008350 <global_stdio_init.part.0+0x38>)
 8008320:	4620      	mov	r0, r4
 8008322:	601a      	str	r2, [r3, #0]
 8008324:	2104      	movs	r1, #4
 8008326:	2200      	movs	r2, #0
 8008328:	f7ff ff94 	bl	8008254 <std>
 800832c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008330:	2201      	movs	r2, #1
 8008332:	2109      	movs	r1, #9
 8008334:	f7ff ff8e 	bl	8008254 <std>
 8008338:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800833c:	2202      	movs	r2, #2
 800833e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008342:	2112      	movs	r1, #18
 8008344:	f7ff bf86 	b.w	8008254 <std>
 8008348:	20000964 	.word	0x20000964
 800834c:	2000082c 	.word	0x2000082c
 8008350:	080082c1 	.word	0x080082c1

08008354 <__sfp_lock_acquire>:
 8008354:	4801      	ldr	r0, [pc, #4]	@ (800835c <__sfp_lock_acquire+0x8>)
 8008356:	f000 b94c 	b.w	80085f2 <__retarget_lock_acquire_recursive>
 800835a:	bf00      	nop
 800835c:	2000096d 	.word	0x2000096d

08008360 <__sfp_lock_release>:
 8008360:	4801      	ldr	r0, [pc, #4]	@ (8008368 <__sfp_lock_release+0x8>)
 8008362:	f000 b947 	b.w	80085f4 <__retarget_lock_release_recursive>
 8008366:	bf00      	nop
 8008368:	2000096d 	.word	0x2000096d

0800836c <__sinit>:
 800836c:	b510      	push	{r4, lr}
 800836e:	4604      	mov	r4, r0
 8008370:	f7ff fff0 	bl	8008354 <__sfp_lock_acquire>
 8008374:	6a23      	ldr	r3, [r4, #32]
 8008376:	b11b      	cbz	r3, 8008380 <__sinit+0x14>
 8008378:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800837c:	f7ff bff0 	b.w	8008360 <__sfp_lock_release>
 8008380:	4b04      	ldr	r3, [pc, #16]	@ (8008394 <__sinit+0x28>)
 8008382:	6223      	str	r3, [r4, #32]
 8008384:	4b04      	ldr	r3, [pc, #16]	@ (8008398 <__sinit+0x2c>)
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	2b00      	cmp	r3, #0
 800838a:	d1f5      	bne.n	8008378 <__sinit+0xc>
 800838c:	f7ff ffc4 	bl	8008318 <global_stdio_init.part.0>
 8008390:	e7f2      	b.n	8008378 <__sinit+0xc>
 8008392:	bf00      	nop
 8008394:	080082d9 	.word	0x080082d9
 8008398:	20000964 	.word	0x20000964

0800839c <_fwalk_sglue>:
 800839c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80083a0:	4607      	mov	r7, r0
 80083a2:	4688      	mov	r8, r1
 80083a4:	4614      	mov	r4, r2
 80083a6:	2600      	movs	r6, #0
 80083a8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80083ac:	f1b9 0901 	subs.w	r9, r9, #1
 80083b0:	d505      	bpl.n	80083be <_fwalk_sglue+0x22>
 80083b2:	6824      	ldr	r4, [r4, #0]
 80083b4:	2c00      	cmp	r4, #0
 80083b6:	d1f7      	bne.n	80083a8 <_fwalk_sglue+0xc>
 80083b8:	4630      	mov	r0, r6
 80083ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80083be:	89ab      	ldrh	r3, [r5, #12]
 80083c0:	2b01      	cmp	r3, #1
 80083c2:	d907      	bls.n	80083d4 <_fwalk_sglue+0x38>
 80083c4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80083c8:	3301      	adds	r3, #1
 80083ca:	d003      	beq.n	80083d4 <_fwalk_sglue+0x38>
 80083cc:	4629      	mov	r1, r5
 80083ce:	4638      	mov	r0, r7
 80083d0:	47c0      	blx	r8
 80083d2:	4306      	orrs	r6, r0
 80083d4:	3568      	adds	r5, #104	@ 0x68
 80083d6:	e7e9      	b.n	80083ac <_fwalk_sglue+0x10>

080083d8 <iprintf>:
 80083d8:	b40f      	push	{r0, r1, r2, r3}
 80083da:	b507      	push	{r0, r1, r2, lr}
 80083dc:	4906      	ldr	r1, [pc, #24]	@ (80083f8 <iprintf+0x20>)
 80083de:	ab04      	add	r3, sp, #16
 80083e0:	6808      	ldr	r0, [r1, #0]
 80083e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80083e6:	6881      	ldr	r1, [r0, #8]
 80083e8:	9301      	str	r3, [sp, #4]
 80083ea:	f002 fd17 	bl	800ae1c <_vfiprintf_r>
 80083ee:	b003      	add	sp, #12
 80083f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80083f4:	b004      	add	sp, #16
 80083f6:	4770      	bx	lr
 80083f8:	2000004c 	.word	0x2000004c

080083fc <siprintf>:
 80083fc:	b40e      	push	{r1, r2, r3}
 80083fe:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008402:	b500      	push	{lr}
 8008404:	b09c      	sub	sp, #112	@ 0x70
 8008406:	ab1d      	add	r3, sp, #116	@ 0x74
 8008408:	9002      	str	r0, [sp, #8]
 800840a:	9006      	str	r0, [sp, #24]
 800840c:	9107      	str	r1, [sp, #28]
 800840e:	9104      	str	r1, [sp, #16]
 8008410:	4808      	ldr	r0, [pc, #32]	@ (8008434 <siprintf+0x38>)
 8008412:	4909      	ldr	r1, [pc, #36]	@ (8008438 <siprintf+0x3c>)
 8008414:	f853 2b04 	ldr.w	r2, [r3], #4
 8008418:	9105      	str	r1, [sp, #20]
 800841a:	6800      	ldr	r0, [r0, #0]
 800841c:	a902      	add	r1, sp, #8
 800841e:	9301      	str	r3, [sp, #4]
 8008420:	f002 fbd8 	bl	800abd4 <_svfiprintf_r>
 8008424:	2200      	movs	r2, #0
 8008426:	9b02      	ldr	r3, [sp, #8]
 8008428:	701a      	strb	r2, [r3, #0]
 800842a:	b01c      	add	sp, #112	@ 0x70
 800842c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008430:	b003      	add	sp, #12
 8008432:	4770      	bx	lr
 8008434:	2000004c 	.word	0x2000004c
 8008438:	ffff0208 	.word	0xffff0208

0800843c <__sread>:
 800843c:	b510      	push	{r4, lr}
 800843e:	460c      	mov	r4, r1
 8008440:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008444:	f000 f886 	bl	8008554 <_read_r>
 8008448:	2800      	cmp	r0, #0
 800844a:	bfab      	itete	ge
 800844c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800844e:	89a3      	ldrhlt	r3, [r4, #12]
 8008450:	181b      	addge	r3, r3, r0
 8008452:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008456:	bfac      	ite	ge
 8008458:	6563      	strge	r3, [r4, #84]	@ 0x54
 800845a:	81a3      	strhlt	r3, [r4, #12]
 800845c:	bd10      	pop	{r4, pc}

0800845e <__swrite>:
 800845e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008462:	461f      	mov	r7, r3
 8008464:	898b      	ldrh	r3, [r1, #12]
 8008466:	4605      	mov	r5, r0
 8008468:	05db      	lsls	r3, r3, #23
 800846a:	460c      	mov	r4, r1
 800846c:	4616      	mov	r6, r2
 800846e:	d505      	bpl.n	800847c <__swrite+0x1e>
 8008470:	2302      	movs	r3, #2
 8008472:	2200      	movs	r2, #0
 8008474:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008478:	f000 f85a 	bl	8008530 <_lseek_r>
 800847c:	89a3      	ldrh	r3, [r4, #12]
 800847e:	4632      	mov	r2, r6
 8008480:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008484:	81a3      	strh	r3, [r4, #12]
 8008486:	4628      	mov	r0, r5
 8008488:	463b      	mov	r3, r7
 800848a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800848e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008492:	f000 b871 	b.w	8008578 <_write_r>

08008496 <__sseek>:
 8008496:	b510      	push	{r4, lr}
 8008498:	460c      	mov	r4, r1
 800849a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800849e:	f000 f847 	bl	8008530 <_lseek_r>
 80084a2:	1c43      	adds	r3, r0, #1
 80084a4:	89a3      	ldrh	r3, [r4, #12]
 80084a6:	bf15      	itete	ne
 80084a8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80084aa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80084ae:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80084b2:	81a3      	strheq	r3, [r4, #12]
 80084b4:	bf18      	it	ne
 80084b6:	81a3      	strhne	r3, [r4, #12]
 80084b8:	bd10      	pop	{r4, pc}

080084ba <__sclose>:
 80084ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80084be:	f000 b827 	b.w	8008510 <_close_r>

080084c2 <memmove>:
 80084c2:	4288      	cmp	r0, r1
 80084c4:	b510      	push	{r4, lr}
 80084c6:	eb01 0402 	add.w	r4, r1, r2
 80084ca:	d902      	bls.n	80084d2 <memmove+0x10>
 80084cc:	4284      	cmp	r4, r0
 80084ce:	4623      	mov	r3, r4
 80084d0:	d807      	bhi.n	80084e2 <memmove+0x20>
 80084d2:	1e43      	subs	r3, r0, #1
 80084d4:	42a1      	cmp	r1, r4
 80084d6:	d008      	beq.n	80084ea <memmove+0x28>
 80084d8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80084dc:	f803 2f01 	strb.w	r2, [r3, #1]!
 80084e0:	e7f8      	b.n	80084d4 <memmove+0x12>
 80084e2:	4601      	mov	r1, r0
 80084e4:	4402      	add	r2, r0
 80084e6:	428a      	cmp	r2, r1
 80084e8:	d100      	bne.n	80084ec <memmove+0x2a>
 80084ea:	bd10      	pop	{r4, pc}
 80084ec:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80084f0:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80084f4:	e7f7      	b.n	80084e6 <memmove+0x24>

080084f6 <memset>:
 80084f6:	4603      	mov	r3, r0
 80084f8:	4402      	add	r2, r0
 80084fa:	4293      	cmp	r3, r2
 80084fc:	d100      	bne.n	8008500 <memset+0xa>
 80084fe:	4770      	bx	lr
 8008500:	f803 1b01 	strb.w	r1, [r3], #1
 8008504:	e7f9      	b.n	80084fa <memset+0x4>
	...

08008508 <_localeconv_r>:
 8008508:	4800      	ldr	r0, [pc, #0]	@ (800850c <_localeconv_r+0x4>)
 800850a:	4770      	bx	lr
 800850c:	2000018c 	.word	0x2000018c

08008510 <_close_r>:
 8008510:	b538      	push	{r3, r4, r5, lr}
 8008512:	2300      	movs	r3, #0
 8008514:	4d05      	ldr	r5, [pc, #20]	@ (800852c <_close_r+0x1c>)
 8008516:	4604      	mov	r4, r0
 8008518:	4608      	mov	r0, r1
 800851a:	602b      	str	r3, [r5, #0]
 800851c:	f7f9 fb5b 	bl	8001bd6 <_close>
 8008520:	1c43      	adds	r3, r0, #1
 8008522:	d102      	bne.n	800852a <_close_r+0x1a>
 8008524:	682b      	ldr	r3, [r5, #0]
 8008526:	b103      	cbz	r3, 800852a <_close_r+0x1a>
 8008528:	6023      	str	r3, [r4, #0]
 800852a:	bd38      	pop	{r3, r4, r5, pc}
 800852c:	20000968 	.word	0x20000968

08008530 <_lseek_r>:
 8008530:	b538      	push	{r3, r4, r5, lr}
 8008532:	4604      	mov	r4, r0
 8008534:	4608      	mov	r0, r1
 8008536:	4611      	mov	r1, r2
 8008538:	2200      	movs	r2, #0
 800853a:	4d05      	ldr	r5, [pc, #20]	@ (8008550 <_lseek_r+0x20>)
 800853c:	602a      	str	r2, [r5, #0]
 800853e:	461a      	mov	r2, r3
 8008540:	f7f9 fb6d 	bl	8001c1e <_lseek>
 8008544:	1c43      	adds	r3, r0, #1
 8008546:	d102      	bne.n	800854e <_lseek_r+0x1e>
 8008548:	682b      	ldr	r3, [r5, #0]
 800854a:	b103      	cbz	r3, 800854e <_lseek_r+0x1e>
 800854c:	6023      	str	r3, [r4, #0]
 800854e:	bd38      	pop	{r3, r4, r5, pc}
 8008550:	20000968 	.word	0x20000968

08008554 <_read_r>:
 8008554:	b538      	push	{r3, r4, r5, lr}
 8008556:	4604      	mov	r4, r0
 8008558:	4608      	mov	r0, r1
 800855a:	4611      	mov	r1, r2
 800855c:	2200      	movs	r2, #0
 800855e:	4d05      	ldr	r5, [pc, #20]	@ (8008574 <_read_r+0x20>)
 8008560:	602a      	str	r2, [r5, #0]
 8008562:	461a      	mov	r2, r3
 8008564:	f7f9 fafe 	bl	8001b64 <_read>
 8008568:	1c43      	adds	r3, r0, #1
 800856a:	d102      	bne.n	8008572 <_read_r+0x1e>
 800856c:	682b      	ldr	r3, [r5, #0]
 800856e:	b103      	cbz	r3, 8008572 <_read_r+0x1e>
 8008570:	6023      	str	r3, [r4, #0]
 8008572:	bd38      	pop	{r3, r4, r5, pc}
 8008574:	20000968 	.word	0x20000968

08008578 <_write_r>:
 8008578:	b538      	push	{r3, r4, r5, lr}
 800857a:	4604      	mov	r4, r0
 800857c:	4608      	mov	r0, r1
 800857e:	4611      	mov	r1, r2
 8008580:	2200      	movs	r2, #0
 8008582:	4d05      	ldr	r5, [pc, #20]	@ (8008598 <_write_r+0x20>)
 8008584:	602a      	str	r2, [r5, #0]
 8008586:	461a      	mov	r2, r3
 8008588:	f7f9 fb09 	bl	8001b9e <_write>
 800858c:	1c43      	adds	r3, r0, #1
 800858e:	d102      	bne.n	8008596 <_write_r+0x1e>
 8008590:	682b      	ldr	r3, [r5, #0]
 8008592:	b103      	cbz	r3, 8008596 <_write_r+0x1e>
 8008594:	6023      	str	r3, [r4, #0]
 8008596:	bd38      	pop	{r3, r4, r5, pc}
 8008598:	20000968 	.word	0x20000968

0800859c <__errno>:
 800859c:	4b01      	ldr	r3, [pc, #4]	@ (80085a4 <__errno+0x8>)
 800859e:	6818      	ldr	r0, [r3, #0]
 80085a0:	4770      	bx	lr
 80085a2:	bf00      	nop
 80085a4:	2000004c 	.word	0x2000004c

080085a8 <__libc_init_array>:
 80085a8:	b570      	push	{r4, r5, r6, lr}
 80085aa:	2600      	movs	r6, #0
 80085ac:	4d0c      	ldr	r5, [pc, #48]	@ (80085e0 <__libc_init_array+0x38>)
 80085ae:	4c0d      	ldr	r4, [pc, #52]	@ (80085e4 <__libc_init_array+0x3c>)
 80085b0:	1b64      	subs	r4, r4, r5
 80085b2:	10a4      	asrs	r4, r4, #2
 80085b4:	42a6      	cmp	r6, r4
 80085b6:	d109      	bne.n	80085cc <__libc_init_array+0x24>
 80085b8:	f003 fb4e 	bl	800bc58 <_init>
 80085bc:	2600      	movs	r6, #0
 80085be:	4d0a      	ldr	r5, [pc, #40]	@ (80085e8 <__libc_init_array+0x40>)
 80085c0:	4c0a      	ldr	r4, [pc, #40]	@ (80085ec <__libc_init_array+0x44>)
 80085c2:	1b64      	subs	r4, r4, r5
 80085c4:	10a4      	asrs	r4, r4, #2
 80085c6:	42a6      	cmp	r6, r4
 80085c8:	d105      	bne.n	80085d6 <__libc_init_array+0x2e>
 80085ca:	bd70      	pop	{r4, r5, r6, pc}
 80085cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80085d0:	4798      	blx	r3
 80085d2:	3601      	adds	r6, #1
 80085d4:	e7ee      	b.n	80085b4 <__libc_init_array+0xc>
 80085d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80085da:	4798      	blx	r3
 80085dc:	3601      	adds	r6, #1
 80085de:	e7f2      	b.n	80085c6 <__libc_init_array+0x1e>
 80085e0:	0800c910 	.word	0x0800c910
 80085e4:	0800c910 	.word	0x0800c910
 80085e8:	0800c910 	.word	0x0800c910
 80085ec:	0800c914 	.word	0x0800c914

080085f0 <__retarget_lock_init_recursive>:
 80085f0:	4770      	bx	lr

080085f2 <__retarget_lock_acquire_recursive>:
 80085f2:	4770      	bx	lr

080085f4 <__retarget_lock_release_recursive>:
 80085f4:	4770      	bx	lr

080085f6 <memchr>:
 80085f6:	4603      	mov	r3, r0
 80085f8:	b510      	push	{r4, lr}
 80085fa:	b2c9      	uxtb	r1, r1
 80085fc:	4402      	add	r2, r0
 80085fe:	4293      	cmp	r3, r2
 8008600:	4618      	mov	r0, r3
 8008602:	d101      	bne.n	8008608 <memchr+0x12>
 8008604:	2000      	movs	r0, #0
 8008606:	e003      	b.n	8008610 <memchr+0x1a>
 8008608:	7804      	ldrb	r4, [r0, #0]
 800860a:	3301      	adds	r3, #1
 800860c:	428c      	cmp	r4, r1
 800860e:	d1f6      	bne.n	80085fe <memchr+0x8>
 8008610:	bd10      	pop	{r4, pc}

08008612 <memcpy>:
 8008612:	440a      	add	r2, r1
 8008614:	4291      	cmp	r1, r2
 8008616:	f100 33ff 	add.w	r3, r0, #4294967295
 800861a:	d100      	bne.n	800861e <memcpy+0xc>
 800861c:	4770      	bx	lr
 800861e:	b510      	push	{r4, lr}
 8008620:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008624:	4291      	cmp	r1, r2
 8008626:	f803 4f01 	strb.w	r4, [r3, #1]!
 800862a:	d1f9      	bne.n	8008620 <memcpy+0xe>
 800862c:	bd10      	pop	{r4, pc}
	...

08008630 <nanf>:
 8008630:	4800      	ldr	r0, [pc, #0]	@ (8008634 <nanf+0x4>)
 8008632:	4770      	bx	lr
 8008634:	7fc00000 	.word	0x7fc00000

08008638 <quorem>:
 8008638:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800863c:	6903      	ldr	r3, [r0, #16]
 800863e:	690c      	ldr	r4, [r1, #16]
 8008640:	4607      	mov	r7, r0
 8008642:	42a3      	cmp	r3, r4
 8008644:	db7e      	blt.n	8008744 <quorem+0x10c>
 8008646:	3c01      	subs	r4, #1
 8008648:	00a3      	lsls	r3, r4, #2
 800864a:	f100 0514 	add.w	r5, r0, #20
 800864e:	f101 0814 	add.w	r8, r1, #20
 8008652:	9300      	str	r3, [sp, #0]
 8008654:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008658:	9301      	str	r3, [sp, #4]
 800865a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800865e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008662:	3301      	adds	r3, #1
 8008664:	429a      	cmp	r2, r3
 8008666:	fbb2 f6f3 	udiv	r6, r2, r3
 800866a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800866e:	d32e      	bcc.n	80086ce <quorem+0x96>
 8008670:	f04f 0a00 	mov.w	sl, #0
 8008674:	46c4      	mov	ip, r8
 8008676:	46ae      	mov	lr, r5
 8008678:	46d3      	mov	fp, sl
 800867a:	f85c 3b04 	ldr.w	r3, [ip], #4
 800867e:	b298      	uxth	r0, r3
 8008680:	fb06 a000 	mla	r0, r6, r0, sl
 8008684:	0c1b      	lsrs	r3, r3, #16
 8008686:	0c02      	lsrs	r2, r0, #16
 8008688:	fb06 2303 	mla	r3, r6, r3, r2
 800868c:	f8de 2000 	ldr.w	r2, [lr]
 8008690:	b280      	uxth	r0, r0
 8008692:	b292      	uxth	r2, r2
 8008694:	1a12      	subs	r2, r2, r0
 8008696:	445a      	add	r2, fp
 8008698:	f8de 0000 	ldr.w	r0, [lr]
 800869c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80086a0:	b29b      	uxth	r3, r3
 80086a2:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80086a6:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80086aa:	b292      	uxth	r2, r2
 80086ac:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80086b0:	45e1      	cmp	r9, ip
 80086b2:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80086b6:	f84e 2b04 	str.w	r2, [lr], #4
 80086ba:	d2de      	bcs.n	800867a <quorem+0x42>
 80086bc:	9b00      	ldr	r3, [sp, #0]
 80086be:	58eb      	ldr	r3, [r5, r3]
 80086c0:	b92b      	cbnz	r3, 80086ce <quorem+0x96>
 80086c2:	9b01      	ldr	r3, [sp, #4]
 80086c4:	3b04      	subs	r3, #4
 80086c6:	429d      	cmp	r5, r3
 80086c8:	461a      	mov	r2, r3
 80086ca:	d32f      	bcc.n	800872c <quorem+0xf4>
 80086cc:	613c      	str	r4, [r7, #16]
 80086ce:	4638      	mov	r0, r7
 80086d0:	f001 f9c2 	bl	8009a58 <__mcmp>
 80086d4:	2800      	cmp	r0, #0
 80086d6:	db25      	blt.n	8008724 <quorem+0xec>
 80086d8:	4629      	mov	r1, r5
 80086da:	2000      	movs	r0, #0
 80086dc:	f858 2b04 	ldr.w	r2, [r8], #4
 80086e0:	f8d1 c000 	ldr.w	ip, [r1]
 80086e4:	fa1f fe82 	uxth.w	lr, r2
 80086e8:	fa1f f38c 	uxth.w	r3, ip
 80086ec:	eba3 030e 	sub.w	r3, r3, lr
 80086f0:	4403      	add	r3, r0
 80086f2:	0c12      	lsrs	r2, r2, #16
 80086f4:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80086f8:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80086fc:	b29b      	uxth	r3, r3
 80086fe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008702:	45c1      	cmp	r9, r8
 8008704:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008708:	f841 3b04 	str.w	r3, [r1], #4
 800870c:	d2e6      	bcs.n	80086dc <quorem+0xa4>
 800870e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008712:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008716:	b922      	cbnz	r2, 8008722 <quorem+0xea>
 8008718:	3b04      	subs	r3, #4
 800871a:	429d      	cmp	r5, r3
 800871c:	461a      	mov	r2, r3
 800871e:	d30b      	bcc.n	8008738 <quorem+0x100>
 8008720:	613c      	str	r4, [r7, #16]
 8008722:	3601      	adds	r6, #1
 8008724:	4630      	mov	r0, r6
 8008726:	b003      	add	sp, #12
 8008728:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800872c:	6812      	ldr	r2, [r2, #0]
 800872e:	3b04      	subs	r3, #4
 8008730:	2a00      	cmp	r2, #0
 8008732:	d1cb      	bne.n	80086cc <quorem+0x94>
 8008734:	3c01      	subs	r4, #1
 8008736:	e7c6      	b.n	80086c6 <quorem+0x8e>
 8008738:	6812      	ldr	r2, [r2, #0]
 800873a:	3b04      	subs	r3, #4
 800873c:	2a00      	cmp	r2, #0
 800873e:	d1ef      	bne.n	8008720 <quorem+0xe8>
 8008740:	3c01      	subs	r4, #1
 8008742:	e7ea      	b.n	800871a <quorem+0xe2>
 8008744:	2000      	movs	r0, #0
 8008746:	e7ee      	b.n	8008726 <quorem+0xee>

08008748 <_dtoa_r>:
 8008748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800874c:	4614      	mov	r4, r2
 800874e:	461d      	mov	r5, r3
 8008750:	69c7      	ldr	r7, [r0, #28]
 8008752:	b097      	sub	sp, #92	@ 0x5c
 8008754:	4683      	mov	fp, r0
 8008756:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800875a:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800875c:	b97f      	cbnz	r7, 800877e <_dtoa_r+0x36>
 800875e:	2010      	movs	r0, #16
 8008760:	f000 fe02 	bl	8009368 <malloc>
 8008764:	4602      	mov	r2, r0
 8008766:	f8cb 001c 	str.w	r0, [fp, #28]
 800876a:	b920      	cbnz	r0, 8008776 <_dtoa_r+0x2e>
 800876c:	21ef      	movs	r1, #239	@ 0xef
 800876e:	4ba8      	ldr	r3, [pc, #672]	@ (8008a10 <_dtoa_r+0x2c8>)
 8008770:	48a8      	ldr	r0, [pc, #672]	@ (8008a14 <_dtoa_r+0x2cc>)
 8008772:	f002 fdcf 	bl	800b314 <__assert_func>
 8008776:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800877a:	6007      	str	r7, [r0, #0]
 800877c:	60c7      	str	r7, [r0, #12]
 800877e:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008782:	6819      	ldr	r1, [r3, #0]
 8008784:	b159      	cbz	r1, 800879e <_dtoa_r+0x56>
 8008786:	685a      	ldr	r2, [r3, #4]
 8008788:	2301      	movs	r3, #1
 800878a:	4093      	lsls	r3, r2
 800878c:	604a      	str	r2, [r1, #4]
 800878e:	608b      	str	r3, [r1, #8]
 8008790:	4658      	mov	r0, fp
 8008792:	f000 fedf 	bl	8009554 <_Bfree>
 8008796:	2200      	movs	r2, #0
 8008798:	f8db 301c 	ldr.w	r3, [fp, #28]
 800879c:	601a      	str	r2, [r3, #0]
 800879e:	1e2b      	subs	r3, r5, #0
 80087a0:	bfaf      	iteee	ge
 80087a2:	2300      	movge	r3, #0
 80087a4:	2201      	movlt	r2, #1
 80087a6:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80087aa:	9303      	strlt	r3, [sp, #12]
 80087ac:	bfa8      	it	ge
 80087ae:	6033      	strge	r3, [r6, #0]
 80087b0:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80087b4:	4b98      	ldr	r3, [pc, #608]	@ (8008a18 <_dtoa_r+0x2d0>)
 80087b6:	bfb8      	it	lt
 80087b8:	6032      	strlt	r2, [r6, #0]
 80087ba:	ea33 0308 	bics.w	r3, r3, r8
 80087be:	d112      	bne.n	80087e6 <_dtoa_r+0x9e>
 80087c0:	f242 730f 	movw	r3, #9999	@ 0x270f
 80087c4:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80087c6:	6013      	str	r3, [r2, #0]
 80087c8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80087cc:	4323      	orrs	r3, r4
 80087ce:	f000 8550 	beq.w	8009272 <_dtoa_r+0xb2a>
 80087d2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80087d4:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8008a1c <_dtoa_r+0x2d4>
 80087d8:	2b00      	cmp	r3, #0
 80087da:	f000 8552 	beq.w	8009282 <_dtoa_r+0xb3a>
 80087de:	f10a 0303 	add.w	r3, sl, #3
 80087e2:	f000 bd4c 	b.w	800927e <_dtoa_r+0xb36>
 80087e6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80087ea:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80087ee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80087f2:	2200      	movs	r2, #0
 80087f4:	2300      	movs	r3, #0
 80087f6:	f7f8 f8d7 	bl	80009a8 <__aeabi_dcmpeq>
 80087fa:	4607      	mov	r7, r0
 80087fc:	b158      	cbz	r0, 8008816 <_dtoa_r+0xce>
 80087fe:	2301      	movs	r3, #1
 8008800:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8008802:	6013      	str	r3, [r2, #0]
 8008804:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8008806:	b113      	cbz	r3, 800880e <_dtoa_r+0xc6>
 8008808:	4b85      	ldr	r3, [pc, #532]	@ (8008a20 <_dtoa_r+0x2d8>)
 800880a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800880c:	6013      	str	r3, [r2, #0]
 800880e:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8008a24 <_dtoa_r+0x2dc>
 8008812:	f000 bd36 	b.w	8009282 <_dtoa_r+0xb3a>
 8008816:	ab14      	add	r3, sp, #80	@ 0x50
 8008818:	9301      	str	r3, [sp, #4]
 800881a:	ab15      	add	r3, sp, #84	@ 0x54
 800881c:	9300      	str	r3, [sp, #0]
 800881e:	4658      	mov	r0, fp
 8008820:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8008824:	f001 fa30 	bl	8009c88 <__d2b>
 8008828:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800882c:	4681      	mov	r9, r0
 800882e:	2e00      	cmp	r6, #0
 8008830:	d077      	beq.n	8008922 <_dtoa_r+0x1da>
 8008832:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008836:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008838:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800883c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008840:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008844:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8008848:	9712      	str	r7, [sp, #72]	@ 0x48
 800884a:	4619      	mov	r1, r3
 800884c:	2200      	movs	r2, #0
 800884e:	4b76      	ldr	r3, [pc, #472]	@ (8008a28 <_dtoa_r+0x2e0>)
 8008850:	f7f7 fc8a 	bl	8000168 <__aeabi_dsub>
 8008854:	a368      	add	r3, pc, #416	@ (adr r3, 80089f8 <_dtoa_r+0x2b0>)
 8008856:	e9d3 2300 	ldrd	r2, r3, [r3]
 800885a:	f7f7 fe3d 	bl	80004d8 <__aeabi_dmul>
 800885e:	a368      	add	r3, pc, #416	@ (adr r3, 8008a00 <_dtoa_r+0x2b8>)
 8008860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008864:	f7f7 fc82 	bl	800016c <__adddf3>
 8008868:	4604      	mov	r4, r0
 800886a:	4630      	mov	r0, r6
 800886c:	460d      	mov	r5, r1
 800886e:	f7f7 fdc9 	bl	8000404 <__aeabi_i2d>
 8008872:	a365      	add	r3, pc, #404	@ (adr r3, 8008a08 <_dtoa_r+0x2c0>)
 8008874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008878:	f7f7 fe2e 	bl	80004d8 <__aeabi_dmul>
 800887c:	4602      	mov	r2, r0
 800887e:	460b      	mov	r3, r1
 8008880:	4620      	mov	r0, r4
 8008882:	4629      	mov	r1, r5
 8008884:	f7f7 fc72 	bl	800016c <__adddf3>
 8008888:	4604      	mov	r4, r0
 800888a:	460d      	mov	r5, r1
 800888c:	f7f8 f8d4 	bl	8000a38 <__aeabi_d2iz>
 8008890:	2200      	movs	r2, #0
 8008892:	4607      	mov	r7, r0
 8008894:	2300      	movs	r3, #0
 8008896:	4620      	mov	r0, r4
 8008898:	4629      	mov	r1, r5
 800889a:	f7f8 f88f 	bl	80009bc <__aeabi_dcmplt>
 800889e:	b140      	cbz	r0, 80088b2 <_dtoa_r+0x16a>
 80088a0:	4638      	mov	r0, r7
 80088a2:	f7f7 fdaf 	bl	8000404 <__aeabi_i2d>
 80088a6:	4622      	mov	r2, r4
 80088a8:	462b      	mov	r3, r5
 80088aa:	f7f8 f87d 	bl	80009a8 <__aeabi_dcmpeq>
 80088ae:	b900      	cbnz	r0, 80088b2 <_dtoa_r+0x16a>
 80088b0:	3f01      	subs	r7, #1
 80088b2:	2f16      	cmp	r7, #22
 80088b4:	d853      	bhi.n	800895e <_dtoa_r+0x216>
 80088b6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80088ba:	4b5c      	ldr	r3, [pc, #368]	@ (8008a2c <_dtoa_r+0x2e4>)
 80088bc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80088c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088c4:	f7f8 f87a 	bl	80009bc <__aeabi_dcmplt>
 80088c8:	2800      	cmp	r0, #0
 80088ca:	d04a      	beq.n	8008962 <_dtoa_r+0x21a>
 80088cc:	2300      	movs	r3, #0
 80088ce:	3f01      	subs	r7, #1
 80088d0:	930f      	str	r3, [sp, #60]	@ 0x3c
 80088d2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80088d4:	1b9b      	subs	r3, r3, r6
 80088d6:	1e5a      	subs	r2, r3, #1
 80088d8:	bf46      	itte	mi
 80088da:	f1c3 0801 	rsbmi	r8, r3, #1
 80088de:	2300      	movmi	r3, #0
 80088e0:	f04f 0800 	movpl.w	r8, #0
 80088e4:	9209      	str	r2, [sp, #36]	@ 0x24
 80088e6:	bf48      	it	mi
 80088e8:	9309      	strmi	r3, [sp, #36]	@ 0x24
 80088ea:	2f00      	cmp	r7, #0
 80088ec:	db3b      	blt.n	8008966 <_dtoa_r+0x21e>
 80088ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80088f0:	970e      	str	r7, [sp, #56]	@ 0x38
 80088f2:	443b      	add	r3, r7
 80088f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80088f6:	2300      	movs	r3, #0
 80088f8:	930a      	str	r3, [sp, #40]	@ 0x28
 80088fa:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80088fc:	2b09      	cmp	r3, #9
 80088fe:	d866      	bhi.n	80089ce <_dtoa_r+0x286>
 8008900:	2b05      	cmp	r3, #5
 8008902:	bfc4      	itt	gt
 8008904:	3b04      	subgt	r3, #4
 8008906:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8008908:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800890a:	bfc8      	it	gt
 800890c:	2400      	movgt	r4, #0
 800890e:	f1a3 0302 	sub.w	r3, r3, #2
 8008912:	bfd8      	it	le
 8008914:	2401      	movle	r4, #1
 8008916:	2b03      	cmp	r3, #3
 8008918:	d864      	bhi.n	80089e4 <_dtoa_r+0x29c>
 800891a:	e8df f003 	tbb	[pc, r3]
 800891e:	382b      	.short	0x382b
 8008920:	5636      	.short	0x5636
 8008922:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8008926:	441e      	add	r6, r3
 8008928:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800892c:	2b20      	cmp	r3, #32
 800892e:	bfc1      	itttt	gt
 8008930:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008934:	fa08 f803 	lslgt.w	r8, r8, r3
 8008938:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800893c:	fa24 f303 	lsrgt.w	r3, r4, r3
 8008940:	bfd6      	itet	le
 8008942:	f1c3 0320 	rsble	r3, r3, #32
 8008946:	ea48 0003 	orrgt.w	r0, r8, r3
 800894a:	fa04 f003 	lslle.w	r0, r4, r3
 800894e:	f7f7 fd49 	bl	80003e4 <__aeabi_ui2d>
 8008952:	2201      	movs	r2, #1
 8008954:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8008958:	3e01      	subs	r6, #1
 800895a:	9212      	str	r2, [sp, #72]	@ 0x48
 800895c:	e775      	b.n	800884a <_dtoa_r+0x102>
 800895e:	2301      	movs	r3, #1
 8008960:	e7b6      	b.n	80088d0 <_dtoa_r+0x188>
 8008962:	900f      	str	r0, [sp, #60]	@ 0x3c
 8008964:	e7b5      	b.n	80088d2 <_dtoa_r+0x18a>
 8008966:	427b      	negs	r3, r7
 8008968:	930a      	str	r3, [sp, #40]	@ 0x28
 800896a:	2300      	movs	r3, #0
 800896c:	eba8 0807 	sub.w	r8, r8, r7
 8008970:	930e      	str	r3, [sp, #56]	@ 0x38
 8008972:	e7c2      	b.n	80088fa <_dtoa_r+0x1b2>
 8008974:	2300      	movs	r3, #0
 8008976:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008978:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800897a:	2b00      	cmp	r3, #0
 800897c:	dc35      	bgt.n	80089ea <_dtoa_r+0x2a2>
 800897e:	2301      	movs	r3, #1
 8008980:	461a      	mov	r2, r3
 8008982:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8008986:	9221      	str	r2, [sp, #132]	@ 0x84
 8008988:	e00b      	b.n	80089a2 <_dtoa_r+0x25a>
 800898a:	2301      	movs	r3, #1
 800898c:	e7f3      	b.n	8008976 <_dtoa_r+0x22e>
 800898e:	2300      	movs	r3, #0
 8008990:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008992:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008994:	18fb      	adds	r3, r7, r3
 8008996:	9308      	str	r3, [sp, #32]
 8008998:	3301      	adds	r3, #1
 800899a:	2b01      	cmp	r3, #1
 800899c:	9307      	str	r3, [sp, #28]
 800899e:	bfb8      	it	lt
 80089a0:	2301      	movlt	r3, #1
 80089a2:	2100      	movs	r1, #0
 80089a4:	2204      	movs	r2, #4
 80089a6:	f8db 001c 	ldr.w	r0, [fp, #28]
 80089aa:	f102 0514 	add.w	r5, r2, #20
 80089ae:	429d      	cmp	r5, r3
 80089b0:	d91f      	bls.n	80089f2 <_dtoa_r+0x2aa>
 80089b2:	6041      	str	r1, [r0, #4]
 80089b4:	4658      	mov	r0, fp
 80089b6:	f000 fd8d 	bl	80094d4 <_Balloc>
 80089ba:	4682      	mov	sl, r0
 80089bc:	2800      	cmp	r0, #0
 80089be:	d139      	bne.n	8008a34 <_dtoa_r+0x2ec>
 80089c0:	4602      	mov	r2, r0
 80089c2:	f240 11af 	movw	r1, #431	@ 0x1af
 80089c6:	4b1a      	ldr	r3, [pc, #104]	@ (8008a30 <_dtoa_r+0x2e8>)
 80089c8:	e6d2      	b.n	8008770 <_dtoa_r+0x28>
 80089ca:	2301      	movs	r3, #1
 80089cc:	e7e0      	b.n	8008990 <_dtoa_r+0x248>
 80089ce:	2401      	movs	r4, #1
 80089d0:	2300      	movs	r3, #0
 80089d2:	940b      	str	r4, [sp, #44]	@ 0x2c
 80089d4:	9320      	str	r3, [sp, #128]	@ 0x80
 80089d6:	f04f 33ff 	mov.w	r3, #4294967295
 80089da:	2200      	movs	r2, #0
 80089dc:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80089e0:	2312      	movs	r3, #18
 80089e2:	e7d0      	b.n	8008986 <_dtoa_r+0x23e>
 80089e4:	2301      	movs	r3, #1
 80089e6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80089e8:	e7f5      	b.n	80089d6 <_dtoa_r+0x28e>
 80089ea:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80089ec:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80089f0:	e7d7      	b.n	80089a2 <_dtoa_r+0x25a>
 80089f2:	3101      	adds	r1, #1
 80089f4:	0052      	lsls	r2, r2, #1
 80089f6:	e7d8      	b.n	80089aa <_dtoa_r+0x262>
 80089f8:	636f4361 	.word	0x636f4361
 80089fc:	3fd287a7 	.word	0x3fd287a7
 8008a00:	8b60c8b3 	.word	0x8b60c8b3
 8008a04:	3fc68a28 	.word	0x3fc68a28
 8008a08:	509f79fb 	.word	0x509f79fb
 8008a0c:	3fd34413 	.word	0x3fd34413
 8008a10:	0800c522 	.word	0x0800c522
 8008a14:	0800c539 	.word	0x0800c539
 8008a18:	7ff00000 	.word	0x7ff00000
 8008a1c:	0800c51e 	.word	0x0800c51e
 8008a20:	0800c4ed 	.word	0x0800c4ed
 8008a24:	0800c4ec 	.word	0x0800c4ec
 8008a28:	3ff80000 	.word	0x3ff80000
 8008a2c:	0800c630 	.word	0x0800c630
 8008a30:	0800c591 	.word	0x0800c591
 8008a34:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008a38:	6018      	str	r0, [r3, #0]
 8008a3a:	9b07      	ldr	r3, [sp, #28]
 8008a3c:	2b0e      	cmp	r3, #14
 8008a3e:	f200 80a4 	bhi.w	8008b8a <_dtoa_r+0x442>
 8008a42:	2c00      	cmp	r4, #0
 8008a44:	f000 80a1 	beq.w	8008b8a <_dtoa_r+0x442>
 8008a48:	2f00      	cmp	r7, #0
 8008a4a:	dd33      	ble.n	8008ab4 <_dtoa_r+0x36c>
 8008a4c:	4b86      	ldr	r3, [pc, #536]	@ (8008c68 <_dtoa_r+0x520>)
 8008a4e:	f007 020f 	and.w	r2, r7, #15
 8008a52:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008a56:	05f8      	lsls	r0, r7, #23
 8008a58:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008a5c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8008a60:	ea4f 1427 	mov.w	r4, r7, asr #4
 8008a64:	d516      	bpl.n	8008a94 <_dtoa_r+0x34c>
 8008a66:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008a6a:	4b80      	ldr	r3, [pc, #512]	@ (8008c6c <_dtoa_r+0x524>)
 8008a6c:	2603      	movs	r6, #3
 8008a6e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008a72:	f7f7 fe5b 	bl	800072c <__aeabi_ddiv>
 8008a76:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008a7a:	f004 040f 	and.w	r4, r4, #15
 8008a7e:	4d7b      	ldr	r5, [pc, #492]	@ (8008c6c <_dtoa_r+0x524>)
 8008a80:	b954      	cbnz	r4, 8008a98 <_dtoa_r+0x350>
 8008a82:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008a86:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008a8a:	f7f7 fe4f 	bl	800072c <__aeabi_ddiv>
 8008a8e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008a92:	e028      	b.n	8008ae6 <_dtoa_r+0x39e>
 8008a94:	2602      	movs	r6, #2
 8008a96:	e7f2      	b.n	8008a7e <_dtoa_r+0x336>
 8008a98:	07e1      	lsls	r1, r4, #31
 8008a9a:	d508      	bpl.n	8008aae <_dtoa_r+0x366>
 8008a9c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008aa0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008aa4:	f7f7 fd18 	bl	80004d8 <__aeabi_dmul>
 8008aa8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008aac:	3601      	adds	r6, #1
 8008aae:	1064      	asrs	r4, r4, #1
 8008ab0:	3508      	adds	r5, #8
 8008ab2:	e7e5      	b.n	8008a80 <_dtoa_r+0x338>
 8008ab4:	f000 80d2 	beq.w	8008c5c <_dtoa_r+0x514>
 8008ab8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008abc:	427c      	negs	r4, r7
 8008abe:	4b6a      	ldr	r3, [pc, #424]	@ (8008c68 <_dtoa_r+0x520>)
 8008ac0:	f004 020f 	and.w	r2, r4, #15
 8008ac4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008acc:	f7f7 fd04 	bl	80004d8 <__aeabi_dmul>
 8008ad0:	2602      	movs	r6, #2
 8008ad2:	2300      	movs	r3, #0
 8008ad4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008ad8:	4d64      	ldr	r5, [pc, #400]	@ (8008c6c <_dtoa_r+0x524>)
 8008ada:	1124      	asrs	r4, r4, #4
 8008adc:	2c00      	cmp	r4, #0
 8008ade:	f040 80b2 	bne.w	8008c46 <_dtoa_r+0x4fe>
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d1d3      	bne.n	8008a8e <_dtoa_r+0x346>
 8008ae6:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008aea:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	f000 80b7 	beq.w	8008c60 <_dtoa_r+0x518>
 8008af2:	2200      	movs	r2, #0
 8008af4:	4620      	mov	r0, r4
 8008af6:	4629      	mov	r1, r5
 8008af8:	4b5d      	ldr	r3, [pc, #372]	@ (8008c70 <_dtoa_r+0x528>)
 8008afa:	f7f7 ff5f 	bl	80009bc <__aeabi_dcmplt>
 8008afe:	2800      	cmp	r0, #0
 8008b00:	f000 80ae 	beq.w	8008c60 <_dtoa_r+0x518>
 8008b04:	9b07      	ldr	r3, [sp, #28]
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	f000 80aa 	beq.w	8008c60 <_dtoa_r+0x518>
 8008b0c:	9b08      	ldr	r3, [sp, #32]
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	dd37      	ble.n	8008b82 <_dtoa_r+0x43a>
 8008b12:	1e7b      	subs	r3, r7, #1
 8008b14:	4620      	mov	r0, r4
 8008b16:	9304      	str	r3, [sp, #16]
 8008b18:	2200      	movs	r2, #0
 8008b1a:	4629      	mov	r1, r5
 8008b1c:	4b55      	ldr	r3, [pc, #340]	@ (8008c74 <_dtoa_r+0x52c>)
 8008b1e:	f7f7 fcdb 	bl	80004d8 <__aeabi_dmul>
 8008b22:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008b26:	9c08      	ldr	r4, [sp, #32]
 8008b28:	3601      	adds	r6, #1
 8008b2a:	4630      	mov	r0, r6
 8008b2c:	f7f7 fc6a 	bl	8000404 <__aeabi_i2d>
 8008b30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008b34:	f7f7 fcd0 	bl	80004d8 <__aeabi_dmul>
 8008b38:	2200      	movs	r2, #0
 8008b3a:	4b4f      	ldr	r3, [pc, #316]	@ (8008c78 <_dtoa_r+0x530>)
 8008b3c:	f7f7 fb16 	bl	800016c <__adddf3>
 8008b40:	4605      	mov	r5, r0
 8008b42:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8008b46:	2c00      	cmp	r4, #0
 8008b48:	f040 809a 	bne.w	8008c80 <_dtoa_r+0x538>
 8008b4c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008b50:	2200      	movs	r2, #0
 8008b52:	4b4a      	ldr	r3, [pc, #296]	@ (8008c7c <_dtoa_r+0x534>)
 8008b54:	f7f7 fb08 	bl	8000168 <__aeabi_dsub>
 8008b58:	4602      	mov	r2, r0
 8008b5a:	460b      	mov	r3, r1
 8008b5c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008b60:	462a      	mov	r2, r5
 8008b62:	4633      	mov	r3, r6
 8008b64:	f7f7 ff48 	bl	80009f8 <__aeabi_dcmpgt>
 8008b68:	2800      	cmp	r0, #0
 8008b6a:	f040 828e 	bne.w	800908a <_dtoa_r+0x942>
 8008b6e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008b72:	462a      	mov	r2, r5
 8008b74:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008b78:	f7f7 ff20 	bl	80009bc <__aeabi_dcmplt>
 8008b7c:	2800      	cmp	r0, #0
 8008b7e:	f040 8127 	bne.w	8008dd0 <_dtoa_r+0x688>
 8008b82:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8008b86:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8008b8a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	f2c0 8163 	blt.w	8008e58 <_dtoa_r+0x710>
 8008b92:	2f0e      	cmp	r7, #14
 8008b94:	f300 8160 	bgt.w	8008e58 <_dtoa_r+0x710>
 8008b98:	4b33      	ldr	r3, [pc, #204]	@ (8008c68 <_dtoa_r+0x520>)
 8008b9a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008b9e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008ba2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8008ba6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	da03      	bge.n	8008bb4 <_dtoa_r+0x46c>
 8008bac:	9b07      	ldr	r3, [sp, #28]
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	f340 8100 	ble.w	8008db4 <_dtoa_r+0x66c>
 8008bb4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008bb8:	4656      	mov	r6, sl
 8008bba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008bbe:	4620      	mov	r0, r4
 8008bc0:	4629      	mov	r1, r5
 8008bc2:	f7f7 fdb3 	bl	800072c <__aeabi_ddiv>
 8008bc6:	f7f7 ff37 	bl	8000a38 <__aeabi_d2iz>
 8008bca:	4680      	mov	r8, r0
 8008bcc:	f7f7 fc1a 	bl	8000404 <__aeabi_i2d>
 8008bd0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008bd4:	f7f7 fc80 	bl	80004d8 <__aeabi_dmul>
 8008bd8:	4602      	mov	r2, r0
 8008bda:	460b      	mov	r3, r1
 8008bdc:	4620      	mov	r0, r4
 8008bde:	4629      	mov	r1, r5
 8008be0:	f7f7 fac2 	bl	8000168 <__aeabi_dsub>
 8008be4:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8008be8:	9d07      	ldr	r5, [sp, #28]
 8008bea:	f806 4b01 	strb.w	r4, [r6], #1
 8008bee:	eba6 040a 	sub.w	r4, r6, sl
 8008bf2:	42a5      	cmp	r5, r4
 8008bf4:	4602      	mov	r2, r0
 8008bf6:	460b      	mov	r3, r1
 8008bf8:	f040 8116 	bne.w	8008e28 <_dtoa_r+0x6e0>
 8008bfc:	f7f7 fab6 	bl	800016c <__adddf3>
 8008c00:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008c04:	4604      	mov	r4, r0
 8008c06:	460d      	mov	r5, r1
 8008c08:	f7f7 fef6 	bl	80009f8 <__aeabi_dcmpgt>
 8008c0c:	2800      	cmp	r0, #0
 8008c0e:	f040 80f8 	bne.w	8008e02 <_dtoa_r+0x6ba>
 8008c12:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008c16:	4620      	mov	r0, r4
 8008c18:	4629      	mov	r1, r5
 8008c1a:	f7f7 fec5 	bl	80009a8 <__aeabi_dcmpeq>
 8008c1e:	b118      	cbz	r0, 8008c28 <_dtoa_r+0x4e0>
 8008c20:	f018 0f01 	tst.w	r8, #1
 8008c24:	f040 80ed 	bne.w	8008e02 <_dtoa_r+0x6ba>
 8008c28:	4649      	mov	r1, r9
 8008c2a:	4658      	mov	r0, fp
 8008c2c:	f000 fc92 	bl	8009554 <_Bfree>
 8008c30:	2300      	movs	r3, #0
 8008c32:	7033      	strb	r3, [r6, #0]
 8008c34:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8008c36:	3701      	adds	r7, #1
 8008c38:	601f      	str	r7, [r3, #0]
 8008c3a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	f000 8320 	beq.w	8009282 <_dtoa_r+0xb3a>
 8008c42:	601e      	str	r6, [r3, #0]
 8008c44:	e31d      	b.n	8009282 <_dtoa_r+0xb3a>
 8008c46:	07e2      	lsls	r2, r4, #31
 8008c48:	d505      	bpl.n	8008c56 <_dtoa_r+0x50e>
 8008c4a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008c4e:	f7f7 fc43 	bl	80004d8 <__aeabi_dmul>
 8008c52:	2301      	movs	r3, #1
 8008c54:	3601      	adds	r6, #1
 8008c56:	1064      	asrs	r4, r4, #1
 8008c58:	3508      	adds	r5, #8
 8008c5a:	e73f      	b.n	8008adc <_dtoa_r+0x394>
 8008c5c:	2602      	movs	r6, #2
 8008c5e:	e742      	b.n	8008ae6 <_dtoa_r+0x39e>
 8008c60:	9c07      	ldr	r4, [sp, #28]
 8008c62:	9704      	str	r7, [sp, #16]
 8008c64:	e761      	b.n	8008b2a <_dtoa_r+0x3e2>
 8008c66:	bf00      	nop
 8008c68:	0800c630 	.word	0x0800c630
 8008c6c:	0800c608 	.word	0x0800c608
 8008c70:	3ff00000 	.word	0x3ff00000
 8008c74:	40240000 	.word	0x40240000
 8008c78:	401c0000 	.word	0x401c0000
 8008c7c:	40140000 	.word	0x40140000
 8008c80:	4b70      	ldr	r3, [pc, #448]	@ (8008e44 <_dtoa_r+0x6fc>)
 8008c82:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008c84:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008c88:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008c8c:	4454      	add	r4, sl
 8008c8e:	2900      	cmp	r1, #0
 8008c90:	d045      	beq.n	8008d1e <_dtoa_r+0x5d6>
 8008c92:	2000      	movs	r0, #0
 8008c94:	496c      	ldr	r1, [pc, #432]	@ (8008e48 <_dtoa_r+0x700>)
 8008c96:	f7f7 fd49 	bl	800072c <__aeabi_ddiv>
 8008c9a:	4633      	mov	r3, r6
 8008c9c:	462a      	mov	r2, r5
 8008c9e:	f7f7 fa63 	bl	8000168 <__aeabi_dsub>
 8008ca2:	4656      	mov	r6, sl
 8008ca4:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008ca8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008cac:	f7f7 fec4 	bl	8000a38 <__aeabi_d2iz>
 8008cb0:	4605      	mov	r5, r0
 8008cb2:	f7f7 fba7 	bl	8000404 <__aeabi_i2d>
 8008cb6:	4602      	mov	r2, r0
 8008cb8:	460b      	mov	r3, r1
 8008cba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008cbe:	f7f7 fa53 	bl	8000168 <__aeabi_dsub>
 8008cc2:	4602      	mov	r2, r0
 8008cc4:	460b      	mov	r3, r1
 8008cc6:	3530      	adds	r5, #48	@ 0x30
 8008cc8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008ccc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008cd0:	f806 5b01 	strb.w	r5, [r6], #1
 8008cd4:	f7f7 fe72 	bl	80009bc <__aeabi_dcmplt>
 8008cd8:	2800      	cmp	r0, #0
 8008cda:	d163      	bne.n	8008da4 <_dtoa_r+0x65c>
 8008cdc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008ce0:	2000      	movs	r0, #0
 8008ce2:	495a      	ldr	r1, [pc, #360]	@ (8008e4c <_dtoa_r+0x704>)
 8008ce4:	f7f7 fa40 	bl	8000168 <__aeabi_dsub>
 8008ce8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008cec:	f7f7 fe66 	bl	80009bc <__aeabi_dcmplt>
 8008cf0:	2800      	cmp	r0, #0
 8008cf2:	f040 8087 	bne.w	8008e04 <_dtoa_r+0x6bc>
 8008cf6:	42a6      	cmp	r6, r4
 8008cf8:	f43f af43 	beq.w	8008b82 <_dtoa_r+0x43a>
 8008cfc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008d00:	2200      	movs	r2, #0
 8008d02:	4b53      	ldr	r3, [pc, #332]	@ (8008e50 <_dtoa_r+0x708>)
 8008d04:	f7f7 fbe8 	bl	80004d8 <__aeabi_dmul>
 8008d08:	2200      	movs	r2, #0
 8008d0a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008d0e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008d12:	4b4f      	ldr	r3, [pc, #316]	@ (8008e50 <_dtoa_r+0x708>)
 8008d14:	f7f7 fbe0 	bl	80004d8 <__aeabi_dmul>
 8008d18:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008d1c:	e7c4      	b.n	8008ca8 <_dtoa_r+0x560>
 8008d1e:	4631      	mov	r1, r6
 8008d20:	4628      	mov	r0, r5
 8008d22:	f7f7 fbd9 	bl	80004d8 <__aeabi_dmul>
 8008d26:	4656      	mov	r6, sl
 8008d28:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008d2c:	9413      	str	r4, [sp, #76]	@ 0x4c
 8008d2e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008d32:	f7f7 fe81 	bl	8000a38 <__aeabi_d2iz>
 8008d36:	4605      	mov	r5, r0
 8008d38:	f7f7 fb64 	bl	8000404 <__aeabi_i2d>
 8008d3c:	4602      	mov	r2, r0
 8008d3e:	460b      	mov	r3, r1
 8008d40:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008d44:	f7f7 fa10 	bl	8000168 <__aeabi_dsub>
 8008d48:	4602      	mov	r2, r0
 8008d4a:	460b      	mov	r3, r1
 8008d4c:	3530      	adds	r5, #48	@ 0x30
 8008d4e:	f806 5b01 	strb.w	r5, [r6], #1
 8008d52:	42a6      	cmp	r6, r4
 8008d54:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008d58:	f04f 0200 	mov.w	r2, #0
 8008d5c:	d124      	bne.n	8008da8 <_dtoa_r+0x660>
 8008d5e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008d62:	4b39      	ldr	r3, [pc, #228]	@ (8008e48 <_dtoa_r+0x700>)
 8008d64:	f7f7 fa02 	bl	800016c <__adddf3>
 8008d68:	4602      	mov	r2, r0
 8008d6a:	460b      	mov	r3, r1
 8008d6c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008d70:	f7f7 fe42 	bl	80009f8 <__aeabi_dcmpgt>
 8008d74:	2800      	cmp	r0, #0
 8008d76:	d145      	bne.n	8008e04 <_dtoa_r+0x6bc>
 8008d78:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008d7c:	2000      	movs	r0, #0
 8008d7e:	4932      	ldr	r1, [pc, #200]	@ (8008e48 <_dtoa_r+0x700>)
 8008d80:	f7f7 f9f2 	bl	8000168 <__aeabi_dsub>
 8008d84:	4602      	mov	r2, r0
 8008d86:	460b      	mov	r3, r1
 8008d88:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008d8c:	f7f7 fe16 	bl	80009bc <__aeabi_dcmplt>
 8008d90:	2800      	cmp	r0, #0
 8008d92:	f43f aef6 	beq.w	8008b82 <_dtoa_r+0x43a>
 8008d96:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8008d98:	1e73      	subs	r3, r6, #1
 8008d9a:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008d9c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008da0:	2b30      	cmp	r3, #48	@ 0x30
 8008da2:	d0f8      	beq.n	8008d96 <_dtoa_r+0x64e>
 8008da4:	9f04      	ldr	r7, [sp, #16]
 8008da6:	e73f      	b.n	8008c28 <_dtoa_r+0x4e0>
 8008da8:	4b29      	ldr	r3, [pc, #164]	@ (8008e50 <_dtoa_r+0x708>)
 8008daa:	f7f7 fb95 	bl	80004d8 <__aeabi_dmul>
 8008dae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008db2:	e7bc      	b.n	8008d2e <_dtoa_r+0x5e6>
 8008db4:	d10c      	bne.n	8008dd0 <_dtoa_r+0x688>
 8008db6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008dba:	2200      	movs	r2, #0
 8008dbc:	4b25      	ldr	r3, [pc, #148]	@ (8008e54 <_dtoa_r+0x70c>)
 8008dbe:	f7f7 fb8b 	bl	80004d8 <__aeabi_dmul>
 8008dc2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008dc6:	f7f7 fe0d 	bl	80009e4 <__aeabi_dcmpge>
 8008dca:	2800      	cmp	r0, #0
 8008dcc:	f000 815b 	beq.w	8009086 <_dtoa_r+0x93e>
 8008dd0:	2400      	movs	r4, #0
 8008dd2:	4625      	mov	r5, r4
 8008dd4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008dd6:	4656      	mov	r6, sl
 8008dd8:	43db      	mvns	r3, r3
 8008dda:	9304      	str	r3, [sp, #16]
 8008ddc:	2700      	movs	r7, #0
 8008dde:	4621      	mov	r1, r4
 8008de0:	4658      	mov	r0, fp
 8008de2:	f000 fbb7 	bl	8009554 <_Bfree>
 8008de6:	2d00      	cmp	r5, #0
 8008de8:	d0dc      	beq.n	8008da4 <_dtoa_r+0x65c>
 8008dea:	b12f      	cbz	r7, 8008df8 <_dtoa_r+0x6b0>
 8008dec:	42af      	cmp	r7, r5
 8008dee:	d003      	beq.n	8008df8 <_dtoa_r+0x6b0>
 8008df0:	4639      	mov	r1, r7
 8008df2:	4658      	mov	r0, fp
 8008df4:	f000 fbae 	bl	8009554 <_Bfree>
 8008df8:	4629      	mov	r1, r5
 8008dfa:	4658      	mov	r0, fp
 8008dfc:	f000 fbaa 	bl	8009554 <_Bfree>
 8008e00:	e7d0      	b.n	8008da4 <_dtoa_r+0x65c>
 8008e02:	9704      	str	r7, [sp, #16]
 8008e04:	4633      	mov	r3, r6
 8008e06:	461e      	mov	r6, r3
 8008e08:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008e0c:	2a39      	cmp	r2, #57	@ 0x39
 8008e0e:	d107      	bne.n	8008e20 <_dtoa_r+0x6d8>
 8008e10:	459a      	cmp	sl, r3
 8008e12:	d1f8      	bne.n	8008e06 <_dtoa_r+0x6be>
 8008e14:	9a04      	ldr	r2, [sp, #16]
 8008e16:	3201      	adds	r2, #1
 8008e18:	9204      	str	r2, [sp, #16]
 8008e1a:	2230      	movs	r2, #48	@ 0x30
 8008e1c:	f88a 2000 	strb.w	r2, [sl]
 8008e20:	781a      	ldrb	r2, [r3, #0]
 8008e22:	3201      	adds	r2, #1
 8008e24:	701a      	strb	r2, [r3, #0]
 8008e26:	e7bd      	b.n	8008da4 <_dtoa_r+0x65c>
 8008e28:	2200      	movs	r2, #0
 8008e2a:	4b09      	ldr	r3, [pc, #36]	@ (8008e50 <_dtoa_r+0x708>)
 8008e2c:	f7f7 fb54 	bl	80004d8 <__aeabi_dmul>
 8008e30:	2200      	movs	r2, #0
 8008e32:	2300      	movs	r3, #0
 8008e34:	4604      	mov	r4, r0
 8008e36:	460d      	mov	r5, r1
 8008e38:	f7f7 fdb6 	bl	80009a8 <__aeabi_dcmpeq>
 8008e3c:	2800      	cmp	r0, #0
 8008e3e:	f43f aebc 	beq.w	8008bba <_dtoa_r+0x472>
 8008e42:	e6f1      	b.n	8008c28 <_dtoa_r+0x4e0>
 8008e44:	0800c630 	.word	0x0800c630
 8008e48:	3fe00000 	.word	0x3fe00000
 8008e4c:	3ff00000 	.word	0x3ff00000
 8008e50:	40240000 	.word	0x40240000
 8008e54:	40140000 	.word	0x40140000
 8008e58:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008e5a:	2a00      	cmp	r2, #0
 8008e5c:	f000 80db 	beq.w	8009016 <_dtoa_r+0x8ce>
 8008e60:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8008e62:	2a01      	cmp	r2, #1
 8008e64:	f300 80bf 	bgt.w	8008fe6 <_dtoa_r+0x89e>
 8008e68:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8008e6a:	2a00      	cmp	r2, #0
 8008e6c:	f000 80b7 	beq.w	8008fde <_dtoa_r+0x896>
 8008e70:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8008e74:	4646      	mov	r6, r8
 8008e76:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008e78:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008e7a:	2101      	movs	r1, #1
 8008e7c:	441a      	add	r2, r3
 8008e7e:	4658      	mov	r0, fp
 8008e80:	4498      	add	r8, r3
 8008e82:	9209      	str	r2, [sp, #36]	@ 0x24
 8008e84:	f000 fc64 	bl	8009750 <__i2b>
 8008e88:	4605      	mov	r5, r0
 8008e8a:	b15e      	cbz	r6, 8008ea4 <_dtoa_r+0x75c>
 8008e8c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	dd08      	ble.n	8008ea4 <_dtoa_r+0x75c>
 8008e92:	42b3      	cmp	r3, r6
 8008e94:	bfa8      	it	ge
 8008e96:	4633      	movge	r3, r6
 8008e98:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008e9a:	eba8 0803 	sub.w	r8, r8, r3
 8008e9e:	1af6      	subs	r6, r6, r3
 8008ea0:	1ad3      	subs	r3, r2, r3
 8008ea2:	9309      	str	r3, [sp, #36]	@ 0x24
 8008ea4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008ea6:	b1f3      	cbz	r3, 8008ee6 <_dtoa_r+0x79e>
 8008ea8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	f000 80b7 	beq.w	800901e <_dtoa_r+0x8d6>
 8008eb0:	b18c      	cbz	r4, 8008ed6 <_dtoa_r+0x78e>
 8008eb2:	4629      	mov	r1, r5
 8008eb4:	4622      	mov	r2, r4
 8008eb6:	4658      	mov	r0, fp
 8008eb8:	f000 fd08 	bl	80098cc <__pow5mult>
 8008ebc:	464a      	mov	r2, r9
 8008ebe:	4601      	mov	r1, r0
 8008ec0:	4605      	mov	r5, r0
 8008ec2:	4658      	mov	r0, fp
 8008ec4:	f000 fc5a 	bl	800977c <__multiply>
 8008ec8:	4649      	mov	r1, r9
 8008eca:	9004      	str	r0, [sp, #16]
 8008ecc:	4658      	mov	r0, fp
 8008ece:	f000 fb41 	bl	8009554 <_Bfree>
 8008ed2:	9b04      	ldr	r3, [sp, #16]
 8008ed4:	4699      	mov	r9, r3
 8008ed6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008ed8:	1b1a      	subs	r2, r3, r4
 8008eda:	d004      	beq.n	8008ee6 <_dtoa_r+0x79e>
 8008edc:	4649      	mov	r1, r9
 8008ede:	4658      	mov	r0, fp
 8008ee0:	f000 fcf4 	bl	80098cc <__pow5mult>
 8008ee4:	4681      	mov	r9, r0
 8008ee6:	2101      	movs	r1, #1
 8008ee8:	4658      	mov	r0, fp
 8008eea:	f000 fc31 	bl	8009750 <__i2b>
 8008eee:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008ef0:	4604      	mov	r4, r0
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	f000 81c9 	beq.w	800928a <_dtoa_r+0xb42>
 8008ef8:	461a      	mov	r2, r3
 8008efa:	4601      	mov	r1, r0
 8008efc:	4658      	mov	r0, fp
 8008efe:	f000 fce5 	bl	80098cc <__pow5mult>
 8008f02:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008f04:	4604      	mov	r4, r0
 8008f06:	2b01      	cmp	r3, #1
 8008f08:	f300 808f 	bgt.w	800902a <_dtoa_r+0x8e2>
 8008f0c:	9b02      	ldr	r3, [sp, #8]
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	f040 8087 	bne.w	8009022 <_dtoa_r+0x8da>
 8008f14:	9b03      	ldr	r3, [sp, #12]
 8008f16:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	f040 8083 	bne.w	8009026 <_dtoa_r+0x8de>
 8008f20:	9b03      	ldr	r3, [sp, #12]
 8008f22:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008f26:	0d1b      	lsrs	r3, r3, #20
 8008f28:	051b      	lsls	r3, r3, #20
 8008f2a:	b12b      	cbz	r3, 8008f38 <_dtoa_r+0x7f0>
 8008f2c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f2e:	f108 0801 	add.w	r8, r8, #1
 8008f32:	3301      	adds	r3, #1
 8008f34:	9309      	str	r3, [sp, #36]	@ 0x24
 8008f36:	2301      	movs	r3, #1
 8008f38:	930a      	str	r3, [sp, #40]	@ 0x28
 8008f3a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	f000 81aa 	beq.w	8009296 <_dtoa_r+0xb4e>
 8008f42:	6923      	ldr	r3, [r4, #16]
 8008f44:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008f48:	6918      	ldr	r0, [r3, #16]
 8008f4a:	f000 fbb5 	bl	80096b8 <__hi0bits>
 8008f4e:	f1c0 0020 	rsb	r0, r0, #32
 8008f52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f54:	4418      	add	r0, r3
 8008f56:	f010 001f 	ands.w	r0, r0, #31
 8008f5a:	d071      	beq.n	8009040 <_dtoa_r+0x8f8>
 8008f5c:	f1c0 0320 	rsb	r3, r0, #32
 8008f60:	2b04      	cmp	r3, #4
 8008f62:	dd65      	ble.n	8009030 <_dtoa_r+0x8e8>
 8008f64:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f66:	f1c0 001c 	rsb	r0, r0, #28
 8008f6a:	4403      	add	r3, r0
 8008f6c:	4480      	add	r8, r0
 8008f6e:	4406      	add	r6, r0
 8008f70:	9309      	str	r3, [sp, #36]	@ 0x24
 8008f72:	f1b8 0f00 	cmp.w	r8, #0
 8008f76:	dd05      	ble.n	8008f84 <_dtoa_r+0x83c>
 8008f78:	4649      	mov	r1, r9
 8008f7a:	4642      	mov	r2, r8
 8008f7c:	4658      	mov	r0, fp
 8008f7e:	f000 fcff 	bl	8009980 <__lshift>
 8008f82:	4681      	mov	r9, r0
 8008f84:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	dd05      	ble.n	8008f96 <_dtoa_r+0x84e>
 8008f8a:	4621      	mov	r1, r4
 8008f8c:	461a      	mov	r2, r3
 8008f8e:	4658      	mov	r0, fp
 8008f90:	f000 fcf6 	bl	8009980 <__lshift>
 8008f94:	4604      	mov	r4, r0
 8008f96:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d053      	beq.n	8009044 <_dtoa_r+0x8fc>
 8008f9c:	4621      	mov	r1, r4
 8008f9e:	4648      	mov	r0, r9
 8008fa0:	f000 fd5a 	bl	8009a58 <__mcmp>
 8008fa4:	2800      	cmp	r0, #0
 8008fa6:	da4d      	bge.n	8009044 <_dtoa_r+0x8fc>
 8008fa8:	1e7b      	subs	r3, r7, #1
 8008faa:	4649      	mov	r1, r9
 8008fac:	9304      	str	r3, [sp, #16]
 8008fae:	220a      	movs	r2, #10
 8008fb0:	2300      	movs	r3, #0
 8008fb2:	4658      	mov	r0, fp
 8008fb4:	f000 faf0 	bl	8009598 <__multadd>
 8008fb8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008fba:	4681      	mov	r9, r0
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	f000 816c 	beq.w	800929a <_dtoa_r+0xb52>
 8008fc2:	2300      	movs	r3, #0
 8008fc4:	4629      	mov	r1, r5
 8008fc6:	220a      	movs	r2, #10
 8008fc8:	4658      	mov	r0, fp
 8008fca:	f000 fae5 	bl	8009598 <__multadd>
 8008fce:	9b08      	ldr	r3, [sp, #32]
 8008fd0:	4605      	mov	r5, r0
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	dc61      	bgt.n	800909a <_dtoa_r+0x952>
 8008fd6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008fd8:	2b02      	cmp	r3, #2
 8008fda:	dc3b      	bgt.n	8009054 <_dtoa_r+0x90c>
 8008fdc:	e05d      	b.n	800909a <_dtoa_r+0x952>
 8008fde:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008fe0:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008fe4:	e746      	b.n	8008e74 <_dtoa_r+0x72c>
 8008fe6:	9b07      	ldr	r3, [sp, #28]
 8008fe8:	1e5c      	subs	r4, r3, #1
 8008fea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008fec:	42a3      	cmp	r3, r4
 8008fee:	bfbf      	itttt	lt
 8008ff0:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8008ff2:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8008ff4:	1ae3      	sublt	r3, r4, r3
 8008ff6:	18d2      	addlt	r2, r2, r3
 8008ff8:	bfa8      	it	ge
 8008ffa:	1b1c      	subge	r4, r3, r4
 8008ffc:	9b07      	ldr	r3, [sp, #28]
 8008ffe:	bfbe      	ittt	lt
 8009000:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8009002:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8009004:	2400      	movlt	r4, #0
 8009006:	2b00      	cmp	r3, #0
 8009008:	bfb5      	itete	lt
 800900a:	eba8 0603 	sublt.w	r6, r8, r3
 800900e:	4646      	movge	r6, r8
 8009010:	2300      	movlt	r3, #0
 8009012:	9b07      	ldrge	r3, [sp, #28]
 8009014:	e730      	b.n	8008e78 <_dtoa_r+0x730>
 8009016:	4646      	mov	r6, r8
 8009018:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800901a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800901c:	e735      	b.n	8008e8a <_dtoa_r+0x742>
 800901e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009020:	e75c      	b.n	8008edc <_dtoa_r+0x794>
 8009022:	2300      	movs	r3, #0
 8009024:	e788      	b.n	8008f38 <_dtoa_r+0x7f0>
 8009026:	9b02      	ldr	r3, [sp, #8]
 8009028:	e786      	b.n	8008f38 <_dtoa_r+0x7f0>
 800902a:	2300      	movs	r3, #0
 800902c:	930a      	str	r3, [sp, #40]	@ 0x28
 800902e:	e788      	b.n	8008f42 <_dtoa_r+0x7fa>
 8009030:	d09f      	beq.n	8008f72 <_dtoa_r+0x82a>
 8009032:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009034:	331c      	adds	r3, #28
 8009036:	441a      	add	r2, r3
 8009038:	4498      	add	r8, r3
 800903a:	441e      	add	r6, r3
 800903c:	9209      	str	r2, [sp, #36]	@ 0x24
 800903e:	e798      	b.n	8008f72 <_dtoa_r+0x82a>
 8009040:	4603      	mov	r3, r0
 8009042:	e7f6      	b.n	8009032 <_dtoa_r+0x8ea>
 8009044:	9b07      	ldr	r3, [sp, #28]
 8009046:	9704      	str	r7, [sp, #16]
 8009048:	2b00      	cmp	r3, #0
 800904a:	dc20      	bgt.n	800908e <_dtoa_r+0x946>
 800904c:	9308      	str	r3, [sp, #32]
 800904e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009050:	2b02      	cmp	r3, #2
 8009052:	dd1e      	ble.n	8009092 <_dtoa_r+0x94a>
 8009054:	9b08      	ldr	r3, [sp, #32]
 8009056:	2b00      	cmp	r3, #0
 8009058:	f47f aebc 	bne.w	8008dd4 <_dtoa_r+0x68c>
 800905c:	4621      	mov	r1, r4
 800905e:	2205      	movs	r2, #5
 8009060:	4658      	mov	r0, fp
 8009062:	f000 fa99 	bl	8009598 <__multadd>
 8009066:	4601      	mov	r1, r0
 8009068:	4604      	mov	r4, r0
 800906a:	4648      	mov	r0, r9
 800906c:	f000 fcf4 	bl	8009a58 <__mcmp>
 8009070:	2800      	cmp	r0, #0
 8009072:	f77f aeaf 	ble.w	8008dd4 <_dtoa_r+0x68c>
 8009076:	2331      	movs	r3, #49	@ 0x31
 8009078:	4656      	mov	r6, sl
 800907a:	f806 3b01 	strb.w	r3, [r6], #1
 800907e:	9b04      	ldr	r3, [sp, #16]
 8009080:	3301      	adds	r3, #1
 8009082:	9304      	str	r3, [sp, #16]
 8009084:	e6aa      	b.n	8008ddc <_dtoa_r+0x694>
 8009086:	9c07      	ldr	r4, [sp, #28]
 8009088:	9704      	str	r7, [sp, #16]
 800908a:	4625      	mov	r5, r4
 800908c:	e7f3      	b.n	8009076 <_dtoa_r+0x92e>
 800908e:	9b07      	ldr	r3, [sp, #28]
 8009090:	9308      	str	r3, [sp, #32]
 8009092:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009094:	2b00      	cmp	r3, #0
 8009096:	f000 8104 	beq.w	80092a2 <_dtoa_r+0xb5a>
 800909a:	2e00      	cmp	r6, #0
 800909c:	dd05      	ble.n	80090aa <_dtoa_r+0x962>
 800909e:	4629      	mov	r1, r5
 80090a0:	4632      	mov	r2, r6
 80090a2:	4658      	mov	r0, fp
 80090a4:	f000 fc6c 	bl	8009980 <__lshift>
 80090a8:	4605      	mov	r5, r0
 80090aa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d05a      	beq.n	8009166 <_dtoa_r+0xa1e>
 80090b0:	4658      	mov	r0, fp
 80090b2:	6869      	ldr	r1, [r5, #4]
 80090b4:	f000 fa0e 	bl	80094d4 <_Balloc>
 80090b8:	4606      	mov	r6, r0
 80090ba:	b928      	cbnz	r0, 80090c8 <_dtoa_r+0x980>
 80090bc:	4602      	mov	r2, r0
 80090be:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80090c2:	4b83      	ldr	r3, [pc, #524]	@ (80092d0 <_dtoa_r+0xb88>)
 80090c4:	f7ff bb54 	b.w	8008770 <_dtoa_r+0x28>
 80090c8:	692a      	ldr	r2, [r5, #16]
 80090ca:	f105 010c 	add.w	r1, r5, #12
 80090ce:	3202      	adds	r2, #2
 80090d0:	0092      	lsls	r2, r2, #2
 80090d2:	300c      	adds	r0, #12
 80090d4:	f7ff fa9d 	bl	8008612 <memcpy>
 80090d8:	2201      	movs	r2, #1
 80090da:	4631      	mov	r1, r6
 80090dc:	4658      	mov	r0, fp
 80090de:	f000 fc4f 	bl	8009980 <__lshift>
 80090e2:	462f      	mov	r7, r5
 80090e4:	4605      	mov	r5, r0
 80090e6:	f10a 0301 	add.w	r3, sl, #1
 80090ea:	9307      	str	r3, [sp, #28]
 80090ec:	9b08      	ldr	r3, [sp, #32]
 80090ee:	4453      	add	r3, sl
 80090f0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80090f2:	9b02      	ldr	r3, [sp, #8]
 80090f4:	f003 0301 	and.w	r3, r3, #1
 80090f8:	930a      	str	r3, [sp, #40]	@ 0x28
 80090fa:	9b07      	ldr	r3, [sp, #28]
 80090fc:	4621      	mov	r1, r4
 80090fe:	3b01      	subs	r3, #1
 8009100:	4648      	mov	r0, r9
 8009102:	9302      	str	r3, [sp, #8]
 8009104:	f7ff fa98 	bl	8008638 <quorem>
 8009108:	4639      	mov	r1, r7
 800910a:	9008      	str	r0, [sp, #32]
 800910c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009110:	4648      	mov	r0, r9
 8009112:	f000 fca1 	bl	8009a58 <__mcmp>
 8009116:	462a      	mov	r2, r5
 8009118:	9009      	str	r0, [sp, #36]	@ 0x24
 800911a:	4621      	mov	r1, r4
 800911c:	4658      	mov	r0, fp
 800911e:	f000 fcb7 	bl	8009a90 <__mdiff>
 8009122:	68c2      	ldr	r2, [r0, #12]
 8009124:	4606      	mov	r6, r0
 8009126:	bb02      	cbnz	r2, 800916a <_dtoa_r+0xa22>
 8009128:	4601      	mov	r1, r0
 800912a:	4648      	mov	r0, r9
 800912c:	f000 fc94 	bl	8009a58 <__mcmp>
 8009130:	4602      	mov	r2, r0
 8009132:	4631      	mov	r1, r6
 8009134:	4658      	mov	r0, fp
 8009136:	920c      	str	r2, [sp, #48]	@ 0x30
 8009138:	f000 fa0c 	bl	8009554 <_Bfree>
 800913c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800913e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8009140:	9e07      	ldr	r6, [sp, #28]
 8009142:	ea43 0102 	orr.w	r1, r3, r2
 8009146:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009148:	4319      	orrs	r1, r3
 800914a:	d110      	bne.n	800916e <_dtoa_r+0xa26>
 800914c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009150:	d029      	beq.n	80091a6 <_dtoa_r+0xa5e>
 8009152:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009154:	2b00      	cmp	r3, #0
 8009156:	dd02      	ble.n	800915e <_dtoa_r+0xa16>
 8009158:	9b08      	ldr	r3, [sp, #32]
 800915a:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800915e:	9b02      	ldr	r3, [sp, #8]
 8009160:	f883 8000 	strb.w	r8, [r3]
 8009164:	e63b      	b.n	8008dde <_dtoa_r+0x696>
 8009166:	4628      	mov	r0, r5
 8009168:	e7bb      	b.n	80090e2 <_dtoa_r+0x99a>
 800916a:	2201      	movs	r2, #1
 800916c:	e7e1      	b.n	8009132 <_dtoa_r+0x9ea>
 800916e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009170:	2b00      	cmp	r3, #0
 8009172:	db04      	blt.n	800917e <_dtoa_r+0xa36>
 8009174:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8009176:	430b      	orrs	r3, r1
 8009178:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800917a:	430b      	orrs	r3, r1
 800917c:	d120      	bne.n	80091c0 <_dtoa_r+0xa78>
 800917e:	2a00      	cmp	r2, #0
 8009180:	dded      	ble.n	800915e <_dtoa_r+0xa16>
 8009182:	4649      	mov	r1, r9
 8009184:	2201      	movs	r2, #1
 8009186:	4658      	mov	r0, fp
 8009188:	f000 fbfa 	bl	8009980 <__lshift>
 800918c:	4621      	mov	r1, r4
 800918e:	4681      	mov	r9, r0
 8009190:	f000 fc62 	bl	8009a58 <__mcmp>
 8009194:	2800      	cmp	r0, #0
 8009196:	dc03      	bgt.n	80091a0 <_dtoa_r+0xa58>
 8009198:	d1e1      	bne.n	800915e <_dtoa_r+0xa16>
 800919a:	f018 0f01 	tst.w	r8, #1
 800919e:	d0de      	beq.n	800915e <_dtoa_r+0xa16>
 80091a0:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80091a4:	d1d8      	bne.n	8009158 <_dtoa_r+0xa10>
 80091a6:	2339      	movs	r3, #57	@ 0x39
 80091a8:	9a02      	ldr	r2, [sp, #8]
 80091aa:	7013      	strb	r3, [r2, #0]
 80091ac:	4633      	mov	r3, r6
 80091ae:	461e      	mov	r6, r3
 80091b0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80091b4:	3b01      	subs	r3, #1
 80091b6:	2a39      	cmp	r2, #57	@ 0x39
 80091b8:	d052      	beq.n	8009260 <_dtoa_r+0xb18>
 80091ba:	3201      	adds	r2, #1
 80091bc:	701a      	strb	r2, [r3, #0]
 80091be:	e60e      	b.n	8008dde <_dtoa_r+0x696>
 80091c0:	2a00      	cmp	r2, #0
 80091c2:	dd07      	ble.n	80091d4 <_dtoa_r+0xa8c>
 80091c4:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80091c8:	d0ed      	beq.n	80091a6 <_dtoa_r+0xa5e>
 80091ca:	9a02      	ldr	r2, [sp, #8]
 80091cc:	f108 0301 	add.w	r3, r8, #1
 80091d0:	7013      	strb	r3, [r2, #0]
 80091d2:	e604      	b.n	8008dde <_dtoa_r+0x696>
 80091d4:	9b07      	ldr	r3, [sp, #28]
 80091d6:	9a07      	ldr	r2, [sp, #28]
 80091d8:	f803 8c01 	strb.w	r8, [r3, #-1]
 80091dc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80091de:	4293      	cmp	r3, r2
 80091e0:	d028      	beq.n	8009234 <_dtoa_r+0xaec>
 80091e2:	4649      	mov	r1, r9
 80091e4:	2300      	movs	r3, #0
 80091e6:	220a      	movs	r2, #10
 80091e8:	4658      	mov	r0, fp
 80091ea:	f000 f9d5 	bl	8009598 <__multadd>
 80091ee:	42af      	cmp	r7, r5
 80091f0:	4681      	mov	r9, r0
 80091f2:	f04f 0300 	mov.w	r3, #0
 80091f6:	f04f 020a 	mov.w	r2, #10
 80091fa:	4639      	mov	r1, r7
 80091fc:	4658      	mov	r0, fp
 80091fe:	d107      	bne.n	8009210 <_dtoa_r+0xac8>
 8009200:	f000 f9ca 	bl	8009598 <__multadd>
 8009204:	4607      	mov	r7, r0
 8009206:	4605      	mov	r5, r0
 8009208:	9b07      	ldr	r3, [sp, #28]
 800920a:	3301      	adds	r3, #1
 800920c:	9307      	str	r3, [sp, #28]
 800920e:	e774      	b.n	80090fa <_dtoa_r+0x9b2>
 8009210:	f000 f9c2 	bl	8009598 <__multadd>
 8009214:	4629      	mov	r1, r5
 8009216:	4607      	mov	r7, r0
 8009218:	2300      	movs	r3, #0
 800921a:	220a      	movs	r2, #10
 800921c:	4658      	mov	r0, fp
 800921e:	f000 f9bb 	bl	8009598 <__multadd>
 8009222:	4605      	mov	r5, r0
 8009224:	e7f0      	b.n	8009208 <_dtoa_r+0xac0>
 8009226:	9b08      	ldr	r3, [sp, #32]
 8009228:	2700      	movs	r7, #0
 800922a:	2b00      	cmp	r3, #0
 800922c:	bfcc      	ite	gt
 800922e:	461e      	movgt	r6, r3
 8009230:	2601      	movle	r6, #1
 8009232:	4456      	add	r6, sl
 8009234:	4649      	mov	r1, r9
 8009236:	2201      	movs	r2, #1
 8009238:	4658      	mov	r0, fp
 800923a:	f000 fba1 	bl	8009980 <__lshift>
 800923e:	4621      	mov	r1, r4
 8009240:	4681      	mov	r9, r0
 8009242:	f000 fc09 	bl	8009a58 <__mcmp>
 8009246:	2800      	cmp	r0, #0
 8009248:	dcb0      	bgt.n	80091ac <_dtoa_r+0xa64>
 800924a:	d102      	bne.n	8009252 <_dtoa_r+0xb0a>
 800924c:	f018 0f01 	tst.w	r8, #1
 8009250:	d1ac      	bne.n	80091ac <_dtoa_r+0xa64>
 8009252:	4633      	mov	r3, r6
 8009254:	461e      	mov	r6, r3
 8009256:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800925a:	2a30      	cmp	r2, #48	@ 0x30
 800925c:	d0fa      	beq.n	8009254 <_dtoa_r+0xb0c>
 800925e:	e5be      	b.n	8008dde <_dtoa_r+0x696>
 8009260:	459a      	cmp	sl, r3
 8009262:	d1a4      	bne.n	80091ae <_dtoa_r+0xa66>
 8009264:	9b04      	ldr	r3, [sp, #16]
 8009266:	3301      	adds	r3, #1
 8009268:	9304      	str	r3, [sp, #16]
 800926a:	2331      	movs	r3, #49	@ 0x31
 800926c:	f88a 3000 	strb.w	r3, [sl]
 8009270:	e5b5      	b.n	8008dde <_dtoa_r+0x696>
 8009272:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8009274:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80092d4 <_dtoa_r+0xb8c>
 8009278:	b11b      	cbz	r3, 8009282 <_dtoa_r+0xb3a>
 800927a:	f10a 0308 	add.w	r3, sl, #8
 800927e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8009280:	6013      	str	r3, [r2, #0]
 8009282:	4650      	mov	r0, sl
 8009284:	b017      	add	sp, #92	@ 0x5c
 8009286:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800928a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800928c:	2b01      	cmp	r3, #1
 800928e:	f77f ae3d 	ble.w	8008f0c <_dtoa_r+0x7c4>
 8009292:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009294:	930a      	str	r3, [sp, #40]	@ 0x28
 8009296:	2001      	movs	r0, #1
 8009298:	e65b      	b.n	8008f52 <_dtoa_r+0x80a>
 800929a:	9b08      	ldr	r3, [sp, #32]
 800929c:	2b00      	cmp	r3, #0
 800929e:	f77f aed6 	ble.w	800904e <_dtoa_r+0x906>
 80092a2:	4656      	mov	r6, sl
 80092a4:	4621      	mov	r1, r4
 80092a6:	4648      	mov	r0, r9
 80092a8:	f7ff f9c6 	bl	8008638 <quorem>
 80092ac:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80092b0:	9b08      	ldr	r3, [sp, #32]
 80092b2:	f806 8b01 	strb.w	r8, [r6], #1
 80092b6:	eba6 020a 	sub.w	r2, r6, sl
 80092ba:	4293      	cmp	r3, r2
 80092bc:	ddb3      	ble.n	8009226 <_dtoa_r+0xade>
 80092be:	4649      	mov	r1, r9
 80092c0:	2300      	movs	r3, #0
 80092c2:	220a      	movs	r2, #10
 80092c4:	4658      	mov	r0, fp
 80092c6:	f000 f967 	bl	8009598 <__multadd>
 80092ca:	4681      	mov	r9, r0
 80092cc:	e7ea      	b.n	80092a4 <_dtoa_r+0xb5c>
 80092ce:	bf00      	nop
 80092d0:	0800c591 	.word	0x0800c591
 80092d4:	0800c515 	.word	0x0800c515

080092d8 <_free_r>:
 80092d8:	b538      	push	{r3, r4, r5, lr}
 80092da:	4605      	mov	r5, r0
 80092dc:	2900      	cmp	r1, #0
 80092de:	d040      	beq.n	8009362 <_free_r+0x8a>
 80092e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80092e4:	1f0c      	subs	r4, r1, #4
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	bfb8      	it	lt
 80092ea:	18e4      	addlt	r4, r4, r3
 80092ec:	f000 f8e6 	bl	80094bc <__malloc_lock>
 80092f0:	4a1c      	ldr	r2, [pc, #112]	@ (8009364 <_free_r+0x8c>)
 80092f2:	6813      	ldr	r3, [r2, #0]
 80092f4:	b933      	cbnz	r3, 8009304 <_free_r+0x2c>
 80092f6:	6063      	str	r3, [r4, #4]
 80092f8:	6014      	str	r4, [r2, #0]
 80092fa:	4628      	mov	r0, r5
 80092fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009300:	f000 b8e2 	b.w	80094c8 <__malloc_unlock>
 8009304:	42a3      	cmp	r3, r4
 8009306:	d908      	bls.n	800931a <_free_r+0x42>
 8009308:	6820      	ldr	r0, [r4, #0]
 800930a:	1821      	adds	r1, r4, r0
 800930c:	428b      	cmp	r3, r1
 800930e:	bf01      	itttt	eq
 8009310:	6819      	ldreq	r1, [r3, #0]
 8009312:	685b      	ldreq	r3, [r3, #4]
 8009314:	1809      	addeq	r1, r1, r0
 8009316:	6021      	streq	r1, [r4, #0]
 8009318:	e7ed      	b.n	80092f6 <_free_r+0x1e>
 800931a:	461a      	mov	r2, r3
 800931c:	685b      	ldr	r3, [r3, #4]
 800931e:	b10b      	cbz	r3, 8009324 <_free_r+0x4c>
 8009320:	42a3      	cmp	r3, r4
 8009322:	d9fa      	bls.n	800931a <_free_r+0x42>
 8009324:	6811      	ldr	r1, [r2, #0]
 8009326:	1850      	adds	r0, r2, r1
 8009328:	42a0      	cmp	r0, r4
 800932a:	d10b      	bne.n	8009344 <_free_r+0x6c>
 800932c:	6820      	ldr	r0, [r4, #0]
 800932e:	4401      	add	r1, r0
 8009330:	1850      	adds	r0, r2, r1
 8009332:	4283      	cmp	r3, r0
 8009334:	6011      	str	r1, [r2, #0]
 8009336:	d1e0      	bne.n	80092fa <_free_r+0x22>
 8009338:	6818      	ldr	r0, [r3, #0]
 800933a:	685b      	ldr	r3, [r3, #4]
 800933c:	4408      	add	r0, r1
 800933e:	6010      	str	r0, [r2, #0]
 8009340:	6053      	str	r3, [r2, #4]
 8009342:	e7da      	b.n	80092fa <_free_r+0x22>
 8009344:	d902      	bls.n	800934c <_free_r+0x74>
 8009346:	230c      	movs	r3, #12
 8009348:	602b      	str	r3, [r5, #0]
 800934a:	e7d6      	b.n	80092fa <_free_r+0x22>
 800934c:	6820      	ldr	r0, [r4, #0]
 800934e:	1821      	adds	r1, r4, r0
 8009350:	428b      	cmp	r3, r1
 8009352:	bf01      	itttt	eq
 8009354:	6819      	ldreq	r1, [r3, #0]
 8009356:	685b      	ldreq	r3, [r3, #4]
 8009358:	1809      	addeq	r1, r1, r0
 800935a:	6021      	streq	r1, [r4, #0]
 800935c:	6063      	str	r3, [r4, #4]
 800935e:	6054      	str	r4, [r2, #4]
 8009360:	e7cb      	b.n	80092fa <_free_r+0x22>
 8009362:	bd38      	pop	{r3, r4, r5, pc}
 8009364:	20000974 	.word	0x20000974

08009368 <malloc>:
 8009368:	4b02      	ldr	r3, [pc, #8]	@ (8009374 <malloc+0xc>)
 800936a:	4601      	mov	r1, r0
 800936c:	6818      	ldr	r0, [r3, #0]
 800936e:	f000 b825 	b.w	80093bc <_malloc_r>
 8009372:	bf00      	nop
 8009374:	2000004c 	.word	0x2000004c

08009378 <sbrk_aligned>:
 8009378:	b570      	push	{r4, r5, r6, lr}
 800937a:	4e0f      	ldr	r6, [pc, #60]	@ (80093b8 <sbrk_aligned+0x40>)
 800937c:	460c      	mov	r4, r1
 800937e:	6831      	ldr	r1, [r6, #0]
 8009380:	4605      	mov	r5, r0
 8009382:	b911      	cbnz	r1, 800938a <sbrk_aligned+0x12>
 8009384:	f001 ffb0 	bl	800b2e8 <_sbrk_r>
 8009388:	6030      	str	r0, [r6, #0]
 800938a:	4621      	mov	r1, r4
 800938c:	4628      	mov	r0, r5
 800938e:	f001 ffab 	bl	800b2e8 <_sbrk_r>
 8009392:	1c43      	adds	r3, r0, #1
 8009394:	d103      	bne.n	800939e <sbrk_aligned+0x26>
 8009396:	f04f 34ff 	mov.w	r4, #4294967295
 800939a:	4620      	mov	r0, r4
 800939c:	bd70      	pop	{r4, r5, r6, pc}
 800939e:	1cc4      	adds	r4, r0, #3
 80093a0:	f024 0403 	bic.w	r4, r4, #3
 80093a4:	42a0      	cmp	r0, r4
 80093a6:	d0f8      	beq.n	800939a <sbrk_aligned+0x22>
 80093a8:	1a21      	subs	r1, r4, r0
 80093aa:	4628      	mov	r0, r5
 80093ac:	f001 ff9c 	bl	800b2e8 <_sbrk_r>
 80093b0:	3001      	adds	r0, #1
 80093b2:	d1f2      	bne.n	800939a <sbrk_aligned+0x22>
 80093b4:	e7ef      	b.n	8009396 <sbrk_aligned+0x1e>
 80093b6:	bf00      	nop
 80093b8:	20000970 	.word	0x20000970

080093bc <_malloc_r>:
 80093bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80093c0:	1ccd      	adds	r5, r1, #3
 80093c2:	f025 0503 	bic.w	r5, r5, #3
 80093c6:	3508      	adds	r5, #8
 80093c8:	2d0c      	cmp	r5, #12
 80093ca:	bf38      	it	cc
 80093cc:	250c      	movcc	r5, #12
 80093ce:	2d00      	cmp	r5, #0
 80093d0:	4606      	mov	r6, r0
 80093d2:	db01      	blt.n	80093d8 <_malloc_r+0x1c>
 80093d4:	42a9      	cmp	r1, r5
 80093d6:	d904      	bls.n	80093e2 <_malloc_r+0x26>
 80093d8:	230c      	movs	r3, #12
 80093da:	6033      	str	r3, [r6, #0]
 80093dc:	2000      	movs	r0, #0
 80093de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80093e2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80094b8 <_malloc_r+0xfc>
 80093e6:	f000 f869 	bl	80094bc <__malloc_lock>
 80093ea:	f8d8 3000 	ldr.w	r3, [r8]
 80093ee:	461c      	mov	r4, r3
 80093f0:	bb44      	cbnz	r4, 8009444 <_malloc_r+0x88>
 80093f2:	4629      	mov	r1, r5
 80093f4:	4630      	mov	r0, r6
 80093f6:	f7ff ffbf 	bl	8009378 <sbrk_aligned>
 80093fa:	1c43      	adds	r3, r0, #1
 80093fc:	4604      	mov	r4, r0
 80093fe:	d158      	bne.n	80094b2 <_malloc_r+0xf6>
 8009400:	f8d8 4000 	ldr.w	r4, [r8]
 8009404:	4627      	mov	r7, r4
 8009406:	2f00      	cmp	r7, #0
 8009408:	d143      	bne.n	8009492 <_malloc_r+0xd6>
 800940a:	2c00      	cmp	r4, #0
 800940c:	d04b      	beq.n	80094a6 <_malloc_r+0xea>
 800940e:	6823      	ldr	r3, [r4, #0]
 8009410:	4639      	mov	r1, r7
 8009412:	4630      	mov	r0, r6
 8009414:	eb04 0903 	add.w	r9, r4, r3
 8009418:	f001 ff66 	bl	800b2e8 <_sbrk_r>
 800941c:	4581      	cmp	r9, r0
 800941e:	d142      	bne.n	80094a6 <_malloc_r+0xea>
 8009420:	6821      	ldr	r1, [r4, #0]
 8009422:	4630      	mov	r0, r6
 8009424:	1a6d      	subs	r5, r5, r1
 8009426:	4629      	mov	r1, r5
 8009428:	f7ff ffa6 	bl	8009378 <sbrk_aligned>
 800942c:	3001      	adds	r0, #1
 800942e:	d03a      	beq.n	80094a6 <_malloc_r+0xea>
 8009430:	6823      	ldr	r3, [r4, #0]
 8009432:	442b      	add	r3, r5
 8009434:	6023      	str	r3, [r4, #0]
 8009436:	f8d8 3000 	ldr.w	r3, [r8]
 800943a:	685a      	ldr	r2, [r3, #4]
 800943c:	bb62      	cbnz	r2, 8009498 <_malloc_r+0xdc>
 800943e:	f8c8 7000 	str.w	r7, [r8]
 8009442:	e00f      	b.n	8009464 <_malloc_r+0xa8>
 8009444:	6822      	ldr	r2, [r4, #0]
 8009446:	1b52      	subs	r2, r2, r5
 8009448:	d420      	bmi.n	800948c <_malloc_r+0xd0>
 800944a:	2a0b      	cmp	r2, #11
 800944c:	d917      	bls.n	800947e <_malloc_r+0xc2>
 800944e:	1961      	adds	r1, r4, r5
 8009450:	42a3      	cmp	r3, r4
 8009452:	6025      	str	r5, [r4, #0]
 8009454:	bf18      	it	ne
 8009456:	6059      	strne	r1, [r3, #4]
 8009458:	6863      	ldr	r3, [r4, #4]
 800945a:	bf08      	it	eq
 800945c:	f8c8 1000 	streq.w	r1, [r8]
 8009460:	5162      	str	r2, [r4, r5]
 8009462:	604b      	str	r3, [r1, #4]
 8009464:	4630      	mov	r0, r6
 8009466:	f000 f82f 	bl	80094c8 <__malloc_unlock>
 800946a:	f104 000b 	add.w	r0, r4, #11
 800946e:	1d23      	adds	r3, r4, #4
 8009470:	f020 0007 	bic.w	r0, r0, #7
 8009474:	1ac2      	subs	r2, r0, r3
 8009476:	bf1c      	itt	ne
 8009478:	1a1b      	subne	r3, r3, r0
 800947a:	50a3      	strne	r3, [r4, r2]
 800947c:	e7af      	b.n	80093de <_malloc_r+0x22>
 800947e:	6862      	ldr	r2, [r4, #4]
 8009480:	42a3      	cmp	r3, r4
 8009482:	bf0c      	ite	eq
 8009484:	f8c8 2000 	streq.w	r2, [r8]
 8009488:	605a      	strne	r2, [r3, #4]
 800948a:	e7eb      	b.n	8009464 <_malloc_r+0xa8>
 800948c:	4623      	mov	r3, r4
 800948e:	6864      	ldr	r4, [r4, #4]
 8009490:	e7ae      	b.n	80093f0 <_malloc_r+0x34>
 8009492:	463c      	mov	r4, r7
 8009494:	687f      	ldr	r7, [r7, #4]
 8009496:	e7b6      	b.n	8009406 <_malloc_r+0x4a>
 8009498:	461a      	mov	r2, r3
 800949a:	685b      	ldr	r3, [r3, #4]
 800949c:	42a3      	cmp	r3, r4
 800949e:	d1fb      	bne.n	8009498 <_malloc_r+0xdc>
 80094a0:	2300      	movs	r3, #0
 80094a2:	6053      	str	r3, [r2, #4]
 80094a4:	e7de      	b.n	8009464 <_malloc_r+0xa8>
 80094a6:	230c      	movs	r3, #12
 80094a8:	4630      	mov	r0, r6
 80094aa:	6033      	str	r3, [r6, #0]
 80094ac:	f000 f80c 	bl	80094c8 <__malloc_unlock>
 80094b0:	e794      	b.n	80093dc <_malloc_r+0x20>
 80094b2:	6005      	str	r5, [r0, #0]
 80094b4:	e7d6      	b.n	8009464 <_malloc_r+0xa8>
 80094b6:	bf00      	nop
 80094b8:	20000974 	.word	0x20000974

080094bc <__malloc_lock>:
 80094bc:	4801      	ldr	r0, [pc, #4]	@ (80094c4 <__malloc_lock+0x8>)
 80094be:	f7ff b898 	b.w	80085f2 <__retarget_lock_acquire_recursive>
 80094c2:	bf00      	nop
 80094c4:	2000096c 	.word	0x2000096c

080094c8 <__malloc_unlock>:
 80094c8:	4801      	ldr	r0, [pc, #4]	@ (80094d0 <__malloc_unlock+0x8>)
 80094ca:	f7ff b893 	b.w	80085f4 <__retarget_lock_release_recursive>
 80094ce:	bf00      	nop
 80094d0:	2000096c 	.word	0x2000096c

080094d4 <_Balloc>:
 80094d4:	b570      	push	{r4, r5, r6, lr}
 80094d6:	69c6      	ldr	r6, [r0, #28]
 80094d8:	4604      	mov	r4, r0
 80094da:	460d      	mov	r5, r1
 80094dc:	b976      	cbnz	r6, 80094fc <_Balloc+0x28>
 80094de:	2010      	movs	r0, #16
 80094e0:	f7ff ff42 	bl	8009368 <malloc>
 80094e4:	4602      	mov	r2, r0
 80094e6:	61e0      	str	r0, [r4, #28]
 80094e8:	b920      	cbnz	r0, 80094f4 <_Balloc+0x20>
 80094ea:	216b      	movs	r1, #107	@ 0x6b
 80094ec:	4b17      	ldr	r3, [pc, #92]	@ (800954c <_Balloc+0x78>)
 80094ee:	4818      	ldr	r0, [pc, #96]	@ (8009550 <_Balloc+0x7c>)
 80094f0:	f001 ff10 	bl	800b314 <__assert_func>
 80094f4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80094f8:	6006      	str	r6, [r0, #0]
 80094fa:	60c6      	str	r6, [r0, #12]
 80094fc:	69e6      	ldr	r6, [r4, #28]
 80094fe:	68f3      	ldr	r3, [r6, #12]
 8009500:	b183      	cbz	r3, 8009524 <_Balloc+0x50>
 8009502:	69e3      	ldr	r3, [r4, #28]
 8009504:	68db      	ldr	r3, [r3, #12]
 8009506:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800950a:	b9b8      	cbnz	r0, 800953c <_Balloc+0x68>
 800950c:	2101      	movs	r1, #1
 800950e:	fa01 f605 	lsl.w	r6, r1, r5
 8009512:	1d72      	adds	r2, r6, #5
 8009514:	4620      	mov	r0, r4
 8009516:	0092      	lsls	r2, r2, #2
 8009518:	f001 ff1a 	bl	800b350 <_calloc_r>
 800951c:	b160      	cbz	r0, 8009538 <_Balloc+0x64>
 800951e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009522:	e00e      	b.n	8009542 <_Balloc+0x6e>
 8009524:	2221      	movs	r2, #33	@ 0x21
 8009526:	2104      	movs	r1, #4
 8009528:	4620      	mov	r0, r4
 800952a:	f001 ff11 	bl	800b350 <_calloc_r>
 800952e:	69e3      	ldr	r3, [r4, #28]
 8009530:	60f0      	str	r0, [r6, #12]
 8009532:	68db      	ldr	r3, [r3, #12]
 8009534:	2b00      	cmp	r3, #0
 8009536:	d1e4      	bne.n	8009502 <_Balloc+0x2e>
 8009538:	2000      	movs	r0, #0
 800953a:	bd70      	pop	{r4, r5, r6, pc}
 800953c:	6802      	ldr	r2, [r0, #0]
 800953e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009542:	2300      	movs	r3, #0
 8009544:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009548:	e7f7      	b.n	800953a <_Balloc+0x66>
 800954a:	bf00      	nop
 800954c:	0800c522 	.word	0x0800c522
 8009550:	0800c5a2 	.word	0x0800c5a2

08009554 <_Bfree>:
 8009554:	b570      	push	{r4, r5, r6, lr}
 8009556:	69c6      	ldr	r6, [r0, #28]
 8009558:	4605      	mov	r5, r0
 800955a:	460c      	mov	r4, r1
 800955c:	b976      	cbnz	r6, 800957c <_Bfree+0x28>
 800955e:	2010      	movs	r0, #16
 8009560:	f7ff ff02 	bl	8009368 <malloc>
 8009564:	4602      	mov	r2, r0
 8009566:	61e8      	str	r0, [r5, #28]
 8009568:	b920      	cbnz	r0, 8009574 <_Bfree+0x20>
 800956a:	218f      	movs	r1, #143	@ 0x8f
 800956c:	4b08      	ldr	r3, [pc, #32]	@ (8009590 <_Bfree+0x3c>)
 800956e:	4809      	ldr	r0, [pc, #36]	@ (8009594 <_Bfree+0x40>)
 8009570:	f001 fed0 	bl	800b314 <__assert_func>
 8009574:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009578:	6006      	str	r6, [r0, #0]
 800957a:	60c6      	str	r6, [r0, #12]
 800957c:	b13c      	cbz	r4, 800958e <_Bfree+0x3a>
 800957e:	69eb      	ldr	r3, [r5, #28]
 8009580:	6862      	ldr	r2, [r4, #4]
 8009582:	68db      	ldr	r3, [r3, #12]
 8009584:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009588:	6021      	str	r1, [r4, #0]
 800958a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800958e:	bd70      	pop	{r4, r5, r6, pc}
 8009590:	0800c522 	.word	0x0800c522
 8009594:	0800c5a2 	.word	0x0800c5a2

08009598 <__multadd>:
 8009598:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800959c:	4607      	mov	r7, r0
 800959e:	460c      	mov	r4, r1
 80095a0:	461e      	mov	r6, r3
 80095a2:	2000      	movs	r0, #0
 80095a4:	690d      	ldr	r5, [r1, #16]
 80095a6:	f101 0c14 	add.w	ip, r1, #20
 80095aa:	f8dc 3000 	ldr.w	r3, [ip]
 80095ae:	3001      	adds	r0, #1
 80095b0:	b299      	uxth	r1, r3
 80095b2:	fb02 6101 	mla	r1, r2, r1, r6
 80095b6:	0c1e      	lsrs	r6, r3, #16
 80095b8:	0c0b      	lsrs	r3, r1, #16
 80095ba:	fb02 3306 	mla	r3, r2, r6, r3
 80095be:	b289      	uxth	r1, r1
 80095c0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80095c4:	4285      	cmp	r5, r0
 80095c6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80095ca:	f84c 1b04 	str.w	r1, [ip], #4
 80095ce:	dcec      	bgt.n	80095aa <__multadd+0x12>
 80095d0:	b30e      	cbz	r6, 8009616 <__multadd+0x7e>
 80095d2:	68a3      	ldr	r3, [r4, #8]
 80095d4:	42ab      	cmp	r3, r5
 80095d6:	dc19      	bgt.n	800960c <__multadd+0x74>
 80095d8:	6861      	ldr	r1, [r4, #4]
 80095da:	4638      	mov	r0, r7
 80095dc:	3101      	adds	r1, #1
 80095de:	f7ff ff79 	bl	80094d4 <_Balloc>
 80095e2:	4680      	mov	r8, r0
 80095e4:	b928      	cbnz	r0, 80095f2 <__multadd+0x5a>
 80095e6:	4602      	mov	r2, r0
 80095e8:	21ba      	movs	r1, #186	@ 0xba
 80095ea:	4b0c      	ldr	r3, [pc, #48]	@ (800961c <__multadd+0x84>)
 80095ec:	480c      	ldr	r0, [pc, #48]	@ (8009620 <__multadd+0x88>)
 80095ee:	f001 fe91 	bl	800b314 <__assert_func>
 80095f2:	6922      	ldr	r2, [r4, #16]
 80095f4:	f104 010c 	add.w	r1, r4, #12
 80095f8:	3202      	adds	r2, #2
 80095fa:	0092      	lsls	r2, r2, #2
 80095fc:	300c      	adds	r0, #12
 80095fe:	f7ff f808 	bl	8008612 <memcpy>
 8009602:	4621      	mov	r1, r4
 8009604:	4638      	mov	r0, r7
 8009606:	f7ff ffa5 	bl	8009554 <_Bfree>
 800960a:	4644      	mov	r4, r8
 800960c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009610:	3501      	adds	r5, #1
 8009612:	615e      	str	r6, [r3, #20]
 8009614:	6125      	str	r5, [r4, #16]
 8009616:	4620      	mov	r0, r4
 8009618:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800961c:	0800c591 	.word	0x0800c591
 8009620:	0800c5a2 	.word	0x0800c5a2

08009624 <__s2b>:
 8009624:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009628:	4615      	mov	r5, r2
 800962a:	2209      	movs	r2, #9
 800962c:	461f      	mov	r7, r3
 800962e:	3308      	adds	r3, #8
 8009630:	460c      	mov	r4, r1
 8009632:	fb93 f3f2 	sdiv	r3, r3, r2
 8009636:	4606      	mov	r6, r0
 8009638:	2201      	movs	r2, #1
 800963a:	2100      	movs	r1, #0
 800963c:	429a      	cmp	r2, r3
 800963e:	db09      	blt.n	8009654 <__s2b+0x30>
 8009640:	4630      	mov	r0, r6
 8009642:	f7ff ff47 	bl	80094d4 <_Balloc>
 8009646:	b940      	cbnz	r0, 800965a <__s2b+0x36>
 8009648:	4602      	mov	r2, r0
 800964a:	21d3      	movs	r1, #211	@ 0xd3
 800964c:	4b18      	ldr	r3, [pc, #96]	@ (80096b0 <__s2b+0x8c>)
 800964e:	4819      	ldr	r0, [pc, #100]	@ (80096b4 <__s2b+0x90>)
 8009650:	f001 fe60 	bl	800b314 <__assert_func>
 8009654:	0052      	lsls	r2, r2, #1
 8009656:	3101      	adds	r1, #1
 8009658:	e7f0      	b.n	800963c <__s2b+0x18>
 800965a:	9b08      	ldr	r3, [sp, #32]
 800965c:	2d09      	cmp	r5, #9
 800965e:	6143      	str	r3, [r0, #20]
 8009660:	f04f 0301 	mov.w	r3, #1
 8009664:	6103      	str	r3, [r0, #16]
 8009666:	dd16      	ble.n	8009696 <__s2b+0x72>
 8009668:	f104 0909 	add.w	r9, r4, #9
 800966c:	46c8      	mov	r8, r9
 800966e:	442c      	add	r4, r5
 8009670:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009674:	4601      	mov	r1, r0
 8009676:	220a      	movs	r2, #10
 8009678:	4630      	mov	r0, r6
 800967a:	3b30      	subs	r3, #48	@ 0x30
 800967c:	f7ff ff8c 	bl	8009598 <__multadd>
 8009680:	45a0      	cmp	r8, r4
 8009682:	d1f5      	bne.n	8009670 <__s2b+0x4c>
 8009684:	f1a5 0408 	sub.w	r4, r5, #8
 8009688:	444c      	add	r4, r9
 800968a:	1b2d      	subs	r5, r5, r4
 800968c:	1963      	adds	r3, r4, r5
 800968e:	42bb      	cmp	r3, r7
 8009690:	db04      	blt.n	800969c <__s2b+0x78>
 8009692:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009696:	2509      	movs	r5, #9
 8009698:	340a      	adds	r4, #10
 800969a:	e7f6      	b.n	800968a <__s2b+0x66>
 800969c:	f814 3b01 	ldrb.w	r3, [r4], #1
 80096a0:	4601      	mov	r1, r0
 80096a2:	220a      	movs	r2, #10
 80096a4:	4630      	mov	r0, r6
 80096a6:	3b30      	subs	r3, #48	@ 0x30
 80096a8:	f7ff ff76 	bl	8009598 <__multadd>
 80096ac:	e7ee      	b.n	800968c <__s2b+0x68>
 80096ae:	bf00      	nop
 80096b0:	0800c591 	.word	0x0800c591
 80096b4:	0800c5a2 	.word	0x0800c5a2

080096b8 <__hi0bits>:
 80096b8:	4603      	mov	r3, r0
 80096ba:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80096be:	bf3a      	itte	cc
 80096c0:	0403      	lslcc	r3, r0, #16
 80096c2:	2010      	movcc	r0, #16
 80096c4:	2000      	movcs	r0, #0
 80096c6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80096ca:	bf3c      	itt	cc
 80096cc:	021b      	lslcc	r3, r3, #8
 80096ce:	3008      	addcc	r0, #8
 80096d0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80096d4:	bf3c      	itt	cc
 80096d6:	011b      	lslcc	r3, r3, #4
 80096d8:	3004      	addcc	r0, #4
 80096da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80096de:	bf3c      	itt	cc
 80096e0:	009b      	lslcc	r3, r3, #2
 80096e2:	3002      	addcc	r0, #2
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	db05      	blt.n	80096f4 <__hi0bits+0x3c>
 80096e8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80096ec:	f100 0001 	add.w	r0, r0, #1
 80096f0:	bf08      	it	eq
 80096f2:	2020      	moveq	r0, #32
 80096f4:	4770      	bx	lr

080096f6 <__lo0bits>:
 80096f6:	6803      	ldr	r3, [r0, #0]
 80096f8:	4602      	mov	r2, r0
 80096fa:	f013 0007 	ands.w	r0, r3, #7
 80096fe:	d00b      	beq.n	8009718 <__lo0bits+0x22>
 8009700:	07d9      	lsls	r1, r3, #31
 8009702:	d421      	bmi.n	8009748 <__lo0bits+0x52>
 8009704:	0798      	lsls	r0, r3, #30
 8009706:	bf49      	itett	mi
 8009708:	085b      	lsrmi	r3, r3, #1
 800970a:	089b      	lsrpl	r3, r3, #2
 800970c:	2001      	movmi	r0, #1
 800970e:	6013      	strmi	r3, [r2, #0]
 8009710:	bf5c      	itt	pl
 8009712:	2002      	movpl	r0, #2
 8009714:	6013      	strpl	r3, [r2, #0]
 8009716:	4770      	bx	lr
 8009718:	b299      	uxth	r1, r3
 800971a:	b909      	cbnz	r1, 8009720 <__lo0bits+0x2a>
 800971c:	2010      	movs	r0, #16
 800971e:	0c1b      	lsrs	r3, r3, #16
 8009720:	b2d9      	uxtb	r1, r3
 8009722:	b909      	cbnz	r1, 8009728 <__lo0bits+0x32>
 8009724:	3008      	adds	r0, #8
 8009726:	0a1b      	lsrs	r3, r3, #8
 8009728:	0719      	lsls	r1, r3, #28
 800972a:	bf04      	itt	eq
 800972c:	091b      	lsreq	r3, r3, #4
 800972e:	3004      	addeq	r0, #4
 8009730:	0799      	lsls	r1, r3, #30
 8009732:	bf04      	itt	eq
 8009734:	089b      	lsreq	r3, r3, #2
 8009736:	3002      	addeq	r0, #2
 8009738:	07d9      	lsls	r1, r3, #31
 800973a:	d403      	bmi.n	8009744 <__lo0bits+0x4e>
 800973c:	085b      	lsrs	r3, r3, #1
 800973e:	f100 0001 	add.w	r0, r0, #1
 8009742:	d003      	beq.n	800974c <__lo0bits+0x56>
 8009744:	6013      	str	r3, [r2, #0]
 8009746:	4770      	bx	lr
 8009748:	2000      	movs	r0, #0
 800974a:	4770      	bx	lr
 800974c:	2020      	movs	r0, #32
 800974e:	4770      	bx	lr

08009750 <__i2b>:
 8009750:	b510      	push	{r4, lr}
 8009752:	460c      	mov	r4, r1
 8009754:	2101      	movs	r1, #1
 8009756:	f7ff febd 	bl	80094d4 <_Balloc>
 800975a:	4602      	mov	r2, r0
 800975c:	b928      	cbnz	r0, 800976a <__i2b+0x1a>
 800975e:	f240 1145 	movw	r1, #325	@ 0x145
 8009762:	4b04      	ldr	r3, [pc, #16]	@ (8009774 <__i2b+0x24>)
 8009764:	4804      	ldr	r0, [pc, #16]	@ (8009778 <__i2b+0x28>)
 8009766:	f001 fdd5 	bl	800b314 <__assert_func>
 800976a:	2301      	movs	r3, #1
 800976c:	6144      	str	r4, [r0, #20]
 800976e:	6103      	str	r3, [r0, #16]
 8009770:	bd10      	pop	{r4, pc}
 8009772:	bf00      	nop
 8009774:	0800c591 	.word	0x0800c591
 8009778:	0800c5a2 	.word	0x0800c5a2

0800977c <__multiply>:
 800977c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009780:	4614      	mov	r4, r2
 8009782:	690a      	ldr	r2, [r1, #16]
 8009784:	6923      	ldr	r3, [r4, #16]
 8009786:	460f      	mov	r7, r1
 8009788:	429a      	cmp	r2, r3
 800978a:	bfa2      	ittt	ge
 800978c:	4623      	movge	r3, r4
 800978e:	460c      	movge	r4, r1
 8009790:	461f      	movge	r7, r3
 8009792:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8009796:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800979a:	68a3      	ldr	r3, [r4, #8]
 800979c:	6861      	ldr	r1, [r4, #4]
 800979e:	eb0a 0609 	add.w	r6, sl, r9
 80097a2:	42b3      	cmp	r3, r6
 80097a4:	b085      	sub	sp, #20
 80097a6:	bfb8      	it	lt
 80097a8:	3101      	addlt	r1, #1
 80097aa:	f7ff fe93 	bl	80094d4 <_Balloc>
 80097ae:	b930      	cbnz	r0, 80097be <__multiply+0x42>
 80097b0:	4602      	mov	r2, r0
 80097b2:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80097b6:	4b43      	ldr	r3, [pc, #268]	@ (80098c4 <__multiply+0x148>)
 80097b8:	4843      	ldr	r0, [pc, #268]	@ (80098c8 <__multiply+0x14c>)
 80097ba:	f001 fdab 	bl	800b314 <__assert_func>
 80097be:	f100 0514 	add.w	r5, r0, #20
 80097c2:	462b      	mov	r3, r5
 80097c4:	2200      	movs	r2, #0
 80097c6:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80097ca:	4543      	cmp	r3, r8
 80097cc:	d321      	bcc.n	8009812 <__multiply+0x96>
 80097ce:	f107 0114 	add.w	r1, r7, #20
 80097d2:	f104 0214 	add.w	r2, r4, #20
 80097d6:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80097da:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80097de:	9302      	str	r3, [sp, #8]
 80097e0:	1b13      	subs	r3, r2, r4
 80097e2:	3b15      	subs	r3, #21
 80097e4:	f023 0303 	bic.w	r3, r3, #3
 80097e8:	3304      	adds	r3, #4
 80097ea:	f104 0715 	add.w	r7, r4, #21
 80097ee:	42ba      	cmp	r2, r7
 80097f0:	bf38      	it	cc
 80097f2:	2304      	movcc	r3, #4
 80097f4:	9301      	str	r3, [sp, #4]
 80097f6:	9b02      	ldr	r3, [sp, #8]
 80097f8:	9103      	str	r1, [sp, #12]
 80097fa:	428b      	cmp	r3, r1
 80097fc:	d80c      	bhi.n	8009818 <__multiply+0x9c>
 80097fe:	2e00      	cmp	r6, #0
 8009800:	dd03      	ble.n	800980a <__multiply+0x8e>
 8009802:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009806:	2b00      	cmp	r3, #0
 8009808:	d05a      	beq.n	80098c0 <__multiply+0x144>
 800980a:	6106      	str	r6, [r0, #16]
 800980c:	b005      	add	sp, #20
 800980e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009812:	f843 2b04 	str.w	r2, [r3], #4
 8009816:	e7d8      	b.n	80097ca <__multiply+0x4e>
 8009818:	f8b1 a000 	ldrh.w	sl, [r1]
 800981c:	f1ba 0f00 	cmp.w	sl, #0
 8009820:	d023      	beq.n	800986a <__multiply+0xee>
 8009822:	46a9      	mov	r9, r5
 8009824:	f04f 0c00 	mov.w	ip, #0
 8009828:	f104 0e14 	add.w	lr, r4, #20
 800982c:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009830:	f8d9 3000 	ldr.w	r3, [r9]
 8009834:	fa1f fb87 	uxth.w	fp, r7
 8009838:	b29b      	uxth	r3, r3
 800983a:	fb0a 330b 	mla	r3, sl, fp, r3
 800983e:	4463      	add	r3, ip
 8009840:	f8d9 c000 	ldr.w	ip, [r9]
 8009844:	0c3f      	lsrs	r7, r7, #16
 8009846:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800984a:	fb0a c707 	mla	r7, sl, r7, ip
 800984e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8009852:	b29b      	uxth	r3, r3
 8009854:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009858:	4572      	cmp	r2, lr
 800985a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800985e:	f849 3b04 	str.w	r3, [r9], #4
 8009862:	d8e3      	bhi.n	800982c <__multiply+0xb0>
 8009864:	9b01      	ldr	r3, [sp, #4]
 8009866:	f845 c003 	str.w	ip, [r5, r3]
 800986a:	9b03      	ldr	r3, [sp, #12]
 800986c:	3104      	adds	r1, #4
 800986e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8009872:	f1b9 0f00 	cmp.w	r9, #0
 8009876:	d021      	beq.n	80098bc <__multiply+0x140>
 8009878:	46ae      	mov	lr, r5
 800987a:	f04f 0a00 	mov.w	sl, #0
 800987e:	682b      	ldr	r3, [r5, #0]
 8009880:	f104 0c14 	add.w	ip, r4, #20
 8009884:	f8bc b000 	ldrh.w	fp, [ip]
 8009888:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800988c:	b29b      	uxth	r3, r3
 800988e:	fb09 770b 	mla	r7, r9, fp, r7
 8009892:	4457      	add	r7, sl
 8009894:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009898:	f84e 3b04 	str.w	r3, [lr], #4
 800989c:	f85c 3b04 	ldr.w	r3, [ip], #4
 80098a0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80098a4:	f8be 3000 	ldrh.w	r3, [lr]
 80098a8:	4562      	cmp	r2, ip
 80098aa:	fb09 330a 	mla	r3, r9, sl, r3
 80098ae:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80098b2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80098b6:	d8e5      	bhi.n	8009884 <__multiply+0x108>
 80098b8:	9f01      	ldr	r7, [sp, #4]
 80098ba:	51eb      	str	r3, [r5, r7]
 80098bc:	3504      	adds	r5, #4
 80098be:	e79a      	b.n	80097f6 <__multiply+0x7a>
 80098c0:	3e01      	subs	r6, #1
 80098c2:	e79c      	b.n	80097fe <__multiply+0x82>
 80098c4:	0800c591 	.word	0x0800c591
 80098c8:	0800c5a2 	.word	0x0800c5a2

080098cc <__pow5mult>:
 80098cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80098d0:	4615      	mov	r5, r2
 80098d2:	f012 0203 	ands.w	r2, r2, #3
 80098d6:	4607      	mov	r7, r0
 80098d8:	460e      	mov	r6, r1
 80098da:	d007      	beq.n	80098ec <__pow5mult+0x20>
 80098dc:	4c25      	ldr	r4, [pc, #148]	@ (8009974 <__pow5mult+0xa8>)
 80098de:	3a01      	subs	r2, #1
 80098e0:	2300      	movs	r3, #0
 80098e2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80098e6:	f7ff fe57 	bl	8009598 <__multadd>
 80098ea:	4606      	mov	r6, r0
 80098ec:	10ad      	asrs	r5, r5, #2
 80098ee:	d03d      	beq.n	800996c <__pow5mult+0xa0>
 80098f0:	69fc      	ldr	r4, [r7, #28]
 80098f2:	b97c      	cbnz	r4, 8009914 <__pow5mult+0x48>
 80098f4:	2010      	movs	r0, #16
 80098f6:	f7ff fd37 	bl	8009368 <malloc>
 80098fa:	4602      	mov	r2, r0
 80098fc:	61f8      	str	r0, [r7, #28]
 80098fe:	b928      	cbnz	r0, 800990c <__pow5mult+0x40>
 8009900:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009904:	4b1c      	ldr	r3, [pc, #112]	@ (8009978 <__pow5mult+0xac>)
 8009906:	481d      	ldr	r0, [pc, #116]	@ (800997c <__pow5mult+0xb0>)
 8009908:	f001 fd04 	bl	800b314 <__assert_func>
 800990c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009910:	6004      	str	r4, [r0, #0]
 8009912:	60c4      	str	r4, [r0, #12]
 8009914:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009918:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800991c:	b94c      	cbnz	r4, 8009932 <__pow5mult+0x66>
 800991e:	f240 2171 	movw	r1, #625	@ 0x271
 8009922:	4638      	mov	r0, r7
 8009924:	f7ff ff14 	bl	8009750 <__i2b>
 8009928:	2300      	movs	r3, #0
 800992a:	4604      	mov	r4, r0
 800992c:	f8c8 0008 	str.w	r0, [r8, #8]
 8009930:	6003      	str	r3, [r0, #0]
 8009932:	f04f 0900 	mov.w	r9, #0
 8009936:	07eb      	lsls	r3, r5, #31
 8009938:	d50a      	bpl.n	8009950 <__pow5mult+0x84>
 800993a:	4631      	mov	r1, r6
 800993c:	4622      	mov	r2, r4
 800993e:	4638      	mov	r0, r7
 8009940:	f7ff ff1c 	bl	800977c <__multiply>
 8009944:	4680      	mov	r8, r0
 8009946:	4631      	mov	r1, r6
 8009948:	4638      	mov	r0, r7
 800994a:	f7ff fe03 	bl	8009554 <_Bfree>
 800994e:	4646      	mov	r6, r8
 8009950:	106d      	asrs	r5, r5, #1
 8009952:	d00b      	beq.n	800996c <__pow5mult+0xa0>
 8009954:	6820      	ldr	r0, [r4, #0]
 8009956:	b938      	cbnz	r0, 8009968 <__pow5mult+0x9c>
 8009958:	4622      	mov	r2, r4
 800995a:	4621      	mov	r1, r4
 800995c:	4638      	mov	r0, r7
 800995e:	f7ff ff0d 	bl	800977c <__multiply>
 8009962:	6020      	str	r0, [r4, #0]
 8009964:	f8c0 9000 	str.w	r9, [r0]
 8009968:	4604      	mov	r4, r0
 800996a:	e7e4      	b.n	8009936 <__pow5mult+0x6a>
 800996c:	4630      	mov	r0, r6
 800996e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009972:	bf00      	nop
 8009974:	0800c5fc 	.word	0x0800c5fc
 8009978:	0800c522 	.word	0x0800c522
 800997c:	0800c5a2 	.word	0x0800c5a2

08009980 <__lshift>:
 8009980:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009984:	460c      	mov	r4, r1
 8009986:	4607      	mov	r7, r0
 8009988:	4691      	mov	r9, r2
 800998a:	6923      	ldr	r3, [r4, #16]
 800998c:	6849      	ldr	r1, [r1, #4]
 800998e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009992:	68a3      	ldr	r3, [r4, #8]
 8009994:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009998:	f108 0601 	add.w	r6, r8, #1
 800999c:	42b3      	cmp	r3, r6
 800999e:	db0b      	blt.n	80099b8 <__lshift+0x38>
 80099a0:	4638      	mov	r0, r7
 80099a2:	f7ff fd97 	bl	80094d4 <_Balloc>
 80099a6:	4605      	mov	r5, r0
 80099a8:	b948      	cbnz	r0, 80099be <__lshift+0x3e>
 80099aa:	4602      	mov	r2, r0
 80099ac:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80099b0:	4b27      	ldr	r3, [pc, #156]	@ (8009a50 <__lshift+0xd0>)
 80099b2:	4828      	ldr	r0, [pc, #160]	@ (8009a54 <__lshift+0xd4>)
 80099b4:	f001 fcae 	bl	800b314 <__assert_func>
 80099b8:	3101      	adds	r1, #1
 80099ba:	005b      	lsls	r3, r3, #1
 80099bc:	e7ee      	b.n	800999c <__lshift+0x1c>
 80099be:	2300      	movs	r3, #0
 80099c0:	f100 0114 	add.w	r1, r0, #20
 80099c4:	f100 0210 	add.w	r2, r0, #16
 80099c8:	4618      	mov	r0, r3
 80099ca:	4553      	cmp	r3, sl
 80099cc:	db33      	blt.n	8009a36 <__lshift+0xb6>
 80099ce:	6920      	ldr	r0, [r4, #16]
 80099d0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80099d4:	f104 0314 	add.w	r3, r4, #20
 80099d8:	f019 091f 	ands.w	r9, r9, #31
 80099dc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80099e0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80099e4:	d02b      	beq.n	8009a3e <__lshift+0xbe>
 80099e6:	468a      	mov	sl, r1
 80099e8:	2200      	movs	r2, #0
 80099ea:	f1c9 0e20 	rsb	lr, r9, #32
 80099ee:	6818      	ldr	r0, [r3, #0]
 80099f0:	fa00 f009 	lsl.w	r0, r0, r9
 80099f4:	4310      	orrs	r0, r2
 80099f6:	f84a 0b04 	str.w	r0, [sl], #4
 80099fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80099fe:	459c      	cmp	ip, r3
 8009a00:	fa22 f20e 	lsr.w	r2, r2, lr
 8009a04:	d8f3      	bhi.n	80099ee <__lshift+0x6e>
 8009a06:	ebac 0304 	sub.w	r3, ip, r4
 8009a0a:	3b15      	subs	r3, #21
 8009a0c:	f023 0303 	bic.w	r3, r3, #3
 8009a10:	3304      	adds	r3, #4
 8009a12:	f104 0015 	add.w	r0, r4, #21
 8009a16:	4584      	cmp	ip, r0
 8009a18:	bf38      	it	cc
 8009a1a:	2304      	movcc	r3, #4
 8009a1c:	50ca      	str	r2, [r1, r3]
 8009a1e:	b10a      	cbz	r2, 8009a24 <__lshift+0xa4>
 8009a20:	f108 0602 	add.w	r6, r8, #2
 8009a24:	3e01      	subs	r6, #1
 8009a26:	4638      	mov	r0, r7
 8009a28:	4621      	mov	r1, r4
 8009a2a:	612e      	str	r6, [r5, #16]
 8009a2c:	f7ff fd92 	bl	8009554 <_Bfree>
 8009a30:	4628      	mov	r0, r5
 8009a32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a36:	f842 0f04 	str.w	r0, [r2, #4]!
 8009a3a:	3301      	adds	r3, #1
 8009a3c:	e7c5      	b.n	80099ca <__lshift+0x4a>
 8009a3e:	3904      	subs	r1, #4
 8009a40:	f853 2b04 	ldr.w	r2, [r3], #4
 8009a44:	459c      	cmp	ip, r3
 8009a46:	f841 2f04 	str.w	r2, [r1, #4]!
 8009a4a:	d8f9      	bhi.n	8009a40 <__lshift+0xc0>
 8009a4c:	e7ea      	b.n	8009a24 <__lshift+0xa4>
 8009a4e:	bf00      	nop
 8009a50:	0800c591 	.word	0x0800c591
 8009a54:	0800c5a2 	.word	0x0800c5a2

08009a58 <__mcmp>:
 8009a58:	4603      	mov	r3, r0
 8009a5a:	690a      	ldr	r2, [r1, #16]
 8009a5c:	6900      	ldr	r0, [r0, #16]
 8009a5e:	b530      	push	{r4, r5, lr}
 8009a60:	1a80      	subs	r0, r0, r2
 8009a62:	d10e      	bne.n	8009a82 <__mcmp+0x2a>
 8009a64:	3314      	adds	r3, #20
 8009a66:	3114      	adds	r1, #20
 8009a68:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009a6c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009a70:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009a74:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009a78:	4295      	cmp	r5, r2
 8009a7a:	d003      	beq.n	8009a84 <__mcmp+0x2c>
 8009a7c:	d205      	bcs.n	8009a8a <__mcmp+0x32>
 8009a7e:	f04f 30ff 	mov.w	r0, #4294967295
 8009a82:	bd30      	pop	{r4, r5, pc}
 8009a84:	42a3      	cmp	r3, r4
 8009a86:	d3f3      	bcc.n	8009a70 <__mcmp+0x18>
 8009a88:	e7fb      	b.n	8009a82 <__mcmp+0x2a>
 8009a8a:	2001      	movs	r0, #1
 8009a8c:	e7f9      	b.n	8009a82 <__mcmp+0x2a>
	...

08009a90 <__mdiff>:
 8009a90:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a94:	4689      	mov	r9, r1
 8009a96:	4606      	mov	r6, r0
 8009a98:	4611      	mov	r1, r2
 8009a9a:	4648      	mov	r0, r9
 8009a9c:	4614      	mov	r4, r2
 8009a9e:	f7ff ffdb 	bl	8009a58 <__mcmp>
 8009aa2:	1e05      	subs	r5, r0, #0
 8009aa4:	d112      	bne.n	8009acc <__mdiff+0x3c>
 8009aa6:	4629      	mov	r1, r5
 8009aa8:	4630      	mov	r0, r6
 8009aaa:	f7ff fd13 	bl	80094d4 <_Balloc>
 8009aae:	4602      	mov	r2, r0
 8009ab0:	b928      	cbnz	r0, 8009abe <__mdiff+0x2e>
 8009ab2:	f240 2137 	movw	r1, #567	@ 0x237
 8009ab6:	4b3e      	ldr	r3, [pc, #248]	@ (8009bb0 <__mdiff+0x120>)
 8009ab8:	483e      	ldr	r0, [pc, #248]	@ (8009bb4 <__mdiff+0x124>)
 8009aba:	f001 fc2b 	bl	800b314 <__assert_func>
 8009abe:	2301      	movs	r3, #1
 8009ac0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009ac4:	4610      	mov	r0, r2
 8009ac6:	b003      	add	sp, #12
 8009ac8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009acc:	bfbc      	itt	lt
 8009ace:	464b      	movlt	r3, r9
 8009ad0:	46a1      	movlt	r9, r4
 8009ad2:	4630      	mov	r0, r6
 8009ad4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009ad8:	bfba      	itte	lt
 8009ada:	461c      	movlt	r4, r3
 8009adc:	2501      	movlt	r5, #1
 8009ade:	2500      	movge	r5, #0
 8009ae0:	f7ff fcf8 	bl	80094d4 <_Balloc>
 8009ae4:	4602      	mov	r2, r0
 8009ae6:	b918      	cbnz	r0, 8009af0 <__mdiff+0x60>
 8009ae8:	f240 2145 	movw	r1, #581	@ 0x245
 8009aec:	4b30      	ldr	r3, [pc, #192]	@ (8009bb0 <__mdiff+0x120>)
 8009aee:	e7e3      	b.n	8009ab8 <__mdiff+0x28>
 8009af0:	f100 0b14 	add.w	fp, r0, #20
 8009af4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009af8:	f109 0310 	add.w	r3, r9, #16
 8009afc:	60c5      	str	r5, [r0, #12]
 8009afe:	f04f 0c00 	mov.w	ip, #0
 8009b02:	f109 0514 	add.w	r5, r9, #20
 8009b06:	46d9      	mov	r9, fp
 8009b08:	6926      	ldr	r6, [r4, #16]
 8009b0a:	f104 0e14 	add.w	lr, r4, #20
 8009b0e:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009b12:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009b16:	9301      	str	r3, [sp, #4]
 8009b18:	9b01      	ldr	r3, [sp, #4]
 8009b1a:	f85e 0b04 	ldr.w	r0, [lr], #4
 8009b1e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8009b22:	b281      	uxth	r1, r0
 8009b24:	9301      	str	r3, [sp, #4]
 8009b26:	fa1f f38a 	uxth.w	r3, sl
 8009b2a:	1a5b      	subs	r3, r3, r1
 8009b2c:	0c00      	lsrs	r0, r0, #16
 8009b2e:	4463      	add	r3, ip
 8009b30:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009b34:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009b38:	b29b      	uxth	r3, r3
 8009b3a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009b3e:	4576      	cmp	r6, lr
 8009b40:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009b44:	f849 3b04 	str.w	r3, [r9], #4
 8009b48:	d8e6      	bhi.n	8009b18 <__mdiff+0x88>
 8009b4a:	1b33      	subs	r3, r6, r4
 8009b4c:	3b15      	subs	r3, #21
 8009b4e:	f023 0303 	bic.w	r3, r3, #3
 8009b52:	3415      	adds	r4, #21
 8009b54:	3304      	adds	r3, #4
 8009b56:	42a6      	cmp	r6, r4
 8009b58:	bf38      	it	cc
 8009b5a:	2304      	movcc	r3, #4
 8009b5c:	441d      	add	r5, r3
 8009b5e:	445b      	add	r3, fp
 8009b60:	461e      	mov	r6, r3
 8009b62:	462c      	mov	r4, r5
 8009b64:	4544      	cmp	r4, r8
 8009b66:	d30e      	bcc.n	8009b86 <__mdiff+0xf6>
 8009b68:	f108 0103 	add.w	r1, r8, #3
 8009b6c:	1b49      	subs	r1, r1, r5
 8009b6e:	f021 0103 	bic.w	r1, r1, #3
 8009b72:	3d03      	subs	r5, #3
 8009b74:	45a8      	cmp	r8, r5
 8009b76:	bf38      	it	cc
 8009b78:	2100      	movcc	r1, #0
 8009b7a:	440b      	add	r3, r1
 8009b7c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009b80:	b199      	cbz	r1, 8009baa <__mdiff+0x11a>
 8009b82:	6117      	str	r7, [r2, #16]
 8009b84:	e79e      	b.n	8009ac4 <__mdiff+0x34>
 8009b86:	46e6      	mov	lr, ip
 8009b88:	f854 1b04 	ldr.w	r1, [r4], #4
 8009b8c:	fa1f fc81 	uxth.w	ip, r1
 8009b90:	44f4      	add	ip, lr
 8009b92:	0c08      	lsrs	r0, r1, #16
 8009b94:	4471      	add	r1, lr
 8009b96:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009b9a:	b289      	uxth	r1, r1
 8009b9c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009ba0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009ba4:	f846 1b04 	str.w	r1, [r6], #4
 8009ba8:	e7dc      	b.n	8009b64 <__mdiff+0xd4>
 8009baa:	3f01      	subs	r7, #1
 8009bac:	e7e6      	b.n	8009b7c <__mdiff+0xec>
 8009bae:	bf00      	nop
 8009bb0:	0800c591 	.word	0x0800c591
 8009bb4:	0800c5a2 	.word	0x0800c5a2

08009bb8 <__ulp>:
 8009bb8:	4b0e      	ldr	r3, [pc, #56]	@ (8009bf4 <__ulp+0x3c>)
 8009bba:	400b      	ands	r3, r1
 8009bbc:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	dc08      	bgt.n	8009bd6 <__ulp+0x1e>
 8009bc4:	425b      	negs	r3, r3
 8009bc6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8009bca:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009bce:	da04      	bge.n	8009bda <__ulp+0x22>
 8009bd0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8009bd4:	4113      	asrs	r3, r2
 8009bd6:	2200      	movs	r2, #0
 8009bd8:	e008      	b.n	8009bec <__ulp+0x34>
 8009bda:	f1a2 0314 	sub.w	r3, r2, #20
 8009bde:	2b1e      	cmp	r3, #30
 8009be0:	bfd6      	itet	le
 8009be2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8009be6:	2201      	movgt	r2, #1
 8009be8:	40da      	lsrle	r2, r3
 8009bea:	2300      	movs	r3, #0
 8009bec:	4619      	mov	r1, r3
 8009bee:	4610      	mov	r0, r2
 8009bf0:	4770      	bx	lr
 8009bf2:	bf00      	nop
 8009bf4:	7ff00000 	.word	0x7ff00000

08009bf8 <__b2d>:
 8009bf8:	6902      	ldr	r2, [r0, #16]
 8009bfa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bfc:	f100 0614 	add.w	r6, r0, #20
 8009c00:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8009c04:	f852 4c04 	ldr.w	r4, [r2, #-4]
 8009c08:	4f1e      	ldr	r7, [pc, #120]	@ (8009c84 <__b2d+0x8c>)
 8009c0a:	4620      	mov	r0, r4
 8009c0c:	f7ff fd54 	bl	80096b8 <__hi0bits>
 8009c10:	4603      	mov	r3, r0
 8009c12:	f1c0 0020 	rsb	r0, r0, #32
 8009c16:	2b0a      	cmp	r3, #10
 8009c18:	f1a2 0504 	sub.w	r5, r2, #4
 8009c1c:	6008      	str	r0, [r1, #0]
 8009c1e:	dc12      	bgt.n	8009c46 <__b2d+0x4e>
 8009c20:	42ae      	cmp	r6, r5
 8009c22:	bf2c      	ite	cs
 8009c24:	2200      	movcs	r2, #0
 8009c26:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8009c2a:	f1c3 0c0b 	rsb	ip, r3, #11
 8009c2e:	3315      	adds	r3, #21
 8009c30:	fa24 fe0c 	lsr.w	lr, r4, ip
 8009c34:	fa04 f303 	lsl.w	r3, r4, r3
 8009c38:	fa22 f20c 	lsr.w	r2, r2, ip
 8009c3c:	ea4e 0107 	orr.w	r1, lr, r7
 8009c40:	431a      	orrs	r2, r3
 8009c42:	4610      	mov	r0, r2
 8009c44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c46:	42ae      	cmp	r6, r5
 8009c48:	bf36      	itet	cc
 8009c4a:	f1a2 0508 	subcc.w	r5, r2, #8
 8009c4e:	2200      	movcs	r2, #0
 8009c50:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8009c54:	3b0b      	subs	r3, #11
 8009c56:	d012      	beq.n	8009c7e <__b2d+0x86>
 8009c58:	f1c3 0720 	rsb	r7, r3, #32
 8009c5c:	fa22 f107 	lsr.w	r1, r2, r7
 8009c60:	409c      	lsls	r4, r3
 8009c62:	430c      	orrs	r4, r1
 8009c64:	42b5      	cmp	r5, r6
 8009c66:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 8009c6a:	bf94      	ite	ls
 8009c6c:	2400      	movls	r4, #0
 8009c6e:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 8009c72:	409a      	lsls	r2, r3
 8009c74:	40fc      	lsrs	r4, r7
 8009c76:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8009c7a:	4322      	orrs	r2, r4
 8009c7c:	e7e1      	b.n	8009c42 <__b2d+0x4a>
 8009c7e:	ea44 0107 	orr.w	r1, r4, r7
 8009c82:	e7de      	b.n	8009c42 <__b2d+0x4a>
 8009c84:	3ff00000 	.word	0x3ff00000

08009c88 <__d2b>:
 8009c88:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8009c8c:	2101      	movs	r1, #1
 8009c8e:	4690      	mov	r8, r2
 8009c90:	4699      	mov	r9, r3
 8009c92:	9e08      	ldr	r6, [sp, #32]
 8009c94:	f7ff fc1e 	bl	80094d4 <_Balloc>
 8009c98:	4604      	mov	r4, r0
 8009c9a:	b930      	cbnz	r0, 8009caa <__d2b+0x22>
 8009c9c:	4602      	mov	r2, r0
 8009c9e:	f240 310f 	movw	r1, #783	@ 0x30f
 8009ca2:	4b23      	ldr	r3, [pc, #140]	@ (8009d30 <__d2b+0xa8>)
 8009ca4:	4823      	ldr	r0, [pc, #140]	@ (8009d34 <__d2b+0xac>)
 8009ca6:	f001 fb35 	bl	800b314 <__assert_func>
 8009caa:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009cae:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009cb2:	b10d      	cbz	r5, 8009cb8 <__d2b+0x30>
 8009cb4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009cb8:	9301      	str	r3, [sp, #4]
 8009cba:	f1b8 0300 	subs.w	r3, r8, #0
 8009cbe:	d024      	beq.n	8009d0a <__d2b+0x82>
 8009cc0:	4668      	mov	r0, sp
 8009cc2:	9300      	str	r3, [sp, #0]
 8009cc4:	f7ff fd17 	bl	80096f6 <__lo0bits>
 8009cc8:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009ccc:	b1d8      	cbz	r0, 8009d06 <__d2b+0x7e>
 8009cce:	f1c0 0320 	rsb	r3, r0, #32
 8009cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8009cd6:	430b      	orrs	r3, r1
 8009cd8:	40c2      	lsrs	r2, r0
 8009cda:	6163      	str	r3, [r4, #20]
 8009cdc:	9201      	str	r2, [sp, #4]
 8009cde:	9b01      	ldr	r3, [sp, #4]
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	bf0c      	ite	eq
 8009ce4:	2201      	moveq	r2, #1
 8009ce6:	2202      	movne	r2, #2
 8009ce8:	61a3      	str	r3, [r4, #24]
 8009cea:	6122      	str	r2, [r4, #16]
 8009cec:	b1ad      	cbz	r5, 8009d1a <__d2b+0x92>
 8009cee:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009cf2:	4405      	add	r5, r0
 8009cf4:	6035      	str	r5, [r6, #0]
 8009cf6:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009cfa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009cfc:	6018      	str	r0, [r3, #0]
 8009cfe:	4620      	mov	r0, r4
 8009d00:	b002      	add	sp, #8
 8009d02:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8009d06:	6161      	str	r1, [r4, #20]
 8009d08:	e7e9      	b.n	8009cde <__d2b+0x56>
 8009d0a:	a801      	add	r0, sp, #4
 8009d0c:	f7ff fcf3 	bl	80096f6 <__lo0bits>
 8009d10:	9b01      	ldr	r3, [sp, #4]
 8009d12:	2201      	movs	r2, #1
 8009d14:	6163      	str	r3, [r4, #20]
 8009d16:	3020      	adds	r0, #32
 8009d18:	e7e7      	b.n	8009cea <__d2b+0x62>
 8009d1a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8009d1e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009d22:	6030      	str	r0, [r6, #0]
 8009d24:	6918      	ldr	r0, [r3, #16]
 8009d26:	f7ff fcc7 	bl	80096b8 <__hi0bits>
 8009d2a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009d2e:	e7e4      	b.n	8009cfa <__d2b+0x72>
 8009d30:	0800c591 	.word	0x0800c591
 8009d34:	0800c5a2 	.word	0x0800c5a2

08009d38 <__ratio>:
 8009d38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d3c:	b085      	sub	sp, #20
 8009d3e:	e9cd 1000 	strd	r1, r0, [sp]
 8009d42:	a902      	add	r1, sp, #8
 8009d44:	f7ff ff58 	bl	8009bf8 <__b2d>
 8009d48:	468b      	mov	fp, r1
 8009d4a:	4606      	mov	r6, r0
 8009d4c:	460f      	mov	r7, r1
 8009d4e:	9800      	ldr	r0, [sp, #0]
 8009d50:	a903      	add	r1, sp, #12
 8009d52:	f7ff ff51 	bl	8009bf8 <__b2d>
 8009d56:	460d      	mov	r5, r1
 8009d58:	9b01      	ldr	r3, [sp, #4]
 8009d5a:	4689      	mov	r9, r1
 8009d5c:	6919      	ldr	r1, [r3, #16]
 8009d5e:	9b00      	ldr	r3, [sp, #0]
 8009d60:	4604      	mov	r4, r0
 8009d62:	691b      	ldr	r3, [r3, #16]
 8009d64:	4630      	mov	r0, r6
 8009d66:	1ac9      	subs	r1, r1, r3
 8009d68:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8009d6c:	1a9b      	subs	r3, r3, r2
 8009d6e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	bfcd      	iteet	gt
 8009d76:	463a      	movgt	r2, r7
 8009d78:	462a      	movle	r2, r5
 8009d7a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009d7e:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8009d82:	bfd8      	it	le
 8009d84:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8009d88:	464b      	mov	r3, r9
 8009d8a:	4622      	mov	r2, r4
 8009d8c:	4659      	mov	r1, fp
 8009d8e:	f7f6 fccd 	bl	800072c <__aeabi_ddiv>
 8009d92:	b005      	add	sp, #20
 8009d94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009d98 <__copybits>:
 8009d98:	3901      	subs	r1, #1
 8009d9a:	b570      	push	{r4, r5, r6, lr}
 8009d9c:	1149      	asrs	r1, r1, #5
 8009d9e:	6914      	ldr	r4, [r2, #16]
 8009da0:	3101      	adds	r1, #1
 8009da2:	f102 0314 	add.w	r3, r2, #20
 8009da6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009daa:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009dae:	1f05      	subs	r5, r0, #4
 8009db0:	42a3      	cmp	r3, r4
 8009db2:	d30c      	bcc.n	8009dce <__copybits+0x36>
 8009db4:	1aa3      	subs	r3, r4, r2
 8009db6:	3b11      	subs	r3, #17
 8009db8:	f023 0303 	bic.w	r3, r3, #3
 8009dbc:	3211      	adds	r2, #17
 8009dbe:	42a2      	cmp	r2, r4
 8009dc0:	bf88      	it	hi
 8009dc2:	2300      	movhi	r3, #0
 8009dc4:	4418      	add	r0, r3
 8009dc6:	2300      	movs	r3, #0
 8009dc8:	4288      	cmp	r0, r1
 8009dca:	d305      	bcc.n	8009dd8 <__copybits+0x40>
 8009dcc:	bd70      	pop	{r4, r5, r6, pc}
 8009dce:	f853 6b04 	ldr.w	r6, [r3], #4
 8009dd2:	f845 6f04 	str.w	r6, [r5, #4]!
 8009dd6:	e7eb      	b.n	8009db0 <__copybits+0x18>
 8009dd8:	f840 3b04 	str.w	r3, [r0], #4
 8009ddc:	e7f4      	b.n	8009dc8 <__copybits+0x30>

08009dde <__any_on>:
 8009dde:	f100 0214 	add.w	r2, r0, #20
 8009de2:	6900      	ldr	r0, [r0, #16]
 8009de4:	114b      	asrs	r3, r1, #5
 8009de6:	4298      	cmp	r0, r3
 8009de8:	b510      	push	{r4, lr}
 8009dea:	db11      	blt.n	8009e10 <__any_on+0x32>
 8009dec:	dd0a      	ble.n	8009e04 <__any_on+0x26>
 8009dee:	f011 011f 	ands.w	r1, r1, #31
 8009df2:	d007      	beq.n	8009e04 <__any_on+0x26>
 8009df4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009df8:	fa24 f001 	lsr.w	r0, r4, r1
 8009dfc:	fa00 f101 	lsl.w	r1, r0, r1
 8009e00:	428c      	cmp	r4, r1
 8009e02:	d10b      	bne.n	8009e1c <__any_on+0x3e>
 8009e04:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009e08:	4293      	cmp	r3, r2
 8009e0a:	d803      	bhi.n	8009e14 <__any_on+0x36>
 8009e0c:	2000      	movs	r0, #0
 8009e0e:	bd10      	pop	{r4, pc}
 8009e10:	4603      	mov	r3, r0
 8009e12:	e7f7      	b.n	8009e04 <__any_on+0x26>
 8009e14:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009e18:	2900      	cmp	r1, #0
 8009e1a:	d0f5      	beq.n	8009e08 <__any_on+0x2a>
 8009e1c:	2001      	movs	r0, #1
 8009e1e:	e7f6      	b.n	8009e0e <__any_on+0x30>

08009e20 <sulp>:
 8009e20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e24:	460f      	mov	r7, r1
 8009e26:	4690      	mov	r8, r2
 8009e28:	f7ff fec6 	bl	8009bb8 <__ulp>
 8009e2c:	4604      	mov	r4, r0
 8009e2e:	460d      	mov	r5, r1
 8009e30:	f1b8 0f00 	cmp.w	r8, #0
 8009e34:	d011      	beq.n	8009e5a <sulp+0x3a>
 8009e36:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8009e3a:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	dd0b      	ble.n	8009e5a <sulp+0x3a>
 8009e42:	2400      	movs	r4, #0
 8009e44:	051b      	lsls	r3, r3, #20
 8009e46:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8009e4a:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8009e4e:	4622      	mov	r2, r4
 8009e50:	462b      	mov	r3, r5
 8009e52:	f7f6 fb41 	bl	80004d8 <__aeabi_dmul>
 8009e56:	4604      	mov	r4, r0
 8009e58:	460d      	mov	r5, r1
 8009e5a:	4620      	mov	r0, r4
 8009e5c:	4629      	mov	r1, r5
 8009e5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e62:	0000      	movs	r0, r0
 8009e64:	0000      	movs	r0, r0
	...

08009e68 <_strtod_l>:
 8009e68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e6c:	b09f      	sub	sp, #124	@ 0x7c
 8009e6e:	9217      	str	r2, [sp, #92]	@ 0x5c
 8009e70:	2200      	movs	r2, #0
 8009e72:	460c      	mov	r4, r1
 8009e74:	921a      	str	r2, [sp, #104]	@ 0x68
 8009e76:	f04f 0a00 	mov.w	sl, #0
 8009e7a:	f04f 0b00 	mov.w	fp, #0
 8009e7e:	460a      	mov	r2, r1
 8009e80:	9005      	str	r0, [sp, #20]
 8009e82:	9219      	str	r2, [sp, #100]	@ 0x64
 8009e84:	7811      	ldrb	r1, [r2, #0]
 8009e86:	292b      	cmp	r1, #43	@ 0x2b
 8009e88:	d048      	beq.n	8009f1c <_strtod_l+0xb4>
 8009e8a:	d836      	bhi.n	8009efa <_strtod_l+0x92>
 8009e8c:	290d      	cmp	r1, #13
 8009e8e:	d830      	bhi.n	8009ef2 <_strtod_l+0x8a>
 8009e90:	2908      	cmp	r1, #8
 8009e92:	d830      	bhi.n	8009ef6 <_strtod_l+0x8e>
 8009e94:	2900      	cmp	r1, #0
 8009e96:	d039      	beq.n	8009f0c <_strtod_l+0xa4>
 8009e98:	2200      	movs	r2, #0
 8009e9a:	920b      	str	r2, [sp, #44]	@ 0x2c
 8009e9c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8009e9e:	782a      	ldrb	r2, [r5, #0]
 8009ea0:	2a30      	cmp	r2, #48	@ 0x30
 8009ea2:	f040 80b1 	bne.w	800a008 <_strtod_l+0x1a0>
 8009ea6:	786a      	ldrb	r2, [r5, #1]
 8009ea8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009eac:	2a58      	cmp	r2, #88	@ 0x58
 8009eae:	d16c      	bne.n	8009f8a <_strtod_l+0x122>
 8009eb0:	9302      	str	r3, [sp, #8]
 8009eb2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009eb4:	4a8e      	ldr	r2, [pc, #568]	@ (800a0f0 <_strtod_l+0x288>)
 8009eb6:	9301      	str	r3, [sp, #4]
 8009eb8:	ab1a      	add	r3, sp, #104	@ 0x68
 8009eba:	9300      	str	r3, [sp, #0]
 8009ebc:	9805      	ldr	r0, [sp, #20]
 8009ebe:	ab1b      	add	r3, sp, #108	@ 0x6c
 8009ec0:	a919      	add	r1, sp, #100	@ 0x64
 8009ec2:	f001 fac1 	bl	800b448 <__gethex>
 8009ec6:	f010 060f 	ands.w	r6, r0, #15
 8009eca:	4604      	mov	r4, r0
 8009ecc:	d005      	beq.n	8009eda <_strtod_l+0x72>
 8009ece:	2e06      	cmp	r6, #6
 8009ed0:	d126      	bne.n	8009f20 <_strtod_l+0xb8>
 8009ed2:	2300      	movs	r3, #0
 8009ed4:	3501      	adds	r5, #1
 8009ed6:	9519      	str	r5, [sp, #100]	@ 0x64
 8009ed8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009eda:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	f040 8584 	bne.w	800a9ea <_strtod_l+0xb82>
 8009ee2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009ee4:	b1bb      	cbz	r3, 8009f16 <_strtod_l+0xae>
 8009ee6:	4650      	mov	r0, sl
 8009ee8:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 8009eec:	b01f      	add	sp, #124	@ 0x7c
 8009eee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ef2:	2920      	cmp	r1, #32
 8009ef4:	d1d0      	bne.n	8009e98 <_strtod_l+0x30>
 8009ef6:	3201      	adds	r2, #1
 8009ef8:	e7c3      	b.n	8009e82 <_strtod_l+0x1a>
 8009efa:	292d      	cmp	r1, #45	@ 0x2d
 8009efc:	d1cc      	bne.n	8009e98 <_strtod_l+0x30>
 8009efe:	2101      	movs	r1, #1
 8009f00:	910b      	str	r1, [sp, #44]	@ 0x2c
 8009f02:	1c51      	adds	r1, r2, #1
 8009f04:	9119      	str	r1, [sp, #100]	@ 0x64
 8009f06:	7852      	ldrb	r2, [r2, #1]
 8009f08:	2a00      	cmp	r2, #0
 8009f0a:	d1c7      	bne.n	8009e9c <_strtod_l+0x34>
 8009f0c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009f0e:	9419      	str	r4, [sp, #100]	@ 0x64
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	f040 8568 	bne.w	800a9e6 <_strtod_l+0xb7e>
 8009f16:	4650      	mov	r0, sl
 8009f18:	4659      	mov	r1, fp
 8009f1a:	e7e7      	b.n	8009eec <_strtod_l+0x84>
 8009f1c:	2100      	movs	r1, #0
 8009f1e:	e7ef      	b.n	8009f00 <_strtod_l+0x98>
 8009f20:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009f22:	b13a      	cbz	r2, 8009f34 <_strtod_l+0xcc>
 8009f24:	2135      	movs	r1, #53	@ 0x35
 8009f26:	a81c      	add	r0, sp, #112	@ 0x70
 8009f28:	f7ff ff36 	bl	8009d98 <__copybits>
 8009f2c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009f2e:	9805      	ldr	r0, [sp, #20]
 8009f30:	f7ff fb10 	bl	8009554 <_Bfree>
 8009f34:	3e01      	subs	r6, #1
 8009f36:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8009f38:	2e04      	cmp	r6, #4
 8009f3a:	d806      	bhi.n	8009f4a <_strtod_l+0xe2>
 8009f3c:	e8df f006 	tbb	[pc, r6]
 8009f40:	201d0314 	.word	0x201d0314
 8009f44:	14          	.byte	0x14
 8009f45:	00          	.byte	0x00
 8009f46:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8009f4a:	05e1      	lsls	r1, r4, #23
 8009f4c:	bf48      	it	mi
 8009f4e:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8009f52:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009f56:	0d1b      	lsrs	r3, r3, #20
 8009f58:	051b      	lsls	r3, r3, #20
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d1bd      	bne.n	8009eda <_strtod_l+0x72>
 8009f5e:	f7fe fb1d 	bl	800859c <__errno>
 8009f62:	2322      	movs	r3, #34	@ 0x22
 8009f64:	6003      	str	r3, [r0, #0]
 8009f66:	e7b8      	b.n	8009eda <_strtod_l+0x72>
 8009f68:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8009f6c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8009f70:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8009f74:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8009f78:	e7e7      	b.n	8009f4a <_strtod_l+0xe2>
 8009f7a:	f8df b178 	ldr.w	fp, [pc, #376]	@ 800a0f4 <_strtod_l+0x28c>
 8009f7e:	e7e4      	b.n	8009f4a <_strtod_l+0xe2>
 8009f80:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8009f84:	f04f 3aff 	mov.w	sl, #4294967295
 8009f88:	e7df      	b.n	8009f4a <_strtod_l+0xe2>
 8009f8a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009f8c:	1c5a      	adds	r2, r3, #1
 8009f8e:	9219      	str	r2, [sp, #100]	@ 0x64
 8009f90:	785b      	ldrb	r3, [r3, #1]
 8009f92:	2b30      	cmp	r3, #48	@ 0x30
 8009f94:	d0f9      	beq.n	8009f8a <_strtod_l+0x122>
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d09f      	beq.n	8009eda <_strtod_l+0x72>
 8009f9a:	2301      	movs	r3, #1
 8009f9c:	9309      	str	r3, [sp, #36]	@ 0x24
 8009f9e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009fa0:	220a      	movs	r2, #10
 8009fa2:	930c      	str	r3, [sp, #48]	@ 0x30
 8009fa4:	2300      	movs	r3, #0
 8009fa6:	461f      	mov	r7, r3
 8009fa8:	9308      	str	r3, [sp, #32]
 8009faa:	930a      	str	r3, [sp, #40]	@ 0x28
 8009fac:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8009fae:	7805      	ldrb	r5, [r0, #0]
 8009fb0:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8009fb4:	b2d9      	uxtb	r1, r3
 8009fb6:	2909      	cmp	r1, #9
 8009fb8:	d928      	bls.n	800a00c <_strtod_l+0x1a4>
 8009fba:	2201      	movs	r2, #1
 8009fbc:	494e      	ldr	r1, [pc, #312]	@ (800a0f8 <_strtod_l+0x290>)
 8009fbe:	f001 f981 	bl	800b2c4 <strncmp>
 8009fc2:	2800      	cmp	r0, #0
 8009fc4:	d032      	beq.n	800a02c <_strtod_l+0x1c4>
 8009fc6:	2000      	movs	r0, #0
 8009fc8:	462a      	mov	r2, r5
 8009fca:	4681      	mov	r9, r0
 8009fcc:	463d      	mov	r5, r7
 8009fce:	4603      	mov	r3, r0
 8009fd0:	2a65      	cmp	r2, #101	@ 0x65
 8009fd2:	d001      	beq.n	8009fd8 <_strtod_l+0x170>
 8009fd4:	2a45      	cmp	r2, #69	@ 0x45
 8009fd6:	d114      	bne.n	800a002 <_strtod_l+0x19a>
 8009fd8:	b91d      	cbnz	r5, 8009fe2 <_strtod_l+0x17a>
 8009fda:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009fdc:	4302      	orrs	r2, r0
 8009fde:	d095      	beq.n	8009f0c <_strtod_l+0xa4>
 8009fe0:	2500      	movs	r5, #0
 8009fe2:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8009fe4:	1c62      	adds	r2, r4, #1
 8009fe6:	9219      	str	r2, [sp, #100]	@ 0x64
 8009fe8:	7862      	ldrb	r2, [r4, #1]
 8009fea:	2a2b      	cmp	r2, #43	@ 0x2b
 8009fec:	d077      	beq.n	800a0de <_strtod_l+0x276>
 8009fee:	2a2d      	cmp	r2, #45	@ 0x2d
 8009ff0:	d07b      	beq.n	800a0ea <_strtod_l+0x282>
 8009ff2:	f04f 0c00 	mov.w	ip, #0
 8009ff6:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8009ffa:	2909      	cmp	r1, #9
 8009ffc:	f240 8082 	bls.w	800a104 <_strtod_l+0x29c>
 800a000:	9419      	str	r4, [sp, #100]	@ 0x64
 800a002:	f04f 0800 	mov.w	r8, #0
 800a006:	e0a2      	b.n	800a14e <_strtod_l+0x2e6>
 800a008:	2300      	movs	r3, #0
 800a00a:	e7c7      	b.n	8009f9c <_strtod_l+0x134>
 800a00c:	2f08      	cmp	r7, #8
 800a00e:	bfd5      	itete	le
 800a010:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800a012:	9908      	ldrgt	r1, [sp, #32]
 800a014:	fb02 3301 	mlale	r3, r2, r1, r3
 800a018:	fb02 3301 	mlagt	r3, r2, r1, r3
 800a01c:	f100 0001 	add.w	r0, r0, #1
 800a020:	bfd4      	ite	le
 800a022:	930a      	strle	r3, [sp, #40]	@ 0x28
 800a024:	9308      	strgt	r3, [sp, #32]
 800a026:	3701      	adds	r7, #1
 800a028:	9019      	str	r0, [sp, #100]	@ 0x64
 800a02a:	e7bf      	b.n	8009fac <_strtod_l+0x144>
 800a02c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a02e:	1c5a      	adds	r2, r3, #1
 800a030:	9219      	str	r2, [sp, #100]	@ 0x64
 800a032:	785a      	ldrb	r2, [r3, #1]
 800a034:	b37f      	cbz	r7, 800a096 <_strtod_l+0x22e>
 800a036:	4681      	mov	r9, r0
 800a038:	463d      	mov	r5, r7
 800a03a:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800a03e:	2b09      	cmp	r3, #9
 800a040:	d912      	bls.n	800a068 <_strtod_l+0x200>
 800a042:	2301      	movs	r3, #1
 800a044:	e7c4      	b.n	8009fd0 <_strtod_l+0x168>
 800a046:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a048:	3001      	adds	r0, #1
 800a04a:	1c5a      	adds	r2, r3, #1
 800a04c:	9219      	str	r2, [sp, #100]	@ 0x64
 800a04e:	785a      	ldrb	r2, [r3, #1]
 800a050:	2a30      	cmp	r2, #48	@ 0x30
 800a052:	d0f8      	beq.n	800a046 <_strtod_l+0x1de>
 800a054:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800a058:	2b08      	cmp	r3, #8
 800a05a:	f200 84cb 	bhi.w	800a9f4 <_strtod_l+0xb8c>
 800a05e:	4681      	mov	r9, r0
 800a060:	2000      	movs	r0, #0
 800a062:	4605      	mov	r5, r0
 800a064:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a066:	930c      	str	r3, [sp, #48]	@ 0x30
 800a068:	3a30      	subs	r2, #48	@ 0x30
 800a06a:	f100 0301 	add.w	r3, r0, #1
 800a06e:	d02a      	beq.n	800a0c6 <_strtod_l+0x25e>
 800a070:	4499      	add	r9, r3
 800a072:	210a      	movs	r1, #10
 800a074:	462b      	mov	r3, r5
 800a076:	eb00 0c05 	add.w	ip, r0, r5
 800a07a:	4563      	cmp	r3, ip
 800a07c:	d10d      	bne.n	800a09a <_strtod_l+0x232>
 800a07e:	1c69      	adds	r1, r5, #1
 800a080:	4401      	add	r1, r0
 800a082:	4428      	add	r0, r5
 800a084:	2808      	cmp	r0, #8
 800a086:	dc16      	bgt.n	800a0b6 <_strtod_l+0x24e>
 800a088:	230a      	movs	r3, #10
 800a08a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a08c:	fb03 2300 	mla	r3, r3, r0, r2
 800a090:	930a      	str	r3, [sp, #40]	@ 0x28
 800a092:	2300      	movs	r3, #0
 800a094:	e018      	b.n	800a0c8 <_strtod_l+0x260>
 800a096:	4638      	mov	r0, r7
 800a098:	e7da      	b.n	800a050 <_strtod_l+0x1e8>
 800a09a:	2b08      	cmp	r3, #8
 800a09c:	f103 0301 	add.w	r3, r3, #1
 800a0a0:	dc03      	bgt.n	800a0aa <_strtod_l+0x242>
 800a0a2:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800a0a4:	434e      	muls	r6, r1
 800a0a6:	960a      	str	r6, [sp, #40]	@ 0x28
 800a0a8:	e7e7      	b.n	800a07a <_strtod_l+0x212>
 800a0aa:	2b10      	cmp	r3, #16
 800a0ac:	bfde      	ittt	le
 800a0ae:	9e08      	ldrle	r6, [sp, #32]
 800a0b0:	434e      	mulle	r6, r1
 800a0b2:	9608      	strle	r6, [sp, #32]
 800a0b4:	e7e1      	b.n	800a07a <_strtod_l+0x212>
 800a0b6:	280f      	cmp	r0, #15
 800a0b8:	dceb      	bgt.n	800a092 <_strtod_l+0x22a>
 800a0ba:	230a      	movs	r3, #10
 800a0bc:	9808      	ldr	r0, [sp, #32]
 800a0be:	fb03 2300 	mla	r3, r3, r0, r2
 800a0c2:	9308      	str	r3, [sp, #32]
 800a0c4:	e7e5      	b.n	800a092 <_strtod_l+0x22a>
 800a0c6:	4629      	mov	r1, r5
 800a0c8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a0ca:	460d      	mov	r5, r1
 800a0cc:	1c50      	adds	r0, r2, #1
 800a0ce:	9019      	str	r0, [sp, #100]	@ 0x64
 800a0d0:	7852      	ldrb	r2, [r2, #1]
 800a0d2:	4618      	mov	r0, r3
 800a0d4:	e7b1      	b.n	800a03a <_strtod_l+0x1d2>
 800a0d6:	f04f 0900 	mov.w	r9, #0
 800a0da:	2301      	movs	r3, #1
 800a0dc:	e77d      	b.n	8009fda <_strtod_l+0x172>
 800a0de:	f04f 0c00 	mov.w	ip, #0
 800a0e2:	1ca2      	adds	r2, r4, #2
 800a0e4:	9219      	str	r2, [sp, #100]	@ 0x64
 800a0e6:	78a2      	ldrb	r2, [r4, #2]
 800a0e8:	e785      	b.n	8009ff6 <_strtod_l+0x18e>
 800a0ea:	f04f 0c01 	mov.w	ip, #1
 800a0ee:	e7f8      	b.n	800a0e2 <_strtod_l+0x27a>
 800a0f0:	0800c710 	.word	0x0800c710
 800a0f4:	7ff00000 	.word	0x7ff00000
 800a0f8:	0800c6f8 	.word	0x0800c6f8
 800a0fc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a0fe:	1c51      	adds	r1, r2, #1
 800a100:	9119      	str	r1, [sp, #100]	@ 0x64
 800a102:	7852      	ldrb	r2, [r2, #1]
 800a104:	2a30      	cmp	r2, #48	@ 0x30
 800a106:	d0f9      	beq.n	800a0fc <_strtod_l+0x294>
 800a108:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800a10c:	2908      	cmp	r1, #8
 800a10e:	f63f af78 	bhi.w	800a002 <_strtod_l+0x19a>
 800a112:	f04f 080a 	mov.w	r8, #10
 800a116:	3a30      	subs	r2, #48	@ 0x30
 800a118:	920e      	str	r2, [sp, #56]	@ 0x38
 800a11a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a11c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800a11e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a120:	1c56      	adds	r6, r2, #1
 800a122:	9619      	str	r6, [sp, #100]	@ 0x64
 800a124:	7852      	ldrb	r2, [r2, #1]
 800a126:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800a12a:	f1be 0f09 	cmp.w	lr, #9
 800a12e:	d939      	bls.n	800a1a4 <_strtod_l+0x33c>
 800a130:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800a132:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800a136:	1a76      	subs	r6, r6, r1
 800a138:	2e08      	cmp	r6, #8
 800a13a:	dc03      	bgt.n	800a144 <_strtod_l+0x2dc>
 800a13c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800a13e:	4588      	cmp	r8, r1
 800a140:	bfa8      	it	ge
 800a142:	4688      	movge	r8, r1
 800a144:	f1bc 0f00 	cmp.w	ip, #0
 800a148:	d001      	beq.n	800a14e <_strtod_l+0x2e6>
 800a14a:	f1c8 0800 	rsb	r8, r8, #0
 800a14e:	2d00      	cmp	r5, #0
 800a150:	d14e      	bne.n	800a1f0 <_strtod_l+0x388>
 800a152:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a154:	4308      	orrs	r0, r1
 800a156:	f47f aec0 	bne.w	8009eda <_strtod_l+0x72>
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	f47f aed6 	bne.w	8009f0c <_strtod_l+0xa4>
 800a160:	2a69      	cmp	r2, #105	@ 0x69
 800a162:	d028      	beq.n	800a1b6 <_strtod_l+0x34e>
 800a164:	dc25      	bgt.n	800a1b2 <_strtod_l+0x34a>
 800a166:	2a49      	cmp	r2, #73	@ 0x49
 800a168:	d025      	beq.n	800a1b6 <_strtod_l+0x34e>
 800a16a:	2a4e      	cmp	r2, #78	@ 0x4e
 800a16c:	f47f aece 	bne.w	8009f0c <_strtod_l+0xa4>
 800a170:	499a      	ldr	r1, [pc, #616]	@ (800a3dc <_strtod_l+0x574>)
 800a172:	a819      	add	r0, sp, #100	@ 0x64
 800a174:	f001 fb8a 	bl	800b88c <__match>
 800a178:	2800      	cmp	r0, #0
 800a17a:	f43f aec7 	beq.w	8009f0c <_strtod_l+0xa4>
 800a17e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a180:	781b      	ldrb	r3, [r3, #0]
 800a182:	2b28      	cmp	r3, #40	@ 0x28
 800a184:	d12e      	bne.n	800a1e4 <_strtod_l+0x37c>
 800a186:	4996      	ldr	r1, [pc, #600]	@ (800a3e0 <_strtod_l+0x578>)
 800a188:	aa1c      	add	r2, sp, #112	@ 0x70
 800a18a:	a819      	add	r0, sp, #100	@ 0x64
 800a18c:	f001 fb92 	bl	800b8b4 <__hexnan>
 800a190:	2805      	cmp	r0, #5
 800a192:	d127      	bne.n	800a1e4 <_strtod_l+0x37c>
 800a194:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a196:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800a19a:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800a19e:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800a1a2:	e69a      	b.n	8009eda <_strtod_l+0x72>
 800a1a4:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800a1a6:	fb08 2101 	mla	r1, r8, r1, r2
 800a1aa:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800a1ae:	920e      	str	r2, [sp, #56]	@ 0x38
 800a1b0:	e7b5      	b.n	800a11e <_strtod_l+0x2b6>
 800a1b2:	2a6e      	cmp	r2, #110	@ 0x6e
 800a1b4:	e7da      	b.n	800a16c <_strtod_l+0x304>
 800a1b6:	498b      	ldr	r1, [pc, #556]	@ (800a3e4 <_strtod_l+0x57c>)
 800a1b8:	a819      	add	r0, sp, #100	@ 0x64
 800a1ba:	f001 fb67 	bl	800b88c <__match>
 800a1be:	2800      	cmp	r0, #0
 800a1c0:	f43f aea4 	beq.w	8009f0c <_strtod_l+0xa4>
 800a1c4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a1c6:	4988      	ldr	r1, [pc, #544]	@ (800a3e8 <_strtod_l+0x580>)
 800a1c8:	3b01      	subs	r3, #1
 800a1ca:	a819      	add	r0, sp, #100	@ 0x64
 800a1cc:	9319      	str	r3, [sp, #100]	@ 0x64
 800a1ce:	f001 fb5d 	bl	800b88c <__match>
 800a1d2:	b910      	cbnz	r0, 800a1da <_strtod_l+0x372>
 800a1d4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a1d6:	3301      	adds	r3, #1
 800a1d8:	9319      	str	r3, [sp, #100]	@ 0x64
 800a1da:	f04f 0a00 	mov.w	sl, #0
 800a1de:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 800a3ec <_strtod_l+0x584>
 800a1e2:	e67a      	b.n	8009eda <_strtod_l+0x72>
 800a1e4:	4882      	ldr	r0, [pc, #520]	@ (800a3f0 <_strtod_l+0x588>)
 800a1e6:	f001 f88f 	bl	800b308 <nan>
 800a1ea:	4682      	mov	sl, r0
 800a1ec:	468b      	mov	fp, r1
 800a1ee:	e674      	b.n	8009eda <_strtod_l+0x72>
 800a1f0:	eba8 0309 	sub.w	r3, r8, r9
 800a1f4:	2f00      	cmp	r7, #0
 800a1f6:	bf08      	it	eq
 800a1f8:	462f      	moveq	r7, r5
 800a1fa:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a1fc:	2d10      	cmp	r5, #16
 800a1fe:	462c      	mov	r4, r5
 800a200:	9309      	str	r3, [sp, #36]	@ 0x24
 800a202:	bfa8      	it	ge
 800a204:	2410      	movge	r4, #16
 800a206:	f7f6 f8ed 	bl	80003e4 <__aeabi_ui2d>
 800a20a:	2d09      	cmp	r5, #9
 800a20c:	4682      	mov	sl, r0
 800a20e:	468b      	mov	fp, r1
 800a210:	dc11      	bgt.n	800a236 <_strtod_l+0x3ce>
 800a212:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a214:	2b00      	cmp	r3, #0
 800a216:	f43f ae60 	beq.w	8009eda <_strtod_l+0x72>
 800a21a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a21c:	dd76      	ble.n	800a30c <_strtod_l+0x4a4>
 800a21e:	2b16      	cmp	r3, #22
 800a220:	dc5d      	bgt.n	800a2de <_strtod_l+0x476>
 800a222:	4974      	ldr	r1, [pc, #464]	@ (800a3f4 <_strtod_l+0x58c>)
 800a224:	4652      	mov	r2, sl
 800a226:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a22a:	465b      	mov	r3, fp
 800a22c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a230:	f7f6 f952 	bl	80004d8 <__aeabi_dmul>
 800a234:	e7d9      	b.n	800a1ea <_strtod_l+0x382>
 800a236:	4b6f      	ldr	r3, [pc, #444]	@ (800a3f4 <_strtod_l+0x58c>)
 800a238:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a23c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800a240:	f7f6 f94a 	bl	80004d8 <__aeabi_dmul>
 800a244:	4682      	mov	sl, r0
 800a246:	9808      	ldr	r0, [sp, #32]
 800a248:	468b      	mov	fp, r1
 800a24a:	f7f6 f8cb 	bl	80003e4 <__aeabi_ui2d>
 800a24e:	4602      	mov	r2, r0
 800a250:	460b      	mov	r3, r1
 800a252:	4650      	mov	r0, sl
 800a254:	4659      	mov	r1, fp
 800a256:	f7f5 ff89 	bl	800016c <__adddf3>
 800a25a:	2d0f      	cmp	r5, #15
 800a25c:	4682      	mov	sl, r0
 800a25e:	468b      	mov	fp, r1
 800a260:	ddd7      	ble.n	800a212 <_strtod_l+0x3aa>
 800a262:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a264:	1b2c      	subs	r4, r5, r4
 800a266:	441c      	add	r4, r3
 800a268:	2c00      	cmp	r4, #0
 800a26a:	f340 8096 	ble.w	800a39a <_strtod_l+0x532>
 800a26e:	f014 030f 	ands.w	r3, r4, #15
 800a272:	d00a      	beq.n	800a28a <_strtod_l+0x422>
 800a274:	495f      	ldr	r1, [pc, #380]	@ (800a3f4 <_strtod_l+0x58c>)
 800a276:	4652      	mov	r2, sl
 800a278:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a27c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a280:	465b      	mov	r3, fp
 800a282:	f7f6 f929 	bl	80004d8 <__aeabi_dmul>
 800a286:	4682      	mov	sl, r0
 800a288:	468b      	mov	fp, r1
 800a28a:	f034 040f 	bics.w	r4, r4, #15
 800a28e:	d073      	beq.n	800a378 <_strtod_l+0x510>
 800a290:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800a294:	dd48      	ble.n	800a328 <_strtod_l+0x4c0>
 800a296:	2400      	movs	r4, #0
 800a298:	46a0      	mov	r8, r4
 800a29a:	46a1      	mov	r9, r4
 800a29c:	940a      	str	r4, [sp, #40]	@ 0x28
 800a29e:	2322      	movs	r3, #34	@ 0x22
 800a2a0:	f04f 0a00 	mov.w	sl, #0
 800a2a4:	9a05      	ldr	r2, [sp, #20]
 800a2a6:	f8df b144 	ldr.w	fp, [pc, #324]	@ 800a3ec <_strtod_l+0x584>
 800a2aa:	6013      	str	r3, [r2, #0]
 800a2ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	f43f ae13 	beq.w	8009eda <_strtod_l+0x72>
 800a2b4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a2b6:	9805      	ldr	r0, [sp, #20]
 800a2b8:	f7ff f94c 	bl	8009554 <_Bfree>
 800a2bc:	4649      	mov	r1, r9
 800a2be:	9805      	ldr	r0, [sp, #20]
 800a2c0:	f7ff f948 	bl	8009554 <_Bfree>
 800a2c4:	4641      	mov	r1, r8
 800a2c6:	9805      	ldr	r0, [sp, #20]
 800a2c8:	f7ff f944 	bl	8009554 <_Bfree>
 800a2cc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a2ce:	9805      	ldr	r0, [sp, #20]
 800a2d0:	f7ff f940 	bl	8009554 <_Bfree>
 800a2d4:	4621      	mov	r1, r4
 800a2d6:	9805      	ldr	r0, [sp, #20]
 800a2d8:	f7ff f93c 	bl	8009554 <_Bfree>
 800a2dc:	e5fd      	b.n	8009eda <_strtod_l+0x72>
 800a2de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a2e0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800a2e4:	4293      	cmp	r3, r2
 800a2e6:	dbbc      	blt.n	800a262 <_strtod_l+0x3fa>
 800a2e8:	4c42      	ldr	r4, [pc, #264]	@ (800a3f4 <_strtod_l+0x58c>)
 800a2ea:	f1c5 050f 	rsb	r5, r5, #15
 800a2ee:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800a2f2:	4652      	mov	r2, sl
 800a2f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a2f8:	465b      	mov	r3, fp
 800a2fa:	f7f6 f8ed 	bl	80004d8 <__aeabi_dmul>
 800a2fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a300:	1b5d      	subs	r5, r3, r5
 800a302:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800a306:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a30a:	e791      	b.n	800a230 <_strtod_l+0x3c8>
 800a30c:	3316      	adds	r3, #22
 800a30e:	dba8      	blt.n	800a262 <_strtod_l+0x3fa>
 800a310:	4b38      	ldr	r3, [pc, #224]	@ (800a3f4 <_strtod_l+0x58c>)
 800a312:	eba9 0808 	sub.w	r8, r9, r8
 800a316:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800a31a:	4650      	mov	r0, sl
 800a31c:	e9d8 2300 	ldrd	r2, r3, [r8]
 800a320:	4659      	mov	r1, fp
 800a322:	f7f6 fa03 	bl	800072c <__aeabi_ddiv>
 800a326:	e760      	b.n	800a1ea <_strtod_l+0x382>
 800a328:	4b33      	ldr	r3, [pc, #204]	@ (800a3f8 <_strtod_l+0x590>)
 800a32a:	4650      	mov	r0, sl
 800a32c:	9308      	str	r3, [sp, #32]
 800a32e:	2300      	movs	r3, #0
 800a330:	4659      	mov	r1, fp
 800a332:	461e      	mov	r6, r3
 800a334:	1124      	asrs	r4, r4, #4
 800a336:	2c01      	cmp	r4, #1
 800a338:	dc21      	bgt.n	800a37e <_strtod_l+0x516>
 800a33a:	b10b      	cbz	r3, 800a340 <_strtod_l+0x4d8>
 800a33c:	4682      	mov	sl, r0
 800a33e:	468b      	mov	fp, r1
 800a340:	492d      	ldr	r1, [pc, #180]	@ (800a3f8 <_strtod_l+0x590>)
 800a342:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800a346:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800a34a:	4652      	mov	r2, sl
 800a34c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a350:	465b      	mov	r3, fp
 800a352:	f7f6 f8c1 	bl	80004d8 <__aeabi_dmul>
 800a356:	4b25      	ldr	r3, [pc, #148]	@ (800a3ec <_strtod_l+0x584>)
 800a358:	460a      	mov	r2, r1
 800a35a:	400b      	ands	r3, r1
 800a35c:	4927      	ldr	r1, [pc, #156]	@ (800a3fc <_strtod_l+0x594>)
 800a35e:	4682      	mov	sl, r0
 800a360:	428b      	cmp	r3, r1
 800a362:	d898      	bhi.n	800a296 <_strtod_l+0x42e>
 800a364:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800a368:	428b      	cmp	r3, r1
 800a36a:	bf86      	itte	hi
 800a36c:	f04f 3aff 	movhi.w	sl, #4294967295
 800a370:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 800a400 <_strtod_l+0x598>
 800a374:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800a378:	2300      	movs	r3, #0
 800a37a:	9308      	str	r3, [sp, #32]
 800a37c:	e07a      	b.n	800a474 <_strtod_l+0x60c>
 800a37e:	07e2      	lsls	r2, r4, #31
 800a380:	d505      	bpl.n	800a38e <_strtod_l+0x526>
 800a382:	9b08      	ldr	r3, [sp, #32]
 800a384:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a388:	f7f6 f8a6 	bl	80004d8 <__aeabi_dmul>
 800a38c:	2301      	movs	r3, #1
 800a38e:	9a08      	ldr	r2, [sp, #32]
 800a390:	3601      	adds	r6, #1
 800a392:	3208      	adds	r2, #8
 800a394:	1064      	asrs	r4, r4, #1
 800a396:	9208      	str	r2, [sp, #32]
 800a398:	e7cd      	b.n	800a336 <_strtod_l+0x4ce>
 800a39a:	d0ed      	beq.n	800a378 <_strtod_l+0x510>
 800a39c:	4264      	negs	r4, r4
 800a39e:	f014 020f 	ands.w	r2, r4, #15
 800a3a2:	d00a      	beq.n	800a3ba <_strtod_l+0x552>
 800a3a4:	4b13      	ldr	r3, [pc, #76]	@ (800a3f4 <_strtod_l+0x58c>)
 800a3a6:	4650      	mov	r0, sl
 800a3a8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a3ac:	4659      	mov	r1, fp
 800a3ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3b2:	f7f6 f9bb 	bl	800072c <__aeabi_ddiv>
 800a3b6:	4682      	mov	sl, r0
 800a3b8:	468b      	mov	fp, r1
 800a3ba:	1124      	asrs	r4, r4, #4
 800a3bc:	d0dc      	beq.n	800a378 <_strtod_l+0x510>
 800a3be:	2c1f      	cmp	r4, #31
 800a3c0:	dd20      	ble.n	800a404 <_strtod_l+0x59c>
 800a3c2:	2400      	movs	r4, #0
 800a3c4:	46a0      	mov	r8, r4
 800a3c6:	46a1      	mov	r9, r4
 800a3c8:	940a      	str	r4, [sp, #40]	@ 0x28
 800a3ca:	2322      	movs	r3, #34	@ 0x22
 800a3cc:	9a05      	ldr	r2, [sp, #20]
 800a3ce:	f04f 0a00 	mov.w	sl, #0
 800a3d2:	f04f 0b00 	mov.w	fp, #0
 800a3d6:	6013      	str	r3, [r2, #0]
 800a3d8:	e768      	b.n	800a2ac <_strtod_l+0x444>
 800a3da:	bf00      	nop
 800a3dc:	0800c4e9 	.word	0x0800c4e9
 800a3e0:	0800c6fc 	.word	0x0800c6fc
 800a3e4:	0800c4e1 	.word	0x0800c4e1
 800a3e8:	0800c518 	.word	0x0800c518
 800a3ec:	7ff00000 	.word	0x7ff00000
 800a3f0:	0800c8a5 	.word	0x0800c8a5
 800a3f4:	0800c630 	.word	0x0800c630
 800a3f8:	0800c608 	.word	0x0800c608
 800a3fc:	7ca00000 	.word	0x7ca00000
 800a400:	7fefffff 	.word	0x7fefffff
 800a404:	f014 0310 	ands.w	r3, r4, #16
 800a408:	bf18      	it	ne
 800a40a:	236a      	movne	r3, #106	@ 0x6a
 800a40c:	4650      	mov	r0, sl
 800a40e:	9308      	str	r3, [sp, #32]
 800a410:	4659      	mov	r1, fp
 800a412:	2300      	movs	r3, #0
 800a414:	4ea9      	ldr	r6, [pc, #676]	@ (800a6bc <_strtod_l+0x854>)
 800a416:	07e2      	lsls	r2, r4, #31
 800a418:	d504      	bpl.n	800a424 <_strtod_l+0x5bc>
 800a41a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a41e:	f7f6 f85b 	bl	80004d8 <__aeabi_dmul>
 800a422:	2301      	movs	r3, #1
 800a424:	1064      	asrs	r4, r4, #1
 800a426:	f106 0608 	add.w	r6, r6, #8
 800a42a:	d1f4      	bne.n	800a416 <_strtod_l+0x5ae>
 800a42c:	b10b      	cbz	r3, 800a432 <_strtod_l+0x5ca>
 800a42e:	4682      	mov	sl, r0
 800a430:	468b      	mov	fp, r1
 800a432:	9b08      	ldr	r3, [sp, #32]
 800a434:	b1b3      	cbz	r3, 800a464 <_strtod_l+0x5fc>
 800a436:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800a43a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800a43e:	2b00      	cmp	r3, #0
 800a440:	4659      	mov	r1, fp
 800a442:	dd0f      	ble.n	800a464 <_strtod_l+0x5fc>
 800a444:	2b1f      	cmp	r3, #31
 800a446:	dd57      	ble.n	800a4f8 <_strtod_l+0x690>
 800a448:	2b34      	cmp	r3, #52	@ 0x34
 800a44a:	bfd8      	it	le
 800a44c:	f04f 33ff 	movle.w	r3, #4294967295
 800a450:	f04f 0a00 	mov.w	sl, #0
 800a454:	bfcf      	iteee	gt
 800a456:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800a45a:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800a45e:	4093      	lslle	r3, r2
 800a460:	ea03 0b01 	andle.w	fp, r3, r1
 800a464:	2200      	movs	r2, #0
 800a466:	2300      	movs	r3, #0
 800a468:	4650      	mov	r0, sl
 800a46a:	4659      	mov	r1, fp
 800a46c:	f7f6 fa9c 	bl	80009a8 <__aeabi_dcmpeq>
 800a470:	2800      	cmp	r0, #0
 800a472:	d1a6      	bne.n	800a3c2 <_strtod_l+0x55a>
 800a474:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a476:	463a      	mov	r2, r7
 800a478:	9300      	str	r3, [sp, #0]
 800a47a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800a47c:	462b      	mov	r3, r5
 800a47e:	9805      	ldr	r0, [sp, #20]
 800a480:	f7ff f8d0 	bl	8009624 <__s2b>
 800a484:	900a      	str	r0, [sp, #40]	@ 0x28
 800a486:	2800      	cmp	r0, #0
 800a488:	f43f af05 	beq.w	800a296 <_strtod_l+0x42e>
 800a48c:	2400      	movs	r4, #0
 800a48e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a490:	eba9 0308 	sub.w	r3, r9, r8
 800a494:	2a00      	cmp	r2, #0
 800a496:	bfa8      	it	ge
 800a498:	2300      	movge	r3, #0
 800a49a:	46a0      	mov	r8, r4
 800a49c:	9312      	str	r3, [sp, #72]	@ 0x48
 800a49e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800a4a2:	9316      	str	r3, [sp, #88]	@ 0x58
 800a4a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a4a6:	9805      	ldr	r0, [sp, #20]
 800a4a8:	6859      	ldr	r1, [r3, #4]
 800a4aa:	f7ff f813 	bl	80094d4 <_Balloc>
 800a4ae:	4681      	mov	r9, r0
 800a4b0:	2800      	cmp	r0, #0
 800a4b2:	f43f aef4 	beq.w	800a29e <_strtod_l+0x436>
 800a4b6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a4b8:	300c      	adds	r0, #12
 800a4ba:	691a      	ldr	r2, [r3, #16]
 800a4bc:	f103 010c 	add.w	r1, r3, #12
 800a4c0:	3202      	adds	r2, #2
 800a4c2:	0092      	lsls	r2, r2, #2
 800a4c4:	f7fe f8a5 	bl	8008612 <memcpy>
 800a4c8:	ab1c      	add	r3, sp, #112	@ 0x70
 800a4ca:	9301      	str	r3, [sp, #4]
 800a4cc:	ab1b      	add	r3, sp, #108	@ 0x6c
 800a4ce:	9300      	str	r3, [sp, #0]
 800a4d0:	4652      	mov	r2, sl
 800a4d2:	465b      	mov	r3, fp
 800a4d4:	9805      	ldr	r0, [sp, #20]
 800a4d6:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800a4da:	f7ff fbd5 	bl	8009c88 <__d2b>
 800a4de:	901a      	str	r0, [sp, #104]	@ 0x68
 800a4e0:	2800      	cmp	r0, #0
 800a4e2:	f43f aedc 	beq.w	800a29e <_strtod_l+0x436>
 800a4e6:	2101      	movs	r1, #1
 800a4e8:	9805      	ldr	r0, [sp, #20]
 800a4ea:	f7ff f931 	bl	8009750 <__i2b>
 800a4ee:	4680      	mov	r8, r0
 800a4f0:	b948      	cbnz	r0, 800a506 <_strtod_l+0x69e>
 800a4f2:	f04f 0800 	mov.w	r8, #0
 800a4f6:	e6d2      	b.n	800a29e <_strtod_l+0x436>
 800a4f8:	f04f 32ff 	mov.w	r2, #4294967295
 800a4fc:	fa02 f303 	lsl.w	r3, r2, r3
 800a500:	ea03 0a0a 	and.w	sl, r3, sl
 800a504:	e7ae      	b.n	800a464 <_strtod_l+0x5fc>
 800a506:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800a508:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800a50a:	2d00      	cmp	r5, #0
 800a50c:	bfab      	itete	ge
 800a50e:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800a510:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800a512:	18ef      	addge	r7, r5, r3
 800a514:	1b5e      	sublt	r6, r3, r5
 800a516:	9b08      	ldr	r3, [sp, #32]
 800a518:	bfa8      	it	ge
 800a51a:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800a51c:	eba5 0503 	sub.w	r5, r5, r3
 800a520:	4415      	add	r5, r2
 800a522:	4b67      	ldr	r3, [pc, #412]	@ (800a6c0 <_strtod_l+0x858>)
 800a524:	f105 35ff 	add.w	r5, r5, #4294967295
 800a528:	bfb8      	it	lt
 800a52a:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800a52c:	429d      	cmp	r5, r3
 800a52e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800a532:	da50      	bge.n	800a5d6 <_strtod_l+0x76e>
 800a534:	1b5b      	subs	r3, r3, r5
 800a536:	2b1f      	cmp	r3, #31
 800a538:	f04f 0101 	mov.w	r1, #1
 800a53c:	eba2 0203 	sub.w	r2, r2, r3
 800a540:	dc3d      	bgt.n	800a5be <_strtod_l+0x756>
 800a542:	fa01 f303 	lsl.w	r3, r1, r3
 800a546:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a548:	2300      	movs	r3, #0
 800a54a:	9310      	str	r3, [sp, #64]	@ 0x40
 800a54c:	18bd      	adds	r5, r7, r2
 800a54e:	9b08      	ldr	r3, [sp, #32]
 800a550:	42af      	cmp	r7, r5
 800a552:	4416      	add	r6, r2
 800a554:	441e      	add	r6, r3
 800a556:	463b      	mov	r3, r7
 800a558:	bfa8      	it	ge
 800a55a:	462b      	movge	r3, r5
 800a55c:	42b3      	cmp	r3, r6
 800a55e:	bfa8      	it	ge
 800a560:	4633      	movge	r3, r6
 800a562:	2b00      	cmp	r3, #0
 800a564:	bfc2      	ittt	gt
 800a566:	1aed      	subgt	r5, r5, r3
 800a568:	1af6      	subgt	r6, r6, r3
 800a56a:	1aff      	subgt	r7, r7, r3
 800a56c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a56e:	2b00      	cmp	r3, #0
 800a570:	dd16      	ble.n	800a5a0 <_strtod_l+0x738>
 800a572:	4641      	mov	r1, r8
 800a574:	461a      	mov	r2, r3
 800a576:	9805      	ldr	r0, [sp, #20]
 800a578:	f7ff f9a8 	bl	80098cc <__pow5mult>
 800a57c:	4680      	mov	r8, r0
 800a57e:	2800      	cmp	r0, #0
 800a580:	d0b7      	beq.n	800a4f2 <_strtod_l+0x68a>
 800a582:	4601      	mov	r1, r0
 800a584:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a586:	9805      	ldr	r0, [sp, #20]
 800a588:	f7ff f8f8 	bl	800977c <__multiply>
 800a58c:	900e      	str	r0, [sp, #56]	@ 0x38
 800a58e:	2800      	cmp	r0, #0
 800a590:	f43f ae85 	beq.w	800a29e <_strtod_l+0x436>
 800a594:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a596:	9805      	ldr	r0, [sp, #20]
 800a598:	f7fe ffdc 	bl	8009554 <_Bfree>
 800a59c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a59e:	931a      	str	r3, [sp, #104]	@ 0x68
 800a5a0:	2d00      	cmp	r5, #0
 800a5a2:	dc1d      	bgt.n	800a5e0 <_strtod_l+0x778>
 800a5a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	dd23      	ble.n	800a5f2 <_strtod_l+0x78a>
 800a5aa:	4649      	mov	r1, r9
 800a5ac:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800a5ae:	9805      	ldr	r0, [sp, #20]
 800a5b0:	f7ff f98c 	bl	80098cc <__pow5mult>
 800a5b4:	4681      	mov	r9, r0
 800a5b6:	b9e0      	cbnz	r0, 800a5f2 <_strtod_l+0x78a>
 800a5b8:	f04f 0900 	mov.w	r9, #0
 800a5bc:	e66f      	b.n	800a29e <_strtod_l+0x436>
 800a5be:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800a5c2:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800a5c6:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800a5ca:	35e2      	adds	r5, #226	@ 0xe2
 800a5cc:	fa01 f305 	lsl.w	r3, r1, r5
 800a5d0:	9310      	str	r3, [sp, #64]	@ 0x40
 800a5d2:	9113      	str	r1, [sp, #76]	@ 0x4c
 800a5d4:	e7ba      	b.n	800a54c <_strtod_l+0x6e4>
 800a5d6:	2300      	movs	r3, #0
 800a5d8:	9310      	str	r3, [sp, #64]	@ 0x40
 800a5da:	2301      	movs	r3, #1
 800a5dc:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a5de:	e7b5      	b.n	800a54c <_strtod_l+0x6e4>
 800a5e0:	462a      	mov	r2, r5
 800a5e2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a5e4:	9805      	ldr	r0, [sp, #20]
 800a5e6:	f7ff f9cb 	bl	8009980 <__lshift>
 800a5ea:	901a      	str	r0, [sp, #104]	@ 0x68
 800a5ec:	2800      	cmp	r0, #0
 800a5ee:	d1d9      	bne.n	800a5a4 <_strtod_l+0x73c>
 800a5f0:	e655      	b.n	800a29e <_strtod_l+0x436>
 800a5f2:	2e00      	cmp	r6, #0
 800a5f4:	dd07      	ble.n	800a606 <_strtod_l+0x79e>
 800a5f6:	4649      	mov	r1, r9
 800a5f8:	4632      	mov	r2, r6
 800a5fa:	9805      	ldr	r0, [sp, #20]
 800a5fc:	f7ff f9c0 	bl	8009980 <__lshift>
 800a600:	4681      	mov	r9, r0
 800a602:	2800      	cmp	r0, #0
 800a604:	d0d8      	beq.n	800a5b8 <_strtod_l+0x750>
 800a606:	2f00      	cmp	r7, #0
 800a608:	dd08      	ble.n	800a61c <_strtod_l+0x7b4>
 800a60a:	4641      	mov	r1, r8
 800a60c:	463a      	mov	r2, r7
 800a60e:	9805      	ldr	r0, [sp, #20]
 800a610:	f7ff f9b6 	bl	8009980 <__lshift>
 800a614:	4680      	mov	r8, r0
 800a616:	2800      	cmp	r0, #0
 800a618:	f43f ae41 	beq.w	800a29e <_strtod_l+0x436>
 800a61c:	464a      	mov	r2, r9
 800a61e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a620:	9805      	ldr	r0, [sp, #20]
 800a622:	f7ff fa35 	bl	8009a90 <__mdiff>
 800a626:	4604      	mov	r4, r0
 800a628:	2800      	cmp	r0, #0
 800a62a:	f43f ae38 	beq.w	800a29e <_strtod_l+0x436>
 800a62e:	68c3      	ldr	r3, [r0, #12]
 800a630:	4641      	mov	r1, r8
 800a632:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a634:	2300      	movs	r3, #0
 800a636:	60c3      	str	r3, [r0, #12]
 800a638:	f7ff fa0e 	bl	8009a58 <__mcmp>
 800a63c:	2800      	cmp	r0, #0
 800a63e:	da45      	bge.n	800a6cc <_strtod_l+0x864>
 800a640:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a642:	ea53 030a 	orrs.w	r3, r3, sl
 800a646:	d16b      	bne.n	800a720 <_strtod_l+0x8b8>
 800a648:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d167      	bne.n	800a720 <_strtod_l+0x8b8>
 800a650:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a654:	0d1b      	lsrs	r3, r3, #20
 800a656:	051b      	lsls	r3, r3, #20
 800a658:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a65c:	d960      	bls.n	800a720 <_strtod_l+0x8b8>
 800a65e:	6963      	ldr	r3, [r4, #20]
 800a660:	b913      	cbnz	r3, 800a668 <_strtod_l+0x800>
 800a662:	6923      	ldr	r3, [r4, #16]
 800a664:	2b01      	cmp	r3, #1
 800a666:	dd5b      	ble.n	800a720 <_strtod_l+0x8b8>
 800a668:	4621      	mov	r1, r4
 800a66a:	2201      	movs	r2, #1
 800a66c:	9805      	ldr	r0, [sp, #20]
 800a66e:	f7ff f987 	bl	8009980 <__lshift>
 800a672:	4641      	mov	r1, r8
 800a674:	4604      	mov	r4, r0
 800a676:	f7ff f9ef 	bl	8009a58 <__mcmp>
 800a67a:	2800      	cmp	r0, #0
 800a67c:	dd50      	ble.n	800a720 <_strtod_l+0x8b8>
 800a67e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a682:	9a08      	ldr	r2, [sp, #32]
 800a684:	0d1b      	lsrs	r3, r3, #20
 800a686:	051b      	lsls	r3, r3, #20
 800a688:	2a00      	cmp	r2, #0
 800a68a:	d06a      	beq.n	800a762 <_strtod_l+0x8fa>
 800a68c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a690:	d867      	bhi.n	800a762 <_strtod_l+0x8fa>
 800a692:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800a696:	f67f ae98 	bls.w	800a3ca <_strtod_l+0x562>
 800a69a:	4650      	mov	r0, sl
 800a69c:	4659      	mov	r1, fp
 800a69e:	4b09      	ldr	r3, [pc, #36]	@ (800a6c4 <_strtod_l+0x85c>)
 800a6a0:	2200      	movs	r2, #0
 800a6a2:	f7f5 ff19 	bl	80004d8 <__aeabi_dmul>
 800a6a6:	4b08      	ldr	r3, [pc, #32]	@ (800a6c8 <_strtod_l+0x860>)
 800a6a8:	4682      	mov	sl, r0
 800a6aa:	400b      	ands	r3, r1
 800a6ac:	468b      	mov	fp, r1
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	f47f ae00 	bne.w	800a2b4 <_strtod_l+0x44c>
 800a6b4:	2322      	movs	r3, #34	@ 0x22
 800a6b6:	9a05      	ldr	r2, [sp, #20]
 800a6b8:	6013      	str	r3, [r2, #0]
 800a6ba:	e5fb      	b.n	800a2b4 <_strtod_l+0x44c>
 800a6bc:	0800c728 	.word	0x0800c728
 800a6c0:	fffffc02 	.word	0xfffffc02
 800a6c4:	39500000 	.word	0x39500000
 800a6c8:	7ff00000 	.word	0x7ff00000
 800a6cc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800a6d0:	d165      	bne.n	800a79e <_strtod_l+0x936>
 800a6d2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800a6d4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a6d8:	b35a      	cbz	r2, 800a732 <_strtod_l+0x8ca>
 800a6da:	4a99      	ldr	r2, [pc, #612]	@ (800a940 <_strtod_l+0xad8>)
 800a6dc:	4293      	cmp	r3, r2
 800a6de:	d12b      	bne.n	800a738 <_strtod_l+0x8d0>
 800a6e0:	9b08      	ldr	r3, [sp, #32]
 800a6e2:	4651      	mov	r1, sl
 800a6e4:	b303      	cbz	r3, 800a728 <_strtod_l+0x8c0>
 800a6e6:	465a      	mov	r2, fp
 800a6e8:	4b96      	ldr	r3, [pc, #600]	@ (800a944 <_strtod_l+0xadc>)
 800a6ea:	4013      	ands	r3, r2
 800a6ec:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800a6f0:	f04f 32ff 	mov.w	r2, #4294967295
 800a6f4:	d81b      	bhi.n	800a72e <_strtod_l+0x8c6>
 800a6f6:	0d1b      	lsrs	r3, r3, #20
 800a6f8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800a6fc:	fa02 f303 	lsl.w	r3, r2, r3
 800a700:	4299      	cmp	r1, r3
 800a702:	d119      	bne.n	800a738 <_strtod_l+0x8d0>
 800a704:	4b90      	ldr	r3, [pc, #576]	@ (800a948 <_strtod_l+0xae0>)
 800a706:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a708:	429a      	cmp	r2, r3
 800a70a:	d102      	bne.n	800a712 <_strtod_l+0x8aa>
 800a70c:	3101      	adds	r1, #1
 800a70e:	f43f adc6 	beq.w	800a29e <_strtod_l+0x436>
 800a712:	f04f 0a00 	mov.w	sl, #0
 800a716:	4b8b      	ldr	r3, [pc, #556]	@ (800a944 <_strtod_l+0xadc>)
 800a718:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a71a:	401a      	ands	r2, r3
 800a71c:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800a720:	9b08      	ldr	r3, [sp, #32]
 800a722:	2b00      	cmp	r3, #0
 800a724:	d1b9      	bne.n	800a69a <_strtod_l+0x832>
 800a726:	e5c5      	b.n	800a2b4 <_strtod_l+0x44c>
 800a728:	f04f 33ff 	mov.w	r3, #4294967295
 800a72c:	e7e8      	b.n	800a700 <_strtod_l+0x898>
 800a72e:	4613      	mov	r3, r2
 800a730:	e7e6      	b.n	800a700 <_strtod_l+0x898>
 800a732:	ea53 030a 	orrs.w	r3, r3, sl
 800a736:	d0a2      	beq.n	800a67e <_strtod_l+0x816>
 800a738:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a73a:	b1db      	cbz	r3, 800a774 <_strtod_l+0x90c>
 800a73c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a73e:	4213      	tst	r3, r2
 800a740:	d0ee      	beq.n	800a720 <_strtod_l+0x8b8>
 800a742:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a744:	4650      	mov	r0, sl
 800a746:	4659      	mov	r1, fp
 800a748:	9a08      	ldr	r2, [sp, #32]
 800a74a:	b1bb      	cbz	r3, 800a77c <_strtod_l+0x914>
 800a74c:	f7ff fb68 	bl	8009e20 <sulp>
 800a750:	4602      	mov	r2, r0
 800a752:	460b      	mov	r3, r1
 800a754:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a758:	f7f5 fd08 	bl	800016c <__adddf3>
 800a75c:	4682      	mov	sl, r0
 800a75e:	468b      	mov	fp, r1
 800a760:	e7de      	b.n	800a720 <_strtod_l+0x8b8>
 800a762:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800a766:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800a76a:	f04f 3aff 	mov.w	sl, #4294967295
 800a76e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800a772:	e7d5      	b.n	800a720 <_strtod_l+0x8b8>
 800a774:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a776:	ea13 0f0a 	tst.w	r3, sl
 800a77a:	e7e1      	b.n	800a740 <_strtod_l+0x8d8>
 800a77c:	f7ff fb50 	bl	8009e20 <sulp>
 800a780:	4602      	mov	r2, r0
 800a782:	460b      	mov	r3, r1
 800a784:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a788:	f7f5 fcee 	bl	8000168 <__aeabi_dsub>
 800a78c:	2200      	movs	r2, #0
 800a78e:	2300      	movs	r3, #0
 800a790:	4682      	mov	sl, r0
 800a792:	468b      	mov	fp, r1
 800a794:	f7f6 f908 	bl	80009a8 <__aeabi_dcmpeq>
 800a798:	2800      	cmp	r0, #0
 800a79a:	d0c1      	beq.n	800a720 <_strtod_l+0x8b8>
 800a79c:	e615      	b.n	800a3ca <_strtod_l+0x562>
 800a79e:	4641      	mov	r1, r8
 800a7a0:	4620      	mov	r0, r4
 800a7a2:	f7ff fac9 	bl	8009d38 <__ratio>
 800a7a6:	2200      	movs	r2, #0
 800a7a8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800a7ac:	4606      	mov	r6, r0
 800a7ae:	460f      	mov	r7, r1
 800a7b0:	f7f6 f90e 	bl	80009d0 <__aeabi_dcmple>
 800a7b4:	2800      	cmp	r0, #0
 800a7b6:	d06d      	beq.n	800a894 <_strtod_l+0xa2c>
 800a7b8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d178      	bne.n	800a8b0 <_strtod_l+0xa48>
 800a7be:	f1ba 0f00 	cmp.w	sl, #0
 800a7c2:	d156      	bne.n	800a872 <_strtod_l+0xa0a>
 800a7c4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a7c6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d158      	bne.n	800a880 <_strtod_l+0xa18>
 800a7ce:	2200      	movs	r2, #0
 800a7d0:	4630      	mov	r0, r6
 800a7d2:	4639      	mov	r1, r7
 800a7d4:	4b5d      	ldr	r3, [pc, #372]	@ (800a94c <_strtod_l+0xae4>)
 800a7d6:	f7f6 f8f1 	bl	80009bc <__aeabi_dcmplt>
 800a7da:	2800      	cmp	r0, #0
 800a7dc:	d157      	bne.n	800a88e <_strtod_l+0xa26>
 800a7de:	4630      	mov	r0, r6
 800a7e0:	4639      	mov	r1, r7
 800a7e2:	2200      	movs	r2, #0
 800a7e4:	4b5a      	ldr	r3, [pc, #360]	@ (800a950 <_strtod_l+0xae8>)
 800a7e6:	f7f5 fe77 	bl	80004d8 <__aeabi_dmul>
 800a7ea:	4606      	mov	r6, r0
 800a7ec:	460f      	mov	r7, r1
 800a7ee:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800a7f2:	9606      	str	r6, [sp, #24]
 800a7f4:	9307      	str	r3, [sp, #28]
 800a7f6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a7fa:	4d52      	ldr	r5, [pc, #328]	@ (800a944 <_strtod_l+0xadc>)
 800a7fc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800a800:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a802:	401d      	ands	r5, r3
 800a804:	4b53      	ldr	r3, [pc, #332]	@ (800a954 <_strtod_l+0xaec>)
 800a806:	429d      	cmp	r5, r3
 800a808:	f040 80aa 	bne.w	800a960 <_strtod_l+0xaf8>
 800a80c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a80e:	4650      	mov	r0, sl
 800a810:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800a814:	4659      	mov	r1, fp
 800a816:	f7ff f9cf 	bl	8009bb8 <__ulp>
 800a81a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a81e:	f7f5 fe5b 	bl	80004d8 <__aeabi_dmul>
 800a822:	4652      	mov	r2, sl
 800a824:	465b      	mov	r3, fp
 800a826:	f7f5 fca1 	bl	800016c <__adddf3>
 800a82a:	460b      	mov	r3, r1
 800a82c:	4945      	ldr	r1, [pc, #276]	@ (800a944 <_strtod_l+0xadc>)
 800a82e:	4a4a      	ldr	r2, [pc, #296]	@ (800a958 <_strtod_l+0xaf0>)
 800a830:	4019      	ands	r1, r3
 800a832:	4291      	cmp	r1, r2
 800a834:	4682      	mov	sl, r0
 800a836:	d942      	bls.n	800a8be <_strtod_l+0xa56>
 800a838:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a83a:	4b43      	ldr	r3, [pc, #268]	@ (800a948 <_strtod_l+0xae0>)
 800a83c:	429a      	cmp	r2, r3
 800a83e:	d103      	bne.n	800a848 <_strtod_l+0x9e0>
 800a840:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a842:	3301      	adds	r3, #1
 800a844:	f43f ad2b 	beq.w	800a29e <_strtod_l+0x436>
 800a848:	f04f 3aff 	mov.w	sl, #4294967295
 800a84c:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 800a948 <_strtod_l+0xae0>
 800a850:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a852:	9805      	ldr	r0, [sp, #20]
 800a854:	f7fe fe7e 	bl	8009554 <_Bfree>
 800a858:	4649      	mov	r1, r9
 800a85a:	9805      	ldr	r0, [sp, #20]
 800a85c:	f7fe fe7a 	bl	8009554 <_Bfree>
 800a860:	4641      	mov	r1, r8
 800a862:	9805      	ldr	r0, [sp, #20]
 800a864:	f7fe fe76 	bl	8009554 <_Bfree>
 800a868:	4621      	mov	r1, r4
 800a86a:	9805      	ldr	r0, [sp, #20]
 800a86c:	f7fe fe72 	bl	8009554 <_Bfree>
 800a870:	e618      	b.n	800a4a4 <_strtod_l+0x63c>
 800a872:	f1ba 0f01 	cmp.w	sl, #1
 800a876:	d103      	bne.n	800a880 <_strtod_l+0xa18>
 800a878:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	f43f ada5 	beq.w	800a3ca <_strtod_l+0x562>
 800a880:	2200      	movs	r2, #0
 800a882:	4b36      	ldr	r3, [pc, #216]	@ (800a95c <_strtod_l+0xaf4>)
 800a884:	2600      	movs	r6, #0
 800a886:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a88a:	4f30      	ldr	r7, [pc, #192]	@ (800a94c <_strtod_l+0xae4>)
 800a88c:	e7b3      	b.n	800a7f6 <_strtod_l+0x98e>
 800a88e:	2600      	movs	r6, #0
 800a890:	4f2f      	ldr	r7, [pc, #188]	@ (800a950 <_strtod_l+0xae8>)
 800a892:	e7ac      	b.n	800a7ee <_strtod_l+0x986>
 800a894:	4630      	mov	r0, r6
 800a896:	4639      	mov	r1, r7
 800a898:	4b2d      	ldr	r3, [pc, #180]	@ (800a950 <_strtod_l+0xae8>)
 800a89a:	2200      	movs	r2, #0
 800a89c:	f7f5 fe1c 	bl	80004d8 <__aeabi_dmul>
 800a8a0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a8a2:	4606      	mov	r6, r0
 800a8a4:	460f      	mov	r7, r1
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d0a1      	beq.n	800a7ee <_strtod_l+0x986>
 800a8aa:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800a8ae:	e7a2      	b.n	800a7f6 <_strtod_l+0x98e>
 800a8b0:	2200      	movs	r2, #0
 800a8b2:	4b26      	ldr	r3, [pc, #152]	@ (800a94c <_strtod_l+0xae4>)
 800a8b4:	4616      	mov	r6, r2
 800a8b6:	461f      	mov	r7, r3
 800a8b8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a8bc:	e79b      	b.n	800a7f6 <_strtod_l+0x98e>
 800a8be:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800a8c2:	9b08      	ldr	r3, [sp, #32]
 800a8c4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d1c1      	bne.n	800a850 <_strtod_l+0x9e8>
 800a8cc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a8d0:	0d1b      	lsrs	r3, r3, #20
 800a8d2:	051b      	lsls	r3, r3, #20
 800a8d4:	429d      	cmp	r5, r3
 800a8d6:	d1bb      	bne.n	800a850 <_strtod_l+0x9e8>
 800a8d8:	4630      	mov	r0, r6
 800a8da:	4639      	mov	r1, r7
 800a8dc:	f7f6 fbc2 	bl	8001064 <__aeabi_d2lz>
 800a8e0:	f7f5 fdcc 	bl	800047c <__aeabi_l2d>
 800a8e4:	4602      	mov	r2, r0
 800a8e6:	460b      	mov	r3, r1
 800a8e8:	4630      	mov	r0, r6
 800a8ea:	4639      	mov	r1, r7
 800a8ec:	f7f5 fc3c 	bl	8000168 <__aeabi_dsub>
 800a8f0:	460b      	mov	r3, r1
 800a8f2:	4602      	mov	r2, r0
 800a8f4:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800a8f8:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800a8fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a8fe:	ea46 060a 	orr.w	r6, r6, sl
 800a902:	431e      	orrs	r6, r3
 800a904:	d069      	beq.n	800a9da <_strtod_l+0xb72>
 800a906:	a30a      	add	r3, pc, #40	@ (adr r3, 800a930 <_strtod_l+0xac8>)
 800a908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a90c:	f7f6 f856 	bl	80009bc <__aeabi_dcmplt>
 800a910:	2800      	cmp	r0, #0
 800a912:	f47f accf 	bne.w	800a2b4 <_strtod_l+0x44c>
 800a916:	a308      	add	r3, pc, #32	@ (adr r3, 800a938 <_strtod_l+0xad0>)
 800a918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a91c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a920:	f7f6 f86a 	bl	80009f8 <__aeabi_dcmpgt>
 800a924:	2800      	cmp	r0, #0
 800a926:	d093      	beq.n	800a850 <_strtod_l+0x9e8>
 800a928:	e4c4      	b.n	800a2b4 <_strtod_l+0x44c>
 800a92a:	bf00      	nop
 800a92c:	f3af 8000 	nop.w
 800a930:	94a03595 	.word	0x94a03595
 800a934:	3fdfffff 	.word	0x3fdfffff
 800a938:	35afe535 	.word	0x35afe535
 800a93c:	3fe00000 	.word	0x3fe00000
 800a940:	000fffff 	.word	0x000fffff
 800a944:	7ff00000 	.word	0x7ff00000
 800a948:	7fefffff 	.word	0x7fefffff
 800a94c:	3ff00000 	.word	0x3ff00000
 800a950:	3fe00000 	.word	0x3fe00000
 800a954:	7fe00000 	.word	0x7fe00000
 800a958:	7c9fffff 	.word	0x7c9fffff
 800a95c:	bff00000 	.word	0xbff00000
 800a960:	9b08      	ldr	r3, [sp, #32]
 800a962:	b323      	cbz	r3, 800a9ae <_strtod_l+0xb46>
 800a964:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800a968:	d821      	bhi.n	800a9ae <_strtod_l+0xb46>
 800a96a:	a327      	add	r3, pc, #156	@ (adr r3, 800aa08 <_strtod_l+0xba0>)
 800a96c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a970:	4630      	mov	r0, r6
 800a972:	4639      	mov	r1, r7
 800a974:	f7f6 f82c 	bl	80009d0 <__aeabi_dcmple>
 800a978:	b1a0      	cbz	r0, 800a9a4 <_strtod_l+0xb3c>
 800a97a:	4639      	mov	r1, r7
 800a97c:	4630      	mov	r0, r6
 800a97e:	f7f6 f883 	bl	8000a88 <__aeabi_d2uiz>
 800a982:	2801      	cmp	r0, #1
 800a984:	bf38      	it	cc
 800a986:	2001      	movcc	r0, #1
 800a988:	f7f5 fd2c 	bl	80003e4 <__aeabi_ui2d>
 800a98c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a98e:	4606      	mov	r6, r0
 800a990:	460f      	mov	r7, r1
 800a992:	b9fb      	cbnz	r3, 800a9d4 <_strtod_l+0xb6c>
 800a994:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a998:	9014      	str	r0, [sp, #80]	@ 0x50
 800a99a:	9315      	str	r3, [sp, #84]	@ 0x54
 800a99c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800a9a0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800a9a4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a9a6:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800a9aa:	1b5b      	subs	r3, r3, r5
 800a9ac:	9311      	str	r3, [sp, #68]	@ 0x44
 800a9ae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a9b2:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800a9b6:	f7ff f8ff 	bl	8009bb8 <__ulp>
 800a9ba:	4602      	mov	r2, r0
 800a9bc:	460b      	mov	r3, r1
 800a9be:	4650      	mov	r0, sl
 800a9c0:	4659      	mov	r1, fp
 800a9c2:	f7f5 fd89 	bl	80004d8 <__aeabi_dmul>
 800a9c6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800a9ca:	f7f5 fbcf 	bl	800016c <__adddf3>
 800a9ce:	4682      	mov	sl, r0
 800a9d0:	468b      	mov	fp, r1
 800a9d2:	e776      	b.n	800a8c2 <_strtod_l+0xa5a>
 800a9d4:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800a9d8:	e7e0      	b.n	800a99c <_strtod_l+0xb34>
 800a9da:	a30d      	add	r3, pc, #52	@ (adr r3, 800aa10 <_strtod_l+0xba8>)
 800a9dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9e0:	f7f5 ffec 	bl	80009bc <__aeabi_dcmplt>
 800a9e4:	e79e      	b.n	800a924 <_strtod_l+0xabc>
 800a9e6:	2300      	movs	r3, #0
 800a9e8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a9ea:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a9ec:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800a9ee:	6013      	str	r3, [r2, #0]
 800a9f0:	f7ff ba77 	b.w	8009ee2 <_strtod_l+0x7a>
 800a9f4:	2a65      	cmp	r2, #101	@ 0x65
 800a9f6:	f43f ab6e 	beq.w	800a0d6 <_strtod_l+0x26e>
 800a9fa:	2a45      	cmp	r2, #69	@ 0x45
 800a9fc:	f43f ab6b 	beq.w	800a0d6 <_strtod_l+0x26e>
 800aa00:	2301      	movs	r3, #1
 800aa02:	f7ff bba6 	b.w	800a152 <_strtod_l+0x2ea>
 800aa06:	bf00      	nop
 800aa08:	ffc00000 	.word	0xffc00000
 800aa0c:	41dfffff 	.word	0x41dfffff
 800aa10:	94a03595 	.word	0x94a03595
 800aa14:	3fcfffff 	.word	0x3fcfffff

0800aa18 <_strtod_r>:
 800aa18:	4b01      	ldr	r3, [pc, #4]	@ (800aa20 <_strtod_r+0x8>)
 800aa1a:	f7ff ba25 	b.w	8009e68 <_strtod_l>
 800aa1e:	bf00      	nop
 800aa20:	2000009c 	.word	0x2000009c

0800aa24 <_strtol_l.constprop.0>:
 800aa24:	2b24      	cmp	r3, #36	@ 0x24
 800aa26:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa2a:	4686      	mov	lr, r0
 800aa2c:	4690      	mov	r8, r2
 800aa2e:	d801      	bhi.n	800aa34 <_strtol_l.constprop.0+0x10>
 800aa30:	2b01      	cmp	r3, #1
 800aa32:	d106      	bne.n	800aa42 <_strtol_l.constprop.0+0x1e>
 800aa34:	f7fd fdb2 	bl	800859c <__errno>
 800aa38:	2316      	movs	r3, #22
 800aa3a:	6003      	str	r3, [r0, #0]
 800aa3c:	2000      	movs	r0, #0
 800aa3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa42:	460d      	mov	r5, r1
 800aa44:	4833      	ldr	r0, [pc, #204]	@ (800ab14 <_strtol_l.constprop.0+0xf0>)
 800aa46:	462a      	mov	r2, r5
 800aa48:	f815 4b01 	ldrb.w	r4, [r5], #1
 800aa4c:	5d06      	ldrb	r6, [r0, r4]
 800aa4e:	f016 0608 	ands.w	r6, r6, #8
 800aa52:	d1f8      	bne.n	800aa46 <_strtol_l.constprop.0+0x22>
 800aa54:	2c2d      	cmp	r4, #45	@ 0x2d
 800aa56:	d12d      	bne.n	800aab4 <_strtol_l.constprop.0+0x90>
 800aa58:	2601      	movs	r6, #1
 800aa5a:	782c      	ldrb	r4, [r5, #0]
 800aa5c:	1c95      	adds	r5, r2, #2
 800aa5e:	f033 0210 	bics.w	r2, r3, #16
 800aa62:	d109      	bne.n	800aa78 <_strtol_l.constprop.0+0x54>
 800aa64:	2c30      	cmp	r4, #48	@ 0x30
 800aa66:	d12a      	bne.n	800aabe <_strtol_l.constprop.0+0x9a>
 800aa68:	782a      	ldrb	r2, [r5, #0]
 800aa6a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800aa6e:	2a58      	cmp	r2, #88	@ 0x58
 800aa70:	d125      	bne.n	800aabe <_strtol_l.constprop.0+0x9a>
 800aa72:	2310      	movs	r3, #16
 800aa74:	786c      	ldrb	r4, [r5, #1]
 800aa76:	3502      	adds	r5, #2
 800aa78:	2200      	movs	r2, #0
 800aa7a:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800aa7e:	f10c 3cff 	add.w	ip, ip, #4294967295
 800aa82:	fbbc f9f3 	udiv	r9, ip, r3
 800aa86:	4610      	mov	r0, r2
 800aa88:	fb03 ca19 	mls	sl, r3, r9, ip
 800aa8c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800aa90:	2f09      	cmp	r7, #9
 800aa92:	d81b      	bhi.n	800aacc <_strtol_l.constprop.0+0xa8>
 800aa94:	463c      	mov	r4, r7
 800aa96:	42a3      	cmp	r3, r4
 800aa98:	dd27      	ble.n	800aaea <_strtol_l.constprop.0+0xc6>
 800aa9a:	1c57      	adds	r7, r2, #1
 800aa9c:	d007      	beq.n	800aaae <_strtol_l.constprop.0+0x8a>
 800aa9e:	4581      	cmp	r9, r0
 800aaa0:	d320      	bcc.n	800aae4 <_strtol_l.constprop.0+0xc0>
 800aaa2:	d101      	bne.n	800aaa8 <_strtol_l.constprop.0+0x84>
 800aaa4:	45a2      	cmp	sl, r4
 800aaa6:	db1d      	blt.n	800aae4 <_strtol_l.constprop.0+0xc0>
 800aaa8:	2201      	movs	r2, #1
 800aaaa:	fb00 4003 	mla	r0, r0, r3, r4
 800aaae:	f815 4b01 	ldrb.w	r4, [r5], #1
 800aab2:	e7eb      	b.n	800aa8c <_strtol_l.constprop.0+0x68>
 800aab4:	2c2b      	cmp	r4, #43	@ 0x2b
 800aab6:	bf04      	itt	eq
 800aab8:	782c      	ldrbeq	r4, [r5, #0]
 800aaba:	1c95      	addeq	r5, r2, #2
 800aabc:	e7cf      	b.n	800aa5e <_strtol_l.constprop.0+0x3a>
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d1da      	bne.n	800aa78 <_strtol_l.constprop.0+0x54>
 800aac2:	2c30      	cmp	r4, #48	@ 0x30
 800aac4:	bf0c      	ite	eq
 800aac6:	2308      	moveq	r3, #8
 800aac8:	230a      	movne	r3, #10
 800aaca:	e7d5      	b.n	800aa78 <_strtol_l.constprop.0+0x54>
 800aacc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800aad0:	2f19      	cmp	r7, #25
 800aad2:	d801      	bhi.n	800aad8 <_strtol_l.constprop.0+0xb4>
 800aad4:	3c37      	subs	r4, #55	@ 0x37
 800aad6:	e7de      	b.n	800aa96 <_strtol_l.constprop.0+0x72>
 800aad8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800aadc:	2f19      	cmp	r7, #25
 800aade:	d804      	bhi.n	800aaea <_strtol_l.constprop.0+0xc6>
 800aae0:	3c57      	subs	r4, #87	@ 0x57
 800aae2:	e7d8      	b.n	800aa96 <_strtol_l.constprop.0+0x72>
 800aae4:	f04f 32ff 	mov.w	r2, #4294967295
 800aae8:	e7e1      	b.n	800aaae <_strtol_l.constprop.0+0x8a>
 800aaea:	1c53      	adds	r3, r2, #1
 800aaec:	d108      	bne.n	800ab00 <_strtol_l.constprop.0+0xdc>
 800aaee:	2322      	movs	r3, #34	@ 0x22
 800aaf0:	4660      	mov	r0, ip
 800aaf2:	f8ce 3000 	str.w	r3, [lr]
 800aaf6:	f1b8 0f00 	cmp.w	r8, #0
 800aafa:	d0a0      	beq.n	800aa3e <_strtol_l.constprop.0+0x1a>
 800aafc:	1e69      	subs	r1, r5, #1
 800aafe:	e006      	b.n	800ab0e <_strtol_l.constprop.0+0xea>
 800ab00:	b106      	cbz	r6, 800ab04 <_strtol_l.constprop.0+0xe0>
 800ab02:	4240      	negs	r0, r0
 800ab04:	f1b8 0f00 	cmp.w	r8, #0
 800ab08:	d099      	beq.n	800aa3e <_strtol_l.constprop.0+0x1a>
 800ab0a:	2a00      	cmp	r2, #0
 800ab0c:	d1f6      	bne.n	800aafc <_strtol_l.constprop.0+0xd8>
 800ab0e:	f8c8 1000 	str.w	r1, [r8]
 800ab12:	e794      	b.n	800aa3e <_strtol_l.constprop.0+0x1a>
 800ab14:	0800c751 	.word	0x0800c751

0800ab18 <_strtol_r>:
 800ab18:	f7ff bf84 	b.w	800aa24 <_strtol_l.constprop.0>

0800ab1c <__ssputs_r>:
 800ab1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab20:	461f      	mov	r7, r3
 800ab22:	688e      	ldr	r6, [r1, #8]
 800ab24:	4682      	mov	sl, r0
 800ab26:	42be      	cmp	r6, r7
 800ab28:	460c      	mov	r4, r1
 800ab2a:	4690      	mov	r8, r2
 800ab2c:	680b      	ldr	r3, [r1, #0]
 800ab2e:	d82d      	bhi.n	800ab8c <__ssputs_r+0x70>
 800ab30:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ab34:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800ab38:	d026      	beq.n	800ab88 <__ssputs_r+0x6c>
 800ab3a:	6965      	ldr	r5, [r4, #20]
 800ab3c:	6909      	ldr	r1, [r1, #16]
 800ab3e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ab42:	eba3 0901 	sub.w	r9, r3, r1
 800ab46:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ab4a:	1c7b      	adds	r3, r7, #1
 800ab4c:	444b      	add	r3, r9
 800ab4e:	106d      	asrs	r5, r5, #1
 800ab50:	429d      	cmp	r5, r3
 800ab52:	bf38      	it	cc
 800ab54:	461d      	movcc	r5, r3
 800ab56:	0553      	lsls	r3, r2, #21
 800ab58:	d527      	bpl.n	800abaa <__ssputs_r+0x8e>
 800ab5a:	4629      	mov	r1, r5
 800ab5c:	f7fe fc2e 	bl	80093bc <_malloc_r>
 800ab60:	4606      	mov	r6, r0
 800ab62:	b360      	cbz	r0, 800abbe <__ssputs_r+0xa2>
 800ab64:	464a      	mov	r2, r9
 800ab66:	6921      	ldr	r1, [r4, #16]
 800ab68:	f7fd fd53 	bl	8008612 <memcpy>
 800ab6c:	89a3      	ldrh	r3, [r4, #12]
 800ab6e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800ab72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ab76:	81a3      	strh	r3, [r4, #12]
 800ab78:	6126      	str	r6, [r4, #16]
 800ab7a:	444e      	add	r6, r9
 800ab7c:	6026      	str	r6, [r4, #0]
 800ab7e:	463e      	mov	r6, r7
 800ab80:	6165      	str	r5, [r4, #20]
 800ab82:	eba5 0509 	sub.w	r5, r5, r9
 800ab86:	60a5      	str	r5, [r4, #8]
 800ab88:	42be      	cmp	r6, r7
 800ab8a:	d900      	bls.n	800ab8e <__ssputs_r+0x72>
 800ab8c:	463e      	mov	r6, r7
 800ab8e:	4632      	mov	r2, r6
 800ab90:	4641      	mov	r1, r8
 800ab92:	6820      	ldr	r0, [r4, #0]
 800ab94:	f7fd fc95 	bl	80084c2 <memmove>
 800ab98:	2000      	movs	r0, #0
 800ab9a:	68a3      	ldr	r3, [r4, #8]
 800ab9c:	1b9b      	subs	r3, r3, r6
 800ab9e:	60a3      	str	r3, [r4, #8]
 800aba0:	6823      	ldr	r3, [r4, #0]
 800aba2:	4433      	add	r3, r6
 800aba4:	6023      	str	r3, [r4, #0]
 800aba6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800abaa:	462a      	mov	r2, r5
 800abac:	f000 ff2f 	bl	800ba0e <_realloc_r>
 800abb0:	4606      	mov	r6, r0
 800abb2:	2800      	cmp	r0, #0
 800abb4:	d1e0      	bne.n	800ab78 <__ssputs_r+0x5c>
 800abb6:	4650      	mov	r0, sl
 800abb8:	6921      	ldr	r1, [r4, #16]
 800abba:	f7fe fb8d 	bl	80092d8 <_free_r>
 800abbe:	230c      	movs	r3, #12
 800abc0:	f8ca 3000 	str.w	r3, [sl]
 800abc4:	89a3      	ldrh	r3, [r4, #12]
 800abc6:	f04f 30ff 	mov.w	r0, #4294967295
 800abca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800abce:	81a3      	strh	r3, [r4, #12]
 800abd0:	e7e9      	b.n	800aba6 <__ssputs_r+0x8a>
	...

0800abd4 <_svfiprintf_r>:
 800abd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abd8:	4698      	mov	r8, r3
 800abda:	898b      	ldrh	r3, [r1, #12]
 800abdc:	4607      	mov	r7, r0
 800abde:	061b      	lsls	r3, r3, #24
 800abe0:	460d      	mov	r5, r1
 800abe2:	4614      	mov	r4, r2
 800abe4:	b09d      	sub	sp, #116	@ 0x74
 800abe6:	d510      	bpl.n	800ac0a <_svfiprintf_r+0x36>
 800abe8:	690b      	ldr	r3, [r1, #16]
 800abea:	b973      	cbnz	r3, 800ac0a <_svfiprintf_r+0x36>
 800abec:	2140      	movs	r1, #64	@ 0x40
 800abee:	f7fe fbe5 	bl	80093bc <_malloc_r>
 800abf2:	6028      	str	r0, [r5, #0]
 800abf4:	6128      	str	r0, [r5, #16]
 800abf6:	b930      	cbnz	r0, 800ac06 <_svfiprintf_r+0x32>
 800abf8:	230c      	movs	r3, #12
 800abfa:	603b      	str	r3, [r7, #0]
 800abfc:	f04f 30ff 	mov.w	r0, #4294967295
 800ac00:	b01d      	add	sp, #116	@ 0x74
 800ac02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac06:	2340      	movs	r3, #64	@ 0x40
 800ac08:	616b      	str	r3, [r5, #20]
 800ac0a:	2300      	movs	r3, #0
 800ac0c:	9309      	str	r3, [sp, #36]	@ 0x24
 800ac0e:	2320      	movs	r3, #32
 800ac10:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ac14:	2330      	movs	r3, #48	@ 0x30
 800ac16:	f04f 0901 	mov.w	r9, #1
 800ac1a:	f8cd 800c 	str.w	r8, [sp, #12]
 800ac1e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800adb8 <_svfiprintf_r+0x1e4>
 800ac22:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ac26:	4623      	mov	r3, r4
 800ac28:	469a      	mov	sl, r3
 800ac2a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ac2e:	b10a      	cbz	r2, 800ac34 <_svfiprintf_r+0x60>
 800ac30:	2a25      	cmp	r2, #37	@ 0x25
 800ac32:	d1f9      	bne.n	800ac28 <_svfiprintf_r+0x54>
 800ac34:	ebba 0b04 	subs.w	fp, sl, r4
 800ac38:	d00b      	beq.n	800ac52 <_svfiprintf_r+0x7e>
 800ac3a:	465b      	mov	r3, fp
 800ac3c:	4622      	mov	r2, r4
 800ac3e:	4629      	mov	r1, r5
 800ac40:	4638      	mov	r0, r7
 800ac42:	f7ff ff6b 	bl	800ab1c <__ssputs_r>
 800ac46:	3001      	adds	r0, #1
 800ac48:	f000 80a7 	beq.w	800ad9a <_svfiprintf_r+0x1c6>
 800ac4c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ac4e:	445a      	add	r2, fp
 800ac50:	9209      	str	r2, [sp, #36]	@ 0x24
 800ac52:	f89a 3000 	ldrb.w	r3, [sl]
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	f000 809f 	beq.w	800ad9a <_svfiprintf_r+0x1c6>
 800ac5c:	2300      	movs	r3, #0
 800ac5e:	f04f 32ff 	mov.w	r2, #4294967295
 800ac62:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ac66:	f10a 0a01 	add.w	sl, sl, #1
 800ac6a:	9304      	str	r3, [sp, #16]
 800ac6c:	9307      	str	r3, [sp, #28]
 800ac6e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ac72:	931a      	str	r3, [sp, #104]	@ 0x68
 800ac74:	4654      	mov	r4, sl
 800ac76:	2205      	movs	r2, #5
 800ac78:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac7c:	484e      	ldr	r0, [pc, #312]	@ (800adb8 <_svfiprintf_r+0x1e4>)
 800ac7e:	f7fd fcba 	bl	80085f6 <memchr>
 800ac82:	9a04      	ldr	r2, [sp, #16]
 800ac84:	b9d8      	cbnz	r0, 800acbe <_svfiprintf_r+0xea>
 800ac86:	06d0      	lsls	r0, r2, #27
 800ac88:	bf44      	itt	mi
 800ac8a:	2320      	movmi	r3, #32
 800ac8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ac90:	0711      	lsls	r1, r2, #28
 800ac92:	bf44      	itt	mi
 800ac94:	232b      	movmi	r3, #43	@ 0x2b
 800ac96:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ac9a:	f89a 3000 	ldrb.w	r3, [sl]
 800ac9e:	2b2a      	cmp	r3, #42	@ 0x2a
 800aca0:	d015      	beq.n	800acce <_svfiprintf_r+0xfa>
 800aca2:	4654      	mov	r4, sl
 800aca4:	2000      	movs	r0, #0
 800aca6:	f04f 0c0a 	mov.w	ip, #10
 800acaa:	9a07      	ldr	r2, [sp, #28]
 800acac:	4621      	mov	r1, r4
 800acae:	f811 3b01 	ldrb.w	r3, [r1], #1
 800acb2:	3b30      	subs	r3, #48	@ 0x30
 800acb4:	2b09      	cmp	r3, #9
 800acb6:	d94b      	bls.n	800ad50 <_svfiprintf_r+0x17c>
 800acb8:	b1b0      	cbz	r0, 800ace8 <_svfiprintf_r+0x114>
 800acba:	9207      	str	r2, [sp, #28]
 800acbc:	e014      	b.n	800ace8 <_svfiprintf_r+0x114>
 800acbe:	eba0 0308 	sub.w	r3, r0, r8
 800acc2:	fa09 f303 	lsl.w	r3, r9, r3
 800acc6:	4313      	orrs	r3, r2
 800acc8:	46a2      	mov	sl, r4
 800acca:	9304      	str	r3, [sp, #16]
 800accc:	e7d2      	b.n	800ac74 <_svfiprintf_r+0xa0>
 800acce:	9b03      	ldr	r3, [sp, #12]
 800acd0:	1d19      	adds	r1, r3, #4
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	9103      	str	r1, [sp, #12]
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	bfbb      	ittet	lt
 800acda:	425b      	neglt	r3, r3
 800acdc:	f042 0202 	orrlt.w	r2, r2, #2
 800ace0:	9307      	strge	r3, [sp, #28]
 800ace2:	9307      	strlt	r3, [sp, #28]
 800ace4:	bfb8      	it	lt
 800ace6:	9204      	strlt	r2, [sp, #16]
 800ace8:	7823      	ldrb	r3, [r4, #0]
 800acea:	2b2e      	cmp	r3, #46	@ 0x2e
 800acec:	d10a      	bne.n	800ad04 <_svfiprintf_r+0x130>
 800acee:	7863      	ldrb	r3, [r4, #1]
 800acf0:	2b2a      	cmp	r3, #42	@ 0x2a
 800acf2:	d132      	bne.n	800ad5a <_svfiprintf_r+0x186>
 800acf4:	9b03      	ldr	r3, [sp, #12]
 800acf6:	3402      	adds	r4, #2
 800acf8:	1d1a      	adds	r2, r3, #4
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	9203      	str	r2, [sp, #12]
 800acfe:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ad02:	9305      	str	r3, [sp, #20]
 800ad04:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800adbc <_svfiprintf_r+0x1e8>
 800ad08:	2203      	movs	r2, #3
 800ad0a:	4650      	mov	r0, sl
 800ad0c:	7821      	ldrb	r1, [r4, #0]
 800ad0e:	f7fd fc72 	bl	80085f6 <memchr>
 800ad12:	b138      	cbz	r0, 800ad24 <_svfiprintf_r+0x150>
 800ad14:	2240      	movs	r2, #64	@ 0x40
 800ad16:	9b04      	ldr	r3, [sp, #16]
 800ad18:	eba0 000a 	sub.w	r0, r0, sl
 800ad1c:	4082      	lsls	r2, r0
 800ad1e:	4313      	orrs	r3, r2
 800ad20:	3401      	adds	r4, #1
 800ad22:	9304      	str	r3, [sp, #16]
 800ad24:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad28:	2206      	movs	r2, #6
 800ad2a:	4825      	ldr	r0, [pc, #148]	@ (800adc0 <_svfiprintf_r+0x1ec>)
 800ad2c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ad30:	f7fd fc61 	bl	80085f6 <memchr>
 800ad34:	2800      	cmp	r0, #0
 800ad36:	d036      	beq.n	800ada6 <_svfiprintf_r+0x1d2>
 800ad38:	4b22      	ldr	r3, [pc, #136]	@ (800adc4 <_svfiprintf_r+0x1f0>)
 800ad3a:	bb1b      	cbnz	r3, 800ad84 <_svfiprintf_r+0x1b0>
 800ad3c:	9b03      	ldr	r3, [sp, #12]
 800ad3e:	3307      	adds	r3, #7
 800ad40:	f023 0307 	bic.w	r3, r3, #7
 800ad44:	3308      	adds	r3, #8
 800ad46:	9303      	str	r3, [sp, #12]
 800ad48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ad4a:	4433      	add	r3, r6
 800ad4c:	9309      	str	r3, [sp, #36]	@ 0x24
 800ad4e:	e76a      	b.n	800ac26 <_svfiprintf_r+0x52>
 800ad50:	460c      	mov	r4, r1
 800ad52:	2001      	movs	r0, #1
 800ad54:	fb0c 3202 	mla	r2, ip, r2, r3
 800ad58:	e7a8      	b.n	800acac <_svfiprintf_r+0xd8>
 800ad5a:	2300      	movs	r3, #0
 800ad5c:	f04f 0c0a 	mov.w	ip, #10
 800ad60:	4619      	mov	r1, r3
 800ad62:	3401      	adds	r4, #1
 800ad64:	9305      	str	r3, [sp, #20]
 800ad66:	4620      	mov	r0, r4
 800ad68:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ad6c:	3a30      	subs	r2, #48	@ 0x30
 800ad6e:	2a09      	cmp	r2, #9
 800ad70:	d903      	bls.n	800ad7a <_svfiprintf_r+0x1a6>
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d0c6      	beq.n	800ad04 <_svfiprintf_r+0x130>
 800ad76:	9105      	str	r1, [sp, #20]
 800ad78:	e7c4      	b.n	800ad04 <_svfiprintf_r+0x130>
 800ad7a:	4604      	mov	r4, r0
 800ad7c:	2301      	movs	r3, #1
 800ad7e:	fb0c 2101 	mla	r1, ip, r1, r2
 800ad82:	e7f0      	b.n	800ad66 <_svfiprintf_r+0x192>
 800ad84:	ab03      	add	r3, sp, #12
 800ad86:	9300      	str	r3, [sp, #0]
 800ad88:	462a      	mov	r2, r5
 800ad8a:	4638      	mov	r0, r7
 800ad8c:	4b0e      	ldr	r3, [pc, #56]	@ (800adc8 <_svfiprintf_r+0x1f4>)
 800ad8e:	a904      	add	r1, sp, #16
 800ad90:	f7fc fc92 	bl	80076b8 <_printf_float>
 800ad94:	1c42      	adds	r2, r0, #1
 800ad96:	4606      	mov	r6, r0
 800ad98:	d1d6      	bne.n	800ad48 <_svfiprintf_r+0x174>
 800ad9a:	89ab      	ldrh	r3, [r5, #12]
 800ad9c:	065b      	lsls	r3, r3, #25
 800ad9e:	f53f af2d 	bmi.w	800abfc <_svfiprintf_r+0x28>
 800ada2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ada4:	e72c      	b.n	800ac00 <_svfiprintf_r+0x2c>
 800ada6:	ab03      	add	r3, sp, #12
 800ada8:	9300      	str	r3, [sp, #0]
 800adaa:	462a      	mov	r2, r5
 800adac:	4638      	mov	r0, r7
 800adae:	4b06      	ldr	r3, [pc, #24]	@ (800adc8 <_svfiprintf_r+0x1f4>)
 800adb0:	a904      	add	r1, sp, #16
 800adb2:	f7fc ff1f 	bl	8007bf4 <_printf_i>
 800adb6:	e7ed      	b.n	800ad94 <_svfiprintf_r+0x1c0>
 800adb8:	0800c851 	.word	0x0800c851
 800adbc:	0800c857 	.word	0x0800c857
 800adc0:	0800c85b 	.word	0x0800c85b
 800adc4:	080076b9 	.word	0x080076b9
 800adc8:	0800ab1d 	.word	0x0800ab1d

0800adcc <__sfputc_r>:
 800adcc:	6893      	ldr	r3, [r2, #8]
 800adce:	b410      	push	{r4}
 800add0:	3b01      	subs	r3, #1
 800add2:	2b00      	cmp	r3, #0
 800add4:	6093      	str	r3, [r2, #8]
 800add6:	da07      	bge.n	800ade8 <__sfputc_r+0x1c>
 800add8:	6994      	ldr	r4, [r2, #24]
 800adda:	42a3      	cmp	r3, r4
 800addc:	db01      	blt.n	800ade2 <__sfputc_r+0x16>
 800adde:	290a      	cmp	r1, #10
 800ade0:	d102      	bne.n	800ade8 <__sfputc_r+0x1c>
 800ade2:	bc10      	pop	{r4}
 800ade4:	f000 b9da 	b.w	800b19c <__swbuf_r>
 800ade8:	6813      	ldr	r3, [r2, #0]
 800adea:	1c58      	adds	r0, r3, #1
 800adec:	6010      	str	r0, [r2, #0]
 800adee:	7019      	strb	r1, [r3, #0]
 800adf0:	4608      	mov	r0, r1
 800adf2:	bc10      	pop	{r4}
 800adf4:	4770      	bx	lr

0800adf6 <__sfputs_r>:
 800adf6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adf8:	4606      	mov	r6, r0
 800adfa:	460f      	mov	r7, r1
 800adfc:	4614      	mov	r4, r2
 800adfe:	18d5      	adds	r5, r2, r3
 800ae00:	42ac      	cmp	r4, r5
 800ae02:	d101      	bne.n	800ae08 <__sfputs_r+0x12>
 800ae04:	2000      	movs	r0, #0
 800ae06:	e007      	b.n	800ae18 <__sfputs_r+0x22>
 800ae08:	463a      	mov	r2, r7
 800ae0a:	4630      	mov	r0, r6
 800ae0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae10:	f7ff ffdc 	bl	800adcc <__sfputc_r>
 800ae14:	1c43      	adds	r3, r0, #1
 800ae16:	d1f3      	bne.n	800ae00 <__sfputs_r+0xa>
 800ae18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ae1c <_vfiprintf_r>:
 800ae1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae20:	460d      	mov	r5, r1
 800ae22:	4614      	mov	r4, r2
 800ae24:	4698      	mov	r8, r3
 800ae26:	4606      	mov	r6, r0
 800ae28:	b09d      	sub	sp, #116	@ 0x74
 800ae2a:	b118      	cbz	r0, 800ae34 <_vfiprintf_r+0x18>
 800ae2c:	6a03      	ldr	r3, [r0, #32]
 800ae2e:	b90b      	cbnz	r3, 800ae34 <_vfiprintf_r+0x18>
 800ae30:	f7fd fa9c 	bl	800836c <__sinit>
 800ae34:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ae36:	07d9      	lsls	r1, r3, #31
 800ae38:	d405      	bmi.n	800ae46 <_vfiprintf_r+0x2a>
 800ae3a:	89ab      	ldrh	r3, [r5, #12]
 800ae3c:	059a      	lsls	r2, r3, #22
 800ae3e:	d402      	bmi.n	800ae46 <_vfiprintf_r+0x2a>
 800ae40:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ae42:	f7fd fbd6 	bl	80085f2 <__retarget_lock_acquire_recursive>
 800ae46:	89ab      	ldrh	r3, [r5, #12]
 800ae48:	071b      	lsls	r3, r3, #28
 800ae4a:	d501      	bpl.n	800ae50 <_vfiprintf_r+0x34>
 800ae4c:	692b      	ldr	r3, [r5, #16]
 800ae4e:	b99b      	cbnz	r3, 800ae78 <_vfiprintf_r+0x5c>
 800ae50:	4629      	mov	r1, r5
 800ae52:	4630      	mov	r0, r6
 800ae54:	f000 f9e0 	bl	800b218 <__swsetup_r>
 800ae58:	b170      	cbz	r0, 800ae78 <_vfiprintf_r+0x5c>
 800ae5a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ae5c:	07dc      	lsls	r4, r3, #31
 800ae5e:	d504      	bpl.n	800ae6a <_vfiprintf_r+0x4e>
 800ae60:	f04f 30ff 	mov.w	r0, #4294967295
 800ae64:	b01d      	add	sp, #116	@ 0x74
 800ae66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae6a:	89ab      	ldrh	r3, [r5, #12]
 800ae6c:	0598      	lsls	r0, r3, #22
 800ae6e:	d4f7      	bmi.n	800ae60 <_vfiprintf_r+0x44>
 800ae70:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ae72:	f7fd fbbf 	bl	80085f4 <__retarget_lock_release_recursive>
 800ae76:	e7f3      	b.n	800ae60 <_vfiprintf_r+0x44>
 800ae78:	2300      	movs	r3, #0
 800ae7a:	9309      	str	r3, [sp, #36]	@ 0x24
 800ae7c:	2320      	movs	r3, #32
 800ae7e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ae82:	2330      	movs	r3, #48	@ 0x30
 800ae84:	f04f 0901 	mov.w	r9, #1
 800ae88:	f8cd 800c 	str.w	r8, [sp, #12]
 800ae8c:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800b038 <_vfiprintf_r+0x21c>
 800ae90:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ae94:	4623      	mov	r3, r4
 800ae96:	469a      	mov	sl, r3
 800ae98:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ae9c:	b10a      	cbz	r2, 800aea2 <_vfiprintf_r+0x86>
 800ae9e:	2a25      	cmp	r2, #37	@ 0x25
 800aea0:	d1f9      	bne.n	800ae96 <_vfiprintf_r+0x7a>
 800aea2:	ebba 0b04 	subs.w	fp, sl, r4
 800aea6:	d00b      	beq.n	800aec0 <_vfiprintf_r+0xa4>
 800aea8:	465b      	mov	r3, fp
 800aeaa:	4622      	mov	r2, r4
 800aeac:	4629      	mov	r1, r5
 800aeae:	4630      	mov	r0, r6
 800aeb0:	f7ff ffa1 	bl	800adf6 <__sfputs_r>
 800aeb4:	3001      	adds	r0, #1
 800aeb6:	f000 80a7 	beq.w	800b008 <_vfiprintf_r+0x1ec>
 800aeba:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800aebc:	445a      	add	r2, fp
 800aebe:	9209      	str	r2, [sp, #36]	@ 0x24
 800aec0:	f89a 3000 	ldrb.w	r3, [sl]
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	f000 809f 	beq.w	800b008 <_vfiprintf_r+0x1ec>
 800aeca:	2300      	movs	r3, #0
 800aecc:	f04f 32ff 	mov.w	r2, #4294967295
 800aed0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aed4:	f10a 0a01 	add.w	sl, sl, #1
 800aed8:	9304      	str	r3, [sp, #16]
 800aeda:	9307      	str	r3, [sp, #28]
 800aedc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800aee0:	931a      	str	r3, [sp, #104]	@ 0x68
 800aee2:	4654      	mov	r4, sl
 800aee4:	2205      	movs	r2, #5
 800aee6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aeea:	4853      	ldr	r0, [pc, #332]	@ (800b038 <_vfiprintf_r+0x21c>)
 800aeec:	f7fd fb83 	bl	80085f6 <memchr>
 800aef0:	9a04      	ldr	r2, [sp, #16]
 800aef2:	b9d8      	cbnz	r0, 800af2c <_vfiprintf_r+0x110>
 800aef4:	06d1      	lsls	r1, r2, #27
 800aef6:	bf44      	itt	mi
 800aef8:	2320      	movmi	r3, #32
 800aefa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800aefe:	0713      	lsls	r3, r2, #28
 800af00:	bf44      	itt	mi
 800af02:	232b      	movmi	r3, #43	@ 0x2b
 800af04:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800af08:	f89a 3000 	ldrb.w	r3, [sl]
 800af0c:	2b2a      	cmp	r3, #42	@ 0x2a
 800af0e:	d015      	beq.n	800af3c <_vfiprintf_r+0x120>
 800af10:	4654      	mov	r4, sl
 800af12:	2000      	movs	r0, #0
 800af14:	f04f 0c0a 	mov.w	ip, #10
 800af18:	9a07      	ldr	r2, [sp, #28]
 800af1a:	4621      	mov	r1, r4
 800af1c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800af20:	3b30      	subs	r3, #48	@ 0x30
 800af22:	2b09      	cmp	r3, #9
 800af24:	d94b      	bls.n	800afbe <_vfiprintf_r+0x1a2>
 800af26:	b1b0      	cbz	r0, 800af56 <_vfiprintf_r+0x13a>
 800af28:	9207      	str	r2, [sp, #28]
 800af2a:	e014      	b.n	800af56 <_vfiprintf_r+0x13a>
 800af2c:	eba0 0308 	sub.w	r3, r0, r8
 800af30:	fa09 f303 	lsl.w	r3, r9, r3
 800af34:	4313      	orrs	r3, r2
 800af36:	46a2      	mov	sl, r4
 800af38:	9304      	str	r3, [sp, #16]
 800af3a:	e7d2      	b.n	800aee2 <_vfiprintf_r+0xc6>
 800af3c:	9b03      	ldr	r3, [sp, #12]
 800af3e:	1d19      	adds	r1, r3, #4
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	9103      	str	r1, [sp, #12]
 800af44:	2b00      	cmp	r3, #0
 800af46:	bfbb      	ittet	lt
 800af48:	425b      	neglt	r3, r3
 800af4a:	f042 0202 	orrlt.w	r2, r2, #2
 800af4e:	9307      	strge	r3, [sp, #28]
 800af50:	9307      	strlt	r3, [sp, #28]
 800af52:	bfb8      	it	lt
 800af54:	9204      	strlt	r2, [sp, #16]
 800af56:	7823      	ldrb	r3, [r4, #0]
 800af58:	2b2e      	cmp	r3, #46	@ 0x2e
 800af5a:	d10a      	bne.n	800af72 <_vfiprintf_r+0x156>
 800af5c:	7863      	ldrb	r3, [r4, #1]
 800af5e:	2b2a      	cmp	r3, #42	@ 0x2a
 800af60:	d132      	bne.n	800afc8 <_vfiprintf_r+0x1ac>
 800af62:	9b03      	ldr	r3, [sp, #12]
 800af64:	3402      	adds	r4, #2
 800af66:	1d1a      	adds	r2, r3, #4
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	9203      	str	r2, [sp, #12]
 800af6c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800af70:	9305      	str	r3, [sp, #20]
 800af72:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800b03c <_vfiprintf_r+0x220>
 800af76:	2203      	movs	r2, #3
 800af78:	4650      	mov	r0, sl
 800af7a:	7821      	ldrb	r1, [r4, #0]
 800af7c:	f7fd fb3b 	bl	80085f6 <memchr>
 800af80:	b138      	cbz	r0, 800af92 <_vfiprintf_r+0x176>
 800af82:	2240      	movs	r2, #64	@ 0x40
 800af84:	9b04      	ldr	r3, [sp, #16]
 800af86:	eba0 000a 	sub.w	r0, r0, sl
 800af8a:	4082      	lsls	r2, r0
 800af8c:	4313      	orrs	r3, r2
 800af8e:	3401      	adds	r4, #1
 800af90:	9304      	str	r3, [sp, #16]
 800af92:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af96:	2206      	movs	r2, #6
 800af98:	4829      	ldr	r0, [pc, #164]	@ (800b040 <_vfiprintf_r+0x224>)
 800af9a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800af9e:	f7fd fb2a 	bl	80085f6 <memchr>
 800afa2:	2800      	cmp	r0, #0
 800afa4:	d03f      	beq.n	800b026 <_vfiprintf_r+0x20a>
 800afa6:	4b27      	ldr	r3, [pc, #156]	@ (800b044 <_vfiprintf_r+0x228>)
 800afa8:	bb1b      	cbnz	r3, 800aff2 <_vfiprintf_r+0x1d6>
 800afaa:	9b03      	ldr	r3, [sp, #12]
 800afac:	3307      	adds	r3, #7
 800afae:	f023 0307 	bic.w	r3, r3, #7
 800afb2:	3308      	adds	r3, #8
 800afb4:	9303      	str	r3, [sp, #12]
 800afb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800afb8:	443b      	add	r3, r7
 800afba:	9309      	str	r3, [sp, #36]	@ 0x24
 800afbc:	e76a      	b.n	800ae94 <_vfiprintf_r+0x78>
 800afbe:	460c      	mov	r4, r1
 800afc0:	2001      	movs	r0, #1
 800afc2:	fb0c 3202 	mla	r2, ip, r2, r3
 800afc6:	e7a8      	b.n	800af1a <_vfiprintf_r+0xfe>
 800afc8:	2300      	movs	r3, #0
 800afca:	f04f 0c0a 	mov.w	ip, #10
 800afce:	4619      	mov	r1, r3
 800afd0:	3401      	adds	r4, #1
 800afd2:	9305      	str	r3, [sp, #20]
 800afd4:	4620      	mov	r0, r4
 800afd6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800afda:	3a30      	subs	r2, #48	@ 0x30
 800afdc:	2a09      	cmp	r2, #9
 800afde:	d903      	bls.n	800afe8 <_vfiprintf_r+0x1cc>
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d0c6      	beq.n	800af72 <_vfiprintf_r+0x156>
 800afe4:	9105      	str	r1, [sp, #20]
 800afe6:	e7c4      	b.n	800af72 <_vfiprintf_r+0x156>
 800afe8:	4604      	mov	r4, r0
 800afea:	2301      	movs	r3, #1
 800afec:	fb0c 2101 	mla	r1, ip, r1, r2
 800aff0:	e7f0      	b.n	800afd4 <_vfiprintf_r+0x1b8>
 800aff2:	ab03      	add	r3, sp, #12
 800aff4:	9300      	str	r3, [sp, #0]
 800aff6:	462a      	mov	r2, r5
 800aff8:	4630      	mov	r0, r6
 800affa:	4b13      	ldr	r3, [pc, #76]	@ (800b048 <_vfiprintf_r+0x22c>)
 800affc:	a904      	add	r1, sp, #16
 800affe:	f7fc fb5b 	bl	80076b8 <_printf_float>
 800b002:	4607      	mov	r7, r0
 800b004:	1c78      	adds	r0, r7, #1
 800b006:	d1d6      	bne.n	800afb6 <_vfiprintf_r+0x19a>
 800b008:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b00a:	07d9      	lsls	r1, r3, #31
 800b00c:	d405      	bmi.n	800b01a <_vfiprintf_r+0x1fe>
 800b00e:	89ab      	ldrh	r3, [r5, #12]
 800b010:	059a      	lsls	r2, r3, #22
 800b012:	d402      	bmi.n	800b01a <_vfiprintf_r+0x1fe>
 800b014:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b016:	f7fd faed 	bl	80085f4 <__retarget_lock_release_recursive>
 800b01a:	89ab      	ldrh	r3, [r5, #12]
 800b01c:	065b      	lsls	r3, r3, #25
 800b01e:	f53f af1f 	bmi.w	800ae60 <_vfiprintf_r+0x44>
 800b022:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b024:	e71e      	b.n	800ae64 <_vfiprintf_r+0x48>
 800b026:	ab03      	add	r3, sp, #12
 800b028:	9300      	str	r3, [sp, #0]
 800b02a:	462a      	mov	r2, r5
 800b02c:	4630      	mov	r0, r6
 800b02e:	4b06      	ldr	r3, [pc, #24]	@ (800b048 <_vfiprintf_r+0x22c>)
 800b030:	a904      	add	r1, sp, #16
 800b032:	f7fc fddf 	bl	8007bf4 <_printf_i>
 800b036:	e7e4      	b.n	800b002 <_vfiprintf_r+0x1e6>
 800b038:	0800c851 	.word	0x0800c851
 800b03c:	0800c857 	.word	0x0800c857
 800b040:	0800c85b 	.word	0x0800c85b
 800b044:	080076b9 	.word	0x080076b9
 800b048:	0800adf7 	.word	0x0800adf7

0800b04c <__sflush_r>:
 800b04c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b052:	0716      	lsls	r6, r2, #28
 800b054:	4605      	mov	r5, r0
 800b056:	460c      	mov	r4, r1
 800b058:	d454      	bmi.n	800b104 <__sflush_r+0xb8>
 800b05a:	684b      	ldr	r3, [r1, #4]
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	dc02      	bgt.n	800b066 <__sflush_r+0x1a>
 800b060:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b062:	2b00      	cmp	r3, #0
 800b064:	dd48      	ble.n	800b0f8 <__sflush_r+0xac>
 800b066:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b068:	2e00      	cmp	r6, #0
 800b06a:	d045      	beq.n	800b0f8 <__sflush_r+0xac>
 800b06c:	2300      	movs	r3, #0
 800b06e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b072:	682f      	ldr	r7, [r5, #0]
 800b074:	6a21      	ldr	r1, [r4, #32]
 800b076:	602b      	str	r3, [r5, #0]
 800b078:	d030      	beq.n	800b0dc <__sflush_r+0x90>
 800b07a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b07c:	89a3      	ldrh	r3, [r4, #12]
 800b07e:	0759      	lsls	r1, r3, #29
 800b080:	d505      	bpl.n	800b08e <__sflush_r+0x42>
 800b082:	6863      	ldr	r3, [r4, #4]
 800b084:	1ad2      	subs	r2, r2, r3
 800b086:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b088:	b10b      	cbz	r3, 800b08e <__sflush_r+0x42>
 800b08a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b08c:	1ad2      	subs	r2, r2, r3
 800b08e:	2300      	movs	r3, #0
 800b090:	4628      	mov	r0, r5
 800b092:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b094:	6a21      	ldr	r1, [r4, #32]
 800b096:	47b0      	blx	r6
 800b098:	1c43      	adds	r3, r0, #1
 800b09a:	89a3      	ldrh	r3, [r4, #12]
 800b09c:	d106      	bne.n	800b0ac <__sflush_r+0x60>
 800b09e:	6829      	ldr	r1, [r5, #0]
 800b0a0:	291d      	cmp	r1, #29
 800b0a2:	d82b      	bhi.n	800b0fc <__sflush_r+0xb0>
 800b0a4:	4a28      	ldr	r2, [pc, #160]	@ (800b148 <__sflush_r+0xfc>)
 800b0a6:	410a      	asrs	r2, r1
 800b0a8:	07d6      	lsls	r6, r2, #31
 800b0aa:	d427      	bmi.n	800b0fc <__sflush_r+0xb0>
 800b0ac:	2200      	movs	r2, #0
 800b0ae:	6062      	str	r2, [r4, #4]
 800b0b0:	6922      	ldr	r2, [r4, #16]
 800b0b2:	04d9      	lsls	r1, r3, #19
 800b0b4:	6022      	str	r2, [r4, #0]
 800b0b6:	d504      	bpl.n	800b0c2 <__sflush_r+0x76>
 800b0b8:	1c42      	adds	r2, r0, #1
 800b0ba:	d101      	bne.n	800b0c0 <__sflush_r+0x74>
 800b0bc:	682b      	ldr	r3, [r5, #0]
 800b0be:	b903      	cbnz	r3, 800b0c2 <__sflush_r+0x76>
 800b0c0:	6560      	str	r0, [r4, #84]	@ 0x54
 800b0c2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b0c4:	602f      	str	r7, [r5, #0]
 800b0c6:	b1b9      	cbz	r1, 800b0f8 <__sflush_r+0xac>
 800b0c8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b0cc:	4299      	cmp	r1, r3
 800b0ce:	d002      	beq.n	800b0d6 <__sflush_r+0x8a>
 800b0d0:	4628      	mov	r0, r5
 800b0d2:	f7fe f901 	bl	80092d8 <_free_r>
 800b0d6:	2300      	movs	r3, #0
 800b0d8:	6363      	str	r3, [r4, #52]	@ 0x34
 800b0da:	e00d      	b.n	800b0f8 <__sflush_r+0xac>
 800b0dc:	2301      	movs	r3, #1
 800b0de:	4628      	mov	r0, r5
 800b0e0:	47b0      	blx	r6
 800b0e2:	4602      	mov	r2, r0
 800b0e4:	1c50      	adds	r0, r2, #1
 800b0e6:	d1c9      	bne.n	800b07c <__sflush_r+0x30>
 800b0e8:	682b      	ldr	r3, [r5, #0]
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d0c6      	beq.n	800b07c <__sflush_r+0x30>
 800b0ee:	2b1d      	cmp	r3, #29
 800b0f0:	d001      	beq.n	800b0f6 <__sflush_r+0xaa>
 800b0f2:	2b16      	cmp	r3, #22
 800b0f4:	d11d      	bne.n	800b132 <__sflush_r+0xe6>
 800b0f6:	602f      	str	r7, [r5, #0]
 800b0f8:	2000      	movs	r0, #0
 800b0fa:	e021      	b.n	800b140 <__sflush_r+0xf4>
 800b0fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b100:	b21b      	sxth	r3, r3
 800b102:	e01a      	b.n	800b13a <__sflush_r+0xee>
 800b104:	690f      	ldr	r7, [r1, #16]
 800b106:	2f00      	cmp	r7, #0
 800b108:	d0f6      	beq.n	800b0f8 <__sflush_r+0xac>
 800b10a:	0793      	lsls	r3, r2, #30
 800b10c:	bf18      	it	ne
 800b10e:	2300      	movne	r3, #0
 800b110:	680e      	ldr	r6, [r1, #0]
 800b112:	bf08      	it	eq
 800b114:	694b      	ldreq	r3, [r1, #20]
 800b116:	1bf6      	subs	r6, r6, r7
 800b118:	600f      	str	r7, [r1, #0]
 800b11a:	608b      	str	r3, [r1, #8]
 800b11c:	2e00      	cmp	r6, #0
 800b11e:	ddeb      	ble.n	800b0f8 <__sflush_r+0xac>
 800b120:	4633      	mov	r3, r6
 800b122:	463a      	mov	r2, r7
 800b124:	4628      	mov	r0, r5
 800b126:	6a21      	ldr	r1, [r4, #32]
 800b128:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800b12c:	47e0      	blx	ip
 800b12e:	2800      	cmp	r0, #0
 800b130:	dc07      	bgt.n	800b142 <__sflush_r+0xf6>
 800b132:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b136:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b13a:	f04f 30ff 	mov.w	r0, #4294967295
 800b13e:	81a3      	strh	r3, [r4, #12]
 800b140:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b142:	4407      	add	r7, r0
 800b144:	1a36      	subs	r6, r6, r0
 800b146:	e7e9      	b.n	800b11c <__sflush_r+0xd0>
 800b148:	dfbffffe 	.word	0xdfbffffe

0800b14c <_fflush_r>:
 800b14c:	b538      	push	{r3, r4, r5, lr}
 800b14e:	690b      	ldr	r3, [r1, #16]
 800b150:	4605      	mov	r5, r0
 800b152:	460c      	mov	r4, r1
 800b154:	b913      	cbnz	r3, 800b15c <_fflush_r+0x10>
 800b156:	2500      	movs	r5, #0
 800b158:	4628      	mov	r0, r5
 800b15a:	bd38      	pop	{r3, r4, r5, pc}
 800b15c:	b118      	cbz	r0, 800b166 <_fflush_r+0x1a>
 800b15e:	6a03      	ldr	r3, [r0, #32]
 800b160:	b90b      	cbnz	r3, 800b166 <_fflush_r+0x1a>
 800b162:	f7fd f903 	bl	800836c <__sinit>
 800b166:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d0f3      	beq.n	800b156 <_fflush_r+0xa>
 800b16e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b170:	07d0      	lsls	r0, r2, #31
 800b172:	d404      	bmi.n	800b17e <_fflush_r+0x32>
 800b174:	0599      	lsls	r1, r3, #22
 800b176:	d402      	bmi.n	800b17e <_fflush_r+0x32>
 800b178:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b17a:	f7fd fa3a 	bl	80085f2 <__retarget_lock_acquire_recursive>
 800b17e:	4628      	mov	r0, r5
 800b180:	4621      	mov	r1, r4
 800b182:	f7ff ff63 	bl	800b04c <__sflush_r>
 800b186:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b188:	4605      	mov	r5, r0
 800b18a:	07da      	lsls	r2, r3, #31
 800b18c:	d4e4      	bmi.n	800b158 <_fflush_r+0xc>
 800b18e:	89a3      	ldrh	r3, [r4, #12]
 800b190:	059b      	lsls	r3, r3, #22
 800b192:	d4e1      	bmi.n	800b158 <_fflush_r+0xc>
 800b194:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b196:	f7fd fa2d 	bl	80085f4 <__retarget_lock_release_recursive>
 800b19a:	e7dd      	b.n	800b158 <_fflush_r+0xc>

0800b19c <__swbuf_r>:
 800b19c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b19e:	460e      	mov	r6, r1
 800b1a0:	4614      	mov	r4, r2
 800b1a2:	4605      	mov	r5, r0
 800b1a4:	b118      	cbz	r0, 800b1ae <__swbuf_r+0x12>
 800b1a6:	6a03      	ldr	r3, [r0, #32]
 800b1a8:	b90b      	cbnz	r3, 800b1ae <__swbuf_r+0x12>
 800b1aa:	f7fd f8df 	bl	800836c <__sinit>
 800b1ae:	69a3      	ldr	r3, [r4, #24]
 800b1b0:	60a3      	str	r3, [r4, #8]
 800b1b2:	89a3      	ldrh	r3, [r4, #12]
 800b1b4:	071a      	lsls	r2, r3, #28
 800b1b6:	d501      	bpl.n	800b1bc <__swbuf_r+0x20>
 800b1b8:	6923      	ldr	r3, [r4, #16]
 800b1ba:	b943      	cbnz	r3, 800b1ce <__swbuf_r+0x32>
 800b1bc:	4621      	mov	r1, r4
 800b1be:	4628      	mov	r0, r5
 800b1c0:	f000 f82a 	bl	800b218 <__swsetup_r>
 800b1c4:	b118      	cbz	r0, 800b1ce <__swbuf_r+0x32>
 800b1c6:	f04f 37ff 	mov.w	r7, #4294967295
 800b1ca:	4638      	mov	r0, r7
 800b1cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b1ce:	6823      	ldr	r3, [r4, #0]
 800b1d0:	6922      	ldr	r2, [r4, #16]
 800b1d2:	b2f6      	uxtb	r6, r6
 800b1d4:	1a98      	subs	r0, r3, r2
 800b1d6:	6963      	ldr	r3, [r4, #20]
 800b1d8:	4637      	mov	r7, r6
 800b1da:	4283      	cmp	r3, r0
 800b1dc:	dc05      	bgt.n	800b1ea <__swbuf_r+0x4e>
 800b1de:	4621      	mov	r1, r4
 800b1e0:	4628      	mov	r0, r5
 800b1e2:	f7ff ffb3 	bl	800b14c <_fflush_r>
 800b1e6:	2800      	cmp	r0, #0
 800b1e8:	d1ed      	bne.n	800b1c6 <__swbuf_r+0x2a>
 800b1ea:	68a3      	ldr	r3, [r4, #8]
 800b1ec:	3b01      	subs	r3, #1
 800b1ee:	60a3      	str	r3, [r4, #8]
 800b1f0:	6823      	ldr	r3, [r4, #0]
 800b1f2:	1c5a      	adds	r2, r3, #1
 800b1f4:	6022      	str	r2, [r4, #0]
 800b1f6:	701e      	strb	r6, [r3, #0]
 800b1f8:	6962      	ldr	r2, [r4, #20]
 800b1fa:	1c43      	adds	r3, r0, #1
 800b1fc:	429a      	cmp	r2, r3
 800b1fe:	d004      	beq.n	800b20a <__swbuf_r+0x6e>
 800b200:	89a3      	ldrh	r3, [r4, #12]
 800b202:	07db      	lsls	r3, r3, #31
 800b204:	d5e1      	bpl.n	800b1ca <__swbuf_r+0x2e>
 800b206:	2e0a      	cmp	r6, #10
 800b208:	d1df      	bne.n	800b1ca <__swbuf_r+0x2e>
 800b20a:	4621      	mov	r1, r4
 800b20c:	4628      	mov	r0, r5
 800b20e:	f7ff ff9d 	bl	800b14c <_fflush_r>
 800b212:	2800      	cmp	r0, #0
 800b214:	d0d9      	beq.n	800b1ca <__swbuf_r+0x2e>
 800b216:	e7d6      	b.n	800b1c6 <__swbuf_r+0x2a>

0800b218 <__swsetup_r>:
 800b218:	b538      	push	{r3, r4, r5, lr}
 800b21a:	4b29      	ldr	r3, [pc, #164]	@ (800b2c0 <__swsetup_r+0xa8>)
 800b21c:	4605      	mov	r5, r0
 800b21e:	6818      	ldr	r0, [r3, #0]
 800b220:	460c      	mov	r4, r1
 800b222:	b118      	cbz	r0, 800b22c <__swsetup_r+0x14>
 800b224:	6a03      	ldr	r3, [r0, #32]
 800b226:	b90b      	cbnz	r3, 800b22c <__swsetup_r+0x14>
 800b228:	f7fd f8a0 	bl	800836c <__sinit>
 800b22c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b230:	0719      	lsls	r1, r3, #28
 800b232:	d422      	bmi.n	800b27a <__swsetup_r+0x62>
 800b234:	06da      	lsls	r2, r3, #27
 800b236:	d407      	bmi.n	800b248 <__swsetup_r+0x30>
 800b238:	2209      	movs	r2, #9
 800b23a:	602a      	str	r2, [r5, #0]
 800b23c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b240:	f04f 30ff 	mov.w	r0, #4294967295
 800b244:	81a3      	strh	r3, [r4, #12]
 800b246:	e033      	b.n	800b2b0 <__swsetup_r+0x98>
 800b248:	0758      	lsls	r0, r3, #29
 800b24a:	d512      	bpl.n	800b272 <__swsetup_r+0x5a>
 800b24c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b24e:	b141      	cbz	r1, 800b262 <__swsetup_r+0x4a>
 800b250:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b254:	4299      	cmp	r1, r3
 800b256:	d002      	beq.n	800b25e <__swsetup_r+0x46>
 800b258:	4628      	mov	r0, r5
 800b25a:	f7fe f83d 	bl	80092d8 <_free_r>
 800b25e:	2300      	movs	r3, #0
 800b260:	6363      	str	r3, [r4, #52]	@ 0x34
 800b262:	89a3      	ldrh	r3, [r4, #12]
 800b264:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b268:	81a3      	strh	r3, [r4, #12]
 800b26a:	2300      	movs	r3, #0
 800b26c:	6063      	str	r3, [r4, #4]
 800b26e:	6923      	ldr	r3, [r4, #16]
 800b270:	6023      	str	r3, [r4, #0]
 800b272:	89a3      	ldrh	r3, [r4, #12]
 800b274:	f043 0308 	orr.w	r3, r3, #8
 800b278:	81a3      	strh	r3, [r4, #12]
 800b27a:	6923      	ldr	r3, [r4, #16]
 800b27c:	b94b      	cbnz	r3, 800b292 <__swsetup_r+0x7a>
 800b27e:	89a3      	ldrh	r3, [r4, #12]
 800b280:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b284:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b288:	d003      	beq.n	800b292 <__swsetup_r+0x7a>
 800b28a:	4621      	mov	r1, r4
 800b28c:	4628      	mov	r0, r5
 800b28e:	f000 fc30 	bl	800baf2 <__smakebuf_r>
 800b292:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b296:	f013 0201 	ands.w	r2, r3, #1
 800b29a:	d00a      	beq.n	800b2b2 <__swsetup_r+0x9a>
 800b29c:	2200      	movs	r2, #0
 800b29e:	60a2      	str	r2, [r4, #8]
 800b2a0:	6962      	ldr	r2, [r4, #20]
 800b2a2:	4252      	negs	r2, r2
 800b2a4:	61a2      	str	r2, [r4, #24]
 800b2a6:	6922      	ldr	r2, [r4, #16]
 800b2a8:	b942      	cbnz	r2, 800b2bc <__swsetup_r+0xa4>
 800b2aa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b2ae:	d1c5      	bne.n	800b23c <__swsetup_r+0x24>
 800b2b0:	bd38      	pop	{r3, r4, r5, pc}
 800b2b2:	0799      	lsls	r1, r3, #30
 800b2b4:	bf58      	it	pl
 800b2b6:	6962      	ldrpl	r2, [r4, #20]
 800b2b8:	60a2      	str	r2, [r4, #8]
 800b2ba:	e7f4      	b.n	800b2a6 <__swsetup_r+0x8e>
 800b2bc:	2000      	movs	r0, #0
 800b2be:	e7f7      	b.n	800b2b0 <__swsetup_r+0x98>
 800b2c0:	2000004c 	.word	0x2000004c

0800b2c4 <strncmp>:
 800b2c4:	b510      	push	{r4, lr}
 800b2c6:	b16a      	cbz	r2, 800b2e4 <strncmp+0x20>
 800b2c8:	3901      	subs	r1, #1
 800b2ca:	1884      	adds	r4, r0, r2
 800b2cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b2d0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800b2d4:	429a      	cmp	r2, r3
 800b2d6:	d103      	bne.n	800b2e0 <strncmp+0x1c>
 800b2d8:	42a0      	cmp	r0, r4
 800b2da:	d001      	beq.n	800b2e0 <strncmp+0x1c>
 800b2dc:	2a00      	cmp	r2, #0
 800b2de:	d1f5      	bne.n	800b2cc <strncmp+0x8>
 800b2e0:	1ad0      	subs	r0, r2, r3
 800b2e2:	bd10      	pop	{r4, pc}
 800b2e4:	4610      	mov	r0, r2
 800b2e6:	e7fc      	b.n	800b2e2 <strncmp+0x1e>

0800b2e8 <_sbrk_r>:
 800b2e8:	b538      	push	{r3, r4, r5, lr}
 800b2ea:	2300      	movs	r3, #0
 800b2ec:	4d05      	ldr	r5, [pc, #20]	@ (800b304 <_sbrk_r+0x1c>)
 800b2ee:	4604      	mov	r4, r0
 800b2f0:	4608      	mov	r0, r1
 800b2f2:	602b      	str	r3, [r5, #0]
 800b2f4:	f7f6 fca0 	bl	8001c38 <_sbrk>
 800b2f8:	1c43      	adds	r3, r0, #1
 800b2fa:	d102      	bne.n	800b302 <_sbrk_r+0x1a>
 800b2fc:	682b      	ldr	r3, [r5, #0]
 800b2fe:	b103      	cbz	r3, 800b302 <_sbrk_r+0x1a>
 800b300:	6023      	str	r3, [r4, #0]
 800b302:	bd38      	pop	{r3, r4, r5, pc}
 800b304:	20000968 	.word	0x20000968

0800b308 <nan>:
 800b308:	2000      	movs	r0, #0
 800b30a:	4901      	ldr	r1, [pc, #4]	@ (800b310 <nan+0x8>)
 800b30c:	4770      	bx	lr
 800b30e:	bf00      	nop
 800b310:	7ff80000 	.word	0x7ff80000

0800b314 <__assert_func>:
 800b314:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b316:	4614      	mov	r4, r2
 800b318:	461a      	mov	r2, r3
 800b31a:	4b09      	ldr	r3, [pc, #36]	@ (800b340 <__assert_func+0x2c>)
 800b31c:	4605      	mov	r5, r0
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	68d8      	ldr	r0, [r3, #12]
 800b322:	b954      	cbnz	r4, 800b33a <__assert_func+0x26>
 800b324:	4b07      	ldr	r3, [pc, #28]	@ (800b344 <__assert_func+0x30>)
 800b326:	461c      	mov	r4, r3
 800b328:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b32c:	9100      	str	r1, [sp, #0]
 800b32e:	462b      	mov	r3, r5
 800b330:	4905      	ldr	r1, [pc, #20]	@ (800b348 <__assert_func+0x34>)
 800b332:	f000 fba7 	bl	800ba84 <fiprintf>
 800b336:	f000 fc3b 	bl	800bbb0 <abort>
 800b33a:	4b04      	ldr	r3, [pc, #16]	@ (800b34c <__assert_func+0x38>)
 800b33c:	e7f4      	b.n	800b328 <__assert_func+0x14>
 800b33e:	bf00      	nop
 800b340:	2000004c 	.word	0x2000004c
 800b344:	0800c8a5 	.word	0x0800c8a5
 800b348:	0800c877 	.word	0x0800c877
 800b34c:	0800c86a 	.word	0x0800c86a

0800b350 <_calloc_r>:
 800b350:	b570      	push	{r4, r5, r6, lr}
 800b352:	fba1 5402 	umull	r5, r4, r1, r2
 800b356:	b93c      	cbnz	r4, 800b368 <_calloc_r+0x18>
 800b358:	4629      	mov	r1, r5
 800b35a:	f7fe f82f 	bl	80093bc <_malloc_r>
 800b35e:	4606      	mov	r6, r0
 800b360:	b928      	cbnz	r0, 800b36e <_calloc_r+0x1e>
 800b362:	2600      	movs	r6, #0
 800b364:	4630      	mov	r0, r6
 800b366:	bd70      	pop	{r4, r5, r6, pc}
 800b368:	220c      	movs	r2, #12
 800b36a:	6002      	str	r2, [r0, #0]
 800b36c:	e7f9      	b.n	800b362 <_calloc_r+0x12>
 800b36e:	462a      	mov	r2, r5
 800b370:	4621      	mov	r1, r4
 800b372:	f7fd f8c0 	bl	80084f6 <memset>
 800b376:	e7f5      	b.n	800b364 <_calloc_r+0x14>

0800b378 <rshift>:
 800b378:	6903      	ldr	r3, [r0, #16]
 800b37a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b37e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b382:	f100 0414 	add.w	r4, r0, #20
 800b386:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b38a:	dd46      	ble.n	800b41a <rshift+0xa2>
 800b38c:	f011 011f 	ands.w	r1, r1, #31
 800b390:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b394:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b398:	d10c      	bne.n	800b3b4 <rshift+0x3c>
 800b39a:	4629      	mov	r1, r5
 800b39c:	f100 0710 	add.w	r7, r0, #16
 800b3a0:	42b1      	cmp	r1, r6
 800b3a2:	d335      	bcc.n	800b410 <rshift+0x98>
 800b3a4:	1a9b      	subs	r3, r3, r2
 800b3a6:	009b      	lsls	r3, r3, #2
 800b3a8:	1eea      	subs	r2, r5, #3
 800b3aa:	4296      	cmp	r6, r2
 800b3ac:	bf38      	it	cc
 800b3ae:	2300      	movcc	r3, #0
 800b3b0:	4423      	add	r3, r4
 800b3b2:	e015      	b.n	800b3e0 <rshift+0x68>
 800b3b4:	46a1      	mov	r9, r4
 800b3b6:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b3ba:	f1c1 0820 	rsb	r8, r1, #32
 800b3be:	40cf      	lsrs	r7, r1
 800b3c0:	f105 0e04 	add.w	lr, r5, #4
 800b3c4:	4576      	cmp	r6, lr
 800b3c6:	46f4      	mov	ip, lr
 800b3c8:	d816      	bhi.n	800b3f8 <rshift+0x80>
 800b3ca:	1a9a      	subs	r2, r3, r2
 800b3cc:	0092      	lsls	r2, r2, #2
 800b3ce:	3a04      	subs	r2, #4
 800b3d0:	3501      	adds	r5, #1
 800b3d2:	42ae      	cmp	r6, r5
 800b3d4:	bf38      	it	cc
 800b3d6:	2200      	movcc	r2, #0
 800b3d8:	18a3      	adds	r3, r4, r2
 800b3da:	50a7      	str	r7, [r4, r2]
 800b3dc:	b107      	cbz	r7, 800b3e0 <rshift+0x68>
 800b3de:	3304      	adds	r3, #4
 800b3e0:	42a3      	cmp	r3, r4
 800b3e2:	eba3 0204 	sub.w	r2, r3, r4
 800b3e6:	bf08      	it	eq
 800b3e8:	2300      	moveq	r3, #0
 800b3ea:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b3ee:	6102      	str	r2, [r0, #16]
 800b3f0:	bf08      	it	eq
 800b3f2:	6143      	streq	r3, [r0, #20]
 800b3f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b3f8:	f8dc c000 	ldr.w	ip, [ip]
 800b3fc:	fa0c fc08 	lsl.w	ip, ip, r8
 800b400:	ea4c 0707 	orr.w	r7, ip, r7
 800b404:	f849 7b04 	str.w	r7, [r9], #4
 800b408:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b40c:	40cf      	lsrs	r7, r1
 800b40e:	e7d9      	b.n	800b3c4 <rshift+0x4c>
 800b410:	f851 cb04 	ldr.w	ip, [r1], #4
 800b414:	f847 cf04 	str.w	ip, [r7, #4]!
 800b418:	e7c2      	b.n	800b3a0 <rshift+0x28>
 800b41a:	4623      	mov	r3, r4
 800b41c:	e7e0      	b.n	800b3e0 <rshift+0x68>

0800b41e <__hexdig_fun>:
 800b41e:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800b422:	2b09      	cmp	r3, #9
 800b424:	d802      	bhi.n	800b42c <__hexdig_fun+0xe>
 800b426:	3820      	subs	r0, #32
 800b428:	b2c0      	uxtb	r0, r0
 800b42a:	4770      	bx	lr
 800b42c:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800b430:	2b05      	cmp	r3, #5
 800b432:	d801      	bhi.n	800b438 <__hexdig_fun+0x1a>
 800b434:	3847      	subs	r0, #71	@ 0x47
 800b436:	e7f7      	b.n	800b428 <__hexdig_fun+0xa>
 800b438:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800b43c:	2b05      	cmp	r3, #5
 800b43e:	d801      	bhi.n	800b444 <__hexdig_fun+0x26>
 800b440:	3827      	subs	r0, #39	@ 0x27
 800b442:	e7f1      	b.n	800b428 <__hexdig_fun+0xa>
 800b444:	2000      	movs	r0, #0
 800b446:	4770      	bx	lr

0800b448 <__gethex>:
 800b448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b44c:	468a      	mov	sl, r1
 800b44e:	4690      	mov	r8, r2
 800b450:	b085      	sub	sp, #20
 800b452:	9302      	str	r3, [sp, #8]
 800b454:	680b      	ldr	r3, [r1, #0]
 800b456:	9001      	str	r0, [sp, #4]
 800b458:	1c9c      	adds	r4, r3, #2
 800b45a:	46a1      	mov	r9, r4
 800b45c:	f814 0b01 	ldrb.w	r0, [r4], #1
 800b460:	2830      	cmp	r0, #48	@ 0x30
 800b462:	d0fa      	beq.n	800b45a <__gethex+0x12>
 800b464:	eba9 0303 	sub.w	r3, r9, r3
 800b468:	f1a3 0b02 	sub.w	fp, r3, #2
 800b46c:	f7ff ffd7 	bl	800b41e <__hexdig_fun>
 800b470:	4605      	mov	r5, r0
 800b472:	2800      	cmp	r0, #0
 800b474:	d168      	bne.n	800b548 <__gethex+0x100>
 800b476:	2201      	movs	r2, #1
 800b478:	4648      	mov	r0, r9
 800b47a:	499f      	ldr	r1, [pc, #636]	@ (800b6f8 <__gethex+0x2b0>)
 800b47c:	f7ff ff22 	bl	800b2c4 <strncmp>
 800b480:	4607      	mov	r7, r0
 800b482:	2800      	cmp	r0, #0
 800b484:	d167      	bne.n	800b556 <__gethex+0x10e>
 800b486:	f899 0001 	ldrb.w	r0, [r9, #1]
 800b48a:	4626      	mov	r6, r4
 800b48c:	f7ff ffc7 	bl	800b41e <__hexdig_fun>
 800b490:	2800      	cmp	r0, #0
 800b492:	d062      	beq.n	800b55a <__gethex+0x112>
 800b494:	4623      	mov	r3, r4
 800b496:	7818      	ldrb	r0, [r3, #0]
 800b498:	4699      	mov	r9, r3
 800b49a:	2830      	cmp	r0, #48	@ 0x30
 800b49c:	f103 0301 	add.w	r3, r3, #1
 800b4a0:	d0f9      	beq.n	800b496 <__gethex+0x4e>
 800b4a2:	f7ff ffbc 	bl	800b41e <__hexdig_fun>
 800b4a6:	fab0 f580 	clz	r5, r0
 800b4aa:	f04f 0b01 	mov.w	fp, #1
 800b4ae:	096d      	lsrs	r5, r5, #5
 800b4b0:	464a      	mov	r2, r9
 800b4b2:	4616      	mov	r6, r2
 800b4b4:	7830      	ldrb	r0, [r6, #0]
 800b4b6:	3201      	adds	r2, #1
 800b4b8:	f7ff ffb1 	bl	800b41e <__hexdig_fun>
 800b4bc:	2800      	cmp	r0, #0
 800b4be:	d1f8      	bne.n	800b4b2 <__gethex+0x6a>
 800b4c0:	2201      	movs	r2, #1
 800b4c2:	4630      	mov	r0, r6
 800b4c4:	498c      	ldr	r1, [pc, #560]	@ (800b6f8 <__gethex+0x2b0>)
 800b4c6:	f7ff fefd 	bl	800b2c4 <strncmp>
 800b4ca:	2800      	cmp	r0, #0
 800b4cc:	d13f      	bne.n	800b54e <__gethex+0x106>
 800b4ce:	b944      	cbnz	r4, 800b4e2 <__gethex+0x9a>
 800b4d0:	1c74      	adds	r4, r6, #1
 800b4d2:	4622      	mov	r2, r4
 800b4d4:	4616      	mov	r6, r2
 800b4d6:	7830      	ldrb	r0, [r6, #0]
 800b4d8:	3201      	adds	r2, #1
 800b4da:	f7ff ffa0 	bl	800b41e <__hexdig_fun>
 800b4de:	2800      	cmp	r0, #0
 800b4e0:	d1f8      	bne.n	800b4d4 <__gethex+0x8c>
 800b4e2:	1ba4      	subs	r4, r4, r6
 800b4e4:	00a7      	lsls	r7, r4, #2
 800b4e6:	7833      	ldrb	r3, [r6, #0]
 800b4e8:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800b4ec:	2b50      	cmp	r3, #80	@ 0x50
 800b4ee:	d13e      	bne.n	800b56e <__gethex+0x126>
 800b4f0:	7873      	ldrb	r3, [r6, #1]
 800b4f2:	2b2b      	cmp	r3, #43	@ 0x2b
 800b4f4:	d033      	beq.n	800b55e <__gethex+0x116>
 800b4f6:	2b2d      	cmp	r3, #45	@ 0x2d
 800b4f8:	d034      	beq.n	800b564 <__gethex+0x11c>
 800b4fa:	2400      	movs	r4, #0
 800b4fc:	1c71      	adds	r1, r6, #1
 800b4fe:	7808      	ldrb	r0, [r1, #0]
 800b500:	f7ff ff8d 	bl	800b41e <__hexdig_fun>
 800b504:	1e43      	subs	r3, r0, #1
 800b506:	b2db      	uxtb	r3, r3
 800b508:	2b18      	cmp	r3, #24
 800b50a:	d830      	bhi.n	800b56e <__gethex+0x126>
 800b50c:	f1a0 0210 	sub.w	r2, r0, #16
 800b510:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b514:	f7ff ff83 	bl	800b41e <__hexdig_fun>
 800b518:	f100 3cff 	add.w	ip, r0, #4294967295
 800b51c:	fa5f fc8c 	uxtb.w	ip, ip
 800b520:	f1bc 0f18 	cmp.w	ip, #24
 800b524:	f04f 030a 	mov.w	r3, #10
 800b528:	d91e      	bls.n	800b568 <__gethex+0x120>
 800b52a:	b104      	cbz	r4, 800b52e <__gethex+0xe6>
 800b52c:	4252      	negs	r2, r2
 800b52e:	4417      	add	r7, r2
 800b530:	f8ca 1000 	str.w	r1, [sl]
 800b534:	b1ed      	cbz	r5, 800b572 <__gethex+0x12a>
 800b536:	f1bb 0f00 	cmp.w	fp, #0
 800b53a:	bf0c      	ite	eq
 800b53c:	2506      	moveq	r5, #6
 800b53e:	2500      	movne	r5, #0
 800b540:	4628      	mov	r0, r5
 800b542:	b005      	add	sp, #20
 800b544:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b548:	2500      	movs	r5, #0
 800b54a:	462c      	mov	r4, r5
 800b54c:	e7b0      	b.n	800b4b0 <__gethex+0x68>
 800b54e:	2c00      	cmp	r4, #0
 800b550:	d1c7      	bne.n	800b4e2 <__gethex+0x9a>
 800b552:	4627      	mov	r7, r4
 800b554:	e7c7      	b.n	800b4e6 <__gethex+0x9e>
 800b556:	464e      	mov	r6, r9
 800b558:	462f      	mov	r7, r5
 800b55a:	2501      	movs	r5, #1
 800b55c:	e7c3      	b.n	800b4e6 <__gethex+0x9e>
 800b55e:	2400      	movs	r4, #0
 800b560:	1cb1      	adds	r1, r6, #2
 800b562:	e7cc      	b.n	800b4fe <__gethex+0xb6>
 800b564:	2401      	movs	r4, #1
 800b566:	e7fb      	b.n	800b560 <__gethex+0x118>
 800b568:	fb03 0002 	mla	r0, r3, r2, r0
 800b56c:	e7ce      	b.n	800b50c <__gethex+0xc4>
 800b56e:	4631      	mov	r1, r6
 800b570:	e7de      	b.n	800b530 <__gethex+0xe8>
 800b572:	4629      	mov	r1, r5
 800b574:	eba6 0309 	sub.w	r3, r6, r9
 800b578:	3b01      	subs	r3, #1
 800b57a:	2b07      	cmp	r3, #7
 800b57c:	dc0a      	bgt.n	800b594 <__gethex+0x14c>
 800b57e:	9801      	ldr	r0, [sp, #4]
 800b580:	f7fd ffa8 	bl	80094d4 <_Balloc>
 800b584:	4604      	mov	r4, r0
 800b586:	b940      	cbnz	r0, 800b59a <__gethex+0x152>
 800b588:	4602      	mov	r2, r0
 800b58a:	21e4      	movs	r1, #228	@ 0xe4
 800b58c:	4b5b      	ldr	r3, [pc, #364]	@ (800b6fc <__gethex+0x2b4>)
 800b58e:	485c      	ldr	r0, [pc, #368]	@ (800b700 <__gethex+0x2b8>)
 800b590:	f7ff fec0 	bl	800b314 <__assert_func>
 800b594:	3101      	adds	r1, #1
 800b596:	105b      	asrs	r3, r3, #1
 800b598:	e7ef      	b.n	800b57a <__gethex+0x132>
 800b59a:	2300      	movs	r3, #0
 800b59c:	f100 0a14 	add.w	sl, r0, #20
 800b5a0:	4655      	mov	r5, sl
 800b5a2:	469b      	mov	fp, r3
 800b5a4:	45b1      	cmp	r9, r6
 800b5a6:	d337      	bcc.n	800b618 <__gethex+0x1d0>
 800b5a8:	f845 bb04 	str.w	fp, [r5], #4
 800b5ac:	eba5 050a 	sub.w	r5, r5, sl
 800b5b0:	10ad      	asrs	r5, r5, #2
 800b5b2:	6125      	str	r5, [r4, #16]
 800b5b4:	4658      	mov	r0, fp
 800b5b6:	f7fe f87f 	bl	80096b8 <__hi0bits>
 800b5ba:	016d      	lsls	r5, r5, #5
 800b5bc:	f8d8 6000 	ldr.w	r6, [r8]
 800b5c0:	1a2d      	subs	r5, r5, r0
 800b5c2:	42b5      	cmp	r5, r6
 800b5c4:	dd54      	ble.n	800b670 <__gethex+0x228>
 800b5c6:	1bad      	subs	r5, r5, r6
 800b5c8:	4629      	mov	r1, r5
 800b5ca:	4620      	mov	r0, r4
 800b5cc:	f7fe fc07 	bl	8009dde <__any_on>
 800b5d0:	4681      	mov	r9, r0
 800b5d2:	b178      	cbz	r0, 800b5f4 <__gethex+0x1ac>
 800b5d4:	f04f 0901 	mov.w	r9, #1
 800b5d8:	1e6b      	subs	r3, r5, #1
 800b5da:	1159      	asrs	r1, r3, #5
 800b5dc:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800b5e0:	f003 021f 	and.w	r2, r3, #31
 800b5e4:	fa09 f202 	lsl.w	r2, r9, r2
 800b5e8:	420a      	tst	r2, r1
 800b5ea:	d003      	beq.n	800b5f4 <__gethex+0x1ac>
 800b5ec:	454b      	cmp	r3, r9
 800b5ee:	dc36      	bgt.n	800b65e <__gethex+0x216>
 800b5f0:	f04f 0902 	mov.w	r9, #2
 800b5f4:	4629      	mov	r1, r5
 800b5f6:	4620      	mov	r0, r4
 800b5f8:	f7ff febe 	bl	800b378 <rshift>
 800b5fc:	442f      	add	r7, r5
 800b5fe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b602:	42bb      	cmp	r3, r7
 800b604:	da42      	bge.n	800b68c <__gethex+0x244>
 800b606:	4621      	mov	r1, r4
 800b608:	9801      	ldr	r0, [sp, #4]
 800b60a:	f7fd ffa3 	bl	8009554 <_Bfree>
 800b60e:	2300      	movs	r3, #0
 800b610:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b612:	25a3      	movs	r5, #163	@ 0xa3
 800b614:	6013      	str	r3, [r2, #0]
 800b616:	e793      	b.n	800b540 <__gethex+0xf8>
 800b618:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800b61c:	2a2e      	cmp	r2, #46	@ 0x2e
 800b61e:	d012      	beq.n	800b646 <__gethex+0x1fe>
 800b620:	2b20      	cmp	r3, #32
 800b622:	d104      	bne.n	800b62e <__gethex+0x1e6>
 800b624:	f845 bb04 	str.w	fp, [r5], #4
 800b628:	f04f 0b00 	mov.w	fp, #0
 800b62c:	465b      	mov	r3, fp
 800b62e:	7830      	ldrb	r0, [r6, #0]
 800b630:	9303      	str	r3, [sp, #12]
 800b632:	f7ff fef4 	bl	800b41e <__hexdig_fun>
 800b636:	9b03      	ldr	r3, [sp, #12]
 800b638:	f000 000f 	and.w	r0, r0, #15
 800b63c:	4098      	lsls	r0, r3
 800b63e:	ea4b 0b00 	orr.w	fp, fp, r0
 800b642:	3304      	adds	r3, #4
 800b644:	e7ae      	b.n	800b5a4 <__gethex+0x15c>
 800b646:	45b1      	cmp	r9, r6
 800b648:	d8ea      	bhi.n	800b620 <__gethex+0x1d8>
 800b64a:	2201      	movs	r2, #1
 800b64c:	4630      	mov	r0, r6
 800b64e:	492a      	ldr	r1, [pc, #168]	@ (800b6f8 <__gethex+0x2b0>)
 800b650:	9303      	str	r3, [sp, #12]
 800b652:	f7ff fe37 	bl	800b2c4 <strncmp>
 800b656:	9b03      	ldr	r3, [sp, #12]
 800b658:	2800      	cmp	r0, #0
 800b65a:	d1e1      	bne.n	800b620 <__gethex+0x1d8>
 800b65c:	e7a2      	b.n	800b5a4 <__gethex+0x15c>
 800b65e:	4620      	mov	r0, r4
 800b660:	1ea9      	subs	r1, r5, #2
 800b662:	f7fe fbbc 	bl	8009dde <__any_on>
 800b666:	2800      	cmp	r0, #0
 800b668:	d0c2      	beq.n	800b5f0 <__gethex+0x1a8>
 800b66a:	f04f 0903 	mov.w	r9, #3
 800b66e:	e7c1      	b.n	800b5f4 <__gethex+0x1ac>
 800b670:	da09      	bge.n	800b686 <__gethex+0x23e>
 800b672:	1b75      	subs	r5, r6, r5
 800b674:	4621      	mov	r1, r4
 800b676:	462a      	mov	r2, r5
 800b678:	9801      	ldr	r0, [sp, #4]
 800b67a:	f7fe f981 	bl	8009980 <__lshift>
 800b67e:	4604      	mov	r4, r0
 800b680:	1b7f      	subs	r7, r7, r5
 800b682:	f100 0a14 	add.w	sl, r0, #20
 800b686:	f04f 0900 	mov.w	r9, #0
 800b68a:	e7b8      	b.n	800b5fe <__gethex+0x1b6>
 800b68c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b690:	42bd      	cmp	r5, r7
 800b692:	dd6f      	ble.n	800b774 <__gethex+0x32c>
 800b694:	1bed      	subs	r5, r5, r7
 800b696:	42ae      	cmp	r6, r5
 800b698:	dc34      	bgt.n	800b704 <__gethex+0x2bc>
 800b69a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b69e:	2b02      	cmp	r3, #2
 800b6a0:	d022      	beq.n	800b6e8 <__gethex+0x2a0>
 800b6a2:	2b03      	cmp	r3, #3
 800b6a4:	d024      	beq.n	800b6f0 <__gethex+0x2a8>
 800b6a6:	2b01      	cmp	r3, #1
 800b6a8:	d115      	bne.n	800b6d6 <__gethex+0x28e>
 800b6aa:	42ae      	cmp	r6, r5
 800b6ac:	d113      	bne.n	800b6d6 <__gethex+0x28e>
 800b6ae:	2e01      	cmp	r6, #1
 800b6b0:	d10b      	bne.n	800b6ca <__gethex+0x282>
 800b6b2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b6b6:	9a02      	ldr	r2, [sp, #8]
 800b6b8:	2562      	movs	r5, #98	@ 0x62
 800b6ba:	6013      	str	r3, [r2, #0]
 800b6bc:	2301      	movs	r3, #1
 800b6be:	6123      	str	r3, [r4, #16]
 800b6c0:	f8ca 3000 	str.w	r3, [sl]
 800b6c4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b6c6:	601c      	str	r4, [r3, #0]
 800b6c8:	e73a      	b.n	800b540 <__gethex+0xf8>
 800b6ca:	4620      	mov	r0, r4
 800b6cc:	1e71      	subs	r1, r6, #1
 800b6ce:	f7fe fb86 	bl	8009dde <__any_on>
 800b6d2:	2800      	cmp	r0, #0
 800b6d4:	d1ed      	bne.n	800b6b2 <__gethex+0x26a>
 800b6d6:	4621      	mov	r1, r4
 800b6d8:	9801      	ldr	r0, [sp, #4]
 800b6da:	f7fd ff3b 	bl	8009554 <_Bfree>
 800b6de:	2300      	movs	r3, #0
 800b6e0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b6e2:	2550      	movs	r5, #80	@ 0x50
 800b6e4:	6013      	str	r3, [r2, #0]
 800b6e6:	e72b      	b.n	800b540 <__gethex+0xf8>
 800b6e8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d1f3      	bne.n	800b6d6 <__gethex+0x28e>
 800b6ee:	e7e0      	b.n	800b6b2 <__gethex+0x26a>
 800b6f0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d1dd      	bne.n	800b6b2 <__gethex+0x26a>
 800b6f6:	e7ee      	b.n	800b6d6 <__gethex+0x28e>
 800b6f8:	0800c6f8 	.word	0x0800c6f8
 800b6fc:	0800c591 	.word	0x0800c591
 800b700:	0800c8a6 	.word	0x0800c8a6
 800b704:	1e6f      	subs	r7, r5, #1
 800b706:	f1b9 0f00 	cmp.w	r9, #0
 800b70a:	d130      	bne.n	800b76e <__gethex+0x326>
 800b70c:	b127      	cbz	r7, 800b718 <__gethex+0x2d0>
 800b70e:	4639      	mov	r1, r7
 800b710:	4620      	mov	r0, r4
 800b712:	f7fe fb64 	bl	8009dde <__any_on>
 800b716:	4681      	mov	r9, r0
 800b718:	2301      	movs	r3, #1
 800b71a:	4629      	mov	r1, r5
 800b71c:	1b76      	subs	r6, r6, r5
 800b71e:	2502      	movs	r5, #2
 800b720:	117a      	asrs	r2, r7, #5
 800b722:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800b726:	f007 071f 	and.w	r7, r7, #31
 800b72a:	40bb      	lsls	r3, r7
 800b72c:	4213      	tst	r3, r2
 800b72e:	4620      	mov	r0, r4
 800b730:	bf18      	it	ne
 800b732:	f049 0902 	orrne.w	r9, r9, #2
 800b736:	f7ff fe1f 	bl	800b378 <rshift>
 800b73a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800b73e:	f1b9 0f00 	cmp.w	r9, #0
 800b742:	d047      	beq.n	800b7d4 <__gethex+0x38c>
 800b744:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b748:	2b02      	cmp	r3, #2
 800b74a:	d015      	beq.n	800b778 <__gethex+0x330>
 800b74c:	2b03      	cmp	r3, #3
 800b74e:	d017      	beq.n	800b780 <__gethex+0x338>
 800b750:	2b01      	cmp	r3, #1
 800b752:	d109      	bne.n	800b768 <__gethex+0x320>
 800b754:	f019 0f02 	tst.w	r9, #2
 800b758:	d006      	beq.n	800b768 <__gethex+0x320>
 800b75a:	f8da 3000 	ldr.w	r3, [sl]
 800b75e:	ea49 0903 	orr.w	r9, r9, r3
 800b762:	f019 0f01 	tst.w	r9, #1
 800b766:	d10e      	bne.n	800b786 <__gethex+0x33e>
 800b768:	f045 0510 	orr.w	r5, r5, #16
 800b76c:	e032      	b.n	800b7d4 <__gethex+0x38c>
 800b76e:	f04f 0901 	mov.w	r9, #1
 800b772:	e7d1      	b.n	800b718 <__gethex+0x2d0>
 800b774:	2501      	movs	r5, #1
 800b776:	e7e2      	b.n	800b73e <__gethex+0x2f6>
 800b778:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b77a:	f1c3 0301 	rsb	r3, r3, #1
 800b77e:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b780:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b782:	2b00      	cmp	r3, #0
 800b784:	d0f0      	beq.n	800b768 <__gethex+0x320>
 800b786:	f04f 0c00 	mov.w	ip, #0
 800b78a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b78e:	f104 0314 	add.w	r3, r4, #20
 800b792:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b796:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b79a:	4618      	mov	r0, r3
 800b79c:	f853 2b04 	ldr.w	r2, [r3], #4
 800b7a0:	f1b2 3fff 	cmp.w	r2, #4294967295
 800b7a4:	d01b      	beq.n	800b7de <__gethex+0x396>
 800b7a6:	3201      	adds	r2, #1
 800b7a8:	6002      	str	r2, [r0, #0]
 800b7aa:	2d02      	cmp	r5, #2
 800b7ac:	f104 0314 	add.w	r3, r4, #20
 800b7b0:	d13c      	bne.n	800b82c <__gethex+0x3e4>
 800b7b2:	f8d8 2000 	ldr.w	r2, [r8]
 800b7b6:	3a01      	subs	r2, #1
 800b7b8:	42b2      	cmp	r2, r6
 800b7ba:	d109      	bne.n	800b7d0 <__gethex+0x388>
 800b7bc:	2201      	movs	r2, #1
 800b7be:	1171      	asrs	r1, r6, #5
 800b7c0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b7c4:	f006 061f 	and.w	r6, r6, #31
 800b7c8:	fa02 f606 	lsl.w	r6, r2, r6
 800b7cc:	421e      	tst	r6, r3
 800b7ce:	d13a      	bne.n	800b846 <__gethex+0x3fe>
 800b7d0:	f045 0520 	orr.w	r5, r5, #32
 800b7d4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b7d6:	601c      	str	r4, [r3, #0]
 800b7d8:	9b02      	ldr	r3, [sp, #8]
 800b7da:	601f      	str	r7, [r3, #0]
 800b7dc:	e6b0      	b.n	800b540 <__gethex+0xf8>
 800b7de:	4299      	cmp	r1, r3
 800b7e0:	f843 cc04 	str.w	ip, [r3, #-4]
 800b7e4:	d8d9      	bhi.n	800b79a <__gethex+0x352>
 800b7e6:	68a3      	ldr	r3, [r4, #8]
 800b7e8:	459b      	cmp	fp, r3
 800b7ea:	db17      	blt.n	800b81c <__gethex+0x3d4>
 800b7ec:	6861      	ldr	r1, [r4, #4]
 800b7ee:	9801      	ldr	r0, [sp, #4]
 800b7f0:	3101      	adds	r1, #1
 800b7f2:	f7fd fe6f 	bl	80094d4 <_Balloc>
 800b7f6:	4681      	mov	r9, r0
 800b7f8:	b918      	cbnz	r0, 800b802 <__gethex+0x3ba>
 800b7fa:	4602      	mov	r2, r0
 800b7fc:	2184      	movs	r1, #132	@ 0x84
 800b7fe:	4b19      	ldr	r3, [pc, #100]	@ (800b864 <__gethex+0x41c>)
 800b800:	e6c5      	b.n	800b58e <__gethex+0x146>
 800b802:	6922      	ldr	r2, [r4, #16]
 800b804:	f104 010c 	add.w	r1, r4, #12
 800b808:	3202      	adds	r2, #2
 800b80a:	0092      	lsls	r2, r2, #2
 800b80c:	300c      	adds	r0, #12
 800b80e:	f7fc ff00 	bl	8008612 <memcpy>
 800b812:	4621      	mov	r1, r4
 800b814:	9801      	ldr	r0, [sp, #4]
 800b816:	f7fd fe9d 	bl	8009554 <_Bfree>
 800b81a:	464c      	mov	r4, r9
 800b81c:	6923      	ldr	r3, [r4, #16]
 800b81e:	1c5a      	adds	r2, r3, #1
 800b820:	6122      	str	r2, [r4, #16]
 800b822:	2201      	movs	r2, #1
 800b824:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b828:	615a      	str	r2, [r3, #20]
 800b82a:	e7be      	b.n	800b7aa <__gethex+0x362>
 800b82c:	6922      	ldr	r2, [r4, #16]
 800b82e:	455a      	cmp	r2, fp
 800b830:	dd0b      	ble.n	800b84a <__gethex+0x402>
 800b832:	2101      	movs	r1, #1
 800b834:	4620      	mov	r0, r4
 800b836:	f7ff fd9f 	bl	800b378 <rshift>
 800b83a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b83e:	3701      	adds	r7, #1
 800b840:	42bb      	cmp	r3, r7
 800b842:	f6ff aee0 	blt.w	800b606 <__gethex+0x1be>
 800b846:	2501      	movs	r5, #1
 800b848:	e7c2      	b.n	800b7d0 <__gethex+0x388>
 800b84a:	f016 061f 	ands.w	r6, r6, #31
 800b84e:	d0fa      	beq.n	800b846 <__gethex+0x3fe>
 800b850:	4453      	add	r3, sl
 800b852:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800b856:	f7fd ff2f 	bl	80096b8 <__hi0bits>
 800b85a:	f1c6 0620 	rsb	r6, r6, #32
 800b85e:	42b0      	cmp	r0, r6
 800b860:	dbe7      	blt.n	800b832 <__gethex+0x3ea>
 800b862:	e7f0      	b.n	800b846 <__gethex+0x3fe>
 800b864:	0800c591 	.word	0x0800c591

0800b868 <L_shift>:
 800b868:	f1c2 0208 	rsb	r2, r2, #8
 800b86c:	0092      	lsls	r2, r2, #2
 800b86e:	b570      	push	{r4, r5, r6, lr}
 800b870:	f1c2 0620 	rsb	r6, r2, #32
 800b874:	6843      	ldr	r3, [r0, #4]
 800b876:	6804      	ldr	r4, [r0, #0]
 800b878:	fa03 f506 	lsl.w	r5, r3, r6
 800b87c:	432c      	orrs	r4, r5
 800b87e:	40d3      	lsrs	r3, r2
 800b880:	6004      	str	r4, [r0, #0]
 800b882:	f840 3f04 	str.w	r3, [r0, #4]!
 800b886:	4288      	cmp	r0, r1
 800b888:	d3f4      	bcc.n	800b874 <L_shift+0xc>
 800b88a:	bd70      	pop	{r4, r5, r6, pc}

0800b88c <__match>:
 800b88c:	b530      	push	{r4, r5, lr}
 800b88e:	6803      	ldr	r3, [r0, #0]
 800b890:	3301      	adds	r3, #1
 800b892:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b896:	b914      	cbnz	r4, 800b89e <__match+0x12>
 800b898:	6003      	str	r3, [r0, #0]
 800b89a:	2001      	movs	r0, #1
 800b89c:	bd30      	pop	{r4, r5, pc}
 800b89e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b8a2:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800b8a6:	2d19      	cmp	r5, #25
 800b8a8:	bf98      	it	ls
 800b8aa:	3220      	addls	r2, #32
 800b8ac:	42a2      	cmp	r2, r4
 800b8ae:	d0f0      	beq.n	800b892 <__match+0x6>
 800b8b0:	2000      	movs	r0, #0
 800b8b2:	e7f3      	b.n	800b89c <__match+0x10>

0800b8b4 <__hexnan>:
 800b8b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8b8:	2500      	movs	r5, #0
 800b8ba:	680b      	ldr	r3, [r1, #0]
 800b8bc:	4682      	mov	sl, r0
 800b8be:	115e      	asrs	r6, r3, #5
 800b8c0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b8c4:	f013 031f 	ands.w	r3, r3, #31
 800b8c8:	bf18      	it	ne
 800b8ca:	3604      	addne	r6, #4
 800b8cc:	1f37      	subs	r7, r6, #4
 800b8ce:	4690      	mov	r8, r2
 800b8d0:	46b9      	mov	r9, r7
 800b8d2:	463c      	mov	r4, r7
 800b8d4:	46ab      	mov	fp, r5
 800b8d6:	b087      	sub	sp, #28
 800b8d8:	6801      	ldr	r1, [r0, #0]
 800b8da:	9301      	str	r3, [sp, #4]
 800b8dc:	f846 5c04 	str.w	r5, [r6, #-4]
 800b8e0:	9502      	str	r5, [sp, #8]
 800b8e2:	784a      	ldrb	r2, [r1, #1]
 800b8e4:	1c4b      	adds	r3, r1, #1
 800b8e6:	9303      	str	r3, [sp, #12]
 800b8e8:	b342      	cbz	r2, 800b93c <__hexnan+0x88>
 800b8ea:	4610      	mov	r0, r2
 800b8ec:	9105      	str	r1, [sp, #20]
 800b8ee:	9204      	str	r2, [sp, #16]
 800b8f0:	f7ff fd95 	bl	800b41e <__hexdig_fun>
 800b8f4:	2800      	cmp	r0, #0
 800b8f6:	d151      	bne.n	800b99c <__hexnan+0xe8>
 800b8f8:	9a04      	ldr	r2, [sp, #16]
 800b8fa:	9905      	ldr	r1, [sp, #20]
 800b8fc:	2a20      	cmp	r2, #32
 800b8fe:	d818      	bhi.n	800b932 <__hexnan+0x7e>
 800b900:	9b02      	ldr	r3, [sp, #8]
 800b902:	459b      	cmp	fp, r3
 800b904:	dd13      	ble.n	800b92e <__hexnan+0x7a>
 800b906:	454c      	cmp	r4, r9
 800b908:	d206      	bcs.n	800b918 <__hexnan+0x64>
 800b90a:	2d07      	cmp	r5, #7
 800b90c:	dc04      	bgt.n	800b918 <__hexnan+0x64>
 800b90e:	462a      	mov	r2, r5
 800b910:	4649      	mov	r1, r9
 800b912:	4620      	mov	r0, r4
 800b914:	f7ff ffa8 	bl	800b868 <L_shift>
 800b918:	4544      	cmp	r4, r8
 800b91a:	d952      	bls.n	800b9c2 <__hexnan+0x10e>
 800b91c:	2300      	movs	r3, #0
 800b91e:	f1a4 0904 	sub.w	r9, r4, #4
 800b922:	f844 3c04 	str.w	r3, [r4, #-4]
 800b926:	461d      	mov	r5, r3
 800b928:	464c      	mov	r4, r9
 800b92a:	f8cd b008 	str.w	fp, [sp, #8]
 800b92e:	9903      	ldr	r1, [sp, #12]
 800b930:	e7d7      	b.n	800b8e2 <__hexnan+0x2e>
 800b932:	2a29      	cmp	r2, #41	@ 0x29
 800b934:	d157      	bne.n	800b9e6 <__hexnan+0x132>
 800b936:	3102      	adds	r1, #2
 800b938:	f8ca 1000 	str.w	r1, [sl]
 800b93c:	f1bb 0f00 	cmp.w	fp, #0
 800b940:	d051      	beq.n	800b9e6 <__hexnan+0x132>
 800b942:	454c      	cmp	r4, r9
 800b944:	d206      	bcs.n	800b954 <__hexnan+0xa0>
 800b946:	2d07      	cmp	r5, #7
 800b948:	dc04      	bgt.n	800b954 <__hexnan+0xa0>
 800b94a:	462a      	mov	r2, r5
 800b94c:	4649      	mov	r1, r9
 800b94e:	4620      	mov	r0, r4
 800b950:	f7ff ff8a 	bl	800b868 <L_shift>
 800b954:	4544      	cmp	r4, r8
 800b956:	d936      	bls.n	800b9c6 <__hexnan+0x112>
 800b958:	4623      	mov	r3, r4
 800b95a:	f1a8 0204 	sub.w	r2, r8, #4
 800b95e:	f853 1b04 	ldr.w	r1, [r3], #4
 800b962:	429f      	cmp	r7, r3
 800b964:	f842 1f04 	str.w	r1, [r2, #4]!
 800b968:	d2f9      	bcs.n	800b95e <__hexnan+0xaa>
 800b96a:	1b3b      	subs	r3, r7, r4
 800b96c:	f023 0303 	bic.w	r3, r3, #3
 800b970:	3304      	adds	r3, #4
 800b972:	3401      	adds	r4, #1
 800b974:	3e03      	subs	r6, #3
 800b976:	42b4      	cmp	r4, r6
 800b978:	bf88      	it	hi
 800b97a:	2304      	movhi	r3, #4
 800b97c:	2200      	movs	r2, #0
 800b97e:	4443      	add	r3, r8
 800b980:	f843 2b04 	str.w	r2, [r3], #4
 800b984:	429f      	cmp	r7, r3
 800b986:	d2fb      	bcs.n	800b980 <__hexnan+0xcc>
 800b988:	683b      	ldr	r3, [r7, #0]
 800b98a:	b91b      	cbnz	r3, 800b994 <__hexnan+0xe0>
 800b98c:	4547      	cmp	r7, r8
 800b98e:	d128      	bne.n	800b9e2 <__hexnan+0x12e>
 800b990:	2301      	movs	r3, #1
 800b992:	603b      	str	r3, [r7, #0]
 800b994:	2005      	movs	r0, #5
 800b996:	b007      	add	sp, #28
 800b998:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b99c:	3501      	adds	r5, #1
 800b99e:	2d08      	cmp	r5, #8
 800b9a0:	f10b 0b01 	add.w	fp, fp, #1
 800b9a4:	dd06      	ble.n	800b9b4 <__hexnan+0x100>
 800b9a6:	4544      	cmp	r4, r8
 800b9a8:	d9c1      	bls.n	800b92e <__hexnan+0x7a>
 800b9aa:	2300      	movs	r3, #0
 800b9ac:	2501      	movs	r5, #1
 800b9ae:	f844 3c04 	str.w	r3, [r4, #-4]
 800b9b2:	3c04      	subs	r4, #4
 800b9b4:	6822      	ldr	r2, [r4, #0]
 800b9b6:	f000 000f 	and.w	r0, r0, #15
 800b9ba:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800b9be:	6020      	str	r0, [r4, #0]
 800b9c0:	e7b5      	b.n	800b92e <__hexnan+0x7a>
 800b9c2:	2508      	movs	r5, #8
 800b9c4:	e7b3      	b.n	800b92e <__hexnan+0x7a>
 800b9c6:	9b01      	ldr	r3, [sp, #4]
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d0dd      	beq.n	800b988 <__hexnan+0xd4>
 800b9cc:	f04f 32ff 	mov.w	r2, #4294967295
 800b9d0:	f1c3 0320 	rsb	r3, r3, #32
 800b9d4:	40da      	lsrs	r2, r3
 800b9d6:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800b9da:	4013      	ands	r3, r2
 800b9dc:	f846 3c04 	str.w	r3, [r6, #-4]
 800b9e0:	e7d2      	b.n	800b988 <__hexnan+0xd4>
 800b9e2:	3f04      	subs	r7, #4
 800b9e4:	e7d0      	b.n	800b988 <__hexnan+0xd4>
 800b9e6:	2004      	movs	r0, #4
 800b9e8:	e7d5      	b.n	800b996 <__hexnan+0xe2>

0800b9ea <__ascii_mbtowc>:
 800b9ea:	b082      	sub	sp, #8
 800b9ec:	b901      	cbnz	r1, 800b9f0 <__ascii_mbtowc+0x6>
 800b9ee:	a901      	add	r1, sp, #4
 800b9f0:	b142      	cbz	r2, 800ba04 <__ascii_mbtowc+0x1a>
 800b9f2:	b14b      	cbz	r3, 800ba08 <__ascii_mbtowc+0x1e>
 800b9f4:	7813      	ldrb	r3, [r2, #0]
 800b9f6:	600b      	str	r3, [r1, #0]
 800b9f8:	7812      	ldrb	r2, [r2, #0]
 800b9fa:	1e10      	subs	r0, r2, #0
 800b9fc:	bf18      	it	ne
 800b9fe:	2001      	movne	r0, #1
 800ba00:	b002      	add	sp, #8
 800ba02:	4770      	bx	lr
 800ba04:	4610      	mov	r0, r2
 800ba06:	e7fb      	b.n	800ba00 <__ascii_mbtowc+0x16>
 800ba08:	f06f 0001 	mvn.w	r0, #1
 800ba0c:	e7f8      	b.n	800ba00 <__ascii_mbtowc+0x16>

0800ba0e <_realloc_r>:
 800ba0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba12:	4680      	mov	r8, r0
 800ba14:	4615      	mov	r5, r2
 800ba16:	460c      	mov	r4, r1
 800ba18:	b921      	cbnz	r1, 800ba24 <_realloc_r+0x16>
 800ba1a:	4611      	mov	r1, r2
 800ba1c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ba20:	f7fd bccc 	b.w	80093bc <_malloc_r>
 800ba24:	b92a      	cbnz	r2, 800ba32 <_realloc_r+0x24>
 800ba26:	f7fd fc57 	bl	80092d8 <_free_r>
 800ba2a:	2400      	movs	r4, #0
 800ba2c:	4620      	mov	r0, r4
 800ba2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba32:	f000 f8c4 	bl	800bbbe <_malloc_usable_size_r>
 800ba36:	4285      	cmp	r5, r0
 800ba38:	4606      	mov	r6, r0
 800ba3a:	d802      	bhi.n	800ba42 <_realloc_r+0x34>
 800ba3c:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800ba40:	d8f4      	bhi.n	800ba2c <_realloc_r+0x1e>
 800ba42:	4629      	mov	r1, r5
 800ba44:	4640      	mov	r0, r8
 800ba46:	f7fd fcb9 	bl	80093bc <_malloc_r>
 800ba4a:	4607      	mov	r7, r0
 800ba4c:	2800      	cmp	r0, #0
 800ba4e:	d0ec      	beq.n	800ba2a <_realloc_r+0x1c>
 800ba50:	42b5      	cmp	r5, r6
 800ba52:	462a      	mov	r2, r5
 800ba54:	4621      	mov	r1, r4
 800ba56:	bf28      	it	cs
 800ba58:	4632      	movcs	r2, r6
 800ba5a:	f7fc fdda 	bl	8008612 <memcpy>
 800ba5e:	4621      	mov	r1, r4
 800ba60:	4640      	mov	r0, r8
 800ba62:	f7fd fc39 	bl	80092d8 <_free_r>
 800ba66:	463c      	mov	r4, r7
 800ba68:	e7e0      	b.n	800ba2c <_realloc_r+0x1e>

0800ba6a <__ascii_wctomb>:
 800ba6a:	4603      	mov	r3, r0
 800ba6c:	4608      	mov	r0, r1
 800ba6e:	b141      	cbz	r1, 800ba82 <__ascii_wctomb+0x18>
 800ba70:	2aff      	cmp	r2, #255	@ 0xff
 800ba72:	d904      	bls.n	800ba7e <__ascii_wctomb+0x14>
 800ba74:	228a      	movs	r2, #138	@ 0x8a
 800ba76:	f04f 30ff 	mov.w	r0, #4294967295
 800ba7a:	601a      	str	r2, [r3, #0]
 800ba7c:	4770      	bx	lr
 800ba7e:	2001      	movs	r0, #1
 800ba80:	700a      	strb	r2, [r1, #0]
 800ba82:	4770      	bx	lr

0800ba84 <fiprintf>:
 800ba84:	b40e      	push	{r1, r2, r3}
 800ba86:	b503      	push	{r0, r1, lr}
 800ba88:	4601      	mov	r1, r0
 800ba8a:	ab03      	add	r3, sp, #12
 800ba8c:	4805      	ldr	r0, [pc, #20]	@ (800baa4 <fiprintf+0x20>)
 800ba8e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ba92:	6800      	ldr	r0, [r0, #0]
 800ba94:	9301      	str	r3, [sp, #4]
 800ba96:	f7ff f9c1 	bl	800ae1c <_vfiprintf_r>
 800ba9a:	b002      	add	sp, #8
 800ba9c:	f85d eb04 	ldr.w	lr, [sp], #4
 800baa0:	b003      	add	sp, #12
 800baa2:	4770      	bx	lr
 800baa4:	2000004c 	.word	0x2000004c

0800baa8 <__swhatbuf_r>:
 800baa8:	b570      	push	{r4, r5, r6, lr}
 800baaa:	460c      	mov	r4, r1
 800baac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bab0:	4615      	mov	r5, r2
 800bab2:	2900      	cmp	r1, #0
 800bab4:	461e      	mov	r6, r3
 800bab6:	b096      	sub	sp, #88	@ 0x58
 800bab8:	da0c      	bge.n	800bad4 <__swhatbuf_r+0x2c>
 800baba:	89a3      	ldrh	r3, [r4, #12]
 800babc:	2100      	movs	r1, #0
 800babe:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800bac2:	bf14      	ite	ne
 800bac4:	2340      	movne	r3, #64	@ 0x40
 800bac6:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800baca:	2000      	movs	r0, #0
 800bacc:	6031      	str	r1, [r6, #0]
 800bace:	602b      	str	r3, [r5, #0]
 800bad0:	b016      	add	sp, #88	@ 0x58
 800bad2:	bd70      	pop	{r4, r5, r6, pc}
 800bad4:	466a      	mov	r2, sp
 800bad6:	f000 f849 	bl	800bb6c <_fstat_r>
 800bada:	2800      	cmp	r0, #0
 800badc:	dbed      	blt.n	800baba <__swhatbuf_r+0x12>
 800bade:	9901      	ldr	r1, [sp, #4]
 800bae0:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800bae4:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800bae8:	4259      	negs	r1, r3
 800baea:	4159      	adcs	r1, r3
 800baec:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800baf0:	e7eb      	b.n	800baca <__swhatbuf_r+0x22>

0800baf2 <__smakebuf_r>:
 800baf2:	898b      	ldrh	r3, [r1, #12]
 800baf4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800baf6:	079d      	lsls	r5, r3, #30
 800baf8:	4606      	mov	r6, r0
 800bafa:	460c      	mov	r4, r1
 800bafc:	d507      	bpl.n	800bb0e <__smakebuf_r+0x1c>
 800bafe:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800bb02:	6023      	str	r3, [r4, #0]
 800bb04:	6123      	str	r3, [r4, #16]
 800bb06:	2301      	movs	r3, #1
 800bb08:	6163      	str	r3, [r4, #20]
 800bb0a:	b003      	add	sp, #12
 800bb0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bb0e:	466a      	mov	r2, sp
 800bb10:	ab01      	add	r3, sp, #4
 800bb12:	f7ff ffc9 	bl	800baa8 <__swhatbuf_r>
 800bb16:	9f00      	ldr	r7, [sp, #0]
 800bb18:	4605      	mov	r5, r0
 800bb1a:	4639      	mov	r1, r7
 800bb1c:	4630      	mov	r0, r6
 800bb1e:	f7fd fc4d 	bl	80093bc <_malloc_r>
 800bb22:	b948      	cbnz	r0, 800bb38 <__smakebuf_r+0x46>
 800bb24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bb28:	059a      	lsls	r2, r3, #22
 800bb2a:	d4ee      	bmi.n	800bb0a <__smakebuf_r+0x18>
 800bb2c:	f023 0303 	bic.w	r3, r3, #3
 800bb30:	f043 0302 	orr.w	r3, r3, #2
 800bb34:	81a3      	strh	r3, [r4, #12]
 800bb36:	e7e2      	b.n	800bafe <__smakebuf_r+0xc>
 800bb38:	89a3      	ldrh	r3, [r4, #12]
 800bb3a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800bb3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bb42:	81a3      	strh	r3, [r4, #12]
 800bb44:	9b01      	ldr	r3, [sp, #4]
 800bb46:	6020      	str	r0, [r4, #0]
 800bb48:	b15b      	cbz	r3, 800bb62 <__smakebuf_r+0x70>
 800bb4a:	4630      	mov	r0, r6
 800bb4c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bb50:	f000 f81e 	bl	800bb90 <_isatty_r>
 800bb54:	b128      	cbz	r0, 800bb62 <__smakebuf_r+0x70>
 800bb56:	89a3      	ldrh	r3, [r4, #12]
 800bb58:	f023 0303 	bic.w	r3, r3, #3
 800bb5c:	f043 0301 	orr.w	r3, r3, #1
 800bb60:	81a3      	strh	r3, [r4, #12]
 800bb62:	89a3      	ldrh	r3, [r4, #12]
 800bb64:	431d      	orrs	r5, r3
 800bb66:	81a5      	strh	r5, [r4, #12]
 800bb68:	e7cf      	b.n	800bb0a <__smakebuf_r+0x18>
	...

0800bb6c <_fstat_r>:
 800bb6c:	b538      	push	{r3, r4, r5, lr}
 800bb6e:	2300      	movs	r3, #0
 800bb70:	4d06      	ldr	r5, [pc, #24]	@ (800bb8c <_fstat_r+0x20>)
 800bb72:	4604      	mov	r4, r0
 800bb74:	4608      	mov	r0, r1
 800bb76:	4611      	mov	r1, r2
 800bb78:	602b      	str	r3, [r5, #0]
 800bb7a:	f7f6 f837 	bl	8001bec <_fstat>
 800bb7e:	1c43      	adds	r3, r0, #1
 800bb80:	d102      	bne.n	800bb88 <_fstat_r+0x1c>
 800bb82:	682b      	ldr	r3, [r5, #0]
 800bb84:	b103      	cbz	r3, 800bb88 <_fstat_r+0x1c>
 800bb86:	6023      	str	r3, [r4, #0]
 800bb88:	bd38      	pop	{r3, r4, r5, pc}
 800bb8a:	bf00      	nop
 800bb8c:	20000968 	.word	0x20000968

0800bb90 <_isatty_r>:
 800bb90:	b538      	push	{r3, r4, r5, lr}
 800bb92:	2300      	movs	r3, #0
 800bb94:	4d05      	ldr	r5, [pc, #20]	@ (800bbac <_isatty_r+0x1c>)
 800bb96:	4604      	mov	r4, r0
 800bb98:	4608      	mov	r0, r1
 800bb9a:	602b      	str	r3, [r5, #0]
 800bb9c:	f7f6 f835 	bl	8001c0a <_isatty>
 800bba0:	1c43      	adds	r3, r0, #1
 800bba2:	d102      	bne.n	800bbaa <_isatty_r+0x1a>
 800bba4:	682b      	ldr	r3, [r5, #0]
 800bba6:	b103      	cbz	r3, 800bbaa <_isatty_r+0x1a>
 800bba8:	6023      	str	r3, [r4, #0]
 800bbaa:	bd38      	pop	{r3, r4, r5, pc}
 800bbac:	20000968 	.word	0x20000968

0800bbb0 <abort>:
 800bbb0:	2006      	movs	r0, #6
 800bbb2:	b508      	push	{r3, lr}
 800bbb4:	f000 f834 	bl	800bc20 <raise>
 800bbb8:	2001      	movs	r0, #1
 800bbba:	f7f5 ffc8 	bl	8001b4e <_exit>

0800bbbe <_malloc_usable_size_r>:
 800bbbe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bbc2:	1f18      	subs	r0, r3, #4
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	bfbc      	itt	lt
 800bbc8:	580b      	ldrlt	r3, [r1, r0]
 800bbca:	18c0      	addlt	r0, r0, r3
 800bbcc:	4770      	bx	lr

0800bbce <_raise_r>:
 800bbce:	291f      	cmp	r1, #31
 800bbd0:	b538      	push	{r3, r4, r5, lr}
 800bbd2:	4605      	mov	r5, r0
 800bbd4:	460c      	mov	r4, r1
 800bbd6:	d904      	bls.n	800bbe2 <_raise_r+0x14>
 800bbd8:	2316      	movs	r3, #22
 800bbda:	6003      	str	r3, [r0, #0]
 800bbdc:	f04f 30ff 	mov.w	r0, #4294967295
 800bbe0:	bd38      	pop	{r3, r4, r5, pc}
 800bbe2:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800bbe4:	b112      	cbz	r2, 800bbec <_raise_r+0x1e>
 800bbe6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bbea:	b94b      	cbnz	r3, 800bc00 <_raise_r+0x32>
 800bbec:	4628      	mov	r0, r5
 800bbee:	f000 f831 	bl	800bc54 <_getpid_r>
 800bbf2:	4622      	mov	r2, r4
 800bbf4:	4601      	mov	r1, r0
 800bbf6:	4628      	mov	r0, r5
 800bbf8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bbfc:	f000 b818 	b.w	800bc30 <_kill_r>
 800bc00:	2b01      	cmp	r3, #1
 800bc02:	d00a      	beq.n	800bc1a <_raise_r+0x4c>
 800bc04:	1c59      	adds	r1, r3, #1
 800bc06:	d103      	bne.n	800bc10 <_raise_r+0x42>
 800bc08:	2316      	movs	r3, #22
 800bc0a:	6003      	str	r3, [r0, #0]
 800bc0c:	2001      	movs	r0, #1
 800bc0e:	e7e7      	b.n	800bbe0 <_raise_r+0x12>
 800bc10:	2100      	movs	r1, #0
 800bc12:	4620      	mov	r0, r4
 800bc14:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800bc18:	4798      	blx	r3
 800bc1a:	2000      	movs	r0, #0
 800bc1c:	e7e0      	b.n	800bbe0 <_raise_r+0x12>
	...

0800bc20 <raise>:
 800bc20:	4b02      	ldr	r3, [pc, #8]	@ (800bc2c <raise+0xc>)
 800bc22:	4601      	mov	r1, r0
 800bc24:	6818      	ldr	r0, [r3, #0]
 800bc26:	f7ff bfd2 	b.w	800bbce <_raise_r>
 800bc2a:	bf00      	nop
 800bc2c:	2000004c 	.word	0x2000004c

0800bc30 <_kill_r>:
 800bc30:	b538      	push	{r3, r4, r5, lr}
 800bc32:	2300      	movs	r3, #0
 800bc34:	4d06      	ldr	r5, [pc, #24]	@ (800bc50 <_kill_r+0x20>)
 800bc36:	4604      	mov	r4, r0
 800bc38:	4608      	mov	r0, r1
 800bc3a:	4611      	mov	r1, r2
 800bc3c:	602b      	str	r3, [r5, #0]
 800bc3e:	f7f5 ff76 	bl	8001b2e <_kill>
 800bc42:	1c43      	adds	r3, r0, #1
 800bc44:	d102      	bne.n	800bc4c <_kill_r+0x1c>
 800bc46:	682b      	ldr	r3, [r5, #0]
 800bc48:	b103      	cbz	r3, 800bc4c <_kill_r+0x1c>
 800bc4a:	6023      	str	r3, [r4, #0]
 800bc4c:	bd38      	pop	{r3, r4, r5, pc}
 800bc4e:	bf00      	nop
 800bc50:	20000968 	.word	0x20000968

0800bc54 <_getpid_r>:
 800bc54:	f7f5 bf64 	b.w	8001b20 <_getpid>

0800bc58 <_init>:
 800bc58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc5a:	bf00      	nop
 800bc5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc5e:	bc08      	pop	{r3}
 800bc60:	469e      	mov	lr, r3
 800bc62:	4770      	bx	lr

0800bc64 <_fini>:
 800bc64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc66:	bf00      	nop
 800bc68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc6a:	bc08      	pop	{r3}
 800bc6c:	469e      	mov	lr, r3
 800bc6e:	4770      	bx	lr
