
dc_load_f103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d3f8  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001ac0  0800d508  0800d508  0000e508  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800efc8  0800efc8  000101fc  2**0
                  CONTENTS
  4 .ARM          00000008  0800efc8  0800efc8  0000ffc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800efd0  0800efd0  000101fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800efd0  0800efd0  0000ffd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800efd4  0800efd4  0000ffd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  0800efd8  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000818  200001fc  0800f1d4  000101fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000a14  0800f1d4  00010a14  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000101fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015c80  00000000  00000000  00010225  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000039dc  00000000  00000000  00025ea5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001480  00000000  00000000  00029888  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fe8  00000000  00000000  0002ad08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b89a  00000000  00000000  0002bcf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b53d  00000000  00000000  0004758a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009648e  00000000  00000000  00062ac7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f8f55  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006aa4  00000000  00000000  000f8f98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  000ffa3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001fc 	.word	0x200001fc
 800012c:	00000000 	.word	0x00000000
 8000130:	0800d4f0 	.word	0x0800d4f0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000200 	.word	0x20000200
 800014c:	0800d4f0 	.word	0x0800d4f0

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	@ 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000dd6:	2afd      	cmp	r2, #253	@ 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	@ 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	@ 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	@ 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__gesf2>:
 8001024:	f04f 3cff 	mov.w	ip, #4294967295
 8001028:	e006      	b.n	8001038 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__lesf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	e002      	b.n	8001038 <__cmpsf2+0x4>
 8001032:	bf00      	nop

08001034 <__cmpsf2>:
 8001034:	f04f 0c01 	mov.w	ip, #1
 8001038:	f84d cd04 	str.w	ip, [sp, #-4]!
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	bf18      	it	ne
 800104a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104e:	d011      	beq.n	8001074 <__cmpsf2+0x40>
 8001050:	b001      	add	sp, #4
 8001052:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001056:	bf18      	it	ne
 8001058:	ea90 0f01 	teqne	r0, r1
 800105c:	bf58      	it	pl
 800105e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001062:	bf88      	it	hi
 8001064:	17c8      	asrhi	r0, r1, #31
 8001066:	bf38      	it	cc
 8001068:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800106c:	bf18      	it	ne
 800106e:	f040 0001 	orrne.w	r0, r0, #1
 8001072:	4770      	bx	lr
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__cmpsf2+0x4c>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d105      	bne.n	800108c <__cmpsf2+0x58>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d1e4      	bne.n	8001050 <__cmpsf2+0x1c>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d0e1      	beq.n	8001050 <__cmpsf2+0x1c>
 800108c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <__aeabi_cfrcmple>:
 8001094:	4684      	mov	ip, r0
 8001096:	4608      	mov	r0, r1
 8001098:	4661      	mov	r1, ip
 800109a:	e7ff      	b.n	800109c <__aeabi_cfcmpeq>

0800109c <__aeabi_cfcmpeq>:
 800109c:	b50f      	push	{r0, r1, r2, r3, lr}
 800109e:	f7ff ffc9 	bl	8001034 <__cmpsf2>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	bf48      	it	mi
 80010a6:	f110 0f00 	cmnmi.w	r0, #0
 80010aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ac <__aeabi_fcmpeq>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff fff4 	bl	800109c <__aeabi_cfcmpeq>
 80010b4:	bf0c      	ite	eq
 80010b6:	2001      	moveq	r0, #1
 80010b8:	2000      	movne	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmplt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffea 	bl	800109c <__aeabi_cfcmpeq>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmple>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffe0 	bl	800109c <__aeabi_cfcmpeq>
 80010dc:	bf94      	ite	ls
 80010de:	2001      	movls	r0, #1
 80010e0:	2000      	movhi	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmpge>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffd2 	bl	8001094 <__aeabi_cfrcmple>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpgt>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffc8 	bl	8001094 <__aeabi_cfrcmple>
 8001104:	bf34      	ite	cc
 8001106:	2001      	movcc	r0, #1
 8001108:	2000      	movcs	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_f2iz>:
 8001110:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001114:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8001118:	d30f      	bcc.n	800113a <__aeabi_f2iz+0x2a>
 800111a:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800111e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001122:	d90d      	bls.n	8001140 <__aeabi_f2iz+0x30>
 8001124:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001128:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800112c:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8001130:	fa23 f002 	lsr.w	r0, r3, r2
 8001134:	bf18      	it	ne
 8001136:	4240      	negne	r0, r0
 8001138:	4770      	bx	lr
 800113a:	f04f 0000 	mov.w	r0, #0
 800113e:	4770      	bx	lr
 8001140:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001144:	d101      	bne.n	800114a <__aeabi_f2iz+0x3a>
 8001146:	0242      	lsls	r2, r0, #9
 8001148:	d105      	bne.n	8001156 <__aeabi_f2iz+0x46>
 800114a:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 800114e:	bf08      	it	eq
 8001150:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8001154:	4770      	bx	lr
 8001156:	f04f 0000 	mov.w	r0, #0
 800115a:	4770      	bx	lr

0800115c <__aeabi_d2lz>:
 800115c:	b538      	push	{r3, r4, r5, lr}
 800115e:	2200      	movs	r2, #0
 8001160:	2300      	movs	r3, #0
 8001162:	4604      	mov	r4, r0
 8001164:	460d      	mov	r5, r1
 8001166:	f7ff fc29 	bl	80009bc <__aeabi_dcmplt>
 800116a:	b928      	cbnz	r0, 8001178 <__aeabi_d2lz+0x1c>
 800116c:	4620      	mov	r0, r4
 800116e:	4629      	mov	r1, r5
 8001170:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001174:	f000 b80a 	b.w	800118c <__aeabi_d2ulz>
 8001178:	4620      	mov	r0, r4
 800117a:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 800117e:	f000 f805 	bl	800118c <__aeabi_d2ulz>
 8001182:	4240      	negs	r0, r0
 8001184:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001188:	bd38      	pop	{r3, r4, r5, pc}
 800118a:	bf00      	nop

0800118c <__aeabi_d2ulz>:
 800118c:	b5d0      	push	{r4, r6, r7, lr}
 800118e:	2200      	movs	r2, #0
 8001190:	4b0b      	ldr	r3, [pc, #44]	@ (80011c0 <__aeabi_d2ulz+0x34>)
 8001192:	4606      	mov	r6, r0
 8001194:	460f      	mov	r7, r1
 8001196:	f7ff f99f 	bl	80004d8 <__aeabi_dmul>
 800119a:	f7ff fc75 	bl	8000a88 <__aeabi_d2uiz>
 800119e:	4604      	mov	r4, r0
 80011a0:	f7ff f920 	bl	80003e4 <__aeabi_ui2d>
 80011a4:	2200      	movs	r2, #0
 80011a6:	4b07      	ldr	r3, [pc, #28]	@ (80011c4 <__aeabi_d2ulz+0x38>)
 80011a8:	f7ff f996 	bl	80004d8 <__aeabi_dmul>
 80011ac:	4602      	mov	r2, r0
 80011ae:	460b      	mov	r3, r1
 80011b0:	4630      	mov	r0, r6
 80011b2:	4639      	mov	r1, r7
 80011b4:	f7fe ffd8 	bl	8000168 <__aeabi_dsub>
 80011b8:	f7ff fc66 	bl	8000a88 <__aeabi_d2uiz>
 80011bc:	4621      	mov	r1, r4
 80011be:	bdd0      	pop	{r4, r6, r7, pc}
 80011c0:	3df00000 	.word	0x3df00000
 80011c4:	41f00000 	.word	0x41f00000

080011c8 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b084      	sub	sp, #16
 80011cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80011ce:	1d3b      	adds	r3, r7, #4
 80011d0:	2200      	movs	r2, #0
 80011d2:	601a      	str	r2, [r3, #0]
 80011d4:	605a      	str	r2, [r3, #4]
 80011d6:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80011d8:	4b18      	ldr	r3, [pc, #96]	@ (800123c <MX_ADC1_Init+0x74>)
 80011da:	4a19      	ldr	r2, [pc, #100]	@ (8001240 <MX_ADC1_Init+0x78>)
 80011dc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80011de:	4b17      	ldr	r3, [pc, #92]	@ (800123c <MX_ADC1_Init+0x74>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80011e4:	4b15      	ldr	r3, [pc, #84]	@ (800123c <MX_ADC1_Init+0x74>)
 80011e6:	2201      	movs	r2, #1
 80011e8:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80011ea:	4b14      	ldr	r3, [pc, #80]	@ (800123c <MX_ADC1_Init+0x74>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011f0:	4b12      	ldr	r3, [pc, #72]	@ (800123c <MX_ADC1_Init+0x74>)
 80011f2:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 80011f6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011f8:	4b10      	ldr	r3, [pc, #64]	@ (800123c <MX_ADC1_Init+0x74>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80011fe:	4b0f      	ldr	r3, [pc, #60]	@ (800123c <MX_ADC1_Init+0x74>)
 8001200:	2201      	movs	r2, #1
 8001202:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001204:	480d      	ldr	r0, [pc, #52]	@ (800123c <MX_ADC1_Init+0x74>)
 8001206:	f001 fe71 	bl	8002eec <HAL_ADC_Init>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d001      	beq.n	8001214 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001210:	f001 fb46 	bl	80028a0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001214:	2309      	movs	r3, #9
 8001216:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001218:	2301      	movs	r3, #1
 800121a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 800121c:	2305      	movs	r3, #5
 800121e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001220:	1d3b      	adds	r3, r7, #4
 8001222:	4619      	mov	r1, r3
 8001224:	4805      	ldr	r0, [pc, #20]	@ (800123c <MX_ADC1_Init+0x74>)
 8001226:	f002 f8f9 	bl	800341c <HAL_ADC_ConfigChannel>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d001      	beq.n	8001234 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001230:	f001 fb36 	bl	80028a0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001234:	bf00      	nop
 8001236:	3710      	adds	r7, #16
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}
 800123c:	20000218 	.word	0x20000218
 8001240:	40012400 	.word	0x40012400

08001244 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b088      	sub	sp, #32
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800124c:	f107 0310 	add.w	r3, r7, #16
 8001250:	2200      	movs	r2, #0
 8001252:	601a      	str	r2, [r3, #0]
 8001254:	605a      	str	r2, [r3, #4]
 8001256:	609a      	str	r2, [r3, #8]
 8001258:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4a14      	ldr	r2, [pc, #80]	@ (80012b0 <HAL_ADC_MspInit+0x6c>)
 8001260:	4293      	cmp	r3, r2
 8001262:	d121      	bne.n	80012a8 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001264:	4b13      	ldr	r3, [pc, #76]	@ (80012b4 <HAL_ADC_MspInit+0x70>)
 8001266:	699b      	ldr	r3, [r3, #24]
 8001268:	4a12      	ldr	r2, [pc, #72]	@ (80012b4 <HAL_ADC_MspInit+0x70>)
 800126a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800126e:	6193      	str	r3, [r2, #24]
 8001270:	4b10      	ldr	r3, [pc, #64]	@ (80012b4 <HAL_ADC_MspInit+0x70>)
 8001272:	699b      	ldr	r3, [r3, #24]
 8001274:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001278:	60fb      	str	r3, [r7, #12]
 800127a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800127c:	4b0d      	ldr	r3, [pc, #52]	@ (80012b4 <HAL_ADC_MspInit+0x70>)
 800127e:	699b      	ldr	r3, [r3, #24]
 8001280:	4a0c      	ldr	r2, [pc, #48]	@ (80012b4 <HAL_ADC_MspInit+0x70>)
 8001282:	f043 0308 	orr.w	r3, r3, #8
 8001286:	6193      	str	r3, [r2, #24]
 8001288:	4b0a      	ldr	r3, [pc, #40]	@ (80012b4 <HAL_ADC_MspInit+0x70>)
 800128a:	699b      	ldr	r3, [r3, #24]
 800128c:	f003 0308 	and.w	r3, r3, #8
 8001290:	60bb      	str	r3, [r7, #8]
 8001292:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = BATT_SENSE_Pin;
 8001294:	2302      	movs	r3, #2
 8001296:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001298:	2303      	movs	r3, #3
 800129a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(BATT_SENSE_GPIO_Port, &GPIO_InitStruct);
 800129c:	f107 0310 	add.w	r3, r7, #16
 80012a0:	4619      	mov	r1, r3
 80012a2:	4805      	ldr	r0, [pc, #20]	@ (80012b8 <HAL_ADC_MspInit+0x74>)
 80012a4:	f002 fdf0 	bl	8003e88 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80012a8:	bf00      	nop
 80012aa:	3720      	adds	r7, #32
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	40012400 	.word	0x40012400
 80012b4:	40021000 	.word	0x40021000
 80012b8:	40010c00 	.word	0x40010c00

080012bc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80012c2:	4b0c      	ldr	r3, [pc, #48]	@ (80012f4 <MX_DMA_Init+0x38>)
 80012c4:	695b      	ldr	r3, [r3, #20]
 80012c6:	4a0b      	ldr	r2, [pc, #44]	@ (80012f4 <MX_DMA_Init+0x38>)
 80012c8:	f043 0301 	orr.w	r3, r3, #1
 80012cc:	6153      	str	r3, [r2, #20]
 80012ce:	4b09      	ldr	r3, [pc, #36]	@ (80012f4 <MX_DMA_Init+0x38>)
 80012d0:	695b      	ldr	r3, [r3, #20]
 80012d2:	f003 0301 	and.w	r3, r3, #1
 80012d6:	607b      	str	r3, [r7, #4]
 80012d8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80012da:	2200      	movs	r2, #0
 80012dc:	2100      	movs	r1, #0
 80012de:	2010      	movs	r0, #16
 80012e0:	f002 fbb5 	bl	8003a4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80012e4:	2010      	movs	r0, #16
 80012e6:	f002 fbce 	bl	8003a86 <HAL_NVIC_EnableIRQ>

}
 80012ea:	bf00      	nop
 80012ec:	3708      	adds	r7, #8
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	40021000 	.word	0x40021000

080012f8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b088      	sub	sp, #32
 80012fc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012fe:	f107 0310 	add.w	r3, r7, #16
 8001302:	2200      	movs	r2, #0
 8001304:	601a      	str	r2, [r3, #0]
 8001306:	605a      	str	r2, [r3, #4]
 8001308:	609a      	str	r2, [r3, #8]
 800130a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800130c:	4b4b      	ldr	r3, [pc, #300]	@ (800143c <MX_GPIO_Init+0x144>)
 800130e:	699b      	ldr	r3, [r3, #24]
 8001310:	4a4a      	ldr	r2, [pc, #296]	@ (800143c <MX_GPIO_Init+0x144>)
 8001312:	f043 0310 	orr.w	r3, r3, #16
 8001316:	6193      	str	r3, [r2, #24]
 8001318:	4b48      	ldr	r3, [pc, #288]	@ (800143c <MX_GPIO_Init+0x144>)
 800131a:	699b      	ldr	r3, [r3, #24]
 800131c:	f003 0310 	and.w	r3, r3, #16
 8001320:	60fb      	str	r3, [r7, #12]
 8001322:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001324:	4b45      	ldr	r3, [pc, #276]	@ (800143c <MX_GPIO_Init+0x144>)
 8001326:	699b      	ldr	r3, [r3, #24]
 8001328:	4a44      	ldr	r2, [pc, #272]	@ (800143c <MX_GPIO_Init+0x144>)
 800132a:	f043 0320 	orr.w	r3, r3, #32
 800132e:	6193      	str	r3, [r2, #24]
 8001330:	4b42      	ldr	r3, [pc, #264]	@ (800143c <MX_GPIO_Init+0x144>)
 8001332:	699b      	ldr	r3, [r3, #24]
 8001334:	f003 0320 	and.w	r3, r3, #32
 8001338:	60bb      	str	r3, [r7, #8]
 800133a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800133c:	4b3f      	ldr	r3, [pc, #252]	@ (800143c <MX_GPIO_Init+0x144>)
 800133e:	699b      	ldr	r3, [r3, #24]
 8001340:	4a3e      	ldr	r2, [pc, #248]	@ (800143c <MX_GPIO_Init+0x144>)
 8001342:	f043 0304 	orr.w	r3, r3, #4
 8001346:	6193      	str	r3, [r2, #24]
 8001348:	4b3c      	ldr	r3, [pc, #240]	@ (800143c <MX_GPIO_Init+0x144>)
 800134a:	699b      	ldr	r3, [r3, #24]
 800134c:	f003 0304 	and.w	r3, r3, #4
 8001350:	607b      	str	r3, [r7, #4]
 8001352:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001354:	4b39      	ldr	r3, [pc, #228]	@ (800143c <MX_GPIO_Init+0x144>)
 8001356:	699b      	ldr	r3, [r3, #24]
 8001358:	4a38      	ldr	r2, [pc, #224]	@ (800143c <MX_GPIO_Init+0x144>)
 800135a:	f043 0308 	orr.w	r3, r3, #8
 800135e:	6193      	str	r3, [r2, #24]
 8001360:	4b36      	ldr	r3, [pc, #216]	@ (800143c <MX_GPIO_Init+0x144>)
 8001362:	699b      	ldr	r3, [r3, #24]
 8001364:	f003 0308 	and.w	r3, r3, #8
 8001368:	603b      	str	r3, [r7, #0]
 800136a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_RED_Pin|LED_GRN_Pin|LED_BLU_Pin, GPIO_PIN_RESET);
 800136c:	2200      	movs	r2, #0
 800136e:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 8001372:	4833      	ldr	r0, [pc, #204]	@ (8001440 <MX_GPIO_Init+0x148>)
 8001374:	f002 ff0c 	bl	8004190 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LTC4151_SHDN_N_GPIO_Port, LTC4151_SHDN_N_Pin, GPIO_PIN_RESET);
 8001378:	2200      	movs	r2, #0
 800137a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800137e:	4831      	ldr	r0, [pc, #196]	@ (8001444 <MX_GPIO_Init+0x14c>)
 8001380:	f002 ff06 	bl	8004190 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = LED_RED_Pin|LED_GRN_Pin|LED_BLU_Pin;
 8001384:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8001388:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800138a:	2301      	movs	r3, #1
 800138c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138e:	2300      	movs	r3, #0
 8001390:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001392:	2302      	movs	r3, #2
 8001394:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001396:	f107 0310 	add.w	r3, r7, #16
 800139a:	4619      	mov	r1, r3
 800139c:	4828      	ldr	r0, [pc, #160]	@ (8001440 <MX_GPIO_Init+0x148>)
 800139e:	f002 fd73 	bl	8003e88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = A_SW_Pin|B_SW_Pin|C_SW_Pin|ROT_SW_Pin;
 80013a2:	2333      	movs	r3, #51	@ 0x33
 80013a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013a6:	4b28      	ldr	r3, [pc, #160]	@ (8001448 <MX_GPIO_Init+0x150>)
 80013a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013aa:	2300      	movs	r3, #0
 80013ac:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ae:	f107 0310 	add.w	r3, r7, #16
 80013b2:	4619      	mov	r1, r3
 80013b4:	4825      	ldr	r0, [pc, #148]	@ (800144c <MX_GPIO_Init+0x154>)
 80013b6:	f002 fd67 	bl	8003e88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LTC2944_ALCC_Pin;
 80013ba:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80013be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80013c0:	4b23      	ldr	r3, [pc, #140]	@ (8001450 <MX_GPIO_Init+0x158>)
 80013c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013c4:	2301      	movs	r3, #1
 80013c6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LTC2944_ALCC_GPIO_Port, &GPIO_InitStruct);
 80013c8:	f107 0310 	add.w	r3, r7, #16
 80013cc:	4619      	mov	r1, r3
 80013ce:	481d      	ldr	r0, [pc, #116]	@ (8001444 <MX_GPIO_Init+0x14c>)
 80013d0:	f002 fd5a 	bl	8003e88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LTC4151_SHDN_N_Pin;
 80013d4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80013d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013da:	2301      	movs	r3, #1
 80013dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013de:	2300      	movs	r3, #0
 80013e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e2:	2302      	movs	r3, #2
 80013e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LTC4151_SHDN_N_GPIO_Port, &GPIO_InitStruct);
 80013e6:	f107 0310 	add.w	r3, r7, #16
 80013ea:	4619      	mov	r1, r3
 80013ec:	4815      	ldr	r0, [pc, #84]	@ (8001444 <MX_GPIO_Init+0x14c>)
 80013ee:	f002 fd4b 	bl	8003e88 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80013f2:	2200      	movs	r2, #0
 80013f4:	2100      	movs	r1, #0
 80013f6:	2006      	movs	r0, #6
 80013f8:	f002 fb29 	bl	8003a4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80013fc:	2006      	movs	r0, #6
 80013fe:	f002 fb42 	bl	8003a86 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001402:	2200      	movs	r2, #0
 8001404:	2100      	movs	r1, #0
 8001406:	2007      	movs	r0, #7
 8001408:	f002 fb21 	bl	8003a4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800140c:	2007      	movs	r0, #7
 800140e:	f002 fb3a 	bl	8003a86 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001412:	2200      	movs	r2, #0
 8001414:	2100      	movs	r1, #0
 8001416:	200a      	movs	r0, #10
 8001418:	f002 fb19 	bl	8003a4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800141c:	200a      	movs	r0, #10
 800141e:	f002 fb32 	bl	8003a86 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001422:	2200      	movs	r2, #0
 8001424:	2100      	movs	r1, #0
 8001426:	2017      	movs	r0, #23
 8001428:	f002 fb11 	bl	8003a4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800142c:	2017      	movs	r0, #23
 800142e:	f002 fb2a 	bl	8003a86 <HAL_NVIC_EnableIRQ>

}
 8001432:	bf00      	nop
 8001434:	3720      	adds	r7, #32
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	40021000 	.word	0x40021000
 8001440:	40011000 	.word	0x40011000
 8001444:	40010c00 	.word	0x40010c00
 8001448:	10110000 	.word	0x10110000
 800144c:	40010800 	.word	0x40010800
 8001450:	10210000 	.word	0x10210000

08001454 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c2;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001458:	4b12      	ldr	r3, [pc, #72]	@ (80014a4 <MX_I2C1_Init+0x50>)
 800145a:	4a13      	ldr	r2, [pc, #76]	@ (80014a8 <MX_I2C1_Init+0x54>)
 800145c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800145e:	4b11      	ldr	r3, [pc, #68]	@ (80014a4 <MX_I2C1_Init+0x50>)
 8001460:	4a12      	ldr	r2, [pc, #72]	@ (80014ac <MX_I2C1_Init+0x58>)
 8001462:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001464:	4b0f      	ldr	r3, [pc, #60]	@ (80014a4 <MX_I2C1_Init+0x50>)
 8001466:	2200      	movs	r2, #0
 8001468:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800146a:	4b0e      	ldr	r3, [pc, #56]	@ (80014a4 <MX_I2C1_Init+0x50>)
 800146c:	2200      	movs	r2, #0
 800146e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001470:	4b0c      	ldr	r3, [pc, #48]	@ (80014a4 <MX_I2C1_Init+0x50>)
 8001472:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001476:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001478:	4b0a      	ldr	r3, [pc, #40]	@ (80014a4 <MX_I2C1_Init+0x50>)
 800147a:	2200      	movs	r2, #0
 800147c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800147e:	4b09      	ldr	r3, [pc, #36]	@ (80014a4 <MX_I2C1_Init+0x50>)
 8001480:	2200      	movs	r2, #0
 8001482:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001484:	4b07      	ldr	r3, [pc, #28]	@ (80014a4 <MX_I2C1_Init+0x50>)
 8001486:	2200      	movs	r2, #0
 8001488:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800148a:	4b06      	ldr	r3, [pc, #24]	@ (80014a4 <MX_I2C1_Init+0x50>)
 800148c:	2200      	movs	r2, #0
 800148e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001490:	4804      	ldr	r0, [pc, #16]	@ (80014a4 <MX_I2C1_Init+0x50>)
 8001492:	f002 fec7 	bl	8004224 <HAL_I2C_Init>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d001      	beq.n	80014a0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800149c:	f001 fa00 	bl	80028a0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80014a0:	bf00      	nop
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	20000248 	.word	0x20000248
 80014a8:	40005400 	.word	0x40005400
 80014ac:	000186a0 	.word	0x000186a0

080014b0 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80014b4:	4b12      	ldr	r3, [pc, #72]	@ (8001500 <MX_I2C2_Init+0x50>)
 80014b6:	4a13      	ldr	r2, [pc, #76]	@ (8001504 <MX_I2C2_Init+0x54>)
 80014b8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 80014ba:	4b11      	ldr	r3, [pc, #68]	@ (8001500 <MX_I2C2_Init+0x50>)
 80014bc:	4a12      	ldr	r2, [pc, #72]	@ (8001508 <MX_I2C2_Init+0x58>)
 80014be:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80014c0:	4b0f      	ldr	r3, [pc, #60]	@ (8001500 <MX_I2C2_Init+0x50>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80014c6:	4b0e      	ldr	r3, [pc, #56]	@ (8001500 <MX_I2C2_Init+0x50>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014cc:	4b0c      	ldr	r3, [pc, #48]	@ (8001500 <MX_I2C2_Init+0x50>)
 80014ce:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80014d2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014d4:	4b0a      	ldr	r3, [pc, #40]	@ (8001500 <MX_I2C2_Init+0x50>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80014da:	4b09      	ldr	r3, [pc, #36]	@ (8001500 <MX_I2C2_Init+0x50>)
 80014dc:	2200      	movs	r2, #0
 80014de:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014e0:	4b07      	ldr	r3, [pc, #28]	@ (8001500 <MX_I2C2_Init+0x50>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014e6:	4b06      	ldr	r3, [pc, #24]	@ (8001500 <MX_I2C2_Init+0x50>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80014ec:	4804      	ldr	r0, [pc, #16]	@ (8001500 <MX_I2C2_Init+0x50>)
 80014ee:	f002 fe99 	bl	8004224 <HAL_I2C_Init>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d001      	beq.n	80014fc <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80014f8:	f001 f9d2 	bl	80028a0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80014fc:	bf00      	nop
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	2000029c 	.word	0x2000029c
 8001504:	40005800 	.word	0x40005800
 8001508:	00061a80 	.word	0x00061a80

0800150c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b08a      	sub	sp, #40	@ 0x28
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001514:	f107 0318 	add.w	r3, r7, #24
 8001518:	2200      	movs	r2, #0
 800151a:	601a      	str	r2, [r3, #0]
 800151c:	605a      	str	r2, [r3, #4]
 800151e:	609a      	str	r2, [r3, #8]
 8001520:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4a42      	ldr	r2, [pc, #264]	@ (8001630 <HAL_I2C_MspInit+0x124>)
 8001528:	4293      	cmp	r3, r2
 800152a:	d152      	bne.n	80015d2 <HAL_I2C_MspInit+0xc6>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800152c:	4b41      	ldr	r3, [pc, #260]	@ (8001634 <HAL_I2C_MspInit+0x128>)
 800152e:	699b      	ldr	r3, [r3, #24]
 8001530:	4a40      	ldr	r2, [pc, #256]	@ (8001634 <HAL_I2C_MspInit+0x128>)
 8001532:	f043 0308 	orr.w	r3, r3, #8
 8001536:	6193      	str	r3, [r2, #24]
 8001538:	4b3e      	ldr	r3, [pc, #248]	@ (8001634 <HAL_I2C_MspInit+0x128>)
 800153a:	699b      	ldr	r3, [r3, #24]
 800153c:	f003 0308 	and.w	r3, r3, #8
 8001540:	617b      	str	r3, [r7, #20]
 8001542:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001544:	23c0      	movs	r3, #192	@ 0xc0
 8001546:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001548:	2312      	movs	r3, #18
 800154a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800154c:	2303      	movs	r3, #3
 800154e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001550:	f107 0318 	add.w	r3, r7, #24
 8001554:	4619      	mov	r1, r3
 8001556:	4838      	ldr	r0, [pc, #224]	@ (8001638 <HAL_I2C_MspInit+0x12c>)
 8001558:	f002 fc96 	bl	8003e88 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800155c:	4b35      	ldr	r3, [pc, #212]	@ (8001634 <HAL_I2C_MspInit+0x128>)
 800155e:	69db      	ldr	r3, [r3, #28]
 8001560:	4a34      	ldr	r2, [pc, #208]	@ (8001634 <HAL_I2C_MspInit+0x128>)
 8001562:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001566:	61d3      	str	r3, [r2, #28]
 8001568:	4b32      	ldr	r3, [pc, #200]	@ (8001634 <HAL_I2C_MspInit+0x128>)
 800156a:	69db      	ldr	r3, [r3, #28]
 800156c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001570:	613b      	str	r3, [r7, #16]
 8001572:	693b      	ldr	r3, [r7, #16]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 8001574:	4b31      	ldr	r3, [pc, #196]	@ (800163c <HAL_I2C_MspInit+0x130>)
 8001576:	4a32      	ldr	r2, [pc, #200]	@ (8001640 <HAL_I2C_MspInit+0x134>)
 8001578:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800157a:	4b30      	ldr	r3, [pc, #192]	@ (800163c <HAL_I2C_MspInit+0x130>)
 800157c:	2210      	movs	r2, #16
 800157e:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001580:	4b2e      	ldr	r3, [pc, #184]	@ (800163c <HAL_I2C_MspInit+0x130>)
 8001582:	2200      	movs	r2, #0
 8001584:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001586:	4b2d      	ldr	r3, [pc, #180]	@ (800163c <HAL_I2C_MspInit+0x130>)
 8001588:	2280      	movs	r2, #128	@ 0x80
 800158a:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800158c:	4b2b      	ldr	r3, [pc, #172]	@ (800163c <HAL_I2C_MspInit+0x130>)
 800158e:	2200      	movs	r2, #0
 8001590:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001592:	4b2a      	ldr	r3, [pc, #168]	@ (800163c <HAL_I2C_MspInit+0x130>)
 8001594:	2200      	movs	r2, #0
 8001596:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8001598:	4b28      	ldr	r3, [pc, #160]	@ (800163c <HAL_I2C_MspInit+0x130>)
 800159a:	2200      	movs	r2, #0
 800159c:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800159e:	4b27      	ldr	r3, [pc, #156]	@ (800163c <HAL_I2C_MspInit+0x130>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 80015a4:	4825      	ldr	r0, [pc, #148]	@ (800163c <HAL_I2C_MspInit+0x130>)
 80015a6:	f002 fa89 	bl	8003abc <HAL_DMA_Init>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d001      	beq.n	80015b4 <HAL_I2C_MspInit+0xa8>
    {
      Error_Handler();
 80015b0:	f001 f976 	bl	80028a0 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	4a21      	ldr	r2, [pc, #132]	@ (800163c <HAL_I2C_MspInit+0x130>)
 80015b8:	635a      	str	r2, [r3, #52]	@ 0x34
 80015ba:	4a20      	ldr	r2, [pc, #128]	@ (800163c <HAL_I2C_MspInit+0x130>)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6253      	str	r3, [r2, #36]	@ 0x24

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80015c0:	2200      	movs	r2, #0
 80015c2:	2100      	movs	r1, #0
 80015c4:	201f      	movs	r0, #31
 80015c6:	f002 fa42 	bl	8003a4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80015ca:	201f      	movs	r0, #31
 80015cc:	f002 fa5b 	bl	8003a86 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80015d0:	e029      	b.n	8001626 <HAL_I2C_MspInit+0x11a>
  else if(i2cHandle->Instance==I2C2)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4a1b      	ldr	r2, [pc, #108]	@ (8001644 <HAL_I2C_MspInit+0x138>)
 80015d8:	4293      	cmp	r3, r2
 80015da:	d124      	bne.n	8001626 <HAL_I2C_MspInit+0x11a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015dc:	4b15      	ldr	r3, [pc, #84]	@ (8001634 <HAL_I2C_MspInit+0x128>)
 80015de:	699b      	ldr	r3, [r3, #24]
 80015e0:	4a14      	ldr	r2, [pc, #80]	@ (8001634 <HAL_I2C_MspInit+0x128>)
 80015e2:	f043 0308 	orr.w	r3, r3, #8
 80015e6:	6193      	str	r3, [r2, #24]
 80015e8:	4b12      	ldr	r3, [pc, #72]	@ (8001634 <HAL_I2C_MspInit+0x128>)
 80015ea:	699b      	ldr	r3, [r3, #24]
 80015ec:	f003 0308 	and.w	r3, r3, #8
 80015f0:	60fb      	str	r3, [r7, #12]
 80015f2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80015f4:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80015f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015fa:	2312      	movs	r3, #18
 80015fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015fe:	2303      	movs	r3, #3
 8001600:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001602:	f107 0318 	add.w	r3, r7, #24
 8001606:	4619      	mov	r1, r3
 8001608:	480b      	ldr	r0, [pc, #44]	@ (8001638 <HAL_I2C_MspInit+0x12c>)
 800160a:	f002 fc3d 	bl	8003e88 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800160e:	4b09      	ldr	r3, [pc, #36]	@ (8001634 <HAL_I2C_MspInit+0x128>)
 8001610:	69db      	ldr	r3, [r3, #28]
 8001612:	4a08      	ldr	r2, [pc, #32]	@ (8001634 <HAL_I2C_MspInit+0x128>)
 8001614:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001618:	61d3      	str	r3, [r2, #28]
 800161a:	4b06      	ldr	r3, [pc, #24]	@ (8001634 <HAL_I2C_MspInit+0x128>)
 800161c:	69db      	ldr	r3, [r3, #28]
 800161e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001622:	60bb      	str	r3, [r7, #8]
 8001624:	68bb      	ldr	r3, [r7, #8]
}
 8001626:	bf00      	nop
 8001628:	3728      	adds	r7, #40	@ 0x28
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	40005400 	.word	0x40005400
 8001634:	40021000 	.word	0x40021000
 8001638:	40010c00 	.word	0x40010c00
 800163c:	200002f0 	.word	0x200002f0
 8001640:	4002006c 	.word	0x4002006c
 8001644:	40005800 	.word	0x40005800

08001648 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b082      	sub	sp, #8
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8001650:	1d39      	adds	r1, r7, #4
 8001652:	f04f 33ff 	mov.w	r3, #4294967295
 8001656:	2201      	movs	r2, #1
 8001658:	4803      	ldr	r0, [pc, #12]	@ (8001668 <__io_putchar+0x20>)
 800165a:	f006 fcc7 	bl	8007fec <HAL_UART_Transmit>
  return ch;
 800165e:	687b      	ldr	r3, [r7, #4]
}
 8001660:	4618      	mov	r0, r3
 8001662:	3708      	adds	r7, #8
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}
 8001668:	20000410 	.word	0x20000410

0800166c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b082      	sub	sp, #8
 8001670:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001672:	f001 fbb5 	bl	8002de0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001676:	f000 f919 	bl	80018ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800167a:	f7ff fe3d 	bl	80012f8 <MX_GPIO_Init>
  MX_DMA_Init();
 800167e:	f7ff fe1d 	bl	80012bc <MX_DMA_Init>
  MX_I2C2_Init();
 8001682:	f7ff ff15 	bl	80014b0 <MX_I2C2_Init>
  MX_I2C1_Init();
 8001686:	f7ff fee5 	bl	8001454 <MX_I2C1_Init>
  MX_ADC1_Init();
 800168a:	f7ff fd9d 	bl	80011c8 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 800168e:	f001 fb0d 	bl	8002cac <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8001692:	f001 fa71 	bl	8002b78 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start_IT(&htim3, TIM_CHANNEL_ALL);
 8001696:	213c      	movs	r1, #60	@ 0x3c
 8001698:	4870      	ldr	r0, [pc, #448]	@ (800185c <main+0x1f0>)
 800169a:	f006 f993 	bl	80079c4 <HAL_TIM_Encoder_Start_IT>

  ssd1306_Init();
 800169e:	f007 f8f5 	bl	800888c <ssd1306_Init>
  HAL_ADCEx_Calibration_Start(&hadc1);
 80016a2:	486f      	ldr	r0, [pc, #444]	@ (8001860 <main+0x1f4>)
 80016a4:	f002 f84e 	bl	8003744 <HAL_ADCEx_Calibration_Start>
  HAL_Delay(100);
 80016a8:	2064      	movs	r0, #100	@ 0x64
 80016aa:	f001 fbfb 	bl	8002ea4 <HAL_Delay>
  HAL_ADC_Start(&hadc1);
 80016ae:	486c      	ldr	r0, [pc, #432]	@ (8001860 <main+0x1f4>)
 80016b0:	f001 fcf4 	bl	800309c <HAL_ADC_Start>

  printf("LTC2959 Begin\n\r");
 80016b4:	486b      	ldr	r0, [pc, #428]	@ (8001864 <main+0x1f8>)
 80016b6:	f008 fadb 	bl	8009c70 <iprintf>
//  while(HAL_I2C_IsDeviceReady(&LTC2959_I2C_PORT, LTC2959_I2C_ADDR, 100, 1000) != HAL_OK);	// wait for it to come alive
  LTC2959_Init(&ltc2959);
 80016ba:	486b      	ldr	r0, [pc, #428]	@ (8001868 <main+0x1fc>)
 80016bc:	f007 f847 	bl	800874e <LTC2959_Init>
  HAL_Delay(1000);
 80016c0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80016c4:	f001 fbee 	bl	8002ea4 <HAL_Delay>

  AD5693_Reset();
 80016c8:	f006 fe64 	bl	8008394 <AD5693_Reset>
  HAL_Delay(10);
 80016cc:	200a      	movs	r0, #10
 80016ce:	f001 fbe9 	bl	8002ea4 <HAL_Delay>
  AD5693_Init(ad5693);
 80016d2:	4b66      	ldr	r3, [pc, #408]	@ (800186c <main+0x200>)
 80016d4:	6818      	ldr	r0, [r3, #0]
 80016d6:	f006 fe7d 	bl	80083d4 <AD5693_Init>
  HAL_Delay(10);
 80016da:	200a      	movs	r0, #10
 80016dc:	f001 fbe2 	bl	8002ea4 <HAL_Delay>

//  myOLED_char(1, 12, "Volt = ");
//  myOLED_char(1, 24, "Curr = ");
//  myOLED_char(1, 36, "Chg  = ");
//  myOLED_char(1, 48, "Temp = ");
  ssd1306_UpdateScreen();
 80016e0:	f007 f960 	bl	80089a4 <ssd1306_UpdateScreen>
  HAL_Delay(100);
 80016e4:	2064      	movs	r0, #100	@ 0x64
 80016e6:	f001 fbdd 	bl	8002ea4 <HAL_Delay>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  printf("RUNNING");
 80016ea:	4861      	ldr	r0, [pc, #388]	@ (8001870 <main+0x204>)
 80016ec:	f008 fac0 	bl	8009c70 <iprintf>

  while (1)
  {
	  tick = HAL_GetTick();
 80016f0:	f001 fbce 	bl	8002e90 <HAL_GetTick>
 80016f4:	4603      	mov	r3, r0
 80016f6:	4a5f      	ldr	r2, [pc, #380]	@ (8001874 <main+0x208>)
 80016f8:	6013      	str	r3, [r2, #0]

	  update_encoder_state();
 80016fa:	f000 fdd7 	bl	80022ac <update_encoder_state>
	  handle_button_press();
 80016fe:	f001 f803 	bl	8002708 <handle_button_press>
	  update_display();
 8001702:	f000 fa7d 	bl	8001c00 <update_display>
//	  myOLED_int(1, 2, tick);
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_ADC_PollForConversion(&hadc1, 10);
 8001706:	210a      	movs	r1, #10
 8001708:	4855      	ldr	r0, [pc, #340]	@ (8001860 <main+0x1f4>)
 800170a:	f001 fd75 	bl	80031f8 <HAL_ADC_PollForConversion>
  	  if(HAL_ADC_GetValue(&hadc1) >= 200){
 800170e:	4854      	ldr	r0, [pc, #336]	@ (8001860 <main+0x1f4>)
 8001710:	f001 fe78 	bl	8003404 <HAL_ADC_GetValue>
 8001714:	4603      	mov	r3, r0
 8001716:	2bc7      	cmp	r3, #199	@ 0xc7
 8001718:	d903      	bls.n	8001722 <main+0xb6>
  		  battery_detect = true;
 800171a:	4b57      	ldr	r3, [pc, #348]	@ (8001878 <main+0x20c>)
 800171c:	2201      	movs	r2, #1
 800171e:	701a      	strb	r2, [r3, #0]
 8001720:	e008      	b.n	8001734 <main+0xc8>
  	  }else if(HAL_ADC_GetValue(&hadc1) < 200){
 8001722:	484f      	ldr	r0, [pc, #316]	@ (8001860 <main+0x1f4>)
 8001724:	f001 fe6e 	bl	8003404 <HAL_ADC_GetValue>
 8001728:	4603      	mov	r3, r0
 800172a:	2bc7      	cmp	r3, #199	@ 0xc7
 800172c:	d802      	bhi.n	8001734 <main+0xc8>
  		  battery_detect = false;
 800172e:	4b52      	ldr	r3, [pc, #328]	@ (8001878 <main+0x20c>)
 8001730:	2200      	movs	r2, #0
 8001732:	701a      	strb	r2, [r3, #0]
  	  }


      for (uint8_t i = 0; i < 10; i++) {
 8001734:	2300      	movs	r3, #0
 8001736:	71fb      	strb	r3, [r7, #7]
 8001738:	e00a      	b.n	8001750 <main+0xe4>
          sensor_data[i] = LTC2959_Get_Current();
 800173a:	f007 f831 	bl	80087a0 <LTC2959_Get_Current>
 800173e:	4602      	mov	r2, r0
 8001740:	79fb      	ldrb	r3, [r7, #7]
 8001742:	4611      	mov	r1, r2
 8001744:	4a4d      	ldr	r2, [pc, #308]	@ (800187c <main+0x210>)
 8001746:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      for (uint8_t i = 0; i < 10; i++) {
 800174a:	79fb      	ldrb	r3, [r7, #7]
 800174c:	3301      	adds	r3, #1
 800174e:	71fb      	strb	r3, [r7, #7]
 8001750:	79fb      	ldrb	r3, [r7, #7]
 8001752:	2b09      	cmp	r3, #9
 8001754:	d9f1      	bls.n	800173a <main+0xce>
      }

	  current = LTC2959_Get_Current();
 8001756:	f007 f823 	bl	80087a0 <LTC2959_Get_Current>
 800175a:	4603      	mov	r3, r0
 800175c:	4a48      	ldr	r2, [pc, #288]	@ (8001880 <main+0x214>)
 800175e:	6013      	str	r3, [r2, #0]
  	  filter_current = Get_Current_Filtered(current);
 8001760:	4b47      	ldr	r3, [pc, #284]	@ (8001880 <main+0x214>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4618      	mov	r0, r3
 8001766:	f006 ff05 	bl	8008574 <Get_Current_Filtered>
 800176a:	4603      	mov	r3, r0
 800176c:	4a45      	ldr	r2, [pc, #276]	@ (8001884 <main+0x218>)
 800176e:	6013      	str	r3, [r2, #0]
		  prev_control_delay = tick;
	  }
*/


	  switch(state){
 8001770:	4b45      	ldr	r3, [pc, #276]	@ (8001888 <main+0x21c>)
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	2b02      	cmp	r3, #2
 8001776:	d03a      	beq.n	80017ee <main+0x182>
 8001778:	2b02      	cmp	r3, #2
 800177a:	dc5b      	bgt.n	8001834 <main+0x1c8>
 800177c:	2b00      	cmp	r3, #0
 800177e:	d002      	beq.n	8001786 <main+0x11a>
 8001780:	2b01      	cmp	r3, #1
 8001782:	d02a      	beq.n	80017da <main+0x16e>
 8001784:	e056      	b.n	8001834 <main+0x1c8>
	  case IDLE:
		  if(battery_detect){
 8001786:	4b3c      	ldr	r3, [pc, #240]	@ (8001878 <main+0x20c>)
 8001788:	781b      	ldrb	r3, [r3, #0]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d003      	beq.n	8001796 <main+0x12a>
			  state = BATT_CONN;
 800178e:	4b3e      	ldr	r3, [pc, #248]	@ (8001888 <main+0x21c>)
 8001790:	2201      	movs	r2, #1
 8001792:	701a      	strb	r2, [r3, #0]
			  // Resets the seconds count every time battery is removed
			  if(seconds > 1){
				  seconds = 0;
			  }
		  }
		  break;
 8001794:	e04b      	b.n	800182e <main+0x1c2>
			  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, RESET);
 8001796:	2200      	movs	r2, #0
 8001798:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800179c:	483b      	ldr	r0, [pc, #236]	@ (800188c <main+0x220>)
 800179e:	f002 fcf7 	bl	8004190 <HAL_GPIO_WritePin>
			  myOLED_char(50, 24, "        ");	// print empty spaces in curr
 80017a2:	4a3b      	ldr	r2, [pc, #236]	@ (8001890 <main+0x224>)
 80017a4:	2118      	movs	r1, #24
 80017a6:	2032      	movs	r0, #50	@ 0x32
 80017a8:	f000 f976 	bl	8001a98 <myOLED_char>
			  myOLED_char(50, 36, "       ");	// print empty spaces in chg
 80017ac:	4a39      	ldr	r2, [pc, #228]	@ (8001894 <main+0x228>)
 80017ae:	2124      	movs	r1, #36	@ 0x24
 80017b0:	2032      	movs	r0, #50	@ 0x32
 80017b2:	f000 f971 	bl	8001a98 <myOLED_char>
			  myOLED_char(50, 48, "  ");		// print empty spaces in temp
 80017b6:	4a38      	ldr	r2, [pc, #224]	@ (8001898 <main+0x22c>)
 80017b8:	2130      	movs	r1, #48	@ 0x30
 80017ba:	2032      	movs	r0, #50	@ 0x32
 80017bc:	f000 f96c 	bl	8001a98 <myOLED_char>
			  myOLED_int(50, 2, 0);
 80017c0:	2200      	movs	r2, #0
 80017c2:	2102      	movs	r1, #2
 80017c4:	2032      	movs	r0, #50	@ 0x32
 80017c6:	f000 f9f3 	bl	8001bb0 <myOLED_int>
			  if(seconds > 1){
 80017ca:	4b34      	ldr	r3, [pc, #208]	@ (800189c <main+0x230>)
 80017cc:	881b      	ldrh	r3, [r3, #0]
 80017ce:	2b01      	cmp	r3, #1
 80017d0:	d92d      	bls.n	800182e <main+0x1c2>
				  seconds = 0;
 80017d2:	4b32      	ldr	r3, [pc, #200]	@ (800189c <main+0x230>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	801a      	strh	r2, [r3, #0]
		  break;
 80017d8:	e029      	b.n	800182e <main+0x1c2>

	  case BATT_CONN:
		  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, SET); 		// Turn on RED led for indication
 80017da:	2201      	movs	r2, #1
 80017dc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80017e0:	482a      	ldr	r0, [pc, #168]	@ (800188c <main+0x220>)
 80017e2:	f002 fcd5 	bl	8004190 <HAL_GPIO_WritePin>
		  state = RUN;
 80017e6:	4b28      	ldr	r3, [pc, #160]	@ (8001888 <main+0x21c>)
 80017e8:	2202      	movs	r2, #2
 80017ea:	701a      	strb	r2, [r3, #0]
		  break;
 80017ec:	e022      	b.n	8001834 <main+0x1c8>

	  case RUN:
		  /*
		  * test timer for run condition
		  */
		  if(tick - sec_prev >= 1000){		// 1000ms = 1 sec
 80017ee:	4b21      	ldr	r3, [pc, #132]	@ (8001874 <main+0x208>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a2b      	ldr	r2, [pc, #172]	@ (80018a0 <main+0x234>)
 80017f4:	8812      	ldrh	r2, [r2, #0]
 80017f6:	1a9b      	subs	r3, r3, r2
 80017f8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80017fc:	d30f      	bcc.n	800181e <main+0x1b2>
			  sec_prev = tick;
 80017fe:	4b1d      	ldr	r3, [pc, #116]	@ (8001874 <main+0x208>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	b29a      	uxth	r2, r3
 8001804:	4b26      	ldr	r3, [pc, #152]	@ (80018a0 <main+0x234>)
 8001806:	801a      	strh	r2, [r3, #0]
			  myOLED_int(50, 2, seconds++);
 8001808:	4b24      	ldr	r3, [pc, #144]	@ (800189c <main+0x230>)
 800180a:	881b      	ldrh	r3, [r3, #0]
 800180c:	1c5a      	adds	r2, r3, #1
 800180e:	b291      	uxth	r1, r2
 8001810:	4a22      	ldr	r2, [pc, #136]	@ (800189c <main+0x230>)
 8001812:	8011      	strh	r1, [r2, #0]
 8001814:	461a      	mov	r2, r3
 8001816:	2102      	movs	r1, #2
 8001818:	2032      	movs	r0, #50	@ 0x32
 800181a:	f000 f9c9 	bl	8001bb0 <myOLED_int>
		  }
		  if(battery_detect){
 800181e:	4b16      	ldr	r3, [pc, #88]	@ (8001878 <main+0x20c>)
 8001820:	781b      	ldrb	r3, [r3, #0]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d105      	bne.n	8001832 <main+0x1c6>
			  // print the battery values on oled screen
				  break;
//			  }
		  }else{
			  state = IDLE;
 8001826:	4b18      	ldr	r3, [pc, #96]	@ (8001888 <main+0x21c>)
 8001828:	2200      	movs	r2, #0
 800182a:	701a      	strb	r2, [r3, #0]
		  }
		  break;
 800182c:	e002      	b.n	8001834 <main+0x1c8>
		  break;
 800182e:	bf00      	nop
 8001830:	e000      	b.n	8001834 <main+0x1c8>
				  break;
 8001832:	bf00      	nop

	  default:
	  }

	  if(tick - prev_tick >= blink_delay){
 8001834:	4b0f      	ldr	r3, [pc, #60]	@ (8001874 <main+0x208>)
 8001836:	681a      	ldr	r2, [r3, #0]
 8001838:	4b1a      	ldr	r3, [pc, #104]	@ (80018a4 <main+0x238>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	1ad3      	subs	r3, r2, r3
 800183e:	4a1a      	ldr	r2, [pc, #104]	@ (80018a8 <main+0x23c>)
 8001840:	8812      	ldrh	r2, [r2, #0]
 8001842:	4293      	cmp	r3, r2
 8001844:	f4ff af54 	bcc.w	80016f0 <main+0x84>
		  prev_tick = tick;
 8001848:	4b0a      	ldr	r3, [pc, #40]	@ (8001874 <main+0x208>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a15      	ldr	r2, [pc, #84]	@ (80018a4 <main+0x238>)
 800184e:	6013      	str	r3, [r2, #0]
		  HAL_GPIO_TogglePin(LED_BLU_GPIO_Port, LED_BLU_Pin);
 8001850:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001854:	480d      	ldr	r0, [pc, #52]	@ (800188c <main+0x220>)
 8001856:	f002 fcb3 	bl	80041c0 <HAL_GPIO_TogglePin>
	  tick = HAL_GetTick();
 800185a:	e749      	b.n	80016f0 <main+0x84>
 800185c:	200003c8 	.word	0x200003c8
 8001860:	20000218 	.word	0x20000218
 8001864:	0800d508 	.word	0x0800d508
 8001868:	20000004 	.word	0x20000004
 800186c:	20000380 	.word	0x20000380
 8001870:	0800d518 	.word	0x0800d518
 8001874:	20000334 	.word	0x20000334
 8001878:	20000357 	.word	0x20000357
 800187c:	20000358 	.word	0x20000358
 8001880:	20000340 	.word	0x20000340
 8001884:	20000344 	.word	0x20000344
 8001888:	20000356 	.word	0x20000356
 800188c:	40011000 	.word	0x40011000
 8001890:	0800d520 	.word	0x0800d520
 8001894:	0800d52c 	.word	0x0800d52c
 8001898:	0800d534 	.word	0x0800d534
 800189c:	20000354 	.word	0x20000354
 80018a0:	20000352 	.word	0x20000352
 80018a4:	20000338 	.word	0x20000338
 80018a8:	20000000 	.word	0x20000000

080018ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b094      	sub	sp, #80	@ 0x50
 80018b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018b2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80018b6:	2228      	movs	r2, #40	@ 0x28
 80018b8:	2100      	movs	r1, #0
 80018ba:	4618      	mov	r0, r3
 80018bc:	f008 fa67 	bl	8009d8e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018c0:	f107 0314 	add.w	r3, r7, #20
 80018c4:	2200      	movs	r2, #0
 80018c6:	601a      	str	r2, [r3, #0]
 80018c8:	605a      	str	r2, [r3, #4]
 80018ca:	609a      	str	r2, [r3, #8]
 80018cc:	60da      	str	r2, [r3, #12]
 80018ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80018d0:	1d3b      	adds	r3, r7, #4
 80018d2:	2200      	movs	r2, #0
 80018d4:	601a      	str	r2, [r3, #0]
 80018d6:	605a      	str	r2, [r3, #4]
 80018d8:	609a      	str	r2, [r3, #8]
 80018da:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80018dc:	2301      	movs	r3, #1
 80018de:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80018e0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80018e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80018e6:	2300      	movs	r3, #0
 80018e8:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80018ea:	2301      	movs	r3, #1
 80018ec:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018ee:	2302      	movs	r3, #2
 80018f0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80018f2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80018f6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80018f8:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80018fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018fe:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001902:	4618      	mov	r0, r3
 8001904:	f005 fa40 	bl	8006d88 <HAL_RCC_OscConfig>
 8001908:	4603      	mov	r3, r0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d001      	beq.n	8001912 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800190e:	f000 ffc7 	bl	80028a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001912:	230f      	movs	r3, #15
 8001914:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001916:	2302      	movs	r3, #2
 8001918:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800191a:	2300      	movs	r3, #0
 800191c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800191e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001922:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001924:	2300      	movs	r3, #0
 8001926:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001928:	f107 0314 	add.w	r3, r7, #20
 800192c:	2102      	movs	r1, #2
 800192e:	4618      	mov	r0, r3
 8001930:	f005 fcac 	bl	800728c <HAL_RCC_ClockConfig>
 8001934:	4603      	mov	r3, r0
 8001936:	2b00      	cmp	r3, #0
 8001938:	d001      	beq.n	800193e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800193a:	f000 ffb1 	bl	80028a0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800193e:	2302      	movs	r3, #2
 8001940:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001942:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001946:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001948:	1d3b      	adds	r3, r7, #4
 800194a:	4618      	mov	r0, r3
 800194c:	f005 fe2c 	bl	80075a8 <HAL_RCCEx_PeriphCLKConfig>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d001      	beq.n	800195a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001956:	f000 ffa3 	bl	80028a0 <Error_Handler>
  }
}
 800195a:	bf00      	nop
 800195c:	3750      	adds	r7, #80	@ 0x50
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
	...

08001964 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8001964:	b480      	push	{r7}
 8001966:	b083      	sub	sp, #12
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
	rotary_out = __HAL_TIM_GET_COUNTER(htim);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001972:	4a06      	ldr	r2, [pc, #24]	@ (800198c <HAL_TIM_IC_CaptureCallback+0x28>)
 8001974:	6013      	str	r3, [r2, #0]
	rot_cnt = rotary_out / 4;
 8001976:	4b05      	ldr	r3, [pc, #20]	@ (800198c <HAL_TIM_IC_CaptureCallback+0x28>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	089b      	lsrs	r3, r3, #2
 800197c:	4a04      	ldr	r2, [pc, #16]	@ (8001990 <HAL_TIM_IC_CaptureCallback+0x2c>)
 800197e:	6013      	str	r3, [r2, #0]
}
 8001980:	bf00      	nop
 8001982:	370c      	adds	r7, #12
 8001984:	46bd      	mov	sp, r7
 8001986:	bc80      	pop	{r7}
 8001988:	4770      	bx	lr
 800198a:	bf00      	nop
 800198c:	20000394 	.word	0x20000394
 8001990:	20000398 	.word	0x20000398

08001994 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001994:	b480      	push	{r7}
 8001996:	b083      	sub	sp, #12
 8001998:	af00      	add	r7, sp, #0
 800199a:	4603      	mov	r3, r0
 800199c:	80fb      	strh	r3, [r7, #6]
	switch(GPIO_Pin){
 800199e:	88fb      	ldrh	r3, [r7, #6]
 80019a0:	3b01      	subs	r3, #1
 80019a2:	2b1f      	cmp	r3, #31
 80019a4:	d864      	bhi.n	8001a70 <HAL_GPIO_EXTI_Callback+0xdc>
 80019a6:	a201      	add	r2, pc, #4	@ (adr r2, 80019ac <HAL_GPIO_EXTI_Callback+0x18>)
 80019a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019ac:	08001a35 	.word	0x08001a35
 80019b0:	08001a49 	.word	0x08001a49
 80019b4:	08001a71 	.word	0x08001a71
 80019b8:	08001a71 	.word	0x08001a71
 80019bc:	08001a71 	.word	0x08001a71
 80019c0:	08001a71 	.word	0x08001a71
 80019c4:	08001a71 	.word	0x08001a71
 80019c8:	08001a71 	.word	0x08001a71
 80019cc:	08001a71 	.word	0x08001a71
 80019d0:	08001a71 	.word	0x08001a71
 80019d4:	08001a71 	.word	0x08001a71
 80019d8:	08001a71 	.word	0x08001a71
 80019dc:	08001a71 	.word	0x08001a71
 80019e0:	08001a71 	.word	0x08001a71
 80019e4:	08001a71 	.word	0x08001a71
 80019e8:	08001a5d 	.word	0x08001a5d
 80019ec:	08001a71 	.word	0x08001a71
 80019f0:	08001a71 	.word	0x08001a71
 80019f4:	08001a71 	.word	0x08001a71
 80019f8:	08001a71 	.word	0x08001a71
 80019fc:	08001a71 	.word	0x08001a71
 8001a00:	08001a71 	.word	0x08001a71
 8001a04:	08001a71 	.word	0x08001a71
 8001a08:	08001a71 	.word	0x08001a71
 8001a0c:	08001a71 	.word	0x08001a71
 8001a10:	08001a71 	.word	0x08001a71
 8001a14:	08001a71 	.word	0x08001a71
 8001a18:	08001a71 	.word	0x08001a71
 8001a1c:	08001a71 	.word	0x08001a71
 8001a20:	08001a71 	.word	0x08001a71
 8001a24:	08001a71 	.word	0x08001a71
 8001a28:	08001a2d 	.word	0x08001a2d
	case ROT_SW_Pin:
		sw_rot_state = true;
 8001a2c:	4b13      	ldr	r3, [pc, #76]	@ (8001a7c <HAL_GPIO_EXTI_Callback+0xe8>)
 8001a2e:	2201      	movs	r2, #1
 8001a30:	701a      	strb	r2, [r3, #0]
		break;
 8001a32:	e01e      	b.n	8001a72 <HAL_GPIO_EXTI_Callback+0xde>
	case A_SW_Pin:
		sw_a_state = true;
 8001a34:	4b12      	ldr	r3, [pc, #72]	@ (8001a80 <HAL_GPIO_EXTI_Callback+0xec>)
 8001a36:	2201      	movs	r2, #1
 8001a38:	701a      	strb	r2, [r3, #0]
		sw_a_cnt++;
 8001a3a:	4b12      	ldr	r3, [pc, #72]	@ (8001a84 <HAL_GPIO_EXTI_Callback+0xf0>)
 8001a3c:	881b      	ldrh	r3, [r3, #0]
 8001a3e:	3301      	adds	r3, #1
 8001a40:	b29a      	uxth	r2, r3
 8001a42:	4b10      	ldr	r3, [pc, #64]	@ (8001a84 <HAL_GPIO_EXTI_Callback+0xf0>)
 8001a44:	801a      	strh	r2, [r3, #0]
		break;
 8001a46:	e014      	b.n	8001a72 <HAL_GPIO_EXTI_Callback+0xde>
	case B_SW_Pin:
		sw_b_state = true;
 8001a48:	4b0f      	ldr	r3, [pc, #60]	@ (8001a88 <HAL_GPIO_EXTI_Callback+0xf4>)
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	701a      	strb	r2, [r3, #0]
		sw_b_cnt++;
 8001a4e:	4b0f      	ldr	r3, [pc, #60]	@ (8001a8c <HAL_GPIO_EXTI_Callback+0xf8>)
 8001a50:	881b      	ldrh	r3, [r3, #0]
 8001a52:	3301      	adds	r3, #1
 8001a54:	b29a      	uxth	r2, r3
 8001a56:	4b0d      	ldr	r3, [pc, #52]	@ (8001a8c <HAL_GPIO_EXTI_Callback+0xf8>)
 8001a58:	801a      	strh	r2, [r3, #0]
		break;
 8001a5a:	e00a      	b.n	8001a72 <HAL_GPIO_EXTI_Callback+0xde>
	case C_SW_Pin:
		sw_c_state = true;
 8001a5c:	4b0c      	ldr	r3, [pc, #48]	@ (8001a90 <HAL_GPIO_EXTI_Callback+0xfc>)
 8001a5e:	2201      	movs	r2, #1
 8001a60:	701a      	strb	r2, [r3, #0]
		sw_c_cnt++;
 8001a62:	4b0c      	ldr	r3, [pc, #48]	@ (8001a94 <HAL_GPIO_EXTI_Callback+0x100>)
 8001a64:	881b      	ldrh	r3, [r3, #0]
 8001a66:	3301      	adds	r3, #1
 8001a68:	b29a      	uxth	r2, r3
 8001a6a:	4b0a      	ldr	r3, [pc, #40]	@ (8001a94 <HAL_GPIO_EXTI_Callback+0x100>)
 8001a6c:	801a      	strh	r2, [r3, #0]
		break;
 8001a6e:	e000      	b.n	8001a72 <HAL_GPIO_EXTI_Callback+0xde>
	default:
		break;
 8001a70:	bf00      	nop
	}
}
 8001a72:	bf00      	nop
 8001a74:	370c      	adds	r7, #12
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bc80      	pop	{r7}
 8001a7a:	4770      	bx	lr
 8001a7c:	200003ac 	.word	0x200003ac
 8001a80:	200003ad 	.word	0x200003ad
 8001a84:	200003a6 	.word	0x200003a6
 8001a88:	200003ae 	.word	0x200003ae
 8001a8c:	200003a8 	.word	0x200003a8
 8001a90:	200003af 	.word	0x200003af
 8001a94:	200003aa 	.word	0x200003aa

08001a98 <myOLED_char>:

void myOLED_char(uint16_t cursorX, uint16_t cursorY, char *data){
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b082      	sub	sp, #8
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	603a      	str	r2, [r7, #0]
 8001aa2:	80fb      	strh	r3, [r7, #6]
 8001aa4:	460b      	mov	r3, r1
 8001aa6:	80bb      	strh	r3, [r7, #4]

	ssd1306_SetCursor(cursorX, cursorY);
 8001aa8:	88fb      	ldrh	r3, [r7, #6]
 8001aaa:	b2db      	uxtb	r3, r3
 8001aac:	88ba      	ldrh	r2, [r7, #4]
 8001aae:	b2d2      	uxtb	r2, r2
 8001ab0:	4611      	mov	r1, r2
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f007 f89e 	bl	8008bf4 <ssd1306_SetCursor>
	ssd1306_WriteString(data, Font_7x10, White);
 8001ab8:	4a04      	ldr	r2, [pc, #16]	@ (8001acc <myOLED_char+0x34>)
 8001aba:	2301      	movs	r3, #1
 8001abc:	ca06      	ldmia	r2, {r1, r2}
 8001abe:	6838      	ldr	r0, [r7, #0]
 8001ac0:	f007 f872 	bl	8008ba8 <ssd1306_WriteString>
}
 8001ac4:	bf00      	nop
 8001ac6:	3708      	adds	r7, #8
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	20000024 	.word	0x20000024

08001ad0 <myOLED_char_big>:

void myOLED_char_big(uint16_t cursorX, uint16_t cursorY, char *data){
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b082      	sub	sp, #8
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	603a      	str	r2, [r7, #0]
 8001ada:	80fb      	strh	r3, [r7, #6]
 8001adc:	460b      	mov	r3, r1
 8001ade:	80bb      	strh	r3, [r7, #4]

	ssd1306_SetCursor(cursorX, cursorY);
 8001ae0:	88fb      	ldrh	r3, [r7, #6]
 8001ae2:	b2db      	uxtb	r3, r3
 8001ae4:	88ba      	ldrh	r2, [r7, #4]
 8001ae6:	b2d2      	uxtb	r2, r2
 8001ae8:	4611      	mov	r1, r2
 8001aea:	4618      	mov	r0, r3
 8001aec:	f007 f882 	bl	8008bf4 <ssd1306_SetCursor>
	ssd1306_WriteString(data, Font_11x18, White);
 8001af0:	4a04      	ldr	r2, [pc, #16]	@ (8001b04 <myOLED_char_big+0x34>)
 8001af2:	2301      	movs	r3, #1
 8001af4:	ca06      	ldmia	r2, {r1, r2}
 8001af6:	6838      	ldr	r0, [r7, #0]
 8001af8:	f007 f856 	bl	8008ba8 <ssd1306_WriteString>
}
 8001afc:	bf00      	nop
 8001afe:	3708      	adds	r7, #8
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	2000002c 	.word	0x2000002c

08001b08 <myOLED_float>:

void myOLED_float(uint16_t cursorX, uint16_t cursorY, float data){
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b086      	sub	sp, #24
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	4603      	mov	r3, r0
 8001b10:	603a      	str	r2, [r7, #0]
 8001b12:	80fb      	strh	r3, [r7, #6]
 8001b14:	460b      	mov	r3, r1
 8001b16:	80bb      	strh	r3, [r7, #4]
	char str_data[10];

	sprintf(str_data, "%.3f", data);
 8001b18:	6838      	ldr	r0, [r7, #0]
 8001b1a:	f7fe fc85 	bl	8000428 <__aeabi_f2d>
 8001b1e:	4602      	mov	r2, r0
 8001b20:	460b      	mov	r3, r1
 8001b22:	f107 000c 	add.w	r0, r7, #12
 8001b26:	490b      	ldr	r1, [pc, #44]	@ (8001b54 <myOLED_float+0x4c>)
 8001b28:	f008 f8b4 	bl	8009c94 <siprintf>
	ssd1306_SetCursor(cursorX, cursorY);
 8001b2c:	88fb      	ldrh	r3, [r7, #6]
 8001b2e:	b2db      	uxtb	r3, r3
 8001b30:	88ba      	ldrh	r2, [r7, #4]
 8001b32:	b2d2      	uxtb	r2, r2
 8001b34:	4611      	mov	r1, r2
 8001b36:	4618      	mov	r0, r3
 8001b38:	f007 f85c 	bl	8008bf4 <ssd1306_SetCursor>
	ssd1306_WriteString(str_data, Font_7x10, White);
 8001b3c:	4a06      	ldr	r2, [pc, #24]	@ (8001b58 <myOLED_float+0x50>)
 8001b3e:	f107 000c 	add.w	r0, r7, #12
 8001b42:	2301      	movs	r3, #1
 8001b44:	ca06      	ldmia	r2, {r1, r2}
 8001b46:	f007 f82f 	bl	8008ba8 <ssd1306_WriteString>
}
 8001b4a:	bf00      	nop
 8001b4c:	3718      	adds	r7, #24
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	0800d538 	.word	0x0800d538
 8001b58:	20000024 	.word	0x20000024

08001b5c <myOLED_float_big>:

void myOLED_float_big(uint16_t cursorX, uint16_t cursorY, float data){
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b086      	sub	sp, #24
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	4603      	mov	r3, r0
 8001b64:	603a      	str	r2, [r7, #0]
 8001b66:	80fb      	strh	r3, [r7, #6]
 8001b68:	460b      	mov	r3, r1
 8001b6a:	80bb      	strh	r3, [r7, #4]
	char str_data[10];

	sprintf(str_data, "%.3f", data);
 8001b6c:	6838      	ldr	r0, [r7, #0]
 8001b6e:	f7fe fc5b 	bl	8000428 <__aeabi_f2d>
 8001b72:	4602      	mov	r2, r0
 8001b74:	460b      	mov	r3, r1
 8001b76:	f107 000c 	add.w	r0, r7, #12
 8001b7a:	490b      	ldr	r1, [pc, #44]	@ (8001ba8 <myOLED_float_big+0x4c>)
 8001b7c:	f008 f88a 	bl	8009c94 <siprintf>
	ssd1306_SetCursor(cursorX, cursorY);
 8001b80:	88fb      	ldrh	r3, [r7, #6]
 8001b82:	b2db      	uxtb	r3, r3
 8001b84:	88ba      	ldrh	r2, [r7, #4]
 8001b86:	b2d2      	uxtb	r2, r2
 8001b88:	4611      	mov	r1, r2
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f007 f832 	bl	8008bf4 <ssd1306_SetCursor>
	ssd1306_WriteString(str_data, Font_11x18, White);
 8001b90:	4a06      	ldr	r2, [pc, #24]	@ (8001bac <myOLED_float_big+0x50>)
 8001b92:	f107 000c 	add.w	r0, r7, #12
 8001b96:	2301      	movs	r3, #1
 8001b98:	ca06      	ldmia	r2, {r1, r2}
 8001b9a:	f007 f805 	bl	8008ba8 <ssd1306_WriteString>
}
 8001b9e:	bf00      	nop
 8001ba0:	3718      	adds	r7, #24
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	0800d538 	.word	0x0800d538
 8001bac:	2000002c 	.word	0x2000002c

08001bb0 <myOLED_int>:

void myOLED_int(uint16_t cursorX, uint16_t cursorY, uint16_t data){
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b086      	sub	sp, #24
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	80fb      	strh	r3, [r7, #6]
 8001bba:	460b      	mov	r3, r1
 8001bbc:	80bb      	strh	r3, [r7, #4]
 8001bbe:	4613      	mov	r3, r2
 8001bc0:	807b      	strh	r3, [r7, #2]
	char str_data[10];

	sprintf(str_data, "%u", data);
 8001bc2:	887a      	ldrh	r2, [r7, #2]
 8001bc4:	f107 030c 	add.w	r3, r7, #12
 8001bc8:	490b      	ldr	r1, [pc, #44]	@ (8001bf8 <myOLED_int+0x48>)
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f008 f862 	bl	8009c94 <siprintf>
	ssd1306_SetCursor(cursorX, cursorY);
 8001bd0:	88fb      	ldrh	r3, [r7, #6]
 8001bd2:	b2db      	uxtb	r3, r3
 8001bd4:	88ba      	ldrh	r2, [r7, #4]
 8001bd6:	b2d2      	uxtb	r2, r2
 8001bd8:	4611      	mov	r1, r2
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f007 f80a 	bl	8008bf4 <ssd1306_SetCursor>
	ssd1306_WriteString(str_data, Font_7x10, White);
 8001be0:	4a06      	ldr	r2, [pc, #24]	@ (8001bfc <myOLED_int+0x4c>)
 8001be2:	f107 000c 	add.w	r0, r7, #12
 8001be6:	2301      	movs	r3, #1
 8001be8:	ca06      	ldmia	r2, {r1, r2}
 8001bea:	f006 ffdd 	bl	8008ba8 <ssd1306_WriteString>
}
 8001bee:	bf00      	nop
 8001bf0:	3718      	adds	r7, #24
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	0800d540 	.word	0x0800d540
 8001bfc:	20000024 	.word	0x20000024

08001c00 <update_display>:
	ssd1306_WriteString(str_data, Font_7x10, White);
}


// Update Display
void update_display(){
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b082      	sub	sp, #8
 8001c04:	af00      	add	r7, sp, #0
	static Menu_State_e last_state = HOME_SCREEN;
	static bool first_update = true;
	force_update = (current_state != last_state) || first_update || !output_on_flag;
 8001c06:	4b40      	ldr	r3, [pc, #256]	@ (8001d08 <update_display+0x108>)
 8001c08:	781a      	ldrb	r2, [r3, #0]
 8001c0a:	4b40      	ldr	r3, [pc, #256]	@ (8001d0c <update_display+0x10c>)
 8001c0c:	781b      	ldrb	r3, [r3, #0]
 8001c0e:	429a      	cmp	r2, r3
 8001c10:	d10a      	bne.n	8001c28 <update_display+0x28>
 8001c12:	4b3f      	ldr	r3, [pc, #252]	@ (8001d10 <update_display+0x110>)
 8001c14:	781b      	ldrb	r3, [r3, #0]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d106      	bne.n	8001c28 <update_display+0x28>
 8001c1a:	4b3e      	ldr	r3, [pc, #248]	@ (8001d14 <update_display+0x114>)
 8001c1c:	781b      	ldrb	r3, [r3, #0]
 8001c1e:	f083 0301 	eor.w	r3, r3, #1
 8001c22:	b2db      	uxtb	r3, r3
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d001      	beq.n	8001c2c <update_display+0x2c>
 8001c28:	2301      	movs	r3, #1
 8001c2a:	e000      	b.n	8001c2e <update_display+0x2e>
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	f003 0301 	and.w	r3, r3, #1
 8001c32:	b2da      	uxtb	r2, r3
 8001c34:	4b38      	ldr	r3, [pc, #224]	@ (8001d18 <update_display+0x118>)
 8001c36:	701a      	strb	r2, [r3, #0]

	if(force_update){
 8001c38:	4b37      	ldr	r3, [pc, #220]	@ (8001d18 <update_display+0x118>)
 8001c3a:	781b      	ldrb	r3, [r3, #0]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d00a      	beq.n	8001c56 <update_display+0x56>
		last_state = current_state;
 8001c40:	4b31      	ldr	r3, [pc, #196]	@ (8001d08 <update_display+0x108>)
 8001c42:	781a      	ldrb	r2, [r3, #0]
 8001c44:	4b31      	ldr	r3, [pc, #196]	@ (8001d0c <update_display+0x10c>)
 8001c46:	701a      	strb	r2, [r3, #0]
		last_cursor_position = -1; // Force full update on state change
 8001c48:	4b34      	ldr	r3, [pc, #208]	@ (8001d1c <update_display+0x11c>)
 8001c4a:	f04f 32ff 	mov.w	r2, #4294967295
 8001c4e:	601a      	str	r2, [r3, #0]
		first_update = false;
 8001c50:	4b2f      	ldr	r3, [pc, #188]	@ (8001d10 <update_display+0x110>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	701a      	strb	r2, [r3, #0]
	}

	// Handle cursor position updates separately
	bool cursor_changed = (cursor_position != last_cursor_position);
 8001c56:	4b32      	ldr	r3, [pc, #200]	@ (8001d20 <update_display+0x120>)
 8001c58:	681a      	ldr	r2, [r3, #0]
 8001c5a:	4b30      	ldr	r3, [pc, #192]	@ (8001d1c <update_display+0x11c>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	429a      	cmp	r2, r3
 8001c60:	bf14      	ite	ne
 8001c62:	2301      	movne	r3, #1
 8001c64:	2300      	moveq	r3, #0
 8001c66:	71fb      	strb	r3, [r7, #7]

	switch(current_state){
 8001c68:	4b27      	ldr	r3, [pc, #156]	@ (8001d08 <update_display+0x108>)
 8001c6a:	781b      	ldrb	r3, [r3, #0]
 8001c6c:	2b03      	cmp	r3, #3
 8001c6e:	d842      	bhi.n	8001cf6 <update_display+0xf6>
 8001c70:	a201      	add	r2, pc, #4	@ (adr r2, 8001c78 <update_display+0x78>)
 8001c72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c76:	bf00      	nop
 8001c78:	08001c89 	.word	0x08001c89
 8001c7c:	08001cab 	.word	0x08001cab
 8001c80:	08001ccd 	.word	0x08001ccd
 8001c84:	08001cef 	.word	0x08001cef
	case HOME_SCREEN:
		display_home_screen(force_update || cursor_changed);
 8001c88:	4b23      	ldr	r3, [pc, #140]	@ (8001d18 <update_display+0x118>)
 8001c8a:	781b      	ldrb	r3, [r3, #0]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d102      	bne.n	8001c96 <update_display+0x96>
 8001c90:	79fb      	ldrb	r3, [r7, #7]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d001      	beq.n	8001c9a <update_display+0x9a>
 8001c96:	2301      	movs	r3, #1
 8001c98:	e000      	b.n	8001c9c <update_display+0x9c>
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	f003 0301 	and.w	r3, r3, #1
 8001ca0:	b2db      	uxtb	r3, r3
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f000 f83e 	bl	8001d24 <display_home_screen>
		break;
 8001ca8:	e026      	b.n	8001cf8 <update_display+0xf8>
	case MODE_SELECTION:
		display_mode_selection(force_update || cursor_changed);
 8001caa:	4b1b      	ldr	r3, [pc, #108]	@ (8001d18 <update_display+0x118>)
 8001cac:	781b      	ldrb	r3, [r3, #0]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d102      	bne.n	8001cb8 <update_display+0xb8>
 8001cb2:	79fb      	ldrb	r3, [r7, #7]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d001      	beq.n	8001cbc <update_display+0xbc>
 8001cb8:	2301      	movs	r3, #1
 8001cba:	e000      	b.n	8001cbe <update_display+0xbe>
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	f003 0301 	and.w	r3, r3, #1
 8001cc2:	b2db      	uxtb	r3, r3
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f000 f97f 	bl	8001fc8 <display_mode_selection>
		break;
 8001cca:	e015      	b.n	8001cf8 <update_display+0xf8>
	case PARAMETER_SETTING:
		display_parameter_setting(force_update || cursor_changed);
 8001ccc:	4b12      	ldr	r3, [pc, #72]	@ (8001d18 <update_display+0x118>)
 8001cce:	781b      	ldrb	r3, [r3, #0]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d102      	bne.n	8001cda <update_display+0xda>
 8001cd4:	79fb      	ldrb	r3, [r7, #7]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d001      	beq.n	8001cde <update_display+0xde>
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e000      	b.n	8001ce0 <update_display+0xe0>
 8001cde:	2300      	movs	r3, #0
 8001ce0:	f003 0301 	and.w	r3, r3, #1
 8001ce4:	b2db      	uxtb	r3, r3
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f000 f9d8 	bl	800209c <display_parameter_setting>
		break;
 8001cec:	e004      	b.n	8001cf8 <update_display+0xf8>
	case RETURN_TO_HOME:
		current_state = HOME_SCREEN;
 8001cee:	4b06      	ldr	r3, [pc, #24]	@ (8001d08 <update_display+0x108>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	701a      	strb	r2, [r3, #0]
		break;
 8001cf4:	e000      	b.n	8001cf8 <update_display+0xf8>
	default:
		break;
 8001cf6:	bf00      	nop
	}
	last_cursor_position = cursor_position;
 8001cf8:	4b09      	ldr	r3, [pc, #36]	@ (8001d20 <update_display+0x120>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a07      	ldr	r2, [pc, #28]	@ (8001d1c <update_display+0x11c>)
 8001cfe:	6013      	str	r3, [r2, #0]
}
 8001d00:	bf00      	nop
 8001d02:	3708      	adds	r7, #8
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	20000383 	.word	0x20000383
 8001d0c:	200003c0 	.word	0x200003c0
 8001d10:	20000014 	.word	0x20000014
 8001d14:	200003b1 	.word	0x200003b1
 8001d18:	200003b2 	.word	0x200003b2
 8001d1c:	20000010 	.word	0x20000010
 8001d20:	2000039c 	.word	0x2000039c

08001d24 <display_home_screen>:

// Display Home Screen
void display_home_screen(bool force_update){
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b088      	sub	sp, #32
 8001d28:	af02      	add	r7, sp, #8
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	71fb      	strb	r3, [r7, #7]
	if(force_update || output_on_flag){
 8001d2e:	79fb      	ldrb	r3, [r7, #7]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d103      	bne.n	8001d3c <display_home_screen+0x18>
 8001d34:	4b8b      	ldr	r3, [pc, #556]	@ (8001f64 <display_home_screen+0x240>)
 8001d36:	781b      	ldrb	r3, [r3, #0]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d075      	beq.n	8001e28 <display_home_screen+0x104>
		ssd1306_Fill(Black);			// Clear the display before printing
 8001d3c:	2000      	movs	r0, #0
 8001d3e:	f006 fe0f 	bl	8008960 <ssd1306_Fill>
		myOLED_char_big(0, 0, "V:");
 8001d42:	4a89      	ldr	r2, [pc, #548]	@ (8001f68 <display_home_screen+0x244>)
 8001d44:	2100      	movs	r1, #0
 8001d46:	2000      	movs	r0, #0
 8001d48:	f7ff fec2 	bl	8001ad0 <myOLED_char_big>
		myOLED_float_big(21, 0, voltage);
 8001d4c:	4b87      	ldr	r3, [pc, #540]	@ (8001f6c <display_home_screen+0x248>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4618      	mov	r0, r3
 8001d52:	f7fe ffbf 	bl	8000cd4 <__aeabi_ui2f>
 8001d56:	4603      	mov	r3, r0
 8001d58:	461a      	mov	r2, r3
 8001d5a:	2100      	movs	r1, #0
 8001d5c:	2015      	movs	r0, #21
 8001d5e:	f7ff fefd 	bl	8001b5c <myOLED_float_big>
		myOLED_char_big(0, 18, "C:");
 8001d62:	4a83      	ldr	r2, [pc, #524]	@ (8001f70 <display_home_screen+0x24c>)
 8001d64:	2112      	movs	r1, #18
 8001d66:	2000      	movs	r0, #0
 8001d68:	f7ff feb2 	bl	8001ad0 <myOLED_char_big>
		myOLED_float_big(21, 18, curr);
 8001d6c:	4b81      	ldr	r3, [pc, #516]	@ (8001f74 <display_home_screen+0x250>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4618      	mov	r0, r3
 8001d72:	f7fe ffb3 	bl	8000cdc <__aeabi_i2f>
 8001d76:	4603      	mov	r3, r0
 8001d78:	461a      	mov	r2, r3
 8001d7a:	2112      	movs	r1, #18
 8001d7c:	2015      	movs	r0, #21
 8001d7e:	f7ff feed 	bl	8001b5c <myOLED_float_big>
		myOLED_char_big(0, 36, "Q:");
 8001d82:	4a7d      	ldr	r2, [pc, #500]	@ (8001f78 <display_home_screen+0x254>)
 8001d84:	2124      	movs	r1, #36	@ 0x24
 8001d86:	2000      	movs	r0, #0
 8001d88:	f7ff fea2 	bl	8001ad0 <myOLED_char_big>
		myOLED_float_big(21, 36, charge);
 8001d8c:	4b7b      	ldr	r3, [pc, #492]	@ (8001f7c <display_home_screen+0x258>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4618      	mov	r0, r3
 8001d92:	f7fe ff9f 	bl	8000cd4 <__aeabi_ui2f>
 8001d96:	4603      	mov	r3, r0
 8001d98:	461a      	mov	r2, r3
 8001d9a:	2124      	movs	r1, #36	@ 0x24
 8001d9c:	2015      	movs	r0, #21
 8001d9e:	f7ff fedd 	bl	8001b5c <myOLED_float_big>
		myOLED_char(0, 54, "t:");
 8001da2:	4a77      	ldr	r2, [pc, #476]	@ (8001f80 <display_home_screen+0x25c>)
 8001da4:	2136      	movs	r1, #54	@ 0x36
 8001da6:	2000      	movs	r0, #0
 8001da8:	f7ff fe76 	bl	8001a98 <myOLED_char>
		myOLED_int(15, 54, temperature);
 8001dac:	4b75      	ldr	r3, [pc, #468]	@ (8001f84 <display_home_screen+0x260>)
 8001dae:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001db2:	b29b      	uxth	r3, r3
 8001db4:	461a      	mov	r2, r3
 8001db6:	2136      	movs	r1, #54	@ 0x36
 8001db8:	200f      	movs	r0, #15
 8001dba:	f7ff fef9 	bl	8001bb0 <myOLED_int>
		ssd1306_Line(78, 0, 78, 50, White);	// Draw line to separate the values and options
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	9300      	str	r3, [sp, #0]
 8001dc2:	2332      	movs	r3, #50	@ 0x32
 8001dc4:	224e      	movs	r2, #78	@ 0x4e
 8001dc6:	2100      	movs	r1, #0
 8001dc8:	204e      	movs	r0, #78	@ 0x4e
 8001dca:	f006 ff2b 	bl	8008c24 <ssd1306_Line>
		myOLED_char(90, 0, "<SET>");			// SET MODE
 8001dce:	4a6e      	ldr	r2, [pc, #440]	@ (8001f88 <display_home_screen+0x264>)
 8001dd0:	2100      	movs	r1, #0
 8001dd2:	205a      	movs	r0, #90	@ 0x5a
 8001dd4:	f7ff fe60 	bl	8001a98 <myOLED_char>
		myOLED_char(90, 10, "<ON>");			// Turn ON LOAD
 8001dd8:	4a6c      	ldr	r2, [pc, #432]	@ (8001f8c <display_home_screen+0x268>)
 8001dda:	210a      	movs	r1, #10
 8001ddc:	205a      	movs	r0, #90	@ 0x5a
 8001dde:	f7ff fe5b 	bl	8001a98 <myOLED_char>
		myOLED_char(90, 20, "<RST>");			// Reset the LOAD
 8001de2:	4a6b      	ldr	r2, [pc, #428]	@ (8001f90 <display_home_screen+0x26c>)
 8001de4:	2114      	movs	r1, #20
 8001de6:	205a      	movs	r0, #90	@ 0x5a
 8001de8:	f7ff fe56 	bl	8001a98 <myOLED_char>

		// Show ON or OFF bitmap on display for LOAD status
		if(output_on_flag){
 8001dec:	4b5d      	ldr	r3, [pc, #372]	@ (8001f64 <display_home_screen+0x240>)
 8001dee:	781b      	ldrb	r3, [r3, #0]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d00f      	beq.n	8001e14 <display_home_screen+0xf0>
//			output_on_flag = false;									// Change the flag state
			myOLED_char(90, 10, "<OFF>");							// Print OFF in ON position if button is pressed
 8001df4:	4a67      	ldr	r2, [pc, #412]	@ (8001f94 <display_home_screen+0x270>)
 8001df6:	210a      	movs	r1, #10
 8001df8:	205a      	movs	r0, #90	@ 0x5a
 8001dfa:	f7ff fe4d 	bl	8001a98 <myOLED_char>
			ssd1306_DrawBitmap(90, 31, ON_BITMAP, 29, 16, White);	//	Draw ON bitmap
 8001dfe:	2301      	movs	r3, #1
 8001e00:	9301      	str	r3, [sp, #4]
 8001e02:	2310      	movs	r3, #16
 8001e04:	9300      	str	r3, [sp, #0]
 8001e06:	231d      	movs	r3, #29
 8001e08:	4a63      	ldr	r2, [pc, #396]	@ (8001f98 <display_home_screen+0x274>)
 8001e0a:	211f      	movs	r1, #31
 8001e0c:	205a      	movs	r0, #90	@ 0x5a
 8001e0e:	f006 ff75 	bl	8008cfc <ssd1306_DrawBitmap>
 8001e12:	e009      	b.n	8001e28 <display_home_screen+0x104>
		}else{
			ssd1306_DrawBitmap(90, 31, OFF_BITMAP, 29, 16, White);	// Draw OFF bitmap
 8001e14:	2301      	movs	r3, #1
 8001e16:	9301      	str	r3, [sp, #4]
 8001e18:	2310      	movs	r3, #16
 8001e1a:	9300      	str	r3, [sp, #0]
 8001e1c:	231d      	movs	r3, #29
 8001e1e:	4a5f      	ldr	r2, [pc, #380]	@ (8001f9c <display_home_screen+0x278>)
 8001e20:	211f      	movs	r1, #31
 8001e22:	205a      	movs	r0, #90	@ 0x5a
 8001e24:	f006 ff6a 	bl	8008cfc <ssd1306_DrawBitmap>
		}
	}

	// Update cursor only
	uint8_t scroll_num = 3;
 8001e28:	2303      	movs	r3, #3
 8001e2a:	74fb      	strb	r3, [r7, #19]
	for(int i = 0; i < scroll_num; i++){
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	617b      	str	r3, [r7, #20]
 8001e30:	e020      	b.n	8001e74 <display_home_screen+0x150>
		if(i == cursor_position){
 8001e32:	4b5b      	ldr	r3, [pc, #364]	@ (8001fa0 <display_home_screen+0x27c>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	697a      	ldr	r2, [r7, #20]
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	d10c      	bne.n	8001e56 <display_home_screen+0x132>
			myOLED_char(82, i * 10, ">");
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	b29b      	uxth	r3, r3
 8001e40:	461a      	mov	r2, r3
 8001e42:	0092      	lsls	r2, r2, #2
 8001e44:	4413      	add	r3, r2
 8001e46:	005b      	lsls	r3, r3, #1
 8001e48:	b29b      	uxth	r3, r3
 8001e4a:	4a56      	ldr	r2, [pc, #344]	@ (8001fa4 <display_home_screen+0x280>)
 8001e4c:	4619      	mov	r1, r3
 8001e4e:	2052      	movs	r0, #82	@ 0x52
 8001e50:	f7ff fe22 	bl	8001a98 <myOLED_char>
 8001e54:	e00b      	b.n	8001e6e <display_home_screen+0x14a>
		}else{
			myOLED_char(82, i * 10, " ");
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	b29b      	uxth	r3, r3
 8001e5a:	461a      	mov	r2, r3
 8001e5c:	0092      	lsls	r2, r2, #2
 8001e5e:	4413      	add	r3, r2
 8001e60:	005b      	lsls	r3, r3, #1
 8001e62:	b29b      	uxth	r3, r3
 8001e64:	4a50      	ldr	r2, [pc, #320]	@ (8001fa8 <display_home_screen+0x284>)
 8001e66:	4619      	mov	r1, r3
 8001e68:	2052      	movs	r0, #82	@ 0x52
 8001e6a:	f7ff fe15 	bl	8001a98 <myOLED_char>
	for(int i = 0; i < scroll_num; i++){
 8001e6e:	697b      	ldr	r3, [r7, #20]
 8001e70:	3301      	adds	r3, #1
 8001e72:	617b      	str	r3, [r7, #20]
 8001e74:	7cfb      	ldrb	r3, [r7, #19]
 8001e76:	697a      	ldr	r2, [r7, #20]
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	dbda      	blt.n	8001e32 <display_home_screen+0x10e>
		}
	}

	// Display the param value and mode if it is set
	if(current_state == 0){
 8001e7c:	4b4b      	ldr	r3, [pc, #300]	@ (8001fac <display_home_screen+0x288>)
 8001e7e:	781b      	ldrb	r3, [r3, #0]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d168      	bne.n	8001f56 <display_home_screen+0x232>
		uint8_t x_mode = 50;
 8001e84:	2332      	movs	r3, #50	@ 0x32
 8001e86:	74bb      	strb	r3, [r7, #18]
		uint8_t y_mode = 54;
 8001e88:	2336      	movs	r3, #54	@ 0x36
 8001e8a:	747b      	strb	r3, [r7, #17]
		uint8_t x_val = 80;
 8001e8c:	2350      	movs	r3, #80	@ 0x50
 8001e8e:	743b      	strb	r3, [r7, #16]
		uint8_t y_val = 54;
 8001e90:	2336      	movs	r3, #54	@ 0x36
 8001e92:	73fb      	strb	r3, [r7, #15]

		ssd1306_Line(45, y_mode, 45, 64, White);		// Draw line
 8001e94:	7c79      	ldrb	r1, [r7, #17]
 8001e96:	2301      	movs	r3, #1
 8001e98:	9300      	str	r3, [sp, #0]
 8001e9a:	2340      	movs	r3, #64	@ 0x40
 8001e9c:	222d      	movs	r2, #45	@ 0x2d
 8001e9e:	202d      	movs	r0, #45	@ 0x2d
 8001ea0:	f006 fec0 	bl	8008c24 <ssd1306_Line>
		switch(mode_index){
 8001ea4:	4b42      	ldr	r3, [pc, #264]	@ (8001fb0 <display_home_screen+0x28c>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	2b03      	cmp	r3, #3
 8001eaa:	d853      	bhi.n	8001f54 <display_home_screen+0x230>
 8001eac:	a201      	add	r2, pc, #4	@ (adr r2, 8001eb4 <display_home_screen+0x190>)
 8001eae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001eb2:	bf00      	nop
 8001eb4:	08001ec5 	.word	0x08001ec5
 8001eb8:	08001ee9 	.word	0x08001ee9
 8001ebc:	08001f0d 	.word	0x08001f0d
 8001ec0:	08001f31 	.word	0x08001f31
		case 0:
			myOLED_char(x_mode, y_mode, "CC:");
 8001ec4:	7cbb      	ldrb	r3, [r7, #18]
 8001ec6:	b29b      	uxth	r3, r3
 8001ec8:	7c7a      	ldrb	r2, [r7, #17]
 8001eca:	b291      	uxth	r1, r2
 8001ecc:	4a39      	ldr	r2, [pc, #228]	@ (8001fb4 <display_home_screen+0x290>)
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f7ff fde2 	bl	8001a98 <myOLED_char>
			myOLED_float(x_val, y_val, param_mode.current);
 8001ed4:	7c3b      	ldrb	r3, [r7, #16]
 8001ed6:	b29b      	uxth	r3, r3
 8001ed8:	7bfa      	ldrb	r2, [r7, #15]
 8001eda:	b291      	uxth	r1, r2
 8001edc:	4a36      	ldr	r2, [pc, #216]	@ (8001fb8 <display_home_screen+0x294>)
 8001ede:	6852      	ldr	r2, [r2, #4]
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f7ff fe11 	bl	8001b08 <myOLED_float>
			break;
 8001ee6:	e036      	b.n	8001f56 <display_home_screen+0x232>
		case 1:
			myOLED_char(x_mode, y_mode, "CV:");
 8001ee8:	7cbb      	ldrb	r3, [r7, #18]
 8001eea:	b29b      	uxth	r3, r3
 8001eec:	7c7a      	ldrb	r2, [r7, #17]
 8001eee:	b291      	uxth	r1, r2
 8001ef0:	4a32      	ldr	r2, [pc, #200]	@ (8001fbc <display_home_screen+0x298>)
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f7ff fdd0 	bl	8001a98 <myOLED_char>
			myOLED_float(x_val, y_val, param_mode.voltage);
 8001ef8:	7c3b      	ldrb	r3, [r7, #16]
 8001efa:	b29b      	uxth	r3, r3
 8001efc:	7bfa      	ldrb	r2, [r7, #15]
 8001efe:	b291      	uxth	r1, r2
 8001f00:	4a2d      	ldr	r2, [pc, #180]	@ (8001fb8 <display_home_screen+0x294>)
 8001f02:	6812      	ldr	r2, [r2, #0]
 8001f04:	4618      	mov	r0, r3
 8001f06:	f7ff fdff 	bl	8001b08 <myOLED_float>
			break;
 8001f0a:	e024      	b.n	8001f56 <display_home_screen+0x232>
		case 2:
			myOLED_char(x_mode, y_mode, "CP:");
 8001f0c:	7cbb      	ldrb	r3, [r7, #18]
 8001f0e:	b29b      	uxth	r3, r3
 8001f10:	7c7a      	ldrb	r2, [r7, #17]
 8001f12:	b291      	uxth	r1, r2
 8001f14:	4a2a      	ldr	r2, [pc, #168]	@ (8001fc0 <display_home_screen+0x29c>)
 8001f16:	4618      	mov	r0, r3
 8001f18:	f7ff fdbe 	bl	8001a98 <myOLED_char>
			myOLED_float(x_val, y_val, param_mode.power);
 8001f1c:	7c3b      	ldrb	r3, [r7, #16]
 8001f1e:	b29b      	uxth	r3, r3
 8001f20:	7bfa      	ldrb	r2, [r7, #15]
 8001f22:	b291      	uxth	r1, r2
 8001f24:	4a24      	ldr	r2, [pc, #144]	@ (8001fb8 <display_home_screen+0x294>)
 8001f26:	6892      	ldr	r2, [r2, #8]
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f7ff fded 	bl	8001b08 <myOLED_float>
			break;
 8001f2e:	e012      	b.n	8001f56 <display_home_screen+0x232>
		case 3:
			myOLED_char(x_mode, y_mode, "CR:");
 8001f30:	7cbb      	ldrb	r3, [r7, #18]
 8001f32:	b29b      	uxth	r3, r3
 8001f34:	7c7a      	ldrb	r2, [r7, #17]
 8001f36:	b291      	uxth	r1, r2
 8001f38:	4a22      	ldr	r2, [pc, #136]	@ (8001fc4 <display_home_screen+0x2a0>)
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f7ff fdac 	bl	8001a98 <myOLED_char>
			myOLED_float(x_val, y_val, param_mode.resistance);
 8001f40:	7c3b      	ldrb	r3, [r7, #16]
 8001f42:	b29b      	uxth	r3, r3
 8001f44:	7bfa      	ldrb	r2, [r7, #15]
 8001f46:	b291      	uxth	r1, r2
 8001f48:	4a1b      	ldr	r2, [pc, #108]	@ (8001fb8 <display_home_screen+0x294>)
 8001f4a:	68d2      	ldr	r2, [r2, #12]
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f7ff fddb 	bl	8001b08 <myOLED_float>
			break;
 8001f52:	e000      	b.n	8001f56 <display_home_screen+0x232>
		default:
			break;
 8001f54:	bf00      	nop
		}
	}

	ssd1306_UpdateScreen();
 8001f56:	f006 fd25 	bl	80089a4 <ssd1306_UpdateScreen>
}
 8001f5a:	bf00      	nop
 8001f5c:	3718      	adds	r7, #24
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	200003b1 	.word	0x200003b1
 8001f68:	0800d548 	.word	0x0800d548
 8001f6c:	20000348 	.word	0x20000348
 8001f70:	0800d54c 	.word	0x0800d54c
 8001f74:	2000033c 	.word	0x2000033c
 8001f78:	0800d550 	.word	0x0800d550
 8001f7c:	2000034c 	.word	0x2000034c
 8001f80:	0800d554 	.word	0x0800d554
 8001f84:	20000350 	.word	0x20000350
 8001f88:	0800d558 	.word	0x0800d558
 8001f8c:	0800d560 	.word	0x0800d560
 8001f90:	0800d568 	.word	0x0800d568
 8001f94:	0800d570 	.word	0x0800d570
 8001f98:	0800d60c 	.word	0x0800d60c
 8001f9c:	0800d650 	.word	0x0800d650
 8001fa0:	2000039c 	.word	0x2000039c
 8001fa4:	0800d578 	.word	0x0800d578
 8001fa8:	0800d57c 	.word	0x0800d57c
 8001fac:	20000383 	.word	0x20000383
 8001fb0:	20000008 	.word	0x20000008
 8001fb4:	0800d580 	.word	0x0800d580
 8001fb8:	20000384 	.word	0x20000384
 8001fbc:	0800d584 	.word	0x0800d584
 8001fc0:	0800d588 	.word	0x0800d588
 8001fc4:	0800d58c 	.word	0x0800d58c

08001fc8 <display_mode_selection>:

// Display Mode Selection Screen
void display_mode_selection(bool force_update){
 8001fc8:	b590      	push	{r4, r7, lr}
 8001fca:	b08b      	sub	sp, #44	@ 0x2c
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	4603      	mov	r3, r0
 8001fd0:	71fb      	strb	r3, [r7, #7]
	const char *modes[] = { "CC", "CV", "CP", "CR" };
 8001fd2:	4b2d      	ldr	r3, [pc, #180]	@ (8002088 <display_mode_selection+0xc0>)
 8001fd4:	f107 040c 	add.w	r4, r7, #12
 8001fd8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001fda:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if(force_update){
 8001fde:	79fb      	ldrb	r3, [r7, #7]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d01c      	beq.n	800201e <display_mode_selection+0x56>
		ssd1306_Fill(Black); // Clear the screen
 8001fe4:	2000      	movs	r0, #0
 8001fe6:	f006 fcbb 	bl	8008960 <ssd1306_Fill>
		for(int i = 0; i < 4; i++){
 8001fea:	2300      	movs	r3, #0
 8001fec:	627b      	str	r3, [r7, #36]	@ 0x24
 8001fee:	e013      	b.n	8002018 <display_mode_selection+0x50>
			myOLED_char(15, i * 10, (char*) modes[i]); // Print modes in column
 8001ff0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ff2:	b29b      	uxth	r3, r3
 8001ff4:	461a      	mov	r2, r3
 8001ff6:	0092      	lsls	r2, r2, #2
 8001ff8:	4413      	add	r3, r2
 8001ffa:	005b      	lsls	r3, r3, #1
 8001ffc:	b299      	uxth	r1, r3
 8001ffe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002000:	009b      	lsls	r3, r3, #2
 8002002:	3328      	adds	r3, #40	@ 0x28
 8002004:	443b      	add	r3, r7
 8002006:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 800200a:	461a      	mov	r2, r3
 800200c:	200f      	movs	r0, #15
 800200e:	f7ff fd43 	bl	8001a98 <myOLED_char>
		for(int i = 0; i < 4; i++){
 8002012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002014:	3301      	adds	r3, #1
 8002016:	627b      	str	r3, [r7, #36]	@ 0x24
 8002018:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800201a:	2b03      	cmp	r3, #3
 800201c:	dde8      	ble.n	8001ff0 <display_mode_selection+0x28>
		}
	}

	// Update cursor only
	uint8_t num_of_modes = 4;
 800201e:	2304      	movs	r3, #4
 8002020:	77fb      	strb	r3, [r7, #31]
	for(int i = 0; i < num_of_modes; i++){
 8002022:	2300      	movs	r3, #0
 8002024:	623b      	str	r3, [r7, #32]
 8002026:	e020      	b.n	800206a <display_mode_selection+0xa2>
		if(i == cursor_position){
 8002028:	4b18      	ldr	r3, [pc, #96]	@ (800208c <display_mode_selection+0xc4>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	6a3a      	ldr	r2, [r7, #32]
 800202e:	429a      	cmp	r2, r3
 8002030:	d10c      	bne.n	800204c <display_mode_selection+0x84>
			myOLED_char(0, i * 10, "->");
 8002032:	6a3b      	ldr	r3, [r7, #32]
 8002034:	b29b      	uxth	r3, r3
 8002036:	461a      	mov	r2, r3
 8002038:	0092      	lsls	r2, r2, #2
 800203a:	4413      	add	r3, r2
 800203c:	005b      	lsls	r3, r3, #1
 800203e:	b29b      	uxth	r3, r3
 8002040:	4a13      	ldr	r2, [pc, #76]	@ (8002090 <display_mode_selection+0xc8>)
 8002042:	4619      	mov	r1, r3
 8002044:	2000      	movs	r0, #0
 8002046:	f7ff fd27 	bl	8001a98 <myOLED_char>
 800204a:	e00b      	b.n	8002064 <display_mode_selection+0x9c>
		}else{
			myOLED_char(0, i * 10, "  ");
 800204c:	6a3b      	ldr	r3, [r7, #32]
 800204e:	b29b      	uxth	r3, r3
 8002050:	461a      	mov	r2, r3
 8002052:	0092      	lsls	r2, r2, #2
 8002054:	4413      	add	r3, r2
 8002056:	005b      	lsls	r3, r3, #1
 8002058:	b29b      	uxth	r3, r3
 800205a:	4a0e      	ldr	r2, [pc, #56]	@ (8002094 <display_mode_selection+0xcc>)
 800205c:	4619      	mov	r1, r3
 800205e:	2000      	movs	r0, #0
 8002060:	f7ff fd1a 	bl	8001a98 <myOLED_char>
	for(int i = 0; i < num_of_modes; i++){
 8002064:	6a3b      	ldr	r3, [r7, #32]
 8002066:	3301      	adds	r3, #1
 8002068:	623b      	str	r3, [r7, #32]
 800206a:	7ffb      	ldrb	r3, [r7, #31]
 800206c:	6a3a      	ldr	r2, [r7, #32]
 800206e:	429a      	cmp	r2, r3
 8002070:	dbda      	blt.n	8002028 <display_mode_selection+0x60>
		}
	}

	myOLED_char(5, 50, "<SELECT THE MODE>");
 8002072:	4a09      	ldr	r2, [pc, #36]	@ (8002098 <display_mode_selection+0xd0>)
 8002074:	2132      	movs	r1, #50	@ 0x32
 8002076:	2005      	movs	r0, #5
 8002078:	f7ff fd0e 	bl	8001a98 <myOLED_char>
	ssd1306_UpdateScreen();
 800207c:	f006 fc92 	bl	80089a4 <ssd1306_UpdateScreen>
}
 8002080:	bf00      	nop
 8002082:	372c      	adds	r7, #44	@ 0x2c
 8002084:	46bd      	mov	sp, r7
 8002086:	bd90      	pop	{r4, r7, pc}
 8002088:	0800d5b8 	.word	0x0800d5b8
 800208c:	2000039c 	.word	0x2000039c
 8002090:	0800d590 	.word	0x0800d590
 8002094:	0800d534 	.word	0x0800d534
 8002098:	0800d594 	.word	0x0800d594

0800209c <display_parameter_setting>:

void display_parameter_setting(bool force_update){
 800209c:	b580      	push	{r7, lr}
 800209e:	b084      	sub	sp, #16
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	4603      	mov	r3, r0
 80020a4:	71fb      	strb	r3, [r7, #7]
	if(force_update){
 80020a6:	79fb      	ldrb	r3, [r7, #7]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d07b      	beq.n	80021a4 <display_parameter_setting+0x108>
		// Redraw entire screen if forced
		ssd1306_Fill(Black);
 80020ac:	2000      	movs	r0, #0
 80020ae:	f006 fc57 	bl	8008960 <ssd1306_Fill>
		myOLED_char(0, 0, "Set Value:");
 80020b2:	4a66      	ldr	r2, [pc, #408]	@ (800224c <display_parameter_setting+0x1b0>)
 80020b4:	2100      	movs	r1, #0
 80020b6:	2000      	movs	r0, #0
 80020b8:	f7ff fcee 	bl	8001a98 <myOLED_char>

		// Check the state and print the mode in parameter setting screen
		if(current_state == 2){
 80020bc:	4b64      	ldr	r3, [pc, #400]	@ (8002250 <display_parameter_setting+0x1b4>)
 80020be:	781b      	ldrb	r3, [r3, #0]
 80020c0:	2b02      	cmp	r3, #2
 80020c2:	d16f      	bne.n	80021a4 <display_parameter_setting+0x108>
			myOLED_char(0, 42, "MIN:");
 80020c4:	4a63      	ldr	r2, [pc, #396]	@ (8002254 <display_parameter_setting+0x1b8>)
 80020c6:	212a      	movs	r1, #42	@ 0x2a
 80020c8:	2000      	movs	r0, #0
 80020ca:	f7ff fce5 	bl	8001a98 <myOLED_char>
			myOLED_char(0, 52, "MAX:");
 80020ce:	4a62      	ldr	r2, [pc, #392]	@ (8002258 <display_parameter_setting+0x1bc>)
 80020d0:	2134      	movs	r1, #52	@ 0x34
 80020d2:	2000      	movs	r0, #0
 80020d4:	f7ff fce0 	bl	8001a98 <myOLED_char>
			switch(mode_index){
 80020d8:	4b60      	ldr	r3, [pc, #384]	@ (800225c <display_parameter_setting+0x1c0>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	2b03      	cmp	r3, #3
 80020de:	d860      	bhi.n	80021a2 <display_parameter_setting+0x106>
 80020e0:	a201      	add	r2, pc, #4	@ (adr r2, 80020e8 <display_parameter_setting+0x4c>)
 80020e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020e6:	bf00      	nop
 80020e8:	080020f9 	.word	0x080020f9
 80020ec:	08002123 	.word	0x08002123
 80020f0:	0800214d 	.word	0x0800214d
 80020f4:	08002179 	.word	0x08002179
			case 0:
				myOLED_char(70, 0, "CC");
 80020f8:	4a59      	ldr	r2, [pc, #356]	@ (8002260 <display_parameter_setting+0x1c4>)
 80020fa:	2100      	movs	r1, #0
 80020fc:	2046      	movs	r0, #70	@ 0x46
 80020fe:	f7ff fccb 	bl	8001a98 <myOLED_char>
				myOLED_char(70, 20, "Amp");
 8002102:	4a58      	ldr	r2, [pc, #352]	@ (8002264 <display_parameter_setting+0x1c8>)
 8002104:	2114      	movs	r1, #20
 8002106:	2046      	movs	r0, #70	@ 0x46
 8002108:	f7ff fcc6 	bl	8001a98 <myOLED_char>
				myOLED_float(35, 42, (float)MIN_CC_VALUE);
 800210c:	4a56      	ldr	r2, [pc, #344]	@ (8002268 <display_parameter_setting+0x1cc>)
 800210e:	212a      	movs	r1, #42	@ 0x2a
 8002110:	2023      	movs	r0, #35	@ 0x23
 8002112:	f7ff fcf9 	bl	8001b08 <myOLED_float>
				myOLED_float(35, 52, (float)MAX_CC_VALUE);
 8002116:	4a55      	ldr	r2, [pc, #340]	@ (800226c <display_parameter_setting+0x1d0>)
 8002118:	2134      	movs	r1, #52	@ 0x34
 800211a:	2023      	movs	r0, #35	@ 0x23
 800211c:	f7ff fcf4 	bl	8001b08 <myOLED_float>
				break;
 8002120:	e040      	b.n	80021a4 <display_parameter_setting+0x108>
			case 1:
				myOLED_char(70, 0, "CV");
 8002122:	4a53      	ldr	r2, [pc, #332]	@ (8002270 <display_parameter_setting+0x1d4>)
 8002124:	2100      	movs	r1, #0
 8002126:	2046      	movs	r0, #70	@ 0x46
 8002128:	f7ff fcb6 	bl	8001a98 <myOLED_char>
				myOLED_char(70, 20, "Volt");
 800212c:	4a51      	ldr	r2, [pc, #324]	@ (8002274 <display_parameter_setting+0x1d8>)
 800212e:	2114      	movs	r1, #20
 8002130:	2046      	movs	r0, #70	@ 0x46
 8002132:	f7ff fcb1 	bl	8001a98 <myOLED_char>
				myOLED_float(35, 42, (float)MIN_CV_VALUE);
 8002136:	4a50      	ldr	r2, [pc, #320]	@ (8002278 <display_parameter_setting+0x1dc>)
 8002138:	212a      	movs	r1, #42	@ 0x2a
 800213a:	2023      	movs	r0, #35	@ 0x23
 800213c:	f7ff fce4 	bl	8001b08 <myOLED_float>
				myOLED_float(35, 52, (float)MAX_CV_VALUE);
 8002140:	4a4e      	ldr	r2, [pc, #312]	@ (800227c <display_parameter_setting+0x1e0>)
 8002142:	2134      	movs	r1, #52	@ 0x34
 8002144:	2023      	movs	r0, #35	@ 0x23
 8002146:	f7ff fcdf 	bl	8001b08 <myOLED_float>
				break;
 800214a:	e02b      	b.n	80021a4 <display_parameter_setting+0x108>
			case 2:
				myOLED_char(70, 0, "CP");
 800214c:	4a4c      	ldr	r2, [pc, #304]	@ (8002280 <display_parameter_setting+0x1e4>)
 800214e:	2100      	movs	r1, #0
 8002150:	2046      	movs	r0, #70	@ 0x46
 8002152:	f7ff fca1 	bl	8001a98 <myOLED_char>
				myOLED_char(70, 20, "Watt");
 8002156:	4a4b      	ldr	r2, [pc, #300]	@ (8002284 <display_parameter_setting+0x1e8>)
 8002158:	2114      	movs	r1, #20
 800215a:	2046      	movs	r0, #70	@ 0x46
 800215c:	f7ff fc9c 	bl	8001a98 <myOLED_char>
				myOLED_float(35, 42, (float)MIN_CP_VALUE);
 8002160:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002164:	212a      	movs	r1, #42	@ 0x2a
 8002166:	2023      	movs	r0, #35	@ 0x23
 8002168:	f7ff fcce 	bl	8001b08 <myOLED_float>
				myOLED_float(35, 52, (float)MAX_CP_VALUE);
 800216c:	4a46      	ldr	r2, [pc, #280]	@ (8002288 <display_parameter_setting+0x1ec>)
 800216e:	2134      	movs	r1, #52	@ 0x34
 8002170:	2023      	movs	r0, #35	@ 0x23
 8002172:	f7ff fcc9 	bl	8001b08 <myOLED_float>
				break;
 8002176:	e015      	b.n	80021a4 <display_parameter_setting+0x108>
			case 3:
				myOLED_char(70, 0, "CR");
 8002178:	4a44      	ldr	r2, [pc, #272]	@ (800228c <display_parameter_setting+0x1f0>)
 800217a:	2100      	movs	r1, #0
 800217c:	2046      	movs	r0, #70	@ 0x46
 800217e:	f7ff fc8b 	bl	8001a98 <myOLED_char>
				myOLED_char(70, 20, "Ohm");
 8002182:	4a43      	ldr	r2, [pc, #268]	@ (8002290 <display_parameter_setting+0x1f4>)
 8002184:	2114      	movs	r1, #20
 8002186:	2046      	movs	r0, #70	@ 0x46
 8002188:	f7ff fc86 	bl	8001a98 <myOLED_char>
				myOLED_float(35, 42, (float)MIN_CR_VALUE);
 800218c:	4a41      	ldr	r2, [pc, #260]	@ (8002294 <display_parameter_setting+0x1f8>)
 800218e:	212a      	movs	r1, #42	@ 0x2a
 8002190:	2023      	movs	r0, #35	@ 0x23
 8002192:	f7ff fcb9 	bl	8001b08 <myOLED_float>
				myOLED_float(35, 52, (float)MAX_CR_VALUE);
 8002196:	4a40      	ldr	r2, [pc, #256]	@ (8002298 <display_parameter_setting+0x1fc>)
 8002198:	2134      	movs	r1, #52	@ 0x34
 800219a:	2023      	movs	r0, #35	@ 0x23
 800219c:	f7ff fcb4 	bl	8001b08 <myOLED_float>
				break;
 80021a0:	e000      	b.n	80021a4 <display_parameter_setting+0x108>
			default:
				break;
 80021a2:	bf00      	nop
	}

	// Fetch the current mode's parameter value
	float display_value;

	switch(mode_index){
 80021a4:	4b2d      	ldr	r3, [pc, #180]	@ (800225c <display_parameter_setting+0x1c0>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	2b03      	cmp	r3, #3
 80021aa:	d81b      	bhi.n	80021e4 <display_parameter_setting+0x148>
 80021ac:	a201      	add	r2, pc, #4	@ (adr r2, 80021b4 <display_parameter_setting+0x118>)
 80021ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021b2:	bf00      	nop
 80021b4:	080021c5 	.word	0x080021c5
 80021b8:	080021cd 	.word	0x080021cd
 80021bc:	080021d5 	.word	0x080021d5
 80021c0:	080021dd 	.word	0x080021dd
	case 0:
		display_value = param_mode.current;
 80021c4:	4b35      	ldr	r3, [pc, #212]	@ (800229c <display_parameter_setting+0x200>)
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	60fb      	str	r3, [r7, #12]
		break;
 80021ca:	e00f      	b.n	80021ec <display_parameter_setting+0x150>
	case 1:
		display_value = param_mode.voltage;
 80021cc:	4b33      	ldr	r3, [pc, #204]	@ (800229c <display_parameter_setting+0x200>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	60fb      	str	r3, [r7, #12]
		break;
 80021d2:	e00b      	b.n	80021ec <display_parameter_setting+0x150>
	case 2:
		display_value = param_mode.power;
 80021d4:	4b31      	ldr	r3, [pc, #196]	@ (800229c <display_parameter_setting+0x200>)
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	60fb      	str	r3, [r7, #12]
		break;
 80021da:	e007      	b.n	80021ec <display_parameter_setting+0x150>
	case 3:
		display_value = param_mode.resistance;
 80021dc:	4b2f      	ldr	r3, [pc, #188]	@ (800229c <display_parameter_setting+0x200>)
 80021de:	68db      	ldr	r3, [r3, #12]
 80021e0:	60fb      	str	r3, [r7, #12]
		break;
 80021e2:	e003      	b.n	80021ec <display_parameter_setting+0x150>
	default:
		display_value = 0.0f;
 80021e4:	f04f 0300 	mov.w	r3, #0
 80021e8:	60fb      	str	r3, [r7, #12]
		break;
 80021ea:	bf00      	nop
	}

	// Display the value with proper formatting
	if(display_value >= 10.000){
 80021ec:	492a      	ldr	r1, [pc, #168]	@ (8002298 <display_parameter_setting+0x1fc>)
 80021ee:	68f8      	ldr	r0, [r7, #12]
 80021f0:	f7fe ff7a 	bl	80010e8 <__aeabi_fcmpge>
 80021f4:	4603      	mov	r3, r0
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d005      	beq.n	8002206 <display_parameter_setting+0x16a>
		myOLED_float(0, 20, display_value);
 80021fa:	68fa      	ldr	r2, [r7, #12]
 80021fc:	2114      	movs	r1, #20
 80021fe:	2000      	movs	r0, #0
 8002200:	f7ff fc82 	bl	8001b08 <myOLED_float>
 8002204:	e009      	b.n	800221a <display_parameter_setting+0x17e>
	}else{
		myOLED_float(7, 20, display_value);
 8002206:	68fa      	ldr	r2, [r7, #12]
 8002208:	2114      	movs	r1, #20
 800220a:	2007      	movs	r0, #7
 800220c:	f7ff fc7c 	bl	8001b08 <myOLED_float>
		myOLED_int(0, 20, 0);  // Print "0" at the first location
 8002210:	2200      	movs	r2, #0
 8002212:	2114      	movs	r1, #20
 8002214:	2000      	movs	r0, #0
 8002216:	f7ff fccb 	bl	8001bb0 <myOLED_int>
	}

	// Clear previous cursor position by redrawing the entire line
	myOLED_char(0, 30, "         ");
 800221a:	4a21      	ldr	r2, [pc, #132]	@ (80022a0 <display_parameter_setting+0x204>)
 800221c:	211e      	movs	r1, #30
 800221e:	2000      	movs	r0, #0
 8002220:	f7ff fc3a 	bl	8001a98 <myOLED_char>
	// Draw cursor under the digit
	uint8_t cursor_x;
	cursor_x = digit_position * 7;		// 7 pixels width per character
 8002224:	4b1f      	ldr	r3, [pc, #124]	@ (80022a4 <display_parameter_setting+0x208>)
 8002226:	781b      	ldrb	r3, [r3, #0]
 8002228:	461a      	mov	r2, r3
 800222a:	00d2      	lsls	r2, r2, #3
 800222c:	1ad3      	subs	r3, r2, r3
 800222e:	72fb      	strb	r3, [r7, #11]
	myOLED_char(cursor_x, 30, "^");  	// Draw the cursor
 8002230:	7afb      	ldrb	r3, [r7, #11]
 8002232:	b29b      	uxth	r3, r3
 8002234:	4a1c      	ldr	r2, [pc, #112]	@ (80022a8 <display_parameter_setting+0x20c>)
 8002236:	211e      	movs	r1, #30
 8002238:	4618      	mov	r0, r3
 800223a:	f7ff fc2d 	bl	8001a98 <myOLED_char>

	// Refresh the display after updating
	ssd1306_UpdateScreen();
 800223e:	f006 fbb1 	bl	80089a4 <ssd1306_UpdateScreen>
}
 8002242:	bf00      	nop
 8002244:	3710      	adds	r7, #16
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop
 800224c:	0800d5c8 	.word	0x0800d5c8
 8002250:	20000383 	.word	0x20000383
 8002254:	0800d5d4 	.word	0x0800d5d4
 8002258:	0800d5dc 	.word	0x0800d5dc
 800225c:	20000008 	.word	0x20000008
 8002260:	0800d5a8 	.word	0x0800d5a8
 8002264:	0800d5e4 	.word	0x0800d5e4
 8002268:	3a83126f 	.word	0x3a83126f
 800226c:	40a00000 	.word	0x40a00000
 8002270:	0800d5ac 	.word	0x0800d5ac
 8002274:	0800d5e8 	.word	0x0800d5e8
 8002278:	40400000 	.word	0x40400000
 800227c:	41f00000 	.word	0x41f00000
 8002280:	0800d5b0 	.word	0x0800d5b0
 8002284:	0800d5f0 	.word	0x0800d5f0
 8002288:	42c7ff7d 	.word	0x42c7ff7d
 800228c:	0800d5b4 	.word	0x0800d5b4
 8002290:	0800d5f8 	.word	0x0800d5f8
 8002294:	3dcccccd 	.word	0x3dcccccd
 8002298:	41200000 	.word	0x41200000
 800229c:	20000384 	.word	0x20000384
 80022a0:	0800d5fc 	.word	0x0800d5fc
 80022a4:	200003a4 	.word	0x200003a4
 80022a8:	0800d608 	.word	0x0800d608

080022ac <update_encoder_state>:

// Update Encoder State
void update_encoder_state(){
 80022ac:	b580      	push	{r7, lr}
 80022ae:	af00      	add	r7, sp, #0
	new_rot_pos = rot_cnt;
 80022b0:	4b32      	ldr	r3, [pc, #200]	@ (800237c <update_encoder_state+0xd0>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	b29a      	uxth	r2, r3
 80022b6:	4b32      	ldr	r3, [pc, #200]	@ (8002380 <update_encoder_state+0xd4>)
 80022b8:	801a      	strh	r2, [r3, #0]

	if(new_rot_pos > old_rot_pos){
 80022ba:	4b31      	ldr	r3, [pc, #196]	@ (8002380 <update_encoder_state+0xd4>)
 80022bc:	881a      	ldrh	r2, [r3, #0]
 80022be:	4b31      	ldr	r3, [pc, #196]	@ (8002384 <update_encoder_state+0xd8>)
 80022c0:	881b      	ldrh	r3, [r3, #0]
 80022c2:	429a      	cmp	r2, r3
 80022c4:	d911      	bls.n	80022ea <update_encoder_state+0x3e>
		if(current_state == PARAMETER_SETTING){
 80022c6:	4b30      	ldr	r3, [pc, #192]	@ (8002388 <update_encoder_state+0xdc>)
 80022c8:	781b      	ldrb	r3, [r3, #0]
 80022ca:	2b02      	cmp	r3, #2
 80022cc:	d107      	bne.n	80022de <update_encoder_state+0x32>
			if(adjusting_digit){
 80022ce:	4b2f      	ldr	r3, [pc, #188]	@ (800238c <update_encoder_state+0xe0>)
 80022d0:	781b      	ldrb	r3, [r3, #0]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d021      	beq.n	800231a <update_encoder_state+0x6e>
				update_parameter_value(1); // Increment digit
 80022d6:	2001      	movs	r0, #1
 80022d8:	f000 f85e 	bl	8002398 <update_parameter_value>
 80022dc:	e01d      	b.n	800231a <update_encoder_state+0x6e>
			}
		}else{
			cursor_position++;
 80022de:	4b2c      	ldr	r3, [pc, #176]	@ (8002390 <update_encoder_state+0xe4>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	3301      	adds	r3, #1
 80022e4:	4a2a      	ldr	r2, [pc, #168]	@ (8002390 <update_encoder_state+0xe4>)
 80022e6:	6013      	str	r3, [r2, #0]
 80022e8:	e017      	b.n	800231a <update_encoder_state+0x6e>
		}
	}else if(new_rot_pos < old_rot_pos){
 80022ea:	4b25      	ldr	r3, [pc, #148]	@ (8002380 <update_encoder_state+0xd4>)
 80022ec:	881a      	ldrh	r2, [r3, #0]
 80022ee:	4b25      	ldr	r3, [pc, #148]	@ (8002384 <update_encoder_state+0xd8>)
 80022f0:	881b      	ldrh	r3, [r3, #0]
 80022f2:	429a      	cmp	r2, r3
 80022f4:	d211      	bcs.n	800231a <update_encoder_state+0x6e>
		if(current_state == PARAMETER_SETTING){
 80022f6:	4b24      	ldr	r3, [pc, #144]	@ (8002388 <update_encoder_state+0xdc>)
 80022f8:	781b      	ldrb	r3, [r3, #0]
 80022fa:	2b02      	cmp	r3, #2
 80022fc:	d108      	bne.n	8002310 <update_encoder_state+0x64>
			if(adjusting_digit){
 80022fe:	4b23      	ldr	r3, [pc, #140]	@ (800238c <update_encoder_state+0xe0>)
 8002300:	781b      	ldrb	r3, [r3, #0]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d009      	beq.n	800231a <update_encoder_state+0x6e>
				update_parameter_value(-1); // Decrement digit
 8002306:	f04f 30ff 	mov.w	r0, #4294967295
 800230a:	f000 f845 	bl	8002398 <update_parameter_value>
 800230e:	e004      	b.n	800231a <update_encoder_state+0x6e>
			}
		}else{
			cursor_position--;
 8002310:	4b1f      	ldr	r3, [pc, #124]	@ (8002390 <update_encoder_state+0xe4>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	3b01      	subs	r3, #1
 8002316:	4a1e      	ldr	r2, [pc, #120]	@ (8002390 <update_encoder_state+0xe4>)
 8002318:	6013      	str	r3, [r2, #0]
		}
	}
	old_rot_pos = new_rot_pos;
 800231a:	4b19      	ldr	r3, [pc, #100]	@ (8002380 <update_encoder_state+0xd4>)
 800231c:	881a      	ldrh	r2, [r3, #0]
 800231e:	4b19      	ldr	r3, [pc, #100]	@ (8002384 <update_encoder_state+0xd8>)
 8002320:	801a      	strh	r2, [r3, #0]
	put_parameter_limit();		// put limit on parameter values based on mode
 8002322:	f000 f91d 	bl	8002560 <put_parameter_limit>

	// putting limits
	if(cursor_position < 0)
 8002326:	4b1a      	ldr	r3, [pc, #104]	@ (8002390 <update_encoder_state+0xe4>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	2b00      	cmp	r3, #0
 800232c:	da02      	bge.n	8002334 <update_encoder_state+0x88>
		cursor_position = 0;
 800232e:	4b18      	ldr	r3, [pc, #96]	@ (8002390 <update_encoder_state+0xe4>)
 8002330:	2200      	movs	r2, #0
 8002332:	601a      	str	r2, [r3, #0]
	if(current_state == HOME_SCREEN && cursor_position > 2)
 8002334:	4b14      	ldr	r3, [pc, #80]	@ (8002388 <update_encoder_state+0xdc>)
 8002336:	781b      	ldrb	r3, [r3, #0]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d106      	bne.n	800234a <update_encoder_state+0x9e>
 800233c:	4b14      	ldr	r3, [pc, #80]	@ (8002390 <update_encoder_state+0xe4>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	2b02      	cmp	r3, #2
 8002342:	dd02      	ble.n	800234a <update_encoder_state+0x9e>
		cursor_position = 2;
 8002344:	4b12      	ldr	r3, [pc, #72]	@ (8002390 <update_encoder_state+0xe4>)
 8002346:	2202      	movs	r2, #2
 8002348:	601a      	str	r2, [r3, #0]
	if(current_state == MODE_SELECTION && cursor_position > 3)
 800234a:	4b0f      	ldr	r3, [pc, #60]	@ (8002388 <update_encoder_state+0xdc>)
 800234c:	781b      	ldrb	r3, [r3, #0]
 800234e:	2b01      	cmp	r3, #1
 8002350:	d106      	bne.n	8002360 <update_encoder_state+0xb4>
 8002352:	4b0f      	ldr	r3, [pc, #60]	@ (8002390 <update_encoder_state+0xe4>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	2b03      	cmp	r3, #3
 8002358:	dd02      	ble.n	8002360 <update_encoder_state+0xb4>
		cursor_position = 3;
 800235a:	4b0d      	ldr	r3, [pc, #52]	@ (8002390 <update_encoder_state+0xe4>)
 800235c:	2203      	movs	r2, #3
 800235e:	601a      	str	r2, [r3, #0]
	if(current_state == PARAMETER_SETTING && digit_position > MAX_DIGITS)
 8002360:	4b09      	ldr	r3, [pc, #36]	@ (8002388 <update_encoder_state+0xdc>)
 8002362:	781b      	ldrb	r3, [r3, #0]
 8002364:	2b02      	cmp	r3, #2
 8002366:	d106      	bne.n	8002376 <update_encoder_state+0xca>
 8002368:	4b0a      	ldr	r3, [pc, #40]	@ (8002394 <update_encoder_state+0xe8>)
 800236a:	781b      	ldrb	r3, [r3, #0]
 800236c:	2b05      	cmp	r3, #5
 800236e:	d902      	bls.n	8002376 <update_encoder_state+0xca>
		digit_position = MAX_DIGITS;
 8002370:	4b08      	ldr	r3, [pc, #32]	@ (8002394 <update_encoder_state+0xe8>)
 8002372:	2205      	movs	r2, #5
 8002374:	701a      	strb	r2, [r3, #0]
//	if(digit_position < 0)
//		digit_position = 0;
}
 8002376:	bf00      	nop
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	20000398 	.word	0x20000398
 8002380:	200003b4 	.word	0x200003b4
 8002384:	200003be 	.word	0x200003be
 8002388:	20000383 	.word	0x20000383
 800238c:	200003b0 	.word	0x200003b0
 8002390:	2000039c 	.word	0x2000039c
 8002394:	200003a4 	.word	0x200003a4

08002398 <update_parameter_value>:


// Update parameter value
void update_parameter_value(int direction) {
 8002398:	b580      	push	{r7, lr}
 800239a:	b08a      	sub	sp, #40	@ 0x28
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
    // Convert the whole value to an integer, treating it as 00.000
    int full_value = (int)(param_value * 1000);
 80023a0:	4b67      	ldr	r3, [pc, #412]	@ (8002540 <update_parameter_value+0x1a8>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4967      	ldr	r1, [pc, #412]	@ (8002544 <update_parameter_value+0x1ac>)
 80023a6:	4618      	mov	r0, r3
 80023a8:	f7fe fcec 	bl	8000d84 <__aeabi_fmul>
 80023ac:	4603      	mov	r3, r0
 80023ae:	4618      	mov	r0, r3
 80023b0:	f7fe feae 	bl	8001110 <__aeabi_f2iz>
 80023b4:	4603      	mov	r3, r0
 80023b6:	627b      	str	r3, [r7, #36]	@ 0x24

    // Extract individual digits
    int digits[5]; // Will store: [tens, ones, tenths, hundredths, thousandths]
    digits[0] = (full_value / 10000) % 10;     // tens
 80023b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023ba:	4a63      	ldr	r2, [pc, #396]	@ (8002548 <update_parameter_value+0x1b0>)
 80023bc:	fb82 1203 	smull	r1, r2, r2, r3
 80023c0:	1312      	asrs	r2, r2, #12
 80023c2:	17db      	asrs	r3, r3, #31
 80023c4:	1ad1      	subs	r1, r2, r3
 80023c6:	4b61      	ldr	r3, [pc, #388]	@ (800254c <update_parameter_value+0x1b4>)
 80023c8:	fb83 2301 	smull	r2, r3, r3, r1
 80023cc:	109a      	asrs	r2, r3, #2
 80023ce:	17cb      	asrs	r3, r1, #31
 80023d0:	1ad2      	subs	r2, r2, r3
 80023d2:	4613      	mov	r3, r2
 80023d4:	009b      	lsls	r3, r3, #2
 80023d6:	4413      	add	r3, r2
 80023d8:	005b      	lsls	r3, r3, #1
 80023da:	1aca      	subs	r2, r1, r3
 80023dc:	60fa      	str	r2, [r7, #12]
    digits[1] = (full_value / 1000) % 10;      // ones
 80023de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023e0:	4a5b      	ldr	r2, [pc, #364]	@ (8002550 <update_parameter_value+0x1b8>)
 80023e2:	fb82 1203 	smull	r1, r2, r2, r3
 80023e6:	1192      	asrs	r2, r2, #6
 80023e8:	17db      	asrs	r3, r3, #31
 80023ea:	1ad1      	subs	r1, r2, r3
 80023ec:	4b57      	ldr	r3, [pc, #348]	@ (800254c <update_parameter_value+0x1b4>)
 80023ee:	fb83 2301 	smull	r2, r3, r3, r1
 80023f2:	109a      	asrs	r2, r3, #2
 80023f4:	17cb      	asrs	r3, r1, #31
 80023f6:	1ad2      	subs	r2, r2, r3
 80023f8:	4613      	mov	r3, r2
 80023fa:	009b      	lsls	r3, r3, #2
 80023fc:	4413      	add	r3, r2
 80023fe:	005b      	lsls	r3, r3, #1
 8002400:	1aca      	subs	r2, r1, r3
 8002402:	613a      	str	r2, [r7, #16]
    digits[2] = (full_value / 100) % 10;       // tenths
 8002404:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002406:	4a53      	ldr	r2, [pc, #332]	@ (8002554 <update_parameter_value+0x1bc>)
 8002408:	fb82 1203 	smull	r1, r2, r2, r3
 800240c:	1152      	asrs	r2, r2, #5
 800240e:	17db      	asrs	r3, r3, #31
 8002410:	1ad1      	subs	r1, r2, r3
 8002412:	4b4e      	ldr	r3, [pc, #312]	@ (800254c <update_parameter_value+0x1b4>)
 8002414:	fb83 2301 	smull	r2, r3, r3, r1
 8002418:	109a      	asrs	r2, r3, #2
 800241a:	17cb      	asrs	r3, r1, #31
 800241c:	1ad2      	subs	r2, r2, r3
 800241e:	4613      	mov	r3, r2
 8002420:	009b      	lsls	r3, r3, #2
 8002422:	4413      	add	r3, r2
 8002424:	005b      	lsls	r3, r3, #1
 8002426:	1aca      	subs	r2, r1, r3
 8002428:	617a      	str	r2, [r7, #20]
    digits[3] = (full_value / 10) % 10;        // hundredths
 800242a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800242c:	4a47      	ldr	r2, [pc, #284]	@ (800254c <update_parameter_value+0x1b4>)
 800242e:	fb82 1203 	smull	r1, r2, r2, r3
 8002432:	1092      	asrs	r2, r2, #2
 8002434:	17db      	asrs	r3, r3, #31
 8002436:	1ad1      	subs	r1, r2, r3
 8002438:	4b44      	ldr	r3, [pc, #272]	@ (800254c <update_parameter_value+0x1b4>)
 800243a:	fb83 2301 	smull	r2, r3, r3, r1
 800243e:	109a      	asrs	r2, r3, #2
 8002440:	17cb      	asrs	r3, r1, #31
 8002442:	1ad2      	subs	r2, r2, r3
 8002444:	4613      	mov	r3, r2
 8002446:	009b      	lsls	r3, r3, #2
 8002448:	4413      	add	r3, r2
 800244a:	005b      	lsls	r3, r3, #1
 800244c:	1aca      	subs	r2, r1, r3
 800244e:	61ba      	str	r2, [r7, #24]
    digits[4] = full_value % 10;               // thousandths
 8002450:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002452:	4b3e      	ldr	r3, [pc, #248]	@ (800254c <update_parameter_value+0x1b4>)
 8002454:	fb83 2301 	smull	r2, r3, r3, r1
 8002458:	109a      	asrs	r2, r3, #2
 800245a:	17cb      	asrs	r3, r1, #31
 800245c:	1ad2      	subs	r2, r2, r3
 800245e:	4613      	mov	r3, r2
 8002460:	009b      	lsls	r3, r3, #2
 8002462:	4413      	add	r3, r2
 8002464:	005b      	lsls	r3, r3, #1
 8002466:	1aca      	subs	r2, r1, r3
 8002468:	61fa      	str	r2, [r7, #28]

    // Skip if we're at the decimal point position
    if (digit_position == 2) {
 800246a:	4b3b      	ldr	r3, [pc, #236]	@ (8002558 <update_parameter_value+0x1c0>)
 800246c:	781b      	ldrb	r3, [r3, #0]
 800246e:	2b02      	cmp	r3, #2
 8002470:	d062      	beq.n	8002538 <update_parameter_value+0x1a0>
        return;
    }

    // Map cursor position to array index
    int digit_index = (digit_position < 2) ? digit_position : digit_position - 1;
 8002472:	4b39      	ldr	r3, [pc, #228]	@ (8002558 <update_parameter_value+0x1c0>)
 8002474:	781b      	ldrb	r3, [r3, #0]
 8002476:	2b01      	cmp	r3, #1
 8002478:	d802      	bhi.n	8002480 <update_parameter_value+0xe8>
 800247a:	4b37      	ldr	r3, [pc, #220]	@ (8002558 <update_parameter_value+0x1c0>)
 800247c:	781b      	ldrb	r3, [r3, #0]
 800247e:	e002      	b.n	8002486 <update_parameter_value+0xee>
 8002480:	4b35      	ldr	r3, [pc, #212]	@ (8002558 <update_parameter_value+0x1c0>)
 8002482:	781b      	ldrb	r3, [r3, #0]
 8002484:	3b01      	subs	r3, #1
 8002486:	623b      	str	r3, [r7, #32]

    // Update only the selected digit
    digits[digit_index] = digits[digit_index] + direction;
 8002488:	6a3b      	ldr	r3, [r7, #32]
 800248a:	009b      	lsls	r3, r3, #2
 800248c:	3328      	adds	r3, #40	@ 0x28
 800248e:	443b      	add	r3, r7
 8002490:	f853 2c1c 	ldr.w	r2, [r3, #-28]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	441a      	add	r2, r3
 8002498:	6a3b      	ldr	r3, [r7, #32]
 800249a:	009b      	lsls	r3, r3, #2
 800249c:	3328      	adds	r3, #40	@ 0x28
 800249e:	443b      	add	r3, r7
 80024a0:	f843 2c1c 	str.w	r2, [r3, #-28]

    // Handle wrapping for the specific digit
    if (digits[digit_index] > 9) {
 80024a4:	6a3b      	ldr	r3, [r7, #32]
 80024a6:	009b      	lsls	r3, r3, #2
 80024a8:	3328      	adds	r3, #40	@ 0x28
 80024aa:	443b      	add	r3, r7
 80024ac:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 80024b0:	2b09      	cmp	r3, #9
 80024b2:	dd07      	ble.n	80024c4 <update_parameter_value+0x12c>
        digits[digit_index] = 0;
 80024b4:	6a3b      	ldr	r3, [r7, #32]
 80024b6:	009b      	lsls	r3, r3, #2
 80024b8:	3328      	adds	r3, #40	@ 0x28
 80024ba:	443b      	add	r3, r7
 80024bc:	2200      	movs	r2, #0
 80024be:	f843 2c1c 	str.w	r2, [r3, #-28]
 80024c2:	e00e      	b.n	80024e2 <update_parameter_value+0x14a>
    } else if (digits[digit_index] < 0) {
 80024c4:	6a3b      	ldr	r3, [r7, #32]
 80024c6:	009b      	lsls	r3, r3, #2
 80024c8:	3328      	adds	r3, #40	@ 0x28
 80024ca:	443b      	add	r3, r7
 80024cc:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	da06      	bge.n	80024e2 <update_parameter_value+0x14a>
        digits[digit_index] = 9;
 80024d4:	6a3b      	ldr	r3, [r7, #32]
 80024d6:	009b      	lsls	r3, r3, #2
 80024d8:	3328      	adds	r3, #40	@ 0x28
 80024da:	443b      	add	r3, r7
 80024dc:	2209      	movs	r2, #9
 80024de:	f843 2c1c 	str.w	r2, [r3, #-28]
    }

    // Reconstruct the value
    full_value = digits[0] * 10000 +
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	f242 7210 	movw	r2, #10000	@ 0x2710
 80024e8:	fb03 f202 	mul.w	r2, r3, r2
                 digits[1] * 1000 +
 80024ec:	693b      	ldr	r3, [r7, #16]
 80024ee:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80024f2:	fb01 f303 	mul.w	r3, r1, r3
    full_value = digits[0] * 10000 +
 80024f6:	441a      	add	r2, r3
                 digits[2] * 100 +
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	2164      	movs	r1, #100	@ 0x64
 80024fc:	fb01 f303 	mul.w	r3, r1, r3
                 digits[1] * 1000 +
 8002500:	18d1      	adds	r1, r2, r3
                 digits[3] * 10 +
 8002502:	69ba      	ldr	r2, [r7, #24]
 8002504:	4613      	mov	r3, r2
 8002506:	009b      	lsls	r3, r3, #2
 8002508:	4413      	add	r3, r2
 800250a:	005b      	lsls	r3, r3, #1
                 digits[2] * 100 +
 800250c:	18ca      	adds	r2, r1, r3
                 digits[4];
 800250e:	69fb      	ldr	r3, [r7, #28]
    full_value = digits[0] * 10000 +
 8002510:	4413      	add	r3, r2
 8002512:	627b      	str	r3, [r7, #36]	@ 0x24

    // Convert back to floating-point
    param_value = full_value / 1000.0;
 8002514:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002516:	f7fd ff75 	bl	8000404 <__aeabi_i2d>
 800251a:	f04f 0200 	mov.w	r2, #0
 800251e:	4b0f      	ldr	r3, [pc, #60]	@ (800255c <update_parameter_value+0x1c4>)
 8002520:	f7fe f904 	bl	800072c <__aeabi_ddiv>
 8002524:	4602      	mov	r2, r0
 8002526:	460b      	mov	r3, r1
 8002528:	4610      	mov	r0, r2
 800252a:	4619      	mov	r1, r3
 800252c:	f7fe facc 	bl	8000ac8 <__aeabi_d2f>
 8002530:	4603      	mov	r3, r0
 8002532:	4a03      	ldr	r2, [pc, #12]	@ (8002540 <update_parameter_value+0x1a8>)
 8002534:	6013      	str	r3, [r2, #0]
 8002536:	e000      	b.n	800253a <update_parameter_value+0x1a2>
        return;
 8002538:	bf00      	nop
}
 800253a:	3728      	adds	r7, #40	@ 0x28
 800253c:	46bd      	mov	sp, r7
 800253e:	bd80      	pop	{r7, pc}
 8002540:	200003a0 	.word	0x200003a0
 8002544:	447a0000 	.word	0x447a0000
 8002548:	68db8bad 	.word	0x68db8bad
 800254c:	66666667 	.word	0x66666667
 8002550:	10624dd3 	.word	0x10624dd3
 8002554:	51eb851f 	.word	0x51eb851f
 8002558:	200003a4 	.word	0x200003a4
 800255c:	408f4000 	.word	0x408f4000

08002560 <put_parameter_limit>:


// Put limit on parameter value
void put_parameter_limit(){
 8002560:	b580      	push	{r7, lr}
 8002562:	af00      	add	r7, sp, #0
	// RESET the param_value if mode is changed
	if(mode_index_last != mode_index){
 8002564:	4b5c      	ldr	r3, [pc, #368]	@ (80026d8 <put_parameter_limit+0x178>)
 8002566:	681a      	ldr	r2, [r3, #0]
 8002568:	4b5c      	ldr	r3, [pc, #368]	@ (80026dc <put_parameter_limit+0x17c>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	429a      	cmp	r2, r3
 800256e:	d007      	beq.n	8002580 <put_parameter_limit+0x20>
		param_value = 0.0;
 8002570:	4b5b      	ldr	r3, [pc, #364]	@ (80026e0 <put_parameter_limit+0x180>)
 8002572:	f04f 0200 	mov.w	r2, #0
 8002576:	601a      	str	r2, [r3, #0]
		mode_index_last = mode_index;
 8002578:	4b58      	ldr	r3, [pc, #352]	@ (80026dc <put_parameter_limit+0x17c>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a56      	ldr	r2, [pc, #344]	@ (80026d8 <put_parameter_limit+0x178>)
 800257e:	6013      	str	r3, [r2, #0]
	}

	// check the MIN and MAX value of each mode to set limits on the value.
	if(current_state == 2){
 8002580:	4b58      	ldr	r3, [pc, #352]	@ (80026e4 <put_parameter_limit+0x184>)
 8002582:	781b      	ldrb	r3, [r3, #0]
 8002584:	2b02      	cmp	r3, #2
 8002586:	f040 8098 	bne.w	80026ba <put_parameter_limit+0x15a>
		switch(mode_index){
 800258a:	4b54      	ldr	r3, [pc, #336]	@ (80026dc <put_parameter_limit+0x17c>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	2b03      	cmp	r3, #3
 8002590:	f200 8092 	bhi.w	80026b8 <put_parameter_limit+0x158>
 8002594:	a201      	add	r2, pc, #4	@ (adr r2, 800259c <put_parameter_limit+0x3c>)
 8002596:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800259a:	bf00      	nop
 800259c:	080025ad 	.word	0x080025ad
 80025a0:	080025f1 	.word	0x080025f1
 80025a4:	0800262d 	.word	0x0800262d
 80025a8:	08002675 	.word	0x08002675
		case 0:
			if(param_value >= MAX_CC_VALUE){
 80025ac:	4b4c      	ldr	r3, [pc, #304]	@ (80026e0 <put_parameter_limit+0x180>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	494d      	ldr	r1, [pc, #308]	@ (80026e8 <put_parameter_limit+0x188>)
 80025b2:	4618      	mov	r0, r3
 80025b4:	f7fe fd98 	bl	80010e8 <__aeabi_fcmpge>
 80025b8:	4603      	mov	r3, r0
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d003      	beq.n	80025c6 <put_parameter_limit+0x66>
				param_value = MAX_CC_VALUE;
 80025be:	4b48      	ldr	r3, [pc, #288]	@ (80026e0 <put_parameter_limit+0x180>)
 80025c0:	4a49      	ldr	r2, [pc, #292]	@ (80026e8 <put_parameter_limit+0x188>)
 80025c2:	601a      	str	r2, [r3, #0]
 80025c4:	e00f      	b.n	80025e6 <put_parameter_limit+0x86>
			}else if(param_value <= MIN_CC_VALUE){
 80025c6:	4b46      	ldr	r3, [pc, #280]	@ (80026e0 <put_parameter_limit+0x180>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4618      	mov	r0, r3
 80025cc:	f7fd ff2c 	bl	8000428 <__aeabi_f2d>
 80025d0:	a33b      	add	r3, pc, #236	@ (adr r3, 80026c0 <put_parameter_limit+0x160>)
 80025d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025d6:	f7fe f9fb 	bl	80009d0 <__aeabi_dcmple>
 80025da:	4603      	mov	r3, r0
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d002      	beq.n	80025e6 <put_parameter_limit+0x86>
				param_value = MIN_CC_VALUE;
 80025e0:	4b3f      	ldr	r3, [pc, #252]	@ (80026e0 <put_parameter_limit+0x180>)
 80025e2:	4a42      	ldr	r2, [pc, #264]	@ (80026ec <put_parameter_limit+0x18c>)
 80025e4:	601a      	str	r2, [r3, #0]
			}
			param_mode.current = param_value;
 80025e6:	4b3e      	ldr	r3, [pc, #248]	@ (80026e0 <put_parameter_limit+0x180>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a41      	ldr	r2, [pc, #260]	@ (80026f0 <put_parameter_limit+0x190>)
 80025ec:	6053      	str	r3, [r2, #4]
			break;
 80025ee:	e064      	b.n	80026ba <put_parameter_limit+0x15a>
		case 1:
			if(param_value >= MAX_CV_VALUE){
 80025f0:	4b3b      	ldr	r3, [pc, #236]	@ (80026e0 <put_parameter_limit+0x180>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	493f      	ldr	r1, [pc, #252]	@ (80026f4 <put_parameter_limit+0x194>)
 80025f6:	4618      	mov	r0, r3
 80025f8:	f7fe fd76 	bl	80010e8 <__aeabi_fcmpge>
 80025fc:	4603      	mov	r3, r0
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d003      	beq.n	800260a <put_parameter_limit+0xaa>
				param_value = MAX_CV_VALUE;
 8002602:	4b37      	ldr	r3, [pc, #220]	@ (80026e0 <put_parameter_limit+0x180>)
 8002604:	4a3b      	ldr	r2, [pc, #236]	@ (80026f4 <put_parameter_limit+0x194>)
 8002606:	601a      	str	r2, [r3, #0]
 8002608:	e00b      	b.n	8002622 <put_parameter_limit+0xc2>
			}else if(param_value <= MIN_CV_VALUE){
 800260a:	4b35      	ldr	r3, [pc, #212]	@ (80026e0 <put_parameter_limit+0x180>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	493a      	ldr	r1, [pc, #232]	@ (80026f8 <put_parameter_limit+0x198>)
 8002610:	4618      	mov	r0, r3
 8002612:	f7fe fd5f 	bl	80010d4 <__aeabi_fcmple>
 8002616:	4603      	mov	r3, r0
 8002618:	2b00      	cmp	r3, #0
 800261a:	d002      	beq.n	8002622 <put_parameter_limit+0xc2>
				param_value = MIN_CV_VALUE;
 800261c:	4b30      	ldr	r3, [pc, #192]	@ (80026e0 <put_parameter_limit+0x180>)
 800261e:	4a36      	ldr	r2, [pc, #216]	@ (80026f8 <put_parameter_limit+0x198>)
 8002620:	601a      	str	r2, [r3, #0]
			}
			param_mode.voltage = param_value;
 8002622:	4b2f      	ldr	r3, [pc, #188]	@ (80026e0 <put_parameter_limit+0x180>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a32      	ldr	r2, [pc, #200]	@ (80026f0 <put_parameter_limit+0x190>)
 8002628:	6013      	str	r3, [r2, #0]
			break;
 800262a:	e046      	b.n	80026ba <put_parameter_limit+0x15a>
		case 2:
			if(param_value >= MAX_CP_VALUE){
 800262c:	4b2c      	ldr	r3, [pc, #176]	@ (80026e0 <put_parameter_limit+0x180>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4618      	mov	r0, r3
 8002632:	f7fd fef9 	bl	8000428 <__aeabi_f2d>
 8002636:	a324      	add	r3, pc, #144	@ (adr r3, 80026c8 <put_parameter_limit+0x168>)
 8002638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800263c:	f7fe f9d2 	bl	80009e4 <__aeabi_dcmpge>
 8002640:	4603      	mov	r3, r0
 8002642:	2b00      	cmp	r3, #0
 8002644:	d003      	beq.n	800264e <put_parameter_limit+0xee>
				param_value = MAX_CP_VALUE;
 8002646:	4b26      	ldr	r3, [pc, #152]	@ (80026e0 <put_parameter_limit+0x180>)
 8002648:	4a2c      	ldr	r2, [pc, #176]	@ (80026fc <put_parameter_limit+0x19c>)
 800264a:	601a      	str	r2, [r3, #0]
 800264c:	e00d      	b.n	800266a <put_parameter_limit+0x10a>
			}else if(param_value <= MIN_CP_VALUE){
 800264e:	4b24      	ldr	r3, [pc, #144]	@ (80026e0 <put_parameter_limit+0x180>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8002656:	4618      	mov	r0, r3
 8002658:	f7fe fd3c 	bl	80010d4 <__aeabi_fcmple>
 800265c:	4603      	mov	r3, r0
 800265e:	2b00      	cmp	r3, #0
 8002660:	d003      	beq.n	800266a <put_parameter_limit+0x10a>
				param_value = MIN_CP_VALUE;
 8002662:	4b1f      	ldr	r3, [pc, #124]	@ (80026e0 <put_parameter_limit+0x180>)
 8002664:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002668:	601a      	str	r2, [r3, #0]
			}
			param_mode.power = param_value;
 800266a:	4b1d      	ldr	r3, [pc, #116]	@ (80026e0 <put_parameter_limit+0x180>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4a20      	ldr	r2, [pc, #128]	@ (80026f0 <put_parameter_limit+0x190>)
 8002670:	6093      	str	r3, [r2, #8]
			break;
 8002672:	e022      	b.n	80026ba <put_parameter_limit+0x15a>
		case 3:
			if(param_value >= MAX_CR_VALUE){
 8002674:	4b1a      	ldr	r3, [pc, #104]	@ (80026e0 <put_parameter_limit+0x180>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4921      	ldr	r1, [pc, #132]	@ (8002700 <put_parameter_limit+0x1a0>)
 800267a:	4618      	mov	r0, r3
 800267c:	f7fe fd34 	bl	80010e8 <__aeabi_fcmpge>
 8002680:	4603      	mov	r3, r0
 8002682:	2b00      	cmp	r3, #0
 8002684:	d003      	beq.n	800268e <put_parameter_limit+0x12e>
				param_value = MAX_CR_VALUE;
 8002686:	4b16      	ldr	r3, [pc, #88]	@ (80026e0 <put_parameter_limit+0x180>)
 8002688:	4a1d      	ldr	r2, [pc, #116]	@ (8002700 <put_parameter_limit+0x1a0>)
 800268a:	601a      	str	r2, [r3, #0]
 800268c:	e00f      	b.n	80026ae <put_parameter_limit+0x14e>
			}else if(param_value <= MIN_CR_VALUE){
 800268e:	4b14      	ldr	r3, [pc, #80]	@ (80026e0 <put_parameter_limit+0x180>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4618      	mov	r0, r3
 8002694:	f7fd fec8 	bl	8000428 <__aeabi_f2d>
 8002698:	a30d      	add	r3, pc, #52	@ (adr r3, 80026d0 <put_parameter_limit+0x170>)
 800269a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800269e:	f7fe f997 	bl	80009d0 <__aeabi_dcmple>
 80026a2:	4603      	mov	r3, r0
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d002      	beq.n	80026ae <put_parameter_limit+0x14e>
				param_value = MIN_CR_VALUE;
 80026a8:	4b0d      	ldr	r3, [pc, #52]	@ (80026e0 <put_parameter_limit+0x180>)
 80026aa:	4a16      	ldr	r2, [pc, #88]	@ (8002704 <put_parameter_limit+0x1a4>)
 80026ac:	601a      	str	r2, [r3, #0]
			}
			param_mode.resistance = param_value;
 80026ae:	4b0c      	ldr	r3, [pc, #48]	@ (80026e0 <put_parameter_limit+0x180>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a0f      	ldr	r2, [pc, #60]	@ (80026f0 <put_parameter_limit+0x190>)
 80026b4:	60d3      	str	r3, [r2, #12]
			break;
 80026b6:	e000      	b.n	80026ba <put_parameter_limit+0x15a>
		default:
			break;
 80026b8:	bf00      	nop
		}
	}
}
 80026ba:	bf00      	nop
 80026bc:	bd80      	pop	{r7, pc}
 80026be:	bf00      	nop
 80026c0:	d2f1a9fc 	.word	0xd2f1a9fc
 80026c4:	3f50624d 	.word	0x3f50624d
 80026c8:	9db22d0e 	.word	0x9db22d0e
 80026cc:	4058ffef 	.word	0x4058ffef
 80026d0:	9999999a 	.word	0x9999999a
 80026d4:	3fb99999 	.word	0x3fb99999
 80026d8:	2000000c 	.word	0x2000000c
 80026dc:	20000008 	.word	0x20000008
 80026e0:	200003a0 	.word	0x200003a0
 80026e4:	20000383 	.word	0x20000383
 80026e8:	40a00000 	.word	0x40a00000
 80026ec:	3a83126f 	.word	0x3a83126f
 80026f0:	20000384 	.word	0x20000384
 80026f4:	41f00000 	.word	0x41f00000
 80026f8:	40400000 	.word	0x40400000
 80026fc:	42c7ff7d 	.word	0x42c7ff7d
 8002700:	41200000 	.word	0x41200000
 8002704:	3dcccccd 	.word	0x3dcccccd

08002708 <handle_button_press>:

void handle_button_press(){
 8002708:	b480      	push	{r7}
 800270a:	af00      	add	r7, sp, #0
	new_a_cnt = sw_a_cnt;
 800270c:	4b55      	ldr	r3, [pc, #340]	@ (8002864 <handle_button_press+0x15c>)
 800270e:	881a      	ldrh	r2, [r3, #0]
 8002710:	4b55      	ldr	r3, [pc, #340]	@ (8002868 <handle_button_press+0x160>)
 8002712:	801a      	strh	r2, [r3, #0]
	new_b_cnt = sw_b_cnt;
 8002714:	4b55      	ldr	r3, [pc, #340]	@ (800286c <handle_button_press+0x164>)
 8002716:	881a      	ldrh	r2, [r3, #0]
 8002718:	4b55      	ldr	r3, [pc, #340]	@ (8002870 <handle_button_press+0x168>)
 800271a:	801a      	strh	r2, [r3, #0]

	if(sw_rot_state){
 800271c:	4b55      	ldr	r3, [pc, #340]	@ (8002874 <handle_button_press+0x16c>)
 800271e:	781b      	ldrb	r3, [r3, #0]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d06e      	beq.n	8002802 <handle_button_press+0xfa>
		switch(current_state){
 8002724:	4b54      	ldr	r3, [pc, #336]	@ (8002878 <handle_button_press+0x170>)
 8002726:	781b      	ldrb	r3, [r3, #0]
 8002728:	2b02      	cmp	r3, #2
 800272a:	d059      	beq.n	80027e0 <handle_button_press+0xd8>
 800272c:	2b02      	cmp	r3, #2
 800272e:	dc62      	bgt.n	80027f6 <handle_button_press+0xee>
 8002730:	2b00      	cmp	r3, #0
 8002732:	d002      	beq.n	800273a <handle_button_press+0x32>
 8002734:	2b01      	cmp	r3, #1
 8002736:	d042      	beq.n	80027be <handle_button_press+0xb6>
			current_state = RETURN_TO_HOME;
			digit_position = 0;
			}
			break;
		default:
			break;
 8002738:	e05d      	b.n	80027f6 <handle_button_press+0xee>
			if(cursor_position == 0){
 800273a:	4b50      	ldr	r3, [pc, #320]	@ (800287c <handle_button_press+0x174>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d106      	bne.n	8002750 <handle_button_press+0x48>
				current_state = MODE_SELECTION;		// GoTo MODE SELECTION PAGE
 8002742:	4b4d      	ldr	r3, [pc, #308]	@ (8002878 <handle_button_press+0x170>)
 8002744:	2201      	movs	r2, #1
 8002746:	701a      	strb	r2, [r3, #0]
				output_on_flag = false;				// turn off when page is changed
 8002748:	4b4d      	ldr	r3, [pc, #308]	@ (8002880 <handle_button_press+0x178>)
 800274a:	2200      	movs	r2, #0
 800274c:	701a      	strb	r2, [r3, #0]
 800274e:	e032      	b.n	80027b6 <handle_button_press+0xae>
			}else if(cursor_position == 1 && (!output_on_flag)){
 8002750:	4b4a      	ldr	r3, [pc, #296]	@ (800287c <handle_button_press+0x174>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	2b01      	cmp	r3, #1
 8002756:	d10a      	bne.n	800276e <handle_button_press+0x66>
 8002758:	4b49      	ldr	r3, [pc, #292]	@ (8002880 <handle_button_press+0x178>)
 800275a:	781b      	ldrb	r3, [r3, #0]
 800275c:	f083 0301 	eor.w	r3, r3, #1
 8002760:	b2db      	uxtb	r3, r3
 8002762:	2b00      	cmp	r3, #0
 8002764:	d003      	beq.n	800276e <handle_button_press+0x66>
				output_on_flag = true;
 8002766:	4b46      	ldr	r3, [pc, #280]	@ (8002880 <handle_button_press+0x178>)
 8002768:	2201      	movs	r2, #1
 800276a:	701a      	strb	r2, [r3, #0]
 800276c:	e023      	b.n	80027b6 <handle_button_press+0xae>
			}else if(cursor_position == 1 && output_on_flag){
 800276e:	4b43      	ldr	r3, [pc, #268]	@ (800287c <handle_button_press+0x174>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	2b01      	cmp	r3, #1
 8002774:	d10a      	bne.n	800278c <handle_button_press+0x84>
 8002776:	4b42      	ldr	r3, [pc, #264]	@ (8002880 <handle_button_press+0x178>)
 8002778:	781b      	ldrb	r3, [r3, #0]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d006      	beq.n	800278c <handle_button_press+0x84>
				output_on_flag = false;
 800277e:	4b40      	ldr	r3, [pc, #256]	@ (8002880 <handle_button_press+0x178>)
 8002780:	2200      	movs	r2, #0
 8002782:	701a      	strb	r2, [r3, #0]
				force_update = true;
 8002784:	4b3f      	ldr	r3, [pc, #252]	@ (8002884 <handle_button_press+0x17c>)
 8002786:	2201      	movs	r2, #1
 8002788:	701a      	strb	r2, [r3, #0]
 800278a:	e014      	b.n	80027b6 <handle_button_press+0xae>
			}else if(cursor_position == 2){			// Reset everything
 800278c:	4b3b      	ldr	r3, [pc, #236]	@ (800287c <handle_button_press+0x174>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	2b02      	cmp	r3, #2
 8002792:	d110      	bne.n	80027b6 <handle_button_press+0xae>
				current_state = HOME_SCREEN;// not necessary to reset current_state
 8002794:	4b38      	ldr	r3, [pc, #224]	@ (8002878 <handle_button_press+0x170>)
 8002796:	2200      	movs	r2, #0
 8002798:	701a      	strb	r2, [r3, #0]
				cursor_position = 0;
 800279a:	4b38      	ldr	r3, [pc, #224]	@ (800287c <handle_button_press+0x174>)
 800279c:	2200      	movs	r2, #0
 800279e:	601a      	str	r2, [r3, #0]
				mode_index = -1;
 80027a0:	4b39      	ldr	r3, [pc, #228]	@ (8002888 <handle_button_press+0x180>)
 80027a2:	f04f 32ff 	mov.w	r2, #4294967295
 80027a6:	601a      	str	r2, [r3, #0]
				param_value = 0.0;
 80027a8:	4b38      	ldr	r3, [pc, #224]	@ (800288c <handle_button_press+0x184>)
 80027aa:	f04f 0200 	mov.w	r2, #0
 80027ae:	601a      	str	r2, [r3, #0]
				output_on_flag = false;
 80027b0:	4b33      	ldr	r3, [pc, #204]	@ (8002880 <handle_button_press+0x178>)
 80027b2:	2200      	movs	r2, #0
 80027b4:	701a      	strb	r2, [r3, #0]
			adjusting_digit = false;			// Disable adjusting in param setting
 80027b6:	4b36      	ldr	r3, [pc, #216]	@ (8002890 <handle_button_press+0x188>)
 80027b8:	2200      	movs	r2, #0
 80027ba:	701a      	strb	r2, [r3, #0]
			break;
 80027bc:	e01e      	b.n	80027fc <handle_button_press+0xf4>
			current_state = PARAMETER_SETTING;			// go to next state
 80027be:	4b2e      	ldr	r3, [pc, #184]	@ (8002878 <handle_button_press+0x170>)
 80027c0:	2202      	movs	r2, #2
 80027c2:	701a      	strb	r2, [r3, #0]
			mode_index = cursor_position;
 80027c4:	4b2d      	ldr	r3, [pc, #180]	@ (800287c <handle_button_press+0x174>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a2f      	ldr	r2, [pc, #188]	@ (8002888 <handle_button_press+0x180>)
 80027ca:	6013      	str	r3, [r2, #0]
			cursor_position = 0;
 80027cc:	4b2b      	ldr	r3, [pc, #172]	@ (800287c <handle_button_press+0x174>)
 80027ce:	2200      	movs	r2, #0
 80027d0:	601a      	str	r2, [r3, #0]
			digit_position = 0;
 80027d2:	4b30      	ldr	r3, [pc, #192]	@ (8002894 <handle_button_press+0x18c>)
 80027d4:	2200      	movs	r2, #0
 80027d6:	701a      	strb	r2, [r3, #0]
			adjusting_digit = false;
 80027d8:	4b2d      	ldr	r3, [pc, #180]	@ (8002890 <handle_button_press+0x188>)
 80027da:	2200      	movs	r2, #0
 80027dc:	701a      	strb	r2, [r3, #0]
			break;
 80027de:	e00d      	b.n	80027fc <handle_button_press+0xf4>
			if(sw_rot_state){// Return to home by saving param value
 80027e0:	4b24      	ldr	r3, [pc, #144]	@ (8002874 <handle_button_press+0x16c>)
 80027e2:	781b      	ldrb	r3, [r3, #0]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d008      	beq.n	80027fa <handle_button_press+0xf2>
			current_state = RETURN_TO_HOME;
 80027e8:	4b23      	ldr	r3, [pc, #140]	@ (8002878 <handle_button_press+0x170>)
 80027ea:	2203      	movs	r2, #3
 80027ec:	701a      	strb	r2, [r3, #0]
			digit_position = 0;
 80027ee:	4b29      	ldr	r3, [pc, #164]	@ (8002894 <handle_button_press+0x18c>)
 80027f0:	2200      	movs	r2, #0
 80027f2:	701a      	strb	r2, [r3, #0]
			break;
 80027f4:	e001      	b.n	80027fa <handle_button_press+0xf2>
			break;
 80027f6:	bf00      	nop
 80027f8:	e000      	b.n	80027fc <handle_button_press+0xf4>
			break;
 80027fa:	bf00      	nop
		}
		sw_rot_state = false; // Reset button state
 80027fc:	4b1d      	ldr	r3, [pc, #116]	@ (8002874 <handle_button_press+0x16c>)
 80027fe:	2200      	movs	r2, #0
 8002800:	701a      	strb	r2, [r3, #0]
	}

	if(current_state == PARAMETER_SETTING) {
 8002802:	4b1d      	ldr	r3, [pc, #116]	@ (8002878 <handle_button_press+0x170>)
 8002804:	781b      	ldrb	r3, [r3, #0]
 8002806:	2b02      	cmp	r3, #2
 8002808:	d103      	bne.n	8002812 <handle_button_press+0x10a>
		adjusting_digit = true;
 800280a:	4b21      	ldr	r3, [pc, #132]	@ (8002890 <handle_button_press+0x188>)
 800280c:	2201      	movs	r2, #1
 800280e:	701a      	strb	r2, [r3, #0]
 8002810:	e002      	b.n	8002818 <handle_button_press+0x110>
	}else adjusting_digit = false;
 8002812:	4b1f      	ldr	r3, [pc, #124]	@ (8002890 <handle_button_press+0x188>)
 8002814:	2200      	movs	r2, #0
 8002816:	701a      	strb	r2, [r3, #0]

	if(new_b_cnt > old_b_cnt){
 8002818:	4b15      	ldr	r3, [pc, #84]	@ (8002870 <handle_button_press+0x168>)
 800281a:	881a      	ldrh	r2, [r3, #0]
 800281c:	4b1e      	ldr	r3, [pc, #120]	@ (8002898 <handle_button_press+0x190>)
 800281e:	881b      	ldrh	r3, [r3, #0]
 8002820:	429a      	cmp	r2, r3
 8002822:	d906      	bls.n	8002832 <handle_button_press+0x12a>
		digit_position++;
 8002824:	4b1b      	ldr	r3, [pc, #108]	@ (8002894 <handle_button_press+0x18c>)
 8002826:	781b      	ldrb	r3, [r3, #0]
 8002828:	3301      	adds	r3, #1
 800282a:	b2da      	uxtb	r2, r3
 800282c:	4b19      	ldr	r3, [pc, #100]	@ (8002894 <handle_button_press+0x18c>)
 800282e:	701a      	strb	r2, [r3, #0]
 8002830:	e00b      	b.n	800284a <handle_button_press+0x142>
	}else if(new_a_cnt > old_a_cnt) {
 8002832:	4b0d      	ldr	r3, [pc, #52]	@ (8002868 <handle_button_press+0x160>)
 8002834:	881a      	ldrh	r2, [r3, #0]
 8002836:	4b19      	ldr	r3, [pc, #100]	@ (800289c <handle_button_press+0x194>)
 8002838:	881b      	ldrh	r3, [r3, #0]
 800283a:	429a      	cmp	r2, r3
 800283c:	d905      	bls.n	800284a <handle_button_press+0x142>
		digit_position--;
 800283e:	4b15      	ldr	r3, [pc, #84]	@ (8002894 <handle_button_press+0x18c>)
 8002840:	781b      	ldrb	r3, [r3, #0]
 8002842:	3b01      	subs	r3, #1
 8002844:	b2da      	uxtb	r2, r3
 8002846:	4b13      	ldr	r3, [pc, #76]	@ (8002894 <handle_button_press+0x18c>)
 8002848:	701a      	strb	r2, [r3, #0]
	}
	old_b_cnt = new_b_cnt;
 800284a:	4b09      	ldr	r3, [pc, #36]	@ (8002870 <handle_button_press+0x168>)
 800284c:	881a      	ldrh	r2, [r3, #0]
 800284e:	4b12      	ldr	r3, [pc, #72]	@ (8002898 <handle_button_press+0x190>)
 8002850:	801a      	strh	r2, [r3, #0]
	old_a_cnt = new_a_cnt;
 8002852:	4b05      	ldr	r3, [pc, #20]	@ (8002868 <handle_button_press+0x160>)
 8002854:	881a      	ldrh	r2, [r3, #0]
 8002856:	4b11      	ldr	r3, [pc, #68]	@ (800289c <handle_button_press+0x194>)
 8002858:	801a      	strh	r2, [r3, #0]
}
 800285a:	bf00      	nop
 800285c:	46bd      	mov	sp, r7
 800285e:	bc80      	pop	{r7}
 8002860:	4770      	bx	lr
 8002862:	bf00      	nop
 8002864:	200003a6 	.word	0x200003a6
 8002868:	200003b6 	.word	0x200003b6
 800286c:	200003a8 	.word	0x200003a8
 8002870:	200003b8 	.word	0x200003b8
 8002874:	200003ac 	.word	0x200003ac
 8002878:	20000383 	.word	0x20000383
 800287c:	2000039c 	.word	0x2000039c
 8002880:	200003b1 	.word	0x200003b1
 8002884:	200003b2 	.word	0x200003b2
 8002888:	20000008 	.word	0x20000008
 800288c:	200003a0 	.word	0x200003a0
 8002890:	200003b0 	.word	0x200003b0
 8002894:	200003a4 	.word	0x200003a4
 8002898:	200003bc 	.word	0x200003bc
 800289c:	200003ba 	.word	0x200003ba

080028a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80028a0:	b480      	push	{r7}
 80028a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80028a4:	b672      	cpsid	i
}
 80028a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80028a8:	bf00      	nop
 80028aa:	e7fd      	b.n	80028a8 <Error_Handler+0x8>

080028ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b085      	sub	sp, #20
 80028b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80028b2:	4b15      	ldr	r3, [pc, #84]	@ (8002908 <HAL_MspInit+0x5c>)
 80028b4:	699b      	ldr	r3, [r3, #24]
 80028b6:	4a14      	ldr	r2, [pc, #80]	@ (8002908 <HAL_MspInit+0x5c>)
 80028b8:	f043 0301 	orr.w	r3, r3, #1
 80028bc:	6193      	str	r3, [r2, #24]
 80028be:	4b12      	ldr	r3, [pc, #72]	@ (8002908 <HAL_MspInit+0x5c>)
 80028c0:	699b      	ldr	r3, [r3, #24]
 80028c2:	f003 0301 	and.w	r3, r3, #1
 80028c6:	60bb      	str	r3, [r7, #8]
 80028c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80028ca:	4b0f      	ldr	r3, [pc, #60]	@ (8002908 <HAL_MspInit+0x5c>)
 80028cc:	69db      	ldr	r3, [r3, #28]
 80028ce:	4a0e      	ldr	r2, [pc, #56]	@ (8002908 <HAL_MspInit+0x5c>)
 80028d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80028d4:	61d3      	str	r3, [r2, #28]
 80028d6:	4b0c      	ldr	r3, [pc, #48]	@ (8002908 <HAL_MspInit+0x5c>)
 80028d8:	69db      	ldr	r3, [r3, #28]
 80028da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028de:	607b      	str	r3, [r7, #4]
 80028e0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80028e2:	4b0a      	ldr	r3, [pc, #40]	@ (800290c <HAL_MspInit+0x60>)
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	60fb      	str	r3, [r7, #12]
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80028ee:	60fb      	str	r3, [r7, #12]
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80028f6:	60fb      	str	r3, [r7, #12]
 80028f8:	4a04      	ldr	r2, [pc, #16]	@ (800290c <HAL_MspInit+0x60>)
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80028fe:	bf00      	nop
 8002900:	3714      	adds	r7, #20
 8002902:	46bd      	mov	sp, r7
 8002904:	bc80      	pop	{r7}
 8002906:	4770      	bx	lr
 8002908:	40021000 	.word	0x40021000
 800290c:	40010000 	.word	0x40010000

08002910 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002910:	b480      	push	{r7}
 8002912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002914:	bf00      	nop
 8002916:	e7fd      	b.n	8002914 <NMI_Handler+0x4>

08002918 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002918:	b480      	push	{r7}
 800291a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800291c:	bf00      	nop
 800291e:	e7fd      	b.n	800291c <HardFault_Handler+0x4>

08002920 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002920:	b480      	push	{r7}
 8002922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002924:	bf00      	nop
 8002926:	e7fd      	b.n	8002924 <MemManage_Handler+0x4>

08002928 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002928:	b480      	push	{r7}
 800292a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800292c:	bf00      	nop
 800292e:	e7fd      	b.n	800292c <BusFault_Handler+0x4>

08002930 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002930:	b480      	push	{r7}
 8002932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002934:	bf00      	nop
 8002936:	e7fd      	b.n	8002934 <UsageFault_Handler+0x4>

08002938 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002938:	b480      	push	{r7}
 800293a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800293c:	bf00      	nop
 800293e:	46bd      	mov	sp, r7
 8002940:	bc80      	pop	{r7}
 8002942:	4770      	bx	lr

08002944 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002944:	b480      	push	{r7}
 8002946:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002948:	bf00      	nop
 800294a:	46bd      	mov	sp, r7
 800294c:	bc80      	pop	{r7}
 800294e:	4770      	bx	lr

08002950 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002950:	b480      	push	{r7}
 8002952:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002954:	bf00      	nop
 8002956:	46bd      	mov	sp, r7
 8002958:	bc80      	pop	{r7}
 800295a:	4770      	bx	lr

0800295c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002960:	f000 fa84 	bl	8002e6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002964:	bf00      	nop
 8002966:	bd80      	pop	{r7, pc}

08002968 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(A_SW_Pin);
 800296c:	2001      	movs	r0, #1
 800296e:	f001 fc41 	bl	80041f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002972:	bf00      	nop
 8002974:	bd80      	pop	{r7, pc}

08002976 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002976:	b580      	push	{r7, lr}
 8002978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B_SW_Pin);
 800297a:	2002      	movs	r0, #2
 800297c:	f001 fc3a 	bl	80041f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002980:	bf00      	nop
 8002982:	bd80      	pop	{r7, pc}

08002984 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(C_SW_Pin);
 8002988:	2010      	movs	r0, #16
 800298a:	f001 fc33 	bl	80041f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800298e:	bf00      	nop
 8002990:	bd80      	pop	{r7, pc}
	...

08002994 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8002998:	4802      	ldr	r0, [pc, #8]	@ (80029a4 <DMA1_Channel6_IRQHandler+0x10>)
 800299a:	f001 f961 	bl	8003c60 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800299e:	bf00      	nop
 80029a0:	bd80      	pop	{r7, pc}
 80029a2:	bf00      	nop
 80029a4:	200002f0 	.word	0x200002f0

080029a8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ROT_SW_Pin);
 80029ac:	2020      	movs	r0, #32
 80029ae:	f001 fc21 	bl	80041f4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LTC2944_ALCC_Pin);
 80029b2:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80029b6:	f001 fc1d 	bl	80041f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80029ba:	bf00      	nop
 80029bc:	bd80      	pop	{r7, pc}
	...

080029c0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80029c4:	4802      	ldr	r0, [pc, #8]	@ (80029d0 <TIM3_IRQHandler+0x10>)
 80029c6:	f005 f8ab 	bl	8007b20 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80029ca:	bf00      	nop
 80029cc:	bd80      	pop	{r7, pc}
 80029ce:	bf00      	nop
 80029d0:	200003c8 	.word	0x200003c8

080029d4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80029d8:	4802      	ldr	r0, [pc, #8]	@ (80029e4 <I2C1_EV_IRQHandler+0x10>)
 80029da:	f002 f9e7 	bl	8004dac <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80029de:	bf00      	nop
 80029e0:	bd80      	pop	{r7, pc}
 80029e2:	bf00      	nop
 80029e4:	20000248 	.word	0x20000248

080029e8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80029e8:	b480      	push	{r7}
 80029ea:	af00      	add	r7, sp, #0
  return 1;
 80029ec:	2301      	movs	r3, #1
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bc80      	pop	{r7}
 80029f4:	4770      	bx	lr

080029f6 <_kill>:

int _kill(int pid, int sig)
{
 80029f6:	b580      	push	{r7, lr}
 80029f8:	b082      	sub	sp, #8
 80029fa:	af00      	add	r7, sp, #0
 80029fc:	6078      	str	r0, [r7, #4]
 80029fe:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002a00:	f007 fa18 	bl	8009e34 <__errno>
 8002a04:	4603      	mov	r3, r0
 8002a06:	2216      	movs	r2, #22
 8002a08:	601a      	str	r2, [r3, #0]
  return -1;
 8002a0a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	3708      	adds	r7, #8
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}

08002a16 <_exit>:

void _exit (int status)
{
 8002a16:	b580      	push	{r7, lr}
 8002a18:	b082      	sub	sp, #8
 8002a1a:	af00      	add	r7, sp, #0
 8002a1c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002a1e:	f04f 31ff 	mov.w	r1, #4294967295
 8002a22:	6878      	ldr	r0, [r7, #4]
 8002a24:	f7ff ffe7 	bl	80029f6 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002a28:	bf00      	nop
 8002a2a:	e7fd      	b.n	8002a28 <_exit+0x12>

08002a2c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b086      	sub	sp, #24
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	60f8      	str	r0, [r7, #12]
 8002a34:	60b9      	str	r1, [r7, #8]
 8002a36:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a38:	2300      	movs	r3, #0
 8002a3a:	617b      	str	r3, [r7, #20]
 8002a3c:	e00a      	b.n	8002a54 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002a3e:	f3af 8000 	nop.w
 8002a42:	4601      	mov	r1, r0
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	1c5a      	adds	r2, r3, #1
 8002a48:	60ba      	str	r2, [r7, #8]
 8002a4a:	b2ca      	uxtb	r2, r1
 8002a4c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	3301      	adds	r3, #1
 8002a52:	617b      	str	r3, [r7, #20]
 8002a54:	697a      	ldr	r2, [r7, #20]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	429a      	cmp	r2, r3
 8002a5a:	dbf0      	blt.n	8002a3e <_read+0x12>
  }

  return len;
 8002a5c:	687b      	ldr	r3, [r7, #4]
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	3718      	adds	r7, #24
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}

08002a66 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002a66:	b580      	push	{r7, lr}
 8002a68:	b086      	sub	sp, #24
 8002a6a:	af00      	add	r7, sp, #0
 8002a6c:	60f8      	str	r0, [r7, #12]
 8002a6e:	60b9      	str	r1, [r7, #8]
 8002a70:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a72:	2300      	movs	r3, #0
 8002a74:	617b      	str	r3, [r7, #20]
 8002a76:	e009      	b.n	8002a8c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	1c5a      	adds	r2, r3, #1
 8002a7c:	60ba      	str	r2, [r7, #8]
 8002a7e:	781b      	ldrb	r3, [r3, #0]
 8002a80:	4618      	mov	r0, r3
 8002a82:	f7fe fde1 	bl	8001648 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a86:	697b      	ldr	r3, [r7, #20]
 8002a88:	3301      	adds	r3, #1
 8002a8a:	617b      	str	r3, [r7, #20]
 8002a8c:	697a      	ldr	r2, [r7, #20]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	429a      	cmp	r2, r3
 8002a92:	dbf1      	blt.n	8002a78 <_write+0x12>
  }
  return len;
 8002a94:	687b      	ldr	r3, [r7, #4]
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	3718      	adds	r7, #24
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}

08002a9e <_close>:

int _close(int file)
{
 8002a9e:	b480      	push	{r7}
 8002aa0:	b083      	sub	sp, #12
 8002aa2:	af00      	add	r7, sp, #0
 8002aa4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002aa6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	370c      	adds	r7, #12
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bc80      	pop	{r7}
 8002ab2:	4770      	bx	lr

08002ab4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b083      	sub	sp, #12
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
 8002abc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002ac4:	605a      	str	r2, [r3, #4]
  return 0;
 8002ac6:	2300      	movs	r3, #0
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	370c      	adds	r7, #12
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bc80      	pop	{r7}
 8002ad0:	4770      	bx	lr

08002ad2 <_isatty>:

int _isatty(int file)
{
 8002ad2:	b480      	push	{r7}
 8002ad4:	b083      	sub	sp, #12
 8002ad6:	af00      	add	r7, sp, #0
 8002ad8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002ada:	2301      	movs	r3, #1
}
 8002adc:	4618      	mov	r0, r3
 8002ade:	370c      	adds	r7, #12
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bc80      	pop	{r7}
 8002ae4:	4770      	bx	lr

08002ae6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002ae6:	b480      	push	{r7}
 8002ae8:	b085      	sub	sp, #20
 8002aea:	af00      	add	r7, sp, #0
 8002aec:	60f8      	str	r0, [r7, #12]
 8002aee:	60b9      	str	r1, [r7, #8]
 8002af0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002af2:	2300      	movs	r3, #0
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	3714      	adds	r7, #20
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bc80      	pop	{r7}
 8002afc:	4770      	bx	lr
	...

08002b00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b086      	sub	sp, #24
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002b08:	4a14      	ldr	r2, [pc, #80]	@ (8002b5c <_sbrk+0x5c>)
 8002b0a:	4b15      	ldr	r3, [pc, #84]	@ (8002b60 <_sbrk+0x60>)
 8002b0c:	1ad3      	subs	r3, r2, r3
 8002b0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002b14:	4b13      	ldr	r3, [pc, #76]	@ (8002b64 <_sbrk+0x64>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d102      	bne.n	8002b22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002b1c:	4b11      	ldr	r3, [pc, #68]	@ (8002b64 <_sbrk+0x64>)
 8002b1e:	4a12      	ldr	r2, [pc, #72]	@ (8002b68 <_sbrk+0x68>)
 8002b20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002b22:	4b10      	ldr	r3, [pc, #64]	@ (8002b64 <_sbrk+0x64>)
 8002b24:	681a      	ldr	r2, [r3, #0]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	4413      	add	r3, r2
 8002b2a:	693a      	ldr	r2, [r7, #16]
 8002b2c:	429a      	cmp	r2, r3
 8002b2e:	d207      	bcs.n	8002b40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002b30:	f007 f980 	bl	8009e34 <__errno>
 8002b34:	4603      	mov	r3, r0
 8002b36:	220c      	movs	r2, #12
 8002b38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002b3a:	f04f 33ff 	mov.w	r3, #4294967295
 8002b3e:	e009      	b.n	8002b54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002b40:	4b08      	ldr	r3, [pc, #32]	@ (8002b64 <_sbrk+0x64>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002b46:	4b07      	ldr	r3, [pc, #28]	@ (8002b64 <_sbrk+0x64>)
 8002b48:	681a      	ldr	r2, [r3, #0]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	4413      	add	r3, r2
 8002b4e:	4a05      	ldr	r2, [pc, #20]	@ (8002b64 <_sbrk+0x64>)
 8002b50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002b52:	68fb      	ldr	r3, [r7, #12]
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	3718      	adds	r7, #24
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd80      	pop	{r7, pc}
 8002b5c:	20005000 	.word	0x20005000
 8002b60:	00000400 	.word	0x00000400
 8002b64:	200003c4 	.word	0x200003c4
 8002b68:	20000a18 	.word	0x20000a18

08002b6c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002b70:	bf00      	nop
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bc80      	pop	{r7}
 8002b76:	4770      	bx	lr

08002b78 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b08c      	sub	sp, #48	@ 0x30
 8002b7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002b7e:	f107 030c 	add.w	r3, r7, #12
 8002b82:	2224      	movs	r2, #36	@ 0x24
 8002b84:	2100      	movs	r1, #0
 8002b86:	4618      	mov	r0, r3
 8002b88:	f007 f901 	bl	8009d8e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b8c:	1d3b      	adds	r3, r7, #4
 8002b8e:	2200      	movs	r2, #0
 8002b90:	601a      	str	r2, [r3, #0]
 8002b92:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002b94:	4b20      	ldr	r3, [pc, #128]	@ (8002c18 <MX_TIM3_Init+0xa0>)
 8002b96:	4a21      	ldr	r2, [pc, #132]	@ (8002c1c <MX_TIM3_Init+0xa4>)
 8002b98:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002b9a:	4b1f      	ldr	r3, [pc, #124]	@ (8002c18 <MX_TIM3_Init+0xa0>)
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ba0:	4b1d      	ldr	r3, [pc, #116]	@ (8002c18 <MX_TIM3_Init+0xa0>)
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 8002ba6:	4b1c      	ldr	r3, [pc, #112]	@ (8002c18 <MX_TIM3_Init+0xa0>)
 8002ba8:	f242 720f 	movw	r2, #9999	@ 0x270f
 8002bac:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002bae:	4b1a      	ldr	r3, [pc, #104]	@ (8002c18 <MX_TIM3_Init+0xa0>)
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002bb4:	4b18      	ldr	r3, [pc, #96]	@ (8002c18 <MX_TIM3_Init+0xa0>)
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002bba:	2303      	movs	r3, #3
 8002bbc:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8002bca:	230a      	movs	r3, #10
 8002bcc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002bde:	f107 030c 	add.w	r3, r7, #12
 8002be2:	4619      	mov	r1, r3
 8002be4:	480c      	ldr	r0, [pc, #48]	@ (8002c18 <MX_TIM3_Init+0xa0>)
 8002be6:	f004 fe4b 	bl	8007880 <HAL_TIM_Encoder_Init>
 8002bea:	4603      	mov	r3, r0
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d001      	beq.n	8002bf4 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8002bf0:	f7ff fe56 	bl	80028a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002bfc:	1d3b      	adds	r3, r7, #4
 8002bfe:	4619      	mov	r1, r3
 8002c00:	4805      	ldr	r0, [pc, #20]	@ (8002c18 <MX_TIM3_Init+0xa0>)
 8002c02:	f005 f933 	bl	8007e6c <HAL_TIMEx_MasterConfigSynchronization>
 8002c06:	4603      	mov	r3, r0
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d001      	beq.n	8002c10 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8002c0c:	f7ff fe48 	bl	80028a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002c10:	bf00      	nop
 8002c12:	3730      	adds	r7, #48	@ 0x30
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}
 8002c18:	200003c8 	.word	0x200003c8
 8002c1c:	40000400 	.word	0x40000400

08002c20 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b088      	sub	sp, #32
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c28:	f107 0310 	add.w	r3, r7, #16
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	601a      	str	r2, [r3, #0]
 8002c30:	605a      	str	r2, [r3, #4]
 8002c32:	609a      	str	r2, [r3, #8]
 8002c34:	60da      	str	r2, [r3, #12]
  if(tim_encoderHandle->Instance==TIM3)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a19      	ldr	r2, [pc, #100]	@ (8002ca0 <HAL_TIM_Encoder_MspInit+0x80>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d12b      	bne.n	8002c98 <HAL_TIM_Encoder_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002c40:	4b18      	ldr	r3, [pc, #96]	@ (8002ca4 <HAL_TIM_Encoder_MspInit+0x84>)
 8002c42:	69db      	ldr	r3, [r3, #28]
 8002c44:	4a17      	ldr	r2, [pc, #92]	@ (8002ca4 <HAL_TIM_Encoder_MspInit+0x84>)
 8002c46:	f043 0302 	orr.w	r3, r3, #2
 8002c4a:	61d3      	str	r3, [r2, #28]
 8002c4c:	4b15      	ldr	r3, [pc, #84]	@ (8002ca4 <HAL_TIM_Encoder_MspInit+0x84>)
 8002c4e:	69db      	ldr	r3, [r3, #28]
 8002c50:	f003 0302 	and.w	r3, r3, #2
 8002c54:	60fb      	str	r3, [r7, #12]
 8002c56:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c58:	4b12      	ldr	r3, [pc, #72]	@ (8002ca4 <HAL_TIM_Encoder_MspInit+0x84>)
 8002c5a:	699b      	ldr	r3, [r3, #24]
 8002c5c:	4a11      	ldr	r2, [pc, #68]	@ (8002ca4 <HAL_TIM_Encoder_MspInit+0x84>)
 8002c5e:	f043 0304 	orr.w	r3, r3, #4
 8002c62:	6193      	str	r3, [r2, #24]
 8002c64:	4b0f      	ldr	r3, [pc, #60]	@ (8002ca4 <HAL_TIM_Encoder_MspInit+0x84>)
 8002c66:	699b      	ldr	r3, [r3, #24]
 8002c68:	f003 0304 	and.w	r3, r3, #4
 8002c6c:	60bb      	str	r3, [r7, #8]
 8002c6e:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = ROT_A_Pin|ROT_B_Pin;
 8002c70:	23c0      	movs	r3, #192	@ 0xc0
 8002c72:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c74:	2300      	movs	r3, #0
 8002c76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c7c:	f107 0310 	add.w	r3, r7, #16
 8002c80:	4619      	mov	r1, r3
 8002c82:	4809      	ldr	r0, [pc, #36]	@ (8002ca8 <HAL_TIM_Encoder_MspInit+0x88>)
 8002c84:	f001 f900 	bl	8003e88 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002c88:	2200      	movs	r2, #0
 8002c8a:	2100      	movs	r1, #0
 8002c8c:	201d      	movs	r0, #29
 8002c8e:	f000 fede 	bl	8003a4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002c92:	201d      	movs	r0, #29
 8002c94:	f000 fef7 	bl	8003a86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002c98:	bf00      	nop
 8002c9a:	3720      	adds	r7, #32
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}
 8002ca0:	40000400 	.word	0x40000400
 8002ca4:	40021000 	.word	0x40021000
 8002ca8:	40010800 	.word	0x40010800

08002cac <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002cb0:	4b11      	ldr	r3, [pc, #68]	@ (8002cf8 <MX_USART2_UART_Init+0x4c>)
 8002cb2:	4a12      	ldr	r2, [pc, #72]	@ (8002cfc <MX_USART2_UART_Init+0x50>)
 8002cb4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002cb6:	4b10      	ldr	r3, [pc, #64]	@ (8002cf8 <MX_USART2_UART_Init+0x4c>)
 8002cb8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002cbc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002cbe:	4b0e      	ldr	r3, [pc, #56]	@ (8002cf8 <MX_USART2_UART_Init+0x4c>)
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002cc4:	4b0c      	ldr	r3, [pc, #48]	@ (8002cf8 <MX_USART2_UART_Init+0x4c>)
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002cca:	4b0b      	ldr	r3, [pc, #44]	@ (8002cf8 <MX_USART2_UART_Init+0x4c>)
 8002ccc:	2200      	movs	r2, #0
 8002cce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002cd0:	4b09      	ldr	r3, [pc, #36]	@ (8002cf8 <MX_USART2_UART_Init+0x4c>)
 8002cd2:	220c      	movs	r2, #12
 8002cd4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002cd6:	4b08      	ldr	r3, [pc, #32]	@ (8002cf8 <MX_USART2_UART_Init+0x4c>)
 8002cd8:	2200      	movs	r2, #0
 8002cda:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002cdc:	4b06      	ldr	r3, [pc, #24]	@ (8002cf8 <MX_USART2_UART_Init+0x4c>)
 8002cde:	2200      	movs	r2, #0
 8002ce0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002ce2:	4805      	ldr	r0, [pc, #20]	@ (8002cf8 <MX_USART2_UART_Init+0x4c>)
 8002ce4:	f005 f932 	bl	8007f4c <HAL_UART_Init>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d001      	beq.n	8002cf2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002cee:	f7ff fdd7 	bl	80028a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002cf2:	bf00      	nop
 8002cf4:	bd80      	pop	{r7, pc}
 8002cf6:	bf00      	nop
 8002cf8:	20000410 	.word	0x20000410
 8002cfc:	40004400 	.word	0x40004400

08002d00 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b088      	sub	sp, #32
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d08:	f107 0310 	add.w	r3, r7, #16
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	601a      	str	r2, [r3, #0]
 8002d10:	605a      	str	r2, [r3, #4]
 8002d12:	609a      	str	r2, [r3, #8]
 8002d14:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a1b      	ldr	r2, [pc, #108]	@ (8002d88 <HAL_UART_MspInit+0x88>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d12f      	bne.n	8002d80 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002d20:	4b1a      	ldr	r3, [pc, #104]	@ (8002d8c <HAL_UART_MspInit+0x8c>)
 8002d22:	69db      	ldr	r3, [r3, #28]
 8002d24:	4a19      	ldr	r2, [pc, #100]	@ (8002d8c <HAL_UART_MspInit+0x8c>)
 8002d26:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d2a:	61d3      	str	r3, [r2, #28]
 8002d2c:	4b17      	ldr	r3, [pc, #92]	@ (8002d8c <HAL_UART_MspInit+0x8c>)
 8002d2e:	69db      	ldr	r3, [r3, #28]
 8002d30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d34:	60fb      	str	r3, [r7, #12]
 8002d36:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d38:	4b14      	ldr	r3, [pc, #80]	@ (8002d8c <HAL_UART_MspInit+0x8c>)
 8002d3a:	699b      	ldr	r3, [r3, #24]
 8002d3c:	4a13      	ldr	r2, [pc, #76]	@ (8002d8c <HAL_UART_MspInit+0x8c>)
 8002d3e:	f043 0304 	orr.w	r3, r3, #4
 8002d42:	6193      	str	r3, [r2, #24]
 8002d44:	4b11      	ldr	r3, [pc, #68]	@ (8002d8c <HAL_UART_MspInit+0x8c>)
 8002d46:	699b      	ldr	r3, [r3, #24]
 8002d48:	f003 0304 	and.w	r3, r3, #4
 8002d4c:	60bb      	str	r3, [r7, #8]
 8002d4e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002d50:	2304      	movs	r3, #4
 8002d52:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d54:	2302      	movs	r3, #2
 8002d56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002d58:	2303      	movs	r3, #3
 8002d5a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d5c:	f107 0310 	add.w	r3, r7, #16
 8002d60:	4619      	mov	r1, r3
 8002d62:	480b      	ldr	r0, [pc, #44]	@ (8002d90 <HAL_UART_MspInit+0x90>)
 8002d64:	f001 f890 	bl	8003e88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002d68:	2308      	movs	r3, #8
 8002d6a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d70:	2300      	movs	r3, #0
 8002d72:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d74:	f107 0310 	add.w	r3, r7, #16
 8002d78:	4619      	mov	r1, r3
 8002d7a:	4805      	ldr	r0, [pc, #20]	@ (8002d90 <HAL_UART_MspInit+0x90>)
 8002d7c:	f001 f884 	bl	8003e88 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002d80:	bf00      	nop
 8002d82:	3720      	adds	r7, #32
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bd80      	pop	{r7, pc}
 8002d88:	40004400 	.word	0x40004400
 8002d8c:	40021000 	.word	0x40021000
 8002d90:	40010800 	.word	0x40010800

08002d94 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002d94:	f7ff feea 	bl	8002b6c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002d98:	480b      	ldr	r0, [pc, #44]	@ (8002dc8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002d9a:	490c      	ldr	r1, [pc, #48]	@ (8002dcc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002d9c:	4a0c      	ldr	r2, [pc, #48]	@ (8002dd0 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002d9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002da0:	e002      	b.n	8002da8 <LoopCopyDataInit>

08002da2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002da2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002da4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002da6:	3304      	adds	r3, #4

08002da8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002da8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002daa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002dac:	d3f9      	bcc.n	8002da2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002dae:	4a09      	ldr	r2, [pc, #36]	@ (8002dd4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002db0:	4c09      	ldr	r4, [pc, #36]	@ (8002dd8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002db2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002db4:	e001      	b.n	8002dba <LoopFillZerobss>

08002db6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002db6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002db8:	3204      	adds	r2, #4

08002dba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002dba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002dbc:	d3fb      	bcc.n	8002db6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002dbe:	f007 f83f 	bl	8009e40 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002dc2:	f7fe fc53 	bl	800166c <main>
  bx lr
 8002dc6:	4770      	bx	lr
  ldr r0, =_sdata
 8002dc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002dcc:	200001fc 	.word	0x200001fc
  ldr r2, =_sidata
 8002dd0:	0800efd8 	.word	0x0800efd8
  ldr r2, =_sbss
 8002dd4:	200001fc 	.word	0x200001fc
  ldr r4, =_ebss
 8002dd8:	20000a14 	.word	0x20000a14

08002ddc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002ddc:	e7fe      	b.n	8002ddc <ADC1_2_IRQHandler>
	...

08002de0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002de4:	4b08      	ldr	r3, [pc, #32]	@ (8002e08 <HAL_Init+0x28>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a07      	ldr	r2, [pc, #28]	@ (8002e08 <HAL_Init+0x28>)
 8002dea:	f043 0310 	orr.w	r3, r3, #16
 8002dee:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002df0:	2003      	movs	r0, #3
 8002df2:	f000 fe21 	bl	8003a38 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002df6:	200f      	movs	r0, #15
 8002df8:	f000 f808 	bl	8002e0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002dfc:	f7ff fd56 	bl	80028ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002e00:	2300      	movs	r3, #0
}
 8002e02:	4618      	mov	r0, r3
 8002e04:	bd80      	pop	{r7, pc}
 8002e06:	bf00      	nop
 8002e08:	40022000 	.word	0x40022000

08002e0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b082      	sub	sp, #8
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002e14:	4b12      	ldr	r3, [pc, #72]	@ (8002e60 <HAL_InitTick+0x54>)
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	4b12      	ldr	r3, [pc, #72]	@ (8002e64 <HAL_InitTick+0x58>)
 8002e1a:	781b      	ldrb	r3, [r3, #0]
 8002e1c:	4619      	mov	r1, r3
 8002e1e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002e22:	fbb3 f3f1 	udiv	r3, r3, r1
 8002e26:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f000 fe39 	bl	8003aa2 <HAL_SYSTICK_Config>
 8002e30:	4603      	mov	r3, r0
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d001      	beq.n	8002e3a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002e36:	2301      	movs	r3, #1
 8002e38:	e00e      	b.n	8002e58 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2b0f      	cmp	r3, #15
 8002e3e:	d80a      	bhi.n	8002e56 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e40:	2200      	movs	r2, #0
 8002e42:	6879      	ldr	r1, [r7, #4]
 8002e44:	f04f 30ff 	mov.w	r0, #4294967295
 8002e48:	f000 fe01 	bl	8003a4e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002e4c:	4a06      	ldr	r2, [pc, #24]	@ (8002e68 <HAL_InitTick+0x5c>)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002e52:	2300      	movs	r3, #0
 8002e54:	e000      	b.n	8002e58 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	3708      	adds	r7, #8
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}
 8002e60:	20000018 	.word	0x20000018
 8002e64:	20000020 	.word	0x20000020
 8002e68:	2000001c 	.word	0x2000001c

08002e6c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e70:	4b05      	ldr	r3, [pc, #20]	@ (8002e88 <HAL_IncTick+0x1c>)
 8002e72:	781b      	ldrb	r3, [r3, #0]
 8002e74:	461a      	mov	r2, r3
 8002e76:	4b05      	ldr	r3, [pc, #20]	@ (8002e8c <HAL_IncTick+0x20>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4413      	add	r3, r2
 8002e7c:	4a03      	ldr	r2, [pc, #12]	@ (8002e8c <HAL_IncTick+0x20>)
 8002e7e:	6013      	str	r3, [r2, #0]
}
 8002e80:	bf00      	nop
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bc80      	pop	{r7}
 8002e86:	4770      	bx	lr
 8002e88:	20000020 	.word	0x20000020
 8002e8c:	20000458 	.word	0x20000458

08002e90 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e90:	b480      	push	{r7}
 8002e92:	af00      	add	r7, sp, #0
  return uwTick;
 8002e94:	4b02      	ldr	r3, [pc, #8]	@ (8002ea0 <HAL_GetTick+0x10>)
 8002e96:	681b      	ldr	r3, [r3, #0]
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bc80      	pop	{r7}
 8002e9e:	4770      	bx	lr
 8002ea0:	20000458 	.word	0x20000458

08002ea4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b084      	sub	sp, #16
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002eac:	f7ff fff0 	bl	8002e90 <HAL_GetTick>
 8002eb0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ebc:	d005      	beq.n	8002eca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ebe:	4b0a      	ldr	r3, [pc, #40]	@ (8002ee8 <HAL_Delay+0x44>)
 8002ec0:	781b      	ldrb	r3, [r3, #0]
 8002ec2:	461a      	mov	r2, r3
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	4413      	add	r3, r2
 8002ec8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002eca:	bf00      	nop
 8002ecc:	f7ff ffe0 	bl	8002e90 <HAL_GetTick>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	1ad3      	subs	r3, r2, r3
 8002ed6:	68fa      	ldr	r2, [r7, #12]
 8002ed8:	429a      	cmp	r2, r3
 8002eda:	d8f7      	bhi.n	8002ecc <HAL_Delay+0x28>
  {
  }
}
 8002edc:	bf00      	nop
 8002ede:	bf00      	nop
 8002ee0:	3710      	adds	r7, #16
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}
 8002ee6:	bf00      	nop
 8002ee8:	20000020 	.word	0x20000020

08002eec <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b086      	sub	sp, #24
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002ef8:	2300      	movs	r3, #0
 8002efa:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002efc:	2300      	movs	r3, #0
 8002efe:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002f00:	2300      	movs	r3, #0
 8002f02:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d101      	bne.n	8002f0e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e0be      	b.n	800308c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	689b      	ldr	r3, [r3, #8]
 8002f12:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d109      	bne.n	8002f30 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2200      	movs	r2, #0
 8002f26:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002f2a:	6878      	ldr	r0, [r7, #4]
 8002f2c:	f7fe f98a 	bl	8001244 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002f30:	6878      	ldr	r0, [r7, #4]
 8002f32:	f000 fbc5 	bl	80036c0 <ADC_ConversionStop_Disable>
 8002f36:	4603      	mov	r3, r0
 8002f38:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f3e:	f003 0310 	and.w	r3, r3, #16
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	f040 8099 	bne.w	800307a <HAL_ADC_Init+0x18e>
 8002f48:	7dfb      	ldrb	r3, [r7, #23]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	f040 8095 	bne.w	800307a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f54:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002f58:	f023 0302 	bic.w	r3, r3, #2
 8002f5c:	f043 0202 	orr.w	r2, r3, #2
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002f6c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	7b1b      	ldrb	r3, [r3, #12]
 8002f72:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002f74:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002f76:	68ba      	ldr	r2, [r7, #8]
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	689b      	ldr	r3, [r3, #8]
 8002f80:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002f84:	d003      	beq.n	8002f8e <HAL_ADC_Init+0xa2>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	689b      	ldr	r3, [r3, #8]
 8002f8a:	2b01      	cmp	r3, #1
 8002f8c:	d102      	bne.n	8002f94 <HAL_ADC_Init+0xa8>
 8002f8e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002f92:	e000      	b.n	8002f96 <HAL_ADC_Init+0xaa>
 8002f94:	2300      	movs	r3, #0
 8002f96:	693a      	ldr	r2, [r7, #16]
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	7d1b      	ldrb	r3, [r3, #20]
 8002fa0:	2b01      	cmp	r3, #1
 8002fa2:	d119      	bne.n	8002fd8 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	7b1b      	ldrb	r3, [r3, #12]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d109      	bne.n	8002fc0 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	699b      	ldr	r3, [r3, #24]
 8002fb0:	3b01      	subs	r3, #1
 8002fb2:	035a      	lsls	r2, r3, #13
 8002fb4:	693b      	ldr	r3, [r7, #16]
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002fbc:	613b      	str	r3, [r7, #16]
 8002fbe:	e00b      	b.n	8002fd8 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fc4:	f043 0220 	orr.w	r2, r3, #32
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fd0:	f043 0201 	orr.w	r2, r3, #1
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	693a      	ldr	r2, [r7, #16]
 8002fe8:	430a      	orrs	r2, r1
 8002fea:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	689a      	ldr	r2, [r3, #8]
 8002ff2:	4b28      	ldr	r3, [pc, #160]	@ (8003094 <HAL_ADC_Init+0x1a8>)
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	687a      	ldr	r2, [r7, #4]
 8002ff8:	6812      	ldr	r2, [r2, #0]
 8002ffa:	68b9      	ldr	r1, [r7, #8]
 8002ffc:	430b      	orrs	r3, r1
 8002ffe:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003008:	d003      	beq.n	8003012 <HAL_ADC_Init+0x126>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	689b      	ldr	r3, [r3, #8]
 800300e:	2b01      	cmp	r3, #1
 8003010:	d104      	bne.n	800301c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	691b      	ldr	r3, [r3, #16]
 8003016:	3b01      	subs	r3, #1
 8003018:	051b      	lsls	r3, r3, #20
 800301a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003022:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	68fa      	ldr	r2, [r7, #12]
 800302c:	430a      	orrs	r2, r1
 800302e:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	689a      	ldr	r2, [r3, #8]
 8003036:	4b18      	ldr	r3, [pc, #96]	@ (8003098 <HAL_ADC_Init+0x1ac>)
 8003038:	4013      	ands	r3, r2
 800303a:	68ba      	ldr	r2, [r7, #8]
 800303c:	429a      	cmp	r2, r3
 800303e:	d10b      	bne.n	8003058 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2200      	movs	r2, #0
 8003044:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800304a:	f023 0303 	bic.w	r3, r3, #3
 800304e:	f043 0201 	orr.w	r2, r3, #1
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003056:	e018      	b.n	800308a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800305c:	f023 0312 	bic.w	r3, r3, #18
 8003060:	f043 0210 	orr.w	r2, r3, #16
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800306c:	f043 0201 	orr.w	r2, r3, #1
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8003074:	2301      	movs	r3, #1
 8003076:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003078:	e007      	b.n	800308a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800307e:	f043 0210 	orr.w	r2, r3, #16
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800308a:	7dfb      	ldrb	r3, [r7, #23]
}
 800308c:	4618      	mov	r0, r3
 800308e:	3718      	adds	r7, #24
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}
 8003094:	ffe1f7fd 	.word	0xffe1f7fd
 8003098:	ff1f0efe 	.word	0xff1f0efe

0800309c <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b084      	sub	sp, #16
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80030a4:	2300      	movs	r3, #0
 80030a6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80030ae:	2b01      	cmp	r3, #1
 80030b0:	d101      	bne.n	80030b6 <HAL_ADC_Start+0x1a>
 80030b2:	2302      	movs	r3, #2
 80030b4:	e098      	b.n	80031e8 <HAL_ADC_Start+0x14c>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2201      	movs	r2, #1
 80030ba:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80030be:	6878      	ldr	r0, [r7, #4]
 80030c0:	f000 faa4 	bl	800360c <ADC_Enable>
 80030c4:	4603      	mov	r3, r0
 80030c6:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80030c8:	7bfb      	ldrb	r3, [r7, #15]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	f040 8087 	bne.w	80031de <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030d4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80030d8:	f023 0301 	bic.w	r3, r3, #1
 80030dc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a41      	ldr	r2, [pc, #260]	@ (80031f0 <HAL_ADC_Start+0x154>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d105      	bne.n	80030fa <HAL_ADC_Start+0x5e>
 80030ee:	4b41      	ldr	r3, [pc, #260]	@ (80031f4 <HAL_ADC_Start+0x158>)
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d115      	bne.n	8003126 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030fe:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003110:	2b00      	cmp	r3, #0
 8003112:	d026      	beq.n	8003162 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003118:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800311c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003124:	e01d      	b.n	8003162 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800312a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a2f      	ldr	r2, [pc, #188]	@ (80031f4 <HAL_ADC_Start+0x158>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d004      	beq.n	8003146 <HAL_ADC_Start+0xaa>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a2b      	ldr	r2, [pc, #172]	@ (80031f0 <HAL_ADC_Start+0x154>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d10d      	bne.n	8003162 <HAL_ADC_Start+0xc6>
 8003146:	4b2b      	ldr	r3, [pc, #172]	@ (80031f4 <HAL_ADC_Start+0x158>)
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800314e:	2b00      	cmp	r3, #0
 8003150:	d007      	beq.n	8003162 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003156:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800315a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003166:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800316a:	2b00      	cmp	r3, #0
 800316c:	d006      	beq.n	800317c <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003172:	f023 0206 	bic.w	r2, r3, #6
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	62da      	str	r2, [r3, #44]	@ 0x2c
 800317a:	e002      	b.n	8003182 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2200      	movs	r2, #0
 8003180:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2200      	movs	r2, #0
 8003186:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f06f 0202 	mvn.w	r2, #2
 8003192:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800319e:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80031a2:	d113      	bne.n	80031cc <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80031a8:	4a11      	ldr	r2, [pc, #68]	@ (80031f0 <HAL_ADC_Start+0x154>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d105      	bne.n	80031ba <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80031ae:	4b11      	ldr	r3, [pc, #68]	@ (80031f4 <HAL_ADC_Start+0x158>)
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d108      	bne.n	80031cc <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	689a      	ldr	r2, [r3, #8]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 80031c8:	609a      	str	r2, [r3, #8]
 80031ca:	e00c      	b.n	80031e6 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	689a      	ldr	r2, [r3, #8]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80031da:	609a      	str	r2, [r3, #8]
 80031dc:	e003      	b.n	80031e6 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2200      	movs	r2, #0
 80031e2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80031e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	3710      	adds	r7, #16
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bd80      	pop	{r7, pc}
 80031f0:	40012800 	.word	0x40012800
 80031f4:	40012400 	.word	0x40012400

080031f8 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80031f8:	b590      	push	{r4, r7, lr}
 80031fa:	b087      	sub	sp, #28
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
 8003200:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003202:	2300      	movs	r3, #0
 8003204:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8003206:	2300      	movs	r3, #0
 8003208:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 800320a:	2300      	movs	r3, #0
 800320c:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 800320e:	f7ff fe3f 	bl	8002e90 <HAL_GetTick>
 8003212:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	689b      	ldr	r3, [r3, #8]
 800321a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800321e:	2b00      	cmp	r3, #0
 8003220:	d00b      	beq.n	800323a <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003226:	f043 0220 	orr.w	r2, r3, #32
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2200      	movs	r2, #0
 8003232:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	e0d3      	b.n	80033e2 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003244:	2b00      	cmp	r3, #0
 8003246:	d131      	bne.n	80032ac <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800324e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8003252:	2b00      	cmp	r3, #0
 8003254:	d12a      	bne.n	80032ac <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8003256:	e021      	b.n	800329c <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800325e:	d01d      	beq.n	800329c <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d007      	beq.n	8003276 <HAL_ADC_PollForConversion+0x7e>
 8003266:	f7ff fe13 	bl	8002e90 <HAL_GetTick>
 800326a:	4602      	mov	r2, r0
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	1ad3      	subs	r3, r2, r3
 8003270:	683a      	ldr	r2, [r7, #0]
 8003272:	429a      	cmp	r2, r3
 8003274:	d212      	bcs.n	800329c <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f003 0302 	and.w	r3, r3, #2
 8003280:	2b00      	cmp	r3, #0
 8003282:	d10b      	bne.n	800329c <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003288:	f043 0204 	orr.w	r2, r3, #4
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2200      	movs	r2, #0
 8003294:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 8003298:	2303      	movs	r3, #3
 800329a:	e0a2      	b.n	80033e2 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f003 0302 	and.w	r3, r3, #2
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d0d6      	beq.n	8003258 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80032aa:	e070      	b.n	800338e <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80032ac:	4b4f      	ldr	r3, [pc, #316]	@ (80033ec <HAL_ADC_PollForConversion+0x1f4>)
 80032ae:	681c      	ldr	r4, [r3, #0]
 80032b0:	2002      	movs	r0, #2
 80032b2:	f004 fa2f 	bl	8007714 <HAL_RCCEx_GetPeriphCLKFreq>
 80032b6:	4603      	mov	r3, r0
 80032b8:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	6919      	ldr	r1, [r3, #16]
 80032c2:	4b4b      	ldr	r3, [pc, #300]	@ (80033f0 <HAL_ADC_PollForConversion+0x1f8>)
 80032c4:	400b      	ands	r3, r1
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d118      	bne.n	80032fc <HAL_ADC_PollForConversion+0x104>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	68d9      	ldr	r1, [r3, #12]
 80032d0:	4b48      	ldr	r3, [pc, #288]	@ (80033f4 <HAL_ADC_PollForConversion+0x1fc>)
 80032d2:	400b      	ands	r3, r1
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d111      	bne.n	80032fc <HAL_ADC_PollForConversion+0x104>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	6919      	ldr	r1, [r3, #16]
 80032de:	4b46      	ldr	r3, [pc, #280]	@ (80033f8 <HAL_ADC_PollForConversion+0x200>)
 80032e0:	400b      	ands	r3, r1
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d108      	bne.n	80032f8 <HAL_ADC_PollForConversion+0x100>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	68d9      	ldr	r1, [r3, #12]
 80032ec:	4b43      	ldr	r3, [pc, #268]	@ (80033fc <HAL_ADC_PollForConversion+0x204>)
 80032ee:	400b      	ands	r3, r1
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d101      	bne.n	80032f8 <HAL_ADC_PollForConversion+0x100>
 80032f4:	2314      	movs	r3, #20
 80032f6:	e020      	b.n	800333a <HAL_ADC_PollForConversion+0x142>
 80032f8:	2329      	movs	r3, #41	@ 0x29
 80032fa:	e01e      	b.n	800333a <HAL_ADC_PollForConversion+0x142>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	6919      	ldr	r1, [r3, #16]
 8003302:	4b3d      	ldr	r3, [pc, #244]	@ (80033f8 <HAL_ADC_PollForConversion+0x200>)
 8003304:	400b      	ands	r3, r1
 8003306:	2b00      	cmp	r3, #0
 8003308:	d106      	bne.n	8003318 <HAL_ADC_PollForConversion+0x120>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	68d9      	ldr	r1, [r3, #12]
 8003310:	4b3a      	ldr	r3, [pc, #232]	@ (80033fc <HAL_ADC_PollForConversion+0x204>)
 8003312:	400b      	ands	r3, r1
 8003314:	2b00      	cmp	r3, #0
 8003316:	d00d      	beq.n	8003334 <HAL_ADC_PollForConversion+0x13c>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	6919      	ldr	r1, [r3, #16]
 800331e:	4b38      	ldr	r3, [pc, #224]	@ (8003400 <HAL_ADC_PollForConversion+0x208>)
 8003320:	400b      	ands	r3, r1
 8003322:	2b00      	cmp	r3, #0
 8003324:	d108      	bne.n	8003338 <HAL_ADC_PollForConversion+0x140>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	68d9      	ldr	r1, [r3, #12]
 800332c:	4b34      	ldr	r3, [pc, #208]	@ (8003400 <HAL_ADC_PollForConversion+0x208>)
 800332e:	400b      	ands	r3, r1
 8003330:	2b00      	cmp	r3, #0
 8003332:	d101      	bne.n	8003338 <HAL_ADC_PollForConversion+0x140>
 8003334:	2354      	movs	r3, #84	@ 0x54
 8003336:	e000      	b.n	800333a <HAL_ADC_PollForConversion+0x142>
 8003338:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 800333a:	fb02 f303 	mul.w	r3, r2, r3
 800333e:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8003340:	e021      	b.n	8003386 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003348:	d01a      	beq.n	8003380 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d007      	beq.n	8003360 <HAL_ADC_PollForConversion+0x168>
 8003350:	f7ff fd9e 	bl	8002e90 <HAL_GetTick>
 8003354:	4602      	mov	r2, r0
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	1ad3      	subs	r3, r2, r3
 800335a:	683a      	ldr	r2, [r7, #0]
 800335c:	429a      	cmp	r2, r3
 800335e:	d20f      	bcs.n	8003380 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	693a      	ldr	r2, [r7, #16]
 8003364:	429a      	cmp	r2, r3
 8003366:	d90b      	bls.n	8003380 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800336c:	f043 0204 	orr.w	r2, r3, #4
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2200      	movs	r2, #0
 8003378:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 800337c:	2303      	movs	r3, #3
 800337e:	e030      	b.n	80033e2 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	3301      	adds	r3, #1
 8003384:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	693a      	ldr	r2, [r7, #16]
 800338a:	429a      	cmp	r2, r3
 800338c:	d8d9      	bhi.n	8003342 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f06f 0212 	mvn.w	r2, #18
 8003396:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800339c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80033ae:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80033b2:	d115      	bne.n	80033e0 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d111      	bne.n	80033e0 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033c0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033cc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d105      	bne.n	80033e0 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033d8:	f043 0201 	orr.w	r2, r3, #1
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80033e0:	2300      	movs	r3, #0
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	371c      	adds	r7, #28
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd90      	pop	{r4, r7, pc}
 80033ea:	bf00      	nop
 80033ec:	20000018 	.word	0x20000018
 80033f0:	24924924 	.word	0x24924924
 80033f4:	00924924 	.word	0x00924924
 80033f8:	12492492 	.word	0x12492492
 80033fc:	00492492 	.word	0x00492492
 8003400:	00249249 	.word	0x00249249

08003404 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8003404:	b480      	push	{r7}
 8003406:	b083      	sub	sp, #12
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8003412:	4618      	mov	r0, r3
 8003414:	370c      	adds	r7, #12
 8003416:	46bd      	mov	sp, r7
 8003418:	bc80      	pop	{r7}
 800341a:	4770      	bx	lr

0800341c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800341c:	b480      	push	{r7}
 800341e:	b085      	sub	sp, #20
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
 8003424:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003426:	2300      	movs	r3, #0
 8003428:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800342a:	2300      	movs	r3, #0
 800342c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003434:	2b01      	cmp	r3, #1
 8003436:	d101      	bne.n	800343c <HAL_ADC_ConfigChannel+0x20>
 8003438:	2302      	movs	r3, #2
 800343a:	e0dc      	b.n	80035f6 <HAL_ADC_ConfigChannel+0x1da>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2201      	movs	r2, #1
 8003440:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	2b06      	cmp	r3, #6
 800344a:	d81c      	bhi.n	8003486 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	685a      	ldr	r2, [r3, #4]
 8003456:	4613      	mov	r3, r2
 8003458:	009b      	lsls	r3, r3, #2
 800345a:	4413      	add	r3, r2
 800345c:	3b05      	subs	r3, #5
 800345e:	221f      	movs	r2, #31
 8003460:	fa02 f303 	lsl.w	r3, r2, r3
 8003464:	43db      	mvns	r3, r3
 8003466:	4019      	ands	r1, r3
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	6818      	ldr	r0, [r3, #0]
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	685a      	ldr	r2, [r3, #4]
 8003470:	4613      	mov	r3, r2
 8003472:	009b      	lsls	r3, r3, #2
 8003474:	4413      	add	r3, r2
 8003476:	3b05      	subs	r3, #5
 8003478:	fa00 f203 	lsl.w	r2, r0, r3
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	430a      	orrs	r2, r1
 8003482:	635a      	str	r2, [r3, #52]	@ 0x34
 8003484:	e03c      	b.n	8003500 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	2b0c      	cmp	r3, #12
 800348c:	d81c      	bhi.n	80034c8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	685a      	ldr	r2, [r3, #4]
 8003498:	4613      	mov	r3, r2
 800349a:	009b      	lsls	r3, r3, #2
 800349c:	4413      	add	r3, r2
 800349e:	3b23      	subs	r3, #35	@ 0x23
 80034a0:	221f      	movs	r2, #31
 80034a2:	fa02 f303 	lsl.w	r3, r2, r3
 80034a6:	43db      	mvns	r3, r3
 80034a8:	4019      	ands	r1, r3
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	6818      	ldr	r0, [r3, #0]
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	685a      	ldr	r2, [r3, #4]
 80034b2:	4613      	mov	r3, r2
 80034b4:	009b      	lsls	r3, r3, #2
 80034b6:	4413      	add	r3, r2
 80034b8:	3b23      	subs	r3, #35	@ 0x23
 80034ba:	fa00 f203 	lsl.w	r2, r0, r3
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	430a      	orrs	r2, r1
 80034c4:	631a      	str	r2, [r3, #48]	@ 0x30
 80034c6:	e01b      	b.n	8003500 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	685a      	ldr	r2, [r3, #4]
 80034d2:	4613      	mov	r3, r2
 80034d4:	009b      	lsls	r3, r3, #2
 80034d6:	4413      	add	r3, r2
 80034d8:	3b41      	subs	r3, #65	@ 0x41
 80034da:	221f      	movs	r2, #31
 80034dc:	fa02 f303 	lsl.w	r3, r2, r3
 80034e0:	43db      	mvns	r3, r3
 80034e2:	4019      	ands	r1, r3
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	6818      	ldr	r0, [r3, #0]
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	685a      	ldr	r2, [r3, #4]
 80034ec:	4613      	mov	r3, r2
 80034ee:	009b      	lsls	r3, r3, #2
 80034f0:	4413      	add	r3, r2
 80034f2:	3b41      	subs	r3, #65	@ 0x41
 80034f4:	fa00 f203 	lsl.w	r2, r0, r3
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	430a      	orrs	r2, r1
 80034fe:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	2b09      	cmp	r3, #9
 8003506:	d91c      	bls.n	8003542 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	68d9      	ldr	r1, [r3, #12]
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	681a      	ldr	r2, [r3, #0]
 8003512:	4613      	mov	r3, r2
 8003514:	005b      	lsls	r3, r3, #1
 8003516:	4413      	add	r3, r2
 8003518:	3b1e      	subs	r3, #30
 800351a:	2207      	movs	r2, #7
 800351c:	fa02 f303 	lsl.w	r3, r2, r3
 8003520:	43db      	mvns	r3, r3
 8003522:	4019      	ands	r1, r3
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	6898      	ldr	r0, [r3, #8]
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	681a      	ldr	r2, [r3, #0]
 800352c:	4613      	mov	r3, r2
 800352e:	005b      	lsls	r3, r3, #1
 8003530:	4413      	add	r3, r2
 8003532:	3b1e      	subs	r3, #30
 8003534:	fa00 f203 	lsl.w	r2, r0, r3
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	430a      	orrs	r2, r1
 800353e:	60da      	str	r2, [r3, #12]
 8003540:	e019      	b.n	8003576 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	6919      	ldr	r1, [r3, #16]
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	681a      	ldr	r2, [r3, #0]
 800354c:	4613      	mov	r3, r2
 800354e:	005b      	lsls	r3, r3, #1
 8003550:	4413      	add	r3, r2
 8003552:	2207      	movs	r2, #7
 8003554:	fa02 f303 	lsl.w	r3, r2, r3
 8003558:	43db      	mvns	r3, r3
 800355a:	4019      	ands	r1, r3
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	6898      	ldr	r0, [r3, #8]
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	681a      	ldr	r2, [r3, #0]
 8003564:	4613      	mov	r3, r2
 8003566:	005b      	lsls	r3, r3, #1
 8003568:	4413      	add	r3, r2
 800356a:	fa00 f203 	lsl.w	r2, r0, r3
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	430a      	orrs	r2, r1
 8003574:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	2b10      	cmp	r3, #16
 800357c:	d003      	beq.n	8003586 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003582:	2b11      	cmp	r3, #17
 8003584:	d132      	bne.n	80035ec <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a1d      	ldr	r2, [pc, #116]	@ (8003600 <HAL_ADC_ConfigChannel+0x1e4>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d125      	bne.n	80035dc <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	689b      	ldr	r3, [r3, #8]
 8003596:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800359a:	2b00      	cmp	r3, #0
 800359c:	d126      	bne.n	80035ec <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	689a      	ldr	r2, [r3, #8]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80035ac:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	2b10      	cmp	r3, #16
 80035b4:	d11a      	bne.n	80035ec <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80035b6:	4b13      	ldr	r3, [pc, #76]	@ (8003604 <HAL_ADC_ConfigChannel+0x1e8>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a13      	ldr	r2, [pc, #76]	@ (8003608 <HAL_ADC_ConfigChannel+0x1ec>)
 80035bc:	fba2 2303 	umull	r2, r3, r2, r3
 80035c0:	0c9a      	lsrs	r2, r3, #18
 80035c2:	4613      	mov	r3, r2
 80035c4:	009b      	lsls	r3, r3, #2
 80035c6:	4413      	add	r3, r2
 80035c8:	005b      	lsls	r3, r3, #1
 80035ca:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80035cc:	e002      	b.n	80035d4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	3b01      	subs	r3, #1
 80035d2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d1f9      	bne.n	80035ce <HAL_ADC_ConfigChannel+0x1b2>
 80035da:	e007      	b.n	80035ec <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035e0:	f043 0220 	orr.w	r2, r3, #32
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 80035e8:	2301      	movs	r3, #1
 80035ea:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2200      	movs	r2, #0
 80035f0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80035f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	3714      	adds	r7, #20
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bc80      	pop	{r7}
 80035fe:	4770      	bx	lr
 8003600:	40012400 	.word	0x40012400
 8003604:	20000018 	.word	0x20000018
 8003608:	431bde83 	.word	0x431bde83

0800360c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b084      	sub	sp, #16
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003614:	2300      	movs	r3, #0
 8003616:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003618:	2300      	movs	r3, #0
 800361a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	689b      	ldr	r3, [r3, #8]
 8003622:	f003 0301 	and.w	r3, r3, #1
 8003626:	2b01      	cmp	r3, #1
 8003628:	d040      	beq.n	80036ac <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	689a      	ldr	r2, [r3, #8]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f042 0201 	orr.w	r2, r2, #1
 8003638:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800363a:	4b1f      	ldr	r3, [pc, #124]	@ (80036b8 <ADC_Enable+0xac>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a1f      	ldr	r2, [pc, #124]	@ (80036bc <ADC_Enable+0xb0>)
 8003640:	fba2 2303 	umull	r2, r3, r2, r3
 8003644:	0c9b      	lsrs	r3, r3, #18
 8003646:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003648:	e002      	b.n	8003650 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800364a:	68bb      	ldr	r3, [r7, #8]
 800364c:	3b01      	subs	r3, #1
 800364e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d1f9      	bne.n	800364a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003656:	f7ff fc1b 	bl	8002e90 <HAL_GetTick>
 800365a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800365c:	e01f      	b.n	800369e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800365e:	f7ff fc17 	bl	8002e90 <HAL_GetTick>
 8003662:	4602      	mov	r2, r0
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	1ad3      	subs	r3, r2, r3
 8003668:	2b02      	cmp	r3, #2
 800366a:	d918      	bls.n	800369e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	f003 0301 	and.w	r3, r3, #1
 8003676:	2b01      	cmp	r3, #1
 8003678:	d011      	beq.n	800369e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800367e:	f043 0210 	orr.w	r2, r3, #16
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800368a:	f043 0201 	orr.w	r2, r3, #1
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2200      	movs	r2, #0
 8003696:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 800369a:	2301      	movs	r3, #1
 800369c:	e007      	b.n	80036ae <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	689b      	ldr	r3, [r3, #8]
 80036a4:	f003 0301 	and.w	r3, r3, #1
 80036a8:	2b01      	cmp	r3, #1
 80036aa:	d1d8      	bne.n	800365e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80036ac:	2300      	movs	r3, #0
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	3710      	adds	r7, #16
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}
 80036b6:	bf00      	nop
 80036b8:	20000018 	.word	0x20000018
 80036bc:	431bde83 	.word	0x431bde83

080036c0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b084      	sub	sp, #16
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80036c8:	2300      	movs	r3, #0
 80036ca:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	689b      	ldr	r3, [r3, #8]
 80036d2:	f003 0301 	and.w	r3, r3, #1
 80036d6:	2b01      	cmp	r3, #1
 80036d8:	d12e      	bne.n	8003738 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	689a      	ldr	r2, [r3, #8]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f022 0201 	bic.w	r2, r2, #1
 80036e8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80036ea:	f7ff fbd1 	bl	8002e90 <HAL_GetTick>
 80036ee:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80036f0:	e01b      	b.n	800372a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80036f2:	f7ff fbcd 	bl	8002e90 <HAL_GetTick>
 80036f6:	4602      	mov	r2, r0
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	1ad3      	subs	r3, r2, r3
 80036fc:	2b02      	cmp	r3, #2
 80036fe:	d914      	bls.n	800372a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	689b      	ldr	r3, [r3, #8]
 8003706:	f003 0301 	and.w	r3, r3, #1
 800370a:	2b01      	cmp	r3, #1
 800370c:	d10d      	bne.n	800372a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003712:	f043 0210 	orr.w	r2, r3, #16
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800371e:	f043 0201 	orr.w	r2, r3, #1
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	e007      	b.n	800373a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	689b      	ldr	r3, [r3, #8]
 8003730:	f003 0301 	and.w	r3, r3, #1
 8003734:	2b01      	cmp	r3, #1
 8003736:	d0dc      	beq.n	80036f2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003738:	2300      	movs	r3, #0
}
 800373a:	4618      	mov	r0, r3
 800373c:	3710      	adds	r7, #16
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}
	...

08003744 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8003744:	b590      	push	{r4, r7, lr}
 8003746:	b087      	sub	sp, #28
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800374c:	2300      	movs	r3, #0
 800374e:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8003750:	2300      	movs	r3, #0
 8003752:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800375a:	2b01      	cmp	r3, #1
 800375c:	d101      	bne.n	8003762 <HAL_ADCEx_Calibration_Start+0x1e>
 800375e:	2302      	movs	r3, #2
 8003760:	e097      	b.n	8003892 <HAL_ADCEx_Calibration_Start+0x14e>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2201      	movs	r2, #1
 8003766:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	f7ff ffa8 	bl	80036c0 <ADC_ConversionStop_Disable>
 8003770:	4603      	mov	r3, r0
 8003772:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 8003774:	6878      	ldr	r0, [r7, #4]
 8003776:	f7ff ff49 	bl	800360c <ADC_Enable>
 800377a:	4603      	mov	r3, r0
 800377c:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 800377e:	7dfb      	ldrb	r3, [r7, #23]
 8003780:	2b00      	cmp	r3, #0
 8003782:	f040 8081 	bne.w	8003888 <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800378a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800378e:	f023 0302 	bic.w	r3, r3, #2
 8003792:	f043 0202 	orr.w	r2, r3, #2
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800379a:	4b40      	ldr	r3, [pc, #256]	@ (800389c <HAL_ADCEx_Calibration_Start+0x158>)
 800379c:	681c      	ldr	r4, [r3, #0]
 800379e:	2002      	movs	r0, #2
 80037a0:	f003 ffb8 	bl	8007714 <HAL_RCCEx_GetPeriphCLKFreq>
 80037a4:	4603      	mov	r3, r0
 80037a6:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 80037aa:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 80037ac:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 80037ae:	e002      	b.n	80037b6 <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	3b01      	subs	r3, #1
 80037b4:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d1f9      	bne.n	80037b0 <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	689a      	ldr	r2, [r3, #8]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f042 0208 	orr.w	r2, r2, #8
 80037ca:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80037cc:	f7ff fb60 	bl	8002e90 <HAL_GetTick>
 80037d0:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80037d2:	e01b      	b.n	800380c <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80037d4:	f7ff fb5c 	bl	8002e90 <HAL_GetTick>
 80037d8:	4602      	mov	r2, r0
 80037da:	693b      	ldr	r3, [r7, #16]
 80037dc:	1ad3      	subs	r3, r2, r3
 80037de:	2b0a      	cmp	r3, #10
 80037e0:	d914      	bls.n	800380c <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	689b      	ldr	r3, [r3, #8]
 80037e8:	f003 0308 	and.w	r3, r3, #8
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d00d      	beq.n	800380c <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037f4:	f023 0312 	bic.w	r3, r3, #18
 80037f8:	f043 0210 	orr.w	r2, r3, #16
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2200      	movs	r2, #0
 8003804:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8003808:	2301      	movs	r3, #1
 800380a:	e042      	b.n	8003892 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	689b      	ldr	r3, [r3, #8]
 8003812:	f003 0308 	and.w	r3, r3, #8
 8003816:	2b00      	cmp	r3, #0
 8003818:	d1dc      	bne.n	80037d4 <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	689a      	ldr	r2, [r3, #8]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f042 0204 	orr.w	r2, r2, #4
 8003828:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 800382a:	f7ff fb31 	bl	8002e90 <HAL_GetTick>
 800382e:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8003830:	e01b      	b.n	800386a <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8003832:	f7ff fb2d 	bl	8002e90 <HAL_GetTick>
 8003836:	4602      	mov	r2, r0
 8003838:	693b      	ldr	r3, [r7, #16]
 800383a:	1ad3      	subs	r3, r2, r3
 800383c:	2b0a      	cmp	r3, #10
 800383e:	d914      	bls.n	800386a <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	f003 0304 	and.w	r3, r3, #4
 800384a:	2b00      	cmp	r3, #0
 800384c:	d00d      	beq.n	800386a <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003852:	f023 0312 	bic.w	r3, r3, #18
 8003856:	f043 0210 	orr.w	r2, r3, #16
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2200      	movs	r2, #0
 8003862:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8003866:	2301      	movs	r3, #1
 8003868:	e013      	b.n	8003892 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	689b      	ldr	r3, [r3, #8]
 8003870:	f003 0304 	and.w	r3, r3, #4
 8003874:	2b00      	cmp	r3, #0
 8003876:	d1dc      	bne.n	8003832 <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800387c:	f023 0303 	bic.w	r3, r3, #3
 8003880:	f043 0201 	orr.w	r2, r3, #1
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2200      	movs	r2, #0
 800388c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003890:	7dfb      	ldrb	r3, [r7, #23]
}
 8003892:	4618      	mov	r0, r3
 8003894:	371c      	adds	r7, #28
 8003896:	46bd      	mov	sp, r7
 8003898:	bd90      	pop	{r4, r7, pc}
 800389a:	bf00      	nop
 800389c:	20000018 	.word	0x20000018

080038a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b085      	sub	sp, #20
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	f003 0307 	and.w	r3, r3, #7
 80038ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80038b0:	4b0c      	ldr	r3, [pc, #48]	@ (80038e4 <__NVIC_SetPriorityGrouping+0x44>)
 80038b2:	68db      	ldr	r3, [r3, #12]
 80038b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80038b6:	68ba      	ldr	r2, [r7, #8]
 80038b8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80038bc:	4013      	ands	r3, r2
 80038be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80038c8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80038cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80038d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80038d2:	4a04      	ldr	r2, [pc, #16]	@ (80038e4 <__NVIC_SetPriorityGrouping+0x44>)
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	60d3      	str	r3, [r2, #12]
}
 80038d8:	bf00      	nop
 80038da:	3714      	adds	r7, #20
 80038dc:	46bd      	mov	sp, r7
 80038de:	bc80      	pop	{r7}
 80038e0:	4770      	bx	lr
 80038e2:	bf00      	nop
 80038e4:	e000ed00 	.word	0xe000ed00

080038e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80038e8:	b480      	push	{r7}
 80038ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80038ec:	4b04      	ldr	r3, [pc, #16]	@ (8003900 <__NVIC_GetPriorityGrouping+0x18>)
 80038ee:	68db      	ldr	r3, [r3, #12]
 80038f0:	0a1b      	lsrs	r3, r3, #8
 80038f2:	f003 0307 	and.w	r3, r3, #7
}
 80038f6:	4618      	mov	r0, r3
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bc80      	pop	{r7}
 80038fc:	4770      	bx	lr
 80038fe:	bf00      	nop
 8003900:	e000ed00 	.word	0xe000ed00

08003904 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003904:	b480      	push	{r7}
 8003906:	b083      	sub	sp, #12
 8003908:	af00      	add	r7, sp, #0
 800390a:	4603      	mov	r3, r0
 800390c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800390e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003912:	2b00      	cmp	r3, #0
 8003914:	db0b      	blt.n	800392e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003916:	79fb      	ldrb	r3, [r7, #7]
 8003918:	f003 021f 	and.w	r2, r3, #31
 800391c:	4906      	ldr	r1, [pc, #24]	@ (8003938 <__NVIC_EnableIRQ+0x34>)
 800391e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003922:	095b      	lsrs	r3, r3, #5
 8003924:	2001      	movs	r0, #1
 8003926:	fa00 f202 	lsl.w	r2, r0, r2
 800392a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800392e:	bf00      	nop
 8003930:	370c      	adds	r7, #12
 8003932:	46bd      	mov	sp, r7
 8003934:	bc80      	pop	{r7}
 8003936:	4770      	bx	lr
 8003938:	e000e100 	.word	0xe000e100

0800393c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800393c:	b480      	push	{r7}
 800393e:	b083      	sub	sp, #12
 8003940:	af00      	add	r7, sp, #0
 8003942:	4603      	mov	r3, r0
 8003944:	6039      	str	r1, [r7, #0]
 8003946:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003948:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800394c:	2b00      	cmp	r3, #0
 800394e:	db0a      	blt.n	8003966 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	b2da      	uxtb	r2, r3
 8003954:	490c      	ldr	r1, [pc, #48]	@ (8003988 <__NVIC_SetPriority+0x4c>)
 8003956:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800395a:	0112      	lsls	r2, r2, #4
 800395c:	b2d2      	uxtb	r2, r2
 800395e:	440b      	add	r3, r1
 8003960:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003964:	e00a      	b.n	800397c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	b2da      	uxtb	r2, r3
 800396a:	4908      	ldr	r1, [pc, #32]	@ (800398c <__NVIC_SetPriority+0x50>)
 800396c:	79fb      	ldrb	r3, [r7, #7]
 800396e:	f003 030f 	and.w	r3, r3, #15
 8003972:	3b04      	subs	r3, #4
 8003974:	0112      	lsls	r2, r2, #4
 8003976:	b2d2      	uxtb	r2, r2
 8003978:	440b      	add	r3, r1
 800397a:	761a      	strb	r2, [r3, #24]
}
 800397c:	bf00      	nop
 800397e:	370c      	adds	r7, #12
 8003980:	46bd      	mov	sp, r7
 8003982:	bc80      	pop	{r7}
 8003984:	4770      	bx	lr
 8003986:	bf00      	nop
 8003988:	e000e100 	.word	0xe000e100
 800398c:	e000ed00 	.word	0xe000ed00

08003990 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003990:	b480      	push	{r7}
 8003992:	b089      	sub	sp, #36	@ 0x24
 8003994:	af00      	add	r7, sp, #0
 8003996:	60f8      	str	r0, [r7, #12]
 8003998:	60b9      	str	r1, [r7, #8]
 800399a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	f003 0307 	and.w	r3, r3, #7
 80039a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80039a4:	69fb      	ldr	r3, [r7, #28]
 80039a6:	f1c3 0307 	rsb	r3, r3, #7
 80039aa:	2b04      	cmp	r3, #4
 80039ac:	bf28      	it	cs
 80039ae:	2304      	movcs	r3, #4
 80039b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80039b2:	69fb      	ldr	r3, [r7, #28]
 80039b4:	3304      	adds	r3, #4
 80039b6:	2b06      	cmp	r3, #6
 80039b8:	d902      	bls.n	80039c0 <NVIC_EncodePriority+0x30>
 80039ba:	69fb      	ldr	r3, [r7, #28]
 80039bc:	3b03      	subs	r3, #3
 80039be:	e000      	b.n	80039c2 <NVIC_EncodePriority+0x32>
 80039c0:	2300      	movs	r3, #0
 80039c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039c4:	f04f 32ff 	mov.w	r2, #4294967295
 80039c8:	69bb      	ldr	r3, [r7, #24]
 80039ca:	fa02 f303 	lsl.w	r3, r2, r3
 80039ce:	43da      	mvns	r2, r3
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	401a      	ands	r2, r3
 80039d4:	697b      	ldr	r3, [r7, #20]
 80039d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80039d8:	f04f 31ff 	mov.w	r1, #4294967295
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	fa01 f303 	lsl.w	r3, r1, r3
 80039e2:	43d9      	mvns	r1, r3
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039e8:	4313      	orrs	r3, r2
         );
}
 80039ea:	4618      	mov	r0, r3
 80039ec:	3724      	adds	r7, #36	@ 0x24
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bc80      	pop	{r7}
 80039f2:	4770      	bx	lr

080039f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b082      	sub	sp, #8
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	3b01      	subs	r3, #1
 8003a00:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003a04:	d301      	bcc.n	8003a0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003a06:	2301      	movs	r3, #1
 8003a08:	e00f      	b.n	8003a2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a0a:	4a0a      	ldr	r2, [pc, #40]	@ (8003a34 <SysTick_Config+0x40>)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	3b01      	subs	r3, #1
 8003a10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003a12:	210f      	movs	r1, #15
 8003a14:	f04f 30ff 	mov.w	r0, #4294967295
 8003a18:	f7ff ff90 	bl	800393c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a1c:	4b05      	ldr	r3, [pc, #20]	@ (8003a34 <SysTick_Config+0x40>)
 8003a1e:	2200      	movs	r2, #0
 8003a20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a22:	4b04      	ldr	r3, [pc, #16]	@ (8003a34 <SysTick_Config+0x40>)
 8003a24:	2207      	movs	r2, #7
 8003a26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003a28:	2300      	movs	r3, #0
}
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	3708      	adds	r7, #8
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}
 8003a32:	bf00      	nop
 8003a34:	e000e010 	.word	0xe000e010

08003a38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b082      	sub	sp, #8
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a40:	6878      	ldr	r0, [r7, #4]
 8003a42:	f7ff ff2d 	bl	80038a0 <__NVIC_SetPriorityGrouping>
}
 8003a46:	bf00      	nop
 8003a48:	3708      	adds	r7, #8
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}

08003a4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003a4e:	b580      	push	{r7, lr}
 8003a50:	b086      	sub	sp, #24
 8003a52:	af00      	add	r7, sp, #0
 8003a54:	4603      	mov	r3, r0
 8003a56:	60b9      	str	r1, [r7, #8]
 8003a58:	607a      	str	r2, [r7, #4]
 8003a5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003a60:	f7ff ff42 	bl	80038e8 <__NVIC_GetPriorityGrouping>
 8003a64:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a66:	687a      	ldr	r2, [r7, #4]
 8003a68:	68b9      	ldr	r1, [r7, #8]
 8003a6a:	6978      	ldr	r0, [r7, #20]
 8003a6c:	f7ff ff90 	bl	8003990 <NVIC_EncodePriority>
 8003a70:	4602      	mov	r2, r0
 8003a72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a76:	4611      	mov	r1, r2
 8003a78:	4618      	mov	r0, r3
 8003a7a:	f7ff ff5f 	bl	800393c <__NVIC_SetPriority>
}
 8003a7e:	bf00      	nop
 8003a80:	3718      	adds	r7, #24
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd80      	pop	{r7, pc}

08003a86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a86:	b580      	push	{r7, lr}
 8003a88:	b082      	sub	sp, #8
 8003a8a:	af00      	add	r7, sp, #0
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a94:	4618      	mov	r0, r3
 8003a96:	f7ff ff35 	bl	8003904 <__NVIC_EnableIRQ>
}
 8003a9a:	bf00      	nop
 8003a9c:	3708      	adds	r7, #8
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}

08003aa2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003aa2:	b580      	push	{r7, lr}
 8003aa4:	b082      	sub	sp, #8
 8003aa6:	af00      	add	r7, sp, #0
 8003aa8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003aaa:	6878      	ldr	r0, [r7, #4]
 8003aac:	f7ff ffa2 	bl	80039f4 <SysTick_Config>
 8003ab0:	4603      	mov	r3, r0
}
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	3708      	adds	r7, #8
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}
	...

08003abc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003abc:	b480      	push	{r7}
 8003abe:	b085      	sub	sp, #20
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d101      	bne.n	8003ad2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	e043      	b.n	8003b5a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	461a      	mov	r2, r3
 8003ad8:	4b22      	ldr	r3, [pc, #136]	@ (8003b64 <HAL_DMA_Init+0xa8>)
 8003ada:	4413      	add	r3, r2
 8003adc:	4a22      	ldr	r2, [pc, #136]	@ (8003b68 <HAL_DMA_Init+0xac>)
 8003ade:	fba2 2303 	umull	r2, r3, r2, r3
 8003ae2:	091b      	lsrs	r3, r3, #4
 8003ae4:	009a      	lsls	r2, r3, #2
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	4a1f      	ldr	r2, [pc, #124]	@ (8003b6c <HAL_DMA_Init+0xb0>)
 8003aee:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2202      	movs	r2, #2
 8003af4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003b06:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8003b0a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003b14:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	68db      	ldr	r3, [r3, #12]
 8003b1a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b20:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	695b      	ldr	r3, [r3, #20]
 8003b26:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b2c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	69db      	ldr	r3, [r3, #28]
 8003b32:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003b34:	68fa      	ldr	r2, [r7, #12]
 8003b36:	4313      	orrs	r3, r2
 8003b38:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	68fa      	ldr	r2, [r7, #12]
 8003b40:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2200      	movs	r2, #0
 8003b46:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2200      	movs	r2, #0
 8003b54:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003b58:	2300      	movs	r3, #0
}
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	3714      	adds	r7, #20
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bc80      	pop	{r7}
 8003b62:	4770      	bx	lr
 8003b64:	bffdfff8 	.word	0xbffdfff8
 8003b68:	cccccccd 	.word	0xcccccccd
 8003b6c:	40020000 	.word	0x40020000

08003b70 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b084      	sub	sp, #16
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b78:	2300      	movs	r3, #0
 8003b7a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003b82:	b2db      	uxtb	r3, r3
 8003b84:	2b02      	cmp	r3, #2
 8003b86:	d005      	beq.n	8003b94 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2204      	movs	r2, #4
 8003b8c:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	73fb      	strb	r3, [r7, #15]
 8003b92:	e051      	b.n	8003c38 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	681a      	ldr	r2, [r3, #0]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f022 020e 	bic.w	r2, r2, #14
 8003ba2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	681a      	ldr	r2, [r3, #0]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f022 0201 	bic.w	r2, r2, #1
 8003bb2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a22      	ldr	r2, [pc, #136]	@ (8003c44 <HAL_DMA_Abort_IT+0xd4>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d029      	beq.n	8003c12 <HAL_DMA_Abort_IT+0xa2>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a21      	ldr	r2, [pc, #132]	@ (8003c48 <HAL_DMA_Abort_IT+0xd8>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d022      	beq.n	8003c0e <HAL_DMA_Abort_IT+0x9e>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a1f      	ldr	r2, [pc, #124]	@ (8003c4c <HAL_DMA_Abort_IT+0xdc>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d01a      	beq.n	8003c08 <HAL_DMA_Abort_IT+0x98>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a1e      	ldr	r2, [pc, #120]	@ (8003c50 <HAL_DMA_Abort_IT+0xe0>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d012      	beq.n	8003c02 <HAL_DMA_Abort_IT+0x92>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a1c      	ldr	r2, [pc, #112]	@ (8003c54 <HAL_DMA_Abort_IT+0xe4>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d00a      	beq.n	8003bfc <HAL_DMA_Abort_IT+0x8c>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a1b      	ldr	r2, [pc, #108]	@ (8003c58 <HAL_DMA_Abort_IT+0xe8>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d102      	bne.n	8003bf6 <HAL_DMA_Abort_IT+0x86>
 8003bf0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8003bf4:	e00e      	b.n	8003c14 <HAL_DMA_Abort_IT+0xa4>
 8003bf6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003bfa:	e00b      	b.n	8003c14 <HAL_DMA_Abort_IT+0xa4>
 8003bfc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003c00:	e008      	b.n	8003c14 <HAL_DMA_Abort_IT+0xa4>
 8003c02:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003c06:	e005      	b.n	8003c14 <HAL_DMA_Abort_IT+0xa4>
 8003c08:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003c0c:	e002      	b.n	8003c14 <HAL_DMA_Abort_IT+0xa4>
 8003c0e:	2310      	movs	r3, #16
 8003c10:	e000      	b.n	8003c14 <HAL_DMA_Abort_IT+0xa4>
 8003c12:	2301      	movs	r3, #1
 8003c14:	4a11      	ldr	r2, [pc, #68]	@ (8003c5c <HAL_DMA_Abort_IT+0xec>)
 8003c16:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2200      	movs	r2, #0
 8003c24:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d003      	beq.n	8003c38 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c34:	6878      	ldr	r0, [r7, #4]
 8003c36:	4798      	blx	r3
    } 
  }
  return status;
 8003c38:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	3710      	adds	r7, #16
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}
 8003c42:	bf00      	nop
 8003c44:	40020008 	.word	0x40020008
 8003c48:	4002001c 	.word	0x4002001c
 8003c4c:	40020030 	.word	0x40020030
 8003c50:	40020044 	.word	0x40020044
 8003c54:	40020058 	.word	0x40020058
 8003c58:	4002006c 	.word	0x4002006c
 8003c5c:	40020000 	.word	0x40020000

08003c60 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b084      	sub	sp, #16
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c7c:	2204      	movs	r2, #4
 8003c7e:	409a      	lsls	r2, r3
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	4013      	ands	r3, r2
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d04f      	beq.n	8003d28 <HAL_DMA_IRQHandler+0xc8>
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	f003 0304 	and.w	r3, r3, #4
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d04a      	beq.n	8003d28 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f003 0320 	and.w	r3, r3, #32
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d107      	bne.n	8003cb0 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	681a      	ldr	r2, [r3, #0]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f022 0204 	bic.w	r2, r2, #4
 8003cae:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a66      	ldr	r2, [pc, #408]	@ (8003e50 <HAL_DMA_IRQHandler+0x1f0>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d029      	beq.n	8003d0e <HAL_DMA_IRQHandler+0xae>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4a65      	ldr	r2, [pc, #404]	@ (8003e54 <HAL_DMA_IRQHandler+0x1f4>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d022      	beq.n	8003d0a <HAL_DMA_IRQHandler+0xaa>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a63      	ldr	r2, [pc, #396]	@ (8003e58 <HAL_DMA_IRQHandler+0x1f8>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d01a      	beq.n	8003d04 <HAL_DMA_IRQHandler+0xa4>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a62      	ldr	r2, [pc, #392]	@ (8003e5c <HAL_DMA_IRQHandler+0x1fc>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d012      	beq.n	8003cfe <HAL_DMA_IRQHandler+0x9e>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a60      	ldr	r2, [pc, #384]	@ (8003e60 <HAL_DMA_IRQHandler+0x200>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d00a      	beq.n	8003cf8 <HAL_DMA_IRQHandler+0x98>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4a5f      	ldr	r2, [pc, #380]	@ (8003e64 <HAL_DMA_IRQHandler+0x204>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d102      	bne.n	8003cf2 <HAL_DMA_IRQHandler+0x92>
 8003cec:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003cf0:	e00e      	b.n	8003d10 <HAL_DMA_IRQHandler+0xb0>
 8003cf2:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8003cf6:	e00b      	b.n	8003d10 <HAL_DMA_IRQHandler+0xb0>
 8003cf8:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8003cfc:	e008      	b.n	8003d10 <HAL_DMA_IRQHandler+0xb0>
 8003cfe:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003d02:	e005      	b.n	8003d10 <HAL_DMA_IRQHandler+0xb0>
 8003d04:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003d08:	e002      	b.n	8003d10 <HAL_DMA_IRQHandler+0xb0>
 8003d0a:	2340      	movs	r3, #64	@ 0x40
 8003d0c:	e000      	b.n	8003d10 <HAL_DMA_IRQHandler+0xb0>
 8003d0e:	2304      	movs	r3, #4
 8003d10:	4a55      	ldr	r2, [pc, #340]	@ (8003e68 <HAL_DMA_IRQHandler+0x208>)
 8003d12:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	f000 8094 	beq.w	8003e46 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d22:	6878      	ldr	r0, [r7, #4]
 8003d24:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8003d26:	e08e      	b.n	8003e46 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d2c:	2202      	movs	r2, #2
 8003d2e:	409a      	lsls	r2, r3
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	4013      	ands	r3, r2
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d056      	beq.n	8003de6 <HAL_DMA_IRQHandler+0x186>
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	f003 0302 	and.w	r3, r3, #2
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d051      	beq.n	8003de6 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f003 0320 	and.w	r3, r3, #32
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d10b      	bne.n	8003d68 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	681a      	ldr	r2, [r3, #0]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f022 020a 	bic.w	r2, r2, #10
 8003d5e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2201      	movs	r2, #1
 8003d64:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a38      	ldr	r2, [pc, #224]	@ (8003e50 <HAL_DMA_IRQHandler+0x1f0>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d029      	beq.n	8003dc6 <HAL_DMA_IRQHandler+0x166>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a37      	ldr	r2, [pc, #220]	@ (8003e54 <HAL_DMA_IRQHandler+0x1f4>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d022      	beq.n	8003dc2 <HAL_DMA_IRQHandler+0x162>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a35      	ldr	r2, [pc, #212]	@ (8003e58 <HAL_DMA_IRQHandler+0x1f8>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d01a      	beq.n	8003dbc <HAL_DMA_IRQHandler+0x15c>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a34      	ldr	r2, [pc, #208]	@ (8003e5c <HAL_DMA_IRQHandler+0x1fc>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d012      	beq.n	8003db6 <HAL_DMA_IRQHandler+0x156>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a32      	ldr	r2, [pc, #200]	@ (8003e60 <HAL_DMA_IRQHandler+0x200>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d00a      	beq.n	8003db0 <HAL_DMA_IRQHandler+0x150>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a31      	ldr	r2, [pc, #196]	@ (8003e64 <HAL_DMA_IRQHandler+0x204>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d102      	bne.n	8003daa <HAL_DMA_IRQHandler+0x14a>
 8003da4:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8003da8:	e00e      	b.n	8003dc8 <HAL_DMA_IRQHandler+0x168>
 8003daa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003dae:	e00b      	b.n	8003dc8 <HAL_DMA_IRQHandler+0x168>
 8003db0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003db4:	e008      	b.n	8003dc8 <HAL_DMA_IRQHandler+0x168>
 8003db6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003dba:	e005      	b.n	8003dc8 <HAL_DMA_IRQHandler+0x168>
 8003dbc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003dc0:	e002      	b.n	8003dc8 <HAL_DMA_IRQHandler+0x168>
 8003dc2:	2320      	movs	r3, #32
 8003dc4:	e000      	b.n	8003dc8 <HAL_DMA_IRQHandler+0x168>
 8003dc6:	2302      	movs	r3, #2
 8003dc8:	4a27      	ldr	r2, [pc, #156]	@ (8003e68 <HAL_DMA_IRQHandler+0x208>)
 8003dca:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d034      	beq.n	8003e46 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003de0:	6878      	ldr	r0, [r7, #4]
 8003de2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003de4:	e02f      	b.n	8003e46 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dea:	2208      	movs	r2, #8
 8003dec:	409a      	lsls	r2, r3
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	4013      	ands	r3, r2
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d028      	beq.n	8003e48 <HAL_DMA_IRQHandler+0x1e8>
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	f003 0308 	and.w	r3, r3, #8
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d023      	beq.n	8003e48 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	681a      	ldr	r2, [r3, #0]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f022 020e 	bic.w	r2, r2, #14
 8003e0e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e18:	2101      	movs	r1, #1
 8003e1a:	fa01 f202 	lsl.w	r2, r1, r2
 8003e1e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2201      	movs	r2, #1
 8003e24:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2201      	movs	r2, #1
 8003e2a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2200      	movs	r2, #0
 8003e32:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d004      	beq.n	8003e48 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e42:	6878      	ldr	r0, [r7, #4]
 8003e44:	4798      	blx	r3
    }
  }
  return;
 8003e46:	bf00      	nop
 8003e48:	bf00      	nop
}
 8003e4a:	3710      	adds	r7, #16
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	bd80      	pop	{r7, pc}
 8003e50:	40020008 	.word	0x40020008
 8003e54:	4002001c 	.word	0x4002001c
 8003e58:	40020030 	.word	0x40020030
 8003e5c:	40020044 	.word	0x40020044
 8003e60:	40020058 	.word	0x40020058
 8003e64:	4002006c 	.word	0x4002006c
 8003e68:	40020000 	.word	0x40020000

08003e6c <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b083      	sub	sp, #12
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003e7a:	b2db      	uxtb	r3, r3
}
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	370c      	adds	r7, #12
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bc80      	pop	{r7}
 8003e84:	4770      	bx	lr
	...

08003e88 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	b08b      	sub	sp, #44	@ 0x2c
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
 8003e90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003e92:	2300      	movs	r3, #0
 8003e94:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003e96:	2300      	movs	r3, #0
 8003e98:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e9a:	e169      	b.n	8004170 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003e9c:	2201      	movs	r2, #1
 8003e9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ea4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	69fa      	ldr	r2, [r7, #28]
 8003eac:	4013      	ands	r3, r2
 8003eae:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003eb0:	69ba      	ldr	r2, [r7, #24]
 8003eb2:	69fb      	ldr	r3, [r7, #28]
 8003eb4:	429a      	cmp	r2, r3
 8003eb6:	f040 8158 	bne.w	800416a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	4a9a      	ldr	r2, [pc, #616]	@ (8004128 <HAL_GPIO_Init+0x2a0>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d05e      	beq.n	8003f82 <HAL_GPIO_Init+0xfa>
 8003ec4:	4a98      	ldr	r2, [pc, #608]	@ (8004128 <HAL_GPIO_Init+0x2a0>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d875      	bhi.n	8003fb6 <HAL_GPIO_Init+0x12e>
 8003eca:	4a98      	ldr	r2, [pc, #608]	@ (800412c <HAL_GPIO_Init+0x2a4>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d058      	beq.n	8003f82 <HAL_GPIO_Init+0xfa>
 8003ed0:	4a96      	ldr	r2, [pc, #600]	@ (800412c <HAL_GPIO_Init+0x2a4>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d86f      	bhi.n	8003fb6 <HAL_GPIO_Init+0x12e>
 8003ed6:	4a96      	ldr	r2, [pc, #600]	@ (8004130 <HAL_GPIO_Init+0x2a8>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d052      	beq.n	8003f82 <HAL_GPIO_Init+0xfa>
 8003edc:	4a94      	ldr	r2, [pc, #592]	@ (8004130 <HAL_GPIO_Init+0x2a8>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d869      	bhi.n	8003fb6 <HAL_GPIO_Init+0x12e>
 8003ee2:	4a94      	ldr	r2, [pc, #592]	@ (8004134 <HAL_GPIO_Init+0x2ac>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d04c      	beq.n	8003f82 <HAL_GPIO_Init+0xfa>
 8003ee8:	4a92      	ldr	r2, [pc, #584]	@ (8004134 <HAL_GPIO_Init+0x2ac>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d863      	bhi.n	8003fb6 <HAL_GPIO_Init+0x12e>
 8003eee:	4a92      	ldr	r2, [pc, #584]	@ (8004138 <HAL_GPIO_Init+0x2b0>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d046      	beq.n	8003f82 <HAL_GPIO_Init+0xfa>
 8003ef4:	4a90      	ldr	r2, [pc, #576]	@ (8004138 <HAL_GPIO_Init+0x2b0>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d85d      	bhi.n	8003fb6 <HAL_GPIO_Init+0x12e>
 8003efa:	2b12      	cmp	r3, #18
 8003efc:	d82a      	bhi.n	8003f54 <HAL_GPIO_Init+0xcc>
 8003efe:	2b12      	cmp	r3, #18
 8003f00:	d859      	bhi.n	8003fb6 <HAL_GPIO_Init+0x12e>
 8003f02:	a201      	add	r2, pc, #4	@ (adr r2, 8003f08 <HAL_GPIO_Init+0x80>)
 8003f04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f08:	08003f83 	.word	0x08003f83
 8003f0c:	08003f5d 	.word	0x08003f5d
 8003f10:	08003f6f 	.word	0x08003f6f
 8003f14:	08003fb1 	.word	0x08003fb1
 8003f18:	08003fb7 	.word	0x08003fb7
 8003f1c:	08003fb7 	.word	0x08003fb7
 8003f20:	08003fb7 	.word	0x08003fb7
 8003f24:	08003fb7 	.word	0x08003fb7
 8003f28:	08003fb7 	.word	0x08003fb7
 8003f2c:	08003fb7 	.word	0x08003fb7
 8003f30:	08003fb7 	.word	0x08003fb7
 8003f34:	08003fb7 	.word	0x08003fb7
 8003f38:	08003fb7 	.word	0x08003fb7
 8003f3c:	08003fb7 	.word	0x08003fb7
 8003f40:	08003fb7 	.word	0x08003fb7
 8003f44:	08003fb7 	.word	0x08003fb7
 8003f48:	08003fb7 	.word	0x08003fb7
 8003f4c:	08003f65 	.word	0x08003f65
 8003f50:	08003f79 	.word	0x08003f79
 8003f54:	4a79      	ldr	r2, [pc, #484]	@ (800413c <HAL_GPIO_Init+0x2b4>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d013      	beq.n	8003f82 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003f5a:	e02c      	b.n	8003fb6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	68db      	ldr	r3, [r3, #12]
 8003f60:	623b      	str	r3, [r7, #32]
          break;
 8003f62:	e029      	b.n	8003fb8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	68db      	ldr	r3, [r3, #12]
 8003f68:	3304      	adds	r3, #4
 8003f6a:	623b      	str	r3, [r7, #32]
          break;
 8003f6c:	e024      	b.n	8003fb8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	68db      	ldr	r3, [r3, #12]
 8003f72:	3308      	adds	r3, #8
 8003f74:	623b      	str	r3, [r7, #32]
          break;
 8003f76:	e01f      	b.n	8003fb8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	68db      	ldr	r3, [r3, #12]
 8003f7c:	330c      	adds	r3, #12
 8003f7e:	623b      	str	r3, [r7, #32]
          break;
 8003f80:	e01a      	b.n	8003fb8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	689b      	ldr	r3, [r3, #8]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d102      	bne.n	8003f90 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003f8a:	2304      	movs	r3, #4
 8003f8c:	623b      	str	r3, [r7, #32]
          break;
 8003f8e:	e013      	b.n	8003fb8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	689b      	ldr	r3, [r3, #8]
 8003f94:	2b01      	cmp	r3, #1
 8003f96:	d105      	bne.n	8003fa4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003f98:	2308      	movs	r3, #8
 8003f9a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	69fa      	ldr	r2, [r7, #28]
 8003fa0:	611a      	str	r2, [r3, #16]
          break;
 8003fa2:	e009      	b.n	8003fb8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003fa4:	2308      	movs	r3, #8
 8003fa6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	69fa      	ldr	r2, [r7, #28]
 8003fac:	615a      	str	r2, [r3, #20]
          break;
 8003fae:	e003      	b.n	8003fb8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	623b      	str	r3, [r7, #32]
          break;
 8003fb4:	e000      	b.n	8003fb8 <HAL_GPIO_Init+0x130>
          break;
 8003fb6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003fb8:	69bb      	ldr	r3, [r7, #24]
 8003fba:	2bff      	cmp	r3, #255	@ 0xff
 8003fbc:	d801      	bhi.n	8003fc2 <HAL_GPIO_Init+0x13a>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	e001      	b.n	8003fc6 <HAL_GPIO_Init+0x13e>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	3304      	adds	r3, #4
 8003fc6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003fc8:	69bb      	ldr	r3, [r7, #24]
 8003fca:	2bff      	cmp	r3, #255	@ 0xff
 8003fcc:	d802      	bhi.n	8003fd4 <HAL_GPIO_Init+0x14c>
 8003fce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fd0:	009b      	lsls	r3, r3, #2
 8003fd2:	e002      	b.n	8003fda <HAL_GPIO_Init+0x152>
 8003fd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fd6:	3b08      	subs	r3, #8
 8003fd8:	009b      	lsls	r3, r3, #2
 8003fda:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003fdc:	697b      	ldr	r3, [r7, #20]
 8003fde:	681a      	ldr	r2, [r3, #0]
 8003fe0:	210f      	movs	r1, #15
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	fa01 f303 	lsl.w	r3, r1, r3
 8003fe8:	43db      	mvns	r3, r3
 8003fea:	401a      	ands	r2, r3
 8003fec:	6a39      	ldr	r1, [r7, #32]
 8003fee:	693b      	ldr	r3, [r7, #16]
 8003ff0:	fa01 f303 	lsl.w	r3, r1, r3
 8003ff4:	431a      	orrs	r2, r3
 8003ff6:	697b      	ldr	r3, [r7, #20]
 8003ff8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004002:	2b00      	cmp	r3, #0
 8004004:	f000 80b1 	beq.w	800416a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004008:	4b4d      	ldr	r3, [pc, #308]	@ (8004140 <HAL_GPIO_Init+0x2b8>)
 800400a:	699b      	ldr	r3, [r3, #24]
 800400c:	4a4c      	ldr	r2, [pc, #304]	@ (8004140 <HAL_GPIO_Init+0x2b8>)
 800400e:	f043 0301 	orr.w	r3, r3, #1
 8004012:	6193      	str	r3, [r2, #24]
 8004014:	4b4a      	ldr	r3, [pc, #296]	@ (8004140 <HAL_GPIO_Init+0x2b8>)
 8004016:	699b      	ldr	r3, [r3, #24]
 8004018:	f003 0301 	and.w	r3, r3, #1
 800401c:	60bb      	str	r3, [r7, #8]
 800401e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004020:	4a48      	ldr	r2, [pc, #288]	@ (8004144 <HAL_GPIO_Init+0x2bc>)
 8004022:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004024:	089b      	lsrs	r3, r3, #2
 8004026:	3302      	adds	r3, #2
 8004028:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800402c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800402e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004030:	f003 0303 	and.w	r3, r3, #3
 8004034:	009b      	lsls	r3, r3, #2
 8004036:	220f      	movs	r2, #15
 8004038:	fa02 f303 	lsl.w	r3, r2, r3
 800403c:	43db      	mvns	r3, r3
 800403e:	68fa      	ldr	r2, [r7, #12]
 8004040:	4013      	ands	r3, r2
 8004042:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	4a40      	ldr	r2, [pc, #256]	@ (8004148 <HAL_GPIO_Init+0x2c0>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d013      	beq.n	8004074 <HAL_GPIO_Init+0x1ec>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	4a3f      	ldr	r2, [pc, #252]	@ (800414c <HAL_GPIO_Init+0x2c4>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d00d      	beq.n	8004070 <HAL_GPIO_Init+0x1e8>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	4a3e      	ldr	r2, [pc, #248]	@ (8004150 <HAL_GPIO_Init+0x2c8>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d007      	beq.n	800406c <HAL_GPIO_Init+0x1e4>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	4a3d      	ldr	r2, [pc, #244]	@ (8004154 <HAL_GPIO_Init+0x2cc>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d101      	bne.n	8004068 <HAL_GPIO_Init+0x1e0>
 8004064:	2303      	movs	r3, #3
 8004066:	e006      	b.n	8004076 <HAL_GPIO_Init+0x1ee>
 8004068:	2304      	movs	r3, #4
 800406a:	e004      	b.n	8004076 <HAL_GPIO_Init+0x1ee>
 800406c:	2302      	movs	r3, #2
 800406e:	e002      	b.n	8004076 <HAL_GPIO_Init+0x1ee>
 8004070:	2301      	movs	r3, #1
 8004072:	e000      	b.n	8004076 <HAL_GPIO_Init+0x1ee>
 8004074:	2300      	movs	r3, #0
 8004076:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004078:	f002 0203 	and.w	r2, r2, #3
 800407c:	0092      	lsls	r2, r2, #2
 800407e:	4093      	lsls	r3, r2
 8004080:	68fa      	ldr	r2, [r7, #12]
 8004082:	4313      	orrs	r3, r2
 8004084:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004086:	492f      	ldr	r1, [pc, #188]	@ (8004144 <HAL_GPIO_Init+0x2bc>)
 8004088:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800408a:	089b      	lsrs	r3, r3, #2
 800408c:	3302      	adds	r3, #2
 800408e:	68fa      	ldr	r2, [r7, #12]
 8004090:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800409c:	2b00      	cmp	r3, #0
 800409e:	d006      	beq.n	80040ae <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80040a0:	4b2d      	ldr	r3, [pc, #180]	@ (8004158 <HAL_GPIO_Init+0x2d0>)
 80040a2:	689a      	ldr	r2, [r3, #8]
 80040a4:	492c      	ldr	r1, [pc, #176]	@ (8004158 <HAL_GPIO_Init+0x2d0>)
 80040a6:	69bb      	ldr	r3, [r7, #24]
 80040a8:	4313      	orrs	r3, r2
 80040aa:	608b      	str	r3, [r1, #8]
 80040ac:	e006      	b.n	80040bc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80040ae:	4b2a      	ldr	r3, [pc, #168]	@ (8004158 <HAL_GPIO_Init+0x2d0>)
 80040b0:	689a      	ldr	r2, [r3, #8]
 80040b2:	69bb      	ldr	r3, [r7, #24]
 80040b4:	43db      	mvns	r3, r3
 80040b6:	4928      	ldr	r1, [pc, #160]	@ (8004158 <HAL_GPIO_Init+0x2d0>)
 80040b8:	4013      	ands	r3, r2
 80040ba:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d006      	beq.n	80040d6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80040c8:	4b23      	ldr	r3, [pc, #140]	@ (8004158 <HAL_GPIO_Init+0x2d0>)
 80040ca:	68da      	ldr	r2, [r3, #12]
 80040cc:	4922      	ldr	r1, [pc, #136]	@ (8004158 <HAL_GPIO_Init+0x2d0>)
 80040ce:	69bb      	ldr	r3, [r7, #24]
 80040d0:	4313      	orrs	r3, r2
 80040d2:	60cb      	str	r3, [r1, #12]
 80040d4:	e006      	b.n	80040e4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80040d6:	4b20      	ldr	r3, [pc, #128]	@ (8004158 <HAL_GPIO_Init+0x2d0>)
 80040d8:	68da      	ldr	r2, [r3, #12]
 80040da:	69bb      	ldr	r3, [r7, #24]
 80040dc:	43db      	mvns	r3, r3
 80040de:	491e      	ldr	r1, [pc, #120]	@ (8004158 <HAL_GPIO_Init+0x2d0>)
 80040e0:	4013      	ands	r3, r2
 80040e2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d006      	beq.n	80040fe <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80040f0:	4b19      	ldr	r3, [pc, #100]	@ (8004158 <HAL_GPIO_Init+0x2d0>)
 80040f2:	685a      	ldr	r2, [r3, #4]
 80040f4:	4918      	ldr	r1, [pc, #96]	@ (8004158 <HAL_GPIO_Init+0x2d0>)
 80040f6:	69bb      	ldr	r3, [r7, #24]
 80040f8:	4313      	orrs	r3, r2
 80040fa:	604b      	str	r3, [r1, #4]
 80040fc:	e006      	b.n	800410c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80040fe:	4b16      	ldr	r3, [pc, #88]	@ (8004158 <HAL_GPIO_Init+0x2d0>)
 8004100:	685a      	ldr	r2, [r3, #4]
 8004102:	69bb      	ldr	r3, [r7, #24]
 8004104:	43db      	mvns	r3, r3
 8004106:	4914      	ldr	r1, [pc, #80]	@ (8004158 <HAL_GPIO_Init+0x2d0>)
 8004108:	4013      	ands	r3, r2
 800410a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004114:	2b00      	cmp	r3, #0
 8004116:	d021      	beq.n	800415c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004118:	4b0f      	ldr	r3, [pc, #60]	@ (8004158 <HAL_GPIO_Init+0x2d0>)
 800411a:	681a      	ldr	r2, [r3, #0]
 800411c:	490e      	ldr	r1, [pc, #56]	@ (8004158 <HAL_GPIO_Init+0x2d0>)
 800411e:	69bb      	ldr	r3, [r7, #24]
 8004120:	4313      	orrs	r3, r2
 8004122:	600b      	str	r3, [r1, #0]
 8004124:	e021      	b.n	800416a <HAL_GPIO_Init+0x2e2>
 8004126:	bf00      	nop
 8004128:	10320000 	.word	0x10320000
 800412c:	10310000 	.word	0x10310000
 8004130:	10220000 	.word	0x10220000
 8004134:	10210000 	.word	0x10210000
 8004138:	10120000 	.word	0x10120000
 800413c:	10110000 	.word	0x10110000
 8004140:	40021000 	.word	0x40021000
 8004144:	40010000 	.word	0x40010000
 8004148:	40010800 	.word	0x40010800
 800414c:	40010c00 	.word	0x40010c00
 8004150:	40011000 	.word	0x40011000
 8004154:	40011400 	.word	0x40011400
 8004158:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800415c:	4b0b      	ldr	r3, [pc, #44]	@ (800418c <HAL_GPIO_Init+0x304>)
 800415e:	681a      	ldr	r2, [r3, #0]
 8004160:	69bb      	ldr	r3, [r7, #24]
 8004162:	43db      	mvns	r3, r3
 8004164:	4909      	ldr	r1, [pc, #36]	@ (800418c <HAL_GPIO_Init+0x304>)
 8004166:	4013      	ands	r3, r2
 8004168:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800416a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800416c:	3301      	adds	r3, #1
 800416e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	681a      	ldr	r2, [r3, #0]
 8004174:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004176:	fa22 f303 	lsr.w	r3, r2, r3
 800417a:	2b00      	cmp	r3, #0
 800417c:	f47f ae8e 	bne.w	8003e9c <HAL_GPIO_Init+0x14>
  }
}
 8004180:	bf00      	nop
 8004182:	bf00      	nop
 8004184:	372c      	adds	r7, #44	@ 0x2c
 8004186:	46bd      	mov	sp, r7
 8004188:	bc80      	pop	{r7}
 800418a:	4770      	bx	lr
 800418c:	40010400 	.word	0x40010400

08004190 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004190:	b480      	push	{r7}
 8004192:	b083      	sub	sp, #12
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
 8004198:	460b      	mov	r3, r1
 800419a:	807b      	strh	r3, [r7, #2]
 800419c:	4613      	mov	r3, r2
 800419e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80041a0:	787b      	ldrb	r3, [r7, #1]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d003      	beq.n	80041ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80041a6:	887a      	ldrh	r2, [r7, #2]
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80041ac:	e003      	b.n	80041b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80041ae:	887b      	ldrh	r3, [r7, #2]
 80041b0:	041a      	lsls	r2, r3, #16
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	611a      	str	r2, [r3, #16]
}
 80041b6:	bf00      	nop
 80041b8:	370c      	adds	r7, #12
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bc80      	pop	{r7}
 80041be:	4770      	bx	lr

080041c0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b085      	sub	sp, #20
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
 80041c8:	460b      	mov	r3, r1
 80041ca:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	68db      	ldr	r3, [r3, #12]
 80041d0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80041d2:	887a      	ldrh	r2, [r7, #2]
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	4013      	ands	r3, r2
 80041d8:	041a      	lsls	r2, r3, #16
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	43d9      	mvns	r1, r3
 80041de:	887b      	ldrh	r3, [r7, #2]
 80041e0:	400b      	ands	r3, r1
 80041e2:	431a      	orrs	r2, r3
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	611a      	str	r2, [r3, #16]
}
 80041e8:	bf00      	nop
 80041ea:	3714      	adds	r7, #20
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bc80      	pop	{r7}
 80041f0:	4770      	bx	lr
	...

080041f4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b082      	sub	sp, #8
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	4603      	mov	r3, r0
 80041fc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80041fe:	4b08      	ldr	r3, [pc, #32]	@ (8004220 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004200:	695a      	ldr	r2, [r3, #20]
 8004202:	88fb      	ldrh	r3, [r7, #6]
 8004204:	4013      	ands	r3, r2
 8004206:	2b00      	cmp	r3, #0
 8004208:	d006      	beq.n	8004218 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800420a:	4a05      	ldr	r2, [pc, #20]	@ (8004220 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800420c:	88fb      	ldrh	r3, [r7, #6]
 800420e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004210:	88fb      	ldrh	r3, [r7, #6]
 8004212:	4618      	mov	r0, r3
 8004214:	f7fd fbbe 	bl	8001994 <HAL_GPIO_EXTI_Callback>
  }
}
 8004218:	bf00      	nop
 800421a:	3708      	adds	r7, #8
 800421c:	46bd      	mov	sp, r7
 800421e:	bd80      	pop	{r7, pc}
 8004220:	40010400 	.word	0x40010400

08004224 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b084      	sub	sp, #16
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d101      	bne.n	8004236 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004232:	2301      	movs	r3, #1
 8004234:	e12b      	b.n	800448e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800423c:	b2db      	uxtb	r3, r3
 800423e:	2b00      	cmp	r3, #0
 8004240:	d106      	bne.n	8004250 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2200      	movs	r2, #0
 8004246:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800424a:	6878      	ldr	r0, [r7, #4]
 800424c:	f7fd f95e 	bl	800150c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2224      	movs	r2, #36	@ 0x24
 8004254:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	681a      	ldr	r2, [r3, #0]
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f022 0201 	bic.w	r2, r2, #1
 8004266:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	681a      	ldr	r2, [r3, #0]
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004276:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	681a      	ldr	r2, [r3, #0]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004286:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004288:	f003 f948 	bl	800751c <HAL_RCC_GetPCLK1Freq>
 800428c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	4a81      	ldr	r2, [pc, #516]	@ (8004498 <HAL_I2C_Init+0x274>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d807      	bhi.n	80042a8 <HAL_I2C_Init+0x84>
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	4a80      	ldr	r2, [pc, #512]	@ (800449c <HAL_I2C_Init+0x278>)
 800429c:	4293      	cmp	r3, r2
 800429e:	bf94      	ite	ls
 80042a0:	2301      	movls	r3, #1
 80042a2:	2300      	movhi	r3, #0
 80042a4:	b2db      	uxtb	r3, r3
 80042a6:	e006      	b.n	80042b6 <HAL_I2C_Init+0x92>
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	4a7d      	ldr	r2, [pc, #500]	@ (80044a0 <HAL_I2C_Init+0x27c>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	bf94      	ite	ls
 80042b0:	2301      	movls	r3, #1
 80042b2:	2300      	movhi	r3, #0
 80042b4:	b2db      	uxtb	r3, r3
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d001      	beq.n	80042be <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80042ba:	2301      	movs	r3, #1
 80042bc:	e0e7      	b.n	800448e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	4a78      	ldr	r2, [pc, #480]	@ (80044a4 <HAL_I2C_Init+0x280>)
 80042c2:	fba2 2303 	umull	r2, r3, r2, r3
 80042c6:	0c9b      	lsrs	r3, r3, #18
 80042c8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	68ba      	ldr	r2, [r7, #8]
 80042da:	430a      	orrs	r2, r1
 80042dc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	6a1b      	ldr	r3, [r3, #32]
 80042e4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	4a6a      	ldr	r2, [pc, #424]	@ (8004498 <HAL_I2C_Init+0x274>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d802      	bhi.n	80042f8 <HAL_I2C_Init+0xd4>
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	3301      	adds	r3, #1
 80042f6:	e009      	b.n	800430c <HAL_I2C_Init+0xe8>
 80042f8:	68bb      	ldr	r3, [r7, #8]
 80042fa:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80042fe:	fb02 f303 	mul.w	r3, r2, r3
 8004302:	4a69      	ldr	r2, [pc, #420]	@ (80044a8 <HAL_I2C_Init+0x284>)
 8004304:	fba2 2303 	umull	r2, r3, r2, r3
 8004308:	099b      	lsrs	r3, r3, #6
 800430a:	3301      	adds	r3, #1
 800430c:	687a      	ldr	r2, [r7, #4]
 800430e:	6812      	ldr	r2, [r2, #0]
 8004310:	430b      	orrs	r3, r1
 8004312:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	69db      	ldr	r3, [r3, #28]
 800431a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800431e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	495c      	ldr	r1, [pc, #368]	@ (8004498 <HAL_I2C_Init+0x274>)
 8004328:	428b      	cmp	r3, r1
 800432a:	d819      	bhi.n	8004360 <HAL_I2C_Init+0x13c>
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	1e59      	subs	r1, r3, #1
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	005b      	lsls	r3, r3, #1
 8004336:	fbb1 f3f3 	udiv	r3, r1, r3
 800433a:	1c59      	adds	r1, r3, #1
 800433c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004340:	400b      	ands	r3, r1
 8004342:	2b00      	cmp	r3, #0
 8004344:	d00a      	beq.n	800435c <HAL_I2C_Init+0x138>
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	1e59      	subs	r1, r3, #1
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	685b      	ldr	r3, [r3, #4]
 800434e:	005b      	lsls	r3, r3, #1
 8004350:	fbb1 f3f3 	udiv	r3, r1, r3
 8004354:	3301      	adds	r3, #1
 8004356:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800435a:	e051      	b.n	8004400 <HAL_I2C_Init+0x1dc>
 800435c:	2304      	movs	r3, #4
 800435e:	e04f      	b.n	8004400 <HAL_I2C_Init+0x1dc>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	689b      	ldr	r3, [r3, #8]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d111      	bne.n	800438c <HAL_I2C_Init+0x168>
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	1e58      	subs	r0, r3, #1
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6859      	ldr	r1, [r3, #4]
 8004370:	460b      	mov	r3, r1
 8004372:	005b      	lsls	r3, r3, #1
 8004374:	440b      	add	r3, r1
 8004376:	fbb0 f3f3 	udiv	r3, r0, r3
 800437a:	3301      	adds	r3, #1
 800437c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004380:	2b00      	cmp	r3, #0
 8004382:	bf0c      	ite	eq
 8004384:	2301      	moveq	r3, #1
 8004386:	2300      	movne	r3, #0
 8004388:	b2db      	uxtb	r3, r3
 800438a:	e012      	b.n	80043b2 <HAL_I2C_Init+0x18e>
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	1e58      	subs	r0, r3, #1
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6859      	ldr	r1, [r3, #4]
 8004394:	460b      	mov	r3, r1
 8004396:	009b      	lsls	r3, r3, #2
 8004398:	440b      	add	r3, r1
 800439a:	0099      	lsls	r1, r3, #2
 800439c:	440b      	add	r3, r1
 800439e:	fbb0 f3f3 	udiv	r3, r0, r3
 80043a2:	3301      	adds	r3, #1
 80043a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	bf0c      	ite	eq
 80043ac:	2301      	moveq	r3, #1
 80043ae:	2300      	movne	r3, #0
 80043b0:	b2db      	uxtb	r3, r3
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d001      	beq.n	80043ba <HAL_I2C_Init+0x196>
 80043b6:	2301      	movs	r3, #1
 80043b8:	e022      	b.n	8004400 <HAL_I2C_Init+0x1dc>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	689b      	ldr	r3, [r3, #8]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d10e      	bne.n	80043e0 <HAL_I2C_Init+0x1bc>
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	1e58      	subs	r0, r3, #1
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6859      	ldr	r1, [r3, #4]
 80043ca:	460b      	mov	r3, r1
 80043cc:	005b      	lsls	r3, r3, #1
 80043ce:	440b      	add	r3, r1
 80043d0:	fbb0 f3f3 	udiv	r3, r0, r3
 80043d4:	3301      	adds	r3, #1
 80043d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043da:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80043de:	e00f      	b.n	8004400 <HAL_I2C_Init+0x1dc>
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	1e58      	subs	r0, r3, #1
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6859      	ldr	r1, [r3, #4]
 80043e8:	460b      	mov	r3, r1
 80043ea:	009b      	lsls	r3, r3, #2
 80043ec:	440b      	add	r3, r1
 80043ee:	0099      	lsls	r1, r3, #2
 80043f0:	440b      	add	r3, r1
 80043f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80043f6:	3301      	adds	r3, #1
 80043f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043fc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004400:	6879      	ldr	r1, [r7, #4]
 8004402:	6809      	ldr	r1, [r1, #0]
 8004404:	4313      	orrs	r3, r2
 8004406:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	69da      	ldr	r2, [r3, #28]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6a1b      	ldr	r3, [r3, #32]
 800441a:	431a      	orrs	r2, r3
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	430a      	orrs	r2, r1
 8004422:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	689b      	ldr	r3, [r3, #8]
 800442a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800442e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004432:	687a      	ldr	r2, [r7, #4]
 8004434:	6911      	ldr	r1, [r2, #16]
 8004436:	687a      	ldr	r2, [r7, #4]
 8004438:	68d2      	ldr	r2, [r2, #12]
 800443a:	4311      	orrs	r1, r2
 800443c:	687a      	ldr	r2, [r7, #4]
 800443e:	6812      	ldr	r2, [r2, #0]
 8004440:	430b      	orrs	r3, r1
 8004442:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	68db      	ldr	r3, [r3, #12]
 800444a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	695a      	ldr	r2, [r3, #20]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	699b      	ldr	r3, [r3, #24]
 8004456:	431a      	orrs	r2, r3
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	430a      	orrs	r2, r1
 800445e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	681a      	ldr	r2, [r3, #0]
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f042 0201 	orr.w	r2, r2, #1
 800446e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2200      	movs	r2, #0
 8004474:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2220      	movs	r2, #32
 800447a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2200      	movs	r2, #0
 8004482:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2200      	movs	r2, #0
 8004488:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800448c:	2300      	movs	r3, #0
}
 800448e:	4618      	mov	r0, r3
 8004490:	3710      	adds	r7, #16
 8004492:	46bd      	mov	sp, r7
 8004494:	bd80      	pop	{r7, pc}
 8004496:	bf00      	nop
 8004498:	000186a0 	.word	0x000186a0
 800449c:	001e847f 	.word	0x001e847f
 80044a0:	003d08ff 	.word	0x003d08ff
 80044a4:	431bde83 	.word	0x431bde83
 80044a8:	10624dd3 	.word	0x10624dd3

080044ac <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 80044ac:	b480      	push	{r7}
 80044ae:	b083      	sub	sp, #12
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	695b      	ldr	r3, [r3, #20]
 80044ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044be:	2b80      	cmp	r3, #128	@ 0x80
 80044c0:	d103      	bne.n	80044ca <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	2200      	movs	r2, #0
 80044c8:	611a      	str	r2, [r3, #16]
  }
}
 80044ca:	bf00      	nop
 80044cc:	370c      	adds	r7, #12
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bc80      	pop	{r7}
 80044d2:	4770      	bx	lr

080044d4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b088      	sub	sp, #32
 80044d8:	af02      	add	r7, sp, #8
 80044da:	60f8      	str	r0, [r7, #12]
 80044dc:	607a      	str	r2, [r7, #4]
 80044de:	461a      	mov	r2, r3
 80044e0:	460b      	mov	r3, r1
 80044e2:	817b      	strh	r3, [r7, #10]
 80044e4:	4613      	mov	r3, r2
 80044e6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80044e8:	f7fe fcd2 	bl	8002e90 <HAL_GetTick>
 80044ec:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80044f4:	b2db      	uxtb	r3, r3
 80044f6:	2b20      	cmp	r3, #32
 80044f8:	f040 80e0 	bne.w	80046bc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80044fc:	697b      	ldr	r3, [r7, #20]
 80044fe:	9300      	str	r3, [sp, #0]
 8004500:	2319      	movs	r3, #25
 8004502:	2201      	movs	r2, #1
 8004504:	4970      	ldr	r1, [pc, #448]	@ (80046c8 <HAL_I2C_Master_Transmit+0x1f4>)
 8004506:	68f8      	ldr	r0, [r7, #12]
 8004508:	f002 f9bc 	bl	8006884 <I2C_WaitOnFlagUntilTimeout>
 800450c:	4603      	mov	r3, r0
 800450e:	2b00      	cmp	r3, #0
 8004510:	d001      	beq.n	8004516 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004512:	2302      	movs	r3, #2
 8004514:	e0d3      	b.n	80046be <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800451c:	2b01      	cmp	r3, #1
 800451e:	d101      	bne.n	8004524 <HAL_I2C_Master_Transmit+0x50>
 8004520:	2302      	movs	r3, #2
 8004522:	e0cc      	b.n	80046be <HAL_I2C_Master_Transmit+0x1ea>
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	2201      	movs	r2, #1
 8004528:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f003 0301 	and.w	r3, r3, #1
 8004536:	2b01      	cmp	r3, #1
 8004538:	d007      	beq.n	800454a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	681a      	ldr	r2, [r3, #0]
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f042 0201 	orr.w	r2, r2, #1
 8004548:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	681a      	ldr	r2, [r3, #0]
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004558:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	2221      	movs	r2, #33	@ 0x21
 800455e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	2210      	movs	r2, #16
 8004566:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	2200      	movs	r2, #0
 800456e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	687a      	ldr	r2, [r7, #4]
 8004574:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	893a      	ldrh	r2, [r7, #8]
 800457a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004580:	b29a      	uxth	r2, r3
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	4a50      	ldr	r2, [pc, #320]	@ (80046cc <HAL_I2C_Master_Transmit+0x1f8>)
 800458a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800458c:	8979      	ldrh	r1, [r7, #10]
 800458e:	697b      	ldr	r3, [r7, #20]
 8004590:	6a3a      	ldr	r2, [r7, #32]
 8004592:	68f8      	ldr	r0, [r7, #12]
 8004594:	f001 fece 	bl	8006334 <I2C_MasterRequestWrite>
 8004598:	4603      	mov	r3, r0
 800459a:	2b00      	cmp	r3, #0
 800459c:	d001      	beq.n	80045a2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800459e:	2301      	movs	r3, #1
 80045a0:	e08d      	b.n	80046be <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045a2:	2300      	movs	r3, #0
 80045a4:	613b      	str	r3, [r7, #16]
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	695b      	ldr	r3, [r3, #20]
 80045ac:	613b      	str	r3, [r7, #16]
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	699b      	ldr	r3, [r3, #24]
 80045b4:	613b      	str	r3, [r7, #16]
 80045b6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80045b8:	e066      	b.n	8004688 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80045ba:	697a      	ldr	r2, [r7, #20]
 80045bc:	6a39      	ldr	r1, [r7, #32]
 80045be:	68f8      	ldr	r0, [r7, #12]
 80045c0:	f002 fa7a 	bl	8006ab8 <I2C_WaitOnTXEFlagUntilTimeout>
 80045c4:	4603      	mov	r3, r0
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d00d      	beq.n	80045e6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045ce:	2b04      	cmp	r3, #4
 80045d0:	d107      	bne.n	80045e2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	681a      	ldr	r2, [r3, #0]
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80045e0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80045e2:	2301      	movs	r3, #1
 80045e4:	e06b      	b.n	80046be <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045ea:	781a      	ldrb	r2, [r3, #0]
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045f6:	1c5a      	adds	r2, r3, #1
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004600:	b29b      	uxth	r3, r3
 8004602:	3b01      	subs	r3, #1
 8004604:	b29a      	uxth	r2, r3
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800460e:	3b01      	subs	r3, #1
 8004610:	b29a      	uxth	r2, r3
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	695b      	ldr	r3, [r3, #20]
 800461c:	f003 0304 	and.w	r3, r3, #4
 8004620:	2b04      	cmp	r3, #4
 8004622:	d11b      	bne.n	800465c <HAL_I2C_Master_Transmit+0x188>
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004628:	2b00      	cmp	r3, #0
 800462a:	d017      	beq.n	800465c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004630:	781a      	ldrb	r2, [r3, #0]
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800463c:	1c5a      	adds	r2, r3, #1
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004646:	b29b      	uxth	r3, r3
 8004648:	3b01      	subs	r3, #1
 800464a:	b29a      	uxth	r2, r3
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004654:	3b01      	subs	r3, #1
 8004656:	b29a      	uxth	r2, r3
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800465c:	697a      	ldr	r2, [r7, #20]
 800465e:	6a39      	ldr	r1, [r7, #32]
 8004660:	68f8      	ldr	r0, [r7, #12]
 8004662:	f002 fa71 	bl	8006b48 <I2C_WaitOnBTFFlagUntilTimeout>
 8004666:	4603      	mov	r3, r0
 8004668:	2b00      	cmp	r3, #0
 800466a:	d00d      	beq.n	8004688 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004670:	2b04      	cmp	r3, #4
 8004672:	d107      	bne.n	8004684 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	681a      	ldr	r2, [r3, #0]
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004682:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004684:	2301      	movs	r3, #1
 8004686:	e01a      	b.n	80046be <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800468c:	2b00      	cmp	r3, #0
 800468e:	d194      	bne.n	80045ba <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	681a      	ldr	r2, [r3, #0]
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800469e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	2220      	movs	r2, #32
 80046a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	2200      	movs	r2, #0
 80046ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	2200      	movs	r2, #0
 80046b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80046b8:	2300      	movs	r3, #0
 80046ba:	e000      	b.n	80046be <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80046bc:	2302      	movs	r3, #2
  }
}
 80046be:	4618      	mov	r0, r3
 80046c0:	3718      	adds	r7, #24
 80046c2:	46bd      	mov	sp, r7
 80046c4:	bd80      	pop	{r7, pc}
 80046c6:	bf00      	nop
 80046c8:	00100002 	.word	0x00100002
 80046cc:	ffff0000 	.word	0xffff0000

080046d0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b088      	sub	sp, #32
 80046d4:	af02      	add	r7, sp, #8
 80046d6:	60f8      	str	r0, [r7, #12]
 80046d8:	4608      	mov	r0, r1
 80046da:	4611      	mov	r1, r2
 80046dc:	461a      	mov	r2, r3
 80046de:	4603      	mov	r3, r0
 80046e0:	817b      	strh	r3, [r7, #10]
 80046e2:	460b      	mov	r3, r1
 80046e4:	813b      	strh	r3, [r7, #8]
 80046e6:	4613      	mov	r3, r2
 80046e8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80046ea:	f7fe fbd1 	bl	8002e90 <HAL_GetTick>
 80046ee:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80046f6:	b2db      	uxtb	r3, r3
 80046f8:	2b20      	cmp	r3, #32
 80046fa:	f040 80d9 	bne.w	80048b0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80046fe:	697b      	ldr	r3, [r7, #20]
 8004700:	9300      	str	r3, [sp, #0]
 8004702:	2319      	movs	r3, #25
 8004704:	2201      	movs	r2, #1
 8004706:	496d      	ldr	r1, [pc, #436]	@ (80048bc <HAL_I2C_Mem_Write+0x1ec>)
 8004708:	68f8      	ldr	r0, [r7, #12]
 800470a:	f002 f8bb 	bl	8006884 <I2C_WaitOnFlagUntilTimeout>
 800470e:	4603      	mov	r3, r0
 8004710:	2b00      	cmp	r3, #0
 8004712:	d001      	beq.n	8004718 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004714:	2302      	movs	r3, #2
 8004716:	e0cc      	b.n	80048b2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800471e:	2b01      	cmp	r3, #1
 8004720:	d101      	bne.n	8004726 <HAL_I2C_Mem_Write+0x56>
 8004722:	2302      	movs	r3, #2
 8004724:	e0c5      	b.n	80048b2 <HAL_I2C_Mem_Write+0x1e2>
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	2201      	movs	r2, #1
 800472a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f003 0301 	and.w	r3, r3, #1
 8004738:	2b01      	cmp	r3, #1
 800473a:	d007      	beq.n	800474c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	681a      	ldr	r2, [r3, #0]
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f042 0201 	orr.w	r2, r2, #1
 800474a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	681a      	ldr	r2, [r3, #0]
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800475a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	2221      	movs	r2, #33	@ 0x21
 8004760:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	2240      	movs	r2, #64	@ 0x40
 8004768:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	2200      	movs	r2, #0
 8004770:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	6a3a      	ldr	r2, [r7, #32]
 8004776:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800477c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004782:	b29a      	uxth	r2, r3
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	4a4d      	ldr	r2, [pc, #308]	@ (80048c0 <HAL_I2C_Mem_Write+0x1f0>)
 800478c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800478e:	88f8      	ldrh	r0, [r7, #6]
 8004790:	893a      	ldrh	r2, [r7, #8]
 8004792:	8979      	ldrh	r1, [r7, #10]
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	9301      	str	r3, [sp, #4]
 8004798:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800479a:	9300      	str	r3, [sp, #0]
 800479c:	4603      	mov	r3, r0
 800479e:	68f8      	ldr	r0, [r7, #12]
 80047a0:	f001 fe4a 	bl	8006438 <I2C_RequestMemoryWrite>
 80047a4:	4603      	mov	r3, r0
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d052      	beq.n	8004850 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80047aa:	2301      	movs	r3, #1
 80047ac:	e081      	b.n	80048b2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80047ae:	697a      	ldr	r2, [r7, #20]
 80047b0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80047b2:	68f8      	ldr	r0, [r7, #12]
 80047b4:	f002 f980 	bl	8006ab8 <I2C_WaitOnTXEFlagUntilTimeout>
 80047b8:	4603      	mov	r3, r0
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d00d      	beq.n	80047da <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047c2:	2b04      	cmp	r3, #4
 80047c4:	d107      	bne.n	80047d6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	681a      	ldr	r2, [r3, #0]
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80047d4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80047d6:	2301      	movs	r3, #1
 80047d8:	e06b      	b.n	80048b2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047de:	781a      	ldrb	r2, [r3, #0]
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047ea:	1c5a      	adds	r2, r3, #1
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047f4:	3b01      	subs	r3, #1
 80047f6:	b29a      	uxth	r2, r3
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004800:	b29b      	uxth	r3, r3
 8004802:	3b01      	subs	r3, #1
 8004804:	b29a      	uxth	r2, r3
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	695b      	ldr	r3, [r3, #20]
 8004810:	f003 0304 	and.w	r3, r3, #4
 8004814:	2b04      	cmp	r3, #4
 8004816:	d11b      	bne.n	8004850 <HAL_I2C_Mem_Write+0x180>
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800481c:	2b00      	cmp	r3, #0
 800481e:	d017      	beq.n	8004850 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004824:	781a      	ldrb	r2, [r3, #0]
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004830:	1c5a      	adds	r2, r3, #1
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800483a:	3b01      	subs	r3, #1
 800483c:	b29a      	uxth	r2, r3
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004846:	b29b      	uxth	r3, r3
 8004848:	3b01      	subs	r3, #1
 800484a:	b29a      	uxth	r2, r3
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004854:	2b00      	cmp	r3, #0
 8004856:	d1aa      	bne.n	80047ae <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004858:	697a      	ldr	r2, [r7, #20]
 800485a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800485c:	68f8      	ldr	r0, [r7, #12]
 800485e:	f002 f973 	bl	8006b48 <I2C_WaitOnBTFFlagUntilTimeout>
 8004862:	4603      	mov	r3, r0
 8004864:	2b00      	cmp	r3, #0
 8004866:	d00d      	beq.n	8004884 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800486c:	2b04      	cmp	r3, #4
 800486e:	d107      	bne.n	8004880 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	681a      	ldr	r2, [r3, #0]
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800487e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004880:	2301      	movs	r3, #1
 8004882:	e016      	b.n	80048b2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	681a      	ldr	r2, [r3, #0]
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004892:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	2220      	movs	r2, #32
 8004898:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	2200      	movs	r2, #0
 80048a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	2200      	movs	r2, #0
 80048a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80048ac:	2300      	movs	r3, #0
 80048ae:	e000      	b.n	80048b2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80048b0:	2302      	movs	r3, #2
  }
}
 80048b2:	4618      	mov	r0, r3
 80048b4:	3718      	adds	r7, #24
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bd80      	pop	{r7, pc}
 80048ba:	bf00      	nop
 80048bc:	00100002 	.word	0x00100002
 80048c0:	ffff0000 	.word	0xffff0000

080048c4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b08c      	sub	sp, #48	@ 0x30
 80048c8:	af02      	add	r7, sp, #8
 80048ca:	60f8      	str	r0, [r7, #12]
 80048cc:	4608      	mov	r0, r1
 80048ce:	4611      	mov	r1, r2
 80048d0:	461a      	mov	r2, r3
 80048d2:	4603      	mov	r3, r0
 80048d4:	817b      	strh	r3, [r7, #10]
 80048d6:	460b      	mov	r3, r1
 80048d8:	813b      	strh	r3, [r7, #8]
 80048da:	4613      	mov	r3, r2
 80048dc:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80048de:	2300      	movs	r3, #0
 80048e0:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80048e2:	f7fe fad5 	bl	8002e90 <HAL_GetTick>
 80048e6:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80048ee:	b2db      	uxtb	r3, r3
 80048f0:	2b20      	cmp	r3, #32
 80048f2:	f040 8250 	bne.w	8004d96 <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80048f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048f8:	9300      	str	r3, [sp, #0]
 80048fa:	2319      	movs	r3, #25
 80048fc:	2201      	movs	r2, #1
 80048fe:	4982      	ldr	r1, [pc, #520]	@ (8004b08 <HAL_I2C_Mem_Read+0x244>)
 8004900:	68f8      	ldr	r0, [r7, #12]
 8004902:	f001 ffbf 	bl	8006884 <I2C_WaitOnFlagUntilTimeout>
 8004906:	4603      	mov	r3, r0
 8004908:	2b00      	cmp	r3, #0
 800490a:	d001      	beq.n	8004910 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 800490c:	2302      	movs	r3, #2
 800490e:	e243      	b.n	8004d98 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004916:	2b01      	cmp	r3, #1
 8004918:	d101      	bne.n	800491e <HAL_I2C_Mem_Read+0x5a>
 800491a:	2302      	movs	r3, #2
 800491c:	e23c      	b.n	8004d98 <HAL_I2C_Mem_Read+0x4d4>
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	2201      	movs	r2, #1
 8004922:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f003 0301 	and.w	r3, r3, #1
 8004930:	2b01      	cmp	r3, #1
 8004932:	d007      	beq.n	8004944 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	681a      	ldr	r2, [r3, #0]
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f042 0201 	orr.w	r2, r2, #1
 8004942:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	681a      	ldr	r2, [r3, #0]
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004952:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	2222      	movs	r2, #34	@ 0x22
 8004958:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	2240      	movs	r2, #64	@ 0x40
 8004960:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	2200      	movs	r2, #0
 8004968:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800496e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8004974:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800497a:	b29a      	uxth	r2, r3
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	4a62      	ldr	r2, [pc, #392]	@ (8004b0c <HAL_I2C_Mem_Read+0x248>)
 8004984:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004986:	88f8      	ldrh	r0, [r7, #6]
 8004988:	893a      	ldrh	r2, [r7, #8]
 800498a:	8979      	ldrh	r1, [r7, #10]
 800498c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800498e:	9301      	str	r3, [sp, #4]
 8004990:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004992:	9300      	str	r3, [sp, #0]
 8004994:	4603      	mov	r3, r0
 8004996:	68f8      	ldr	r0, [r7, #12]
 8004998:	f001 fde4 	bl	8006564 <I2C_RequestMemoryRead>
 800499c:	4603      	mov	r3, r0
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d001      	beq.n	80049a6 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80049a2:	2301      	movs	r3, #1
 80049a4:	e1f8      	b.n	8004d98 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d113      	bne.n	80049d6 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049ae:	2300      	movs	r3, #0
 80049b0:	61fb      	str	r3, [r7, #28]
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	695b      	ldr	r3, [r3, #20]
 80049b8:	61fb      	str	r3, [r7, #28]
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	699b      	ldr	r3, [r3, #24]
 80049c0:	61fb      	str	r3, [r7, #28]
 80049c2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	681a      	ldr	r2, [r3, #0]
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80049d2:	601a      	str	r2, [r3, #0]
 80049d4:	e1cc      	b.n	8004d70 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049da:	2b01      	cmp	r3, #1
 80049dc:	d11e      	bne.n	8004a1c <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	681a      	ldr	r2, [r3, #0]
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80049ec:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80049ee:	b672      	cpsid	i
}
 80049f0:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049f2:	2300      	movs	r3, #0
 80049f4:	61bb      	str	r3, [r7, #24]
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	695b      	ldr	r3, [r3, #20]
 80049fc:	61bb      	str	r3, [r7, #24]
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	699b      	ldr	r3, [r3, #24]
 8004a04:	61bb      	str	r3, [r7, #24]
 8004a06:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	681a      	ldr	r2, [r3, #0]
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a16:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004a18:	b662      	cpsie	i
}
 8004a1a:	e035      	b.n	8004a88 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a20:	2b02      	cmp	r3, #2
 8004a22:	d11e      	bne.n	8004a62 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	681a      	ldr	r2, [r3, #0]
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004a32:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004a34:	b672      	cpsid	i
}
 8004a36:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a38:	2300      	movs	r3, #0
 8004a3a:	617b      	str	r3, [r7, #20]
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	695b      	ldr	r3, [r3, #20]
 8004a42:	617b      	str	r3, [r7, #20]
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	699b      	ldr	r3, [r3, #24]
 8004a4a:	617b      	str	r3, [r7, #20]
 8004a4c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	681a      	ldr	r2, [r3, #0]
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004a5c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004a5e:	b662      	cpsie	i
}
 8004a60:	e012      	b.n	8004a88 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	681a      	ldr	r2, [r3, #0]
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004a70:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a72:	2300      	movs	r3, #0
 8004a74:	613b      	str	r3, [r7, #16]
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	695b      	ldr	r3, [r3, #20]
 8004a7c:	613b      	str	r3, [r7, #16]
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	699b      	ldr	r3, [r3, #24]
 8004a84:	613b      	str	r3, [r7, #16]
 8004a86:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8004a88:	e172      	b.n	8004d70 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a8e:	2b03      	cmp	r3, #3
 8004a90:	f200 811f 	bhi.w	8004cd2 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a98:	2b01      	cmp	r3, #1
 8004a9a:	d123      	bne.n	8004ae4 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a9c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a9e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004aa0:	68f8      	ldr	r0, [r7, #12]
 8004aa2:	f002 f8cb 	bl	8006c3c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d001      	beq.n	8004ab0 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8004aac:	2301      	movs	r3, #1
 8004aae:	e173      	b.n	8004d98 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	691a      	ldr	r2, [r3, #16]
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aba:	b2d2      	uxtb	r2, r2
 8004abc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ac2:	1c5a      	adds	r2, r3, #1
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004acc:	3b01      	subs	r3, #1
 8004ace:	b29a      	uxth	r2, r3
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ad8:	b29b      	uxth	r3, r3
 8004ada:	3b01      	subs	r3, #1
 8004adc:	b29a      	uxth	r2, r3
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004ae2:	e145      	b.n	8004d70 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ae8:	2b02      	cmp	r3, #2
 8004aea:	d152      	bne.n	8004b92 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004aec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004aee:	9300      	str	r3, [sp, #0]
 8004af0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004af2:	2200      	movs	r2, #0
 8004af4:	4906      	ldr	r1, [pc, #24]	@ (8004b10 <HAL_I2C_Mem_Read+0x24c>)
 8004af6:	68f8      	ldr	r0, [r7, #12]
 8004af8:	f001 fec4 	bl	8006884 <I2C_WaitOnFlagUntilTimeout>
 8004afc:	4603      	mov	r3, r0
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d008      	beq.n	8004b14 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8004b02:	2301      	movs	r3, #1
 8004b04:	e148      	b.n	8004d98 <HAL_I2C_Mem_Read+0x4d4>
 8004b06:	bf00      	nop
 8004b08:	00100002 	.word	0x00100002
 8004b0c:	ffff0000 	.word	0xffff0000
 8004b10:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8004b14:	b672      	cpsid	i
}
 8004b16:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	681a      	ldr	r2, [r3, #0]
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b26:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	691a      	ldr	r2, [r3, #16]
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b32:	b2d2      	uxtb	r2, r2
 8004b34:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b3a:	1c5a      	adds	r2, r3, #1
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b44:	3b01      	subs	r3, #1
 8004b46:	b29a      	uxth	r2, r3
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b50:	b29b      	uxth	r3, r3
 8004b52:	3b01      	subs	r3, #1
 8004b54:	b29a      	uxth	r2, r3
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004b5a:	b662      	cpsie	i
}
 8004b5c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	691a      	ldr	r2, [r3, #16]
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b68:	b2d2      	uxtb	r2, r2
 8004b6a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b70:	1c5a      	adds	r2, r3, #1
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b7a:	3b01      	subs	r3, #1
 8004b7c:	b29a      	uxth	r2, r3
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b86:	b29b      	uxth	r3, r3
 8004b88:	3b01      	subs	r3, #1
 8004b8a:	b29a      	uxth	r2, r3
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004b90:	e0ee      	b.n	8004d70 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b94:	9300      	str	r3, [sp, #0]
 8004b96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b98:	2200      	movs	r2, #0
 8004b9a:	4981      	ldr	r1, [pc, #516]	@ (8004da0 <HAL_I2C_Mem_Read+0x4dc>)
 8004b9c:	68f8      	ldr	r0, [r7, #12]
 8004b9e:	f001 fe71 	bl	8006884 <I2C_WaitOnFlagUntilTimeout>
 8004ba2:	4603      	mov	r3, r0
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d001      	beq.n	8004bac <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8004ba8:	2301      	movs	r3, #1
 8004baa:	e0f5      	b.n	8004d98 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	681a      	ldr	r2, [r3, #0]
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004bba:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004bbc:	b672      	cpsid	i
}
 8004bbe:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	691a      	ldr	r2, [r3, #16]
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bca:	b2d2      	uxtb	r2, r2
 8004bcc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bd2:	1c5a      	adds	r2, r3, #1
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004bdc:	3b01      	subs	r3, #1
 8004bde:	b29a      	uxth	r2, r3
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004be8:	b29b      	uxth	r3, r3
 8004bea:	3b01      	subs	r3, #1
 8004bec:	b29a      	uxth	r2, r3
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004bf2:	4b6c      	ldr	r3, [pc, #432]	@ (8004da4 <HAL_I2C_Mem_Read+0x4e0>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	08db      	lsrs	r3, r3, #3
 8004bf8:	4a6b      	ldr	r2, [pc, #428]	@ (8004da8 <HAL_I2C_Mem_Read+0x4e4>)
 8004bfa:	fba2 2303 	umull	r2, r3, r2, r3
 8004bfe:	0a1a      	lsrs	r2, r3, #8
 8004c00:	4613      	mov	r3, r2
 8004c02:	009b      	lsls	r3, r3, #2
 8004c04:	4413      	add	r3, r2
 8004c06:	00da      	lsls	r2, r3, #3
 8004c08:	1ad3      	subs	r3, r2, r3
 8004c0a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8004c0c:	6a3b      	ldr	r3, [r7, #32]
 8004c0e:	3b01      	subs	r3, #1
 8004c10:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8004c12:	6a3b      	ldr	r3, [r7, #32]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d118      	bne.n	8004c4a <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	2220      	movs	r2, #32
 8004c22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c32:	f043 0220 	orr.w	r2, r3, #32
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8004c3a:	b662      	cpsie	i
}
 8004c3c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	2200      	movs	r2, #0
 8004c42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8004c46:	2301      	movs	r3, #1
 8004c48:	e0a6      	b.n	8004d98 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	695b      	ldr	r3, [r3, #20]
 8004c50:	f003 0304 	and.w	r3, r3, #4
 8004c54:	2b04      	cmp	r3, #4
 8004c56:	d1d9      	bne.n	8004c0c <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	681a      	ldr	r2, [r3, #0]
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c66:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	691a      	ldr	r2, [r3, #16]
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c72:	b2d2      	uxtb	r2, r2
 8004c74:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c7a:	1c5a      	adds	r2, r3, #1
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c84:	3b01      	subs	r3, #1
 8004c86:	b29a      	uxth	r2, r3
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c90:	b29b      	uxth	r3, r3
 8004c92:	3b01      	subs	r3, #1
 8004c94:	b29a      	uxth	r2, r3
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004c9a:	b662      	cpsie	i
}
 8004c9c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	691a      	ldr	r2, [r3, #16]
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ca8:	b2d2      	uxtb	r2, r2
 8004caa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cb0:	1c5a      	adds	r2, r3, #1
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004cba:	3b01      	subs	r3, #1
 8004cbc:	b29a      	uxth	r2, r3
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cc6:	b29b      	uxth	r3, r3
 8004cc8:	3b01      	subs	r3, #1
 8004cca:	b29a      	uxth	r2, r3
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004cd0:	e04e      	b.n	8004d70 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004cd2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004cd4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004cd6:	68f8      	ldr	r0, [r7, #12]
 8004cd8:	f001 ffb0 	bl	8006c3c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004cdc:	4603      	mov	r3, r0
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d001      	beq.n	8004ce6 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	e058      	b.n	8004d98 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	691a      	ldr	r2, [r3, #16]
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cf0:	b2d2      	uxtb	r2, r2
 8004cf2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cf8:	1c5a      	adds	r2, r3, #1
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d02:	3b01      	subs	r3, #1
 8004d04:	b29a      	uxth	r2, r3
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d0e:	b29b      	uxth	r3, r3
 8004d10:	3b01      	subs	r3, #1
 8004d12:	b29a      	uxth	r2, r3
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	695b      	ldr	r3, [r3, #20]
 8004d1e:	f003 0304 	and.w	r3, r3, #4
 8004d22:	2b04      	cmp	r3, #4
 8004d24:	d124      	bne.n	8004d70 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d2a:	2b03      	cmp	r3, #3
 8004d2c:	d107      	bne.n	8004d3e <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	681a      	ldr	r2, [r3, #0]
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004d3c:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	691a      	ldr	r2, [r3, #16]
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d48:	b2d2      	uxtb	r2, r2
 8004d4a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d50:	1c5a      	adds	r2, r3, #1
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d5a:	3b01      	subs	r3, #1
 8004d5c:	b29a      	uxth	r2, r3
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d66:	b29b      	uxth	r3, r3
 8004d68:	3b01      	subs	r3, #1
 8004d6a:	b29a      	uxth	r2, r3
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	f47f ae88 	bne.w	8004a8a <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	2220      	movs	r2, #32
 8004d7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	2200      	movs	r2, #0
 8004d86:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004d92:	2300      	movs	r3, #0
 8004d94:	e000      	b.n	8004d98 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 8004d96:	2302      	movs	r3, #2
  }
}
 8004d98:	4618      	mov	r0, r3
 8004d9a:	3728      	adds	r7, #40	@ 0x28
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	bd80      	pop	{r7, pc}
 8004da0:	00010004 	.word	0x00010004
 8004da4:	20000018 	.word	0x20000018
 8004da8:	14f8b589 	.word	0x14f8b589

08004dac <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b088      	sub	sp, #32
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8004db4:	2300      	movs	r3, #0
 8004db6:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dc4:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004dcc:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004dd4:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004dd6:	7bfb      	ldrb	r3, [r7, #15]
 8004dd8:	2b10      	cmp	r3, #16
 8004dda:	d003      	beq.n	8004de4 <HAL_I2C_EV_IRQHandler+0x38>
 8004ddc:	7bfb      	ldrb	r3, [r7, #15]
 8004dde:	2b40      	cmp	r3, #64	@ 0x40
 8004de0:	f040 80b1 	bne.w	8004f46 <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	699b      	ldr	r3, [r3, #24]
 8004dea:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	695b      	ldr	r3, [r3, #20]
 8004df2:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8004df4:	69fb      	ldr	r3, [r7, #28]
 8004df6:	f003 0301 	and.w	r3, r3, #1
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d10d      	bne.n	8004e1a <HAL_I2C_EV_IRQHandler+0x6e>
 8004dfe:	693b      	ldr	r3, [r7, #16]
 8004e00:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8004e04:	d003      	beq.n	8004e0e <HAL_I2C_EV_IRQHandler+0x62>
 8004e06:	693b      	ldr	r3, [r7, #16]
 8004e08:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8004e0c:	d101      	bne.n	8004e12 <HAL_I2C_EV_IRQHandler+0x66>
 8004e0e:	2301      	movs	r3, #1
 8004e10:	e000      	b.n	8004e14 <HAL_I2C_EV_IRQHandler+0x68>
 8004e12:	2300      	movs	r3, #0
 8004e14:	2b01      	cmp	r3, #1
 8004e16:	f000 8114 	beq.w	8005042 <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004e1a:	69fb      	ldr	r3, [r7, #28]
 8004e1c:	f003 0301 	and.w	r3, r3, #1
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d00b      	beq.n	8004e3c <HAL_I2C_EV_IRQHandler+0x90>
 8004e24:	697b      	ldr	r3, [r7, #20]
 8004e26:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d006      	beq.n	8004e3c <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8004e2e:	6878      	ldr	r0, [r7, #4]
 8004e30:	f001 ff8f 	bl	8006d52 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8004e34:	6878      	ldr	r0, [r7, #4]
 8004e36:	f000 fccd 	bl	80057d4 <I2C_Master_SB>
 8004e3a:	e083      	b.n	8004f44 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004e3c:	69fb      	ldr	r3, [r7, #28]
 8004e3e:	f003 0308 	and.w	r3, r3, #8
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d008      	beq.n	8004e58 <HAL_I2C_EV_IRQHandler+0xac>
 8004e46:	697b      	ldr	r3, [r7, #20]
 8004e48:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d003      	beq.n	8004e58 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8004e50:	6878      	ldr	r0, [r7, #4]
 8004e52:	f000 fd44 	bl	80058de <I2C_Master_ADD10>
 8004e56:	e075      	b.n	8004f44 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004e58:	69fb      	ldr	r3, [r7, #28]
 8004e5a:	f003 0302 	and.w	r3, r3, #2
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d008      	beq.n	8004e74 <HAL_I2C_EV_IRQHandler+0xc8>
 8004e62:	697b      	ldr	r3, [r7, #20]
 8004e64:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d003      	beq.n	8004e74 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 8004e6c:	6878      	ldr	r0, [r7, #4]
 8004e6e:	f000 fd5f 	bl	8005930 <I2C_Master_ADDR>
 8004e72:	e067      	b.n	8004f44 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8004e74:	69bb      	ldr	r3, [r7, #24]
 8004e76:	f003 0304 	and.w	r3, r3, #4
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d036      	beq.n	8004eec <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004e88:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004e8c:	f000 80db 	beq.w	8005046 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004e90:	69fb      	ldr	r3, [r7, #28]
 8004e92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d00d      	beq.n	8004eb6 <HAL_I2C_EV_IRQHandler+0x10a>
 8004e9a:	697b      	ldr	r3, [r7, #20]
 8004e9c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d008      	beq.n	8004eb6 <HAL_I2C_EV_IRQHandler+0x10a>
 8004ea4:	69fb      	ldr	r3, [r7, #28]
 8004ea6:	f003 0304 	and.w	r3, r3, #4
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d103      	bne.n	8004eb6 <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8004eae:	6878      	ldr	r0, [r7, #4]
 8004eb0:	f000 f92d 	bl	800510e <I2C_MasterTransmit_TXE>
 8004eb4:	e046      	b.n	8004f44 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004eb6:	69fb      	ldr	r3, [r7, #28]
 8004eb8:	f003 0304 	and.w	r3, r3, #4
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	f000 80c2 	beq.w	8005046 <HAL_I2C_EV_IRQHandler+0x29a>
 8004ec2:	697b      	ldr	r3, [r7, #20]
 8004ec4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	f000 80bc 	beq.w	8005046 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004ece:	7bbb      	ldrb	r3, [r7, #14]
 8004ed0:	2b21      	cmp	r3, #33	@ 0x21
 8004ed2:	d103      	bne.n	8004edc <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8004ed4:	6878      	ldr	r0, [r7, #4]
 8004ed6:	f000 f9b6 	bl	8005246 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004eda:	e0b4      	b.n	8005046 <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8004edc:	7bfb      	ldrb	r3, [r7, #15]
 8004ede:	2b40      	cmp	r3, #64	@ 0x40
 8004ee0:	f040 80b1 	bne.w	8005046 <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004ee4:	6878      	ldr	r0, [r7, #4]
 8004ee6:	f000 fa24 	bl	8005332 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004eea:	e0ac      	b.n	8005046 <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	685b      	ldr	r3, [r3, #4]
 8004ef2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004ef6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004efa:	f000 80a4 	beq.w	8005046 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004efe:	69fb      	ldr	r3, [r7, #28]
 8004f00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d00d      	beq.n	8004f24 <HAL_I2C_EV_IRQHandler+0x178>
 8004f08:	697b      	ldr	r3, [r7, #20]
 8004f0a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d008      	beq.n	8004f24 <HAL_I2C_EV_IRQHandler+0x178>
 8004f12:	69fb      	ldr	r3, [r7, #28]
 8004f14:	f003 0304 	and.w	r3, r3, #4
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d103      	bne.n	8004f24 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8004f1c:	6878      	ldr	r0, [r7, #4]
 8004f1e:	f000 faa0 	bl	8005462 <I2C_MasterReceive_RXNE>
 8004f22:	e00f      	b.n	8004f44 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004f24:	69fb      	ldr	r3, [r7, #28]
 8004f26:	f003 0304 	and.w	r3, r3, #4
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	f000 808b 	beq.w	8005046 <HAL_I2C_EV_IRQHandler+0x29a>
 8004f30:	697b      	ldr	r3, [r7, #20]
 8004f32:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	f000 8085 	beq.w	8005046 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8004f3c:	6878      	ldr	r0, [r7, #4]
 8004f3e:	f000 fb58 	bl	80055f2 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004f42:	e080      	b.n	8005046 <HAL_I2C_EV_IRQHandler+0x29a>
 8004f44:	e07f      	b.n	8005046 <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d004      	beq.n	8004f58 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	695b      	ldr	r3, [r3, #20]
 8004f54:	61fb      	str	r3, [r7, #28]
 8004f56:	e007      	b.n	8004f68 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	699b      	ldr	r3, [r3, #24]
 8004f5e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	695b      	ldr	r3, [r3, #20]
 8004f66:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004f68:	69fb      	ldr	r3, [r7, #28]
 8004f6a:	f003 0302 	and.w	r3, r3, #2
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d011      	beq.n	8004f96 <HAL_I2C_EV_IRQHandler+0x1ea>
 8004f72:	697b      	ldr	r3, [r7, #20]
 8004f74:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d00c      	beq.n	8004f96 <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d003      	beq.n	8004f8c <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	699b      	ldr	r3, [r3, #24]
 8004f8a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8004f8c:	69b9      	ldr	r1, [r7, #24]
 8004f8e:	6878      	ldr	r0, [r7, #4]
 8004f90:	f000 ff25 	bl	8005dde <I2C_Slave_ADDR>
 8004f94:	e05a      	b.n	800504c <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004f96:	69fb      	ldr	r3, [r7, #28]
 8004f98:	f003 0310 	and.w	r3, r3, #16
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d008      	beq.n	8004fb2 <HAL_I2C_EV_IRQHandler+0x206>
 8004fa0:	697b      	ldr	r3, [r7, #20]
 8004fa2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d003      	beq.n	8004fb2 <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 8004faa:	6878      	ldr	r0, [r7, #4]
 8004fac:	f000 ff60 	bl	8005e70 <I2C_Slave_STOPF>
 8004fb0:	e04c      	b.n	800504c <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004fb2:	7bbb      	ldrb	r3, [r7, #14]
 8004fb4:	2b21      	cmp	r3, #33	@ 0x21
 8004fb6:	d002      	beq.n	8004fbe <HAL_I2C_EV_IRQHandler+0x212>
 8004fb8:	7bbb      	ldrb	r3, [r7, #14]
 8004fba:	2b29      	cmp	r3, #41	@ 0x29
 8004fbc:	d120      	bne.n	8005000 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004fbe:	69fb      	ldr	r3, [r7, #28]
 8004fc0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d00d      	beq.n	8004fe4 <HAL_I2C_EV_IRQHandler+0x238>
 8004fc8:	697b      	ldr	r3, [r7, #20]
 8004fca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d008      	beq.n	8004fe4 <HAL_I2C_EV_IRQHandler+0x238>
 8004fd2:	69fb      	ldr	r3, [r7, #28]
 8004fd4:	f003 0304 	and.w	r3, r3, #4
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d103      	bne.n	8004fe4 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8004fdc:	6878      	ldr	r0, [r7, #4]
 8004fde:	f000 fe42 	bl	8005c66 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004fe2:	e032      	b.n	800504a <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004fe4:	69fb      	ldr	r3, [r7, #28]
 8004fe6:	f003 0304 	and.w	r3, r3, #4
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d02d      	beq.n	800504a <HAL_I2C_EV_IRQHandler+0x29e>
 8004fee:	697b      	ldr	r3, [r7, #20]
 8004ff0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d028      	beq.n	800504a <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8004ff8:	6878      	ldr	r0, [r7, #4]
 8004ffa:	f000 fe71 	bl	8005ce0 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004ffe:	e024      	b.n	800504a <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005000:	69fb      	ldr	r3, [r7, #28]
 8005002:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005006:	2b00      	cmp	r3, #0
 8005008:	d00d      	beq.n	8005026 <HAL_I2C_EV_IRQHandler+0x27a>
 800500a:	697b      	ldr	r3, [r7, #20]
 800500c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005010:	2b00      	cmp	r3, #0
 8005012:	d008      	beq.n	8005026 <HAL_I2C_EV_IRQHandler+0x27a>
 8005014:	69fb      	ldr	r3, [r7, #28]
 8005016:	f003 0304 	and.w	r3, r3, #4
 800501a:	2b00      	cmp	r3, #0
 800501c:	d103      	bne.n	8005026 <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800501e:	6878      	ldr	r0, [r7, #4]
 8005020:	f000 fe7e 	bl	8005d20 <I2C_SlaveReceive_RXNE>
 8005024:	e012      	b.n	800504c <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005026:	69fb      	ldr	r3, [r7, #28]
 8005028:	f003 0304 	and.w	r3, r3, #4
 800502c:	2b00      	cmp	r3, #0
 800502e:	d00d      	beq.n	800504c <HAL_I2C_EV_IRQHandler+0x2a0>
 8005030:	697b      	ldr	r3, [r7, #20]
 8005032:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005036:	2b00      	cmp	r3, #0
 8005038:	d008      	beq.n	800504c <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800503a:	6878      	ldr	r0, [r7, #4]
 800503c:	f000 feae 	bl	8005d9c <I2C_SlaveReceive_BTF>
 8005040:	e004      	b.n	800504c <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 8005042:	bf00      	nop
 8005044:	e002      	b.n	800504c <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005046:	bf00      	nop
 8005048:	e000      	b.n	800504c <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800504a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800504c:	3720      	adds	r7, #32
 800504e:	46bd      	mov	sp, r7
 8005050:	bd80      	pop	{r7, pc}

08005052 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005052:	b480      	push	{r7}
 8005054:	b083      	sub	sp, #12
 8005056:	af00      	add	r7, sp, #0
 8005058:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800505a:	bf00      	nop
 800505c:	370c      	adds	r7, #12
 800505e:	46bd      	mov	sp, r7
 8005060:	bc80      	pop	{r7}
 8005062:	4770      	bx	lr

08005064 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005064:	b480      	push	{r7}
 8005066:	b083      	sub	sp, #12
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800506c:	bf00      	nop
 800506e:	370c      	adds	r7, #12
 8005070:	46bd      	mov	sp, r7
 8005072:	bc80      	pop	{r7}
 8005074:	4770      	bx	lr

08005076 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005076:	b480      	push	{r7}
 8005078:	b083      	sub	sp, #12
 800507a:	af00      	add	r7, sp, #0
 800507c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800507e:	bf00      	nop
 8005080:	370c      	adds	r7, #12
 8005082:	46bd      	mov	sp, r7
 8005084:	bc80      	pop	{r7}
 8005086:	4770      	bx	lr

08005088 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005088:	b480      	push	{r7}
 800508a:	b083      	sub	sp, #12
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8005090:	bf00      	nop
 8005092:	370c      	adds	r7, #12
 8005094:	46bd      	mov	sp, r7
 8005096:	bc80      	pop	{r7}
 8005098:	4770      	bx	lr

0800509a <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800509a:	b480      	push	{r7}
 800509c:	b083      	sub	sp, #12
 800509e:	af00      	add	r7, sp, #0
 80050a0:	6078      	str	r0, [r7, #4]
 80050a2:	460b      	mov	r3, r1
 80050a4:	70fb      	strb	r3, [r7, #3]
 80050a6:	4613      	mov	r3, r2
 80050a8:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80050aa:	bf00      	nop
 80050ac:	370c      	adds	r7, #12
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bc80      	pop	{r7}
 80050b2:	4770      	bx	lr

080050b4 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80050b4:	b480      	push	{r7}
 80050b6:	b083      	sub	sp, #12
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80050bc:	bf00      	nop
 80050be:	370c      	adds	r7, #12
 80050c0:	46bd      	mov	sp, r7
 80050c2:	bc80      	pop	{r7}
 80050c4:	4770      	bx	lr

080050c6 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80050c6:	b480      	push	{r7}
 80050c8:	b083      	sub	sp, #12
 80050ca:	af00      	add	r7, sp, #0
 80050cc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80050ce:	bf00      	nop
 80050d0:	370c      	adds	r7, #12
 80050d2:	46bd      	mov	sp, r7
 80050d4:	bc80      	pop	{r7}
 80050d6:	4770      	bx	lr

080050d8 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80050d8:	b480      	push	{r7}
 80050da:	b083      	sub	sp, #12
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80050e0:	bf00      	nop
 80050e2:	370c      	adds	r7, #12
 80050e4:	46bd      	mov	sp, r7
 80050e6:	bc80      	pop	{r7}
 80050e8:	4770      	bx	lr

080050ea <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80050ea:	b480      	push	{r7}
 80050ec:	b083      	sub	sp, #12
 80050ee:	af00      	add	r7, sp, #0
 80050f0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80050f2:	bf00      	nop
 80050f4:	370c      	adds	r7, #12
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bc80      	pop	{r7}
 80050fa:	4770      	bx	lr

080050fc <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80050fc:	b480      	push	{r7}
 80050fe:	b083      	sub	sp, #12
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8005104:	bf00      	nop
 8005106:	370c      	adds	r7, #12
 8005108:	46bd      	mov	sp, r7
 800510a:	bc80      	pop	{r7}
 800510c:	4770      	bx	lr

0800510e <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800510e:	b580      	push	{r7, lr}
 8005110:	b084      	sub	sp, #16
 8005112:	af00      	add	r7, sp, #0
 8005114:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800511c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005124:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800512a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005130:	2b00      	cmp	r3, #0
 8005132:	d150      	bne.n	80051d6 <I2C_MasterTransmit_TXE+0xc8>
 8005134:	7bfb      	ldrb	r3, [r7, #15]
 8005136:	2b21      	cmp	r3, #33	@ 0x21
 8005138:	d14d      	bne.n	80051d6 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800513a:	68bb      	ldr	r3, [r7, #8]
 800513c:	2b08      	cmp	r3, #8
 800513e:	d01d      	beq.n	800517c <I2C_MasterTransmit_TXE+0x6e>
 8005140:	68bb      	ldr	r3, [r7, #8]
 8005142:	2b20      	cmp	r3, #32
 8005144:	d01a      	beq.n	800517c <I2C_MasterTransmit_TXE+0x6e>
 8005146:	68bb      	ldr	r3, [r7, #8]
 8005148:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800514c:	d016      	beq.n	800517c <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	685a      	ldr	r2, [r3, #4]
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800515c:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2211      	movs	r2, #17
 8005162:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2200      	movs	r2, #0
 8005168:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2220      	movs	r2, #32
 8005170:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8005174:	6878      	ldr	r0, [r7, #4]
 8005176:	f7ff ff6c 	bl	8005052 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800517a:	e060      	b.n	800523e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	685a      	ldr	r2, [r3, #4]
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800518a:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	681a      	ldr	r2, [r3, #0]
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800519a:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2200      	movs	r2, #0
 80051a0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2220      	movs	r2, #32
 80051a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80051b0:	b2db      	uxtb	r3, r3
 80051b2:	2b40      	cmp	r3, #64	@ 0x40
 80051b4:	d107      	bne.n	80051c6 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2200      	movs	r2, #0
 80051ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80051be:	6878      	ldr	r0, [r7, #4]
 80051c0:	f7ff ff81 	bl	80050c6 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80051c4:	e03b      	b.n	800523e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2200      	movs	r2, #0
 80051ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80051ce:	6878      	ldr	r0, [r7, #4]
 80051d0:	f7ff ff3f 	bl	8005052 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80051d4:	e033      	b.n	800523e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80051d6:	7bfb      	ldrb	r3, [r7, #15]
 80051d8:	2b21      	cmp	r3, #33	@ 0x21
 80051da:	d005      	beq.n	80051e8 <I2C_MasterTransmit_TXE+0xda>
 80051dc:	7bbb      	ldrb	r3, [r7, #14]
 80051de:	2b40      	cmp	r3, #64	@ 0x40
 80051e0:	d12d      	bne.n	800523e <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80051e2:	7bfb      	ldrb	r3, [r7, #15]
 80051e4:	2b22      	cmp	r3, #34	@ 0x22
 80051e6:	d12a      	bne.n	800523e <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051ec:	b29b      	uxth	r3, r3
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d108      	bne.n	8005204 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	685a      	ldr	r2, [r3, #4]
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005200:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8005202:	e01c      	b.n	800523e <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800520a:	b2db      	uxtb	r3, r3
 800520c:	2b40      	cmp	r3, #64	@ 0x40
 800520e:	d103      	bne.n	8005218 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8005210:	6878      	ldr	r0, [r7, #4]
 8005212:	f000 f88e 	bl	8005332 <I2C_MemoryTransmit_TXE_BTF>
}
 8005216:	e012      	b.n	800523e <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800521c:	781a      	ldrb	r2, [r3, #0]
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005228:	1c5a      	adds	r2, r3, #1
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005232:	b29b      	uxth	r3, r3
 8005234:	3b01      	subs	r3, #1
 8005236:	b29a      	uxth	r2, r3
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800523c:	e7ff      	b.n	800523e <I2C_MasterTransmit_TXE+0x130>
 800523e:	bf00      	nop
 8005240:	3710      	adds	r7, #16
 8005242:	46bd      	mov	sp, r7
 8005244:	bd80      	pop	{r7, pc}

08005246 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005246:	b580      	push	{r7, lr}
 8005248:	b084      	sub	sp, #16
 800524a:	af00      	add	r7, sp, #0
 800524c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005252:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800525a:	b2db      	uxtb	r3, r3
 800525c:	2b21      	cmp	r3, #33	@ 0x21
 800525e:	d164      	bne.n	800532a <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005264:	b29b      	uxth	r3, r3
 8005266:	2b00      	cmp	r3, #0
 8005268:	d012      	beq.n	8005290 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800526e:	781a      	ldrb	r2, [r3, #0]
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800527a:	1c5a      	adds	r2, r3, #1
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005284:	b29b      	uxth	r3, r3
 8005286:	3b01      	subs	r3, #1
 8005288:	b29a      	uxth	r2, r3
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800528e:	e04c      	b.n	800532a <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	2b08      	cmp	r3, #8
 8005294:	d01d      	beq.n	80052d2 <I2C_MasterTransmit_BTF+0x8c>
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	2b20      	cmp	r3, #32
 800529a:	d01a      	beq.n	80052d2 <I2C_MasterTransmit_BTF+0x8c>
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80052a2:	d016      	beq.n	80052d2 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	685a      	ldr	r2, [r3, #4]
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80052b2:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2211      	movs	r2, #17
 80052b8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2200      	movs	r2, #0
 80052be:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2220      	movs	r2, #32
 80052c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80052ca:	6878      	ldr	r0, [r7, #4]
 80052cc:	f7ff fec1 	bl	8005052 <HAL_I2C_MasterTxCpltCallback>
}
 80052d0:	e02b      	b.n	800532a <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	685a      	ldr	r2, [r3, #4]
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80052e0:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	681a      	ldr	r2, [r3, #0]
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80052f0:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2200      	movs	r2, #0
 80052f6:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2220      	movs	r2, #32
 80052fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005306:	b2db      	uxtb	r3, r3
 8005308:	2b40      	cmp	r3, #64	@ 0x40
 800530a:	d107      	bne.n	800531c <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2200      	movs	r2, #0
 8005310:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8005314:	6878      	ldr	r0, [r7, #4]
 8005316:	f7ff fed6 	bl	80050c6 <HAL_I2C_MemTxCpltCallback>
}
 800531a:	e006      	b.n	800532a <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2200      	movs	r2, #0
 8005320:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8005324:	6878      	ldr	r0, [r7, #4]
 8005326:	f7ff fe94 	bl	8005052 <HAL_I2C_MasterTxCpltCallback>
}
 800532a:	bf00      	nop
 800532c:	3710      	adds	r7, #16
 800532e:	46bd      	mov	sp, r7
 8005330:	bd80      	pop	{r7, pc}

08005332 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8005332:	b580      	push	{r7, lr}
 8005334:	b084      	sub	sp, #16
 8005336:	af00      	add	r7, sp, #0
 8005338:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005340:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005346:	2b00      	cmp	r3, #0
 8005348:	d11d      	bne.n	8005386 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800534e:	2b01      	cmp	r3, #1
 8005350:	d10b      	bne.n	800536a <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005356:	b2da      	uxtb	r2, r3
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005362:	1c9a      	adds	r2, r3, #2
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8005368:	e077      	b.n	800545a <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800536e:	b29b      	uxth	r3, r3
 8005370:	121b      	asrs	r3, r3, #8
 8005372:	b2da      	uxtb	r2, r3
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800537e:	1c5a      	adds	r2, r3, #1
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8005384:	e069      	b.n	800545a <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800538a:	2b01      	cmp	r3, #1
 800538c:	d10b      	bne.n	80053a6 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005392:	b2da      	uxtb	r2, r3
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800539e:	1c5a      	adds	r2, r3, #1
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80053a4:	e059      	b.n	800545a <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80053aa:	2b02      	cmp	r3, #2
 80053ac:	d152      	bne.n	8005454 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80053ae:	7bfb      	ldrb	r3, [r7, #15]
 80053b0:	2b22      	cmp	r3, #34	@ 0x22
 80053b2:	d10d      	bne.n	80053d0 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	681a      	ldr	r2, [r3, #0]
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80053c2:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80053c8:	1c5a      	adds	r2, r3, #1
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80053ce:	e044      	b.n	800545a <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053d4:	b29b      	uxth	r3, r3
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d015      	beq.n	8005406 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80053da:	7bfb      	ldrb	r3, [r7, #15]
 80053dc:	2b21      	cmp	r3, #33	@ 0x21
 80053de:	d112      	bne.n	8005406 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053e4:	781a      	ldrb	r2, [r3, #0]
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053f0:	1c5a      	adds	r2, r3, #1
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053fa:	b29b      	uxth	r3, r3
 80053fc:	3b01      	subs	r3, #1
 80053fe:	b29a      	uxth	r2, r3
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8005404:	e029      	b.n	800545a <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800540a:	b29b      	uxth	r3, r3
 800540c:	2b00      	cmp	r3, #0
 800540e:	d124      	bne.n	800545a <I2C_MemoryTransmit_TXE_BTF+0x128>
 8005410:	7bfb      	ldrb	r3, [r7, #15]
 8005412:	2b21      	cmp	r3, #33	@ 0x21
 8005414:	d121      	bne.n	800545a <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	685a      	ldr	r2, [r3, #4]
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005424:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	681a      	ldr	r2, [r3, #0]
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005434:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2200      	movs	r2, #0
 800543a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2220      	movs	r2, #32
 8005440:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2200      	movs	r2, #0
 8005448:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800544c:	6878      	ldr	r0, [r7, #4]
 800544e:	f7ff fe3a 	bl	80050c6 <HAL_I2C_MemTxCpltCallback>
}
 8005452:	e002      	b.n	800545a <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8005454:	6878      	ldr	r0, [r7, #4]
 8005456:	f7ff f829 	bl	80044ac <I2C_Flush_DR>
}
 800545a:	bf00      	nop
 800545c:	3710      	adds	r7, #16
 800545e:	46bd      	mov	sp, r7
 8005460:	bd80      	pop	{r7, pc}

08005462 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005462:	b580      	push	{r7, lr}
 8005464:	b084      	sub	sp, #16
 8005466:	af00      	add	r7, sp, #0
 8005468:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005470:	b2db      	uxtb	r3, r3
 8005472:	2b22      	cmp	r3, #34	@ 0x22
 8005474:	f040 80b9 	bne.w	80055ea <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800547c:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005482:	b29b      	uxth	r3, r3
 8005484:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	2b03      	cmp	r3, #3
 800548a:	d921      	bls.n	80054d0 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	691a      	ldr	r2, [r3, #16]
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005496:	b2d2      	uxtb	r2, r2
 8005498:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800549e:	1c5a      	adds	r2, r3, #1
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054a8:	b29b      	uxth	r3, r3
 80054aa:	3b01      	subs	r3, #1
 80054ac:	b29a      	uxth	r2, r3
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054b6:	b29b      	uxth	r3, r3
 80054b8:	2b03      	cmp	r3, #3
 80054ba:	f040 8096 	bne.w	80055ea <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	685a      	ldr	r2, [r3, #4]
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80054cc:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80054ce:	e08c      	b.n	80055ea <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054d4:	2b02      	cmp	r3, #2
 80054d6:	d07f      	beq.n	80055d8 <I2C_MasterReceive_RXNE+0x176>
 80054d8:	68bb      	ldr	r3, [r7, #8]
 80054da:	2b01      	cmp	r3, #1
 80054dc:	d002      	beq.n	80054e4 <I2C_MasterReceive_RXNE+0x82>
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d179      	bne.n	80055d8 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80054e4:	6878      	ldr	r0, [r7, #4]
 80054e6:	f001 fb77 	bl	8006bd8 <I2C_WaitOnSTOPRequestThroughIT>
 80054ea:	4603      	mov	r3, r0
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d14c      	bne.n	800558a <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	681a      	ldr	r2, [r3, #0]
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80054fe:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	685a      	ldr	r2, [r3, #4]
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800550e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	691a      	ldr	r2, [r3, #16]
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800551a:	b2d2      	uxtb	r2, r2
 800551c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005522:	1c5a      	adds	r2, r3, #1
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800552c:	b29b      	uxth	r3, r3
 800552e:	3b01      	subs	r3, #1
 8005530:	b29a      	uxth	r2, r3
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2220      	movs	r2, #32
 800553a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005544:	b2db      	uxtb	r3, r3
 8005546:	2b40      	cmp	r3, #64	@ 0x40
 8005548:	d10a      	bne.n	8005560 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2200      	movs	r2, #0
 800554e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2200      	movs	r2, #0
 8005556:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8005558:	6878      	ldr	r0, [r7, #4]
 800555a:	f7ff fdbd 	bl	80050d8 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800555e:	e044      	b.n	80055ea <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2200      	movs	r2, #0
 8005564:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	2b08      	cmp	r3, #8
 800556c:	d002      	beq.n	8005574 <I2C_MasterReceive_RXNE+0x112>
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	2b20      	cmp	r3, #32
 8005572:	d103      	bne.n	800557c <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2200      	movs	r2, #0
 8005578:	631a      	str	r2, [r3, #48]	@ 0x30
 800557a:	e002      	b.n	8005582 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2212      	movs	r2, #18
 8005580:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8005582:	6878      	ldr	r0, [r7, #4]
 8005584:	f7ff fd6e 	bl	8005064 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005588:	e02f      	b.n	80055ea <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	685a      	ldr	r2, [r3, #4]
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005598:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	691a      	ldr	r2, [r3, #16]
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055a4:	b2d2      	uxtb	r2, r2
 80055a6:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055ac:	1c5a      	adds	r2, r3, #1
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055b6:	b29b      	uxth	r3, r3
 80055b8:	3b01      	subs	r3, #1
 80055ba:	b29a      	uxth	r2, r3
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2220      	movs	r2, #32
 80055c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2200      	movs	r2, #0
 80055cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80055d0:	6878      	ldr	r0, [r7, #4]
 80055d2:	f7ff fd8a 	bl	80050ea <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80055d6:	e008      	b.n	80055ea <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	685a      	ldr	r2, [r3, #4]
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80055e6:	605a      	str	r2, [r3, #4]
}
 80055e8:	e7ff      	b.n	80055ea <I2C_MasterReceive_RXNE+0x188>
 80055ea:	bf00      	nop
 80055ec:	3710      	adds	r7, #16
 80055ee:	46bd      	mov	sp, r7
 80055f0:	bd80      	pop	{r7, pc}

080055f2 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80055f2:	b580      	push	{r7, lr}
 80055f4:	b084      	sub	sp, #16
 80055f6:	af00      	add	r7, sp, #0
 80055f8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055fe:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005604:	b29b      	uxth	r3, r3
 8005606:	2b04      	cmp	r3, #4
 8005608:	d11b      	bne.n	8005642 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	685a      	ldr	r2, [r3, #4]
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005618:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	691a      	ldr	r2, [r3, #16]
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005624:	b2d2      	uxtb	r2, r2
 8005626:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800562c:	1c5a      	adds	r2, r3, #1
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005636:	b29b      	uxth	r3, r3
 8005638:	3b01      	subs	r3, #1
 800563a:	b29a      	uxth	r2, r3
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8005640:	e0c4      	b.n	80057cc <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005646:	b29b      	uxth	r3, r3
 8005648:	2b03      	cmp	r3, #3
 800564a:	d129      	bne.n	80056a0 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	685a      	ldr	r2, [r3, #4]
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800565a:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	2b04      	cmp	r3, #4
 8005660:	d00a      	beq.n	8005678 <I2C_MasterReceive_BTF+0x86>
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	2b02      	cmp	r3, #2
 8005666:	d007      	beq.n	8005678 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	681a      	ldr	r2, [r3, #0]
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005676:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	691a      	ldr	r2, [r3, #16]
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005682:	b2d2      	uxtb	r2, r2
 8005684:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800568a:	1c5a      	adds	r2, r3, #1
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005694:	b29b      	uxth	r3, r3
 8005696:	3b01      	subs	r3, #1
 8005698:	b29a      	uxth	r2, r3
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800569e:	e095      	b.n	80057cc <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056a4:	b29b      	uxth	r3, r3
 80056a6:	2b02      	cmp	r3, #2
 80056a8:	d17d      	bne.n	80057a6 <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	2b01      	cmp	r3, #1
 80056ae:	d002      	beq.n	80056b6 <I2C_MasterReceive_BTF+0xc4>
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	2b10      	cmp	r3, #16
 80056b4:	d108      	bne.n	80056c8 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	681a      	ldr	r2, [r3, #0]
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80056c4:	601a      	str	r2, [r3, #0]
 80056c6:	e016      	b.n	80056f6 <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	2b04      	cmp	r3, #4
 80056cc:	d002      	beq.n	80056d4 <I2C_MasterReceive_BTF+0xe2>
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	2b02      	cmp	r3, #2
 80056d2:	d108      	bne.n	80056e6 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	681a      	ldr	r2, [r3, #0]
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80056e2:	601a      	str	r2, [r3, #0]
 80056e4:	e007      	b.n	80056f6 <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	681a      	ldr	r2, [r3, #0]
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80056f4:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	691a      	ldr	r2, [r3, #16]
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005700:	b2d2      	uxtb	r2, r2
 8005702:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005708:	1c5a      	adds	r2, r3, #1
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005712:	b29b      	uxth	r3, r3
 8005714:	3b01      	subs	r3, #1
 8005716:	b29a      	uxth	r2, r3
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	691a      	ldr	r2, [r3, #16]
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005726:	b2d2      	uxtb	r2, r2
 8005728:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800572e:	1c5a      	adds	r2, r3, #1
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005738:	b29b      	uxth	r3, r3
 800573a:	3b01      	subs	r3, #1
 800573c:	b29a      	uxth	r2, r3
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	685a      	ldr	r2, [r3, #4]
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8005750:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2220      	movs	r2, #32
 8005756:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005760:	b2db      	uxtb	r3, r3
 8005762:	2b40      	cmp	r3, #64	@ 0x40
 8005764:	d10a      	bne.n	800577c <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2200      	movs	r2, #0
 800576a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2200      	movs	r2, #0
 8005772:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8005774:	6878      	ldr	r0, [r7, #4]
 8005776:	f7ff fcaf 	bl	80050d8 <HAL_I2C_MemRxCpltCallback>
}
 800577a:	e027      	b.n	80057cc <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2200      	movs	r2, #0
 8005780:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	2b08      	cmp	r3, #8
 8005788:	d002      	beq.n	8005790 <I2C_MasterReceive_BTF+0x19e>
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	2b20      	cmp	r3, #32
 800578e:	d103      	bne.n	8005798 <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2200      	movs	r2, #0
 8005794:	631a      	str	r2, [r3, #48]	@ 0x30
 8005796:	e002      	b.n	800579e <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2212      	movs	r2, #18
 800579c:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800579e:	6878      	ldr	r0, [r7, #4]
 80057a0:	f7ff fc60 	bl	8005064 <HAL_I2C_MasterRxCpltCallback>
}
 80057a4:	e012      	b.n	80057cc <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	691a      	ldr	r2, [r3, #16]
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057b0:	b2d2      	uxtb	r2, r2
 80057b2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057b8:	1c5a      	adds	r2, r3, #1
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057c2:	b29b      	uxth	r3, r3
 80057c4:	3b01      	subs	r3, #1
 80057c6:	b29a      	uxth	r2, r3
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80057cc:	bf00      	nop
 80057ce:	3710      	adds	r7, #16
 80057d0:	46bd      	mov	sp, r7
 80057d2:	bd80      	pop	{r7, pc}

080057d4 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80057d4:	b480      	push	{r7}
 80057d6:	b083      	sub	sp, #12
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80057e2:	b2db      	uxtb	r3, r3
 80057e4:	2b40      	cmp	r3, #64	@ 0x40
 80057e6:	d117      	bne.n	8005818 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d109      	bne.n	8005804 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057f4:	b2db      	uxtb	r3, r3
 80057f6:	461a      	mov	r2, r3
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005800:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8005802:	e067      	b.n	80058d4 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005808:	b2db      	uxtb	r3, r3
 800580a:	f043 0301 	orr.w	r3, r3, #1
 800580e:	b2da      	uxtb	r2, r3
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	611a      	str	r2, [r3, #16]
}
 8005816:	e05d      	b.n	80058d4 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	691b      	ldr	r3, [r3, #16]
 800581c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005820:	d133      	bne.n	800588a <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005828:	b2db      	uxtb	r3, r3
 800582a:	2b21      	cmp	r3, #33	@ 0x21
 800582c:	d109      	bne.n	8005842 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005832:	b2db      	uxtb	r3, r3
 8005834:	461a      	mov	r2, r3
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800583e:	611a      	str	r2, [r3, #16]
 8005840:	e008      	b.n	8005854 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005846:	b2db      	uxtb	r3, r3
 8005848:	f043 0301 	orr.w	r3, r3, #1
 800584c:	b2da      	uxtb	r2, r3
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005858:	2b00      	cmp	r3, #0
 800585a:	d004      	beq.n	8005866 <I2C_Master_SB+0x92>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005860:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005862:	2b00      	cmp	r3, #0
 8005864:	d108      	bne.n	8005878 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800586a:	2b00      	cmp	r3, #0
 800586c:	d032      	beq.n	80058d4 <I2C_Master_SB+0x100>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005872:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005874:	2b00      	cmp	r3, #0
 8005876:	d02d      	beq.n	80058d4 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	685a      	ldr	r2, [r3, #4]
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005886:	605a      	str	r2, [r3, #4]
}
 8005888:	e024      	b.n	80058d4 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800588e:	2b00      	cmp	r3, #0
 8005890:	d10e      	bne.n	80058b0 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005896:	b29b      	uxth	r3, r3
 8005898:	11db      	asrs	r3, r3, #7
 800589a:	b2db      	uxtb	r3, r3
 800589c:	f003 0306 	and.w	r3, r3, #6
 80058a0:	b2db      	uxtb	r3, r3
 80058a2:	f063 030f 	orn	r3, r3, #15
 80058a6:	b2da      	uxtb	r2, r3
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	611a      	str	r2, [r3, #16]
}
 80058ae:	e011      	b.n	80058d4 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80058b4:	2b01      	cmp	r3, #1
 80058b6:	d10d      	bne.n	80058d4 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058bc:	b29b      	uxth	r3, r3
 80058be:	11db      	asrs	r3, r3, #7
 80058c0:	b2db      	uxtb	r3, r3
 80058c2:	f003 0306 	and.w	r3, r3, #6
 80058c6:	b2db      	uxtb	r3, r3
 80058c8:	f063 030e 	orn	r3, r3, #14
 80058cc:	b2da      	uxtb	r2, r3
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	611a      	str	r2, [r3, #16]
}
 80058d4:	bf00      	nop
 80058d6:	370c      	adds	r7, #12
 80058d8:	46bd      	mov	sp, r7
 80058da:	bc80      	pop	{r7}
 80058dc:	4770      	bx	lr

080058de <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80058de:	b480      	push	{r7}
 80058e0:	b083      	sub	sp, #12
 80058e2:	af00      	add	r7, sp, #0
 80058e4:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058ea:	b2da      	uxtb	r2, r3
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d004      	beq.n	8005904 <I2C_Master_ADD10+0x26>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005900:	2b00      	cmp	r3, #0
 8005902:	d108      	bne.n	8005916 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005908:	2b00      	cmp	r3, #0
 800590a:	d00c      	beq.n	8005926 <I2C_Master_ADD10+0x48>
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005910:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005912:	2b00      	cmp	r3, #0
 8005914:	d007      	beq.n	8005926 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	685a      	ldr	r2, [r3, #4]
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005924:	605a      	str	r2, [r3, #4]
  }
}
 8005926:	bf00      	nop
 8005928:	370c      	adds	r7, #12
 800592a:	46bd      	mov	sp, r7
 800592c:	bc80      	pop	{r7}
 800592e:	4770      	bx	lr

08005930 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8005930:	b480      	push	{r7}
 8005932:	b091      	sub	sp, #68	@ 0x44
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800593e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005946:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800594c:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005954:	b2db      	uxtb	r3, r3
 8005956:	2b22      	cmp	r3, #34	@ 0x22
 8005958:	f040 8174 	bne.w	8005c44 <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005960:	2b00      	cmp	r3, #0
 8005962:	d10f      	bne.n	8005984 <I2C_Master_ADDR+0x54>
 8005964:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8005968:	2b40      	cmp	r3, #64	@ 0x40
 800596a:	d10b      	bne.n	8005984 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800596c:	2300      	movs	r3, #0
 800596e:	633b      	str	r3, [r7, #48]	@ 0x30
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	695b      	ldr	r3, [r3, #20]
 8005976:	633b      	str	r3, [r7, #48]	@ 0x30
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	699b      	ldr	r3, [r3, #24]
 800597e:	633b      	str	r3, [r7, #48]	@ 0x30
 8005980:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005982:	e16b      	b.n	8005c5c <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005988:	2b00      	cmp	r3, #0
 800598a:	d11d      	bne.n	80059c8 <I2C_Master_ADDR+0x98>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	691b      	ldr	r3, [r3, #16]
 8005990:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8005994:	d118      	bne.n	80059c8 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005996:	2300      	movs	r3, #0
 8005998:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	695b      	ldr	r3, [r3, #20]
 80059a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	699b      	ldr	r3, [r3, #24]
 80059a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80059aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	681a      	ldr	r2, [r3, #0]
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80059ba:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80059c0:	1c5a      	adds	r2, r3, #1
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	651a      	str	r2, [r3, #80]	@ 0x50
 80059c6:	e149      	b.n	8005c5c <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059cc:	b29b      	uxth	r3, r3
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d113      	bne.n	80059fa <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80059d2:	2300      	movs	r3, #0
 80059d4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	695b      	ldr	r3, [r3, #20]
 80059dc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	699b      	ldr	r3, [r3, #24]
 80059e4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80059e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	681a      	ldr	r2, [r3, #0]
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80059f6:	601a      	str	r2, [r3, #0]
 80059f8:	e120      	b.n	8005c3c <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059fe:	b29b      	uxth	r3, r3
 8005a00:	2b01      	cmp	r3, #1
 8005a02:	f040 808a 	bne.w	8005b1a <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8005a06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a08:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005a0c:	d137      	bne.n	8005a7e <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	681a      	ldr	r2, [r3, #0]
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005a1c:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	685b      	ldr	r3, [r3, #4]
 8005a24:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005a28:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005a2c:	d113      	bne.n	8005a56 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	681a      	ldr	r2, [r3, #0]
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005a3c:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a3e:	2300      	movs	r3, #0
 8005a40:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	695b      	ldr	r3, [r3, #20]
 8005a48:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	699b      	ldr	r3, [r3, #24]
 8005a50:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a54:	e0f2      	b.n	8005c3c <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a56:	2300      	movs	r3, #0
 8005a58:	623b      	str	r3, [r7, #32]
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	695b      	ldr	r3, [r3, #20]
 8005a60:	623b      	str	r3, [r7, #32]
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	699b      	ldr	r3, [r3, #24]
 8005a68:	623b      	str	r3, [r7, #32]
 8005a6a:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	681a      	ldr	r2, [r3, #0]
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005a7a:	601a      	str	r2, [r3, #0]
 8005a7c:	e0de      	b.n	8005c3c <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8005a7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a80:	2b08      	cmp	r3, #8
 8005a82:	d02e      	beq.n	8005ae2 <I2C_Master_ADDR+0x1b2>
 8005a84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a86:	2b20      	cmp	r3, #32
 8005a88:	d02b      	beq.n	8005ae2 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8005a8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a8c:	2b12      	cmp	r3, #18
 8005a8e:	d102      	bne.n	8005a96 <I2C_Master_ADDR+0x166>
 8005a90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a92:	2b01      	cmp	r3, #1
 8005a94:	d125      	bne.n	8005ae2 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005a96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a98:	2b04      	cmp	r3, #4
 8005a9a:	d00e      	beq.n	8005aba <I2C_Master_ADDR+0x18a>
 8005a9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a9e:	2b02      	cmp	r3, #2
 8005aa0:	d00b      	beq.n	8005aba <I2C_Master_ADDR+0x18a>
 8005aa2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005aa4:	2b10      	cmp	r3, #16
 8005aa6:	d008      	beq.n	8005aba <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	681a      	ldr	r2, [r3, #0]
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005ab6:	601a      	str	r2, [r3, #0]
 8005ab8:	e007      	b.n	8005aca <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	681a      	ldr	r2, [r3, #0]
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005ac8:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005aca:	2300      	movs	r3, #0
 8005acc:	61fb      	str	r3, [r7, #28]
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	695b      	ldr	r3, [r3, #20]
 8005ad4:	61fb      	str	r3, [r7, #28]
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	699b      	ldr	r3, [r3, #24]
 8005adc:	61fb      	str	r3, [r7, #28]
 8005ade:	69fb      	ldr	r3, [r7, #28]
 8005ae0:	e0ac      	b.n	8005c3c <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	681a      	ldr	r2, [r3, #0]
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005af0:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005af2:	2300      	movs	r3, #0
 8005af4:	61bb      	str	r3, [r7, #24]
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	695b      	ldr	r3, [r3, #20]
 8005afc:	61bb      	str	r3, [r7, #24]
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	699b      	ldr	r3, [r3, #24]
 8005b04:	61bb      	str	r3, [r7, #24]
 8005b06:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	681a      	ldr	r2, [r3, #0]
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005b16:	601a      	str	r2, [r3, #0]
 8005b18:	e090      	b.n	8005c3c <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b1e:	b29b      	uxth	r3, r3
 8005b20:	2b02      	cmp	r3, #2
 8005b22:	d158      	bne.n	8005bd6 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005b24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b26:	2b04      	cmp	r3, #4
 8005b28:	d021      	beq.n	8005b6e <I2C_Master_ADDR+0x23e>
 8005b2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b2c:	2b02      	cmp	r3, #2
 8005b2e:	d01e      	beq.n	8005b6e <I2C_Master_ADDR+0x23e>
 8005b30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b32:	2b10      	cmp	r3, #16
 8005b34:	d01b      	beq.n	8005b6e <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	681a      	ldr	r2, [r3, #0]
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005b44:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b46:	2300      	movs	r3, #0
 8005b48:	617b      	str	r3, [r7, #20]
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	695b      	ldr	r3, [r3, #20]
 8005b50:	617b      	str	r3, [r7, #20]
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	699b      	ldr	r3, [r3, #24]
 8005b58:	617b      	str	r3, [r7, #20]
 8005b5a:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	681a      	ldr	r2, [r3, #0]
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005b6a:	601a      	str	r2, [r3, #0]
 8005b6c:	e012      	b.n	8005b94 <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	681a      	ldr	r2, [r3, #0]
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005b7c:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b7e:	2300      	movs	r3, #0
 8005b80:	613b      	str	r3, [r7, #16]
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	695b      	ldr	r3, [r3, #20]
 8005b88:	613b      	str	r3, [r7, #16]
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	699b      	ldr	r3, [r3, #24]
 8005b90:	613b      	str	r3, [r7, #16]
 8005b92:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	685b      	ldr	r3, [r3, #4]
 8005b9a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005b9e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005ba2:	d14b      	bne.n	8005c3c <I2C_Master_ADDR+0x30c>
 8005ba4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ba6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005baa:	d00b      	beq.n	8005bc4 <I2C_Master_ADDR+0x294>
 8005bac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bae:	2b01      	cmp	r3, #1
 8005bb0:	d008      	beq.n	8005bc4 <I2C_Master_ADDR+0x294>
 8005bb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bb4:	2b08      	cmp	r3, #8
 8005bb6:	d005      	beq.n	8005bc4 <I2C_Master_ADDR+0x294>
 8005bb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bba:	2b10      	cmp	r3, #16
 8005bbc:	d002      	beq.n	8005bc4 <I2C_Master_ADDR+0x294>
 8005bbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bc0:	2b20      	cmp	r3, #32
 8005bc2:	d13b      	bne.n	8005c3c <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	685a      	ldr	r2, [r3, #4]
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005bd2:	605a      	str	r2, [r3, #4]
 8005bd4:	e032      	b.n	8005c3c <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	681a      	ldr	r2, [r3, #0]
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005be4:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	685b      	ldr	r3, [r3, #4]
 8005bec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005bf0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005bf4:	d117      	bne.n	8005c26 <I2C_Master_ADDR+0x2f6>
 8005bf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bf8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005bfc:	d00b      	beq.n	8005c16 <I2C_Master_ADDR+0x2e6>
 8005bfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c00:	2b01      	cmp	r3, #1
 8005c02:	d008      	beq.n	8005c16 <I2C_Master_ADDR+0x2e6>
 8005c04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c06:	2b08      	cmp	r3, #8
 8005c08:	d005      	beq.n	8005c16 <I2C_Master_ADDR+0x2e6>
 8005c0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c0c:	2b10      	cmp	r3, #16
 8005c0e:	d002      	beq.n	8005c16 <I2C_Master_ADDR+0x2e6>
 8005c10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c12:	2b20      	cmp	r3, #32
 8005c14:	d107      	bne.n	8005c26 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	685a      	ldr	r2, [r3, #4]
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005c24:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c26:	2300      	movs	r3, #0
 8005c28:	60fb      	str	r3, [r7, #12]
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	695b      	ldr	r3, [r3, #20]
 8005c30:	60fb      	str	r3, [r7, #12]
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	699b      	ldr	r3, [r3, #24]
 8005c38:	60fb      	str	r3, [r7, #12]
 8005c3a:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2200      	movs	r2, #0
 8005c40:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8005c42:	e00b      	b.n	8005c5c <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c44:	2300      	movs	r3, #0
 8005c46:	60bb      	str	r3, [r7, #8]
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	695b      	ldr	r3, [r3, #20]
 8005c4e:	60bb      	str	r3, [r7, #8]
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	699b      	ldr	r3, [r3, #24]
 8005c56:	60bb      	str	r3, [r7, #8]
 8005c58:	68bb      	ldr	r3, [r7, #8]
}
 8005c5a:	e7ff      	b.n	8005c5c <I2C_Master_ADDR+0x32c>
 8005c5c:	bf00      	nop
 8005c5e:	3744      	adds	r7, #68	@ 0x44
 8005c60:	46bd      	mov	sp, r7
 8005c62:	bc80      	pop	{r7}
 8005c64:	4770      	bx	lr

08005c66 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005c66:	b580      	push	{r7, lr}
 8005c68:	b084      	sub	sp, #16
 8005c6a:	af00      	add	r7, sp, #0
 8005c6c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005c74:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c7a:	b29b      	uxth	r3, r3
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d02b      	beq.n	8005cd8 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c84:	781a      	ldrb	r2, [r3, #0]
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c90:	1c5a      	adds	r2, r3, #1
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c9a:	b29b      	uxth	r3, r3
 8005c9c:	3b01      	subs	r3, #1
 8005c9e:	b29a      	uxth	r2, r3
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ca8:	b29b      	uxth	r3, r3
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d114      	bne.n	8005cd8 <I2C_SlaveTransmit_TXE+0x72>
 8005cae:	7bfb      	ldrb	r3, [r7, #15]
 8005cb0:	2b29      	cmp	r3, #41	@ 0x29
 8005cb2:	d111      	bne.n	8005cd8 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	685a      	ldr	r2, [r3, #4]
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005cc2:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2221      	movs	r2, #33	@ 0x21
 8005cc8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2228      	movs	r2, #40	@ 0x28
 8005cce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005cd2:	6878      	ldr	r0, [r7, #4]
 8005cd4:	f7ff f9cf 	bl	8005076 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005cd8:	bf00      	nop
 8005cda:	3710      	adds	r7, #16
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	bd80      	pop	{r7, pc}

08005ce0 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005ce0:	b480      	push	{r7}
 8005ce2:	b083      	sub	sp, #12
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005cec:	b29b      	uxth	r3, r3
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d011      	beq.n	8005d16 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cf6:	781a      	ldrb	r2, [r3, #0]
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d02:	1c5a      	adds	r2, r3, #1
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d0c:	b29b      	uxth	r3, r3
 8005d0e:	3b01      	subs	r3, #1
 8005d10:	b29a      	uxth	r2, r3
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8005d16:	bf00      	nop
 8005d18:	370c      	adds	r7, #12
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	bc80      	pop	{r7}
 8005d1e:	4770      	bx	lr

08005d20 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b084      	sub	sp, #16
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005d2e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d34:	b29b      	uxth	r3, r3
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d02c      	beq.n	8005d94 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	691a      	ldr	r2, [r3, #16]
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d44:	b2d2      	uxtb	r2, r2
 8005d46:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d4c:	1c5a      	adds	r2, r3, #1
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d56:	b29b      	uxth	r3, r3
 8005d58:	3b01      	subs	r3, #1
 8005d5a:	b29a      	uxth	r2, r3
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d64:	b29b      	uxth	r3, r3
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d114      	bne.n	8005d94 <I2C_SlaveReceive_RXNE+0x74>
 8005d6a:	7bfb      	ldrb	r3, [r7, #15]
 8005d6c:	2b2a      	cmp	r3, #42	@ 0x2a
 8005d6e:	d111      	bne.n	8005d94 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	685a      	ldr	r2, [r3, #4]
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005d7e:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2222      	movs	r2, #34	@ 0x22
 8005d84:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2228      	movs	r2, #40	@ 0x28
 8005d8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005d8e:	6878      	ldr	r0, [r7, #4]
 8005d90:	f7ff f97a 	bl	8005088 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005d94:	bf00      	nop
 8005d96:	3710      	adds	r7, #16
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	bd80      	pop	{r7, pc}

08005d9c <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005d9c:	b480      	push	{r7}
 8005d9e:	b083      	sub	sp, #12
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005da8:	b29b      	uxth	r3, r3
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d012      	beq.n	8005dd4 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	691a      	ldr	r2, [r3, #16]
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005db8:	b2d2      	uxtb	r2, r2
 8005dba:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dc0:	1c5a      	adds	r2, r3, #1
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005dca:	b29b      	uxth	r3, r3
 8005dcc:	3b01      	subs	r3, #1
 8005dce:	b29a      	uxth	r2, r3
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8005dd4:	bf00      	nop
 8005dd6:	370c      	adds	r7, #12
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	bc80      	pop	{r7}
 8005ddc:	4770      	bx	lr

08005dde <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8005dde:	b580      	push	{r7, lr}
 8005de0:	b084      	sub	sp, #16
 8005de2:	af00      	add	r7, sp, #0
 8005de4:	6078      	str	r0, [r7, #4]
 8005de6:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8005de8:	2300      	movs	r3, #0
 8005dea:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005df2:	b2db      	uxtb	r3, r3
 8005df4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005df8:	2b28      	cmp	r3, #40	@ 0x28
 8005dfa:	d125      	bne.n	8005e48 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	685a      	ldr	r2, [r3, #4]
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005e0a:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	f003 0304 	and.w	r3, r3, #4
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d101      	bne.n	8005e1a <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8005e16:	2301      	movs	r3, #1
 8005e18:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d103      	bne.n	8005e2c <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	68db      	ldr	r3, [r3, #12]
 8005e28:	81bb      	strh	r3, [r7, #12]
 8005e2a:	e002      	b.n	8005e32 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	699b      	ldr	r3, [r3, #24]
 8005e30:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2200      	movs	r2, #0
 8005e36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8005e3a:	89ba      	ldrh	r2, [r7, #12]
 8005e3c:	7bfb      	ldrb	r3, [r7, #15]
 8005e3e:	4619      	mov	r1, r3
 8005e40:	6878      	ldr	r0, [r7, #4]
 8005e42:	f7ff f92a 	bl	800509a <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005e46:	e00e      	b.n	8005e66 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e48:	2300      	movs	r3, #0
 8005e4a:	60bb      	str	r3, [r7, #8]
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	695b      	ldr	r3, [r3, #20]
 8005e52:	60bb      	str	r3, [r7, #8]
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	699b      	ldr	r3, [r3, #24]
 8005e5a:	60bb      	str	r3, [r7, #8]
 8005e5c:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2200      	movs	r2, #0
 8005e62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8005e66:	bf00      	nop
 8005e68:	3710      	adds	r7, #16
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bd80      	pop	{r7, pc}
	...

08005e70 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b084      	sub	sp, #16
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e7e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	685a      	ldr	r2, [r3, #4]
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005e8e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8005e90:	2300      	movs	r3, #0
 8005e92:	60bb      	str	r3, [r7, #8]
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	695b      	ldr	r3, [r3, #20]
 8005e9a:	60bb      	str	r3, [r7, #8]
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	681a      	ldr	r2, [r3, #0]
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f042 0201 	orr.w	r2, r2, #1
 8005eaa:	601a      	str	r2, [r3, #0]
 8005eac:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	681a      	ldr	r2, [r3, #0]
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005ebc:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	685b      	ldr	r3, [r3, #4]
 8005ec4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005ec8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005ecc:	d172      	bne.n	8005fb4 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005ece:	7bfb      	ldrb	r3, [r7, #15]
 8005ed0:	2b22      	cmp	r3, #34	@ 0x22
 8005ed2:	d002      	beq.n	8005eda <I2C_Slave_STOPF+0x6a>
 8005ed4:	7bfb      	ldrb	r3, [r7, #15]
 8005ed6:	2b2a      	cmp	r3, #42	@ 0x2a
 8005ed8:	d135      	bne.n	8005f46 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	685b      	ldr	r3, [r3, #4]
 8005ee2:	b29a      	uxth	r2, r3
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005eec:	b29b      	uxth	r3, r3
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d005      	beq.n	8005efe <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ef6:	f043 0204 	orr.w	r2, r3, #4
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	685a      	ldr	r2, [r3, #4]
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005f0c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f12:	4618      	mov	r0, r3
 8005f14:	f7fd ffaa 	bl	8003e6c <HAL_DMA_GetState>
 8005f18:	4603      	mov	r3, r0
 8005f1a:	2b01      	cmp	r3, #1
 8005f1c:	d049      	beq.n	8005fb2 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f22:	4a69      	ldr	r2, [pc, #420]	@ (80060c8 <I2C_Slave_STOPF+0x258>)
 8005f24:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	f7fd fe20 	bl	8003b70 <HAL_DMA_Abort_IT>
 8005f30:	4603      	mov	r3, r0
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d03d      	beq.n	8005fb2 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f3c:	687a      	ldr	r2, [r7, #4]
 8005f3e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005f40:	4610      	mov	r0, r2
 8005f42:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005f44:	e035      	b.n	8005fb2 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	685b      	ldr	r3, [r3, #4]
 8005f4e:	b29a      	uxth	r2, r3
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f58:	b29b      	uxth	r3, r3
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d005      	beq.n	8005f6a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f62:	f043 0204 	orr.w	r2, r3, #4
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	685a      	ldr	r2, [r3, #4]
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005f78:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f7e:	4618      	mov	r0, r3
 8005f80:	f7fd ff74 	bl	8003e6c <HAL_DMA_GetState>
 8005f84:	4603      	mov	r3, r0
 8005f86:	2b01      	cmp	r3, #1
 8005f88:	d014      	beq.n	8005fb4 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f8e:	4a4e      	ldr	r2, [pc, #312]	@ (80060c8 <I2C_Slave_STOPF+0x258>)
 8005f90:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f96:	4618      	mov	r0, r3
 8005f98:	f7fd fdea 	bl	8003b70 <HAL_DMA_Abort_IT>
 8005f9c:	4603      	mov	r3, r0
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d008      	beq.n	8005fb4 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005fa6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005fa8:	687a      	ldr	r2, [r7, #4]
 8005faa:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005fac:	4610      	mov	r0, r2
 8005fae:	4798      	blx	r3
 8005fb0:	e000      	b.n	8005fb4 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005fb2:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005fb8:	b29b      	uxth	r3, r3
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d03e      	beq.n	800603c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	695b      	ldr	r3, [r3, #20]
 8005fc4:	f003 0304 	and.w	r3, r3, #4
 8005fc8:	2b04      	cmp	r3, #4
 8005fca:	d112      	bne.n	8005ff2 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	691a      	ldr	r2, [r3, #16]
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fd6:	b2d2      	uxtb	r2, r2
 8005fd8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fde:	1c5a      	adds	r2, r3, #1
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005fe8:	b29b      	uxth	r3, r3
 8005fea:	3b01      	subs	r3, #1
 8005fec:	b29a      	uxth	r2, r3
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	695b      	ldr	r3, [r3, #20]
 8005ff8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ffc:	2b40      	cmp	r3, #64	@ 0x40
 8005ffe:	d112      	bne.n	8006026 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	691a      	ldr	r2, [r3, #16]
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800600a:	b2d2      	uxtb	r2, r2
 800600c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006012:	1c5a      	adds	r2, r3, #1
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800601c:	b29b      	uxth	r3, r3
 800601e:	3b01      	subs	r3, #1
 8006020:	b29a      	uxth	r2, r3
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800602a:	b29b      	uxth	r3, r3
 800602c:	2b00      	cmp	r3, #0
 800602e:	d005      	beq.n	800603c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006034:	f043 0204 	orr.w	r2, r3, #4
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006040:	2b00      	cmp	r3, #0
 8006042:	d003      	beq.n	800604c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8006044:	6878      	ldr	r0, [r7, #4]
 8006046:	f000 f843 	bl	80060d0 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800604a:	e039      	b.n	80060c0 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800604c:	7bfb      	ldrb	r3, [r7, #15]
 800604e:	2b2a      	cmp	r3, #42	@ 0x2a
 8006050:	d109      	bne.n	8006066 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	2200      	movs	r2, #0
 8006056:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2228      	movs	r2, #40	@ 0x28
 800605c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006060:	6878      	ldr	r0, [r7, #4]
 8006062:	f7ff f811 	bl	8005088 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800606c:	b2db      	uxtb	r3, r3
 800606e:	2b28      	cmp	r3, #40	@ 0x28
 8006070:	d111      	bne.n	8006096 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	4a15      	ldr	r2, [pc, #84]	@ (80060cc <I2C_Slave_STOPF+0x25c>)
 8006076:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2200      	movs	r2, #0
 800607c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2220      	movs	r2, #32
 8006082:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2200      	movs	r2, #0
 800608a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800608e:	6878      	ldr	r0, [r7, #4]
 8006090:	f7ff f810 	bl	80050b4 <HAL_I2C_ListenCpltCallback>
}
 8006094:	e014      	b.n	80060c0 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800609a:	2b22      	cmp	r3, #34	@ 0x22
 800609c:	d002      	beq.n	80060a4 <I2C_Slave_STOPF+0x234>
 800609e:	7bfb      	ldrb	r3, [r7, #15]
 80060a0:	2b22      	cmp	r3, #34	@ 0x22
 80060a2:	d10d      	bne.n	80060c0 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2200      	movs	r2, #0
 80060a8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2220      	movs	r2, #32
 80060ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	2200      	movs	r2, #0
 80060b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80060ba:	6878      	ldr	r0, [r7, #4]
 80060bc:	f7fe ffe4 	bl	8005088 <HAL_I2C_SlaveRxCpltCallback>
}
 80060c0:	bf00      	nop
 80060c2:	3710      	adds	r7, #16
 80060c4:	46bd      	mov	sp, r7
 80060c6:	bd80      	pop	{r7, pc}
 80060c8:	08006735 	.word	0x08006735
 80060cc:	ffff0000 	.word	0xffff0000

080060d0 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b084      	sub	sp, #16
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80060de:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80060e6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80060e8:	7bbb      	ldrb	r3, [r7, #14]
 80060ea:	2b10      	cmp	r3, #16
 80060ec:	d002      	beq.n	80060f4 <I2C_ITError+0x24>
 80060ee:	7bbb      	ldrb	r3, [r7, #14]
 80060f0:	2b40      	cmp	r3, #64	@ 0x40
 80060f2:	d10a      	bne.n	800610a <I2C_ITError+0x3a>
 80060f4:	7bfb      	ldrb	r3, [r7, #15]
 80060f6:	2b22      	cmp	r3, #34	@ 0x22
 80060f8:	d107      	bne.n	800610a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	681a      	ldr	r2, [r3, #0]
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006108:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800610a:	7bfb      	ldrb	r3, [r7, #15]
 800610c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006110:	2b28      	cmp	r3, #40	@ 0x28
 8006112:	d107      	bne.n	8006124 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2200      	movs	r2, #0
 8006118:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	2228      	movs	r2, #40	@ 0x28
 800611e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8006122:	e015      	b.n	8006150 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	685b      	ldr	r3, [r3, #4]
 800612a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800612e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006132:	d00a      	beq.n	800614a <I2C_ITError+0x7a>
 8006134:	7bfb      	ldrb	r3, [r7, #15]
 8006136:	2b60      	cmp	r3, #96	@ 0x60
 8006138:	d007      	beq.n	800614a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2220      	movs	r2, #32
 800613e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2200      	movs	r2, #0
 8006146:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	2200      	movs	r2, #0
 800614e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	685b      	ldr	r3, [r3, #4]
 8006156:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800615a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800615e:	d162      	bne.n	8006226 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	685a      	ldr	r2, [r3, #4]
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800616e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006174:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8006178:	b2db      	uxtb	r3, r3
 800617a:	2b01      	cmp	r3, #1
 800617c:	d020      	beq.n	80061c0 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006182:	4a6a      	ldr	r2, [pc, #424]	@ (800632c <I2C_ITError+0x25c>)
 8006184:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800618a:	4618      	mov	r0, r3
 800618c:	f7fd fcf0 	bl	8003b70 <HAL_DMA_Abort_IT>
 8006190:	4603      	mov	r3, r0
 8006192:	2b00      	cmp	r3, #0
 8006194:	f000 8089 	beq.w	80062aa <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	681a      	ldr	r2, [r3, #0]
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f022 0201 	bic.w	r2, r2, #1
 80061a6:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2220      	movs	r2, #32
 80061ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80061b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80061b6:	687a      	ldr	r2, [r7, #4]
 80061b8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80061ba:	4610      	mov	r0, r2
 80061bc:	4798      	blx	r3
 80061be:	e074      	b.n	80062aa <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061c4:	4a59      	ldr	r2, [pc, #356]	@ (800632c <I2C_ITError+0x25c>)
 80061c6:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061cc:	4618      	mov	r0, r3
 80061ce:	f7fd fccf 	bl	8003b70 <HAL_DMA_Abort_IT>
 80061d2:	4603      	mov	r3, r0
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d068      	beq.n	80062aa <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	695b      	ldr	r3, [r3, #20]
 80061de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061e2:	2b40      	cmp	r3, #64	@ 0x40
 80061e4:	d10b      	bne.n	80061fe <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	691a      	ldr	r2, [r3, #16]
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061f0:	b2d2      	uxtb	r2, r2
 80061f2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061f8:	1c5a      	adds	r2, r3, #1
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	681a      	ldr	r2, [r3, #0]
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f022 0201 	bic.w	r2, r2, #1
 800620c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2220      	movs	r2, #32
 8006212:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800621a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800621c:	687a      	ldr	r2, [r7, #4]
 800621e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006220:	4610      	mov	r0, r2
 8006222:	4798      	blx	r3
 8006224:	e041      	b.n	80062aa <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800622c:	b2db      	uxtb	r3, r3
 800622e:	2b60      	cmp	r3, #96	@ 0x60
 8006230:	d125      	bne.n	800627e <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2220      	movs	r2, #32
 8006236:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2200      	movs	r2, #0
 800623e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	695b      	ldr	r3, [r3, #20]
 8006246:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800624a:	2b40      	cmp	r3, #64	@ 0x40
 800624c:	d10b      	bne.n	8006266 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	691a      	ldr	r2, [r3, #16]
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006258:	b2d2      	uxtb	r2, r2
 800625a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006260:	1c5a      	adds	r2, r3, #1
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	681a      	ldr	r2, [r3, #0]
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f022 0201 	bic.w	r2, r2, #1
 8006274:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006276:	6878      	ldr	r0, [r7, #4]
 8006278:	f7fe ff40 	bl	80050fc <HAL_I2C_AbortCpltCallback>
 800627c:	e015      	b.n	80062aa <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	695b      	ldr	r3, [r3, #20]
 8006284:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006288:	2b40      	cmp	r3, #64	@ 0x40
 800628a:	d10b      	bne.n	80062a4 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	691a      	ldr	r2, [r3, #16]
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006296:	b2d2      	uxtb	r2, r2
 8006298:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800629e:	1c5a      	adds	r2, r3, #1
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80062a4:	6878      	ldr	r0, [r7, #4]
 80062a6:	f7fe ff20 	bl	80050ea <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062ae:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80062b0:	68bb      	ldr	r3, [r7, #8]
 80062b2:	f003 0301 	and.w	r3, r3, #1
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d10e      	bne.n	80062d8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80062ba:	68bb      	ldr	r3, [r7, #8]
 80062bc:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d109      	bne.n	80062d8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80062c4:	68bb      	ldr	r3, [r7, #8]
 80062c6:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d104      	bne.n	80062d8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80062ce:	68bb      	ldr	r3, [r7, #8]
 80062d0:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d007      	beq.n	80062e8 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	685a      	ldr	r2, [r3, #4]
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80062e6:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80062ee:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062f4:	f003 0304 	and.w	r3, r3, #4
 80062f8:	2b04      	cmp	r3, #4
 80062fa:	d113      	bne.n	8006324 <I2C_ITError+0x254>
 80062fc:	7bfb      	ldrb	r3, [r7, #15]
 80062fe:	2b28      	cmp	r3, #40	@ 0x28
 8006300:	d110      	bne.n	8006324 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	4a0a      	ldr	r2, [pc, #40]	@ (8006330 <I2C_ITError+0x260>)
 8006306:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2200      	movs	r2, #0
 800630c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2220      	movs	r2, #32
 8006312:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2200      	movs	r2, #0
 800631a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800631e:	6878      	ldr	r0, [r7, #4]
 8006320:	f7fe fec8 	bl	80050b4 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006324:	bf00      	nop
 8006326:	3710      	adds	r7, #16
 8006328:	46bd      	mov	sp, r7
 800632a:	bd80      	pop	{r7, pc}
 800632c:	08006735 	.word	0x08006735
 8006330:	ffff0000 	.word	0xffff0000

08006334 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006334:	b580      	push	{r7, lr}
 8006336:	b088      	sub	sp, #32
 8006338:	af02      	add	r7, sp, #8
 800633a:	60f8      	str	r0, [r7, #12]
 800633c:	607a      	str	r2, [r7, #4]
 800633e:	603b      	str	r3, [r7, #0]
 8006340:	460b      	mov	r3, r1
 8006342:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006348:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800634a:	697b      	ldr	r3, [r7, #20]
 800634c:	2b08      	cmp	r3, #8
 800634e:	d006      	beq.n	800635e <I2C_MasterRequestWrite+0x2a>
 8006350:	697b      	ldr	r3, [r7, #20]
 8006352:	2b01      	cmp	r3, #1
 8006354:	d003      	beq.n	800635e <I2C_MasterRequestWrite+0x2a>
 8006356:	697b      	ldr	r3, [r7, #20]
 8006358:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800635c:	d108      	bne.n	8006370 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	681a      	ldr	r2, [r3, #0]
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800636c:	601a      	str	r2, [r3, #0]
 800636e:	e00b      	b.n	8006388 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006374:	2b12      	cmp	r3, #18
 8006376:	d107      	bne.n	8006388 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	681a      	ldr	r2, [r3, #0]
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006386:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	9300      	str	r3, [sp, #0]
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2200      	movs	r2, #0
 8006390:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006394:	68f8      	ldr	r0, [r7, #12]
 8006396:	f000 fa75 	bl	8006884 <I2C_WaitOnFlagUntilTimeout>
 800639a:	4603      	mov	r3, r0
 800639c:	2b00      	cmp	r3, #0
 800639e:	d00d      	beq.n	80063bc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80063aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80063ae:	d103      	bne.n	80063b8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80063b6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80063b8:	2303      	movs	r3, #3
 80063ba:	e035      	b.n	8006428 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	691b      	ldr	r3, [r3, #16]
 80063c0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80063c4:	d108      	bne.n	80063d8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80063c6:	897b      	ldrh	r3, [r7, #10]
 80063c8:	b2db      	uxtb	r3, r3
 80063ca:	461a      	mov	r2, r3
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80063d4:	611a      	str	r2, [r3, #16]
 80063d6:	e01b      	b.n	8006410 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80063d8:	897b      	ldrh	r3, [r7, #10]
 80063da:	11db      	asrs	r3, r3, #7
 80063dc:	b2db      	uxtb	r3, r3
 80063de:	f003 0306 	and.w	r3, r3, #6
 80063e2:	b2db      	uxtb	r3, r3
 80063e4:	f063 030f 	orn	r3, r3, #15
 80063e8:	b2da      	uxtb	r2, r3
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	687a      	ldr	r2, [r7, #4]
 80063f4:	490e      	ldr	r1, [pc, #56]	@ (8006430 <I2C_MasterRequestWrite+0xfc>)
 80063f6:	68f8      	ldr	r0, [r7, #12]
 80063f8:	f000 fabe 	bl	8006978 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80063fc:	4603      	mov	r3, r0
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d001      	beq.n	8006406 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8006402:	2301      	movs	r3, #1
 8006404:	e010      	b.n	8006428 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006406:	897b      	ldrh	r3, [r7, #10]
 8006408:	b2da      	uxtb	r2, r3
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	687a      	ldr	r2, [r7, #4]
 8006414:	4907      	ldr	r1, [pc, #28]	@ (8006434 <I2C_MasterRequestWrite+0x100>)
 8006416:	68f8      	ldr	r0, [r7, #12]
 8006418:	f000 faae 	bl	8006978 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800641c:	4603      	mov	r3, r0
 800641e:	2b00      	cmp	r3, #0
 8006420:	d001      	beq.n	8006426 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8006422:	2301      	movs	r3, #1
 8006424:	e000      	b.n	8006428 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8006426:	2300      	movs	r3, #0
}
 8006428:	4618      	mov	r0, r3
 800642a:	3718      	adds	r7, #24
 800642c:	46bd      	mov	sp, r7
 800642e:	bd80      	pop	{r7, pc}
 8006430:	00010008 	.word	0x00010008
 8006434:	00010002 	.word	0x00010002

08006438 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b088      	sub	sp, #32
 800643c:	af02      	add	r7, sp, #8
 800643e:	60f8      	str	r0, [r7, #12]
 8006440:	4608      	mov	r0, r1
 8006442:	4611      	mov	r1, r2
 8006444:	461a      	mov	r2, r3
 8006446:	4603      	mov	r3, r0
 8006448:	817b      	strh	r3, [r7, #10]
 800644a:	460b      	mov	r3, r1
 800644c:	813b      	strh	r3, [r7, #8]
 800644e:	4613      	mov	r3, r2
 8006450:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	681a      	ldr	r2, [r3, #0]
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006460:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006462:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006464:	9300      	str	r3, [sp, #0]
 8006466:	6a3b      	ldr	r3, [r7, #32]
 8006468:	2200      	movs	r2, #0
 800646a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800646e:	68f8      	ldr	r0, [r7, #12]
 8006470:	f000 fa08 	bl	8006884 <I2C_WaitOnFlagUntilTimeout>
 8006474:	4603      	mov	r3, r0
 8006476:	2b00      	cmp	r3, #0
 8006478:	d00d      	beq.n	8006496 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006484:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006488:	d103      	bne.n	8006492 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006490:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006492:	2303      	movs	r3, #3
 8006494:	e05f      	b.n	8006556 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006496:	897b      	ldrh	r3, [r7, #10]
 8006498:	b2db      	uxtb	r3, r3
 800649a:	461a      	mov	r2, r3
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80064a4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80064a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064a8:	6a3a      	ldr	r2, [r7, #32]
 80064aa:	492d      	ldr	r1, [pc, #180]	@ (8006560 <I2C_RequestMemoryWrite+0x128>)
 80064ac:	68f8      	ldr	r0, [r7, #12]
 80064ae:	f000 fa63 	bl	8006978 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80064b2:	4603      	mov	r3, r0
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d001      	beq.n	80064bc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80064b8:	2301      	movs	r3, #1
 80064ba:	e04c      	b.n	8006556 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80064bc:	2300      	movs	r3, #0
 80064be:	617b      	str	r3, [r7, #20]
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	695b      	ldr	r3, [r3, #20]
 80064c6:	617b      	str	r3, [r7, #20]
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	699b      	ldr	r3, [r3, #24]
 80064ce:	617b      	str	r3, [r7, #20]
 80064d0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80064d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80064d4:	6a39      	ldr	r1, [r7, #32]
 80064d6:	68f8      	ldr	r0, [r7, #12]
 80064d8:	f000 faee 	bl	8006ab8 <I2C_WaitOnTXEFlagUntilTimeout>
 80064dc:	4603      	mov	r3, r0
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d00d      	beq.n	80064fe <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064e6:	2b04      	cmp	r3, #4
 80064e8:	d107      	bne.n	80064fa <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	681a      	ldr	r2, [r3, #0]
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80064f8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80064fa:	2301      	movs	r3, #1
 80064fc:	e02b      	b.n	8006556 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80064fe:	88fb      	ldrh	r3, [r7, #6]
 8006500:	2b01      	cmp	r3, #1
 8006502:	d105      	bne.n	8006510 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006504:	893b      	ldrh	r3, [r7, #8]
 8006506:	b2da      	uxtb	r2, r3
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	611a      	str	r2, [r3, #16]
 800650e:	e021      	b.n	8006554 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006510:	893b      	ldrh	r3, [r7, #8]
 8006512:	0a1b      	lsrs	r3, r3, #8
 8006514:	b29b      	uxth	r3, r3
 8006516:	b2da      	uxtb	r2, r3
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800651e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006520:	6a39      	ldr	r1, [r7, #32]
 8006522:	68f8      	ldr	r0, [r7, #12]
 8006524:	f000 fac8 	bl	8006ab8 <I2C_WaitOnTXEFlagUntilTimeout>
 8006528:	4603      	mov	r3, r0
 800652a:	2b00      	cmp	r3, #0
 800652c:	d00d      	beq.n	800654a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006532:	2b04      	cmp	r3, #4
 8006534:	d107      	bne.n	8006546 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	681a      	ldr	r2, [r3, #0]
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006544:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006546:	2301      	movs	r3, #1
 8006548:	e005      	b.n	8006556 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800654a:	893b      	ldrh	r3, [r7, #8]
 800654c:	b2da      	uxtb	r2, r3
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006554:	2300      	movs	r3, #0
}
 8006556:	4618      	mov	r0, r3
 8006558:	3718      	adds	r7, #24
 800655a:	46bd      	mov	sp, r7
 800655c:	bd80      	pop	{r7, pc}
 800655e:	bf00      	nop
 8006560:	00010002 	.word	0x00010002

08006564 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006564:	b580      	push	{r7, lr}
 8006566:	b088      	sub	sp, #32
 8006568:	af02      	add	r7, sp, #8
 800656a:	60f8      	str	r0, [r7, #12]
 800656c:	4608      	mov	r0, r1
 800656e:	4611      	mov	r1, r2
 8006570:	461a      	mov	r2, r3
 8006572:	4603      	mov	r3, r0
 8006574:	817b      	strh	r3, [r7, #10]
 8006576:	460b      	mov	r3, r1
 8006578:	813b      	strh	r3, [r7, #8]
 800657a:	4613      	mov	r3, r2
 800657c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	681a      	ldr	r2, [r3, #0]
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800658c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	681a      	ldr	r2, [r3, #0]
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800659c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800659e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065a0:	9300      	str	r3, [sp, #0]
 80065a2:	6a3b      	ldr	r3, [r7, #32]
 80065a4:	2200      	movs	r2, #0
 80065a6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80065aa:	68f8      	ldr	r0, [r7, #12]
 80065ac:	f000 f96a 	bl	8006884 <I2C_WaitOnFlagUntilTimeout>
 80065b0:	4603      	mov	r3, r0
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d00d      	beq.n	80065d2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80065c0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80065c4:	d103      	bne.n	80065ce <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80065cc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80065ce:	2303      	movs	r3, #3
 80065d0:	e0aa      	b.n	8006728 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80065d2:	897b      	ldrh	r3, [r7, #10]
 80065d4:	b2db      	uxtb	r3, r3
 80065d6:	461a      	mov	r2, r3
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80065e0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80065e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065e4:	6a3a      	ldr	r2, [r7, #32]
 80065e6:	4952      	ldr	r1, [pc, #328]	@ (8006730 <I2C_RequestMemoryRead+0x1cc>)
 80065e8:	68f8      	ldr	r0, [r7, #12]
 80065ea:	f000 f9c5 	bl	8006978 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80065ee:	4603      	mov	r3, r0
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d001      	beq.n	80065f8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80065f4:	2301      	movs	r3, #1
 80065f6:	e097      	b.n	8006728 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80065f8:	2300      	movs	r3, #0
 80065fa:	617b      	str	r3, [r7, #20]
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	695b      	ldr	r3, [r3, #20]
 8006602:	617b      	str	r3, [r7, #20]
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	699b      	ldr	r3, [r3, #24]
 800660a:	617b      	str	r3, [r7, #20]
 800660c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800660e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006610:	6a39      	ldr	r1, [r7, #32]
 8006612:	68f8      	ldr	r0, [r7, #12]
 8006614:	f000 fa50 	bl	8006ab8 <I2C_WaitOnTXEFlagUntilTimeout>
 8006618:	4603      	mov	r3, r0
 800661a:	2b00      	cmp	r3, #0
 800661c:	d00d      	beq.n	800663a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006622:	2b04      	cmp	r3, #4
 8006624:	d107      	bne.n	8006636 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	681a      	ldr	r2, [r3, #0]
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006634:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006636:	2301      	movs	r3, #1
 8006638:	e076      	b.n	8006728 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800663a:	88fb      	ldrh	r3, [r7, #6]
 800663c:	2b01      	cmp	r3, #1
 800663e:	d105      	bne.n	800664c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006640:	893b      	ldrh	r3, [r7, #8]
 8006642:	b2da      	uxtb	r2, r3
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	611a      	str	r2, [r3, #16]
 800664a:	e021      	b.n	8006690 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800664c:	893b      	ldrh	r3, [r7, #8]
 800664e:	0a1b      	lsrs	r3, r3, #8
 8006650:	b29b      	uxth	r3, r3
 8006652:	b2da      	uxtb	r2, r3
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800665a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800665c:	6a39      	ldr	r1, [r7, #32]
 800665e:	68f8      	ldr	r0, [r7, #12]
 8006660:	f000 fa2a 	bl	8006ab8 <I2C_WaitOnTXEFlagUntilTimeout>
 8006664:	4603      	mov	r3, r0
 8006666:	2b00      	cmp	r3, #0
 8006668:	d00d      	beq.n	8006686 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800666e:	2b04      	cmp	r3, #4
 8006670:	d107      	bne.n	8006682 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	681a      	ldr	r2, [r3, #0]
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006680:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006682:	2301      	movs	r3, #1
 8006684:	e050      	b.n	8006728 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006686:	893b      	ldrh	r3, [r7, #8]
 8006688:	b2da      	uxtb	r2, r3
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006690:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006692:	6a39      	ldr	r1, [r7, #32]
 8006694:	68f8      	ldr	r0, [r7, #12]
 8006696:	f000 fa0f 	bl	8006ab8 <I2C_WaitOnTXEFlagUntilTimeout>
 800669a:	4603      	mov	r3, r0
 800669c:	2b00      	cmp	r3, #0
 800669e:	d00d      	beq.n	80066bc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066a4:	2b04      	cmp	r3, #4
 80066a6:	d107      	bne.n	80066b8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	681a      	ldr	r2, [r3, #0]
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80066b6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80066b8:	2301      	movs	r3, #1
 80066ba:	e035      	b.n	8006728 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	681a      	ldr	r2, [r3, #0]
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80066ca:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80066cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066ce:	9300      	str	r3, [sp, #0]
 80066d0:	6a3b      	ldr	r3, [r7, #32]
 80066d2:	2200      	movs	r2, #0
 80066d4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80066d8:	68f8      	ldr	r0, [r7, #12]
 80066da:	f000 f8d3 	bl	8006884 <I2C_WaitOnFlagUntilTimeout>
 80066de:	4603      	mov	r3, r0
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d00d      	beq.n	8006700 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80066ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80066f2:	d103      	bne.n	80066fc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80066fa:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80066fc:	2303      	movs	r3, #3
 80066fe:	e013      	b.n	8006728 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006700:	897b      	ldrh	r3, [r7, #10]
 8006702:	b2db      	uxtb	r3, r3
 8006704:	f043 0301 	orr.w	r3, r3, #1
 8006708:	b2da      	uxtb	r2, r3
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006710:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006712:	6a3a      	ldr	r2, [r7, #32]
 8006714:	4906      	ldr	r1, [pc, #24]	@ (8006730 <I2C_RequestMemoryRead+0x1cc>)
 8006716:	68f8      	ldr	r0, [r7, #12]
 8006718:	f000 f92e 	bl	8006978 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800671c:	4603      	mov	r3, r0
 800671e:	2b00      	cmp	r3, #0
 8006720:	d001      	beq.n	8006726 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8006722:	2301      	movs	r3, #1
 8006724:	e000      	b.n	8006728 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8006726:	2300      	movs	r3, #0
}
 8006728:	4618      	mov	r0, r3
 800672a:	3718      	adds	r7, #24
 800672c:	46bd      	mov	sp, r7
 800672e:	bd80      	pop	{r7, pc}
 8006730:	00010002 	.word	0x00010002

08006734 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8006734:	b580      	push	{r7, lr}
 8006736:	b086      	sub	sp, #24
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800673c:	2300      	movs	r3, #0
 800673e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006744:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006746:	697b      	ldr	r3, [r7, #20]
 8006748:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800674c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800674e:	4b4b      	ldr	r3, [pc, #300]	@ (800687c <I2C_DMAAbort+0x148>)
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	08db      	lsrs	r3, r3, #3
 8006754:	4a4a      	ldr	r2, [pc, #296]	@ (8006880 <I2C_DMAAbort+0x14c>)
 8006756:	fba2 2303 	umull	r2, r3, r2, r3
 800675a:	0a1a      	lsrs	r2, r3, #8
 800675c:	4613      	mov	r3, r2
 800675e:	009b      	lsls	r3, r3, #2
 8006760:	4413      	add	r3, r2
 8006762:	00da      	lsls	r2, r3, #3
 8006764:	1ad3      	subs	r3, r2, r3
 8006766:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d106      	bne.n	800677c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800676e:	697b      	ldr	r3, [r7, #20]
 8006770:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006772:	f043 0220 	orr.w	r2, r3, #32
 8006776:	697b      	ldr	r3, [r7, #20]
 8006778:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 800677a:	e00a      	b.n	8006792 <I2C_DMAAbort+0x5e>
    }
    count--;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	3b01      	subs	r3, #1
 8006780:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006782:	697b      	ldr	r3, [r7, #20]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800678c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006790:	d0ea      	beq.n	8006768 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8006792:	697b      	ldr	r3, [r7, #20]
 8006794:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006796:	2b00      	cmp	r3, #0
 8006798:	d003      	beq.n	80067a2 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800679a:	697b      	ldr	r3, [r7, #20]
 800679c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800679e:	2200      	movs	r2, #0
 80067a0:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  if (hi2c->hdmarx != NULL)
 80067a2:	697b      	ldr	r3, [r7, #20]
 80067a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d003      	beq.n	80067b2 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80067aa:	697b      	ldr	r3, [r7, #20]
 80067ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067ae:	2200      	movs	r2, #0
 80067b0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80067b2:	697b      	ldr	r3, [r7, #20]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	681a      	ldr	r2, [r3, #0]
 80067b8:	697b      	ldr	r3, [r7, #20]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80067c0:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80067c2:	697b      	ldr	r3, [r7, #20]
 80067c4:	2200      	movs	r2, #0
 80067c6:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80067c8:	697b      	ldr	r3, [r7, #20]
 80067ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d003      	beq.n	80067d8 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80067d0:	697b      	ldr	r3, [r7, #20]
 80067d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80067d4:	2200      	movs	r2, #0
 80067d6:	635a      	str	r2, [r3, #52]	@ 0x34
  }
  if (hi2c->hdmarx != NULL)
 80067d8:	697b      	ldr	r3, [r7, #20]
 80067da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d003      	beq.n	80067e8 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80067e0:	697b      	ldr	r3, [r7, #20]
 80067e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067e4:	2200      	movs	r2, #0
 80067e6:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80067e8:	697b      	ldr	r3, [r7, #20]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	681a      	ldr	r2, [r3, #0]
 80067ee:	697b      	ldr	r3, [r7, #20]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f022 0201 	bic.w	r2, r2, #1
 80067f6:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80067f8:	697b      	ldr	r3, [r7, #20]
 80067fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80067fe:	b2db      	uxtb	r3, r3
 8006800:	2b60      	cmp	r3, #96	@ 0x60
 8006802:	d10e      	bne.n	8006822 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8006804:	697b      	ldr	r3, [r7, #20]
 8006806:	2220      	movs	r2, #32
 8006808:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800680c:	697b      	ldr	r3, [r7, #20]
 800680e:	2200      	movs	r2, #0
 8006810:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8006814:	697b      	ldr	r3, [r7, #20]
 8006816:	2200      	movs	r2, #0
 8006818:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800681a:	6978      	ldr	r0, [r7, #20]
 800681c:	f7fe fc6e 	bl	80050fc <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006820:	e027      	b.n	8006872 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006822:	7cfb      	ldrb	r3, [r7, #19]
 8006824:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006828:	2b28      	cmp	r3, #40	@ 0x28
 800682a:	d117      	bne.n	800685c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800682c:	697b      	ldr	r3, [r7, #20]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	681a      	ldr	r2, [r3, #0]
 8006832:	697b      	ldr	r3, [r7, #20]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f042 0201 	orr.w	r2, r2, #1
 800683a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800683c:	697b      	ldr	r3, [r7, #20]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	681a      	ldr	r2, [r3, #0]
 8006842:	697b      	ldr	r3, [r7, #20]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800684a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800684c:	697b      	ldr	r3, [r7, #20]
 800684e:	2200      	movs	r2, #0
 8006850:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006852:	697b      	ldr	r3, [r7, #20]
 8006854:	2228      	movs	r2, #40	@ 0x28
 8006856:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800685a:	e007      	b.n	800686c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800685c:	697b      	ldr	r3, [r7, #20]
 800685e:	2220      	movs	r2, #32
 8006860:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006864:	697b      	ldr	r3, [r7, #20]
 8006866:	2200      	movs	r2, #0
 8006868:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800686c:	6978      	ldr	r0, [r7, #20]
 800686e:	f7fe fc3c 	bl	80050ea <HAL_I2C_ErrorCallback>
}
 8006872:	bf00      	nop
 8006874:	3718      	adds	r7, #24
 8006876:	46bd      	mov	sp, r7
 8006878:	bd80      	pop	{r7, pc}
 800687a:	bf00      	nop
 800687c:	20000018 	.word	0x20000018
 8006880:	14f8b589 	.word	0x14f8b589

08006884 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006884:	b580      	push	{r7, lr}
 8006886:	b084      	sub	sp, #16
 8006888:	af00      	add	r7, sp, #0
 800688a:	60f8      	str	r0, [r7, #12]
 800688c:	60b9      	str	r1, [r7, #8]
 800688e:	603b      	str	r3, [r7, #0]
 8006890:	4613      	mov	r3, r2
 8006892:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006894:	e048      	b.n	8006928 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	f1b3 3fff 	cmp.w	r3, #4294967295
 800689c:	d044      	beq.n	8006928 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800689e:	f7fc faf7 	bl	8002e90 <HAL_GetTick>
 80068a2:	4602      	mov	r2, r0
 80068a4:	69bb      	ldr	r3, [r7, #24]
 80068a6:	1ad3      	subs	r3, r2, r3
 80068a8:	683a      	ldr	r2, [r7, #0]
 80068aa:	429a      	cmp	r2, r3
 80068ac:	d302      	bcc.n	80068b4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d139      	bne.n	8006928 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80068b4:	68bb      	ldr	r3, [r7, #8]
 80068b6:	0c1b      	lsrs	r3, r3, #16
 80068b8:	b2db      	uxtb	r3, r3
 80068ba:	2b01      	cmp	r3, #1
 80068bc:	d10d      	bne.n	80068da <I2C_WaitOnFlagUntilTimeout+0x56>
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	695b      	ldr	r3, [r3, #20]
 80068c4:	43da      	mvns	r2, r3
 80068c6:	68bb      	ldr	r3, [r7, #8]
 80068c8:	4013      	ands	r3, r2
 80068ca:	b29b      	uxth	r3, r3
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	bf0c      	ite	eq
 80068d0:	2301      	moveq	r3, #1
 80068d2:	2300      	movne	r3, #0
 80068d4:	b2db      	uxtb	r3, r3
 80068d6:	461a      	mov	r2, r3
 80068d8:	e00c      	b.n	80068f4 <I2C_WaitOnFlagUntilTimeout+0x70>
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	699b      	ldr	r3, [r3, #24]
 80068e0:	43da      	mvns	r2, r3
 80068e2:	68bb      	ldr	r3, [r7, #8]
 80068e4:	4013      	ands	r3, r2
 80068e6:	b29b      	uxth	r3, r3
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	bf0c      	ite	eq
 80068ec:	2301      	moveq	r3, #1
 80068ee:	2300      	movne	r3, #0
 80068f0:	b2db      	uxtb	r3, r3
 80068f2:	461a      	mov	r2, r3
 80068f4:	79fb      	ldrb	r3, [r7, #7]
 80068f6:	429a      	cmp	r2, r3
 80068f8:	d116      	bne.n	8006928 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	2200      	movs	r2, #0
 80068fe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	2220      	movs	r2, #32
 8006904:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	2200      	movs	r2, #0
 800690c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006914:	f043 0220 	orr.w	r2, r3, #32
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	2200      	movs	r2, #0
 8006920:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006924:	2301      	movs	r3, #1
 8006926:	e023      	b.n	8006970 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006928:	68bb      	ldr	r3, [r7, #8]
 800692a:	0c1b      	lsrs	r3, r3, #16
 800692c:	b2db      	uxtb	r3, r3
 800692e:	2b01      	cmp	r3, #1
 8006930:	d10d      	bne.n	800694e <I2C_WaitOnFlagUntilTimeout+0xca>
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	695b      	ldr	r3, [r3, #20]
 8006938:	43da      	mvns	r2, r3
 800693a:	68bb      	ldr	r3, [r7, #8]
 800693c:	4013      	ands	r3, r2
 800693e:	b29b      	uxth	r3, r3
 8006940:	2b00      	cmp	r3, #0
 8006942:	bf0c      	ite	eq
 8006944:	2301      	moveq	r3, #1
 8006946:	2300      	movne	r3, #0
 8006948:	b2db      	uxtb	r3, r3
 800694a:	461a      	mov	r2, r3
 800694c:	e00c      	b.n	8006968 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	699b      	ldr	r3, [r3, #24]
 8006954:	43da      	mvns	r2, r3
 8006956:	68bb      	ldr	r3, [r7, #8]
 8006958:	4013      	ands	r3, r2
 800695a:	b29b      	uxth	r3, r3
 800695c:	2b00      	cmp	r3, #0
 800695e:	bf0c      	ite	eq
 8006960:	2301      	moveq	r3, #1
 8006962:	2300      	movne	r3, #0
 8006964:	b2db      	uxtb	r3, r3
 8006966:	461a      	mov	r2, r3
 8006968:	79fb      	ldrb	r3, [r7, #7]
 800696a:	429a      	cmp	r2, r3
 800696c:	d093      	beq.n	8006896 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800696e:	2300      	movs	r3, #0
}
 8006970:	4618      	mov	r0, r3
 8006972:	3710      	adds	r7, #16
 8006974:	46bd      	mov	sp, r7
 8006976:	bd80      	pop	{r7, pc}

08006978 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006978:	b580      	push	{r7, lr}
 800697a:	b084      	sub	sp, #16
 800697c:	af00      	add	r7, sp, #0
 800697e:	60f8      	str	r0, [r7, #12]
 8006980:	60b9      	str	r1, [r7, #8]
 8006982:	607a      	str	r2, [r7, #4]
 8006984:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006986:	e071      	b.n	8006a6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	695b      	ldr	r3, [r3, #20]
 800698e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006992:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006996:	d123      	bne.n	80069e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	681a      	ldr	r2, [r3, #0]
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80069a6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80069b0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	2200      	movs	r2, #0
 80069b6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	2220      	movs	r2, #32
 80069bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	2200      	movs	r2, #0
 80069c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069cc:	f043 0204 	orr.w	r2, r3, #4
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	2200      	movs	r2, #0
 80069d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80069dc:	2301      	movs	r3, #1
 80069de:	e067      	b.n	8006ab0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069e6:	d041      	beq.n	8006a6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80069e8:	f7fc fa52 	bl	8002e90 <HAL_GetTick>
 80069ec:	4602      	mov	r2, r0
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	1ad3      	subs	r3, r2, r3
 80069f2:	687a      	ldr	r2, [r7, #4]
 80069f4:	429a      	cmp	r2, r3
 80069f6:	d302      	bcc.n	80069fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d136      	bne.n	8006a6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80069fe:	68bb      	ldr	r3, [r7, #8]
 8006a00:	0c1b      	lsrs	r3, r3, #16
 8006a02:	b2db      	uxtb	r3, r3
 8006a04:	2b01      	cmp	r3, #1
 8006a06:	d10c      	bne.n	8006a22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	695b      	ldr	r3, [r3, #20]
 8006a0e:	43da      	mvns	r2, r3
 8006a10:	68bb      	ldr	r3, [r7, #8]
 8006a12:	4013      	ands	r3, r2
 8006a14:	b29b      	uxth	r3, r3
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	bf14      	ite	ne
 8006a1a:	2301      	movne	r3, #1
 8006a1c:	2300      	moveq	r3, #0
 8006a1e:	b2db      	uxtb	r3, r3
 8006a20:	e00b      	b.n	8006a3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	699b      	ldr	r3, [r3, #24]
 8006a28:	43da      	mvns	r2, r3
 8006a2a:	68bb      	ldr	r3, [r7, #8]
 8006a2c:	4013      	ands	r3, r2
 8006a2e:	b29b      	uxth	r3, r3
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	bf14      	ite	ne
 8006a34:	2301      	movne	r3, #1
 8006a36:	2300      	moveq	r3, #0
 8006a38:	b2db      	uxtb	r3, r3
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d016      	beq.n	8006a6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	2200      	movs	r2, #0
 8006a42:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	2220      	movs	r2, #32
 8006a48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	2200      	movs	r2, #0
 8006a50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a58:	f043 0220 	orr.w	r2, r3, #32
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	2200      	movs	r2, #0
 8006a64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006a68:	2301      	movs	r3, #1
 8006a6a:	e021      	b.n	8006ab0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006a6c:	68bb      	ldr	r3, [r7, #8]
 8006a6e:	0c1b      	lsrs	r3, r3, #16
 8006a70:	b2db      	uxtb	r3, r3
 8006a72:	2b01      	cmp	r3, #1
 8006a74:	d10c      	bne.n	8006a90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	695b      	ldr	r3, [r3, #20]
 8006a7c:	43da      	mvns	r2, r3
 8006a7e:	68bb      	ldr	r3, [r7, #8]
 8006a80:	4013      	ands	r3, r2
 8006a82:	b29b      	uxth	r3, r3
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	bf14      	ite	ne
 8006a88:	2301      	movne	r3, #1
 8006a8a:	2300      	moveq	r3, #0
 8006a8c:	b2db      	uxtb	r3, r3
 8006a8e:	e00b      	b.n	8006aa8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	699b      	ldr	r3, [r3, #24]
 8006a96:	43da      	mvns	r2, r3
 8006a98:	68bb      	ldr	r3, [r7, #8]
 8006a9a:	4013      	ands	r3, r2
 8006a9c:	b29b      	uxth	r3, r3
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	bf14      	ite	ne
 8006aa2:	2301      	movne	r3, #1
 8006aa4:	2300      	moveq	r3, #0
 8006aa6:	b2db      	uxtb	r3, r3
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	f47f af6d 	bne.w	8006988 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8006aae:	2300      	movs	r3, #0
}
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	3710      	adds	r7, #16
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	bd80      	pop	{r7, pc}

08006ab8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b084      	sub	sp, #16
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	60f8      	str	r0, [r7, #12]
 8006ac0:	60b9      	str	r1, [r7, #8]
 8006ac2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006ac4:	e034      	b.n	8006b30 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006ac6:	68f8      	ldr	r0, [r7, #12]
 8006ac8:	f000 f915 	bl	8006cf6 <I2C_IsAcknowledgeFailed>
 8006acc:	4603      	mov	r3, r0
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d001      	beq.n	8006ad6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006ad2:	2301      	movs	r3, #1
 8006ad4:	e034      	b.n	8006b40 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ad6:	68bb      	ldr	r3, [r7, #8]
 8006ad8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006adc:	d028      	beq.n	8006b30 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ade:	f7fc f9d7 	bl	8002e90 <HAL_GetTick>
 8006ae2:	4602      	mov	r2, r0
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	1ad3      	subs	r3, r2, r3
 8006ae8:	68ba      	ldr	r2, [r7, #8]
 8006aea:	429a      	cmp	r2, r3
 8006aec:	d302      	bcc.n	8006af4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006aee:	68bb      	ldr	r3, [r7, #8]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d11d      	bne.n	8006b30 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	695b      	ldr	r3, [r3, #20]
 8006afa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006afe:	2b80      	cmp	r3, #128	@ 0x80
 8006b00:	d016      	beq.n	8006b30 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	2200      	movs	r2, #0
 8006b06:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	2220      	movs	r2, #32
 8006b0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	2200      	movs	r2, #0
 8006b14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b1c:	f043 0220 	orr.w	r2, r3, #32
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	2200      	movs	r2, #0
 8006b28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006b2c:	2301      	movs	r3, #1
 8006b2e:	e007      	b.n	8006b40 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	695b      	ldr	r3, [r3, #20]
 8006b36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b3a:	2b80      	cmp	r3, #128	@ 0x80
 8006b3c:	d1c3      	bne.n	8006ac6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006b3e:	2300      	movs	r3, #0
}
 8006b40:	4618      	mov	r0, r3
 8006b42:	3710      	adds	r7, #16
 8006b44:	46bd      	mov	sp, r7
 8006b46:	bd80      	pop	{r7, pc}

08006b48 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b084      	sub	sp, #16
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	60f8      	str	r0, [r7, #12]
 8006b50:	60b9      	str	r1, [r7, #8]
 8006b52:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006b54:	e034      	b.n	8006bc0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006b56:	68f8      	ldr	r0, [r7, #12]
 8006b58:	f000 f8cd 	bl	8006cf6 <I2C_IsAcknowledgeFailed>
 8006b5c:	4603      	mov	r3, r0
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d001      	beq.n	8006b66 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006b62:	2301      	movs	r3, #1
 8006b64:	e034      	b.n	8006bd0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b66:	68bb      	ldr	r3, [r7, #8]
 8006b68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b6c:	d028      	beq.n	8006bc0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b6e:	f7fc f98f 	bl	8002e90 <HAL_GetTick>
 8006b72:	4602      	mov	r2, r0
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	1ad3      	subs	r3, r2, r3
 8006b78:	68ba      	ldr	r2, [r7, #8]
 8006b7a:	429a      	cmp	r2, r3
 8006b7c:	d302      	bcc.n	8006b84 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006b7e:	68bb      	ldr	r3, [r7, #8]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d11d      	bne.n	8006bc0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	695b      	ldr	r3, [r3, #20]
 8006b8a:	f003 0304 	and.w	r3, r3, #4
 8006b8e:	2b04      	cmp	r3, #4
 8006b90:	d016      	beq.n	8006bc0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	2200      	movs	r2, #0
 8006b96:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	2220      	movs	r2, #32
 8006b9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bac:	f043 0220 	orr.w	r2, r3, #32
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006bbc:	2301      	movs	r3, #1
 8006bbe:	e007      	b.n	8006bd0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	695b      	ldr	r3, [r3, #20]
 8006bc6:	f003 0304 	and.w	r3, r3, #4
 8006bca:	2b04      	cmp	r3, #4
 8006bcc:	d1c3      	bne.n	8006b56 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006bce:	2300      	movs	r3, #0
}
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	3710      	adds	r7, #16
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	bd80      	pop	{r7, pc}

08006bd8 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8006bd8:	b480      	push	{r7}
 8006bda:	b085      	sub	sp, #20
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006be0:	2300      	movs	r3, #0
 8006be2:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8006be4:	4b13      	ldr	r3, [pc, #76]	@ (8006c34 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	08db      	lsrs	r3, r3, #3
 8006bea:	4a13      	ldr	r2, [pc, #76]	@ (8006c38 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8006bec:	fba2 2303 	umull	r2, r3, r2, r3
 8006bf0:	0a1a      	lsrs	r2, r3, #8
 8006bf2:	4613      	mov	r3, r2
 8006bf4:	009b      	lsls	r3, r3, #2
 8006bf6:	4413      	add	r3, r2
 8006bf8:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	3b01      	subs	r3, #1
 8006bfe:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d107      	bne.n	8006c16 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c0a:	f043 0220 	orr.w	r2, r3, #32
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8006c12:	2301      	movs	r3, #1
 8006c14:	e008      	b.n	8006c28 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006c20:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006c24:	d0e9      	beq.n	8006bfa <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8006c26:	2300      	movs	r3, #0
}
 8006c28:	4618      	mov	r0, r3
 8006c2a:	3714      	adds	r7, #20
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	bc80      	pop	{r7}
 8006c30:	4770      	bx	lr
 8006c32:	bf00      	nop
 8006c34:	20000018 	.word	0x20000018
 8006c38:	14f8b589 	.word	0x14f8b589

08006c3c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	b084      	sub	sp, #16
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	60f8      	str	r0, [r7, #12]
 8006c44:	60b9      	str	r1, [r7, #8]
 8006c46:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006c48:	e049      	b.n	8006cde <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	695b      	ldr	r3, [r3, #20]
 8006c50:	f003 0310 	and.w	r3, r3, #16
 8006c54:	2b10      	cmp	r3, #16
 8006c56:	d119      	bne.n	8006c8c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f06f 0210 	mvn.w	r2, #16
 8006c60:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	2200      	movs	r2, #0
 8006c66:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	2220      	movs	r2, #32
 8006c6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	2200      	movs	r2, #0
 8006c74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	2200      	movs	r2, #0
 8006c84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006c88:	2301      	movs	r3, #1
 8006c8a:	e030      	b.n	8006cee <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c8c:	f7fc f900 	bl	8002e90 <HAL_GetTick>
 8006c90:	4602      	mov	r2, r0
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	1ad3      	subs	r3, r2, r3
 8006c96:	68ba      	ldr	r2, [r7, #8]
 8006c98:	429a      	cmp	r2, r3
 8006c9a:	d302      	bcc.n	8006ca2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006c9c:	68bb      	ldr	r3, [r7, #8]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d11d      	bne.n	8006cde <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	695b      	ldr	r3, [r3, #20]
 8006ca8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006cac:	2b40      	cmp	r3, #64	@ 0x40
 8006cae:	d016      	beq.n	8006cde <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	2220      	movs	r2, #32
 8006cba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cca:	f043 0220 	orr.w	r2, r3, #32
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8006cda:	2301      	movs	r3, #1
 8006cdc:	e007      	b.n	8006cee <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	695b      	ldr	r3, [r3, #20]
 8006ce4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ce8:	2b40      	cmp	r3, #64	@ 0x40
 8006cea:	d1ae      	bne.n	8006c4a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006cec:	2300      	movs	r3, #0
}
 8006cee:	4618      	mov	r0, r3
 8006cf0:	3710      	adds	r7, #16
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	bd80      	pop	{r7, pc}

08006cf6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006cf6:	b480      	push	{r7}
 8006cf8:	b083      	sub	sp, #12
 8006cfa:	af00      	add	r7, sp, #0
 8006cfc:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	695b      	ldr	r3, [r3, #20]
 8006d04:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006d08:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006d0c:	d11b      	bne.n	8006d46 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006d16:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	2220      	movs	r2, #32
 8006d22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	2200      	movs	r2, #0
 8006d2a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d32:	f043 0204 	orr.w	r2, r3, #4
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8006d42:	2301      	movs	r3, #1
 8006d44:	e000      	b.n	8006d48 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006d46:	2300      	movs	r3, #0
}
 8006d48:	4618      	mov	r0, r3
 8006d4a:	370c      	adds	r7, #12
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	bc80      	pop	{r7}
 8006d50:	4770      	bx	lr

08006d52 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8006d52:	b480      	push	{r7}
 8006d54:	b083      	sub	sp, #12
 8006d56:	af00      	add	r7, sp, #0
 8006d58:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d5e:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8006d62:	d103      	bne.n	8006d6c <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2201      	movs	r2, #1
 8006d68:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8006d6a:	e007      	b.n	8006d7c <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d70:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8006d74:	d102      	bne.n	8006d7c <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2208      	movs	r2, #8
 8006d7a:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8006d7c:	bf00      	nop
 8006d7e:	370c      	adds	r7, #12
 8006d80:	46bd      	mov	sp, r7
 8006d82:	bc80      	pop	{r7}
 8006d84:	4770      	bx	lr
	...

08006d88 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b086      	sub	sp, #24
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d101      	bne.n	8006d9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006d96:	2301      	movs	r3, #1
 8006d98:	e272      	b.n	8007280 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	f003 0301 	and.w	r3, r3, #1
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	f000 8087 	beq.w	8006eb6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006da8:	4b92      	ldr	r3, [pc, #584]	@ (8006ff4 <HAL_RCC_OscConfig+0x26c>)
 8006daa:	685b      	ldr	r3, [r3, #4]
 8006dac:	f003 030c 	and.w	r3, r3, #12
 8006db0:	2b04      	cmp	r3, #4
 8006db2:	d00c      	beq.n	8006dce <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006db4:	4b8f      	ldr	r3, [pc, #572]	@ (8006ff4 <HAL_RCC_OscConfig+0x26c>)
 8006db6:	685b      	ldr	r3, [r3, #4]
 8006db8:	f003 030c 	and.w	r3, r3, #12
 8006dbc:	2b08      	cmp	r3, #8
 8006dbe:	d112      	bne.n	8006de6 <HAL_RCC_OscConfig+0x5e>
 8006dc0:	4b8c      	ldr	r3, [pc, #560]	@ (8006ff4 <HAL_RCC_OscConfig+0x26c>)
 8006dc2:	685b      	ldr	r3, [r3, #4]
 8006dc4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006dc8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006dcc:	d10b      	bne.n	8006de6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006dce:	4b89      	ldr	r3, [pc, #548]	@ (8006ff4 <HAL_RCC_OscConfig+0x26c>)
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d06c      	beq.n	8006eb4 <HAL_RCC_OscConfig+0x12c>
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	685b      	ldr	r3, [r3, #4]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d168      	bne.n	8006eb4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006de2:	2301      	movs	r3, #1
 8006de4:	e24c      	b.n	8007280 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	685b      	ldr	r3, [r3, #4]
 8006dea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006dee:	d106      	bne.n	8006dfe <HAL_RCC_OscConfig+0x76>
 8006df0:	4b80      	ldr	r3, [pc, #512]	@ (8006ff4 <HAL_RCC_OscConfig+0x26c>)
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	4a7f      	ldr	r2, [pc, #508]	@ (8006ff4 <HAL_RCC_OscConfig+0x26c>)
 8006df6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006dfa:	6013      	str	r3, [r2, #0]
 8006dfc:	e02e      	b.n	8006e5c <HAL_RCC_OscConfig+0xd4>
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	685b      	ldr	r3, [r3, #4]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d10c      	bne.n	8006e20 <HAL_RCC_OscConfig+0x98>
 8006e06:	4b7b      	ldr	r3, [pc, #492]	@ (8006ff4 <HAL_RCC_OscConfig+0x26c>)
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	4a7a      	ldr	r2, [pc, #488]	@ (8006ff4 <HAL_RCC_OscConfig+0x26c>)
 8006e0c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006e10:	6013      	str	r3, [r2, #0]
 8006e12:	4b78      	ldr	r3, [pc, #480]	@ (8006ff4 <HAL_RCC_OscConfig+0x26c>)
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	4a77      	ldr	r2, [pc, #476]	@ (8006ff4 <HAL_RCC_OscConfig+0x26c>)
 8006e18:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006e1c:	6013      	str	r3, [r2, #0]
 8006e1e:	e01d      	b.n	8006e5c <HAL_RCC_OscConfig+0xd4>
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	685b      	ldr	r3, [r3, #4]
 8006e24:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006e28:	d10c      	bne.n	8006e44 <HAL_RCC_OscConfig+0xbc>
 8006e2a:	4b72      	ldr	r3, [pc, #456]	@ (8006ff4 <HAL_RCC_OscConfig+0x26c>)
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	4a71      	ldr	r2, [pc, #452]	@ (8006ff4 <HAL_RCC_OscConfig+0x26c>)
 8006e30:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006e34:	6013      	str	r3, [r2, #0]
 8006e36:	4b6f      	ldr	r3, [pc, #444]	@ (8006ff4 <HAL_RCC_OscConfig+0x26c>)
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	4a6e      	ldr	r2, [pc, #440]	@ (8006ff4 <HAL_RCC_OscConfig+0x26c>)
 8006e3c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006e40:	6013      	str	r3, [r2, #0]
 8006e42:	e00b      	b.n	8006e5c <HAL_RCC_OscConfig+0xd4>
 8006e44:	4b6b      	ldr	r3, [pc, #428]	@ (8006ff4 <HAL_RCC_OscConfig+0x26c>)
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	4a6a      	ldr	r2, [pc, #424]	@ (8006ff4 <HAL_RCC_OscConfig+0x26c>)
 8006e4a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006e4e:	6013      	str	r3, [r2, #0]
 8006e50:	4b68      	ldr	r3, [pc, #416]	@ (8006ff4 <HAL_RCC_OscConfig+0x26c>)
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	4a67      	ldr	r2, [pc, #412]	@ (8006ff4 <HAL_RCC_OscConfig+0x26c>)
 8006e56:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006e5a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	685b      	ldr	r3, [r3, #4]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d013      	beq.n	8006e8c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e64:	f7fc f814 	bl	8002e90 <HAL_GetTick>
 8006e68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006e6a:	e008      	b.n	8006e7e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006e6c:	f7fc f810 	bl	8002e90 <HAL_GetTick>
 8006e70:	4602      	mov	r2, r0
 8006e72:	693b      	ldr	r3, [r7, #16]
 8006e74:	1ad3      	subs	r3, r2, r3
 8006e76:	2b64      	cmp	r3, #100	@ 0x64
 8006e78:	d901      	bls.n	8006e7e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006e7a:	2303      	movs	r3, #3
 8006e7c:	e200      	b.n	8007280 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006e7e:	4b5d      	ldr	r3, [pc, #372]	@ (8006ff4 <HAL_RCC_OscConfig+0x26c>)
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d0f0      	beq.n	8006e6c <HAL_RCC_OscConfig+0xe4>
 8006e8a:	e014      	b.n	8006eb6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e8c:	f7fc f800 	bl	8002e90 <HAL_GetTick>
 8006e90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006e92:	e008      	b.n	8006ea6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006e94:	f7fb fffc 	bl	8002e90 <HAL_GetTick>
 8006e98:	4602      	mov	r2, r0
 8006e9a:	693b      	ldr	r3, [r7, #16]
 8006e9c:	1ad3      	subs	r3, r2, r3
 8006e9e:	2b64      	cmp	r3, #100	@ 0x64
 8006ea0:	d901      	bls.n	8006ea6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006ea2:	2303      	movs	r3, #3
 8006ea4:	e1ec      	b.n	8007280 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006ea6:	4b53      	ldr	r3, [pc, #332]	@ (8006ff4 <HAL_RCC_OscConfig+0x26c>)
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d1f0      	bne.n	8006e94 <HAL_RCC_OscConfig+0x10c>
 8006eb2:	e000      	b.n	8006eb6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006eb4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	f003 0302 	and.w	r3, r3, #2
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d063      	beq.n	8006f8a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006ec2:	4b4c      	ldr	r3, [pc, #304]	@ (8006ff4 <HAL_RCC_OscConfig+0x26c>)
 8006ec4:	685b      	ldr	r3, [r3, #4]
 8006ec6:	f003 030c 	and.w	r3, r3, #12
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d00b      	beq.n	8006ee6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8006ece:	4b49      	ldr	r3, [pc, #292]	@ (8006ff4 <HAL_RCC_OscConfig+0x26c>)
 8006ed0:	685b      	ldr	r3, [r3, #4]
 8006ed2:	f003 030c 	and.w	r3, r3, #12
 8006ed6:	2b08      	cmp	r3, #8
 8006ed8:	d11c      	bne.n	8006f14 <HAL_RCC_OscConfig+0x18c>
 8006eda:	4b46      	ldr	r3, [pc, #280]	@ (8006ff4 <HAL_RCC_OscConfig+0x26c>)
 8006edc:	685b      	ldr	r3, [r3, #4]
 8006ede:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d116      	bne.n	8006f14 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006ee6:	4b43      	ldr	r3, [pc, #268]	@ (8006ff4 <HAL_RCC_OscConfig+0x26c>)
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	f003 0302 	and.w	r3, r3, #2
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d005      	beq.n	8006efe <HAL_RCC_OscConfig+0x176>
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	691b      	ldr	r3, [r3, #16]
 8006ef6:	2b01      	cmp	r3, #1
 8006ef8:	d001      	beq.n	8006efe <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8006efa:	2301      	movs	r3, #1
 8006efc:	e1c0      	b.n	8007280 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006efe:	4b3d      	ldr	r3, [pc, #244]	@ (8006ff4 <HAL_RCC_OscConfig+0x26c>)
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	695b      	ldr	r3, [r3, #20]
 8006f0a:	00db      	lsls	r3, r3, #3
 8006f0c:	4939      	ldr	r1, [pc, #228]	@ (8006ff4 <HAL_RCC_OscConfig+0x26c>)
 8006f0e:	4313      	orrs	r3, r2
 8006f10:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006f12:	e03a      	b.n	8006f8a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	691b      	ldr	r3, [r3, #16]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d020      	beq.n	8006f5e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006f1c:	4b36      	ldr	r3, [pc, #216]	@ (8006ff8 <HAL_RCC_OscConfig+0x270>)
 8006f1e:	2201      	movs	r2, #1
 8006f20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f22:	f7fb ffb5 	bl	8002e90 <HAL_GetTick>
 8006f26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006f28:	e008      	b.n	8006f3c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006f2a:	f7fb ffb1 	bl	8002e90 <HAL_GetTick>
 8006f2e:	4602      	mov	r2, r0
 8006f30:	693b      	ldr	r3, [r7, #16]
 8006f32:	1ad3      	subs	r3, r2, r3
 8006f34:	2b02      	cmp	r3, #2
 8006f36:	d901      	bls.n	8006f3c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8006f38:	2303      	movs	r3, #3
 8006f3a:	e1a1      	b.n	8007280 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006f3c:	4b2d      	ldr	r3, [pc, #180]	@ (8006ff4 <HAL_RCC_OscConfig+0x26c>)
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f003 0302 	and.w	r3, r3, #2
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d0f0      	beq.n	8006f2a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006f48:	4b2a      	ldr	r3, [pc, #168]	@ (8006ff4 <HAL_RCC_OscConfig+0x26c>)
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	695b      	ldr	r3, [r3, #20]
 8006f54:	00db      	lsls	r3, r3, #3
 8006f56:	4927      	ldr	r1, [pc, #156]	@ (8006ff4 <HAL_RCC_OscConfig+0x26c>)
 8006f58:	4313      	orrs	r3, r2
 8006f5a:	600b      	str	r3, [r1, #0]
 8006f5c:	e015      	b.n	8006f8a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006f5e:	4b26      	ldr	r3, [pc, #152]	@ (8006ff8 <HAL_RCC_OscConfig+0x270>)
 8006f60:	2200      	movs	r2, #0
 8006f62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f64:	f7fb ff94 	bl	8002e90 <HAL_GetTick>
 8006f68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006f6a:	e008      	b.n	8006f7e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006f6c:	f7fb ff90 	bl	8002e90 <HAL_GetTick>
 8006f70:	4602      	mov	r2, r0
 8006f72:	693b      	ldr	r3, [r7, #16]
 8006f74:	1ad3      	subs	r3, r2, r3
 8006f76:	2b02      	cmp	r3, #2
 8006f78:	d901      	bls.n	8006f7e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8006f7a:	2303      	movs	r3, #3
 8006f7c:	e180      	b.n	8007280 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006f7e:	4b1d      	ldr	r3, [pc, #116]	@ (8006ff4 <HAL_RCC_OscConfig+0x26c>)
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	f003 0302 	and.w	r3, r3, #2
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d1f0      	bne.n	8006f6c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f003 0308 	and.w	r3, r3, #8
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d03a      	beq.n	800700c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	699b      	ldr	r3, [r3, #24]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d019      	beq.n	8006fd2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006f9e:	4b17      	ldr	r3, [pc, #92]	@ (8006ffc <HAL_RCC_OscConfig+0x274>)
 8006fa0:	2201      	movs	r2, #1
 8006fa2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006fa4:	f7fb ff74 	bl	8002e90 <HAL_GetTick>
 8006fa8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006faa:	e008      	b.n	8006fbe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006fac:	f7fb ff70 	bl	8002e90 <HAL_GetTick>
 8006fb0:	4602      	mov	r2, r0
 8006fb2:	693b      	ldr	r3, [r7, #16]
 8006fb4:	1ad3      	subs	r3, r2, r3
 8006fb6:	2b02      	cmp	r3, #2
 8006fb8:	d901      	bls.n	8006fbe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8006fba:	2303      	movs	r3, #3
 8006fbc:	e160      	b.n	8007280 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006fbe:	4b0d      	ldr	r3, [pc, #52]	@ (8006ff4 <HAL_RCC_OscConfig+0x26c>)
 8006fc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fc2:	f003 0302 	and.w	r3, r3, #2
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d0f0      	beq.n	8006fac <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8006fca:	2001      	movs	r0, #1
 8006fcc:	f000 face 	bl	800756c <RCC_Delay>
 8006fd0:	e01c      	b.n	800700c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006fd2:	4b0a      	ldr	r3, [pc, #40]	@ (8006ffc <HAL_RCC_OscConfig+0x274>)
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006fd8:	f7fb ff5a 	bl	8002e90 <HAL_GetTick>
 8006fdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006fde:	e00f      	b.n	8007000 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006fe0:	f7fb ff56 	bl	8002e90 <HAL_GetTick>
 8006fe4:	4602      	mov	r2, r0
 8006fe6:	693b      	ldr	r3, [r7, #16]
 8006fe8:	1ad3      	subs	r3, r2, r3
 8006fea:	2b02      	cmp	r3, #2
 8006fec:	d908      	bls.n	8007000 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8006fee:	2303      	movs	r3, #3
 8006ff0:	e146      	b.n	8007280 <HAL_RCC_OscConfig+0x4f8>
 8006ff2:	bf00      	nop
 8006ff4:	40021000 	.word	0x40021000
 8006ff8:	42420000 	.word	0x42420000
 8006ffc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007000:	4b92      	ldr	r3, [pc, #584]	@ (800724c <HAL_RCC_OscConfig+0x4c4>)
 8007002:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007004:	f003 0302 	and.w	r3, r3, #2
 8007008:	2b00      	cmp	r3, #0
 800700a:	d1e9      	bne.n	8006fe0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	f003 0304 	and.w	r3, r3, #4
 8007014:	2b00      	cmp	r3, #0
 8007016:	f000 80a6 	beq.w	8007166 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800701a:	2300      	movs	r3, #0
 800701c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800701e:	4b8b      	ldr	r3, [pc, #556]	@ (800724c <HAL_RCC_OscConfig+0x4c4>)
 8007020:	69db      	ldr	r3, [r3, #28]
 8007022:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007026:	2b00      	cmp	r3, #0
 8007028:	d10d      	bne.n	8007046 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800702a:	4b88      	ldr	r3, [pc, #544]	@ (800724c <HAL_RCC_OscConfig+0x4c4>)
 800702c:	69db      	ldr	r3, [r3, #28]
 800702e:	4a87      	ldr	r2, [pc, #540]	@ (800724c <HAL_RCC_OscConfig+0x4c4>)
 8007030:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007034:	61d3      	str	r3, [r2, #28]
 8007036:	4b85      	ldr	r3, [pc, #532]	@ (800724c <HAL_RCC_OscConfig+0x4c4>)
 8007038:	69db      	ldr	r3, [r3, #28]
 800703a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800703e:	60bb      	str	r3, [r7, #8]
 8007040:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007042:	2301      	movs	r3, #1
 8007044:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007046:	4b82      	ldr	r3, [pc, #520]	@ (8007250 <HAL_RCC_OscConfig+0x4c8>)
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800704e:	2b00      	cmp	r3, #0
 8007050:	d118      	bne.n	8007084 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007052:	4b7f      	ldr	r3, [pc, #508]	@ (8007250 <HAL_RCC_OscConfig+0x4c8>)
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	4a7e      	ldr	r2, [pc, #504]	@ (8007250 <HAL_RCC_OscConfig+0x4c8>)
 8007058:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800705c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800705e:	f7fb ff17 	bl	8002e90 <HAL_GetTick>
 8007062:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007064:	e008      	b.n	8007078 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007066:	f7fb ff13 	bl	8002e90 <HAL_GetTick>
 800706a:	4602      	mov	r2, r0
 800706c:	693b      	ldr	r3, [r7, #16]
 800706e:	1ad3      	subs	r3, r2, r3
 8007070:	2b64      	cmp	r3, #100	@ 0x64
 8007072:	d901      	bls.n	8007078 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8007074:	2303      	movs	r3, #3
 8007076:	e103      	b.n	8007280 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007078:	4b75      	ldr	r3, [pc, #468]	@ (8007250 <HAL_RCC_OscConfig+0x4c8>)
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007080:	2b00      	cmp	r3, #0
 8007082:	d0f0      	beq.n	8007066 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	68db      	ldr	r3, [r3, #12]
 8007088:	2b01      	cmp	r3, #1
 800708a:	d106      	bne.n	800709a <HAL_RCC_OscConfig+0x312>
 800708c:	4b6f      	ldr	r3, [pc, #444]	@ (800724c <HAL_RCC_OscConfig+0x4c4>)
 800708e:	6a1b      	ldr	r3, [r3, #32]
 8007090:	4a6e      	ldr	r2, [pc, #440]	@ (800724c <HAL_RCC_OscConfig+0x4c4>)
 8007092:	f043 0301 	orr.w	r3, r3, #1
 8007096:	6213      	str	r3, [r2, #32]
 8007098:	e02d      	b.n	80070f6 <HAL_RCC_OscConfig+0x36e>
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	68db      	ldr	r3, [r3, #12]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d10c      	bne.n	80070bc <HAL_RCC_OscConfig+0x334>
 80070a2:	4b6a      	ldr	r3, [pc, #424]	@ (800724c <HAL_RCC_OscConfig+0x4c4>)
 80070a4:	6a1b      	ldr	r3, [r3, #32]
 80070a6:	4a69      	ldr	r2, [pc, #420]	@ (800724c <HAL_RCC_OscConfig+0x4c4>)
 80070a8:	f023 0301 	bic.w	r3, r3, #1
 80070ac:	6213      	str	r3, [r2, #32]
 80070ae:	4b67      	ldr	r3, [pc, #412]	@ (800724c <HAL_RCC_OscConfig+0x4c4>)
 80070b0:	6a1b      	ldr	r3, [r3, #32]
 80070b2:	4a66      	ldr	r2, [pc, #408]	@ (800724c <HAL_RCC_OscConfig+0x4c4>)
 80070b4:	f023 0304 	bic.w	r3, r3, #4
 80070b8:	6213      	str	r3, [r2, #32]
 80070ba:	e01c      	b.n	80070f6 <HAL_RCC_OscConfig+0x36e>
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	68db      	ldr	r3, [r3, #12]
 80070c0:	2b05      	cmp	r3, #5
 80070c2:	d10c      	bne.n	80070de <HAL_RCC_OscConfig+0x356>
 80070c4:	4b61      	ldr	r3, [pc, #388]	@ (800724c <HAL_RCC_OscConfig+0x4c4>)
 80070c6:	6a1b      	ldr	r3, [r3, #32]
 80070c8:	4a60      	ldr	r2, [pc, #384]	@ (800724c <HAL_RCC_OscConfig+0x4c4>)
 80070ca:	f043 0304 	orr.w	r3, r3, #4
 80070ce:	6213      	str	r3, [r2, #32]
 80070d0:	4b5e      	ldr	r3, [pc, #376]	@ (800724c <HAL_RCC_OscConfig+0x4c4>)
 80070d2:	6a1b      	ldr	r3, [r3, #32]
 80070d4:	4a5d      	ldr	r2, [pc, #372]	@ (800724c <HAL_RCC_OscConfig+0x4c4>)
 80070d6:	f043 0301 	orr.w	r3, r3, #1
 80070da:	6213      	str	r3, [r2, #32]
 80070dc:	e00b      	b.n	80070f6 <HAL_RCC_OscConfig+0x36e>
 80070de:	4b5b      	ldr	r3, [pc, #364]	@ (800724c <HAL_RCC_OscConfig+0x4c4>)
 80070e0:	6a1b      	ldr	r3, [r3, #32]
 80070e2:	4a5a      	ldr	r2, [pc, #360]	@ (800724c <HAL_RCC_OscConfig+0x4c4>)
 80070e4:	f023 0301 	bic.w	r3, r3, #1
 80070e8:	6213      	str	r3, [r2, #32]
 80070ea:	4b58      	ldr	r3, [pc, #352]	@ (800724c <HAL_RCC_OscConfig+0x4c4>)
 80070ec:	6a1b      	ldr	r3, [r3, #32]
 80070ee:	4a57      	ldr	r2, [pc, #348]	@ (800724c <HAL_RCC_OscConfig+0x4c4>)
 80070f0:	f023 0304 	bic.w	r3, r3, #4
 80070f4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	68db      	ldr	r3, [r3, #12]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d015      	beq.n	800712a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80070fe:	f7fb fec7 	bl	8002e90 <HAL_GetTick>
 8007102:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007104:	e00a      	b.n	800711c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007106:	f7fb fec3 	bl	8002e90 <HAL_GetTick>
 800710a:	4602      	mov	r2, r0
 800710c:	693b      	ldr	r3, [r7, #16]
 800710e:	1ad3      	subs	r3, r2, r3
 8007110:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007114:	4293      	cmp	r3, r2
 8007116:	d901      	bls.n	800711c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8007118:	2303      	movs	r3, #3
 800711a:	e0b1      	b.n	8007280 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800711c:	4b4b      	ldr	r3, [pc, #300]	@ (800724c <HAL_RCC_OscConfig+0x4c4>)
 800711e:	6a1b      	ldr	r3, [r3, #32]
 8007120:	f003 0302 	and.w	r3, r3, #2
 8007124:	2b00      	cmp	r3, #0
 8007126:	d0ee      	beq.n	8007106 <HAL_RCC_OscConfig+0x37e>
 8007128:	e014      	b.n	8007154 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800712a:	f7fb feb1 	bl	8002e90 <HAL_GetTick>
 800712e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007130:	e00a      	b.n	8007148 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007132:	f7fb fead 	bl	8002e90 <HAL_GetTick>
 8007136:	4602      	mov	r2, r0
 8007138:	693b      	ldr	r3, [r7, #16]
 800713a:	1ad3      	subs	r3, r2, r3
 800713c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007140:	4293      	cmp	r3, r2
 8007142:	d901      	bls.n	8007148 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8007144:	2303      	movs	r3, #3
 8007146:	e09b      	b.n	8007280 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007148:	4b40      	ldr	r3, [pc, #256]	@ (800724c <HAL_RCC_OscConfig+0x4c4>)
 800714a:	6a1b      	ldr	r3, [r3, #32]
 800714c:	f003 0302 	and.w	r3, r3, #2
 8007150:	2b00      	cmp	r3, #0
 8007152:	d1ee      	bne.n	8007132 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8007154:	7dfb      	ldrb	r3, [r7, #23]
 8007156:	2b01      	cmp	r3, #1
 8007158:	d105      	bne.n	8007166 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800715a:	4b3c      	ldr	r3, [pc, #240]	@ (800724c <HAL_RCC_OscConfig+0x4c4>)
 800715c:	69db      	ldr	r3, [r3, #28]
 800715e:	4a3b      	ldr	r2, [pc, #236]	@ (800724c <HAL_RCC_OscConfig+0x4c4>)
 8007160:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007164:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	69db      	ldr	r3, [r3, #28]
 800716a:	2b00      	cmp	r3, #0
 800716c:	f000 8087 	beq.w	800727e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007170:	4b36      	ldr	r3, [pc, #216]	@ (800724c <HAL_RCC_OscConfig+0x4c4>)
 8007172:	685b      	ldr	r3, [r3, #4]
 8007174:	f003 030c 	and.w	r3, r3, #12
 8007178:	2b08      	cmp	r3, #8
 800717a:	d061      	beq.n	8007240 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	69db      	ldr	r3, [r3, #28]
 8007180:	2b02      	cmp	r3, #2
 8007182:	d146      	bne.n	8007212 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007184:	4b33      	ldr	r3, [pc, #204]	@ (8007254 <HAL_RCC_OscConfig+0x4cc>)
 8007186:	2200      	movs	r2, #0
 8007188:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800718a:	f7fb fe81 	bl	8002e90 <HAL_GetTick>
 800718e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007190:	e008      	b.n	80071a4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007192:	f7fb fe7d 	bl	8002e90 <HAL_GetTick>
 8007196:	4602      	mov	r2, r0
 8007198:	693b      	ldr	r3, [r7, #16]
 800719a:	1ad3      	subs	r3, r2, r3
 800719c:	2b02      	cmp	r3, #2
 800719e:	d901      	bls.n	80071a4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80071a0:	2303      	movs	r3, #3
 80071a2:	e06d      	b.n	8007280 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80071a4:	4b29      	ldr	r3, [pc, #164]	@ (800724c <HAL_RCC_OscConfig+0x4c4>)
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d1f0      	bne.n	8007192 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	6a1b      	ldr	r3, [r3, #32]
 80071b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80071b8:	d108      	bne.n	80071cc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80071ba:	4b24      	ldr	r3, [pc, #144]	@ (800724c <HAL_RCC_OscConfig+0x4c4>)
 80071bc:	685b      	ldr	r3, [r3, #4]
 80071be:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	689b      	ldr	r3, [r3, #8]
 80071c6:	4921      	ldr	r1, [pc, #132]	@ (800724c <HAL_RCC_OscConfig+0x4c4>)
 80071c8:	4313      	orrs	r3, r2
 80071ca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80071cc:	4b1f      	ldr	r3, [pc, #124]	@ (800724c <HAL_RCC_OscConfig+0x4c4>)
 80071ce:	685b      	ldr	r3, [r3, #4]
 80071d0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	6a19      	ldr	r1, [r3, #32]
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071dc:	430b      	orrs	r3, r1
 80071de:	491b      	ldr	r1, [pc, #108]	@ (800724c <HAL_RCC_OscConfig+0x4c4>)
 80071e0:	4313      	orrs	r3, r2
 80071e2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80071e4:	4b1b      	ldr	r3, [pc, #108]	@ (8007254 <HAL_RCC_OscConfig+0x4cc>)
 80071e6:	2201      	movs	r2, #1
 80071e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80071ea:	f7fb fe51 	bl	8002e90 <HAL_GetTick>
 80071ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80071f0:	e008      	b.n	8007204 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80071f2:	f7fb fe4d 	bl	8002e90 <HAL_GetTick>
 80071f6:	4602      	mov	r2, r0
 80071f8:	693b      	ldr	r3, [r7, #16]
 80071fa:	1ad3      	subs	r3, r2, r3
 80071fc:	2b02      	cmp	r3, #2
 80071fe:	d901      	bls.n	8007204 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8007200:	2303      	movs	r3, #3
 8007202:	e03d      	b.n	8007280 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007204:	4b11      	ldr	r3, [pc, #68]	@ (800724c <HAL_RCC_OscConfig+0x4c4>)
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800720c:	2b00      	cmp	r3, #0
 800720e:	d0f0      	beq.n	80071f2 <HAL_RCC_OscConfig+0x46a>
 8007210:	e035      	b.n	800727e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007212:	4b10      	ldr	r3, [pc, #64]	@ (8007254 <HAL_RCC_OscConfig+0x4cc>)
 8007214:	2200      	movs	r2, #0
 8007216:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007218:	f7fb fe3a 	bl	8002e90 <HAL_GetTick>
 800721c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800721e:	e008      	b.n	8007232 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007220:	f7fb fe36 	bl	8002e90 <HAL_GetTick>
 8007224:	4602      	mov	r2, r0
 8007226:	693b      	ldr	r3, [r7, #16]
 8007228:	1ad3      	subs	r3, r2, r3
 800722a:	2b02      	cmp	r3, #2
 800722c:	d901      	bls.n	8007232 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800722e:	2303      	movs	r3, #3
 8007230:	e026      	b.n	8007280 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007232:	4b06      	ldr	r3, [pc, #24]	@ (800724c <HAL_RCC_OscConfig+0x4c4>)
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800723a:	2b00      	cmp	r3, #0
 800723c:	d1f0      	bne.n	8007220 <HAL_RCC_OscConfig+0x498>
 800723e:	e01e      	b.n	800727e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	69db      	ldr	r3, [r3, #28]
 8007244:	2b01      	cmp	r3, #1
 8007246:	d107      	bne.n	8007258 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8007248:	2301      	movs	r3, #1
 800724a:	e019      	b.n	8007280 <HAL_RCC_OscConfig+0x4f8>
 800724c:	40021000 	.word	0x40021000
 8007250:	40007000 	.word	0x40007000
 8007254:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8007258:	4b0b      	ldr	r3, [pc, #44]	@ (8007288 <HAL_RCC_OscConfig+0x500>)
 800725a:	685b      	ldr	r3, [r3, #4]
 800725c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	6a1b      	ldr	r3, [r3, #32]
 8007268:	429a      	cmp	r2, r3
 800726a:	d106      	bne.n	800727a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007276:	429a      	cmp	r2, r3
 8007278:	d001      	beq.n	800727e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800727a:	2301      	movs	r3, #1
 800727c:	e000      	b.n	8007280 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800727e:	2300      	movs	r3, #0
}
 8007280:	4618      	mov	r0, r3
 8007282:	3718      	adds	r7, #24
 8007284:	46bd      	mov	sp, r7
 8007286:	bd80      	pop	{r7, pc}
 8007288:	40021000 	.word	0x40021000

0800728c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800728c:	b580      	push	{r7, lr}
 800728e:	b084      	sub	sp, #16
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
 8007294:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	2b00      	cmp	r3, #0
 800729a:	d101      	bne.n	80072a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800729c:	2301      	movs	r3, #1
 800729e:	e0d0      	b.n	8007442 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80072a0:	4b6a      	ldr	r3, [pc, #424]	@ (800744c <HAL_RCC_ClockConfig+0x1c0>)
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	f003 0307 	and.w	r3, r3, #7
 80072a8:	683a      	ldr	r2, [r7, #0]
 80072aa:	429a      	cmp	r2, r3
 80072ac:	d910      	bls.n	80072d0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80072ae:	4b67      	ldr	r3, [pc, #412]	@ (800744c <HAL_RCC_ClockConfig+0x1c0>)
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	f023 0207 	bic.w	r2, r3, #7
 80072b6:	4965      	ldr	r1, [pc, #404]	@ (800744c <HAL_RCC_ClockConfig+0x1c0>)
 80072b8:	683b      	ldr	r3, [r7, #0]
 80072ba:	4313      	orrs	r3, r2
 80072bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80072be:	4b63      	ldr	r3, [pc, #396]	@ (800744c <HAL_RCC_ClockConfig+0x1c0>)
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	f003 0307 	and.w	r3, r3, #7
 80072c6:	683a      	ldr	r2, [r7, #0]
 80072c8:	429a      	cmp	r2, r3
 80072ca:	d001      	beq.n	80072d0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80072cc:	2301      	movs	r3, #1
 80072ce:	e0b8      	b.n	8007442 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	f003 0302 	and.w	r3, r3, #2
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d020      	beq.n	800731e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	f003 0304 	and.w	r3, r3, #4
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d005      	beq.n	80072f4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80072e8:	4b59      	ldr	r3, [pc, #356]	@ (8007450 <HAL_RCC_ClockConfig+0x1c4>)
 80072ea:	685b      	ldr	r3, [r3, #4]
 80072ec:	4a58      	ldr	r2, [pc, #352]	@ (8007450 <HAL_RCC_ClockConfig+0x1c4>)
 80072ee:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80072f2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	f003 0308 	and.w	r3, r3, #8
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d005      	beq.n	800730c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007300:	4b53      	ldr	r3, [pc, #332]	@ (8007450 <HAL_RCC_ClockConfig+0x1c4>)
 8007302:	685b      	ldr	r3, [r3, #4]
 8007304:	4a52      	ldr	r2, [pc, #328]	@ (8007450 <HAL_RCC_ClockConfig+0x1c4>)
 8007306:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800730a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800730c:	4b50      	ldr	r3, [pc, #320]	@ (8007450 <HAL_RCC_ClockConfig+0x1c4>)
 800730e:	685b      	ldr	r3, [r3, #4]
 8007310:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	689b      	ldr	r3, [r3, #8]
 8007318:	494d      	ldr	r1, [pc, #308]	@ (8007450 <HAL_RCC_ClockConfig+0x1c4>)
 800731a:	4313      	orrs	r3, r2
 800731c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	f003 0301 	and.w	r3, r3, #1
 8007326:	2b00      	cmp	r3, #0
 8007328:	d040      	beq.n	80073ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	685b      	ldr	r3, [r3, #4]
 800732e:	2b01      	cmp	r3, #1
 8007330:	d107      	bne.n	8007342 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007332:	4b47      	ldr	r3, [pc, #284]	@ (8007450 <HAL_RCC_ClockConfig+0x1c4>)
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800733a:	2b00      	cmp	r3, #0
 800733c:	d115      	bne.n	800736a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800733e:	2301      	movs	r3, #1
 8007340:	e07f      	b.n	8007442 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	685b      	ldr	r3, [r3, #4]
 8007346:	2b02      	cmp	r3, #2
 8007348:	d107      	bne.n	800735a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800734a:	4b41      	ldr	r3, [pc, #260]	@ (8007450 <HAL_RCC_ClockConfig+0x1c4>)
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007352:	2b00      	cmp	r3, #0
 8007354:	d109      	bne.n	800736a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007356:	2301      	movs	r3, #1
 8007358:	e073      	b.n	8007442 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800735a:	4b3d      	ldr	r3, [pc, #244]	@ (8007450 <HAL_RCC_ClockConfig+0x1c4>)
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f003 0302 	and.w	r3, r3, #2
 8007362:	2b00      	cmp	r3, #0
 8007364:	d101      	bne.n	800736a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007366:	2301      	movs	r3, #1
 8007368:	e06b      	b.n	8007442 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800736a:	4b39      	ldr	r3, [pc, #228]	@ (8007450 <HAL_RCC_ClockConfig+0x1c4>)
 800736c:	685b      	ldr	r3, [r3, #4]
 800736e:	f023 0203 	bic.w	r2, r3, #3
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	685b      	ldr	r3, [r3, #4]
 8007376:	4936      	ldr	r1, [pc, #216]	@ (8007450 <HAL_RCC_ClockConfig+0x1c4>)
 8007378:	4313      	orrs	r3, r2
 800737a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800737c:	f7fb fd88 	bl	8002e90 <HAL_GetTick>
 8007380:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007382:	e00a      	b.n	800739a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007384:	f7fb fd84 	bl	8002e90 <HAL_GetTick>
 8007388:	4602      	mov	r2, r0
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	1ad3      	subs	r3, r2, r3
 800738e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007392:	4293      	cmp	r3, r2
 8007394:	d901      	bls.n	800739a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007396:	2303      	movs	r3, #3
 8007398:	e053      	b.n	8007442 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800739a:	4b2d      	ldr	r3, [pc, #180]	@ (8007450 <HAL_RCC_ClockConfig+0x1c4>)
 800739c:	685b      	ldr	r3, [r3, #4]
 800739e:	f003 020c 	and.w	r2, r3, #12
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	685b      	ldr	r3, [r3, #4]
 80073a6:	009b      	lsls	r3, r3, #2
 80073a8:	429a      	cmp	r2, r3
 80073aa:	d1eb      	bne.n	8007384 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80073ac:	4b27      	ldr	r3, [pc, #156]	@ (800744c <HAL_RCC_ClockConfig+0x1c0>)
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	f003 0307 	and.w	r3, r3, #7
 80073b4:	683a      	ldr	r2, [r7, #0]
 80073b6:	429a      	cmp	r2, r3
 80073b8:	d210      	bcs.n	80073dc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80073ba:	4b24      	ldr	r3, [pc, #144]	@ (800744c <HAL_RCC_ClockConfig+0x1c0>)
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	f023 0207 	bic.w	r2, r3, #7
 80073c2:	4922      	ldr	r1, [pc, #136]	@ (800744c <HAL_RCC_ClockConfig+0x1c0>)
 80073c4:	683b      	ldr	r3, [r7, #0]
 80073c6:	4313      	orrs	r3, r2
 80073c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80073ca:	4b20      	ldr	r3, [pc, #128]	@ (800744c <HAL_RCC_ClockConfig+0x1c0>)
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	f003 0307 	and.w	r3, r3, #7
 80073d2:	683a      	ldr	r2, [r7, #0]
 80073d4:	429a      	cmp	r2, r3
 80073d6:	d001      	beq.n	80073dc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80073d8:	2301      	movs	r3, #1
 80073da:	e032      	b.n	8007442 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f003 0304 	and.w	r3, r3, #4
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d008      	beq.n	80073fa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80073e8:	4b19      	ldr	r3, [pc, #100]	@ (8007450 <HAL_RCC_ClockConfig+0x1c4>)
 80073ea:	685b      	ldr	r3, [r3, #4]
 80073ec:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	68db      	ldr	r3, [r3, #12]
 80073f4:	4916      	ldr	r1, [pc, #88]	@ (8007450 <HAL_RCC_ClockConfig+0x1c4>)
 80073f6:	4313      	orrs	r3, r2
 80073f8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	f003 0308 	and.w	r3, r3, #8
 8007402:	2b00      	cmp	r3, #0
 8007404:	d009      	beq.n	800741a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007406:	4b12      	ldr	r3, [pc, #72]	@ (8007450 <HAL_RCC_ClockConfig+0x1c4>)
 8007408:	685b      	ldr	r3, [r3, #4]
 800740a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	691b      	ldr	r3, [r3, #16]
 8007412:	00db      	lsls	r3, r3, #3
 8007414:	490e      	ldr	r1, [pc, #56]	@ (8007450 <HAL_RCC_ClockConfig+0x1c4>)
 8007416:	4313      	orrs	r3, r2
 8007418:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800741a:	f000 f821 	bl	8007460 <HAL_RCC_GetSysClockFreq>
 800741e:	4602      	mov	r2, r0
 8007420:	4b0b      	ldr	r3, [pc, #44]	@ (8007450 <HAL_RCC_ClockConfig+0x1c4>)
 8007422:	685b      	ldr	r3, [r3, #4]
 8007424:	091b      	lsrs	r3, r3, #4
 8007426:	f003 030f 	and.w	r3, r3, #15
 800742a:	490a      	ldr	r1, [pc, #40]	@ (8007454 <HAL_RCC_ClockConfig+0x1c8>)
 800742c:	5ccb      	ldrb	r3, [r1, r3]
 800742e:	fa22 f303 	lsr.w	r3, r2, r3
 8007432:	4a09      	ldr	r2, [pc, #36]	@ (8007458 <HAL_RCC_ClockConfig+0x1cc>)
 8007434:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007436:	4b09      	ldr	r3, [pc, #36]	@ (800745c <HAL_RCC_ClockConfig+0x1d0>)
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	4618      	mov	r0, r3
 800743c:	f7fb fce6 	bl	8002e0c <HAL_InitTick>

  return HAL_OK;
 8007440:	2300      	movs	r3, #0
}
 8007442:	4618      	mov	r0, r3
 8007444:	3710      	adds	r7, #16
 8007446:	46bd      	mov	sp, r7
 8007448:	bd80      	pop	{r7, pc}
 800744a:	bf00      	nop
 800744c:	40022000 	.word	0x40022000
 8007450:	40021000 	.word	0x40021000
 8007454:	0800d690 	.word	0x0800d690
 8007458:	20000018 	.word	0x20000018
 800745c:	2000001c 	.word	0x2000001c

08007460 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007460:	b480      	push	{r7}
 8007462:	b087      	sub	sp, #28
 8007464:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8007466:	2300      	movs	r3, #0
 8007468:	60fb      	str	r3, [r7, #12]
 800746a:	2300      	movs	r3, #0
 800746c:	60bb      	str	r3, [r7, #8]
 800746e:	2300      	movs	r3, #0
 8007470:	617b      	str	r3, [r7, #20]
 8007472:	2300      	movs	r3, #0
 8007474:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8007476:	2300      	movs	r3, #0
 8007478:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800747a:	4b1e      	ldr	r3, [pc, #120]	@ (80074f4 <HAL_RCC_GetSysClockFreq+0x94>)
 800747c:	685b      	ldr	r3, [r3, #4]
 800747e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	f003 030c 	and.w	r3, r3, #12
 8007486:	2b04      	cmp	r3, #4
 8007488:	d002      	beq.n	8007490 <HAL_RCC_GetSysClockFreq+0x30>
 800748a:	2b08      	cmp	r3, #8
 800748c:	d003      	beq.n	8007496 <HAL_RCC_GetSysClockFreq+0x36>
 800748e:	e027      	b.n	80074e0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8007490:	4b19      	ldr	r3, [pc, #100]	@ (80074f8 <HAL_RCC_GetSysClockFreq+0x98>)
 8007492:	613b      	str	r3, [r7, #16]
      break;
 8007494:	e027      	b.n	80074e6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	0c9b      	lsrs	r3, r3, #18
 800749a:	f003 030f 	and.w	r3, r3, #15
 800749e:	4a17      	ldr	r2, [pc, #92]	@ (80074fc <HAL_RCC_GetSysClockFreq+0x9c>)
 80074a0:	5cd3      	ldrb	r3, [r2, r3]
 80074a2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d010      	beq.n	80074d0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80074ae:	4b11      	ldr	r3, [pc, #68]	@ (80074f4 <HAL_RCC_GetSysClockFreq+0x94>)
 80074b0:	685b      	ldr	r3, [r3, #4]
 80074b2:	0c5b      	lsrs	r3, r3, #17
 80074b4:	f003 0301 	and.w	r3, r3, #1
 80074b8:	4a11      	ldr	r2, [pc, #68]	@ (8007500 <HAL_RCC_GetSysClockFreq+0xa0>)
 80074ba:	5cd3      	ldrb	r3, [r2, r3]
 80074bc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	4a0d      	ldr	r2, [pc, #52]	@ (80074f8 <HAL_RCC_GetSysClockFreq+0x98>)
 80074c2:	fb03 f202 	mul.w	r2, r3, r2
 80074c6:	68bb      	ldr	r3, [r7, #8]
 80074c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80074cc:	617b      	str	r3, [r7, #20]
 80074ce:	e004      	b.n	80074da <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	4a0c      	ldr	r2, [pc, #48]	@ (8007504 <HAL_RCC_GetSysClockFreq+0xa4>)
 80074d4:	fb02 f303 	mul.w	r3, r2, r3
 80074d8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80074da:	697b      	ldr	r3, [r7, #20]
 80074dc:	613b      	str	r3, [r7, #16]
      break;
 80074de:	e002      	b.n	80074e6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80074e0:	4b05      	ldr	r3, [pc, #20]	@ (80074f8 <HAL_RCC_GetSysClockFreq+0x98>)
 80074e2:	613b      	str	r3, [r7, #16]
      break;
 80074e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80074e6:	693b      	ldr	r3, [r7, #16]
}
 80074e8:	4618      	mov	r0, r3
 80074ea:	371c      	adds	r7, #28
 80074ec:	46bd      	mov	sp, r7
 80074ee:	bc80      	pop	{r7}
 80074f0:	4770      	bx	lr
 80074f2:	bf00      	nop
 80074f4:	40021000 	.word	0x40021000
 80074f8:	007a1200 	.word	0x007a1200
 80074fc:	0800d6a8 	.word	0x0800d6a8
 8007500:	0800d6b8 	.word	0x0800d6b8
 8007504:	003d0900 	.word	0x003d0900

08007508 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007508:	b480      	push	{r7}
 800750a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800750c:	4b02      	ldr	r3, [pc, #8]	@ (8007518 <HAL_RCC_GetHCLKFreq+0x10>)
 800750e:	681b      	ldr	r3, [r3, #0]
}
 8007510:	4618      	mov	r0, r3
 8007512:	46bd      	mov	sp, r7
 8007514:	bc80      	pop	{r7}
 8007516:	4770      	bx	lr
 8007518:	20000018 	.word	0x20000018

0800751c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800751c:	b580      	push	{r7, lr}
 800751e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007520:	f7ff fff2 	bl	8007508 <HAL_RCC_GetHCLKFreq>
 8007524:	4602      	mov	r2, r0
 8007526:	4b05      	ldr	r3, [pc, #20]	@ (800753c <HAL_RCC_GetPCLK1Freq+0x20>)
 8007528:	685b      	ldr	r3, [r3, #4]
 800752a:	0a1b      	lsrs	r3, r3, #8
 800752c:	f003 0307 	and.w	r3, r3, #7
 8007530:	4903      	ldr	r1, [pc, #12]	@ (8007540 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007532:	5ccb      	ldrb	r3, [r1, r3]
 8007534:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007538:	4618      	mov	r0, r3
 800753a:	bd80      	pop	{r7, pc}
 800753c:	40021000 	.word	0x40021000
 8007540:	0800d6a0 	.word	0x0800d6a0

08007544 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007544:	b580      	push	{r7, lr}
 8007546:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007548:	f7ff ffde 	bl	8007508 <HAL_RCC_GetHCLKFreq>
 800754c:	4602      	mov	r2, r0
 800754e:	4b05      	ldr	r3, [pc, #20]	@ (8007564 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007550:	685b      	ldr	r3, [r3, #4]
 8007552:	0adb      	lsrs	r3, r3, #11
 8007554:	f003 0307 	and.w	r3, r3, #7
 8007558:	4903      	ldr	r1, [pc, #12]	@ (8007568 <HAL_RCC_GetPCLK2Freq+0x24>)
 800755a:	5ccb      	ldrb	r3, [r1, r3]
 800755c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007560:	4618      	mov	r0, r3
 8007562:	bd80      	pop	{r7, pc}
 8007564:	40021000 	.word	0x40021000
 8007568:	0800d6a0 	.word	0x0800d6a0

0800756c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800756c:	b480      	push	{r7}
 800756e:	b085      	sub	sp, #20
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8007574:	4b0a      	ldr	r3, [pc, #40]	@ (80075a0 <RCC_Delay+0x34>)
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	4a0a      	ldr	r2, [pc, #40]	@ (80075a4 <RCC_Delay+0x38>)
 800757a:	fba2 2303 	umull	r2, r3, r2, r3
 800757e:	0a5b      	lsrs	r3, r3, #9
 8007580:	687a      	ldr	r2, [r7, #4]
 8007582:	fb02 f303 	mul.w	r3, r2, r3
 8007586:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8007588:	bf00      	nop
  }
  while (Delay --);
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	1e5a      	subs	r2, r3, #1
 800758e:	60fa      	str	r2, [r7, #12]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d1f9      	bne.n	8007588 <RCC_Delay+0x1c>
}
 8007594:	bf00      	nop
 8007596:	bf00      	nop
 8007598:	3714      	adds	r7, #20
 800759a:	46bd      	mov	sp, r7
 800759c:	bc80      	pop	{r7}
 800759e:	4770      	bx	lr
 80075a0:	20000018 	.word	0x20000018
 80075a4:	10624dd3 	.word	0x10624dd3

080075a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b086      	sub	sp, #24
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80075b0:	2300      	movs	r3, #0
 80075b2:	613b      	str	r3, [r7, #16]
 80075b4:	2300      	movs	r3, #0
 80075b6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	f003 0301 	and.w	r3, r3, #1
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d07d      	beq.n	80076c0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80075c4:	2300      	movs	r3, #0
 80075c6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80075c8:	4b4f      	ldr	r3, [pc, #316]	@ (8007708 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80075ca:	69db      	ldr	r3, [r3, #28]
 80075cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d10d      	bne.n	80075f0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80075d4:	4b4c      	ldr	r3, [pc, #304]	@ (8007708 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80075d6:	69db      	ldr	r3, [r3, #28]
 80075d8:	4a4b      	ldr	r2, [pc, #300]	@ (8007708 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80075da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80075de:	61d3      	str	r3, [r2, #28]
 80075e0:	4b49      	ldr	r3, [pc, #292]	@ (8007708 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80075e2:	69db      	ldr	r3, [r3, #28]
 80075e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80075e8:	60bb      	str	r3, [r7, #8]
 80075ea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80075ec:	2301      	movs	r3, #1
 80075ee:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80075f0:	4b46      	ldr	r3, [pc, #280]	@ (800770c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d118      	bne.n	800762e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80075fc:	4b43      	ldr	r3, [pc, #268]	@ (800770c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	4a42      	ldr	r2, [pc, #264]	@ (800770c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007602:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007606:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007608:	f7fb fc42 	bl	8002e90 <HAL_GetTick>
 800760c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800760e:	e008      	b.n	8007622 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007610:	f7fb fc3e 	bl	8002e90 <HAL_GetTick>
 8007614:	4602      	mov	r2, r0
 8007616:	693b      	ldr	r3, [r7, #16]
 8007618:	1ad3      	subs	r3, r2, r3
 800761a:	2b64      	cmp	r3, #100	@ 0x64
 800761c:	d901      	bls.n	8007622 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800761e:	2303      	movs	r3, #3
 8007620:	e06d      	b.n	80076fe <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007622:	4b3a      	ldr	r3, [pc, #232]	@ (800770c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800762a:	2b00      	cmp	r3, #0
 800762c:	d0f0      	beq.n	8007610 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800762e:	4b36      	ldr	r3, [pc, #216]	@ (8007708 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007630:	6a1b      	ldr	r3, [r3, #32]
 8007632:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007636:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	2b00      	cmp	r3, #0
 800763c:	d02e      	beq.n	800769c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	685b      	ldr	r3, [r3, #4]
 8007642:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007646:	68fa      	ldr	r2, [r7, #12]
 8007648:	429a      	cmp	r2, r3
 800764a:	d027      	beq.n	800769c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800764c:	4b2e      	ldr	r3, [pc, #184]	@ (8007708 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800764e:	6a1b      	ldr	r3, [r3, #32]
 8007650:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007654:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007656:	4b2e      	ldr	r3, [pc, #184]	@ (8007710 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007658:	2201      	movs	r2, #1
 800765a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800765c:	4b2c      	ldr	r3, [pc, #176]	@ (8007710 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800765e:	2200      	movs	r2, #0
 8007660:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8007662:	4a29      	ldr	r2, [pc, #164]	@ (8007708 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	f003 0301 	and.w	r3, r3, #1
 800766e:	2b00      	cmp	r3, #0
 8007670:	d014      	beq.n	800769c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007672:	f7fb fc0d 	bl	8002e90 <HAL_GetTick>
 8007676:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007678:	e00a      	b.n	8007690 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800767a:	f7fb fc09 	bl	8002e90 <HAL_GetTick>
 800767e:	4602      	mov	r2, r0
 8007680:	693b      	ldr	r3, [r7, #16]
 8007682:	1ad3      	subs	r3, r2, r3
 8007684:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007688:	4293      	cmp	r3, r2
 800768a:	d901      	bls.n	8007690 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800768c:	2303      	movs	r3, #3
 800768e:	e036      	b.n	80076fe <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007690:	4b1d      	ldr	r3, [pc, #116]	@ (8007708 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007692:	6a1b      	ldr	r3, [r3, #32]
 8007694:	f003 0302 	and.w	r3, r3, #2
 8007698:	2b00      	cmp	r3, #0
 800769a:	d0ee      	beq.n	800767a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800769c:	4b1a      	ldr	r3, [pc, #104]	@ (8007708 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800769e:	6a1b      	ldr	r3, [r3, #32]
 80076a0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	685b      	ldr	r3, [r3, #4]
 80076a8:	4917      	ldr	r1, [pc, #92]	@ (8007708 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80076aa:	4313      	orrs	r3, r2
 80076ac:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80076ae:	7dfb      	ldrb	r3, [r7, #23]
 80076b0:	2b01      	cmp	r3, #1
 80076b2:	d105      	bne.n	80076c0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80076b4:	4b14      	ldr	r3, [pc, #80]	@ (8007708 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80076b6:	69db      	ldr	r3, [r3, #28]
 80076b8:	4a13      	ldr	r2, [pc, #76]	@ (8007708 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80076ba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80076be:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	f003 0302 	and.w	r3, r3, #2
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d008      	beq.n	80076de <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80076cc:	4b0e      	ldr	r3, [pc, #56]	@ (8007708 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80076ce:	685b      	ldr	r3, [r3, #4]
 80076d0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	689b      	ldr	r3, [r3, #8]
 80076d8:	490b      	ldr	r1, [pc, #44]	@ (8007708 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80076da:	4313      	orrs	r3, r2
 80076dc:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	f003 0310 	and.w	r3, r3, #16
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d008      	beq.n	80076fc <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80076ea:	4b07      	ldr	r3, [pc, #28]	@ (8007708 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80076ec:	685b      	ldr	r3, [r3, #4]
 80076ee:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	68db      	ldr	r3, [r3, #12]
 80076f6:	4904      	ldr	r1, [pc, #16]	@ (8007708 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80076f8:	4313      	orrs	r3, r2
 80076fa:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80076fc:	2300      	movs	r3, #0
}
 80076fe:	4618      	mov	r0, r3
 8007700:	3718      	adds	r7, #24
 8007702:	46bd      	mov	sp, r7
 8007704:	bd80      	pop	{r7, pc}
 8007706:	bf00      	nop
 8007708:	40021000 	.word	0x40021000
 800770c:	40007000 	.word	0x40007000
 8007710:	42420440 	.word	0x42420440

08007714 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007714:	b580      	push	{r7, lr}
 8007716:	b088      	sub	sp, #32
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 800771c:	2300      	movs	r3, #0
 800771e:	617b      	str	r3, [r7, #20]
 8007720:	2300      	movs	r3, #0
 8007722:	61fb      	str	r3, [r7, #28]
 8007724:	2300      	movs	r3, #0
 8007726:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8007728:	2300      	movs	r3, #0
 800772a:	60fb      	str	r3, [r7, #12]
 800772c:	2300      	movs	r3, #0
 800772e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	2b10      	cmp	r3, #16
 8007734:	d00a      	beq.n	800774c <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	2b10      	cmp	r3, #16
 800773a:	f200 808a 	bhi.w	8007852 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	2b01      	cmp	r3, #1
 8007742:	d045      	beq.n	80077d0 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	2b02      	cmp	r3, #2
 8007748:	d075      	beq.n	8007836 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 800774a:	e082      	b.n	8007852 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 800774c:	4b46      	ldr	r3, [pc, #280]	@ (8007868 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800774e:	685b      	ldr	r3, [r3, #4]
 8007750:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8007752:	4b45      	ldr	r3, [pc, #276]	@ (8007868 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800775a:	2b00      	cmp	r3, #0
 800775c:	d07b      	beq.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	0c9b      	lsrs	r3, r3, #18
 8007762:	f003 030f 	and.w	r3, r3, #15
 8007766:	4a41      	ldr	r2, [pc, #260]	@ (800786c <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8007768:	5cd3      	ldrb	r3, [r2, r3]
 800776a:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007772:	2b00      	cmp	r3, #0
 8007774:	d015      	beq.n	80077a2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8007776:	4b3c      	ldr	r3, [pc, #240]	@ (8007868 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8007778:	685b      	ldr	r3, [r3, #4]
 800777a:	0c5b      	lsrs	r3, r3, #17
 800777c:	f003 0301 	and.w	r3, r3, #1
 8007780:	4a3b      	ldr	r2, [pc, #236]	@ (8007870 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8007782:	5cd3      	ldrb	r3, [r2, r3]
 8007784:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800778c:	2b00      	cmp	r3, #0
 800778e:	d00d      	beq.n	80077ac <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8007790:	4a38      	ldr	r2, [pc, #224]	@ (8007874 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8007792:	697b      	ldr	r3, [r7, #20]
 8007794:	fbb2 f2f3 	udiv	r2, r2, r3
 8007798:	693b      	ldr	r3, [r7, #16]
 800779a:	fb02 f303 	mul.w	r3, r2, r3
 800779e:	61fb      	str	r3, [r7, #28]
 80077a0:	e004      	b.n	80077ac <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80077a2:	693b      	ldr	r3, [r7, #16]
 80077a4:	4a34      	ldr	r2, [pc, #208]	@ (8007878 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80077a6:	fb02 f303 	mul.w	r3, r2, r3
 80077aa:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80077ac:	4b2e      	ldr	r3, [pc, #184]	@ (8007868 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80077ae:	685b      	ldr	r3, [r3, #4]
 80077b0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80077b4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80077b8:	d102      	bne.n	80077c0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 80077ba:	69fb      	ldr	r3, [r7, #28]
 80077bc:	61bb      	str	r3, [r7, #24]
      break;
 80077be:	e04a      	b.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 80077c0:	69fb      	ldr	r3, [r7, #28]
 80077c2:	005b      	lsls	r3, r3, #1
 80077c4:	4a2d      	ldr	r2, [pc, #180]	@ (800787c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80077c6:	fba2 2303 	umull	r2, r3, r2, r3
 80077ca:	085b      	lsrs	r3, r3, #1
 80077cc:	61bb      	str	r3, [r7, #24]
      break;
 80077ce:	e042      	b.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 80077d0:	4b25      	ldr	r3, [pc, #148]	@ (8007868 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80077d2:	6a1b      	ldr	r3, [r3, #32]
 80077d4:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80077dc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80077e0:	d108      	bne.n	80077f4 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	f003 0302 	and.w	r3, r3, #2
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d003      	beq.n	80077f4 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 80077ec:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80077f0:	61bb      	str	r3, [r7, #24]
 80077f2:	e01f      	b.n	8007834 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80077fa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80077fe:	d109      	bne.n	8007814 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8007800:	4b19      	ldr	r3, [pc, #100]	@ (8007868 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8007802:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007804:	f003 0302 	and.w	r3, r3, #2
 8007808:	2b00      	cmp	r3, #0
 800780a:	d003      	beq.n	8007814 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 800780c:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8007810:	61bb      	str	r3, [r7, #24]
 8007812:	e00f      	b.n	8007834 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800781a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800781e:	d11c      	bne.n	800785a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8007820:	4b11      	ldr	r3, [pc, #68]	@ (8007868 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007828:	2b00      	cmp	r3, #0
 800782a:	d016      	beq.n	800785a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 800782c:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8007830:	61bb      	str	r3, [r7, #24]
      break;
 8007832:	e012      	b.n	800785a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8007834:	e011      	b.n	800785a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8007836:	f7ff fe85 	bl	8007544 <HAL_RCC_GetPCLK2Freq>
 800783a:	4602      	mov	r2, r0
 800783c:	4b0a      	ldr	r3, [pc, #40]	@ (8007868 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800783e:	685b      	ldr	r3, [r3, #4]
 8007840:	0b9b      	lsrs	r3, r3, #14
 8007842:	f003 0303 	and.w	r3, r3, #3
 8007846:	3301      	adds	r3, #1
 8007848:	005b      	lsls	r3, r3, #1
 800784a:	fbb2 f3f3 	udiv	r3, r2, r3
 800784e:	61bb      	str	r3, [r7, #24]
      break;
 8007850:	e004      	b.n	800785c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8007852:	bf00      	nop
 8007854:	e002      	b.n	800785c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8007856:	bf00      	nop
 8007858:	e000      	b.n	800785c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800785a:	bf00      	nop
    }
  }
  return (frequency);
 800785c:	69bb      	ldr	r3, [r7, #24]
}
 800785e:	4618      	mov	r0, r3
 8007860:	3720      	adds	r7, #32
 8007862:	46bd      	mov	sp, r7
 8007864:	bd80      	pop	{r7, pc}
 8007866:	bf00      	nop
 8007868:	40021000 	.word	0x40021000
 800786c:	0800d6bc 	.word	0x0800d6bc
 8007870:	0800d6cc 	.word	0x0800d6cc
 8007874:	007a1200 	.word	0x007a1200
 8007878:	003d0900 	.word	0x003d0900
 800787c:	aaaaaaab 	.word	0xaaaaaaab

08007880 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8007880:	b580      	push	{r7, lr}
 8007882:	b086      	sub	sp, #24
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
 8007888:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	2b00      	cmp	r3, #0
 800788e:	d101      	bne.n	8007894 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007890:	2301      	movs	r3, #1
 8007892:	e093      	b.n	80079bc <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800789a:	b2db      	uxtb	r3, r3
 800789c:	2b00      	cmp	r3, #0
 800789e:	d106      	bne.n	80078ae <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	2200      	movs	r2, #0
 80078a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80078a8:	6878      	ldr	r0, [r7, #4]
 80078aa:	f7fb f9b9 	bl	8002c20 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	2202      	movs	r2, #2
 80078b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	689b      	ldr	r3, [r3, #8]
 80078bc:	687a      	ldr	r2, [r7, #4]
 80078be:	6812      	ldr	r2, [r2, #0]
 80078c0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80078c4:	f023 0307 	bic.w	r3, r3, #7
 80078c8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681a      	ldr	r2, [r3, #0]
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	3304      	adds	r3, #4
 80078d2:	4619      	mov	r1, r3
 80078d4:	4610      	mov	r0, r2
 80078d6:	f000 fa37 	bl	8007d48 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	689b      	ldr	r3, [r3, #8]
 80078e0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	699b      	ldr	r3, [r3, #24]
 80078e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	6a1b      	ldr	r3, [r3, #32]
 80078f0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80078f2:	683b      	ldr	r3, [r7, #0]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	697a      	ldr	r2, [r7, #20]
 80078f8:	4313      	orrs	r3, r2
 80078fa:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80078fc:	693b      	ldr	r3, [r7, #16]
 80078fe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007902:	f023 0303 	bic.w	r3, r3, #3
 8007906:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007908:	683b      	ldr	r3, [r7, #0]
 800790a:	689a      	ldr	r2, [r3, #8]
 800790c:	683b      	ldr	r3, [r7, #0]
 800790e:	699b      	ldr	r3, [r3, #24]
 8007910:	021b      	lsls	r3, r3, #8
 8007912:	4313      	orrs	r3, r2
 8007914:	693a      	ldr	r2, [r7, #16]
 8007916:	4313      	orrs	r3, r2
 8007918:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800791a:	693b      	ldr	r3, [r7, #16]
 800791c:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8007920:	f023 030c 	bic.w	r3, r3, #12
 8007924:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007926:	693b      	ldr	r3, [r7, #16]
 8007928:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800792c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007930:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007932:	683b      	ldr	r3, [r7, #0]
 8007934:	68da      	ldr	r2, [r3, #12]
 8007936:	683b      	ldr	r3, [r7, #0]
 8007938:	69db      	ldr	r3, [r3, #28]
 800793a:	021b      	lsls	r3, r3, #8
 800793c:	4313      	orrs	r3, r2
 800793e:	693a      	ldr	r2, [r7, #16]
 8007940:	4313      	orrs	r3, r2
 8007942:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007944:	683b      	ldr	r3, [r7, #0]
 8007946:	691b      	ldr	r3, [r3, #16]
 8007948:	011a      	lsls	r2, r3, #4
 800794a:	683b      	ldr	r3, [r7, #0]
 800794c:	6a1b      	ldr	r3, [r3, #32]
 800794e:	031b      	lsls	r3, r3, #12
 8007950:	4313      	orrs	r3, r2
 8007952:	693a      	ldr	r2, [r7, #16]
 8007954:	4313      	orrs	r3, r2
 8007956:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800795e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007960:	683b      	ldr	r3, [r7, #0]
 8007962:	685a      	ldr	r2, [r3, #4]
 8007964:	683b      	ldr	r3, [r7, #0]
 8007966:	695b      	ldr	r3, [r3, #20]
 8007968:	011b      	lsls	r3, r3, #4
 800796a:	4313      	orrs	r3, r2
 800796c:	68fa      	ldr	r2, [r7, #12]
 800796e:	4313      	orrs	r3, r2
 8007970:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	697a      	ldr	r2, [r7, #20]
 8007978:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	693a      	ldr	r2, [r7, #16]
 8007980:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	68fa      	ldr	r2, [r7, #12]
 8007988:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	2201      	movs	r2, #1
 800798e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	2201      	movs	r2, #1
 8007996:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	2201      	movs	r2, #1
 800799e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	2201      	movs	r2, #1
 80079a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	2201      	movs	r2, #1
 80079ae:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	2201      	movs	r2, #1
 80079b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80079ba:	2300      	movs	r3, #0
}
 80079bc:	4618      	mov	r0, r3
 80079be:	3718      	adds	r7, #24
 80079c0:	46bd      	mov	sp, r7
 80079c2:	bd80      	pop	{r7, pc}

080079c4 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b084      	sub	sp, #16
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
 80079cc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80079d4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80079dc:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80079e4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80079ec:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80079ee:	683b      	ldr	r3, [r7, #0]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d110      	bne.n	8007a16 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80079f4:	7bfb      	ldrb	r3, [r7, #15]
 80079f6:	2b01      	cmp	r3, #1
 80079f8:	d102      	bne.n	8007a00 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80079fa:	7b7b      	ldrb	r3, [r7, #13]
 80079fc:	2b01      	cmp	r3, #1
 80079fe:	d001      	beq.n	8007a04 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8007a00:	2301      	movs	r3, #1
 8007a02:	e089      	b.n	8007b18 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	2202      	movs	r2, #2
 8007a08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	2202      	movs	r2, #2
 8007a10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007a14:	e031      	b.n	8007a7a <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8007a16:	683b      	ldr	r3, [r7, #0]
 8007a18:	2b04      	cmp	r3, #4
 8007a1a:	d110      	bne.n	8007a3e <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007a1c:	7bbb      	ldrb	r3, [r7, #14]
 8007a1e:	2b01      	cmp	r3, #1
 8007a20:	d102      	bne.n	8007a28 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007a22:	7b3b      	ldrb	r3, [r7, #12]
 8007a24:	2b01      	cmp	r3, #1
 8007a26:	d001      	beq.n	8007a2c <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8007a28:	2301      	movs	r3, #1
 8007a2a:	e075      	b.n	8007b18 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2202      	movs	r2, #2
 8007a30:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	2202      	movs	r2, #2
 8007a38:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007a3c:	e01d      	b.n	8007a7a <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007a3e:	7bfb      	ldrb	r3, [r7, #15]
 8007a40:	2b01      	cmp	r3, #1
 8007a42:	d108      	bne.n	8007a56 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007a44:	7bbb      	ldrb	r3, [r7, #14]
 8007a46:	2b01      	cmp	r3, #1
 8007a48:	d105      	bne.n	8007a56 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007a4a:	7b7b      	ldrb	r3, [r7, #13]
 8007a4c:	2b01      	cmp	r3, #1
 8007a4e:	d102      	bne.n	8007a56 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007a50:	7b3b      	ldrb	r3, [r7, #12]
 8007a52:	2b01      	cmp	r3, #1
 8007a54:	d001      	beq.n	8007a5a <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8007a56:	2301      	movs	r3, #1
 8007a58:	e05e      	b.n	8007b18 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	2202      	movs	r2, #2
 8007a5e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	2202      	movs	r2, #2
 8007a66:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	2202      	movs	r2, #2
 8007a6e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	2202      	movs	r2, #2
 8007a76:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8007a7a:	683b      	ldr	r3, [r7, #0]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d003      	beq.n	8007a88 <HAL_TIM_Encoder_Start_IT+0xc4>
 8007a80:	683b      	ldr	r3, [r7, #0]
 8007a82:	2b04      	cmp	r3, #4
 8007a84:	d010      	beq.n	8007aa8 <HAL_TIM_Encoder_Start_IT+0xe4>
 8007a86:	e01f      	b.n	8007ac8 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	2201      	movs	r2, #1
 8007a8e:	2100      	movs	r1, #0
 8007a90:	4618      	mov	r0, r3
 8007a92:	f000 f9c7 	bl	8007e24 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	68da      	ldr	r2, [r3, #12]
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	f042 0202 	orr.w	r2, r2, #2
 8007aa4:	60da      	str	r2, [r3, #12]
      break;
 8007aa6:	e02e      	b.n	8007b06 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	2201      	movs	r2, #1
 8007aae:	2104      	movs	r1, #4
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	f000 f9b7 	bl	8007e24 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	68da      	ldr	r2, [r3, #12]
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	f042 0204 	orr.w	r2, r2, #4
 8007ac4:	60da      	str	r2, [r3, #12]
      break;
 8007ac6:	e01e      	b.n	8007b06 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	2201      	movs	r2, #1
 8007ace:	2100      	movs	r1, #0
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	f000 f9a7 	bl	8007e24 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	2201      	movs	r2, #1
 8007adc:	2104      	movs	r1, #4
 8007ade:	4618      	mov	r0, r3
 8007ae0:	f000 f9a0 	bl	8007e24 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	68da      	ldr	r2, [r3, #12]
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	f042 0202 	orr.w	r2, r2, #2
 8007af2:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	68da      	ldr	r2, [r3, #12]
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	f042 0204 	orr.w	r2, r2, #4
 8007b02:	60da      	str	r2, [r3, #12]
      break;
 8007b04:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	681a      	ldr	r2, [r3, #0]
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	f042 0201 	orr.w	r2, r2, #1
 8007b14:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007b16:	2300      	movs	r3, #0
}
 8007b18:	4618      	mov	r0, r3
 8007b1a:	3710      	adds	r7, #16
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	bd80      	pop	{r7, pc}

08007b20 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007b20:	b580      	push	{r7, lr}
 8007b22:	b084      	sub	sp, #16
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	68db      	ldr	r3, [r3, #12]
 8007b2e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	691b      	ldr	r3, [r3, #16]
 8007b36:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007b38:	68bb      	ldr	r3, [r7, #8]
 8007b3a:	f003 0302 	and.w	r3, r3, #2
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d020      	beq.n	8007b84 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	f003 0302 	and.w	r3, r3, #2
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d01b      	beq.n	8007b84 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	f06f 0202 	mvn.w	r2, #2
 8007b54:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	2201      	movs	r2, #1
 8007b5a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	699b      	ldr	r3, [r3, #24]
 8007b62:	f003 0303 	and.w	r3, r3, #3
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d003      	beq.n	8007b72 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007b6a:	6878      	ldr	r0, [r7, #4]
 8007b6c:	f7f9 fefa 	bl	8001964 <HAL_TIM_IC_CaptureCallback>
 8007b70:	e005      	b.n	8007b7e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b72:	6878      	ldr	r0, [r7, #4]
 8007b74:	f000 f8cd 	bl	8007d12 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b78:	6878      	ldr	r0, [r7, #4]
 8007b7a:	f000 f8d3 	bl	8007d24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	2200      	movs	r2, #0
 8007b82:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007b84:	68bb      	ldr	r3, [r7, #8]
 8007b86:	f003 0304 	and.w	r3, r3, #4
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d020      	beq.n	8007bd0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	f003 0304 	and.w	r3, r3, #4
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d01b      	beq.n	8007bd0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	f06f 0204 	mvn.w	r2, #4
 8007ba0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	2202      	movs	r2, #2
 8007ba6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	699b      	ldr	r3, [r3, #24]
 8007bae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d003      	beq.n	8007bbe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007bb6:	6878      	ldr	r0, [r7, #4]
 8007bb8:	f7f9 fed4 	bl	8001964 <HAL_TIM_IC_CaptureCallback>
 8007bbc:	e005      	b.n	8007bca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007bbe:	6878      	ldr	r0, [r7, #4]
 8007bc0:	f000 f8a7 	bl	8007d12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007bc4:	6878      	ldr	r0, [r7, #4]
 8007bc6:	f000 f8ad 	bl	8007d24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	2200      	movs	r2, #0
 8007bce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007bd0:	68bb      	ldr	r3, [r7, #8]
 8007bd2:	f003 0308 	and.w	r3, r3, #8
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d020      	beq.n	8007c1c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	f003 0308 	and.w	r3, r3, #8
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d01b      	beq.n	8007c1c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	f06f 0208 	mvn.w	r2, #8
 8007bec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	2204      	movs	r2, #4
 8007bf2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	69db      	ldr	r3, [r3, #28]
 8007bfa:	f003 0303 	and.w	r3, r3, #3
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d003      	beq.n	8007c0a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007c02:	6878      	ldr	r0, [r7, #4]
 8007c04:	f7f9 feae 	bl	8001964 <HAL_TIM_IC_CaptureCallback>
 8007c08:	e005      	b.n	8007c16 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c0a:	6878      	ldr	r0, [r7, #4]
 8007c0c:	f000 f881 	bl	8007d12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c10:	6878      	ldr	r0, [r7, #4]
 8007c12:	f000 f887 	bl	8007d24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	2200      	movs	r2, #0
 8007c1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007c1c:	68bb      	ldr	r3, [r7, #8]
 8007c1e:	f003 0310 	and.w	r3, r3, #16
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d020      	beq.n	8007c68 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	f003 0310 	and.w	r3, r3, #16
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d01b      	beq.n	8007c68 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	f06f 0210 	mvn.w	r2, #16
 8007c38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	2208      	movs	r2, #8
 8007c3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	69db      	ldr	r3, [r3, #28]
 8007c46:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d003      	beq.n	8007c56 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007c4e:	6878      	ldr	r0, [r7, #4]
 8007c50:	f7f9 fe88 	bl	8001964 <HAL_TIM_IC_CaptureCallback>
 8007c54:	e005      	b.n	8007c62 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c56:	6878      	ldr	r0, [r7, #4]
 8007c58:	f000 f85b 	bl	8007d12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c5c:	6878      	ldr	r0, [r7, #4]
 8007c5e:	f000 f861 	bl	8007d24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	2200      	movs	r2, #0
 8007c66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007c68:	68bb      	ldr	r3, [r7, #8]
 8007c6a:	f003 0301 	and.w	r3, r3, #1
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d00c      	beq.n	8007c8c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	f003 0301 	and.w	r3, r3, #1
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d007      	beq.n	8007c8c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	f06f 0201 	mvn.w	r2, #1
 8007c84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007c86:	6878      	ldr	r0, [r7, #4]
 8007c88:	f000 f83a 	bl	8007d00 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8007c8c:	68bb      	ldr	r3, [r7, #8]
 8007c8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d00c      	beq.n	8007cb0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d007      	beq.n	8007cb0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8007ca8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007caa:	6878      	ldr	r0, [r7, #4]
 8007cac:	f000 f945 	bl	8007f3a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007cb0:	68bb      	ldr	r3, [r7, #8]
 8007cb2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d00c      	beq.n	8007cd4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d007      	beq.n	8007cd4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007ccc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007cce:	6878      	ldr	r0, [r7, #4]
 8007cd0:	f000 f831 	bl	8007d36 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007cd4:	68bb      	ldr	r3, [r7, #8]
 8007cd6:	f003 0320 	and.w	r3, r3, #32
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d00c      	beq.n	8007cf8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	f003 0320 	and.w	r3, r3, #32
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d007      	beq.n	8007cf8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	f06f 0220 	mvn.w	r2, #32
 8007cf0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007cf2:	6878      	ldr	r0, [r7, #4]
 8007cf4:	f000 f918 	bl	8007f28 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007cf8:	bf00      	nop
 8007cfa:	3710      	adds	r7, #16
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	bd80      	pop	{r7, pc}

08007d00 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007d00:	b480      	push	{r7}
 8007d02:	b083      	sub	sp, #12
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007d08:	bf00      	nop
 8007d0a:	370c      	adds	r7, #12
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	bc80      	pop	{r7}
 8007d10:	4770      	bx	lr

08007d12 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007d12:	b480      	push	{r7}
 8007d14:	b083      	sub	sp, #12
 8007d16:	af00      	add	r7, sp, #0
 8007d18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007d1a:	bf00      	nop
 8007d1c:	370c      	adds	r7, #12
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	bc80      	pop	{r7}
 8007d22:	4770      	bx	lr

08007d24 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007d24:	b480      	push	{r7}
 8007d26:	b083      	sub	sp, #12
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007d2c:	bf00      	nop
 8007d2e:	370c      	adds	r7, #12
 8007d30:	46bd      	mov	sp, r7
 8007d32:	bc80      	pop	{r7}
 8007d34:	4770      	bx	lr

08007d36 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007d36:	b480      	push	{r7}
 8007d38:	b083      	sub	sp, #12
 8007d3a:	af00      	add	r7, sp, #0
 8007d3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007d3e:	bf00      	nop
 8007d40:	370c      	adds	r7, #12
 8007d42:	46bd      	mov	sp, r7
 8007d44:	bc80      	pop	{r7}
 8007d46:	4770      	bx	lr

08007d48 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007d48:	b480      	push	{r7}
 8007d4a:	b085      	sub	sp, #20
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
 8007d50:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	4a2f      	ldr	r2, [pc, #188]	@ (8007e18 <TIM_Base_SetConfig+0xd0>)
 8007d5c:	4293      	cmp	r3, r2
 8007d5e:	d00b      	beq.n	8007d78 <TIM_Base_SetConfig+0x30>
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d66:	d007      	beq.n	8007d78 <TIM_Base_SetConfig+0x30>
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	4a2c      	ldr	r2, [pc, #176]	@ (8007e1c <TIM_Base_SetConfig+0xd4>)
 8007d6c:	4293      	cmp	r3, r2
 8007d6e:	d003      	beq.n	8007d78 <TIM_Base_SetConfig+0x30>
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	4a2b      	ldr	r2, [pc, #172]	@ (8007e20 <TIM_Base_SetConfig+0xd8>)
 8007d74:	4293      	cmp	r3, r2
 8007d76:	d108      	bne.n	8007d8a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007d7e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007d80:	683b      	ldr	r3, [r7, #0]
 8007d82:	685b      	ldr	r3, [r3, #4]
 8007d84:	68fa      	ldr	r2, [r7, #12]
 8007d86:	4313      	orrs	r3, r2
 8007d88:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	4a22      	ldr	r2, [pc, #136]	@ (8007e18 <TIM_Base_SetConfig+0xd0>)
 8007d8e:	4293      	cmp	r3, r2
 8007d90:	d00b      	beq.n	8007daa <TIM_Base_SetConfig+0x62>
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d98:	d007      	beq.n	8007daa <TIM_Base_SetConfig+0x62>
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	4a1f      	ldr	r2, [pc, #124]	@ (8007e1c <TIM_Base_SetConfig+0xd4>)
 8007d9e:	4293      	cmp	r3, r2
 8007da0:	d003      	beq.n	8007daa <TIM_Base_SetConfig+0x62>
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	4a1e      	ldr	r2, [pc, #120]	@ (8007e20 <TIM_Base_SetConfig+0xd8>)
 8007da6:	4293      	cmp	r3, r2
 8007da8:	d108      	bne.n	8007dbc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007db0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007db2:	683b      	ldr	r3, [r7, #0]
 8007db4:	68db      	ldr	r3, [r3, #12]
 8007db6:	68fa      	ldr	r2, [r7, #12]
 8007db8:	4313      	orrs	r3, r2
 8007dba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007dc2:	683b      	ldr	r3, [r7, #0]
 8007dc4:	695b      	ldr	r3, [r3, #20]
 8007dc6:	4313      	orrs	r3, r2
 8007dc8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	68fa      	ldr	r2, [r7, #12]
 8007dce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007dd0:	683b      	ldr	r3, [r7, #0]
 8007dd2:	689a      	ldr	r2, [r3, #8]
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007dd8:	683b      	ldr	r3, [r7, #0]
 8007dda:	681a      	ldr	r2, [r3, #0]
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	4a0d      	ldr	r2, [pc, #52]	@ (8007e18 <TIM_Base_SetConfig+0xd0>)
 8007de4:	4293      	cmp	r3, r2
 8007de6:	d103      	bne.n	8007df0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007de8:	683b      	ldr	r3, [r7, #0]
 8007dea:	691a      	ldr	r2, [r3, #16]
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	2201      	movs	r2, #1
 8007df4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	691b      	ldr	r3, [r3, #16]
 8007dfa:	f003 0301 	and.w	r3, r3, #1
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d005      	beq.n	8007e0e <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	691b      	ldr	r3, [r3, #16]
 8007e06:	f023 0201 	bic.w	r2, r3, #1
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	611a      	str	r2, [r3, #16]
  }
}
 8007e0e:	bf00      	nop
 8007e10:	3714      	adds	r7, #20
 8007e12:	46bd      	mov	sp, r7
 8007e14:	bc80      	pop	{r7}
 8007e16:	4770      	bx	lr
 8007e18:	40012c00 	.word	0x40012c00
 8007e1c:	40000400 	.word	0x40000400
 8007e20:	40000800 	.word	0x40000800

08007e24 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007e24:	b480      	push	{r7}
 8007e26:	b087      	sub	sp, #28
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	60f8      	str	r0, [r7, #12]
 8007e2c:	60b9      	str	r1, [r7, #8]
 8007e2e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007e30:	68bb      	ldr	r3, [r7, #8]
 8007e32:	f003 031f 	and.w	r3, r3, #31
 8007e36:	2201      	movs	r2, #1
 8007e38:	fa02 f303 	lsl.w	r3, r2, r3
 8007e3c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	6a1a      	ldr	r2, [r3, #32]
 8007e42:	697b      	ldr	r3, [r7, #20]
 8007e44:	43db      	mvns	r3, r3
 8007e46:	401a      	ands	r2, r3
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	6a1a      	ldr	r2, [r3, #32]
 8007e50:	68bb      	ldr	r3, [r7, #8]
 8007e52:	f003 031f 	and.w	r3, r3, #31
 8007e56:	6879      	ldr	r1, [r7, #4]
 8007e58:	fa01 f303 	lsl.w	r3, r1, r3
 8007e5c:	431a      	orrs	r2, r3
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	621a      	str	r2, [r3, #32]
}
 8007e62:	bf00      	nop
 8007e64:	371c      	adds	r7, #28
 8007e66:	46bd      	mov	sp, r7
 8007e68:	bc80      	pop	{r7}
 8007e6a:	4770      	bx	lr

08007e6c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007e6c:	b480      	push	{r7}
 8007e6e:	b085      	sub	sp, #20
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	6078      	str	r0, [r7, #4]
 8007e74:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007e7c:	2b01      	cmp	r3, #1
 8007e7e:	d101      	bne.n	8007e84 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007e80:	2302      	movs	r3, #2
 8007e82:	e046      	b.n	8007f12 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	2201      	movs	r2, #1
 8007e88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	2202      	movs	r2, #2
 8007e90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	685b      	ldr	r3, [r3, #4]
 8007e9a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	689b      	ldr	r3, [r3, #8]
 8007ea2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007eaa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007eac:	683b      	ldr	r3, [r7, #0]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	68fa      	ldr	r2, [r7, #12]
 8007eb2:	4313      	orrs	r3, r2
 8007eb4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	68fa      	ldr	r2, [r7, #12]
 8007ebc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	4a16      	ldr	r2, [pc, #88]	@ (8007f1c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8007ec4:	4293      	cmp	r3, r2
 8007ec6:	d00e      	beq.n	8007ee6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007ed0:	d009      	beq.n	8007ee6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	4a12      	ldr	r2, [pc, #72]	@ (8007f20 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8007ed8:	4293      	cmp	r3, r2
 8007eda:	d004      	beq.n	8007ee6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	4a10      	ldr	r2, [pc, #64]	@ (8007f24 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8007ee2:	4293      	cmp	r3, r2
 8007ee4:	d10c      	bne.n	8007f00 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007ee6:	68bb      	ldr	r3, [r7, #8]
 8007ee8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007eec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007eee:	683b      	ldr	r3, [r7, #0]
 8007ef0:	685b      	ldr	r3, [r3, #4]
 8007ef2:	68ba      	ldr	r2, [r7, #8]
 8007ef4:	4313      	orrs	r3, r2
 8007ef6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	68ba      	ldr	r2, [r7, #8]
 8007efe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2201      	movs	r2, #1
 8007f04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007f10:	2300      	movs	r3, #0
}
 8007f12:	4618      	mov	r0, r3
 8007f14:	3714      	adds	r7, #20
 8007f16:	46bd      	mov	sp, r7
 8007f18:	bc80      	pop	{r7}
 8007f1a:	4770      	bx	lr
 8007f1c:	40012c00 	.word	0x40012c00
 8007f20:	40000400 	.word	0x40000400
 8007f24:	40000800 	.word	0x40000800

08007f28 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007f28:	b480      	push	{r7}
 8007f2a:	b083      	sub	sp, #12
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007f30:	bf00      	nop
 8007f32:	370c      	adds	r7, #12
 8007f34:	46bd      	mov	sp, r7
 8007f36:	bc80      	pop	{r7}
 8007f38:	4770      	bx	lr

08007f3a <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007f3a:	b480      	push	{r7}
 8007f3c:	b083      	sub	sp, #12
 8007f3e:	af00      	add	r7, sp, #0
 8007f40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007f42:	bf00      	nop
 8007f44:	370c      	adds	r7, #12
 8007f46:	46bd      	mov	sp, r7
 8007f48:	bc80      	pop	{r7}
 8007f4a:	4770      	bx	lr

08007f4c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007f4c:	b580      	push	{r7, lr}
 8007f4e:	b082      	sub	sp, #8
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d101      	bne.n	8007f5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007f5a:	2301      	movs	r3, #1
 8007f5c:	e042      	b.n	8007fe4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007f64:	b2db      	uxtb	r3, r3
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d106      	bne.n	8007f78 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	2200      	movs	r2, #0
 8007f6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007f72:	6878      	ldr	r0, [r7, #4]
 8007f74:	f7fa fec4 	bl	8002d00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2224      	movs	r2, #36	@ 0x24
 8007f7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	68da      	ldr	r2, [r3, #12]
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007f8e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007f90:	6878      	ldr	r0, [r7, #4]
 8007f92:	f000 f971 	bl	8008278 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	691a      	ldr	r2, [r3, #16]
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007fa4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	695a      	ldr	r2, [r3, #20]
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007fb4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	68da      	ldr	r2, [r3, #12]
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007fc4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	2200      	movs	r2, #0
 8007fca:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	2220      	movs	r2, #32
 8007fd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	2220      	movs	r2, #32
 8007fd8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	2200      	movs	r2, #0
 8007fe0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8007fe2:	2300      	movs	r3, #0
}
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	3708      	adds	r7, #8
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	bd80      	pop	{r7, pc}

08007fec <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007fec:	b580      	push	{r7, lr}
 8007fee:	b08a      	sub	sp, #40	@ 0x28
 8007ff0:	af02      	add	r7, sp, #8
 8007ff2:	60f8      	str	r0, [r7, #12]
 8007ff4:	60b9      	str	r1, [r7, #8]
 8007ff6:	603b      	str	r3, [r7, #0]
 8007ff8:	4613      	mov	r3, r2
 8007ffa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008006:	b2db      	uxtb	r3, r3
 8008008:	2b20      	cmp	r3, #32
 800800a:	d175      	bne.n	80080f8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800800c:	68bb      	ldr	r3, [r7, #8]
 800800e:	2b00      	cmp	r3, #0
 8008010:	d002      	beq.n	8008018 <HAL_UART_Transmit+0x2c>
 8008012:	88fb      	ldrh	r3, [r7, #6]
 8008014:	2b00      	cmp	r3, #0
 8008016:	d101      	bne.n	800801c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008018:	2301      	movs	r3, #1
 800801a:	e06e      	b.n	80080fa <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	2200      	movs	r2, #0
 8008020:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	2221      	movs	r2, #33	@ 0x21
 8008026:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800802a:	f7fa ff31 	bl	8002e90 <HAL_GetTick>
 800802e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	88fa      	ldrh	r2, [r7, #6]
 8008034:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	88fa      	ldrh	r2, [r7, #6]
 800803a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	689b      	ldr	r3, [r3, #8]
 8008040:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008044:	d108      	bne.n	8008058 <HAL_UART_Transmit+0x6c>
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	691b      	ldr	r3, [r3, #16]
 800804a:	2b00      	cmp	r3, #0
 800804c:	d104      	bne.n	8008058 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800804e:	2300      	movs	r3, #0
 8008050:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008052:	68bb      	ldr	r3, [r7, #8]
 8008054:	61bb      	str	r3, [r7, #24]
 8008056:	e003      	b.n	8008060 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008058:	68bb      	ldr	r3, [r7, #8]
 800805a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800805c:	2300      	movs	r3, #0
 800805e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008060:	e02e      	b.n	80080c0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008062:	683b      	ldr	r3, [r7, #0]
 8008064:	9300      	str	r3, [sp, #0]
 8008066:	697b      	ldr	r3, [r7, #20]
 8008068:	2200      	movs	r2, #0
 800806a:	2180      	movs	r1, #128	@ 0x80
 800806c:	68f8      	ldr	r0, [r7, #12]
 800806e:	f000 f848 	bl	8008102 <UART_WaitOnFlagUntilTimeout>
 8008072:	4603      	mov	r3, r0
 8008074:	2b00      	cmp	r3, #0
 8008076:	d005      	beq.n	8008084 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	2220      	movs	r2, #32
 800807c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8008080:	2303      	movs	r3, #3
 8008082:	e03a      	b.n	80080fa <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8008084:	69fb      	ldr	r3, [r7, #28]
 8008086:	2b00      	cmp	r3, #0
 8008088:	d10b      	bne.n	80080a2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800808a:	69bb      	ldr	r3, [r7, #24]
 800808c:	881b      	ldrh	r3, [r3, #0]
 800808e:	461a      	mov	r2, r3
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008098:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800809a:	69bb      	ldr	r3, [r7, #24]
 800809c:	3302      	adds	r3, #2
 800809e:	61bb      	str	r3, [r7, #24]
 80080a0:	e007      	b.n	80080b2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80080a2:	69fb      	ldr	r3, [r7, #28]
 80080a4:	781a      	ldrb	r2, [r3, #0]
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80080ac:	69fb      	ldr	r3, [r7, #28]
 80080ae:	3301      	adds	r3, #1
 80080b0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80080b6:	b29b      	uxth	r3, r3
 80080b8:	3b01      	subs	r3, #1
 80080ba:	b29a      	uxth	r2, r3
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80080c4:	b29b      	uxth	r3, r3
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d1cb      	bne.n	8008062 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80080ca:	683b      	ldr	r3, [r7, #0]
 80080cc:	9300      	str	r3, [sp, #0]
 80080ce:	697b      	ldr	r3, [r7, #20]
 80080d0:	2200      	movs	r2, #0
 80080d2:	2140      	movs	r1, #64	@ 0x40
 80080d4:	68f8      	ldr	r0, [r7, #12]
 80080d6:	f000 f814 	bl	8008102 <UART_WaitOnFlagUntilTimeout>
 80080da:	4603      	mov	r3, r0
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d005      	beq.n	80080ec <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	2220      	movs	r2, #32
 80080e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80080e8:	2303      	movs	r3, #3
 80080ea:	e006      	b.n	80080fa <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	2220      	movs	r2, #32
 80080f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80080f4:	2300      	movs	r3, #0
 80080f6:	e000      	b.n	80080fa <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80080f8:	2302      	movs	r3, #2
  }
}
 80080fa:	4618      	mov	r0, r3
 80080fc:	3720      	adds	r7, #32
 80080fe:	46bd      	mov	sp, r7
 8008100:	bd80      	pop	{r7, pc}

08008102 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008102:	b580      	push	{r7, lr}
 8008104:	b086      	sub	sp, #24
 8008106:	af00      	add	r7, sp, #0
 8008108:	60f8      	str	r0, [r7, #12]
 800810a:	60b9      	str	r1, [r7, #8]
 800810c:	603b      	str	r3, [r7, #0]
 800810e:	4613      	mov	r3, r2
 8008110:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008112:	e03b      	b.n	800818c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008114:	6a3b      	ldr	r3, [r7, #32]
 8008116:	f1b3 3fff 	cmp.w	r3, #4294967295
 800811a:	d037      	beq.n	800818c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800811c:	f7fa feb8 	bl	8002e90 <HAL_GetTick>
 8008120:	4602      	mov	r2, r0
 8008122:	683b      	ldr	r3, [r7, #0]
 8008124:	1ad3      	subs	r3, r2, r3
 8008126:	6a3a      	ldr	r2, [r7, #32]
 8008128:	429a      	cmp	r2, r3
 800812a:	d302      	bcc.n	8008132 <UART_WaitOnFlagUntilTimeout+0x30>
 800812c:	6a3b      	ldr	r3, [r7, #32]
 800812e:	2b00      	cmp	r3, #0
 8008130:	d101      	bne.n	8008136 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008132:	2303      	movs	r3, #3
 8008134:	e03a      	b.n	80081ac <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	68db      	ldr	r3, [r3, #12]
 800813c:	f003 0304 	and.w	r3, r3, #4
 8008140:	2b00      	cmp	r3, #0
 8008142:	d023      	beq.n	800818c <UART_WaitOnFlagUntilTimeout+0x8a>
 8008144:	68bb      	ldr	r3, [r7, #8]
 8008146:	2b80      	cmp	r3, #128	@ 0x80
 8008148:	d020      	beq.n	800818c <UART_WaitOnFlagUntilTimeout+0x8a>
 800814a:	68bb      	ldr	r3, [r7, #8]
 800814c:	2b40      	cmp	r3, #64	@ 0x40
 800814e:	d01d      	beq.n	800818c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	f003 0308 	and.w	r3, r3, #8
 800815a:	2b08      	cmp	r3, #8
 800815c:	d116      	bne.n	800818c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800815e:	2300      	movs	r3, #0
 8008160:	617b      	str	r3, [r7, #20]
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	617b      	str	r3, [r7, #20]
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	685b      	ldr	r3, [r3, #4]
 8008170:	617b      	str	r3, [r7, #20]
 8008172:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008174:	68f8      	ldr	r0, [r7, #12]
 8008176:	f000 f81d 	bl	80081b4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	2208      	movs	r2, #8
 800817e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	2200      	movs	r2, #0
 8008184:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8008188:	2301      	movs	r3, #1
 800818a:	e00f      	b.n	80081ac <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	681a      	ldr	r2, [r3, #0]
 8008192:	68bb      	ldr	r3, [r7, #8]
 8008194:	4013      	ands	r3, r2
 8008196:	68ba      	ldr	r2, [r7, #8]
 8008198:	429a      	cmp	r2, r3
 800819a:	bf0c      	ite	eq
 800819c:	2301      	moveq	r3, #1
 800819e:	2300      	movne	r3, #0
 80081a0:	b2db      	uxtb	r3, r3
 80081a2:	461a      	mov	r2, r3
 80081a4:	79fb      	ldrb	r3, [r7, #7]
 80081a6:	429a      	cmp	r2, r3
 80081a8:	d0b4      	beq.n	8008114 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80081aa:	2300      	movs	r3, #0
}
 80081ac:	4618      	mov	r0, r3
 80081ae:	3718      	adds	r7, #24
 80081b0:	46bd      	mov	sp, r7
 80081b2:	bd80      	pop	{r7, pc}

080081b4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80081b4:	b480      	push	{r7}
 80081b6:	b095      	sub	sp, #84	@ 0x54
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	330c      	adds	r3, #12
 80081c2:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80081c6:	e853 3f00 	ldrex	r3, [r3]
 80081ca:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80081cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081ce:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80081d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	330c      	adds	r3, #12
 80081da:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80081dc:	643a      	str	r2, [r7, #64]	@ 0x40
 80081de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081e0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80081e2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80081e4:	e841 2300 	strex	r3, r2, [r1]
 80081e8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80081ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d1e5      	bne.n	80081bc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	3314      	adds	r3, #20
 80081f6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081f8:	6a3b      	ldr	r3, [r7, #32]
 80081fa:	e853 3f00 	ldrex	r3, [r3]
 80081fe:	61fb      	str	r3, [r7, #28]
   return(result);
 8008200:	69fb      	ldr	r3, [r7, #28]
 8008202:	f023 0301 	bic.w	r3, r3, #1
 8008206:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	3314      	adds	r3, #20
 800820e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008210:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008212:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008214:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008216:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008218:	e841 2300 	strex	r3, r2, [r1]
 800821c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800821e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008220:	2b00      	cmp	r3, #0
 8008222:	d1e5      	bne.n	80081f0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008228:	2b01      	cmp	r3, #1
 800822a:	d119      	bne.n	8008260 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	330c      	adds	r3, #12
 8008232:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	e853 3f00 	ldrex	r3, [r3]
 800823a:	60bb      	str	r3, [r7, #8]
   return(result);
 800823c:	68bb      	ldr	r3, [r7, #8]
 800823e:	f023 0310 	bic.w	r3, r3, #16
 8008242:	647b      	str	r3, [r7, #68]	@ 0x44
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	330c      	adds	r3, #12
 800824a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800824c:	61ba      	str	r2, [r7, #24]
 800824e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008250:	6979      	ldr	r1, [r7, #20]
 8008252:	69ba      	ldr	r2, [r7, #24]
 8008254:	e841 2300 	strex	r3, r2, [r1]
 8008258:	613b      	str	r3, [r7, #16]
   return(result);
 800825a:	693b      	ldr	r3, [r7, #16]
 800825c:	2b00      	cmp	r3, #0
 800825e:	d1e5      	bne.n	800822c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	2220      	movs	r2, #32
 8008264:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	2200      	movs	r2, #0
 800826c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800826e:	bf00      	nop
 8008270:	3754      	adds	r7, #84	@ 0x54
 8008272:	46bd      	mov	sp, r7
 8008274:	bc80      	pop	{r7}
 8008276:	4770      	bx	lr

08008278 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008278:	b580      	push	{r7, lr}
 800827a:	b084      	sub	sp, #16
 800827c:	af00      	add	r7, sp, #0
 800827e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	691b      	ldr	r3, [r3, #16]
 8008286:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	68da      	ldr	r2, [r3, #12]
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	430a      	orrs	r2, r1
 8008294:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	689a      	ldr	r2, [r3, #8]
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	691b      	ldr	r3, [r3, #16]
 800829e:	431a      	orrs	r2, r3
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	695b      	ldr	r3, [r3, #20]
 80082a4:	4313      	orrs	r3, r2
 80082a6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	68db      	ldr	r3, [r3, #12]
 80082ae:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80082b2:	f023 030c 	bic.w	r3, r3, #12
 80082b6:	687a      	ldr	r2, [r7, #4]
 80082b8:	6812      	ldr	r2, [r2, #0]
 80082ba:	68b9      	ldr	r1, [r7, #8]
 80082bc:	430b      	orrs	r3, r1
 80082be:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	695b      	ldr	r3, [r3, #20]
 80082c6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	699a      	ldr	r2, [r3, #24]
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	430a      	orrs	r2, r1
 80082d4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	4a2c      	ldr	r2, [pc, #176]	@ (800838c <UART_SetConfig+0x114>)
 80082dc:	4293      	cmp	r3, r2
 80082de:	d103      	bne.n	80082e8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80082e0:	f7ff f930 	bl	8007544 <HAL_RCC_GetPCLK2Freq>
 80082e4:	60f8      	str	r0, [r7, #12]
 80082e6:	e002      	b.n	80082ee <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80082e8:	f7ff f918 	bl	800751c <HAL_RCC_GetPCLK1Freq>
 80082ec:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80082ee:	68fa      	ldr	r2, [r7, #12]
 80082f0:	4613      	mov	r3, r2
 80082f2:	009b      	lsls	r3, r3, #2
 80082f4:	4413      	add	r3, r2
 80082f6:	009a      	lsls	r2, r3, #2
 80082f8:	441a      	add	r2, r3
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	685b      	ldr	r3, [r3, #4]
 80082fe:	009b      	lsls	r3, r3, #2
 8008300:	fbb2 f3f3 	udiv	r3, r2, r3
 8008304:	4a22      	ldr	r2, [pc, #136]	@ (8008390 <UART_SetConfig+0x118>)
 8008306:	fba2 2303 	umull	r2, r3, r2, r3
 800830a:	095b      	lsrs	r3, r3, #5
 800830c:	0119      	lsls	r1, r3, #4
 800830e:	68fa      	ldr	r2, [r7, #12]
 8008310:	4613      	mov	r3, r2
 8008312:	009b      	lsls	r3, r3, #2
 8008314:	4413      	add	r3, r2
 8008316:	009a      	lsls	r2, r3, #2
 8008318:	441a      	add	r2, r3
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	685b      	ldr	r3, [r3, #4]
 800831e:	009b      	lsls	r3, r3, #2
 8008320:	fbb2 f2f3 	udiv	r2, r2, r3
 8008324:	4b1a      	ldr	r3, [pc, #104]	@ (8008390 <UART_SetConfig+0x118>)
 8008326:	fba3 0302 	umull	r0, r3, r3, r2
 800832a:	095b      	lsrs	r3, r3, #5
 800832c:	2064      	movs	r0, #100	@ 0x64
 800832e:	fb00 f303 	mul.w	r3, r0, r3
 8008332:	1ad3      	subs	r3, r2, r3
 8008334:	011b      	lsls	r3, r3, #4
 8008336:	3332      	adds	r3, #50	@ 0x32
 8008338:	4a15      	ldr	r2, [pc, #84]	@ (8008390 <UART_SetConfig+0x118>)
 800833a:	fba2 2303 	umull	r2, r3, r2, r3
 800833e:	095b      	lsrs	r3, r3, #5
 8008340:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008344:	4419      	add	r1, r3
 8008346:	68fa      	ldr	r2, [r7, #12]
 8008348:	4613      	mov	r3, r2
 800834a:	009b      	lsls	r3, r3, #2
 800834c:	4413      	add	r3, r2
 800834e:	009a      	lsls	r2, r3, #2
 8008350:	441a      	add	r2, r3
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	685b      	ldr	r3, [r3, #4]
 8008356:	009b      	lsls	r3, r3, #2
 8008358:	fbb2 f2f3 	udiv	r2, r2, r3
 800835c:	4b0c      	ldr	r3, [pc, #48]	@ (8008390 <UART_SetConfig+0x118>)
 800835e:	fba3 0302 	umull	r0, r3, r3, r2
 8008362:	095b      	lsrs	r3, r3, #5
 8008364:	2064      	movs	r0, #100	@ 0x64
 8008366:	fb00 f303 	mul.w	r3, r0, r3
 800836a:	1ad3      	subs	r3, r2, r3
 800836c:	011b      	lsls	r3, r3, #4
 800836e:	3332      	adds	r3, #50	@ 0x32
 8008370:	4a07      	ldr	r2, [pc, #28]	@ (8008390 <UART_SetConfig+0x118>)
 8008372:	fba2 2303 	umull	r2, r3, r2, r3
 8008376:	095b      	lsrs	r3, r3, #5
 8008378:	f003 020f 	and.w	r2, r3, #15
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	440a      	add	r2, r1
 8008382:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8008384:	bf00      	nop
 8008386:	3710      	adds	r7, #16
 8008388:	46bd      	mov	sp, r7
 800838a:	bd80      	pop	{r7, pc}
 800838c:	40013800 	.word	0x40013800
 8008390:	51eb851f 	.word	0x51eb851f

08008394 <AD5693_Reset>:
 *      reference https://github.com/adafruit/Adafruit_AD569x
 */

#include "ad5693.h"

HAL_StatusTypeDef AD5693_Reset(void){
 8008394:	b580      	push	{r7, lr}
 8008396:	b084      	sub	sp, #16
 8008398:	af02      	add	r7, sp, #8
	uint8_t command = WRITE_CONTROL_REG;		// Command Byte
 800839a:	2340      	movs	r3, #64	@ 0x40
 800839c:	71fb      	strb	r3, [r7, #7]
	uint8_t highByte = 0b10000000;				// Data High, Reset bit High
 800839e:	2380      	movs	r3, #128	@ 0x80
 80083a0:	71bb      	strb	r3, [r7, #6]
	uint8_t lowByte = 0b00000000;				// Data Low
 80083a2:	2300      	movs	r3, #0
 80083a4:	717b      	strb	r3, [r7, #5]

	// Combine the command and data into a single 3-byte buffer
	uint8_t buffer[3] = {command, highByte, lowByte};
 80083a6:	79fb      	ldrb	r3, [r7, #7]
 80083a8:	703b      	strb	r3, [r7, #0]
 80083aa:	79bb      	ldrb	r3, [r7, #6]
 80083ac:	707b      	strb	r3, [r7, #1]
 80083ae:	797b      	ldrb	r3, [r7, #5]
 80083b0:	70bb      	strb	r3, [r7, #2]
	uint8_t status = HAL_I2C_Master_Transmit(I2C_HANDLE,
 80083b2:	463a      	mov	r2, r7
 80083b4:	230a      	movs	r3, #10
 80083b6:	9300      	str	r3, [sp, #0]
 80083b8:	2303      	movs	r3, #3
 80083ba:	2198      	movs	r1, #152	@ 0x98
 80083bc:	4804      	ldr	r0, [pc, #16]	@ (80083d0 <AD5693_Reset+0x3c>)
 80083be:	f7fc f889 	bl	80044d4 <HAL_I2C_Master_Transmit>
 80083c2:	4603      	mov	r3, r0
 80083c4:	713b      	strb	r3, [r7, #4]
			AD5693_ADDRESS, buffer, 3, 10);
	return status;
 80083c6:	793b      	ldrb	r3, [r7, #4]
}
 80083c8:	4618      	mov	r0, r3
 80083ca:	3708      	adds	r7, #8
 80083cc:	46bd      	mov	sp, r7
 80083ce:	bd80      	pop	{r7, pc}
 80083d0:	20000248 	.word	0x20000248

080083d4 <AD5693_Init>:

HAL_StatusTypeDef AD5693_Init(ad5693_configuration_t ad5693){
 80083d4:	b580      	push	{r7, lr}
 80083d6:	b088      	sub	sp, #32
 80083d8:	af02      	add	r7, sp, #8
 80083da:	6078      	str	r0, [r7, #4]
	// Prepare the command byte
	uint8_t command = WRITE_CONTROL_REG;
 80083dc:	2340      	movs	r3, #64	@ 0x40
 80083de:	75fb      	strb	r3, [r7, #23]

	// Prepare the high and low data bytes
	uint16_t data = 0x0000;
 80083e0:	2300      	movs	r3, #0
 80083e2:	82bb      	strh	r3, [r7, #20]
	data |= ((uint16_t)ad5693.mode << 13); // Set D14 and D13 for the operating mode
 80083e4:	79bb      	ldrb	r3, [r7, #6]
 80083e6:	035b      	lsls	r3, r3, #13
 80083e8:	b21a      	sxth	r2, r3
 80083ea:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80083ee:	4313      	orrs	r3, r2
 80083f0:	b21b      	sxth	r3, r3
 80083f2:	82bb      	strh	r3, [r7, #20]
	data |= ((uint16_t)ad5693.ref_disable << 12); // Set D12 for enable_ref
 80083f4:	793b      	ldrb	r3, [r7, #4]
 80083f6:	031b      	lsls	r3, r3, #12
 80083f8:	b21a      	sxth	r2, r3
 80083fa:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80083fe:	4313      	orrs	r3, r2
 8008400:	b21b      	sxth	r3, r3
 8008402:	82bb      	strh	r3, [r7, #20]
	data |= ((uint16_t)ad5693.gain_x2 << 11);      // Set D11 for the gain
 8008404:	797b      	ldrb	r3, [r7, #5]
 8008406:	02db      	lsls	r3, r3, #11
 8008408:	b21a      	sxth	r2, r3
 800840a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800840e:	4313      	orrs	r3, r2
 8008410:	b21b      	sxth	r3, r3
 8008412:	82bb      	strh	r3, [r7, #20]

	uint8_t highByte = (data >> 8) & 0xFF;
 8008414:	8abb      	ldrh	r3, [r7, #20]
 8008416:	0a1b      	lsrs	r3, r3, #8
 8008418:	b29b      	uxth	r3, r3
 800841a:	74fb      	strb	r3, [r7, #19]
	uint8_t lowByte = data & 0xFF;
 800841c:	8abb      	ldrh	r3, [r7, #20]
 800841e:	74bb      	strb	r3, [r7, #18]

	// Combine the command and data into a single 3-byte buffer
	uint8_t buffer[3] = {command, highByte, lowByte};
 8008420:	7dfb      	ldrb	r3, [r7, #23]
 8008422:	733b      	strb	r3, [r7, #12]
 8008424:	7cfb      	ldrb	r3, [r7, #19]
 8008426:	737b      	strb	r3, [r7, #13]
 8008428:	7cbb      	ldrb	r3, [r7, #18]
 800842a:	73bb      	strb	r3, [r7, #14]
	uint8_t status = HAL_I2C_Master_Transmit(I2C_HANDLE,
 800842c:	f107 020c 	add.w	r2, r7, #12
 8008430:	230a      	movs	r3, #10
 8008432:	9300      	str	r3, [sp, #0]
 8008434:	2303      	movs	r3, #3
 8008436:	2198      	movs	r1, #152	@ 0x98
 8008438:	4804      	ldr	r0, [pc, #16]	@ (800844c <AD5693_Init+0x78>)
 800843a:	f7fc f84b 	bl	80044d4 <HAL_I2C_Master_Transmit>
 800843e:	4603      	mov	r3, r0
 8008440:	747b      	strb	r3, [r7, #17]
					AD5693_ADDRESS, buffer, 3, 10);
	return status;
 8008442:	7c7b      	ldrb	r3, [r7, #17]
}
 8008444:	4618      	mov	r0, r3
 8008446:	3718      	adds	r7, #24
 8008448:	46bd      	mov	sp, r7
 800844a:	bd80      	pop	{r7, pc}
 800844c:	20000248 	.word	0x20000248

08008450 <MovingAvg_Init>:
    uint16_t position;     // Current position in buffer
    bool     initialized;  // Initialization status
} MovingAvgFilter_t;

// Initialize the moving average filter
bool MovingAvg_Init(MovingAvgFilter_t* filter, int32_t* buffer, uint16_t bufferSize) {
 8008450:	b480      	push	{r7}
 8008452:	b087      	sub	sp, #28
 8008454:	af00      	add	r7, sp, #0
 8008456:	60f8      	str	r0, [r7, #12]
 8008458:	60b9      	str	r1, [r7, #8]
 800845a:	4613      	mov	r3, r2
 800845c:	80fb      	strh	r3, [r7, #6]
    if (!filter || !buffer || bufferSize == 0) {
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	2b00      	cmp	r3, #0
 8008462:	d005      	beq.n	8008470 <MovingAvg_Init+0x20>
 8008464:	68bb      	ldr	r3, [r7, #8]
 8008466:	2b00      	cmp	r3, #0
 8008468:	d002      	beq.n	8008470 <MovingAvg_Init+0x20>
 800846a:	88fb      	ldrh	r3, [r7, #6]
 800846c:	2b00      	cmp	r3, #0
 800846e:	d101      	bne.n	8008474 <MovingAvg_Init+0x24>
        return false;
 8008470:	2300      	movs	r3, #0
 8008472:	e022      	b.n	80084ba <MovingAvg_Init+0x6a>
    }

    filter->buffer = buffer;
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	68ba      	ldr	r2, [r7, #8]
 8008478:	601a      	str	r2, [r3, #0]
    filter->bufferSize = bufferSize;
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	88fa      	ldrh	r2, [r7, #6]
 800847e:	811a      	strh	r2, [r3, #8]
    filter->sum = 0;
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	2200      	movs	r2, #0
 8008484:	605a      	str	r2, [r3, #4]
    filter->count = 0;
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	2200      	movs	r2, #0
 800848a:	815a      	strh	r2, [r3, #10]
    filter->position = 0;
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	2200      	movs	r2, #0
 8008490:	819a      	strh	r2, [r3, #12]
    filter->initialized = true;
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	2201      	movs	r2, #1
 8008496:	739a      	strb	r2, [r3, #14]

    // Zero out the buffer
    for (uint16_t i = 0; i < bufferSize; i++) {
 8008498:	2300      	movs	r3, #0
 800849a:	82fb      	strh	r3, [r7, #22]
 800849c:	e008      	b.n	80084b0 <MovingAvg_Init+0x60>
        buffer[i] = 0;
 800849e:	8afb      	ldrh	r3, [r7, #22]
 80084a0:	009b      	lsls	r3, r3, #2
 80084a2:	68ba      	ldr	r2, [r7, #8]
 80084a4:	4413      	add	r3, r2
 80084a6:	2200      	movs	r2, #0
 80084a8:	601a      	str	r2, [r3, #0]
    for (uint16_t i = 0; i < bufferSize; i++) {
 80084aa:	8afb      	ldrh	r3, [r7, #22]
 80084ac:	3301      	adds	r3, #1
 80084ae:	82fb      	strh	r3, [r7, #22]
 80084b0:	8afa      	ldrh	r2, [r7, #22]
 80084b2:	88fb      	ldrh	r3, [r7, #6]
 80084b4:	429a      	cmp	r2, r3
 80084b6:	d3f2      	bcc.n	800849e <MovingAvg_Init+0x4e>
    }

    return true;
 80084b8:	2301      	movs	r3, #1
}
 80084ba:	4618      	mov	r0, r3
 80084bc:	371c      	adds	r7, #28
 80084be:	46bd      	mov	sp, r7
 80084c0:	bc80      	pop	{r7}
 80084c2:	4770      	bx	lr

080084c4 <MovingAvg_Process>:

// Process new sample and return filtered value
int32_t MovingAvg_Process(MovingAvgFilter_t* filter, int32_t newSample) {
 80084c4:	b480      	push	{r7}
 80084c6:	b083      	sub	sp, #12
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	6078      	str	r0, [r7, #4]
 80084cc:	6039      	str	r1, [r7, #0]
    // Check for valid initialization
    if (!filter || !filter->initialized) {
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d006      	beq.n	80084e2 <MovingAvg_Process+0x1e>
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	7b9b      	ldrb	r3, [r3, #14]
 80084d8:	f083 0301 	eor.w	r3, r3, #1
 80084dc:	b2db      	uxtb	r3, r3
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d001      	beq.n	80084e6 <MovingAvg_Process+0x22>
        return newSample;  // Return raw value if filter is invalid
 80084e2:	683b      	ldr	r3, [r7, #0]
 80084e4:	e040      	b.n	8008568 <MovingAvg_Process+0xa4>
    }

    // Protect against integer overflow in sum calculation
    filter->sum -= filter->buffer[filter->position];
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	685a      	ldr	r2, [r3, #4]
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	6819      	ldr	r1, [r3, #0]
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	899b      	ldrh	r3, [r3, #12]
 80084f2:	009b      	lsls	r3, r3, #2
 80084f4:	440b      	add	r3, r1
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	1ad2      	subs	r2, r2, r3
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	605a      	str	r2, [r3, #4]
    filter->sum += newSample;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	685a      	ldr	r2, [r3, #4]
 8008502:	683b      	ldr	r3, [r7, #0]
 8008504:	441a      	add	r2, r3
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	605a      	str	r2, [r3, #4]

    // Store new sample
    filter->buffer[filter->position] = newSample;
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681a      	ldr	r2, [r3, #0]
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	899b      	ldrh	r3, [r3, #12]
 8008512:	009b      	lsls	r3, r3, #2
 8008514:	4413      	add	r3, r2
 8008516:	683a      	ldr	r2, [r7, #0]
 8008518:	601a      	str	r2, [r3, #0]

    // Update position
    filter->position++;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	899b      	ldrh	r3, [r3, #12]
 800851e:	3301      	adds	r3, #1
 8008520:	b29a      	uxth	r2, r3
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	819a      	strh	r2, [r3, #12]
    if (filter->position >= filter->bufferSize) {
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	899a      	ldrh	r2, [r3, #12]
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	891b      	ldrh	r3, [r3, #8]
 800852e:	429a      	cmp	r2, r3
 8008530:	d302      	bcc.n	8008538 <MovingAvg_Process+0x74>
        filter->position = 0;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	2200      	movs	r2, #0
 8008536:	819a      	strh	r2, [r3, #12]
    }

    // Update count of samples
    if (filter->count < filter->bufferSize) {
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	895a      	ldrh	r2, [r3, #10]
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	891b      	ldrh	r3, [r3, #8]
 8008540:	429a      	cmp	r2, r3
 8008542:	d205      	bcs.n	8008550 <MovingAvg_Process+0x8c>
        filter->count++;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	895b      	ldrh	r3, [r3, #10]
 8008548:	3301      	adds	r3, #1
 800854a:	b29a      	uxth	r2, r3
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	815a      	strh	r2, [r3, #10]
    }

    // Calculate average, avoiding division by zero
    return (filter->count > 0) ? (filter->sum / filter->count) : newSample;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	895b      	ldrh	r3, [r3, #10]
 8008554:	2b00      	cmp	r3, #0
 8008556:	d006      	beq.n	8008566 <MovingAvg_Process+0xa2>
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	685b      	ldr	r3, [r3, #4]
 800855c:	687a      	ldr	r2, [r7, #4]
 800855e:	8952      	ldrh	r2, [r2, #10]
 8008560:	fb93 f3f2 	sdiv	r3, r3, r2
 8008564:	e000      	b.n	8008568 <MovingAvg_Process+0xa4>
 8008566:	683b      	ldr	r3, [r7, #0]
}
 8008568:	4618      	mov	r0, r3
 800856a:	370c      	adds	r7, #12
 800856c:	46bd      	mov	sp, r7
 800856e:	bc80      	pop	{r7}
 8008570:	4770      	bx	lr
	...

08008574 <Get_Current_Filtered>:

// Example usage with the existing Get_Current_Filtered function
#define FILTER_SIZE 20

int32_t Get_Current_Filtered(int32_t currentReading) {
 8008574:	b580      	push	{r7, lr}
 8008576:	b082      	sub	sp, #8
 8008578:	af00      	add	r7, sp, #0
 800857a:	6078      	str	r0, [r7, #4]
    static int32_t filterBuffer[FILTER_SIZE] = {0};
    static MovingAvgFilter_t filter = {0};
    static bool isInitialized = false;

    // One-time initialization
    if (!isInitialized) {
 800857c:	4b10      	ldr	r3, [pc, #64]	@ (80085c0 <Get_Current_Filtered+0x4c>)
 800857e:	781b      	ldrb	r3, [r3, #0]
 8008580:	f083 0301 	eor.w	r3, r3, #1
 8008584:	b2db      	uxtb	r3, r3
 8008586:	2b00      	cmp	r3, #0
 8008588:	d011      	beq.n	80085ae <Get_Current_Filtered+0x3a>
        isInitialized = MovingAvg_Init(&filter, filterBuffer, FILTER_SIZE);
 800858a:	2214      	movs	r2, #20
 800858c:	490d      	ldr	r1, [pc, #52]	@ (80085c4 <Get_Current_Filtered+0x50>)
 800858e:	480e      	ldr	r0, [pc, #56]	@ (80085c8 <Get_Current_Filtered+0x54>)
 8008590:	f7ff ff5e 	bl	8008450 <MovingAvg_Init>
 8008594:	4603      	mov	r3, r0
 8008596:	461a      	mov	r2, r3
 8008598:	4b09      	ldr	r3, [pc, #36]	@ (80085c0 <Get_Current_Filtered+0x4c>)
 800859a:	701a      	strb	r2, [r3, #0]
        if (!isInitialized) {
 800859c:	4b08      	ldr	r3, [pc, #32]	@ (80085c0 <Get_Current_Filtered+0x4c>)
 800859e:	781b      	ldrb	r3, [r3, #0]
 80085a0:	f083 0301 	eor.w	r3, r3, #1
 80085a4:	b2db      	uxtb	r3, r3
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d001      	beq.n	80085ae <Get_Current_Filtered+0x3a>
            return currentReading;  // Return raw value if initialization fails
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	e004      	b.n	80085b8 <Get_Current_Filtered+0x44>
        }
    }

    return MovingAvg_Process(&filter, currentReading);
 80085ae:	6879      	ldr	r1, [r7, #4]
 80085b0:	4805      	ldr	r0, [pc, #20]	@ (80085c8 <Get_Current_Filtered+0x54>)
 80085b2:	f7ff ff87 	bl	80084c4 <MovingAvg_Process>
 80085b6:	4603      	mov	r3, r0
}
 80085b8:	4618      	mov	r0, r3
 80085ba:	3708      	adds	r7, #8
 80085bc:	46bd      	mov	sp, r7
 80085be:	bd80      	pop	{r7, pc}
 80085c0:	2000045c 	.word	0x2000045c
 80085c4:	20000470 	.word	0x20000470
 80085c8:	20000460 	.word	0x20000460

080085cc <Write_Reg>:
 * @param  reg    The register address to write to.
 * @param  value  The value to write to the register.
 *
 * @retval HAL_StatusTypeDef  Returns HAL_OK on success, or HAL_ERROR if the write operation fails.
 */
static HAL_StatusTypeDef Write_Reg(uint8_t reg, uint8_t value) {
 80085cc:	b580      	push	{r7, lr}
 80085ce:	b088      	sub	sp, #32
 80085d0:	af04      	add	r7, sp, #16
 80085d2:	4603      	mov	r3, r0
 80085d4:	460a      	mov	r2, r1
 80085d6:	71fb      	strb	r3, [r7, #7]
 80085d8:	4613      	mov	r3, r2
 80085da:	71bb      	strb	r3, [r7, #6]
	uint8_t buf[1] = {value}, status;
 80085dc:	79bb      	ldrb	r3, [r7, #6]
 80085de:	733b      	strb	r3, [r7, #12]

	status = HAL_I2C_Mem_Write(&LTC2959_I2C_PORT, LTC2959_I2C_ADDR, reg, 1, &buf[0], 1, 100);
 80085e0:	79fb      	ldrb	r3, [r7, #7]
 80085e2:	b29a      	uxth	r2, r3
 80085e4:	2364      	movs	r3, #100	@ 0x64
 80085e6:	9302      	str	r3, [sp, #8]
 80085e8:	2301      	movs	r3, #1
 80085ea:	9301      	str	r3, [sp, #4]
 80085ec:	f107 030c 	add.w	r3, r7, #12
 80085f0:	9300      	str	r3, [sp, #0]
 80085f2:	2301      	movs	r3, #1
 80085f4:	21c6      	movs	r1, #198	@ 0xc6
 80085f6:	4805      	ldr	r0, [pc, #20]	@ (800860c <Write_Reg+0x40>)
 80085f8:	f7fc f86a 	bl	80046d0 <HAL_I2C_Mem_Write>
 80085fc:	4603      	mov	r3, r0
 80085fe:	73fb      	strb	r3, [r7, #15]
	return status;
 8008600:	7bfb      	ldrb	r3, [r7, #15]
}
 8008602:	4618      	mov	r0, r3
 8008604:	3710      	adds	r7, #16
 8008606:	46bd      	mov	sp, r7
 8008608:	bd80      	pop	{r7, pc}
 800860a:	bf00      	nop
 800860c:	2000029c 	.word	0x2000029c

08008610 <Read_Reg>:
 *
 * @param  reg  The register address to read from.
 *
 * @retval uint8_t  Returns the value read from the register.
 */
static uint8_t Read_Reg(uint8_t reg){
 8008610:	b580      	push	{r7, lr}
 8008612:	b088      	sub	sp, #32
 8008614:	af04      	add	r7, sp, #16
 8008616:	4603      	mov	r3, r0
 8008618:	71fb      	strb	r3, [r7, #7]
	uint8_t value;
	HAL_I2C_Mem_Read(&LTC2959_I2C_PORT, LTC2959_I2C_ADDR, reg, 1, &value, 1, 100);
 800861a:	79fb      	ldrb	r3, [r7, #7]
 800861c:	b29a      	uxth	r2, r3
 800861e:	2364      	movs	r3, #100	@ 0x64
 8008620:	9302      	str	r3, [sp, #8]
 8008622:	2301      	movs	r3, #1
 8008624:	9301      	str	r3, [sp, #4]
 8008626:	f107 030f 	add.w	r3, r7, #15
 800862a:	9300      	str	r3, [sp, #0]
 800862c:	2301      	movs	r3, #1
 800862e:	21c6      	movs	r1, #198	@ 0xc6
 8008630:	4803      	ldr	r0, [pc, #12]	@ (8008640 <Read_Reg+0x30>)
 8008632:	f7fc f947 	bl	80048c4 <HAL_I2C_Mem_Read>
	return value;
 8008636:	7bfb      	ldrb	r3, [r7, #15]
}
 8008638:	4618      	mov	r0, r3
 800863a:	3710      	adds	r7, #16
 800863c:	46bd      	mov	sp, r7
 800863e:	bd80      	pop	{r7, pc}
 8008640:	2000029c 	.word	0x2000029c

08008644 <Set_ADC_Mode>:
 * This function writes the specified ADC mode to the ADC control register.
 *
 * @param  mode  This parameter can be a value of @ref ADC_MODE.
 * Specifies the ADC mode to be set.
 */
static HAL_StatusTypeDef Set_ADC_Mode(uint8_t mode){
 8008644:	b580      	push	{r7, lr}
 8008646:	b084      	sub	sp, #16
 8008648:	af00      	add	r7, sp, #0
 800864a:	4603      	mov	r3, r0
 800864c:	71fb      	strb	r3, [r7, #7]
    uint8_t value = Read_Reg(REG_ADC_CONTROL);
 800864e:	2001      	movs	r0, #1
 8008650:	f7ff ffde 	bl	8008610 <Read_Reg>
 8008654:	4603      	mov	r3, r0
 8008656:	73fb      	strb	r3, [r7, #15]
    MODIFY_REG(value, CTRL_ADC_MODE_MASK, mode);
 8008658:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800865c:	f003 031f 	and.w	r3, r3, #31
 8008660:	b25a      	sxtb	r2, r3
 8008662:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008666:	4313      	orrs	r3, r2
 8008668:	b25b      	sxtb	r3, r3
 800866a:	73fb      	strb	r3, [r7, #15]
    return Write_Reg(REG_ADC_CONTROL, value);
 800866c:	7bfb      	ldrb	r3, [r7, #15]
 800866e:	4619      	mov	r1, r3
 8008670:	2001      	movs	r0, #1
 8008672:	f7ff ffab 	bl	80085cc <Write_Reg>
 8008676:	4603      	mov	r3, r0
}
 8008678:	4618      	mov	r0, r3
 800867a:	3710      	adds	r7, #16
 800867c:	46bd      	mov	sp, r7
 800867e:	bd80      	pop	{r7, pc}

08008680 <Set_GPIO_Configure>:
 * This function configures the GPIO pin to the specified mode.
 *
 * @param  config  This parameter can be a value of @ref GPIO_CONFIG.
 * Specifies the GPIO mode to be set.
 */
static HAL_StatusTypeDef Set_GPIO_Configure(uint8_t config) {
 8008680:	b580      	push	{r7, lr}
 8008682:	b084      	sub	sp, #16
 8008684:	af00      	add	r7, sp, #0
 8008686:	4603      	mov	r3, r0
 8008688:	71fb      	strb	r3, [r7, #7]
    uint8_t value = Read_Reg(REG_ADC_CONTROL);
 800868a:	2001      	movs	r0, #1
 800868c:	f7ff ffc0 	bl	8008610 <Read_Reg>
 8008690:	4603      	mov	r3, r0
 8008692:	73fb      	strb	r3, [r7, #15]
    MODIFY_REG(value, CTRL_GPIO_CONFIG_MASK, config);
 8008694:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008698:	f023 0318 	bic.w	r3, r3, #24
 800869c:	b25a      	sxtb	r2, r3
 800869e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80086a2:	4313      	orrs	r3, r2
 80086a4:	b25b      	sxtb	r3, r3
 80086a6:	73fb      	strb	r3, [r7, #15]
    return Write_Reg(REG_ADC_CONTROL, value);
 80086a8:	7bfb      	ldrb	r3, [r7, #15]
 80086aa:	4619      	mov	r1, r3
 80086ac:	2001      	movs	r0, #1
 80086ae:	f7ff ff8d 	bl	80085cc <Write_Reg>
 80086b2:	4603      	mov	r3, r0
}
 80086b4:	4618      	mov	r0, r3
 80086b6:	3710      	adds	r7, #16
 80086b8:	46bd      	mov	sp, r7
 80086ba:	bd80      	pop	{r7, pc}

080086bc <Set_Voltage_Input>:
 * VDD and SENSEN based on the input parameter.
 *
 * @param  input  This parameter can be a value of @ref VOLTAGE_INPUT.
 * Specifies the voltage input pin (VDD or SENSEN).
 */
static HAL_StatusTypeDef Set_Voltage_Input(uint8_t input) {
 80086bc:	b580      	push	{r7, lr}
 80086be:	b084      	sub	sp, #16
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	4603      	mov	r3, r0
 80086c4:	71fb      	strb	r3, [r7, #7]
    uint8_t value = Read_Reg(REG_ADC_CONTROL);
 80086c6:	2001      	movs	r0, #1
 80086c8:	f7ff ffa2 	bl	8008610 <Read_Reg>
 80086cc:	4603      	mov	r3, r0
 80086ce:	73fb      	strb	r3, [r7, #15]
    MODIFY_REG(value, CTRL_CONFIG_VOLTAGE_INPUT_MASK, input);
 80086d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80086d4:	f023 0304 	bic.w	r3, r3, #4
 80086d8:	b25a      	sxtb	r2, r3
 80086da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80086de:	4313      	orrs	r3, r2
 80086e0:	b25b      	sxtb	r3, r3
 80086e2:	73fb      	strb	r3, [r7, #15]
    return Write_Reg(REG_ADC_CONTROL, value);
 80086e4:	7bfb      	ldrb	r3, [r7, #15]
 80086e6:	4619      	mov	r1, r3
 80086e8:	2001      	movs	r0, #1
 80086ea:	f7ff ff6f 	bl	80085cc <Write_Reg>
 80086ee:	4603      	mov	r3, r0
}
 80086f0:	4618      	mov	r0, r3
 80086f2:	3710      	adds	r7, #16
 80086f4:	46bd      	mov	sp, r7
 80086f6:	bd80      	pop	{r7, pc}

080086f8 <Set_Coulomb_Counter_Deadband>:
 * This function sets the deadband for the Coulomb Counter.
 *
 * @param  deadband  This parameter can be a value of @ref COULOMB_COUNTER_DEADBAND.
 * Specifies the deadband value for the Coulomb Counter.
 */
static HAL_StatusTypeDef Set_Coulomb_Counter_Deadband(uint8_t deadband){
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b084      	sub	sp, #16
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	4603      	mov	r3, r0
 8008700:	71fb      	strb	r3, [r7, #7]
	uint8_t value = Read_Reg(REG_COULOMB_COUNTER_CONTROL);
 8008702:	2002      	movs	r0, #2
 8008704:	f7ff ff84 	bl	8008610 <Read_Reg>
 8008708:	4603      	mov	r3, r0
 800870a:	73fb      	strb	r3, [r7, #15]
    // Set the deadband
	MODIFY_REG(value, CC_CONFIG_DEADBAND_MASK, deadband);
 800870c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008710:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008714:	b25a      	sxtb	r2, r3
 8008716:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800871a:	4313      	orrs	r3, r2
 800871c:	b25b      	sxtb	r3, r3
 800871e:	73fb      	strb	r3, [r7, #15]
	// Ensure reserved bits are set to their default values
	MODIFY_REG(value, CC_CONFIG_RESERVED_54_MASK, CC_CONFIG_RESERVED_54_DEFAULT);
 8008720:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008724:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8008728:	b25b      	sxtb	r3, r3
 800872a:	f043 0310 	orr.w	r3, r3, #16
 800872e:	b25b      	sxtb	r3, r3
 8008730:	73fb      	strb	r3, [r7, #15]
	MODIFY_REG(value, CC_CONFIG_RESERVED_20_MASK, CC_CONFIG_RESERVED_20_DEFAULT);
 8008732:	7bfb      	ldrb	r3, [r7, #15]
 8008734:	f023 0307 	bic.w	r3, r3, #7
 8008738:	73fb      	strb	r3, [r7, #15]
	return Write_Reg(REG_COULOMB_COUNTER_CONTROL, value);
 800873a:	7bfb      	ldrb	r3, [r7, #15]
 800873c:	4619      	mov	r1, r3
 800873e:	2002      	movs	r0, #2
 8008740:	f7ff ff44 	bl	80085cc <Write_Reg>
 8008744:	4603      	mov	r3, r0
}
 8008746:	4618      	mov	r0, r3
 8008748:	3710      	adds	r7, #16
 800874a:	46bd      	mov	sp, r7
 800874c:	bd80      	pop	{r7, pc}

0800874e <LTC2959_Init>:
 * structure provided.
 *
 * @param  config_t  Pointer to a structure of type @ref LTC2959_Config_t containing
 * the initialization parameters for the LTC2959.
 */
void LTC2959_Init(LTC2959_Config_t *config_t){
 800874e:	b580      	push	{r7, lr}
 8008750:	b082      	sub	sp, #8
 8008752:	af00      	add	r7, sp, #0
 8008754:	6078      	str	r0, [r7, #4]
#ifndef _DEBUG
	Set_ADC_Mode(config_t->ADC_mode);
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	781b      	ldrb	r3, [r3, #0]
 800875a:	4618      	mov	r0, r3
 800875c:	f7ff ff72 	bl	8008644 <Set_ADC_Mode>
	HAL_Delay(10);
 8008760:	200a      	movs	r0, #10
 8008762:	f7fa fb9f 	bl	8002ea4 <HAL_Delay>
	Set_GPIO_Configure(config_t->GPIO_config);
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	785b      	ldrb	r3, [r3, #1]
 800876a:	4618      	mov	r0, r3
 800876c:	f7ff ff88 	bl	8008680 <Set_GPIO_Configure>
	HAL_Delay(10);
 8008770:	200a      	movs	r0, #10
 8008772:	f7fa fb97 	bl	8002ea4 <HAL_Delay>
	Set_Voltage_Input(config_t->voltage_input);
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	789b      	ldrb	r3, [r3, #2]
 800877a:	4618      	mov	r0, r3
 800877c:	f7ff ff9e 	bl	80086bc <Set_Voltage_Input>
	HAL_Delay(10);
 8008780:	200a      	movs	r0, #10
 8008782:	f7fa fb8f 	bl	8002ea4 <HAL_Delay>
	Set_Coulomb_Counter_Deadband(config_t->CC_deadband);
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	78db      	ldrb	r3, [r3, #3]
 800878a:	4618      	mov	r0, r3
 800878c:	f7ff ffb4 	bl	80086f8 <Set_Coulomb_Counter_Deadband>
	HAL_Delay(10);
 8008790:	200a      	movs	r0, #10
 8008792:	f7fa fb87 	bl	8002ea4 <HAL_Delay>
	status = Set_Coulomb_Counter_Deadband(config_t->CC_deadband);
	printf("Set_Coulomb_Counter_Deadband = %d\n\r", status);
	HAL_Delay(10);
#endif

}
 8008796:	bf00      	nop
 8008798:	3708      	adds	r7, #8
 800879a:	46bd      	mov	sp, r7
 800879c:	bd80      	pop	{r7, pc}
	...

080087a0 <LTC2959_Get_Current>:
 * This function reads the current register and calculates the
 * current using the sense resistor value.
 *
 * @return Current in milli-amperes.
 */
int32_t LTC2959_Get_Current(){
 80087a0:	b580      	push	{r7, lr}
 80087a2:	b084      	sub	sp, #16
 80087a4:	af00      	add	r7, sp, #0
	uint8_t buf[2];
	int16_t value;

	// Read the MSB and LSB of the current register
	buf[0] = Read_Reg(REG_CURRENT_MSB);
 80087a6:	2019      	movs	r0, #25
 80087a8:	f7ff ff32 	bl	8008610 <Read_Reg>
 80087ac:	4603      	mov	r3, r0
 80087ae:	713b      	strb	r3, [r7, #4]
	buf[1] = Read_Reg(REG_CURRENT_LSB);
 80087b0:	201a      	movs	r0, #26
 80087b2:	f7ff ff2d 	bl	8008610 <Read_Reg>
 80087b6:	4603      	mov	r3, r0
 80087b8:	717b      	strb	r3, [r7, #5]

	// Combine MSB and LSB into 16-bit signed value
	value = (int16_t)((buf[0] << 8) | buf[1]);
 80087ba:	793b      	ldrb	r3, [r7, #4]
 80087bc:	021b      	lsls	r3, r3, #8
 80087be:	b21a      	sxth	r2, r3
 80087c0:	797b      	ldrb	r3, [r7, #5]
 80087c2:	b21b      	sxth	r3, r3
 80087c4:	4313      	orrs	r3, r2
 80087c6:	81fb      	strh	r3, [r7, #14]

	int32_t current_mA = value * CURRENT_MULTIPLIER / 1000;
 80087c8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80087cc:	4618      	mov	r0, r3
 80087ce:	f7f7 fe19 	bl	8000404 <__aeabi_i2d>
 80087d2:	a30f      	add	r3, pc, #60	@ (adr r3, 8008810 <LTC2959_Get_Current+0x70>)
 80087d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087d8:	f7f7 fe7e 	bl	80004d8 <__aeabi_dmul>
 80087dc:	4602      	mov	r2, r0
 80087de:	460b      	mov	r3, r1
 80087e0:	4610      	mov	r0, r2
 80087e2:	4619      	mov	r1, r3
 80087e4:	f04f 0200 	mov.w	r2, #0
 80087e8:	4b0b      	ldr	r3, [pc, #44]	@ (8008818 <LTC2959_Get_Current+0x78>)
 80087ea:	f7f7 ff9f 	bl	800072c <__aeabi_ddiv>
 80087ee:	4602      	mov	r2, r0
 80087f0:	460b      	mov	r3, r1
 80087f2:	4610      	mov	r0, r2
 80087f4:	4619      	mov	r1, r3
 80087f6:	f7f8 f91f 	bl	8000a38 <__aeabi_d2iz>
 80087fa:	4603      	mov	r3, r0
 80087fc:	60bb      	str	r3, [r7, #8]

	return current_mA + 5;
 80087fe:	68bb      	ldr	r3, [r7, #8]
 8008800:	3305      	adds	r3, #5
}
 8008802:	4618      	mov	r0, r3
 8008804:	3710      	adds	r7, #16
 8008806:	46bd      	mov	sp, r7
 8008808:	bd80      	pop	{r7, pc}
 800880a:	bf00      	nop
 800880c:	f3af 8000 	nop.w
 8008810:	00000000 	.word	0x00000000
 8008814:	408efe92 	.word	0x408efe92
 8008818:	408f4000 	.word	0x408f4000

0800881c <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 800881c:	b480      	push	{r7}
 800881e:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8008820:	bf00      	nop
 8008822:	46bd      	mov	sp, r7
 8008824:	bc80      	pop	{r7}
 8008826:	4770      	bx	lr

08008828 <ssd1306_WriteCommand>:
/*
 * DMA settings
 * ADD I2Cx_TX in normal mode. Byte | Byte
 * In NVIC Settings, Enable "I2Cx event interrupt"
 */
void ssd1306_WriteCommand(uint8_t byte) {
 8008828:	b580      	push	{r7, lr}
 800882a:	b086      	sub	sp, #24
 800882c:	af04      	add	r7, sp, #16
 800882e:	4603      	mov	r3, r0
 8008830:	71fb      	strb	r3, [r7, #7]
#ifdef USE_DMA
	while(HAL_I2C_GetState(&SSD1306_I2C_PORT) != HAL_I2C_STATE_READY);
	HAL_I2C_Mem_Write_DMA(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1);
#else
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8008832:	f04f 33ff 	mov.w	r3, #4294967295
 8008836:	9302      	str	r3, [sp, #8]
 8008838:	2301      	movs	r3, #1
 800883a:	9301      	str	r3, [sp, #4]
 800883c:	1dfb      	adds	r3, r7, #7
 800883e:	9300      	str	r3, [sp, #0]
 8008840:	2301      	movs	r3, #1
 8008842:	2200      	movs	r2, #0
 8008844:	2178      	movs	r1, #120	@ 0x78
 8008846:	4803      	ldr	r0, [pc, #12]	@ (8008854 <ssd1306_WriteCommand+0x2c>)
 8008848:	f7fb ff42 	bl	80046d0 <HAL_I2C_Mem_Write>
#endif
}
 800884c:	bf00      	nop
 800884e:	3708      	adds	r7, #8
 8008850:	46bd      	mov	sp, r7
 8008852:	bd80      	pop	{r7, pc}
 8008854:	20000248 	.word	0x20000248

08008858 <ssd1306_WriteData>:


void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8008858:	b580      	push	{r7, lr}
 800885a:	b086      	sub	sp, #24
 800885c:	af04      	add	r7, sp, #16
 800885e:	6078      	str	r0, [r7, #4]
 8008860:	6039      	str	r1, [r7, #0]
#ifdef USE_DMA
	while(HAL_I2C_GetState(&SSD1306_I2C_PORT) != HAL_I2C_STATE_READY);
	HAL_I2C_Mem_Write_DMA(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size);
#else
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8008862:	683b      	ldr	r3, [r7, #0]
 8008864:	b29b      	uxth	r3, r3
 8008866:	f04f 32ff 	mov.w	r2, #4294967295
 800886a:	9202      	str	r2, [sp, #8]
 800886c:	9301      	str	r3, [sp, #4]
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	9300      	str	r3, [sp, #0]
 8008872:	2301      	movs	r3, #1
 8008874:	2240      	movs	r2, #64	@ 0x40
 8008876:	2178      	movs	r1, #120	@ 0x78
 8008878:	4803      	ldr	r0, [pc, #12]	@ (8008888 <ssd1306_WriteData+0x30>)
 800887a:	f7fb ff29 	bl	80046d0 <HAL_I2C_Mem_Write>
#endif
}
 800887e:	bf00      	nop
 8008880:	3708      	adds	r7, #8
 8008882:	46bd      	mov	sp, r7
 8008884:	bd80      	pop	{r7, pc}
 8008886:	bf00      	nop
 8008888:	20000248 	.word	0x20000248

0800888c <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 800888c:	b580      	push	{r7, lr}
 800888e:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8008890:	f7ff ffc4 	bl	800881c <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8008894:	2064      	movs	r0, #100	@ 0x64
 8008896:	f7fa fb05 	bl	8002ea4 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 800889a:	2000      	movs	r0, #0
 800889c:	f000 fa9c 	bl	8008dd8 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 80088a0:	2020      	movs	r0, #32
 80088a2:	f7ff ffc1 	bl	8008828 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 80088a6:	2000      	movs	r0, #0
 80088a8:	f7ff ffbe 	bl	8008828 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80088ac:	20b0      	movs	r0, #176	@ 0xb0
 80088ae:	f7ff ffbb 	bl	8008828 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 80088b2:	20c8      	movs	r0, #200	@ 0xc8
 80088b4:	f7ff ffb8 	bl	8008828 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 80088b8:	2000      	movs	r0, #0
 80088ba:	f7ff ffb5 	bl	8008828 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 80088be:	2010      	movs	r0, #16
 80088c0:	f7ff ffb2 	bl	8008828 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 80088c4:	2040      	movs	r0, #64	@ 0x40
 80088c6:	f7ff ffaf 	bl	8008828 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 80088ca:	20ff      	movs	r0, #255	@ 0xff
 80088cc:	f000 fa71 	bl	8008db2 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 80088d0:	20a1      	movs	r0, #161	@ 0xa1
 80088d2:	f7ff ffa9 	bl	8008828 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 80088d6:	20a6      	movs	r0, #166	@ 0xa6
 80088d8:	f7ff ffa6 	bl	8008828 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80088dc:	20a8      	movs	r0, #168	@ 0xa8
 80088de:	f7ff ffa3 	bl	8008828 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 80088e2:	203f      	movs	r0, #63	@ 0x3f
 80088e4:	f7ff ffa0 	bl	8008828 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80088e8:	20a4      	movs	r0, #164	@ 0xa4
 80088ea:	f7ff ff9d 	bl	8008828 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 80088ee:	20d3      	movs	r0, #211	@ 0xd3
 80088f0:	f7ff ff9a 	bl	8008828 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 80088f4:	2000      	movs	r0, #0
 80088f6:	f7ff ff97 	bl	8008828 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80088fa:	20d5      	movs	r0, #213	@ 0xd5
 80088fc:	f7ff ff94 	bl	8008828 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8008900:	20f0      	movs	r0, #240	@ 0xf0
 8008902:	f7ff ff91 	bl	8008828 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8008906:	20d9      	movs	r0, #217	@ 0xd9
 8008908:	f7ff ff8e 	bl	8008828 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 800890c:	2022      	movs	r0, #34	@ 0x22
 800890e:	f7ff ff8b 	bl	8008828 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8008912:	20da      	movs	r0, #218	@ 0xda
 8008914:	f7ff ff88 	bl	8008828 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8008918:	2012      	movs	r0, #18
 800891a:	f7ff ff85 	bl	8008828 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 800891e:	20db      	movs	r0, #219	@ 0xdb
 8008920:	f7ff ff82 	bl	8008828 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8008924:	2020      	movs	r0, #32
 8008926:	f7ff ff7f 	bl	8008828 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 800892a:	208d      	movs	r0, #141	@ 0x8d
 800892c:	f7ff ff7c 	bl	8008828 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8008930:	2014      	movs	r0, #20
 8008932:	f7ff ff79 	bl	8008828 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8008936:	2001      	movs	r0, #1
 8008938:	f000 fa4e 	bl	8008dd8 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 800893c:	2000      	movs	r0, #0
 800893e:	f000 f80f 	bl	8008960 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8008942:	f000 f82f 	bl	80089a4 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8008946:	4b05      	ldr	r3, [pc, #20]	@ (800895c <ssd1306_Init+0xd0>)
 8008948:	2200      	movs	r2, #0
 800894a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 800894c:	4b03      	ldr	r3, [pc, #12]	@ (800895c <ssd1306_Init+0xd0>)
 800894e:	2200      	movs	r2, #0
 8008950:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8008952:	4b02      	ldr	r3, [pc, #8]	@ (800895c <ssd1306_Init+0xd0>)
 8008954:	2201      	movs	r2, #1
 8008956:	711a      	strb	r2, [r3, #4]
}
 8008958:	bf00      	nop
 800895a:	bd80      	pop	{r7, pc}
 800895c:	200008c0 	.word	0x200008c0

08008960 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8008960:	b480      	push	{r7}
 8008962:	b085      	sub	sp, #20
 8008964:	af00      	add	r7, sp, #0
 8008966:	4603      	mov	r3, r0
 8008968:	71fb      	strb	r3, [r7, #7]
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 800896a:	2300      	movs	r3, #0
 800896c:	60fb      	str	r3, [r7, #12]
 800896e:	e00d      	b.n	800898c <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8008970:	79fb      	ldrb	r3, [r7, #7]
 8008972:	2b00      	cmp	r3, #0
 8008974:	d101      	bne.n	800897a <ssd1306_Fill+0x1a>
 8008976:	2100      	movs	r1, #0
 8008978:	e000      	b.n	800897c <ssd1306_Fill+0x1c>
 800897a:	21ff      	movs	r1, #255	@ 0xff
 800897c:	4a08      	ldr	r2, [pc, #32]	@ (80089a0 <ssd1306_Fill+0x40>)
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	4413      	add	r3, r2
 8008982:	460a      	mov	r2, r1
 8008984:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	3301      	adds	r3, #1
 800898a:	60fb      	str	r3, [r7, #12]
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008992:	d3ed      	bcc.n	8008970 <ssd1306_Fill+0x10>
    }
}
 8008994:	bf00      	nop
 8008996:	bf00      	nop
 8008998:	3714      	adds	r7, #20
 800899a:	46bd      	mov	sp, r7
 800899c:	bc80      	pop	{r7}
 800899e:	4770      	bx	lr
 80089a0:	200004c0 	.word	0x200004c0

080089a4 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 80089a4:	b580      	push	{r7, lr}
 80089a6:	b082      	sub	sp, #8
 80089a8:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80089aa:	2300      	movs	r3, #0
 80089ac:	71fb      	strb	r3, [r7, #7]
 80089ae:	e016      	b.n	80089de <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 80089b0:	79fb      	ldrb	r3, [r7, #7]
 80089b2:	3b50      	subs	r3, #80	@ 0x50
 80089b4:	b2db      	uxtb	r3, r3
 80089b6:	4618      	mov	r0, r3
 80089b8:	f7ff ff36 	bl	8008828 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 80089bc:	2001      	movs	r0, #1
 80089be:	f7ff ff33 	bl	8008828 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 80089c2:	2010      	movs	r0, #16
 80089c4:	f7ff ff30 	bl	8008828 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 80089c8:	79fb      	ldrb	r3, [r7, #7]
 80089ca:	01db      	lsls	r3, r3, #7
 80089cc:	4a08      	ldr	r2, [pc, #32]	@ (80089f0 <ssd1306_UpdateScreen+0x4c>)
 80089ce:	4413      	add	r3, r2
 80089d0:	2180      	movs	r1, #128	@ 0x80
 80089d2:	4618      	mov	r0, r3
 80089d4:	f7ff ff40 	bl	8008858 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80089d8:	79fb      	ldrb	r3, [r7, #7]
 80089da:	3301      	adds	r3, #1
 80089dc:	71fb      	strb	r3, [r7, #7]
 80089de:	79fb      	ldrb	r3, [r7, #7]
 80089e0:	2b07      	cmp	r3, #7
 80089e2:	d9e5      	bls.n	80089b0 <ssd1306_UpdateScreen+0xc>
    }
}
 80089e4:	bf00      	nop
 80089e6:	bf00      	nop
 80089e8:	3708      	adds	r7, #8
 80089ea:	46bd      	mov	sp, r7
 80089ec:	bd80      	pop	{r7, pc}
 80089ee:	bf00      	nop
 80089f0:	200004c0 	.word	0x200004c0

080089f4 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80089f4:	b480      	push	{r7}
 80089f6:	b083      	sub	sp, #12
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	4603      	mov	r3, r0
 80089fc:	71fb      	strb	r3, [r7, #7]
 80089fe:	460b      	mov	r3, r1
 8008a00:	71bb      	strb	r3, [r7, #6]
 8008a02:	4613      	mov	r3, r2
 8008a04:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8008a06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	db3d      	blt.n	8008a8a <ssd1306_DrawPixel+0x96>
 8008a0e:	79bb      	ldrb	r3, [r7, #6]
 8008a10:	2b3f      	cmp	r3, #63	@ 0x3f
 8008a12:	d83a      	bhi.n	8008a8a <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8008a14:	797b      	ldrb	r3, [r7, #5]
 8008a16:	2b01      	cmp	r3, #1
 8008a18:	d11a      	bne.n	8008a50 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8008a1a:	79fa      	ldrb	r2, [r7, #7]
 8008a1c:	79bb      	ldrb	r3, [r7, #6]
 8008a1e:	08db      	lsrs	r3, r3, #3
 8008a20:	b2d8      	uxtb	r0, r3
 8008a22:	4603      	mov	r3, r0
 8008a24:	01db      	lsls	r3, r3, #7
 8008a26:	4413      	add	r3, r2
 8008a28:	4a1a      	ldr	r2, [pc, #104]	@ (8008a94 <ssd1306_DrawPixel+0xa0>)
 8008a2a:	5cd3      	ldrb	r3, [r2, r3]
 8008a2c:	b25a      	sxtb	r2, r3
 8008a2e:	79bb      	ldrb	r3, [r7, #6]
 8008a30:	f003 0307 	and.w	r3, r3, #7
 8008a34:	2101      	movs	r1, #1
 8008a36:	fa01 f303 	lsl.w	r3, r1, r3
 8008a3a:	b25b      	sxtb	r3, r3
 8008a3c:	4313      	orrs	r3, r2
 8008a3e:	b259      	sxtb	r1, r3
 8008a40:	79fa      	ldrb	r2, [r7, #7]
 8008a42:	4603      	mov	r3, r0
 8008a44:	01db      	lsls	r3, r3, #7
 8008a46:	4413      	add	r3, r2
 8008a48:	b2c9      	uxtb	r1, r1
 8008a4a:	4a12      	ldr	r2, [pc, #72]	@ (8008a94 <ssd1306_DrawPixel+0xa0>)
 8008a4c:	54d1      	strb	r1, [r2, r3]
 8008a4e:	e01d      	b.n	8008a8c <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8008a50:	79fa      	ldrb	r2, [r7, #7]
 8008a52:	79bb      	ldrb	r3, [r7, #6]
 8008a54:	08db      	lsrs	r3, r3, #3
 8008a56:	b2d8      	uxtb	r0, r3
 8008a58:	4603      	mov	r3, r0
 8008a5a:	01db      	lsls	r3, r3, #7
 8008a5c:	4413      	add	r3, r2
 8008a5e:	4a0d      	ldr	r2, [pc, #52]	@ (8008a94 <ssd1306_DrawPixel+0xa0>)
 8008a60:	5cd3      	ldrb	r3, [r2, r3]
 8008a62:	b25a      	sxtb	r2, r3
 8008a64:	79bb      	ldrb	r3, [r7, #6]
 8008a66:	f003 0307 	and.w	r3, r3, #7
 8008a6a:	2101      	movs	r1, #1
 8008a6c:	fa01 f303 	lsl.w	r3, r1, r3
 8008a70:	b25b      	sxtb	r3, r3
 8008a72:	43db      	mvns	r3, r3
 8008a74:	b25b      	sxtb	r3, r3
 8008a76:	4013      	ands	r3, r2
 8008a78:	b259      	sxtb	r1, r3
 8008a7a:	79fa      	ldrb	r2, [r7, #7]
 8008a7c:	4603      	mov	r3, r0
 8008a7e:	01db      	lsls	r3, r3, #7
 8008a80:	4413      	add	r3, r2
 8008a82:	b2c9      	uxtb	r1, r1
 8008a84:	4a03      	ldr	r2, [pc, #12]	@ (8008a94 <ssd1306_DrawPixel+0xa0>)
 8008a86:	54d1      	strb	r1, [r2, r3]
 8008a88:	e000      	b.n	8008a8c <ssd1306_DrawPixel+0x98>
        return;
 8008a8a:	bf00      	nop
    }
}
 8008a8c:	370c      	adds	r7, #12
 8008a8e:	46bd      	mov	sp, r7
 8008a90:	bc80      	pop	{r7}
 8008a92:	4770      	bx	lr
 8008a94:	200004c0 	.word	0x200004c0

08008a98 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8008a98:	b590      	push	{r4, r7, lr}
 8008a9a:	b089      	sub	sp, #36	@ 0x24
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	4604      	mov	r4, r0
 8008aa0:	1d38      	adds	r0, r7, #4
 8008aa2:	e880 0006 	stmia.w	r0, {r1, r2}
 8008aa6:	461a      	mov	r2, r3
 8008aa8:	4623      	mov	r3, r4
 8008aaa:	73fb      	strb	r3, [r7, #15]
 8008aac:	4613      	mov	r3, r2
 8008aae:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8008ab0:	7bfb      	ldrb	r3, [r7, #15]
 8008ab2:	2b1f      	cmp	r3, #31
 8008ab4:	d902      	bls.n	8008abc <ssd1306_WriteChar+0x24>
 8008ab6:	7bfb      	ldrb	r3, [r7, #15]
 8008ab8:	2b7e      	cmp	r3, #126	@ 0x7e
 8008aba:	d901      	bls.n	8008ac0 <ssd1306_WriteChar+0x28>
        return 0;
 8008abc:	2300      	movs	r3, #0
 8008abe:	e06c      	b.n	8008b9a <ssd1306_WriteChar+0x102>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8008ac0:	4b38      	ldr	r3, [pc, #224]	@ (8008ba4 <ssd1306_WriteChar+0x10c>)
 8008ac2:	881b      	ldrh	r3, [r3, #0]
 8008ac4:	461a      	mov	r2, r3
 8008ac6:	793b      	ldrb	r3, [r7, #4]
 8008ac8:	4413      	add	r3, r2
 8008aca:	2b80      	cmp	r3, #128	@ 0x80
 8008acc:	dc06      	bgt.n	8008adc <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8008ace:	4b35      	ldr	r3, [pc, #212]	@ (8008ba4 <ssd1306_WriteChar+0x10c>)
 8008ad0:	885b      	ldrh	r3, [r3, #2]
 8008ad2:	461a      	mov	r2, r3
 8008ad4:	797b      	ldrb	r3, [r7, #5]
 8008ad6:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8008ad8:	2b40      	cmp	r3, #64	@ 0x40
 8008ada:	dd01      	ble.n	8008ae0 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8008adc:	2300      	movs	r3, #0
 8008ade:	e05c      	b.n	8008b9a <ssd1306_WriteChar+0x102>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8008ae0:	2300      	movs	r3, #0
 8008ae2:	61fb      	str	r3, [r7, #28]
 8008ae4:	e04c      	b.n	8008b80 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8008ae6:	68ba      	ldr	r2, [r7, #8]
 8008ae8:	7bfb      	ldrb	r3, [r7, #15]
 8008aea:	3b20      	subs	r3, #32
 8008aec:	7979      	ldrb	r1, [r7, #5]
 8008aee:	fb01 f303 	mul.w	r3, r1, r3
 8008af2:	4619      	mov	r1, r3
 8008af4:	69fb      	ldr	r3, [r7, #28]
 8008af6:	440b      	add	r3, r1
 8008af8:	005b      	lsls	r3, r3, #1
 8008afa:	4413      	add	r3, r2
 8008afc:	881b      	ldrh	r3, [r3, #0]
 8008afe:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8008b00:	2300      	movs	r3, #0
 8008b02:	61bb      	str	r3, [r7, #24]
 8008b04:	e034      	b.n	8008b70 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8008b06:	697a      	ldr	r2, [r7, #20]
 8008b08:	69bb      	ldr	r3, [r7, #24]
 8008b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8008b0e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d012      	beq.n	8008b3c <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8008b16:	4b23      	ldr	r3, [pc, #140]	@ (8008ba4 <ssd1306_WriteChar+0x10c>)
 8008b18:	881b      	ldrh	r3, [r3, #0]
 8008b1a:	b2da      	uxtb	r2, r3
 8008b1c:	69bb      	ldr	r3, [r7, #24]
 8008b1e:	b2db      	uxtb	r3, r3
 8008b20:	4413      	add	r3, r2
 8008b22:	b2d8      	uxtb	r0, r3
 8008b24:	4b1f      	ldr	r3, [pc, #124]	@ (8008ba4 <ssd1306_WriteChar+0x10c>)
 8008b26:	885b      	ldrh	r3, [r3, #2]
 8008b28:	b2da      	uxtb	r2, r3
 8008b2a:	69fb      	ldr	r3, [r7, #28]
 8008b2c:	b2db      	uxtb	r3, r3
 8008b2e:	4413      	add	r3, r2
 8008b30:	b2db      	uxtb	r3, r3
 8008b32:	7bba      	ldrb	r2, [r7, #14]
 8008b34:	4619      	mov	r1, r3
 8008b36:	f7ff ff5d 	bl	80089f4 <ssd1306_DrawPixel>
 8008b3a:	e016      	b.n	8008b6a <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8008b3c:	4b19      	ldr	r3, [pc, #100]	@ (8008ba4 <ssd1306_WriteChar+0x10c>)
 8008b3e:	881b      	ldrh	r3, [r3, #0]
 8008b40:	b2da      	uxtb	r2, r3
 8008b42:	69bb      	ldr	r3, [r7, #24]
 8008b44:	b2db      	uxtb	r3, r3
 8008b46:	4413      	add	r3, r2
 8008b48:	b2d8      	uxtb	r0, r3
 8008b4a:	4b16      	ldr	r3, [pc, #88]	@ (8008ba4 <ssd1306_WriteChar+0x10c>)
 8008b4c:	885b      	ldrh	r3, [r3, #2]
 8008b4e:	b2da      	uxtb	r2, r3
 8008b50:	69fb      	ldr	r3, [r7, #28]
 8008b52:	b2db      	uxtb	r3, r3
 8008b54:	4413      	add	r3, r2
 8008b56:	b2d9      	uxtb	r1, r3
 8008b58:	7bbb      	ldrb	r3, [r7, #14]
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	bf0c      	ite	eq
 8008b5e:	2301      	moveq	r3, #1
 8008b60:	2300      	movne	r3, #0
 8008b62:	b2db      	uxtb	r3, r3
 8008b64:	461a      	mov	r2, r3
 8008b66:	f7ff ff45 	bl	80089f4 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8008b6a:	69bb      	ldr	r3, [r7, #24]
 8008b6c:	3301      	adds	r3, #1
 8008b6e:	61bb      	str	r3, [r7, #24]
 8008b70:	793b      	ldrb	r3, [r7, #4]
 8008b72:	461a      	mov	r2, r3
 8008b74:	69bb      	ldr	r3, [r7, #24]
 8008b76:	4293      	cmp	r3, r2
 8008b78:	d3c5      	bcc.n	8008b06 <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8008b7a:	69fb      	ldr	r3, [r7, #28]
 8008b7c:	3301      	adds	r3, #1
 8008b7e:	61fb      	str	r3, [r7, #28]
 8008b80:	797b      	ldrb	r3, [r7, #5]
 8008b82:	461a      	mov	r2, r3
 8008b84:	69fb      	ldr	r3, [r7, #28]
 8008b86:	4293      	cmp	r3, r2
 8008b88:	d3ad      	bcc.n	8008ae6 <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8008b8a:	4b06      	ldr	r3, [pc, #24]	@ (8008ba4 <ssd1306_WriteChar+0x10c>)
 8008b8c:	881b      	ldrh	r3, [r3, #0]
 8008b8e:	793a      	ldrb	r2, [r7, #4]
 8008b90:	4413      	add	r3, r2
 8008b92:	b29a      	uxth	r2, r3
 8008b94:	4b03      	ldr	r3, [pc, #12]	@ (8008ba4 <ssd1306_WriteChar+0x10c>)
 8008b96:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8008b98:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	3724      	adds	r7, #36	@ 0x24
 8008b9e:	46bd      	mov	sp, r7
 8008ba0:	bd90      	pop	{r4, r7, pc}
 8008ba2:	bf00      	nop
 8008ba4:	200008c0 	.word	0x200008c0

08008ba8 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8008ba8:	b580      	push	{r7, lr}
 8008baa:	b084      	sub	sp, #16
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	60f8      	str	r0, [r7, #12]
 8008bb0:	1d38      	adds	r0, r7, #4
 8008bb2:	e880 0006 	stmia.w	r0, {r1, r2}
 8008bb6:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 8008bb8:	e012      	b.n	8008be0 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	7818      	ldrb	r0, [r3, #0]
 8008bbe:	78fb      	ldrb	r3, [r7, #3]
 8008bc0:	1d3a      	adds	r2, r7, #4
 8008bc2:	ca06      	ldmia	r2, {r1, r2}
 8008bc4:	f7ff ff68 	bl	8008a98 <ssd1306_WriteChar>
 8008bc8:	4603      	mov	r3, r0
 8008bca:	461a      	mov	r2, r3
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	781b      	ldrb	r3, [r3, #0]
 8008bd0:	429a      	cmp	r2, r3
 8008bd2:	d002      	beq.n	8008bda <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	781b      	ldrb	r3, [r3, #0]
 8008bd8:	e008      	b.n	8008bec <ssd1306_WriteString+0x44>
        }
        str++;
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	3301      	adds	r3, #1
 8008bde:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	781b      	ldrb	r3, [r3, #0]
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d1e8      	bne.n	8008bba <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	781b      	ldrb	r3, [r3, #0]
}
 8008bec:	4618      	mov	r0, r3
 8008bee:	3710      	adds	r7, #16
 8008bf0:	46bd      	mov	sp, r7
 8008bf2:	bd80      	pop	{r7, pc}

08008bf4 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8008bf4:	b480      	push	{r7}
 8008bf6:	b083      	sub	sp, #12
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	4603      	mov	r3, r0
 8008bfc:	460a      	mov	r2, r1
 8008bfe:	71fb      	strb	r3, [r7, #7]
 8008c00:	4613      	mov	r3, r2
 8008c02:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8008c04:	79fb      	ldrb	r3, [r7, #7]
 8008c06:	b29a      	uxth	r2, r3
 8008c08:	4b05      	ldr	r3, [pc, #20]	@ (8008c20 <ssd1306_SetCursor+0x2c>)
 8008c0a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8008c0c:	79bb      	ldrb	r3, [r7, #6]
 8008c0e:	b29a      	uxth	r2, r3
 8008c10:	4b03      	ldr	r3, [pc, #12]	@ (8008c20 <ssd1306_SetCursor+0x2c>)
 8008c12:	805a      	strh	r2, [r3, #2]
}
 8008c14:	bf00      	nop
 8008c16:	370c      	adds	r7, #12
 8008c18:	46bd      	mov	sp, r7
 8008c1a:	bc80      	pop	{r7}
 8008c1c:	4770      	bx	lr
 8008c1e:	bf00      	nop
 8008c20:	200008c0 	.word	0x200008c0

08008c24 <ssd1306_Line>:

/* Draw line by Bresenhem's algorithm */
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8008c24:	b590      	push	{r4, r7, lr}
 8008c26:	b089      	sub	sp, #36	@ 0x24
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	4604      	mov	r4, r0
 8008c2c:	4608      	mov	r0, r1
 8008c2e:	4611      	mov	r1, r2
 8008c30:	461a      	mov	r2, r3
 8008c32:	4623      	mov	r3, r4
 8008c34:	71fb      	strb	r3, [r7, #7]
 8008c36:	4603      	mov	r3, r0
 8008c38:	71bb      	strb	r3, [r7, #6]
 8008c3a:	460b      	mov	r3, r1
 8008c3c:	717b      	strb	r3, [r7, #5]
 8008c3e:	4613      	mov	r3, r2
 8008c40:	713b      	strb	r3, [r7, #4]
    int32_t deltaX = abs(x2 - x1);
 8008c42:	797a      	ldrb	r2, [r7, #5]
 8008c44:	79fb      	ldrb	r3, [r7, #7]
 8008c46:	1ad3      	subs	r3, r2, r3
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	bfb8      	it	lt
 8008c4c:	425b      	neglt	r3, r3
 8008c4e:	61bb      	str	r3, [r7, #24]
    int32_t deltaY = abs(y2 - y1);
 8008c50:	793a      	ldrb	r2, [r7, #4]
 8008c52:	79bb      	ldrb	r3, [r7, #6]
 8008c54:	1ad3      	subs	r3, r2, r3
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	bfb8      	it	lt
 8008c5a:	425b      	neglt	r3, r3
 8008c5c:	617b      	str	r3, [r7, #20]
    int32_t signX = ((x1 < x2) ? 1 : -1);
 8008c5e:	79fa      	ldrb	r2, [r7, #7]
 8008c60:	797b      	ldrb	r3, [r7, #5]
 8008c62:	429a      	cmp	r2, r3
 8008c64:	d201      	bcs.n	8008c6a <ssd1306_Line+0x46>
 8008c66:	2301      	movs	r3, #1
 8008c68:	e001      	b.n	8008c6e <ssd1306_Line+0x4a>
 8008c6a:	f04f 33ff 	mov.w	r3, #4294967295
 8008c6e:	613b      	str	r3, [r7, #16]
    int32_t signY = ((y1 < y2) ? 1 : -1);
 8008c70:	79ba      	ldrb	r2, [r7, #6]
 8008c72:	793b      	ldrb	r3, [r7, #4]
 8008c74:	429a      	cmp	r2, r3
 8008c76:	d201      	bcs.n	8008c7c <ssd1306_Line+0x58>
 8008c78:	2301      	movs	r3, #1
 8008c7a:	e001      	b.n	8008c80 <ssd1306_Line+0x5c>
 8008c7c:	f04f 33ff 	mov.w	r3, #4294967295
 8008c80:	60fb      	str	r3, [r7, #12]
    int32_t error = deltaX - deltaY;
 8008c82:	69ba      	ldr	r2, [r7, #24]
 8008c84:	697b      	ldr	r3, [r7, #20]
 8008c86:	1ad3      	subs	r3, r2, r3
 8008c88:	61fb      	str	r3, [r7, #28]
    int32_t error2;
    
    ssd1306_DrawPixel(x2, y2, color);
 8008c8a:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8008c8e:	7939      	ldrb	r1, [r7, #4]
 8008c90:	797b      	ldrb	r3, [r7, #5]
 8008c92:	4618      	mov	r0, r3
 8008c94:	f7ff feae 	bl	80089f4 <ssd1306_DrawPixel>

    while((x1 != x2) || (y1 != y2)) {
 8008c98:	e024      	b.n	8008ce4 <ssd1306_Line+0xc0>
        ssd1306_DrawPixel(x1, y1, color);
 8008c9a:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8008c9e:	79b9      	ldrb	r1, [r7, #6]
 8008ca0:	79fb      	ldrb	r3, [r7, #7]
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	f7ff fea6 	bl	80089f4 <ssd1306_DrawPixel>
        error2 = error * 2;
 8008ca8:	69fb      	ldr	r3, [r7, #28]
 8008caa:	005b      	lsls	r3, r3, #1
 8008cac:	60bb      	str	r3, [r7, #8]
        if(error2 > -deltaY) {
 8008cae:	697b      	ldr	r3, [r7, #20]
 8008cb0:	425b      	negs	r3, r3
 8008cb2:	68ba      	ldr	r2, [r7, #8]
 8008cb4:	429a      	cmp	r2, r3
 8008cb6:	dd08      	ble.n	8008cca <ssd1306_Line+0xa6>
            error -= deltaY;
 8008cb8:	69fa      	ldr	r2, [r7, #28]
 8008cba:	697b      	ldr	r3, [r7, #20]
 8008cbc:	1ad3      	subs	r3, r2, r3
 8008cbe:	61fb      	str	r3, [r7, #28]
            x1 += signX;
 8008cc0:	693b      	ldr	r3, [r7, #16]
 8008cc2:	b2da      	uxtb	r2, r3
 8008cc4:	79fb      	ldrb	r3, [r7, #7]
 8008cc6:	4413      	add	r3, r2
 8008cc8:	71fb      	strb	r3, [r7, #7]
        }
        
        if(error2 < deltaX) {
 8008cca:	68ba      	ldr	r2, [r7, #8]
 8008ccc:	69bb      	ldr	r3, [r7, #24]
 8008cce:	429a      	cmp	r2, r3
 8008cd0:	da08      	bge.n	8008ce4 <ssd1306_Line+0xc0>
            error += deltaX;
 8008cd2:	69fa      	ldr	r2, [r7, #28]
 8008cd4:	69bb      	ldr	r3, [r7, #24]
 8008cd6:	4413      	add	r3, r2
 8008cd8:	61fb      	str	r3, [r7, #28]
            y1 += signY;
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	b2da      	uxtb	r2, r3
 8008cde:	79bb      	ldrb	r3, [r7, #6]
 8008ce0:	4413      	add	r3, r2
 8008ce2:	71bb      	strb	r3, [r7, #6]
    while((x1 != x2) || (y1 != y2)) {
 8008ce4:	79fa      	ldrb	r2, [r7, #7]
 8008ce6:	797b      	ldrb	r3, [r7, #5]
 8008ce8:	429a      	cmp	r2, r3
 8008cea:	d1d6      	bne.n	8008c9a <ssd1306_Line+0x76>
 8008cec:	79ba      	ldrb	r2, [r7, #6]
 8008cee:	793b      	ldrb	r3, [r7, #4]
 8008cf0:	429a      	cmp	r2, r3
 8008cf2:	d1d2      	bne.n	8008c9a <ssd1306_Line+0x76>
        }
    }
    return;
 8008cf4:	bf00      	nop
}
 8008cf6:	3724      	adds	r7, #36	@ 0x24
 8008cf8:	46bd      	mov	sp, r7
 8008cfa:	bd90      	pop	{r4, r7, pc}

08008cfc <ssd1306_DrawBitmap>:
    }
    return;
}

/* Draw a bitmap */
void ssd1306_DrawBitmap(uint8_t x, uint8_t y, const unsigned char* bitmap, uint8_t w, uint8_t h, SSD1306_COLOR color) {
 8008cfc:	b580      	push	{r7, lr}
 8008cfe:	b084      	sub	sp, #16
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	603a      	str	r2, [r7, #0]
 8008d04:	461a      	mov	r2, r3
 8008d06:	4603      	mov	r3, r0
 8008d08:	71fb      	strb	r3, [r7, #7]
 8008d0a:	460b      	mov	r3, r1
 8008d0c:	71bb      	strb	r3, [r7, #6]
 8008d0e:	4613      	mov	r3, r2
 8008d10:	717b      	strb	r3, [r7, #5]
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8008d12:	797b      	ldrb	r3, [r7, #5]
 8008d14:	3307      	adds	r3, #7
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	da00      	bge.n	8008d1c <ssd1306_DrawBitmap+0x20>
 8008d1a:	3307      	adds	r3, #7
 8008d1c:	10db      	asrs	r3, r3, #3
 8008d1e:	817b      	strh	r3, [r7, #10]
    uint8_t byte = 0;
 8008d20:	2300      	movs	r3, #0
 8008d22:	73fb      	strb	r3, [r7, #15]

    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8008d24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	db3e      	blt.n	8008daa <ssd1306_DrawBitmap+0xae>
 8008d2c:	79bb      	ldrb	r3, [r7, #6]
 8008d2e:	2b3f      	cmp	r3, #63	@ 0x3f
 8008d30:	d83b      	bhi.n	8008daa <ssd1306_DrawBitmap+0xae>
        return;
    }

    for (uint8_t j = 0; j < h; j++, y++) {
 8008d32:	2300      	movs	r3, #0
 8008d34:	73bb      	strb	r3, [r7, #14]
 8008d36:	e033      	b.n	8008da0 <ssd1306_DrawBitmap+0xa4>
        for (uint8_t i = 0; i < w; i++) {
 8008d38:	2300      	movs	r3, #0
 8008d3a:	737b      	strb	r3, [r7, #13]
 8008d3c:	e026      	b.n	8008d8c <ssd1306_DrawBitmap+0x90>
            if (i & 7) {
 8008d3e:	7b7b      	ldrb	r3, [r7, #13]
 8008d40:	f003 0307 	and.w	r3, r3, #7
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d003      	beq.n	8008d50 <ssd1306_DrawBitmap+0x54>
                byte <<= 1;
 8008d48:	7bfb      	ldrb	r3, [r7, #15]
 8008d4a:	005b      	lsls	r3, r3, #1
 8008d4c:	73fb      	strb	r3, [r7, #15]
 8008d4e:	e00d      	b.n	8008d6c <ssd1306_DrawBitmap+0x70>
            } else {
                byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8008d50:	7bbb      	ldrb	r3, [r7, #14]
 8008d52:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8008d56:	fb02 f303 	mul.w	r3, r2, r3
 8008d5a:	7b7a      	ldrb	r2, [r7, #13]
 8008d5c:	08d2      	lsrs	r2, r2, #3
 8008d5e:	b2d2      	uxtb	r2, r2
 8008d60:	4413      	add	r3, r2
 8008d62:	461a      	mov	r2, r3
 8008d64:	683b      	ldr	r3, [r7, #0]
 8008d66:	4413      	add	r3, r2
 8008d68:	781b      	ldrb	r3, [r3, #0]
 8008d6a:	73fb      	strb	r3, [r7, #15]
            }

            if (byte & 0x80) {
 8008d6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	da08      	bge.n	8008d86 <ssd1306_DrawBitmap+0x8a>
                ssd1306_DrawPixel(x + i, y, color);
 8008d74:	79fa      	ldrb	r2, [r7, #7]
 8008d76:	7b7b      	ldrb	r3, [r7, #13]
 8008d78:	4413      	add	r3, r2
 8008d7a:	b2db      	uxtb	r3, r3
 8008d7c:	7f3a      	ldrb	r2, [r7, #28]
 8008d7e:	79b9      	ldrb	r1, [r7, #6]
 8008d80:	4618      	mov	r0, r3
 8008d82:	f7ff fe37 	bl	80089f4 <ssd1306_DrawPixel>
        for (uint8_t i = 0; i < w; i++) {
 8008d86:	7b7b      	ldrb	r3, [r7, #13]
 8008d88:	3301      	adds	r3, #1
 8008d8a:	737b      	strb	r3, [r7, #13]
 8008d8c:	7b7a      	ldrb	r2, [r7, #13]
 8008d8e:	797b      	ldrb	r3, [r7, #5]
 8008d90:	429a      	cmp	r2, r3
 8008d92:	d3d4      	bcc.n	8008d3e <ssd1306_DrawBitmap+0x42>
    for (uint8_t j = 0; j < h; j++, y++) {
 8008d94:	7bbb      	ldrb	r3, [r7, #14]
 8008d96:	3301      	adds	r3, #1
 8008d98:	73bb      	strb	r3, [r7, #14]
 8008d9a:	79bb      	ldrb	r3, [r7, #6]
 8008d9c:	3301      	adds	r3, #1
 8008d9e:	71bb      	strb	r3, [r7, #6]
 8008da0:	7bba      	ldrb	r2, [r7, #14]
 8008da2:	7e3b      	ldrb	r3, [r7, #24]
 8008da4:	429a      	cmp	r2, r3
 8008da6:	d3c7      	bcc.n	8008d38 <ssd1306_DrawBitmap+0x3c>
            }
        }
    }
    return;
 8008da8:	e000      	b.n	8008dac <ssd1306_DrawBitmap+0xb0>
        return;
 8008daa:	bf00      	nop
}
 8008dac:	3710      	adds	r7, #16
 8008dae:	46bd      	mov	sp, r7
 8008db0:	bd80      	pop	{r7, pc}

08008db2 <ssd1306_SetContrast>:

void ssd1306_SetContrast(const uint8_t value) {
 8008db2:	b580      	push	{r7, lr}
 8008db4:	b084      	sub	sp, #16
 8008db6:	af00      	add	r7, sp, #0
 8008db8:	4603      	mov	r3, r0
 8008dba:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8008dbc:	2381      	movs	r3, #129	@ 0x81
 8008dbe:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8008dc0:	7bfb      	ldrb	r3, [r7, #15]
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	f7ff fd30 	bl	8008828 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8008dc8:	79fb      	ldrb	r3, [r7, #7]
 8008dca:	4618      	mov	r0, r3
 8008dcc:	f7ff fd2c 	bl	8008828 <ssd1306_WriteCommand>
}
 8008dd0:	bf00      	nop
 8008dd2:	3710      	adds	r7, #16
 8008dd4:	46bd      	mov	sp, r7
 8008dd6:	bd80      	pop	{r7, pc}

08008dd8 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8008dd8:	b580      	push	{r7, lr}
 8008dda:	b084      	sub	sp, #16
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	4603      	mov	r3, r0
 8008de0:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8008de2:	79fb      	ldrb	r3, [r7, #7]
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d005      	beq.n	8008df4 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8008de8:	23af      	movs	r3, #175	@ 0xaf
 8008dea:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8008dec:	4b08      	ldr	r3, [pc, #32]	@ (8008e10 <ssd1306_SetDisplayOn+0x38>)
 8008dee:	2201      	movs	r2, #1
 8008df0:	715a      	strb	r2, [r3, #5]
 8008df2:	e004      	b.n	8008dfe <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8008df4:	23ae      	movs	r3, #174	@ 0xae
 8008df6:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8008df8:	4b05      	ldr	r3, [pc, #20]	@ (8008e10 <ssd1306_SetDisplayOn+0x38>)
 8008dfa:	2200      	movs	r2, #0
 8008dfc:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8008dfe:	7bfb      	ldrb	r3, [r7, #15]
 8008e00:	4618      	mov	r0, r3
 8008e02:	f7ff fd11 	bl	8008828 <ssd1306_WriteCommand>
}
 8008e06:	bf00      	nop
 8008e08:	3710      	adds	r7, #16
 8008e0a:	46bd      	mov	sp, r7
 8008e0c:	bd80      	pop	{r7, pc}
 8008e0e:	bf00      	nop
 8008e10:	200008c0 	.word	0x200008c0

08008e14 <__cvt>:
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e1a:	461d      	mov	r5, r3
 8008e1c:	bfbb      	ittet	lt
 8008e1e:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8008e22:	461d      	movlt	r5, r3
 8008e24:	2300      	movge	r3, #0
 8008e26:	232d      	movlt	r3, #45	@ 0x2d
 8008e28:	b088      	sub	sp, #32
 8008e2a:	4614      	mov	r4, r2
 8008e2c:	bfb8      	it	lt
 8008e2e:	4614      	movlt	r4, r2
 8008e30:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8008e32:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8008e34:	7013      	strb	r3, [r2, #0]
 8008e36:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008e38:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8008e3c:	f023 0820 	bic.w	r8, r3, #32
 8008e40:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008e44:	d005      	beq.n	8008e52 <__cvt+0x3e>
 8008e46:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8008e4a:	d100      	bne.n	8008e4e <__cvt+0x3a>
 8008e4c:	3601      	adds	r6, #1
 8008e4e:	2302      	movs	r3, #2
 8008e50:	e000      	b.n	8008e54 <__cvt+0x40>
 8008e52:	2303      	movs	r3, #3
 8008e54:	aa07      	add	r2, sp, #28
 8008e56:	9204      	str	r2, [sp, #16]
 8008e58:	aa06      	add	r2, sp, #24
 8008e5a:	e9cd a202 	strd	sl, r2, [sp, #8]
 8008e5e:	e9cd 3600 	strd	r3, r6, [sp]
 8008e62:	4622      	mov	r2, r4
 8008e64:	462b      	mov	r3, r5
 8008e66:	f001 f8bb 	bl	8009fe0 <_dtoa_r>
 8008e6a:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8008e6e:	4607      	mov	r7, r0
 8008e70:	d119      	bne.n	8008ea6 <__cvt+0x92>
 8008e72:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008e74:	07db      	lsls	r3, r3, #31
 8008e76:	d50e      	bpl.n	8008e96 <__cvt+0x82>
 8008e78:	eb00 0906 	add.w	r9, r0, r6
 8008e7c:	2200      	movs	r2, #0
 8008e7e:	2300      	movs	r3, #0
 8008e80:	4620      	mov	r0, r4
 8008e82:	4629      	mov	r1, r5
 8008e84:	f7f7 fd90 	bl	80009a8 <__aeabi_dcmpeq>
 8008e88:	b108      	cbz	r0, 8008e8e <__cvt+0x7a>
 8008e8a:	f8cd 901c 	str.w	r9, [sp, #28]
 8008e8e:	2230      	movs	r2, #48	@ 0x30
 8008e90:	9b07      	ldr	r3, [sp, #28]
 8008e92:	454b      	cmp	r3, r9
 8008e94:	d31e      	bcc.n	8008ed4 <__cvt+0xc0>
 8008e96:	4638      	mov	r0, r7
 8008e98:	9b07      	ldr	r3, [sp, #28]
 8008e9a:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8008e9c:	1bdb      	subs	r3, r3, r7
 8008e9e:	6013      	str	r3, [r2, #0]
 8008ea0:	b008      	add	sp, #32
 8008ea2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ea6:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008eaa:	eb00 0906 	add.w	r9, r0, r6
 8008eae:	d1e5      	bne.n	8008e7c <__cvt+0x68>
 8008eb0:	7803      	ldrb	r3, [r0, #0]
 8008eb2:	2b30      	cmp	r3, #48	@ 0x30
 8008eb4:	d10a      	bne.n	8008ecc <__cvt+0xb8>
 8008eb6:	2200      	movs	r2, #0
 8008eb8:	2300      	movs	r3, #0
 8008eba:	4620      	mov	r0, r4
 8008ebc:	4629      	mov	r1, r5
 8008ebe:	f7f7 fd73 	bl	80009a8 <__aeabi_dcmpeq>
 8008ec2:	b918      	cbnz	r0, 8008ecc <__cvt+0xb8>
 8008ec4:	f1c6 0601 	rsb	r6, r6, #1
 8008ec8:	f8ca 6000 	str.w	r6, [sl]
 8008ecc:	f8da 3000 	ldr.w	r3, [sl]
 8008ed0:	4499      	add	r9, r3
 8008ed2:	e7d3      	b.n	8008e7c <__cvt+0x68>
 8008ed4:	1c59      	adds	r1, r3, #1
 8008ed6:	9107      	str	r1, [sp, #28]
 8008ed8:	701a      	strb	r2, [r3, #0]
 8008eda:	e7d9      	b.n	8008e90 <__cvt+0x7c>

08008edc <__exponent>:
 8008edc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008ede:	2900      	cmp	r1, #0
 8008ee0:	bfb6      	itet	lt
 8008ee2:	232d      	movlt	r3, #45	@ 0x2d
 8008ee4:	232b      	movge	r3, #43	@ 0x2b
 8008ee6:	4249      	neglt	r1, r1
 8008ee8:	2909      	cmp	r1, #9
 8008eea:	7002      	strb	r2, [r0, #0]
 8008eec:	7043      	strb	r3, [r0, #1]
 8008eee:	dd29      	ble.n	8008f44 <__exponent+0x68>
 8008ef0:	f10d 0307 	add.w	r3, sp, #7
 8008ef4:	461d      	mov	r5, r3
 8008ef6:	270a      	movs	r7, #10
 8008ef8:	fbb1 f6f7 	udiv	r6, r1, r7
 8008efc:	461a      	mov	r2, r3
 8008efe:	fb07 1416 	mls	r4, r7, r6, r1
 8008f02:	3430      	adds	r4, #48	@ 0x30
 8008f04:	f802 4c01 	strb.w	r4, [r2, #-1]
 8008f08:	460c      	mov	r4, r1
 8008f0a:	2c63      	cmp	r4, #99	@ 0x63
 8008f0c:	4631      	mov	r1, r6
 8008f0e:	f103 33ff 	add.w	r3, r3, #4294967295
 8008f12:	dcf1      	bgt.n	8008ef8 <__exponent+0x1c>
 8008f14:	3130      	adds	r1, #48	@ 0x30
 8008f16:	1e94      	subs	r4, r2, #2
 8008f18:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008f1c:	4623      	mov	r3, r4
 8008f1e:	1c41      	adds	r1, r0, #1
 8008f20:	42ab      	cmp	r3, r5
 8008f22:	d30a      	bcc.n	8008f3a <__exponent+0x5e>
 8008f24:	f10d 0309 	add.w	r3, sp, #9
 8008f28:	1a9b      	subs	r3, r3, r2
 8008f2a:	42ac      	cmp	r4, r5
 8008f2c:	bf88      	it	hi
 8008f2e:	2300      	movhi	r3, #0
 8008f30:	3302      	adds	r3, #2
 8008f32:	4403      	add	r3, r0
 8008f34:	1a18      	subs	r0, r3, r0
 8008f36:	b003      	add	sp, #12
 8008f38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008f3a:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008f3e:	f801 6f01 	strb.w	r6, [r1, #1]!
 8008f42:	e7ed      	b.n	8008f20 <__exponent+0x44>
 8008f44:	2330      	movs	r3, #48	@ 0x30
 8008f46:	3130      	adds	r1, #48	@ 0x30
 8008f48:	7083      	strb	r3, [r0, #2]
 8008f4a:	70c1      	strb	r1, [r0, #3]
 8008f4c:	1d03      	adds	r3, r0, #4
 8008f4e:	e7f1      	b.n	8008f34 <__exponent+0x58>

08008f50 <_printf_float>:
 8008f50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f54:	b091      	sub	sp, #68	@ 0x44
 8008f56:	460c      	mov	r4, r1
 8008f58:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8008f5c:	4616      	mov	r6, r2
 8008f5e:	461f      	mov	r7, r3
 8008f60:	4605      	mov	r5, r0
 8008f62:	f000 ff1d 	bl	8009da0 <_localeconv_r>
 8008f66:	6803      	ldr	r3, [r0, #0]
 8008f68:	4618      	mov	r0, r3
 8008f6a:	9308      	str	r3, [sp, #32]
 8008f6c:	f7f7 f8f0 	bl	8000150 <strlen>
 8008f70:	2300      	movs	r3, #0
 8008f72:	930e      	str	r3, [sp, #56]	@ 0x38
 8008f74:	f8d8 3000 	ldr.w	r3, [r8]
 8008f78:	9009      	str	r0, [sp, #36]	@ 0x24
 8008f7a:	3307      	adds	r3, #7
 8008f7c:	f023 0307 	bic.w	r3, r3, #7
 8008f80:	f103 0208 	add.w	r2, r3, #8
 8008f84:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008f88:	f8d4 b000 	ldr.w	fp, [r4]
 8008f8c:	f8c8 2000 	str.w	r2, [r8]
 8008f90:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008f94:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8008f98:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008f9a:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8008f9e:	f04f 32ff 	mov.w	r2, #4294967295
 8008fa2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008fa6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8008faa:	4b9c      	ldr	r3, [pc, #624]	@ (800921c <_printf_float+0x2cc>)
 8008fac:	f7f7 fd2e 	bl	8000a0c <__aeabi_dcmpun>
 8008fb0:	bb70      	cbnz	r0, 8009010 <_printf_float+0xc0>
 8008fb2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008fb6:	f04f 32ff 	mov.w	r2, #4294967295
 8008fba:	4b98      	ldr	r3, [pc, #608]	@ (800921c <_printf_float+0x2cc>)
 8008fbc:	f7f7 fd08 	bl	80009d0 <__aeabi_dcmple>
 8008fc0:	bb30      	cbnz	r0, 8009010 <_printf_float+0xc0>
 8008fc2:	2200      	movs	r2, #0
 8008fc4:	2300      	movs	r3, #0
 8008fc6:	4640      	mov	r0, r8
 8008fc8:	4649      	mov	r1, r9
 8008fca:	f7f7 fcf7 	bl	80009bc <__aeabi_dcmplt>
 8008fce:	b110      	cbz	r0, 8008fd6 <_printf_float+0x86>
 8008fd0:	232d      	movs	r3, #45	@ 0x2d
 8008fd2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008fd6:	4a92      	ldr	r2, [pc, #584]	@ (8009220 <_printf_float+0x2d0>)
 8008fd8:	4b92      	ldr	r3, [pc, #584]	@ (8009224 <_printf_float+0x2d4>)
 8008fda:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8008fde:	bf94      	ite	ls
 8008fe0:	4690      	movls	r8, r2
 8008fe2:	4698      	movhi	r8, r3
 8008fe4:	2303      	movs	r3, #3
 8008fe6:	f04f 0900 	mov.w	r9, #0
 8008fea:	6123      	str	r3, [r4, #16]
 8008fec:	f02b 0304 	bic.w	r3, fp, #4
 8008ff0:	6023      	str	r3, [r4, #0]
 8008ff2:	4633      	mov	r3, r6
 8008ff4:	4621      	mov	r1, r4
 8008ff6:	4628      	mov	r0, r5
 8008ff8:	9700      	str	r7, [sp, #0]
 8008ffa:	aa0f      	add	r2, sp, #60	@ 0x3c
 8008ffc:	f000 f9d4 	bl	80093a8 <_printf_common>
 8009000:	3001      	adds	r0, #1
 8009002:	f040 8090 	bne.w	8009126 <_printf_float+0x1d6>
 8009006:	f04f 30ff 	mov.w	r0, #4294967295
 800900a:	b011      	add	sp, #68	@ 0x44
 800900c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009010:	4642      	mov	r2, r8
 8009012:	464b      	mov	r3, r9
 8009014:	4640      	mov	r0, r8
 8009016:	4649      	mov	r1, r9
 8009018:	f7f7 fcf8 	bl	8000a0c <__aeabi_dcmpun>
 800901c:	b148      	cbz	r0, 8009032 <_printf_float+0xe2>
 800901e:	464b      	mov	r3, r9
 8009020:	2b00      	cmp	r3, #0
 8009022:	bfb8      	it	lt
 8009024:	232d      	movlt	r3, #45	@ 0x2d
 8009026:	4a80      	ldr	r2, [pc, #512]	@ (8009228 <_printf_float+0x2d8>)
 8009028:	bfb8      	it	lt
 800902a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800902e:	4b7f      	ldr	r3, [pc, #508]	@ (800922c <_printf_float+0x2dc>)
 8009030:	e7d3      	b.n	8008fda <_printf_float+0x8a>
 8009032:	6863      	ldr	r3, [r4, #4]
 8009034:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8009038:	1c5a      	adds	r2, r3, #1
 800903a:	d13f      	bne.n	80090bc <_printf_float+0x16c>
 800903c:	2306      	movs	r3, #6
 800903e:	6063      	str	r3, [r4, #4]
 8009040:	2200      	movs	r2, #0
 8009042:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8009046:	6023      	str	r3, [r4, #0]
 8009048:	9206      	str	r2, [sp, #24]
 800904a:	aa0e      	add	r2, sp, #56	@ 0x38
 800904c:	e9cd a204 	strd	sl, r2, [sp, #16]
 8009050:	aa0d      	add	r2, sp, #52	@ 0x34
 8009052:	9203      	str	r2, [sp, #12]
 8009054:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8009058:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800905c:	6863      	ldr	r3, [r4, #4]
 800905e:	4642      	mov	r2, r8
 8009060:	9300      	str	r3, [sp, #0]
 8009062:	4628      	mov	r0, r5
 8009064:	464b      	mov	r3, r9
 8009066:	910a      	str	r1, [sp, #40]	@ 0x28
 8009068:	f7ff fed4 	bl	8008e14 <__cvt>
 800906c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800906e:	4680      	mov	r8, r0
 8009070:	2947      	cmp	r1, #71	@ 0x47
 8009072:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8009074:	d128      	bne.n	80090c8 <_printf_float+0x178>
 8009076:	1cc8      	adds	r0, r1, #3
 8009078:	db02      	blt.n	8009080 <_printf_float+0x130>
 800907a:	6863      	ldr	r3, [r4, #4]
 800907c:	4299      	cmp	r1, r3
 800907e:	dd40      	ble.n	8009102 <_printf_float+0x1b2>
 8009080:	f1aa 0a02 	sub.w	sl, sl, #2
 8009084:	fa5f fa8a 	uxtb.w	sl, sl
 8009088:	4652      	mov	r2, sl
 800908a:	3901      	subs	r1, #1
 800908c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8009090:	910d      	str	r1, [sp, #52]	@ 0x34
 8009092:	f7ff ff23 	bl	8008edc <__exponent>
 8009096:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009098:	4681      	mov	r9, r0
 800909a:	1813      	adds	r3, r2, r0
 800909c:	2a01      	cmp	r2, #1
 800909e:	6123      	str	r3, [r4, #16]
 80090a0:	dc02      	bgt.n	80090a8 <_printf_float+0x158>
 80090a2:	6822      	ldr	r2, [r4, #0]
 80090a4:	07d2      	lsls	r2, r2, #31
 80090a6:	d501      	bpl.n	80090ac <_printf_float+0x15c>
 80090a8:	3301      	adds	r3, #1
 80090aa:	6123      	str	r3, [r4, #16]
 80090ac:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d09e      	beq.n	8008ff2 <_printf_float+0xa2>
 80090b4:	232d      	movs	r3, #45	@ 0x2d
 80090b6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80090ba:	e79a      	b.n	8008ff2 <_printf_float+0xa2>
 80090bc:	2947      	cmp	r1, #71	@ 0x47
 80090be:	d1bf      	bne.n	8009040 <_printf_float+0xf0>
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d1bd      	bne.n	8009040 <_printf_float+0xf0>
 80090c4:	2301      	movs	r3, #1
 80090c6:	e7ba      	b.n	800903e <_printf_float+0xee>
 80090c8:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80090cc:	d9dc      	bls.n	8009088 <_printf_float+0x138>
 80090ce:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80090d2:	d118      	bne.n	8009106 <_printf_float+0x1b6>
 80090d4:	2900      	cmp	r1, #0
 80090d6:	6863      	ldr	r3, [r4, #4]
 80090d8:	dd0b      	ble.n	80090f2 <_printf_float+0x1a2>
 80090da:	6121      	str	r1, [r4, #16]
 80090dc:	b913      	cbnz	r3, 80090e4 <_printf_float+0x194>
 80090de:	6822      	ldr	r2, [r4, #0]
 80090e0:	07d0      	lsls	r0, r2, #31
 80090e2:	d502      	bpl.n	80090ea <_printf_float+0x19a>
 80090e4:	3301      	adds	r3, #1
 80090e6:	440b      	add	r3, r1
 80090e8:	6123      	str	r3, [r4, #16]
 80090ea:	f04f 0900 	mov.w	r9, #0
 80090ee:	65a1      	str	r1, [r4, #88]	@ 0x58
 80090f0:	e7dc      	b.n	80090ac <_printf_float+0x15c>
 80090f2:	b913      	cbnz	r3, 80090fa <_printf_float+0x1aa>
 80090f4:	6822      	ldr	r2, [r4, #0]
 80090f6:	07d2      	lsls	r2, r2, #31
 80090f8:	d501      	bpl.n	80090fe <_printf_float+0x1ae>
 80090fa:	3302      	adds	r3, #2
 80090fc:	e7f4      	b.n	80090e8 <_printf_float+0x198>
 80090fe:	2301      	movs	r3, #1
 8009100:	e7f2      	b.n	80090e8 <_printf_float+0x198>
 8009102:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8009106:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009108:	4299      	cmp	r1, r3
 800910a:	db05      	blt.n	8009118 <_printf_float+0x1c8>
 800910c:	6823      	ldr	r3, [r4, #0]
 800910e:	6121      	str	r1, [r4, #16]
 8009110:	07d8      	lsls	r0, r3, #31
 8009112:	d5ea      	bpl.n	80090ea <_printf_float+0x19a>
 8009114:	1c4b      	adds	r3, r1, #1
 8009116:	e7e7      	b.n	80090e8 <_printf_float+0x198>
 8009118:	2900      	cmp	r1, #0
 800911a:	bfcc      	ite	gt
 800911c:	2201      	movgt	r2, #1
 800911e:	f1c1 0202 	rsble	r2, r1, #2
 8009122:	4413      	add	r3, r2
 8009124:	e7e0      	b.n	80090e8 <_printf_float+0x198>
 8009126:	6823      	ldr	r3, [r4, #0]
 8009128:	055a      	lsls	r2, r3, #21
 800912a:	d407      	bmi.n	800913c <_printf_float+0x1ec>
 800912c:	6923      	ldr	r3, [r4, #16]
 800912e:	4642      	mov	r2, r8
 8009130:	4631      	mov	r1, r6
 8009132:	4628      	mov	r0, r5
 8009134:	47b8      	blx	r7
 8009136:	3001      	adds	r0, #1
 8009138:	d12b      	bne.n	8009192 <_printf_float+0x242>
 800913a:	e764      	b.n	8009006 <_printf_float+0xb6>
 800913c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009140:	f240 80dc 	bls.w	80092fc <_printf_float+0x3ac>
 8009144:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009148:	2200      	movs	r2, #0
 800914a:	2300      	movs	r3, #0
 800914c:	f7f7 fc2c 	bl	80009a8 <__aeabi_dcmpeq>
 8009150:	2800      	cmp	r0, #0
 8009152:	d033      	beq.n	80091bc <_printf_float+0x26c>
 8009154:	2301      	movs	r3, #1
 8009156:	4631      	mov	r1, r6
 8009158:	4628      	mov	r0, r5
 800915a:	4a35      	ldr	r2, [pc, #212]	@ (8009230 <_printf_float+0x2e0>)
 800915c:	47b8      	blx	r7
 800915e:	3001      	adds	r0, #1
 8009160:	f43f af51 	beq.w	8009006 <_printf_float+0xb6>
 8009164:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8009168:	4543      	cmp	r3, r8
 800916a:	db02      	blt.n	8009172 <_printf_float+0x222>
 800916c:	6823      	ldr	r3, [r4, #0]
 800916e:	07d8      	lsls	r0, r3, #31
 8009170:	d50f      	bpl.n	8009192 <_printf_float+0x242>
 8009172:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009176:	4631      	mov	r1, r6
 8009178:	4628      	mov	r0, r5
 800917a:	47b8      	blx	r7
 800917c:	3001      	adds	r0, #1
 800917e:	f43f af42 	beq.w	8009006 <_printf_float+0xb6>
 8009182:	f04f 0900 	mov.w	r9, #0
 8009186:	f108 38ff 	add.w	r8, r8, #4294967295
 800918a:	f104 0a1a 	add.w	sl, r4, #26
 800918e:	45c8      	cmp	r8, r9
 8009190:	dc09      	bgt.n	80091a6 <_printf_float+0x256>
 8009192:	6823      	ldr	r3, [r4, #0]
 8009194:	079b      	lsls	r3, r3, #30
 8009196:	f100 8102 	bmi.w	800939e <_printf_float+0x44e>
 800919a:	68e0      	ldr	r0, [r4, #12]
 800919c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800919e:	4298      	cmp	r0, r3
 80091a0:	bfb8      	it	lt
 80091a2:	4618      	movlt	r0, r3
 80091a4:	e731      	b.n	800900a <_printf_float+0xba>
 80091a6:	2301      	movs	r3, #1
 80091a8:	4652      	mov	r2, sl
 80091aa:	4631      	mov	r1, r6
 80091ac:	4628      	mov	r0, r5
 80091ae:	47b8      	blx	r7
 80091b0:	3001      	adds	r0, #1
 80091b2:	f43f af28 	beq.w	8009006 <_printf_float+0xb6>
 80091b6:	f109 0901 	add.w	r9, r9, #1
 80091ba:	e7e8      	b.n	800918e <_printf_float+0x23e>
 80091bc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80091be:	2b00      	cmp	r3, #0
 80091c0:	dc38      	bgt.n	8009234 <_printf_float+0x2e4>
 80091c2:	2301      	movs	r3, #1
 80091c4:	4631      	mov	r1, r6
 80091c6:	4628      	mov	r0, r5
 80091c8:	4a19      	ldr	r2, [pc, #100]	@ (8009230 <_printf_float+0x2e0>)
 80091ca:	47b8      	blx	r7
 80091cc:	3001      	adds	r0, #1
 80091ce:	f43f af1a 	beq.w	8009006 <_printf_float+0xb6>
 80091d2:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 80091d6:	ea59 0303 	orrs.w	r3, r9, r3
 80091da:	d102      	bne.n	80091e2 <_printf_float+0x292>
 80091dc:	6823      	ldr	r3, [r4, #0]
 80091de:	07d9      	lsls	r1, r3, #31
 80091e0:	d5d7      	bpl.n	8009192 <_printf_float+0x242>
 80091e2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80091e6:	4631      	mov	r1, r6
 80091e8:	4628      	mov	r0, r5
 80091ea:	47b8      	blx	r7
 80091ec:	3001      	adds	r0, #1
 80091ee:	f43f af0a 	beq.w	8009006 <_printf_float+0xb6>
 80091f2:	f04f 0a00 	mov.w	sl, #0
 80091f6:	f104 0b1a 	add.w	fp, r4, #26
 80091fa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80091fc:	425b      	negs	r3, r3
 80091fe:	4553      	cmp	r3, sl
 8009200:	dc01      	bgt.n	8009206 <_printf_float+0x2b6>
 8009202:	464b      	mov	r3, r9
 8009204:	e793      	b.n	800912e <_printf_float+0x1de>
 8009206:	2301      	movs	r3, #1
 8009208:	465a      	mov	r2, fp
 800920a:	4631      	mov	r1, r6
 800920c:	4628      	mov	r0, r5
 800920e:	47b8      	blx	r7
 8009210:	3001      	adds	r0, #1
 8009212:	f43f aef8 	beq.w	8009006 <_printf_float+0xb6>
 8009216:	f10a 0a01 	add.w	sl, sl, #1
 800921a:	e7ee      	b.n	80091fa <_printf_float+0x2aa>
 800921c:	7fefffff 	.word	0x7fefffff
 8009220:	0800eb98 	.word	0x0800eb98
 8009224:	0800eb9c 	.word	0x0800eb9c
 8009228:	0800eba0 	.word	0x0800eba0
 800922c:	0800eba4 	.word	0x0800eba4
 8009230:	0800eba8 	.word	0x0800eba8
 8009234:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009236:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800923a:	4553      	cmp	r3, sl
 800923c:	bfa8      	it	ge
 800923e:	4653      	movge	r3, sl
 8009240:	2b00      	cmp	r3, #0
 8009242:	4699      	mov	r9, r3
 8009244:	dc36      	bgt.n	80092b4 <_printf_float+0x364>
 8009246:	f04f 0b00 	mov.w	fp, #0
 800924a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800924e:	f104 021a 	add.w	r2, r4, #26
 8009252:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009254:	930a      	str	r3, [sp, #40]	@ 0x28
 8009256:	eba3 0309 	sub.w	r3, r3, r9
 800925a:	455b      	cmp	r3, fp
 800925c:	dc31      	bgt.n	80092c2 <_printf_float+0x372>
 800925e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009260:	459a      	cmp	sl, r3
 8009262:	dc3a      	bgt.n	80092da <_printf_float+0x38a>
 8009264:	6823      	ldr	r3, [r4, #0]
 8009266:	07da      	lsls	r2, r3, #31
 8009268:	d437      	bmi.n	80092da <_printf_float+0x38a>
 800926a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800926c:	ebaa 0903 	sub.w	r9, sl, r3
 8009270:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009272:	ebaa 0303 	sub.w	r3, sl, r3
 8009276:	4599      	cmp	r9, r3
 8009278:	bfa8      	it	ge
 800927a:	4699      	movge	r9, r3
 800927c:	f1b9 0f00 	cmp.w	r9, #0
 8009280:	dc33      	bgt.n	80092ea <_printf_float+0x39a>
 8009282:	f04f 0800 	mov.w	r8, #0
 8009286:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800928a:	f104 0b1a 	add.w	fp, r4, #26
 800928e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009290:	ebaa 0303 	sub.w	r3, sl, r3
 8009294:	eba3 0309 	sub.w	r3, r3, r9
 8009298:	4543      	cmp	r3, r8
 800929a:	f77f af7a 	ble.w	8009192 <_printf_float+0x242>
 800929e:	2301      	movs	r3, #1
 80092a0:	465a      	mov	r2, fp
 80092a2:	4631      	mov	r1, r6
 80092a4:	4628      	mov	r0, r5
 80092a6:	47b8      	blx	r7
 80092a8:	3001      	adds	r0, #1
 80092aa:	f43f aeac 	beq.w	8009006 <_printf_float+0xb6>
 80092ae:	f108 0801 	add.w	r8, r8, #1
 80092b2:	e7ec      	b.n	800928e <_printf_float+0x33e>
 80092b4:	4642      	mov	r2, r8
 80092b6:	4631      	mov	r1, r6
 80092b8:	4628      	mov	r0, r5
 80092ba:	47b8      	blx	r7
 80092bc:	3001      	adds	r0, #1
 80092be:	d1c2      	bne.n	8009246 <_printf_float+0x2f6>
 80092c0:	e6a1      	b.n	8009006 <_printf_float+0xb6>
 80092c2:	2301      	movs	r3, #1
 80092c4:	4631      	mov	r1, r6
 80092c6:	4628      	mov	r0, r5
 80092c8:	920a      	str	r2, [sp, #40]	@ 0x28
 80092ca:	47b8      	blx	r7
 80092cc:	3001      	adds	r0, #1
 80092ce:	f43f ae9a 	beq.w	8009006 <_printf_float+0xb6>
 80092d2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80092d4:	f10b 0b01 	add.w	fp, fp, #1
 80092d8:	e7bb      	b.n	8009252 <_printf_float+0x302>
 80092da:	4631      	mov	r1, r6
 80092dc:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80092e0:	4628      	mov	r0, r5
 80092e2:	47b8      	blx	r7
 80092e4:	3001      	adds	r0, #1
 80092e6:	d1c0      	bne.n	800926a <_printf_float+0x31a>
 80092e8:	e68d      	b.n	8009006 <_printf_float+0xb6>
 80092ea:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80092ec:	464b      	mov	r3, r9
 80092ee:	4631      	mov	r1, r6
 80092f0:	4628      	mov	r0, r5
 80092f2:	4442      	add	r2, r8
 80092f4:	47b8      	blx	r7
 80092f6:	3001      	adds	r0, #1
 80092f8:	d1c3      	bne.n	8009282 <_printf_float+0x332>
 80092fa:	e684      	b.n	8009006 <_printf_float+0xb6>
 80092fc:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8009300:	f1ba 0f01 	cmp.w	sl, #1
 8009304:	dc01      	bgt.n	800930a <_printf_float+0x3ba>
 8009306:	07db      	lsls	r3, r3, #31
 8009308:	d536      	bpl.n	8009378 <_printf_float+0x428>
 800930a:	2301      	movs	r3, #1
 800930c:	4642      	mov	r2, r8
 800930e:	4631      	mov	r1, r6
 8009310:	4628      	mov	r0, r5
 8009312:	47b8      	blx	r7
 8009314:	3001      	adds	r0, #1
 8009316:	f43f ae76 	beq.w	8009006 <_printf_float+0xb6>
 800931a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800931e:	4631      	mov	r1, r6
 8009320:	4628      	mov	r0, r5
 8009322:	47b8      	blx	r7
 8009324:	3001      	adds	r0, #1
 8009326:	f43f ae6e 	beq.w	8009006 <_printf_float+0xb6>
 800932a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800932e:	2200      	movs	r2, #0
 8009330:	2300      	movs	r3, #0
 8009332:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009336:	f7f7 fb37 	bl	80009a8 <__aeabi_dcmpeq>
 800933a:	b9c0      	cbnz	r0, 800936e <_printf_float+0x41e>
 800933c:	4653      	mov	r3, sl
 800933e:	f108 0201 	add.w	r2, r8, #1
 8009342:	4631      	mov	r1, r6
 8009344:	4628      	mov	r0, r5
 8009346:	47b8      	blx	r7
 8009348:	3001      	adds	r0, #1
 800934a:	d10c      	bne.n	8009366 <_printf_float+0x416>
 800934c:	e65b      	b.n	8009006 <_printf_float+0xb6>
 800934e:	2301      	movs	r3, #1
 8009350:	465a      	mov	r2, fp
 8009352:	4631      	mov	r1, r6
 8009354:	4628      	mov	r0, r5
 8009356:	47b8      	blx	r7
 8009358:	3001      	adds	r0, #1
 800935a:	f43f ae54 	beq.w	8009006 <_printf_float+0xb6>
 800935e:	f108 0801 	add.w	r8, r8, #1
 8009362:	45d0      	cmp	r8, sl
 8009364:	dbf3      	blt.n	800934e <_printf_float+0x3fe>
 8009366:	464b      	mov	r3, r9
 8009368:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800936c:	e6e0      	b.n	8009130 <_printf_float+0x1e0>
 800936e:	f04f 0800 	mov.w	r8, #0
 8009372:	f104 0b1a 	add.w	fp, r4, #26
 8009376:	e7f4      	b.n	8009362 <_printf_float+0x412>
 8009378:	2301      	movs	r3, #1
 800937a:	4642      	mov	r2, r8
 800937c:	e7e1      	b.n	8009342 <_printf_float+0x3f2>
 800937e:	2301      	movs	r3, #1
 8009380:	464a      	mov	r2, r9
 8009382:	4631      	mov	r1, r6
 8009384:	4628      	mov	r0, r5
 8009386:	47b8      	blx	r7
 8009388:	3001      	adds	r0, #1
 800938a:	f43f ae3c 	beq.w	8009006 <_printf_float+0xb6>
 800938e:	f108 0801 	add.w	r8, r8, #1
 8009392:	68e3      	ldr	r3, [r4, #12]
 8009394:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8009396:	1a5b      	subs	r3, r3, r1
 8009398:	4543      	cmp	r3, r8
 800939a:	dcf0      	bgt.n	800937e <_printf_float+0x42e>
 800939c:	e6fd      	b.n	800919a <_printf_float+0x24a>
 800939e:	f04f 0800 	mov.w	r8, #0
 80093a2:	f104 0919 	add.w	r9, r4, #25
 80093a6:	e7f4      	b.n	8009392 <_printf_float+0x442>

080093a8 <_printf_common>:
 80093a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80093ac:	4616      	mov	r6, r2
 80093ae:	4698      	mov	r8, r3
 80093b0:	688a      	ldr	r2, [r1, #8]
 80093b2:	690b      	ldr	r3, [r1, #16]
 80093b4:	4607      	mov	r7, r0
 80093b6:	4293      	cmp	r3, r2
 80093b8:	bfb8      	it	lt
 80093ba:	4613      	movlt	r3, r2
 80093bc:	6033      	str	r3, [r6, #0]
 80093be:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80093c2:	460c      	mov	r4, r1
 80093c4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80093c8:	b10a      	cbz	r2, 80093ce <_printf_common+0x26>
 80093ca:	3301      	adds	r3, #1
 80093cc:	6033      	str	r3, [r6, #0]
 80093ce:	6823      	ldr	r3, [r4, #0]
 80093d0:	0699      	lsls	r1, r3, #26
 80093d2:	bf42      	ittt	mi
 80093d4:	6833      	ldrmi	r3, [r6, #0]
 80093d6:	3302      	addmi	r3, #2
 80093d8:	6033      	strmi	r3, [r6, #0]
 80093da:	6825      	ldr	r5, [r4, #0]
 80093dc:	f015 0506 	ands.w	r5, r5, #6
 80093e0:	d106      	bne.n	80093f0 <_printf_common+0x48>
 80093e2:	f104 0a19 	add.w	sl, r4, #25
 80093e6:	68e3      	ldr	r3, [r4, #12]
 80093e8:	6832      	ldr	r2, [r6, #0]
 80093ea:	1a9b      	subs	r3, r3, r2
 80093ec:	42ab      	cmp	r3, r5
 80093ee:	dc2b      	bgt.n	8009448 <_printf_common+0xa0>
 80093f0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80093f4:	6822      	ldr	r2, [r4, #0]
 80093f6:	3b00      	subs	r3, #0
 80093f8:	bf18      	it	ne
 80093fa:	2301      	movne	r3, #1
 80093fc:	0692      	lsls	r2, r2, #26
 80093fe:	d430      	bmi.n	8009462 <_printf_common+0xba>
 8009400:	4641      	mov	r1, r8
 8009402:	4638      	mov	r0, r7
 8009404:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009408:	47c8      	blx	r9
 800940a:	3001      	adds	r0, #1
 800940c:	d023      	beq.n	8009456 <_printf_common+0xae>
 800940e:	6823      	ldr	r3, [r4, #0]
 8009410:	6922      	ldr	r2, [r4, #16]
 8009412:	f003 0306 	and.w	r3, r3, #6
 8009416:	2b04      	cmp	r3, #4
 8009418:	bf14      	ite	ne
 800941a:	2500      	movne	r5, #0
 800941c:	6833      	ldreq	r3, [r6, #0]
 800941e:	f04f 0600 	mov.w	r6, #0
 8009422:	bf08      	it	eq
 8009424:	68e5      	ldreq	r5, [r4, #12]
 8009426:	f104 041a 	add.w	r4, r4, #26
 800942a:	bf08      	it	eq
 800942c:	1aed      	subeq	r5, r5, r3
 800942e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8009432:	bf08      	it	eq
 8009434:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009438:	4293      	cmp	r3, r2
 800943a:	bfc4      	itt	gt
 800943c:	1a9b      	subgt	r3, r3, r2
 800943e:	18ed      	addgt	r5, r5, r3
 8009440:	42b5      	cmp	r5, r6
 8009442:	d11a      	bne.n	800947a <_printf_common+0xd2>
 8009444:	2000      	movs	r0, #0
 8009446:	e008      	b.n	800945a <_printf_common+0xb2>
 8009448:	2301      	movs	r3, #1
 800944a:	4652      	mov	r2, sl
 800944c:	4641      	mov	r1, r8
 800944e:	4638      	mov	r0, r7
 8009450:	47c8      	blx	r9
 8009452:	3001      	adds	r0, #1
 8009454:	d103      	bne.n	800945e <_printf_common+0xb6>
 8009456:	f04f 30ff 	mov.w	r0, #4294967295
 800945a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800945e:	3501      	adds	r5, #1
 8009460:	e7c1      	b.n	80093e6 <_printf_common+0x3e>
 8009462:	2030      	movs	r0, #48	@ 0x30
 8009464:	18e1      	adds	r1, r4, r3
 8009466:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800946a:	1c5a      	adds	r2, r3, #1
 800946c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009470:	4422      	add	r2, r4
 8009472:	3302      	adds	r3, #2
 8009474:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009478:	e7c2      	b.n	8009400 <_printf_common+0x58>
 800947a:	2301      	movs	r3, #1
 800947c:	4622      	mov	r2, r4
 800947e:	4641      	mov	r1, r8
 8009480:	4638      	mov	r0, r7
 8009482:	47c8      	blx	r9
 8009484:	3001      	adds	r0, #1
 8009486:	d0e6      	beq.n	8009456 <_printf_common+0xae>
 8009488:	3601      	adds	r6, #1
 800948a:	e7d9      	b.n	8009440 <_printf_common+0x98>

0800948c <_printf_i>:
 800948c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009490:	7e0f      	ldrb	r7, [r1, #24]
 8009492:	4691      	mov	r9, r2
 8009494:	2f78      	cmp	r7, #120	@ 0x78
 8009496:	4680      	mov	r8, r0
 8009498:	460c      	mov	r4, r1
 800949a:	469a      	mov	sl, r3
 800949c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800949e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80094a2:	d807      	bhi.n	80094b4 <_printf_i+0x28>
 80094a4:	2f62      	cmp	r7, #98	@ 0x62
 80094a6:	d80a      	bhi.n	80094be <_printf_i+0x32>
 80094a8:	2f00      	cmp	r7, #0
 80094aa:	f000 80d3 	beq.w	8009654 <_printf_i+0x1c8>
 80094ae:	2f58      	cmp	r7, #88	@ 0x58
 80094b0:	f000 80ba 	beq.w	8009628 <_printf_i+0x19c>
 80094b4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80094b8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80094bc:	e03a      	b.n	8009534 <_printf_i+0xa8>
 80094be:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80094c2:	2b15      	cmp	r3, #21
 80094c4:	d8f6      	bhi.n	80094b4 <_printf_i+0x28>
 80094c6:	a101      	add	r1, pc, #4	@ (adr r1, 80094cc <_printf_i+0x40>)
 80094c8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80094cc:	08009525 	.word	0x08009525
 80094d0:	08009539 	.word	0x08009539
 80094d4:	080094b5 	.word	0x080094b5
 80094d8:	080094b5 	.word	0x080094b5
 80094dc:	080094b5 	.word	0x080094b5
 80094e0:	080094b5 	.word	0x080094b5
 80094e4:	08009539 	.word	0x08009539
 80094e8:	080094b5 	.word	0x080094b5
 80094ec:	080094b5 	.word	0x080094b5
 80094f0:	080094b5 	.word	0x080094b5
 80094f4:	080094b5 	.word	0x080094b5
 80094f8:	0800963b 	.word	0x0800963b
 80094fc:	08009563 	.word	0x08009563
 8009500:	080095f5 	.word	0x080095f5
 8009504:	080094b5 	.word	0x080094b5
 8009508:	080094b5 	.word	0x080094b5
 800950c:	0800965d 	.word	0x0800965d
 8009510:	080094b5 	.word	0x080094b5
 8009514:	08009563 	.word	0x08009563
 8009518:	080094b5 	.word	0x080094b5
 800951c:	080094b5 	.word	0x080094b5
 8009520:	080095fd 	.word	0x080095fd
 8009524:	6833      	ldr	r3, [r6, #0]
 8009526:	1d1a      	adds	r2, r3, #4
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	6032      	str	r2, [r6, #0]
 800952c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009530:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009534:	2301      	movs	r3, #1
 8009536:	e09e      	b.n	8009676 <_printf_i+0x1ea>
 8009538:	6833      	ldr	r3, [r6, #0]
 800953a:	6820      	ldr	r0, [r4, #0]
 800953c:	1d19      	adds	r1, r3, #4
 800953e:	6031      	str	r1, [r6, #0]
 8009540:	0606      	lsls	r6, r0, #24
 8009542:	d501      	bpl.n	8009548 <_printf_i+0xbc>
 8009544:	681d      	ldr	r5, [r3, #0]
 8009546:	e003      	b.n	8009550 <_printf_i+0xc4>
 8009548:	0645      	lsls	r5, r0, #25
 800954a:	d5fb      	bpl.n	8009544 <_printf_i+0xb8>
 800954c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009550:	2d00      	cmp	r5, #0
 8009552:	da03      	bge.n	800955c <_printf_i+0xd0>
 8009554:	232d      	movs	r3, #45	@ 0x2d
 8009556:	426d      	negs	r5, r5
 8009558:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800955c:	230a      	movs	r3, #10
 800955e:	4859      	ldr	r0, [pc, #356]	@ (80096c4 <_printf_i+0x238>)
 8009560:	e011      	b.n	8009586 <_printf_i+0xfa>
 8009562:	6821      	ldr	r1, [r4, #0]
 8009564:	6833      	ldr	r3, [r6, #0]
 8009566:	0608      	lsls	r0, r1, #24
 8009568:	f853 5b04 	ldr.w	r5, [r3], #4
 800956c:	d402      	bmi.n	8009574 <_printf_i+0xe8>
 800956e:	0649      	lsls	r1, r1, #25
 8009570:	bf48      	it	mi
 8009572:	b2ad      	uxthmi	r5, r5
 8009574:	2f6f      	cmp	r7, #111	@ 0x6f
 8009576:	6033      	str	r3, [r6, #0]
 8009578:	bf14      	ite	ne
 800957a:	230a      	movne	r3, #10
 800957c:	2308      	moveq	r3, #8
 800957e:	4851      	ldr	r0, [pc, #324]	@ (80096c4 <_printf_i+0x238>)
 8009580:	2100      	movs	r1, #0
 8009582:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009586:	6866      	ldr	r6, [r4, #4]
 8009588:	2e00      	cmp	r6, #0
 800958a:	bfa8      	it	ge
 800958c:	6821      	ldrge	r1, [r4, #0]
 800958e:	60a6      	str	r6, [r4, #8]
 8009590:	bfa4      	itt	ge
 8009592:	f021 0104 	bicge.w	r1, r1, #4
 8009596:	6021      	strge	r1, [r4, #0]
 8009598:	b90d      	cbnz	r5, 800959e <_printf_i+0x112>
 800959a:	2e00      	cmp	r6, #0
 800959c:	d04b      	beq.n	8009636 <_printf_i+0x1aa>
 800959e:	4616      	mov	r6, r2
 80095a0:	fbb5 f1f3 	udiv	r1, r5, r3
 80095a4:	fb03 5711 	mls	r7, r3, r1, r5
 80095a8:	5dc7      	ldrb	r7, [r0, r7]
 80095aa:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80095ae:	462f      	mov	r7, r5
 80095b0:	42bb      	cmp	r3, r7
 80095b2:	460d      	mov	r5, r1
 80095b4:	d9f4      	bls.n	80095a0 <_printf_i+0x114>
 80095b6:	2b08      	cmp	r3, #8
 80095b8:	d10b      	bne.n	80095d2 <_printf_i+0x146>
 80095ba:	6823      	ldr	r3, [r4, #0]
 80095bc:	07df      	lsls	r7, r3, #31
 80095be:	d508      	bpl.n	80095d2 <_printf_i+0x146>
 80095c0:	6923      	ldr	r3, [r4, #16]
 80095c2:	6861      	ldr	r1, [r4, #4]
 80095c4:	4299      	cmp	r1, r3
 80095c6:	bfde      	ittt	le
 80095c8:	2330      	movle	r3, #48	@ 0x30
 80095ca:	f806 3c01 	strble.w	r3, [r6, #-1]
 80095ce:	f106 36ff 	addle.w	r6, r6, #4294967295
 80095d2:	1b92      	subs	r2, r2, r6
 80095d4:	6122      	str	r2, [r4, #16]
 80095d6:	464b      	mov	r3, r9
 80095d8:	4621      	mov	r1, r4
 80095da:	4640      	mov	r0, r8
 80095dc:	f8cd a000 	str.w	sl, [sp]
 80095e0:	aa03      	add	r2, sp, #12
 80095e2:	f7ff fee1 	bl	80093a8 <_printf_common>
 80095e6:	3001      	adds	r0, #1
 80095e8:	d14a      	bne.n	8009680 <_printf_i+0x1f4>
 80095ea:	f04f 30ff 	mov.w	r0, #4294967295
 80095ee:	b004      	add	sp, #16
 80095f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095f4:	6823      	ldr	r3, [r4, #0]
 80095f6:	f043 0320 	orr.w	r3, r3, #32
 80095fa:	6023      	str	r3, [r4, #0]
 80095fc:	2778      	movs	r7, #120	@ 0x78
 80095fe:	4832      	ldr	r0, [pc, #200]	@ (80096c8 <_printf_i+0x23c>)
 8009600:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009604:	6823      	ldr	r3, [r4, #0]
 8009606:	6831      	ldr	r1, [r6, #0]
 8009608:	061f      	lsls	r7, r3, #24
 800960a:	f851 5b04 	ldr.w	r5, [r1], #4
 800960e:	d402      	bmi.n	8009616 <_printf_i+0x18a>
 8009610:	065f      	lsls	r7, r3, #25
 8009612:	bf48      	it	mi
 8009614:	b2ad      	uxthmi	r5, r5
 8009616:	6031      	str	r1, [r6, #0]
 8009618:	07d9      	lsls	r1, r3, #31
 800961a:	bf44      	itt	mi
 800961c:	f043 0320 	orrmi.w	r3, r3, #32
 8009620:	6023      	strmi	r3, [r4, #0]
 8009622:	b11d      	cbz	r5, 800962c <_printf_i+0x1a0>
 8009624:	2310      	movs	r3, #16
 8009626:	e7ab      	b.n	8009580 <_printf_i+0xf4>
 8009628:	4826      	ldr	r0, [pc, #152]	@ (80096c4 <_printf_i+0x238>)
 800962a:	e7e9      	b.n	8009600 <_printf_i+0x174>
 800962c:	6823      	ldr	r3, [r4, #0]
 800962e:	f023 0320 	bic.w	r3, r3, #32
 8009632:	6023      	str	r3, [r4, #0]
 8009634:	e7f6      	b.n	8009624 <_printf_i+0x198>
 8009636:	4616      	mov	r6, r2
 8009638:	e7bd      	b.n	80095b6 <_printf_i+0x12a>
 800963a:	6833      	ldr	r3, [r6, #0]
 800963c:	6825      	ldr	r5, [r4, #0]
 800963e:	1d18      	adds	r0, r3, #4
 8009640:	6961      	ldr	r1, [r4, #20]
 8009642:	6030      	str	r0, [r6, #0]
 8009644:	062e      	lsls	r6, r5, #24
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	d501      	bpl.n	800964e <_printf_i+0x1c2>
 800964a:	6019      	str	r1, [r3, #0]
 800964c:	e002      	b.n	8009654 <_printf_i+0x1c8>
 800964e:	0668      	lsls	r0, r5, #25
 8009650:	d5fb      	bpl.n	800964a <_printf_i+0x1be>
 8009652:	8019      	strh	r1, [r3, #0]
 8009654:	2300      	movs	r3, #0
 8009656:	4616      	mov	r6, r2
 8009658:	6123      	str	r3, [r4, #16]
 800965a:	e7bc      	b.n	80095d6 <_printf_i+0x14a>
 800965c:	6833      	ldr	r3, [r6, #0]
 800965e:	2100      	movs	r1, #0
 8009660:	1d1a      	adds	r2, r3, #4
 8009662:	6032      	str	r2, [r6, #0]
 8009664:	681e      	ldr	r6, [r3, #0]
 8009666:	6862      	ldr	r2, [r4, #4]
 8009668:	4630      	mov	r0, r6
 800966a:	f000 fc10 	bl	8009e8e <memchr>
 800966e:	b108      	cbz	r0, 8009674 <_printf_i+0x1e8>
 8009670:	1b80      	subs	r0, r0, r6
 8009672:	6060      	str	r0, [r4, #4]
 8009674:	6863      	ldr	r3, [r4, #4]
 8009676:	6123      	str	r3, [r4, #16]
 8009678:	2300      	movs	r3, #0
 800967a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800967e:	e7aa      	b.n	80095d6 <_printf_i+0x14a>
 8009680:	4632      	mov	r2, r6
 8009682:	4649      	mov	r1, r9
 8009684:	4640      	mov	r0, r8
 8009686:	6923      	ldr	r3, [r4, #16]
 8009688:	47d0      	blx	sl
 800968a:	3001      	adds	r0, #1
 800968c:	d0ad      	beq.n	80095ea <_printf_i+0x15e>
 800968e:	6823      	ldr	r3, [r4, #0]
 8009690:	079b      	lsls	r3, r3, #30
 8009692:	d413      	bmi.n	80096bc <_printf_i+0x230>
 8009694:	68e0      	ldr	r0, [r4, #12]
 8009696:	9b03      	ldr	r3, [sp, #12]
 8009698:	4298      	cmp	r0, r3
 800969a:	bfb8      	it	lt
 800969c:	4618      	movlt	r0, r3
 800969e:	e7a6      	b.n	80095ee <_printf_i+0x162>
 80096a0:	2301      	movs	r3, #1
 80096a2:	4632      	mov	r2, r6
 80096a4:	4649      	mov	r1, r9
 80096a6:	4640      	mov	r0, r8
 80096a8:	47d0      	blx	sl
 80096aa:	3001      	adds	r0, #1
 80096ac:	d09d      	beq.n	80095ea <_printf_i+0x15e>
 80096ae:	3501      	adds	r5, #1
 80096b0:	68e3      	ldr	r3, [r4, #12]
 80096b2:	9903      	ldr	r1, [sp, #12]
 80096b4:	1a5b      	subs	r3, r3, r1
 80096b6:	42ab      	cmp	r3, r5
 80096b8:	dcf2      	bgt.n	80096a0 <_printf_i+0x214>
 80096ba:	e7eb      	b.n	8009694 <_printf_i+0x208>
 80096bc:	2500      	movs	r5, #0
 80096be:	f104 0619 	add.w	r6, r4, #25
 80096c2:	e7f5      	b.n	80096b0 <_printf_i+0x224>
 80096c4:	0800ebaa 	.word	0x0800ebaa
 80096c8:	0800ebbb 	.word	0x0800ebbb

080096cc <_scanf_float>:
 80096cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096d0:	b087      	sub	sp, #28
 80096d2:	9303      	str	r3, [sp, #12]
 80096d4:	688b      	ldr	r3, [r1, #8]
 80096d6:	4617      	mov	r7, r2
 80096d8:	1e5a      	subs	r2, r3, #1
 80096da:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80096de:	bf82      	ittt	hi
 80096e0:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80096e4:	eb03 0b05 	addhi.w	fp, r3, r5
 80096e8:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80096ec:	460a      	mov	r2, r1
 80096ee:	f04f 0500 	mov.w	r5, #0
 80096f2:	bf88      	it	hi
 80096f4:	608b      	strhi	r3, [r1, #8]
 80096f6:	680b      	ldr	r3, [r1, #0]
 80096f8:	4680      	mov	r8, r0
 80096fa:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80096fe:	f842 3b1c 	str.w	r3, [r2], #28
 8009702:	460c      	mov	r4, r1
 8009704:	bf98      	it	ls
 8009706:	f04f 0b00 	movls.w	fp, #0
 800970a:	4616      	mov	r6, r2
 800970c:	46aa      	mov	sl, r5
 800970e:	46a9      	mov	r9, r5
 8009710:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8009714:	9201      	str	r2, [sp, #4]
 8009716:	9502      	str	r5, [sp, #8]
 8009718:	68a2      	ldr	r2, [r4, #8]
 800971a:	b152      	cbz	r2, 8009732 <_scanf_float+0x66>
 800971c:	683b      	ldr	r3, [r7, #0]
 800971e:	781b      	ldrb	r3, [r3, #0]
 8009720:	2b4e      	cmp	r3, #78	@ 0x4e
 8009722:	d865      	bhi.n	80097f0 <_scanf_float+0x124>
 8009724:	2b40      	cmp	r3, #64	@ 0x40
 8009726:	d83d      	bhi.n	80097a4 <_scanf_float+0xd8>
 8009728:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800972c:	b2c8      	uxtb	r0, r1
 800972e:	280e      	cmp	r0, #14
 8009730:	d93b      	bls.n	80097aa <_scanf_float+0xde>
 8009732:	f1b9 0f00 	cmp.w	r9, #0
 8009736:	d003      	beq.n	8009740 <_scanf_float+0x74>
 8009738:	6823      	ldr	r3, [r4, #0]
 800973a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800973e:	6023      	str	r3, [r4, #0]
 8009740:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009744:	f1ba 0f01 	cmp.w	sl, #1
 8009748:	f200 8118 	bhi.w	800997c <_scanf_float+0x2b0>
 800974c:	9b01      	ldr	r3, [sp, #4]
 800974e:	429e      	cmp	r6, r3
 8009750:	f200 8109 	bhi.w	8009966 <_scanf_float+0x29a>
 8009754:	2001      	movs	r0, #1
 8009756:	b007      	add	sp, #28
 8009758:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800975c:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8009760:	2a0d      	cmp	r2, #13
 8009762:	d8e6      	bhi.n	8009732 <_scanf_float+0x66>
 8009764:	a101      	add	r1, pc, #4	@ (adr r1, 800976c <_scanf_float+0xa0>)
 8009766:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800976a:	bf00      	nop
 800976c:	080098b3 	.word	0x080098b3
 8009770:	08009733 	.word	0x08009733
 8009774:	08009733 	.word	0x08009733
 8009778:	08009733 	.word	0x08009733
 800977c:	08009913 	.word	0x08009913
 8009780:	080098eb 	.word	0x080098eb
 8009784:	08009733 	.word	0x08009733
 8009788:	08009733 	.word	0x08009733
 800978c:	080098c1 	.word	0x080098c1
 8009790:	08009733 	.word	0x08009733
 8009794:	08009733 	.word	0x08009733
 8009798:	08009733 	.word	0x08009733
 800979c:	08009733 	.word	0x08009733
 80097a0:	08009879 	.word	0x08009879
 80097a4:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80097a8:	e7da      	b.n	8009760 <_scanf_float+0x94>
 80097aa:	290e      	cmp	r1, #14
 80097ac:	d8c1      	bhi.n	8009732 <_scanf_float+0x66>
 80097ae:	a001      	add	r0, pc, #4	@ (adr r0, 80097b4 <_scanf_float+0xe8>)
 80097b0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80097b4:	08009869 	.word	0x08009869
 80097b8:	08009733 	.word	0x08009733
 80097bc:	08009869 	.word	0x08009869
 80097c0:	080098ff 	.word	0x080098ff
 80097c4:	08009733 	.word	0x08009733
 80097c8:	08009811 	.word	0x08009811
 80097cc:	0800984f 	.word	0x0800984f
 80097d0:	0800984f 	.word	0x0800984f
 80097d4:	0800984f 	.word	0x0800984f
 80097d8:	0800984f 	.word	0x0800984f
 80097dc:	0800984f 	.word	0x0800984f
 80097e0:	0800984f 	.word	0x0800984f
 80097e4:	0800984f 	.word	0x0800984f
 80097e8:	0800984f 	.word	0x0800984f
 80097ec:	0800984f 	.word	0x0800984f
 80097f0:	2b6e      	cmp	r3, #110	@ 0x6e
 80097f2:	d809      	bhi.n	8009808 <_scanf_float+0x13c>
 80097f4:	2b60      	cmp	r3, #96	@ 0x60
 80097f6:	d8b1      	bhi.n	800975c <_scanf_float+0x90>
 80097f8:	2b54      	cmp	r3, #84	@ 0x54
 80097fa:	d07b      	beq.n	80098f4 <_scanf_float+0x228>
 80097fc:	2b59      	cmp	r3, #89	@ 0x59
 80097fe:	d198      	bne.n	8009732 <_scanf_float+0x66>
 8009800:	2d07      	cmp	r5, #7
 8009802:	d196      	bne.n	8009732 <_scanf_float+0x66>
 8009804:	2508      	movs	r5, #8
 8009806:	e02c      	b.n	8009862 <_scanf_float+0x196>
 8009808:	2b74      	cmp	r3, #116	@ 0x74
 800980a:	d073      	beq.n	80098f4 <_scanf_float+0x228>
 800980c:	2b79      	cmp	r3, #121	@ 0x79
 800980e:	e7f6      	b.n	80097fe <_scanf_float+0x132>
 8009810:	6821      	ldr	r1, [r4, #0]
 8009812:	05c8      	lsls	r0, r1, #23
 8009814:	d51b      	bpl.n	800984e <_scanf_float+0x182>
 8009816:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800981a:	6021      	str	r1, [r4, #0]
 800981c:	f109 0901 	add.w	r9, r9, #1
 8009820:	f1bb 0f00 	cmp.w	fp, #0
 8009824:	d003      	beq.n	800982e <_scanf_float+0x162>
 8009826:	3201      	adds	r2, #1
 8009828:	f10b 3bff 	add.w	fp, fp, #4294967295
 800982c:	60a2      	str	r2, [r4, #8]
 800982e:	68a3      	ldr	r3, [r4, #8]
 8009830:	3b01      	subs	r3, #1
 8009832:	60a3      	str	r3, [r4, #8]
 8009834:	6923      	ldr	r3, [r4, #16]
 8009836:	3301      	adds	r3, #1
 8009838:	6123      	str	r3, [r4, #16]
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	3b01      	subs	r3, #1
 800983e:	2b00      	cmp	r3, #0
 8009840:	607b      	str	r3, [r7, #4]
 8009842:	f340 8087 	ble.w	8009954 <_scanf_float+0x288>
 8009846:	683b      	ldr	r3, [r7, #0]
 8009848:	3301      	adds	r3, #1
 800984a:	603b      	str	r3, [r7, #0]
 800984c:	e764      	b.n	8009718 <_scanf_float+0x4c>
 800984e:	eb1a 0105 	adds.w	r1, sl, r5
 8009852:	f47f af6e 	bne.w	8009732 <_scanf_float+0x66>
 8009856:	460d      	mov	r5, r1
 8009858:	468a      	mov	sl, r1
 800985a:	6822      	ldr	r2, [r4, #0]
 800985c:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8009860:	6022      	str	r2, [r4, #0]
 8009862:	f806 3b01 	strb.w	r3, [r6], #1
 8009866:	e7e2      	b.n	800982e <_scanf_float+0x162>
 8009868:	6822      	ldr	r2, [r4, #0]
 800986a:	0610      	lsls	r0, r2, #24
 800986c:	f57f af61 	bpl.w	8009732 <_scanf_float+0x66>
 8009870:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009874:	6022      	str	r2, [r4, #0]
 8009876:	e7f4      	b.n	8009862 <_scanf_float+0x196>
 8009878:	f1ba 0f00 	cmp.w	sl, #0
 800987c:	d10e      	bne.n	800989c <_scanf_float+0x1d0>
 800987e:	f1b9 0f00 	cmp.w	r9, #0
 8009882:	d10e      	bne.n	80098a2 <_scanf_float+0x1d6>
 8009884:	6822      	ldr	r2, [r4, #0]
 8009886:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800988a:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800988e:	d108      	bne.n	80098a2 <_scanf_float+0x1d6>
 8009890:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8009894:	f04f 0a01 	mov.w	sl, #1
 8009898:	6022      	str	r2, [r4, #0]
 800989a:	e7e2      	b.n	8009862 <_scanf_float+0x196>
 800989c:	f1ba 0f02 	cmp.w	sl, #2
 80098a0:	d055      	beq.n	800994e <_scanf_float+0x282>
 80098a2:	2d01      	cmp	r5, #1
 80098a4:	d002      	beq.n	80098ac <_scanf_float+0x1e0>
 80098a6:	2d04      	cmp	r5, #4
 80098a8:	f47f af43 	bne.w	8009732 <_scanf_float+0x66>
 80098ac:	3501      	adds	r5, #1
 80098ae:	b2ed      	uxtb	r5, r5
 80098b0:	e7d7      	b.n	8009862 <_scanf_float+0x196>
 80098b2:	f1ba 0f01 	cmp.w	sl, #1
 80098b6:	f47f af3c 	bne.w	8009732 <_scanf_float+0x66>
 80098ba:	f04f 0a02 	mov.w	sl, #2
 80098be:	e7d0      	b.n	8009862 <_scanf_float+0x196>
 80098c0:	b97d      	cbnz	r5, 80098e2 <_scanf_float+0x216>
 80098c2:	f1b9 0f00 	cmp.w	r9, #0
 80098c6:	f47f af37 	bne.w	8009738 <_scanf_float+0x6c>
 80098ca:	6822      	ldr	r2, [r4, #0]
 80098cc:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80098d0:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80098d4:	f040 8103 	bne.w	8009ade <_scanf_float+0x412>
 80098d8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80098dc:	2501      	movs	r5, #1
 80098de:	6022      	str	r2, [r4, #0]
 80098e0:	e7bf      	b.n	8009862 <_scanf_float+0x196>
 80098e2:	2d03      	cmp	r5, #3
 80098e4:	d0e2      	beq.n	80098ac <_scanf_float+0x1e0>
 80098e6:	2d05      	cmp	r5, #5
 80098e8:	e7de      	b.n	80098a8 <_scanf_float+0x1dc>
 80098ea:	2d02      	cmp	r5, #2
 80098ec:	f47f af21 	bne.w	8009732 <_scanf_float+0x66>
 80098f0:	2503      	movs	r5, #3
 80098f2:	e7b6      	b.n	8009862 <_scanf_float+0x196>
 80098f4:	2d06      	cmp	r5, #6
 80098f6:	f47f af1c 	bne.w	8009732 <_scanf_float+0x66>
 80098fa:	2507      	movs	r5, #7
 80098fc:	e7b1      	b.n	8009862 <_scanf_float+0x196>
 80098fe:	6822      	ldr	r2, [r4, #0]
 8009900:	0591      	lsls	r1, r2, #22
 8009902:	f57f af16 	bpl.w	8009732 <_scanf_float+0x66>
 8009906:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800990a:	6022      	str	r2, [r4, #0]
 800990c:	f8cd 9008 	str.w	r9, [sp, #8]
 8009910:	e7a7      	b.n	8009862 <_scanf_float+0x196>
 8009912:	6822      	ldr	r2, [r4, #0]
 8009914:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8009918:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800991c:	d006      	beq.n	800992c <_scanf_float+0x260>
 800991e:	0550      	lsls	r0, r2, #21
 8009920:	f57f af07 	bpl.w	8009732 <_scanf_float+0x66>
 8009924:	f1b9 0f00 	cmp.w	r9, #0
 8009928:	f000 80d9 	beq.w	8009ade <_scanf_float+0x412>
 800992c:	0591      	lsls	r1, r2, #22
 800992e:	bf58      	it	pl
 8009930:	9902      	ldrpl	r1, [sp, #8]
 8009932:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8009936:	bf58      	it	pl
 8009938:	eba9 0101 	subpl.w	r1, r9, r1
 800993c:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8009940:	f04f 0900 	mov.w	r9, #0
 8009944:	bf58      	it	pl
 8009946:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800994a:	6022      	str	r2, [r4, #0]
 800994c:	e789      	b.n	8009862 <_scanf_float+0x196>
 800994e:	f04f 0a03 	mov.w	sl, #3
 8009952:	e786      	b.n	8009862 <_scanf_float+0x196>
 8009954:	4639      	mov	r1, r7
 8009956:	4640      	mov	r0, r8
 8009958:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800995c:	4798      	blx	r3
 800995e:	2800      	cmp	r0, #0
 8009960:	f43f aeda 	beq.w	8009718 <_scanf_float+0x4c>
 8009964:	e6e5      	b.n	8009732 <_scanf_float+0x66>
 8009966:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800996a:	463a      	mov	r2, r7
 800996c:	4640      	mov	r0, r8
 800996e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009972:	4798      	blx	r3
 8009974:	6923      	ldr	r3, [r4, #16]
 8009976:	3b01      	subs	r3, #1
 8009978:	6123      	str	r3, [r4, #16]
 800997a:	e6e7      	b.n	800974c <_scanf_float+0x80>
 800997c:	1e6b      	subs	r3, r5, #1
 800997e:	2b06      	cmp	r3, #6
 8009980:	d824      	bhi.n	80099cc <_scanf_float+0x300>
 8009982:	2d02      	cmp	r5, #2
 8009984:	d836      	bhi.n	80099f4 <_scanf_float+0x328>
 8009986:	9b01      	ldr	r3, [sp, #4]
 8009988:	429e      	cmp	r6, r3
 800998a:	f67f aee3 	bls.w	8009754 <_scanf_float+0x88>
 800998e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009992:	463a      	mov	r2, r7
 8009994:	4640      	mov	r0, r8
 8009996:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800999a:	4798      	blx	r3
 800999c:	6923      	ldr	r3, [r4, #16]
 800999e:	3b01      	subs	r3, #1
 80099a0:	6123      	str	r3, [r4, #16]
 80099a2:	e7f0      	b.n	8009986 <_scanf_float+0x2ba>
 80099a4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80099a8:	463a      	mov	r2, r7
 80099aa:	4640      	mov	r0, r8
 80099ac:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80099b0:	4798      	blx	r3
 80099b2:	6923      	ldr	r3, [r4, #16]
 80099b4:	3b01      	subs	r3, #1
 80099b6:	6123      	str	r3, [r4, #16]
 80099b8:	f10a 3aff 	add.w	sl, sl, #4294967295
 80099bc:	fa5f fa8a 	uxtb.w	sl, sl
 80099c0:	f1ba 0f02 	cmp.w	sl, #2
 80099c4:	d1ee      	bne.n	80099a4 <_scanf_float+0x2d8>
 80099c6:	3d03      	subs	r5, #3
 80099c8:	b2ed      	uxtb	r5, r5
 80099ca:	1b76      	subs	r6, r6, r5
 80099cc:	6823      	ldr	r3, [r4, #0]
 80099ce:	05da      	lsls	r2, r3, #23
 80099d0:	d530      	bpl.n	8009a34 <_scanf_float+0x368>
 80099d2:	055b      	lsls	r3, r3, #21
 80099d4:	d511      	bpl.n	80099fa <_scanf_float+0x32e>
 80099d6:	9b01      	ldr	r3, [sp, #4]
 80099d8:	429e      	cmp	r6, r3
 80099da:	f67f aebb 	bls.w	8009754 <_scanf_float+0x88>
 80099de:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80099e2:	463a      	mov	r2, r7
 80099e4:	4640      	mov	r0, r8
 80099e6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80099ea:	4798      	blx	r3
 80099ec:	6923      	ldr	r3, [r4, #16]
 80099ee:	3b01      	subs	r3, #1
 80099f0:	6123      	str	r3, [r4, #16]
 80099f2:	e7f0      	b.n	80099d6 <_scanf_float+0x30a>
 80099f4:	46aa      	mov	sl, r5
 80099f6:	46b3      	mov	fp, r6
 80099f8:	e7de      	b.n	80099b8 <_scanf_float+0x2ec>
 80099fa:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80099fe:	6923      	ldr	r3, [r4, #16]
 8009a00:	2965      	cmp	r1, #101	@ 0x65
 8009a02:	f103 33ff 	add.w	r3, r3, #4294967295
 8009a06:	f106 35ff 	add.w	r5, r6, #4294967295
 8009a0a:	6123      	str	r3, [r4, #16]
 8009a0c:	d00c      	beq.n	8009a28 <_scanf_float+0x35c>
 8009a0e:	2945      	cmp	r1, #69	@ 0x45
 8009a10:	d00a      	beq.n	8009a28 <_scanf_float+0x35c>
 8009a12:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009a16:	463a      	mov	r2, r7
 8009a18:	4640      	mov	r0, r8
 8009a1a:	4798      	blx	r3
 8009a1c:	6923      	ldr	r3, [r4, #16]
 8009a1e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8009a22:	3b01      	subs	r3, #1
 8009a24:	1eb5      	subs	r5, r6, #2
 8009a26:	6123      	str	r3, [r4, #16]
 8009a28:	463a      	mov	r2, r7
 8009a2a:	4640      	mov	r0, r8
 8009a2c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009a30:	4798      	blx	r3
 8009a32:	462e      	mov	r6, r5
 8009a34:	6822      	ldr	r2, [r4, #0]
 8009a36:	f012 0210 	ands.w	r2, r2, #16
 8009a3a:	d001      	beq.n	8009a40 <_scanf_float+0x374>
 8009a3c:	2000      	movs	r0, #0
 8009a3e:	e68a      	b.n	8009756 <_scanf_float+0x8a>
 8009a40:	7032      	strb	r2, [r6, #0]
 8009a42:	6823      	ldr	r3, [r4, #0]
 8009a44:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8009a48:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009a4c:	d11c      	bne.n	8009a88 <_scanf_float+0x3bc>
 8009a4e:	9b02      	ldr	r3, [sp, #8]
 8009a50:	454b      	cmp	r3, r9
 8009a52:	eba3 0209 	sub.w	r2, r3, r9
 8009a56:	d123      	bne.n	8009aa0 <_scanf_float+0x3d4>
 8009a58:	2200      	movs	r2, #0
 8009a5a:	4640      	mov	r0, r8
 8009a5c:	9901      	ldr	r1, [sp, #4]
 8009a5e:	f002 fc27 	bl	800c2b0 <_strtod_r>
 8009a62:	9b03      	ldr	r3, [sp, #12]
 8009a64:	6825      	ldr	r5, [r4, #0]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	f015 0f02 	tst.w	r5, #2
 8009a6c:	4606      	mov	r6, r0
 8009a6e:	460f      	mov	r7, r1
 8009a70:	f103 0204 	add.w	r2, r3, #4
 8009a74:	d01f      	beq.n	8009ab6 <_scanf_float+0x3ea>
 8009a76:	9903      	ldr	r1, [sp, #12]
 8009a78:	600a      	str	r2, [r1, #0]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	e9c3 6700 	strd	r6, r7, [r3]
 8009a80:	68e3      	ldr	r3, [r4, #12]
 8009a82:	3301      	adds	r3, #1
 8009a84:	60e3      	str	r3, [r4, #12]
 8009a86:	e7d9      	b.n	8009a3c <_scanf_float+0x370>
 8009a88:	9b04      	ldr	r3, [sp, #16]
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d0e4      	beq.n	8009a58 <_scanf_float+0x38c>
 8009a8e:	9905      	ldr	r1, [sp, #20]
 8009a90:	230a      	movs	r3, #10
 8009a92:	4640      	mov	r0, r8
 8009a94:	3101      	adds	r1, #1
 8009a96:	f002 fc8b 	bl	800c3b0 <_strtol_r>
 8009a9a:	9b04      	ldr	r3, [sp, #16]
 8009a9c:	9e05      	ldr	r6, [sp, #20]
 8009a9e:	1ac2      	subs	r2, r0, r3
 8009aa0:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8009aa4:	429e      	cmp	r6, r3
 8009aa6:	bf28      	it	cs
 8009aa8:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8009aac:	4630      	mov	r0, r6
 8009aae:	490d      	ldr	r1, [pc, #52]	@ (8009ae4 <_scanf_float+0x418>)
 8009ab0:	f000 f8f0 	bl	8009c94 <siprintf>
 8009ab4:	e7d0      	b.n	8009a58 <_scanf_float+0x38c>
 8009ab6:	076d      	lsls	r5, r5, #29
 8009ab8:	d4dd      	bmi.n	8009a76 <_scanf_float+0x3aa>
 8009aba:	9d03      	ldr	r5, [sp, #12]
 8009abc:	602a      	str	r2, [r5, #0]
 8009abe:	681d      	ldr	r5, [r3, #0]
 8009ac0:	4602      	mov	r2, r0
 8009ac2:	460b      	mov	r3, r1
 8009ac4:	f7f6 ffa2 	bl	8000a0c <__aeabi_dcmpun>
 8009ac8:	b120      	cbz	r0, 8009ad4 <_scanf_float+0x408>
 8009aca:	4807      	ldr	r0, [pc, #28]	@ (8009ae8 <_scanf_float+0x41c>)
 8009acc:	f000 f9fc 	bl	8009ec8 <nanf>
 8009ad0:	6028      	str	r0, [r5, #0]
 8009ad2:	e7d5      	b.n	8009a80 <_scanf_float+0x3b4>
 8009ad4:	4630      	mov	r0, r6
 8009ad6:	4639      	mov	r1, r7
 8009ad8:	f7f6 fff6 	bl	8000ac8 <__aeabi_d2f>
 8009adc:	e7f8      	b.n	8009ad0 <_scanf_float+0x404>
 8009ade:	f04f 0900 	mov.w	r9, #0
 8009ae2:	e62d      	b.n	8009740 <_scanf_float+0x74>
 8009ae4:	0800ebcc 	.word	0x0800ebcc
 8009ae8:	0800ef65 	.word	0x0800ef65

08009aec <std>:
 8009aec:	2300      	movs	r3, #0
 8009aee:	b510      	push	{r4, lr}
 8009af0:	4604      	mov	r4, r0
 8009af2:	e9c0 3300 	strd	r3, r3, [r0]
 8009af6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009afa:	6083      	str	r3, [r0, #8]
 8009afc:	8181      	strh	r1, [r0, #12]
 8009afe:	6643      	str	r3, [r0, #100]	@ 0x64
 8009b00:	81c2      	strh	r2, [r0, #14]
 8009b02:	6183      	str	r3, [r0, #24]
 8009b04:	4619      	mov	r1, r3
 8009b06:	2208      	movs	r2, #8
 8009b08:	305c      	adds	r0, #92	@ 0x5c
 8009b0a:	f000 f940 	bl	8009d8e <memset>
 8009b0e:	4b0d      	ldr	r3, [pc, #52]	@ (8009b44 <std+0x58>)
 8009b10:	6224      	str	r4, [r4, #32]
 8009b12:	6263      	str	r3, [r4, #36]	@ 0x24
 8009b14:	4b0c      	ldr	r3, [pc, #48]	@ (8009b48 <std+0x5c>)
 8009b16:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009b18:	4b0c      	ldr	r3, [pc, #48]	@ (8009b4c <std+0x60>)
 8009b1a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009b1c:	4b0c      	ldr	r3, [pc, #48]	@ (8009b50 <std+0x64>)
 8009b1e:	6323      	str	r3, [r4, #48]	@ 0x30
 8009b20:	4b0c      	ldr	r3, [pc, #48]	@ (8009b54 <std+0x68>)
 8009b22:	429c      	cmp	r4, r3
 8009b24:	d006      	beq.n	8009b34 <std+0x48>
 8009b26:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009b2a:	4294      	cmp	r4, r2
 8009b2c:	d002      	beq.n	8009b34 <std+0x48>
 8009b2e:	33d0      	adds	r3, #208	@ 0xd0
 8009b30:	429c      	cmp	r4, r3
 8009b32:	d105      	bne.n	8009b40 <std+0x54>
 8009b34:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009b38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009b3c:	f000 b9a4 	b.w	8009e88 <__retarget_lock_init_recursive>
 8009b40:	bd10      	pop	{r4, pc}
 8009b42:	bf00      	nop
 8009b44:	08009cd5 	.word	0x08009cd5
 8009b48:	08009cf7 	.word	0x08009cf7
 8009b4c:	08009d2f 	.word	0x08009d2f
 8009b50:	08009d53 	.word	0x08009d53
 8009b54:	200008c8 	.word	0x200008c8

08009b58 <stdio_exit_handler>:
 8009b58:	4a02      	ldr	r2, [pc, #8]	@ (8009b64 <stdio_exit_handler+0xc>)
 8009b5a:	4903      	ldr	r1, [pc, #12]	@ (8009b68 <stdio_exit_handler+0x10>)
 8009b5c:	4803      	ldr	r0, [pc, #12]	@ (8009b6c <stdio_exit_handler+0x14>)
 8009b5e:	f000 b869 	b.w	8009c34 <_fwalk_sglue>
 8009b62:	bf00      	nop
 8009b64:	20000034 	.word	0x20000034
 8009b68:	0800c9e5 	.word	0x0800c9e5
 8009b6c:	20000044 	.word	0x20000044

08009b70 <cleanup_stdio>:
 8009b70:	6841      	ldr	r1, [r0, #4]
 8009b72:	4b0c      	ldr	r3, [pc, #48]	@ (8009ba4 <cleanup_stdio+0x34>)
 8009b74:	b510      	push	{r4, lr}
 8009b76:	4299      	cmp	r1, r3
 8009b78:	4604      	mov	r4, r0
 8009b7a:	d001      	beq.n	8009b80 <cleanup_stdio+0x10>
 8009b7c:	f002 ff32 	bl	800c9e4 <_fflush_r>
 8009b80:	68a1      	ldr	r1, [r4, #8]
 8009b82:	4b09      	ldr	r3, [pc, #36]	@ (8009ba8 <cleanup_stdio+0x38>)
 8009b84:	4299      	cmp	r1, r3
 8009b86:	d002      	beq.n	8009b8e <cleanup_stdio+0x1e>
 8009b88:	4620      	mov	r0, r4
 8009b8a:	f002 ff2b 	bl	800c9e4 <_fflush_r>
 8009b8e:	68e1      	ldr	r1, [r4, #12]
 8009b90:	4b06      	ldr	r3, [pc, #24]	@ (8009bac <cleanup_stdio+0x3c>)
 8009b92:	4299      	cmp	r1, r3
 8009b94:	d004      	beq.n	8009ba0 <cleanup_stdio+0x30>
 8009b96:	4620      	mov	r0, r4
 8009b98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009b9c:	f002 bf22 	b.w	800c9e4 <_fflush_r>
 8009ba0:	bd10      	pop	{r4, pc}
 8009ba2:	bf00      	nop
 8009ba4:	200008c8 	.word	0x200008c8
 8009ba8:	20000930 	.word	0x20000930
 8009bac:	20000998 	.word	0x20000998

08009bb0 <global_stdio_init.part.0>:
 8009bb0:	b510      	push	{r4, lr}
 8009bb2:	4b0b      	ldr	r3, [pc, #44]	@ (8009be0 <global_stdio_init.part.0+0x30>)
 8009bb4:	4c0b      	ldr	r4, [pc, #44]	@ (8009be4 <global_stdio_init.part.0+0x34>)
 8009bb6:	4a0c      	ldr	r2, [pc, #48]	@ (8009be8 <global_stdio_init.part.0+0x38>)
 8009bb8:	4620      	mov	r0, r4
 8009bba:	601a      	str	r2, [r3, #0]
 8009bbc:	2104      	movs	r1, #4
 8009bbe:	2200      	movs	r2, #0
 8009bc0:	f7ff ff94 	bl	8009aec <std>
 8009bc4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009bc8:	2201      	movs	r2, #1
 8009bca:	2109      	movs	r1, #9
 8009bcc:	f7ff ff8e 	bl	8009aec <std>
 8009bd0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009bd4:	2202      	movs	r2, #2
 8009bd6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009bda:	2112      	movs	r1, #18
 8009bdc:	f7ff bf86 	b.w	8009aec <std>
 8009be0:	20000a00 	.word	0x20000a00
 8009be4:	200008c8 	.word	0x200008c8
 8009be8:	08009b59 	.word	0x08009b59

08009bec <__sfp_lock_acquire>:
 8009bec:	4801      	ldr	r0, [pc, #4]	@ (8009bf4 <__sfp_lock_acquire+0x8>)
 8009bee:	f000 b94c 	b.w	8009e8a <__retarget_lock_acquire_recursive>
 8009bf2:	bf00      	nop
 8009bf4:	20000a09 	.word	0x20000a09

08009bf8 <__sfp_lock_release>:
 8009bf8:	4801      	ldr	r0, [pc, #4]	@ (8009c00 <__sfp_lock_release+0x8>)
 8009bfa:	f000 b947 	b.w	8009e8c <__retarget_lock_release_recursive>
 8009bfe:	bf00      	nop
 8009c00:	20000a09 	.word	0x20000a09

08009c04 <__sinit>:
 8009c04:	b510      	push	{r4, lr}
 8009c06:	4604      	mov	r4, r0
 8009c08:	f7ff fff0 	bl	8009bec <__sfp_lock_acquire>
 8009c0c:	6a23      	ldr	r3, [r4, #32]
 8009c0e:	b11b      	cbz	r3, 8009c18 <__sinit+0x14>
 8009c10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009c14:	f7ff bff0 	b.w	8009bf8 <__sfp_lock_release>
 8009c18:	4b04      	ldr	r3, [pc, #16]	@ (8009c2c <__sinit+0x28>)
 8009c1a:	6223      	str	r3, [r4, #32]
 8009c1c:	4b04      	ldr	r3, [pc, #16]	@ (8009c30 <__sinit+0x2c>)
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d1f5      	bne.n	8009c10 <__sinit+0xc>
 8009c24:	f7ff ffc4 	bl	8009bb0 <global_stdio_init.part.0>
 8009c28:	e7f2      	b.n	8009c10 <__sinit+0xc>
 8009c2a:	bf00      	nop
 8009c2c:	08009b71 	.word	0x08009b71
 8009c30:	20000a00 	.word	0x20000a00

08009c34 <_fwalk_sglue>:
 8009c34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009c38:	4607      	mov	r7, r0
 8009c3a:	4688      	mov	r8, r1
 8009c3c:	4614      	mov	r4, r2
 8009c3e:	2600      	movs	r6, #0
 8009c40:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009c44:	f1b9 0901 	subs.w	r9, r9, #1
 8009c48:	d505      	bpl.n	8009c56 <_fwalk_sglue+0x22>
 8009c4a:	6824      	ldr	r4, [r4, #0]
 8009c4c:	2c00      	cmp	r4, #0
 8009c4e:	d1f7      	bne.n	8009c40 <_fwalk_sglue+0xc>
 8009c50:	4630      	mov	r0, r6
 8009c52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c56:	89ab      	ldrh	r3, [r5, #12]
 8009c58:	2b01      	cmp	r3, #1
 8009c5a:	d907      	bls.n	8009c6c <_fwalk_sglue+0x38>
 8009c5c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009c60:	3301      	adds	r3, #1
 8009c62:	d003      	beq.n	8009c6c <_fwalk_sglue+0x38>
 8009c64:	4629      	mov	r1, r5
 8009c66:	4638      	mov	r0, r7
 8009c68:	47c0      	blx	r8
 8009c6a:	4306      	orrs	r6, r0
 8009c6c:	3568      	adds	r5, #104	@ 0x68
 8009c6e:	e7e9      	b.n	8009c44 <_fwalk_sglue+0x10>

08009c70 <iprintf>:
 8009c70:	b40f      	push	{r0, r1, r2, r3}
 8009c72:	b507      	push	{r0, r1, r2, lr}
 8009c74:	4906      	ldr	r1, [pc, #24]	@ (8009c90 <iprintf+0x20>)
 8009c76:	ab04      	add	r3, sp, #16
 8009c78:	6808      	ldr	r0, [r1, #0]
 8009c7a:	f853 2b04 	ldr.w	r2, [r3], #4
 8009c7e:	6881      	ldr	r1, [r0, #8]
 8009c80:	9301      	str	r3, [sp, #4]
 8009c82:	f002 fd17 	bl	800c6b4 <_vfiprintf_r>
 8009c86:	b003      	add	sp, #12
 8009c88:	f85d eb04 	ldr.w	lr, [sp], #4
 8009c8c:	b004      	add	sp, #16
 8009c8e:	4770      	bx	lr
 8009c90:	20000040 	.word	0x20000040

08009c94 <siprintf>:
 8009c94:	b40e      	push	{r1, r2, r3}
 8009c96:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009c9a:	b500      	push	{lr}
 8009c9c:	b09c      	sub	sp, #112	@ 0x70
 8009c9e:	ab1d      	add	r3, sp, #116	@ 0x74
 8009ca0:	9002      	str	r0, [sp, #8]
 8009ca2:	9006      	str	r0, [sp, #24]
 8009ca4:	9107      	str	r1, [sp, #28]
 8009ca6:	9104      	str	r1, [sp, #16]
 8009ca8:	4808      	ldr	r0, [pc, #32]	@ (8009ccc <siprintf+0x38>)
 8009caa:	4909      	ldr	r1, [pc, #36]	@ (8009cd0 <siprintf+0x3c>)
 8009cac:	f853 2b04 	ldr.w	r2, [r3], #4
 8009cb0:	9105      	str	r1, [sp, #20]
 8009cb2:	6800      	ldr	r0, [r0, #0]
 8009cb4:	a902      	add	r1, sp, #8
 8009cb6:	9301      	str	r3, [sp, #4]
 8009cb8:	f002 fbd8 	bl	800c46c <_svfiprintf_r>
 8009cbc:	2200      	movs	r2, #0
 8009cbe:	9b02      	ldr	r3, [sp, #8]
 8009cc0:	701a      	strb	r2, [r3, #0]
 8009cc2:	b01c      	add	sp, #112	@ 0x70
 8009cc4:	f85d eb04 	ldr.w	lr, [sp], #4
 8009cc8:	b003      	add	sp, #12
 8009cca:	4770      	bx	lr
 8009ccc:	20000040 	.word	0x20000040
 8009cd0:	ffff0208 	.word	0xffff0208

08009cd4 <__sread>:
 8009cd4:	b510      	push	{r4, lr}
 8009cd6:	460c      	mov	r4, r1
 8009cd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009cdc:	f000 f886 	bl	8009dec <_read_r>
 8009ce0:	2800      	cmp	r0, #0
 8009ce2:	bfab      	itete	ge
 8009ce4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009ce6:	89a3      	ldrhlt	r3, [r4, #12]
 8009ce8:	181b      	addge	r3, r3, r0
 8009cea:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009cee:	bfac      	ite	ge
 8009cf0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009cf2:	81a3      	strhlt	r3, [r4, #12]
 8009cf4:	bd10      	pop	{r4, pc}

08009cf6 <__swrite>:
 8009cf6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009cfa:	461f      	mov	r7, r3
 8009cfc:	898b      	ldrh	r3, [r1, #12]
 8009cfe:	4605      	mov	r5, r0
 8009d00:	05db      	lsls	r3, r3, #23
 8009d02:	460c      	mov	r4, r1
 8009d04:	4616      	mov	r6, r2
 8009d06:	d505      	bpl.n	8009d14 <__swrite+0x1e>
 8009d08:	2302      	movs	r3, #2
 8009d0a:	2200      	movs	r2, #0
 8009d0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d10:	f000 f85a 	bl	8009dc8 <_lseek_r>
 8009d14:	89a3      	ldrh	r3, [r4, #12]
 8009d16:	4632      	mov	r2, r6
 8009d18:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009d1c:	81a3      	strh	r3, [r4, #12]
 8009d1e:	4628      	mov	r0, r5
 8009d20:	463b      	mov	r3, r7
 8009d22:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009d26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009d2a:	f000 b871 	b.w	8009e10 <_write_r>

08009d2e <__sseek>:
 8009d2e:	b510      	push	{r4, lr}
 8009d30:	460c      	mov	r4, r1
 8009d32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d36:	f000 f847 	bl	8009dc8 <_lseek_r>
 8009d3a:	1c43      	adds	r3, r0, #1
 8009d3c:	89a3      	ldrh	r3, [r4, #12]
 8009d3e:	bf15      	itete	ne
 8009d40:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009d42:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009d46:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009d4a:	81a3      	strheq	r3, [r4, #12]
 8009d4c:	bf18      	it	ne
 8009d4e:	81a3      	strhne	r3, [r4, #12]
 8009d50:	bd10      	pop	{r4, pc}

08009d52 <__sclose>:
 8009d52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d56:	f000 b827 	b.w	8009da8 <_close_r>

08009d5a <memmove>:
 8009d5a:	4288      	cmp	r0, r1
 8009d5c:	b510      	push	{r4, lr}
 8009d5e:	eb01 0402 	add.w	r4, r1, r2
 8009d62:	d902      	bls.n	8009d6a <memmove+0x10>
 8009d64:	4284      	cmp	r4, r0
 8009d66:	4623      	mov	r3, r4
 8009d68:	d807      	bhi.n	8009d7a <memmove+0x20>
 8009d6a:	1e43      	subs	r3, r0, #1
 8009d6c:	42a1      	cmp	r1, r4
 8009d6e:	d008      	beq.n	8009d82 <memmove+0x28>
 8009d70:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009d74:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009d78:	e7f8      	b.n	8009d6c <memmove+0x12>
 8009d7a:	4601      	mov	r1, r0
 8009d7c:	4402      	add	r2, r0
 8009d7e:	428a      	cmp	r2, r1
 8009d80:	d100      	bne.n	8009d84 <memmove+0x2a>
 8009d82:	bd10      	pop	{r4, pc}
 8009d84:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009d88:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009d8c:	e7f7      	b.n	8009d7e <memmove+0x24>

08009d8e <memset>:
 8009d8e:	4603      	mov	r3, r0
 8009d90:	4402      	add	r2, r0
 8009d92:	4293      	cmp	r3, r2
 8009d94:	d100      	bne.n	8009d98 <memset+0xa>
 8009d96:	4770      	bx	lr
 8009d98:	f803 1b01 	strb.w	r1, [r3], #1
 8009d9c:	e7f9      	b.n	8009d92 <memset+0x4>
	...

08009da0 <_localeconv_r>:
 8009da0:	4800      	ldr	r0, [pc, #0]	@ (8009da4 <_localeconv_r+0x4>)
 8009da2:	4770      	bx	lr
 8009da4:	20000180 	.word	0x20000180

08009da8 <_close_r>:
 8009da8:	b538      	push	{r3, r4, r5, lr}
 8009daa:	2300      	movs	r3, #0
 8009dac:	4d05      	ldr	r5, [pc, #20]	@ (8009dc4 <_close_r+0x1c>)
 8009dae:	4604      	mov	r4, r0
 8009db0:	4608      	mov	r0, r1
 8009db2:	602b      	str	r3, [r5, #0]
 8009db4:	f7f8 fe73 	bl	8002a9e <_close>
 8009db8:	1c43      	adds	r3, r0, #1
 8009dba:	d102      	bne.n	8009dc2 <_close_r+0x1a>
 8009dbc:	682b      	ldr	r3, [r5, #0]
 8009dbe:	b103      	cbz	r3, 8009dc2 <_close_r+0x1a>
 8009dc0:	6023      	str	r3, [r4, #0]
 8009dc2:	bd38      	pop	{r3, r4, r5, pc}
 8009dc4:	20000a04 	.word	0x20000a04

08009dc8 <_lseek_r>:
 8009dc8:	b538      	push	{r3, r4, r5, lr}
 8009dca:	4604      	mov	r4, r0
 8009dcc:	4608      	mov	r0, r1
 8009dce:	4611      	mov	r1, r2
 8009dd0:	2200      	movs	r2, #0
 8009dd2:	4d05      	ldr	r5, [pc, #20]	@ (8009de8 <_lseek_r+0x20>)
 8009dd4:	602a      	str	r2, [r5, #0]
 8009dd6:	461a      	mov	r2, r3
 8009dd8:	f7f8 fe85 	bl	8002ae6 <_lseek>
 8009ddc:	1c43      	adds	r3, r0, #1
 8009dde:	d102      	bne.n	8009de6 <_lseek_r+0x1e>
 8009de0:	682b      	ldr	r3, [r5, #0]
 8009de2:	b103      	cbz	r3, 8009de6 <_lseek_r+0x1e>
 8009de4:	6023      	str	r3, [r4, #0]
 8009de6:	bd38      	pop	{r3, r4, r5, pc}
 8009de8:	20000a04 	.word	0x20000a04

08009dec <_read_r>:
 8009dec:	b538      	push	{r3, r4, r5, lr}
 8009dee:	4604      	mov	r4, r0
 8009df0:	4608      	mov	r0, r1
 8009df2:	4611      	mov	r1, r2
 8009df4:	2200      	movs	r2, #0
 8009df6:	4d05      	ldr	r5, [pc, #20]	@ (8009e0c <_read_r+0x20>)
 8009df8:	602a      	str	r2, [r5, #0]
 8009dfa:	461a      	mov	r2, r3
 8009dfc:	f7f8 fe16 	bl	8002a2c <_read>
 8009e00:	1c43      	adds	r3, r0, #1
 8009e02:	d102      	bne.n	8009e0a <_read_r+0x1e>
 8009e04:	682b      	ldr	r3, [r5, #0]
 8009e06:	b103      	cbz	r3, 8009e0a <_read_r+0x1e>
 8009e08:	6023      	str	r3, [r4, #0]
 8009e0a:	bd38      	pop	{r3, r4, r5, pc}
 8009e0c:	20000a04 	.word	0x20000a04

08009e10 <_write_r>:
 8009e10:	b538      	push	{r3, r4, r5, lr}
 8009e12:	4604      	mov	r4, r0
 8009e14:	4608      	mov	r0, r1
 8009e16:	4611      	mov	r1, r2
 8009e18:	2200      	movs	r2, #0
 8009e1a:	4d05      	ldr	r5, [pc, #20]	@ (8009e30 <_write_r+0x20>)
 8009e1c:	602a      	str	r2, [r5, #0]
 8009e1e:	461a      	mov	r2, r3
 8009e20:	f7f8 fe21 	bl	8002a66 <_write>
 8009e24:	1c43      	adds	r3, r0, #1
 8009e26:	d102      	bne.n	8009e2e <_write_r+0x1e>
 8009e28:	682b      	ldr	r3, [r5, #0]
 8009e2a:	b103      	cbz	r3, 8009e2e <_write_r+0x1e>
 8009e2c:	6023      	str	r3, [r4, #0]
 8009e2e:	bd38      	pop	{r3, r4, r5, pc}
 8009e30:	20000a04 	.word	0x20000a04

08009e34 <__errno>:
 8009e34:	4b01      	ldr	r3, [pc, #4]	@ (8009e3c <__errno+0x8>)
 8009e36:	6818      	ldr	r0, [r3, #0]
 8009e38:	4770      	bx	lr
 8009e3a:	bf00      	nop
 8009e3c:	20000040 	.word	0x20000040

08009e40 <__libc_init_array>:
 8009e40:	b570      	push	{r4, r5, r6, lr}
 8009e42:	2600      	movs	r6, #0
 8009e44:	4d0c      	ldr	r5, [pc, #48]	@ (8009e78 <__libc_init_array+0x38>)
 8009e46:	4c0d      	ldr	r4, [pc, #52]	@ (8009e7c <__libc_init_array+0x3c>)
 8009e48:	1b64      	subs	r4, r4, r5
 8009e4a:	10a4      	asrs	r4, r4, #2
 8009e4c:	42a6      	cmp	r6, r4
 8009e4e:	d109      	bne.n	8009e64 <__libc_init_array+0x24>
 8009e50:	f003 fb4e 	bl	800d4f0 <_init>
 8009e54:	2600      	movs	r6, #0
 8009e56:	4d0a      	ldr	r5, [pc, #40]	@ (8009e80 <__libc_init_array+0x40>)
 8009e58:	4c0a      	ldr	r4, [pc, #40]	@ (8009e84 <__libc_init_array+0x44>)
 8009e5a:	1b64      	subs	r4, r4, r5
 8009e5c:	10a4      	asrs	r4, r4, #2
 8009e5e:	42a6      	cmp	r6, r4
 8009e60:	d105      	bne.n	8009e6e <__libc_init_array+0x2e>
 8009e62:	bd70      	pop	{r4, r5, r6, pc}
 8009e64:	f855 3b04 	ldr.w	r3, [r5], #4
 8009e68:	4798      	blx	r3
 8009e6a:	3601      	adds	r6, #1
 8009e6c:	e7ee      	b.n	8009e4c <__libc_init_array+0xc>
 8009e6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009e72:	4798      	blx	r3
 8009e74:	3601      	adds	r6, #1
 8009e76:	e7f2      	b.n	8009e5e <__libc_init_array+0x1e>
 8009e78:	0800efd0 	.word	0x0800efd0
 8009e7c:	0800efd0 	.word	0x0800efd0
 8009e80:	0800efd0 	.word	0x0800efd0
 8009e84:	0800efd4 	.word	0x0800efd4

08009e88 <__retarget_lock_init_recursive>:
 8009e88:	4770      	bx	lr

08009e8a <__retarget_lock_acquire_recursive>:
 8009e8a:	4770      	bx	lr

08009e8c <__retarget_lock_release_recursive>:
 8009e8c:	4770      	bx	lr

08009e8e <memchr>:
 8009e8e:	4603      	mov	r3, r0
 8009e90:	b510      	push	{r4, lr}
 8009e92:	b2c9      	uxtb	r1, r1
 8009e94:	4402      	add	r2, r0
 8009e96:	4293      	cmp	r3, r2
 8009e98:	4618      	mov	r0, r3
 8009e9a:	d101      	bne.n	8009ea0 <memchr+0x12>
 8009e9c:	2000      	movs	r0, #0
 8009e9e:	e003      	b.n	8009ea8 <memchr+0x1a>
 8009ea0:	7804      	ldrb	r4, [r0, #0]
 8009ea2:	3301      	adds	r3, #1
 8009ea4:	428c      	cmp	r4, r1
 8009ea6:	d1f6      	bne.n	8009e96 <memchr+0x8>
 8009ea8:	bd10      	pop	{r4, pc}

08009eaa <memcpy>:
 8009eaa:	440a      	add	r2, r1
 8009eac:	4291      	cmp	r1, r2
 8009eae:	f100 33ff 	add.w	r3, r0, #4294967295
 8009eb2:	d100      	bne.n	8009eb6 <memcpy+0xc>
 8009eb4:	4770      	bx	lr
 8009eb6:	b510      	push	{r4, lr}
 8009eb8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009ebc:	4291      	cmp	r1, r2
 8009ebe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009ec2:	d1f9      	bne.n	8009eb8 <memcpy+0xe>
 8009ec4:	bd10      	pop	{r4, pc}
	...

08009ec8 <nanf>:
 8009ec8:	4800      	ldr	r0, [pc, #0]	@ (8009ecc <nanf+0x4>)
 8009eca:	4770      	bx	lr
 8009ecc:	7fc00000 	.word	0x7fc00000

08009ed0 <quorem>:
 8009ed0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ed4:	6903      	ldr	r3, [r0, #16]
 8009ed6:	690c      	ldr	r4, [r1, #16]
 8009ed8:	4607      	mov	r7, r0
 8009eda:	42a3      	cmp	r3, r4
 8009edc:	db7e      	blt.n	8009fdc <quorem+0x10c>
 8009ede:	3c01      	subs	r4, #1
 8009ee0:	00a3      	lsls	r3, r4, #2
 8009ee2:	f100 0514 	add.w	r5, r0, #20
 8009ee6:	f101 0814 	add.w	r8, r1, #20
 8009eea:	9300      	str	r3, [sp, #0]
 8009eec:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009ef0:	9301      	str	r3, [sp, #4]
 8009ef2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009ef6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009efa:	3301      	adds	r3, #1
 8009efc:	429a      	cmp	r2, r3
 8009efe:	fbb2 f6f3 	udiv	r6, r2, r3
 8009f02:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009f06:	d32e      	bcc.n	8009f66 <quorem+0x96>
 8009f08:	f04f 0a00 	mov.w	sl, #0
 8009f0c:	46c4      	mov	ip, r8
 8009f0e:	46ae      	mov	lr, r5
 8009f10:	46d3      	mov	fp, sl
 8009f12:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009f16:	b298      	uxth	r0, r3
 8009f18:	fb06 a000 	mla	r0, r6, r0, sl
 8009f1c:	0c1b      	lsrs	r3, r3, #16
 8009f1e:	0c02      	lsrs	r2, r0, #16
 8009f20:	fb06 2303 	mla	r3, r6, r3, r2
 8009f24:	f8de 2000 	ldr.w	r2, [lr]
 8009f28:	b280      	uxth	r0, r0
 8009f2a:	b292      	uxth	r2, r2
 8009f2c:	1a12      	subs	r2, r2, r0
 8009f2e:	445a      	add	r2, fp
 8009f30:	f8de 0000 	ldr.w	r0, [lr]
 8009f34:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009f38:	b29b      	uxth	r3, r3
 8009f3a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8009f3e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8009f42:	b292      	uxth	r2, r2
 8009f44:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009f48:	45e1      	cmp	r9, ip
 8009f4a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8009f4e:	f84e 2b04 	str.w	r2, [lr], #4
 8009f52:	d2de      	bcs.n	8009f12 <quorem+0x42>
 8009f54:	9b00      	ldr	r3, [sp, #0]
 8009f56:	58eb      	ldr	r3, [r5, r3]
 8009f58:	b92b      	cbnz	r3, 8009f66 <quorem+0x96>
 8009f5a:	9b01      	ldr	r3, [sp, #4]
 8009f5c:	3b04      	subs	r3, #4
 8009f5e:	429d      	cmp	r5, r3
 8009f60:	461a      	mov	r2, r3
 8009f62:	d32f      	bcc.n	8009fc4 <quorem+0xf4>
 8009f64:	613c      	str	r4, [r7, #16]
 8009f66:	4638      	mov	r0, r7
 8009f68:	f001 f9c2 	bl	800b2f0 <__mcmp>
 8009f6c:	2800      	cmp	r0, #0
 8009f6e:	db25      	blt.n	8009fbc <quorem+0xec>
 8009f70:	4629      	mov	r1, r5
 8009f72:	2000      	movs	r0, #0
 8009f74:	f858 2b04 	ldr.w	r2, [r8], #4
 8009f78:	f8d1 c000 	ldr.w	ip, [r1]
 8009f7c:	fa1f fe82 	uxth.w	lr, r2
 8009f80:	fa1f f38c 	uxth.w	r3, ip
 8009f84:	eba3 030e 	sub.w	r3, r3, lr
 8009f88:	4403      	add	r3, r0
 8009f8a:	0c12      	lsrs	r2, r2, #16
 8009f8c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8009f90:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8009f94:	b29b      	uxth	r3, r3
 8009f96:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009f9a:	45c1      	cmp	r9, r8
 8009f9c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009fa0:	f841 3b04 	str.w	r3, [r1], #4
 8009fa4:	d2e6      	bcs.n	8009f74 <quorem+0xa4>
 8009fa6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009faa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009fae:	b922      	cbnz	r2, 8009fba <quorem+0xea>
 8009fb0:	3b04      	subs	r3, #4
 8009fb2:	429d      	cmp	r5, r3
 8009fb4:	461a      	mov	r2, r3
 8009fb6:	d30b      	bcc.n	8009fd0 <quorem+0x100>
 8009fb8:	613c      	str	r4, [r7, #16]
 8009fba:	3601      	adds	r6, #1
 8009fbc:	4630      	mov	r0, r6
 8009fbe:	b003      	add	sp, #12
 8009fc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fc4:	6812      	ldr	r2, [r2, #0]
 8009fc6:	3b04      	subs	r3, #4
 8009fc8:	2a00      	cmp	r2, #0
 8009fca:	d1cb      	bne.n	8009f64 <quorem+0x94>
 8009fcc:	3c01      	subs	r4, #1
 8009fce:	e7c6      	b.n	8009f5e <quorem+0x8e>
 8009fd0:	6812      	ldr	r2, [r2, #0]
 8009fd2:	3b04      	subs	r3, #4
 8009fd4:	2a00      	cmp	r2, #0
 8009fd6:	d1ef      	bne.n	8009fb8 <quorem+0xe8>
 8009fd8:	3c01      	subs	r4, #1
 8009fda:	e7ea      	b.n	8009fb2 <quorem+0xe2>
 8009fdc:	2000      	movs	r0, #0
 8009fde:	e7ee      	b.n	8009fbe <quorem+0xee>

08009fe0 <_dtoa_r>:
 8009fe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fe4:	4614      	mov	r4, r2
 8009fe6:	461d      	mov	r5, r3
 8009fe8:	69c7      	ldr	r7, [r0, #28]
 8009fea:	b097      	sub	sp, #92	@ 0x5c
 8009fec:	4683      	mov	fp, r0
 8009fee:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8009ff2:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8009ff4:	b97f      	cbnz	r7, 800a016 <_dtoa_r+0x36>
 8009ff6:	2010      	movs	r0, #16
 8009ff8:	f000 fe02 	bl	800ac00 <malloc>
 8009ffc:	4602      	mov	r2, r0
 8009ffe:	f8cb 001c 	str.w	r0, [fp, #28]
 800a002:	b920      	cbnz	r0, 800a00e <_dtoa_r+0x2e>
 800a004:	21ef      	movs	r1, #239	@ 0xef
 800a006:	4ba8      	ldr	r3, [pc, #672]	@ (800a2a8 <_dtoa_r+0x2c8>)
 800a008:	48a8      	ldr	r0, [pc, #672]	@ (800a2ac <_dtoa_r+0x2cc>)
 800a00a:	f002 fdcf 	bl	800cbac <__assert_func>
 800a00e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800a012:	6007      	str	r7, [r0, #0]
 800a014:	60c7      	str	r7, [r0, #12]
 800a016:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a01a:	6819      	ldr	r1, [r3, #0]
 800a01c:	b159      	cbz	r1, 800a036 <_dtoa_r+0x56>
 800a01e:	685a      	ldr	r2, [r3, #4]
 800a020:	2301      	movs	r3, #1
 800a022:	4093      	lsls	r3, r2
 800a024:	604a      	str	r2, [r1, #4]
 800a026:	608b      	str	r3, [r1, #8]
 800a028:	4658      	mov	r0, fp
 800a02a:	f000 fedf 	bl	800adec <_Bfree>
 800a02e:	2200      	movs	r2, #0
 800a030:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a034:	601a      	str	r2, [r3, #0]
 800a036:	1e2b      	subs	r3, r5, #0
 800a038:	bfaf      	iteee	ge
 800a03a:	2300      	movge	r3, #0
 800a03c:	2201      	movlt	r2, #1
 800a03e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800a042:	9303      	strlt	r3, [sp, #12]
 800a044:	bfa8      	it	ge
 800a046:	6033      	strge	r3, [r6, #0]
 800a048:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800a04c:	4b98      	ldr	r3, [pc, #608]	@ (800a2b0 <_dtoa_r+0x2d0>)
 800a04e:	bfb8      	it	lt
 800a050:	6032      	strlt	r2, [r6, #0]
 800a052:	ea33 0308 	bics.w	r3, r3, r8
 800a056:	d112      	bne.n	800a07e <_dtoa_r+0x9e>
 800a058:	f242 730f 	movw	r3, #9999	@ 0x270f
 800a05c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800a05e:	6013      	str	r3, [r2, #0]
 800a060:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800a064:	4323      	orrs	r3, r4
 800a066:	f000 8550 	beq.w	800ab0a <_dtoa_r+0xb2a>
 800a06a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800a06c:	f8df a244 	ldr.w	sl, [pc, #580]	@ 800a2b4 <_dtoa_r+0x2d4>
 800a070:	2b00      	cmp	r3, #0
 800a072:	f000 8552 	beq.w	800ab1a <_dtoa_r+0xb3a>
 800a076:	f10a 0303 	add.w	r3, sl, #3
 800a07a:	f000 bd4c 	b.w	800ab16 <_dtoa_r+0xb36>
 800a07e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a082:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800a086:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a08a:	2200      	movs	r2, #0
 800a08c:	2300      	movs	r3, #0
 800a08e:	f7f6 fc8b 	bl	80009a8 <__aeabi_dcmpeq>
 800a092:	4607      	mov	r7, r0
 800a094:	b158      	cbz	r0, 800a0ae <_dtoa_r+0xce>
 800a096:	2301      	movs	r3, #1
 800a098:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800a09a:	6013      	str	r3, [r2, #0]
 800a09c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800a09e:	b113      	cbz	r3, 800a0a6 <_dtoa_r+0xc6>
 800a0a0:	4b85      	ldr	r3, [pc, #532]	@ (800a2b8 <_dtoa_r+0x2d8>)
 800a0a2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800a0a4:	6013      	str	r3, [r2, #0]
 800a0a6:	f8df a214 	ldr.w	sl, [pc, #532]	@ 800a2bc <_dtoa_r+0x2dc>
 800a0aa:	f000 bd36 	b.w	800ab1a <_dtoa_r+0xb3a>
 800a0ae:	ab14      	add	r3, sp, #80	@ 0x50
 800a0b0:	9301      	str	r3, [sp, #4]
 800a0b2:	ab15      	add	r3, sp, #84	@ 0x54
 800a0b4:	9300      	str	r3, [sp, #0]
 800a0b6:	4658      	mov	r0, fp
 800a0b8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800a0bc:	f001 fa30 	bl	800b520 <__d2b>
 800a0c0:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800a0c4:	4681      	mov	r9, r0
 800a0c6:	2e00      	cmp	r6, #0
 800a0c8:	d077      	beq.n	800a1ba <_dtoa_r+0x1da>
 800a0ca:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a0ce:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a0d0:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800a0d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a0d8:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800a0dc:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800a0e0:	9712      	str	r7, [sp, #72]	@ 0x48
 800a0e2:	4619      	mov	r1, r3
 800a0e4:	2200      	movs	r2, #0
 800a0e6:	4b76      	ldr	r3, [pc, #472]	@ (800a2c0 <_dtoa_r+0x2e0>)
 800a0e8:	f7f6 f83e 	bl	8000168 <__aeabi_dsub>
 800a0ec:	a368      	add	r3, pc, #416	@ (adr r3, 800a290 <_dtoa_r+0x2b0>)
 800a0ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0f2:	f7f6 f9f1 	bl	80004d8 <__aeabi_dmul>
 800a0f6:	a368      	add	r3, pc, #416	@ (adr r3, 800a298 <_dtoa_r+0x2b8>)
 800a0f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0fc:	f7f6 f836 	bl	800016c <__adddf3>
 800a100:	4604      	mov	r4, r0
 800a102:	4630      	mov	r0, r6
 800a104:	460d      	mov	r5, r1
 800a106:	f7f6 f97d 	bl	8000404 <__aeabi_i2d>
 800a10a:	a365      	add	r3, pc, #404	@ (adr r3, 800a2a0 <_dtoa_r+0x2c0>)
 800a10c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a110:	f7f6 f9e2 	bl	80004d8 <__aeabi_dmul>
 800a114:	4602      	mov	r2, r0
 800a116:	460b      	mov	r3, r1
 800a118:	4620      	mov	r0, r4
 800a11a:	4629      	mov	r1, r5
 800a11c:	f7f6 f826 	bl	800016c <__adddf3>
 800a120:	4604      	mov	r4, r0
 800a122:	460d      	mov	r5, r1
 800a124:	f7f6 fc88 	bl	8000a38 <__aeabi_d2iz>
 800a128:	2200      	movs	r2, #0
 800a12a:	4607      	mov	r7, r0
 800a12c:	2300      	movs	r3, #0
 800a12e:	4620      	mov	r0, r4
 800a130:	4629      	mov	r1, r5
 800a132:	f7f6 fc43 	bl	80009bc <__aeabi_dcmplt>
 800a136:	b140      	cbz	r0, 800a14a <_dtoa_r+0x16a>
 800a138:	4638      	mov	r0, r7
 800a13a:	f7f6 f963 	bl	8000404 <__aeabi_i2d>
 800a13e:	4622      	mov	r2, r4
 800a140:	462b      	mov	r3, r5
 800a142:	f7f6 fc31 	bl	80009a8 <__aeabi_dcmpeq>
 800a146:	b900      	cbnz	r0, 800a14a <_dtoa_r+0x16a>
 800a148:	3f01      	subs	r7, #1
 800a14a:	2f16      	cmp	r7, #22
 800a14c:	d853      	bhi.n	800a1f6 <_dtoa_r+0x216>
 800a14e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a152:	4b5c      	ldr	r3, [pc, #368]	@ (800a2c4 <_dtoa_r+0x2e4>)
 800a154:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a15c:	f7f6 fc2e 	bl	80009bc <__aeabi_dcmplt>
 800a160:	2800      	cmp	r0, #0
 800a162:	d04a      	beq.n	800a1fa <_dtoa_r+0x21a>
 800a164:	2300      	movs	r3, #0
 800a166:	3f01      	subs	r7, #1
 800a168:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a16a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800a16c:	1b9b      	subs	r3, r3, r6
 800a16e:	1e5a      	subs	r2, r3, #1
 800a170:	bf46      	itte	mi
 800a172:	f1c3 0801 	rsbmi	r8, r3, #1
 800a176:	2300      	movmi	r3, #0
 800a178:	f04f 0800 	movpl.w	r8, #0
 800a17c:	9209      	str	r2, [sp, #36]	@ 0x24
 800a17e:	bf48      	it	mi
 800a180:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800a182:	2f00      	cmp	r7, #0
 800a184:	db3b      	blt.n	800a1fe <_dtoa_r+0x21e>
 800a186:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a188:	970e      	str	r7, [sp, #56]	@ 0x38
 800a18a:	443b      	add	r3, r7
 800a18c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a18e:	2300      	movs	r3, #0
 800a190:	930a      	str	r3, [sp, #40]	@ 0x28
 800a192:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800a194:	2b09      	cmp	r3, #9
 800a196:	d866      	bhi.n	800a266 <_dtoa_r+0x286>
 800a198:	2b05      	cmp	r3, #5
 800a19a:	bfc4      	itt	gt
 800a19c:	3b04      	subgt	r3, #4
 800a19e:	9320      	strgt	r3, [sp, #128]	@ 0x80
 800a1a0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800a1a2:	bfc8      	it	gt
 800a1a4:	2400      	movgt	r4, #0
 800a1a6:	f1a3 0302 	sub.w	r3, r3, #2
 800a1aa:	bfd8      	it	le
 800a1ac:	2401      	movle	r4, #1
 800a1ae:	2b03      	cmp	r3, #3
 800a1b0:	d864      	bhi.n	800a27c <_dtoa_r+0x29c>
 800a1b2:	e8df f003 	tbb	[pc, r3]
 800a1b6:	382b      	.short	0x382b
 800a1b8:	5636      	.short	0x5636
 800a1ba:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800a1be:	441e      	add	r6, r3
 800a1c0:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800a1c4:	2b20      	cmp	r3, #32
 800a1c6:	bfc1      	itttt	gt
 800a1c8:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800a1cc:	fa08 f803 	lslgt.w	r8, r8, r3
 800a1d0:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800a1d4:	fa24 f303 	lsrgt.w	r3, r4, r3
 800a1d8:	bfd6      	itet	le
 800a1da:	f1c3 0320 	rsble	r3, r3, #32
 800a1de:	ea48 0003 	orrgt.w	r0, r8, r3
 800a1e2:	fa04 f003 	lslle.w	r0, r4, r3
 800a1e6:	f7f6 f8fd 	bl	80003e4 <__aeabi_ui2d>
 800a1ea:	2201      	movs	r2, #1
 800a1ec:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800a1f0:	3e01      	subs	r6, #1
 800a1f2:	9212      	str	r2, [sp, #72]	@ 0x48
 800a1f4:	e775      	b.n	800a0e2 <_dtoa_r+0x102>
 800a1f6:	2301      	movs	r3, #1
 800a1f8:	e7b6      	b.n	800a168 <_dtoa_r+0x188>
 800a1fa:	900f      	str	r0, [sp, #60]	@ 0x3c
 800a1fc:	e7b5      	b.n	800a16a <_dtoa_r+0x18a>
 800a1fe:	427b      	negs	r3, r7
 800a200:	930a      	str	r3, [sp, #40]	@ 0x28
 800a202:	2300      	movs	r3, #0
 800a204:	eba8 0807 	sub.w	r8, r8, r7
 800a208:	930e      	str	r3, [sp, #56]	@ 0x38
 800a20a:	e7c2      	b.n	800a192 <_dtoa_r+0x1b2>
 800a20c:	2300      	movs	r3, #0
 800a20e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a210:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a212:	2b00      	cmp	r3, #0
 800a214:	dc35      	bgt.n	800a282 <_dtoa_r+0x2a2>
 800a216:	2301      	movs	r3, #1
 800a218:	461a      	mov	r2, r3
 800a21a:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800a21e:	9221      	str	r2, [sp, #132]	@ 0x84
 800a220:	e00b      	b.n	800a23a <_dtoa_r+0x25a>
 800a222:	2301      	movs	r3, #1
 800a224:	e7f3      	b.n	800a20e <_dtoa_r+0x22e>
 800a226:	2300      	movs	r3, #0
 800a228:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a22a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a22c:	18fb      	adds	r3, r7, r3
 800a22e:	9308      	str	r3, [sp, #32]
 800a230:	3301      	adds	r3, #1
 800a232:	2b01      	cmp	r3, #1
 800a234:	9307      	str	r3, [sp, #28]
 800a236:	bfb8      	it	lt
 800a238:	2301      	movlt	r3, #1
 800a23a:	2100      	movs	r1, #0
 800a23c:	2204      	movs	r2, #4
 800a23e:	f8db 001c 	ldr.w	r0, [fp, #28]
 800a242:	f102 0514 	add.w	r5, r2, #20
 800a246:	429d      	cmp	r5, r3
 800a248:	d91f      	bls.n	800a28a <_dtoa_r+0x2aa>
 800a24a:	6041      	str	r1, [r0, #4]
 800a24c:	4658      	mov	r0, fp
 800a24e:	f000 fd8d 	bl	800ad6c <_Balloc>
 800a252:	4682      	mov	sl, r0
 800a254:	2800      	cmp	r0, #0
 800a256:	d139      	bne.n	800a2cc <_dtoa_r+0x2ec>
 800a258:	4602      	mov	r2, r0
 800a25a:	f240 11af 	movw	r1, #431	@ 0x1af
 800a25e:	4b1a      	ldr	r3, [pc, #104]	@ (800a2c8 <_dtoa_r+0x2e8>)
 800a260:	e6d2      	b.n	800a008 <_dtoa_r+0x28>
 800a262:	2301      	movs	r3, #1
 800a264:	e7e0      	b.n	800a228 <_dtoa_r+0x248>
 800a266:	2401      	movs	r4, #1
 800a268:	2300      	movs	r3, #0
 800a26a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800a26c:	9320      	str	r3, [sp, #128]	@ 0x80
 800a26e:	f04f 33ff 	mov.w	r3, #4294967295
 800a272:	2200      	movs	r2, #0
 800a274:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800a278:	2312      	movs	r3, #18
 800a27a:	e7d0      	b.n	800a21e <_dtoa_r+0x23e>
 800a27c:	2301      	movs	r3, #1
 800a27e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a280:	e7f5      	b.n	800a26e <_dtoa_r+0x28e>
 800a282:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a284:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800a288:	e7d7      	b.n	800a23a <_dtoa_r+0x25a>
 800a28a:	3101      	adds	r1, #1
 800a28c:	0052      	lsls	r2, r2, #1
 800a28e:	e7d8      	b.n	800a242 <_dtoa_r+0x262>
 800a290:	636f4361 	.word	0x636f4361
 800a294:	3fd287a7 	.word	0x3fd287a7
 800a298:	8b60c8b3 	.word	0x8b60c8b3
 800a29c:	3fc68a28 	.word	0x3fc68a28
 800a2a0:	509f79fb 	.word	0x509f79fb
 800a2a4:	3fd34413 	.word	0x3fd34413
 800a2a8:	0800ebde 	.word	0x0800ebde
 800a2ac:	0800ebf5 	.word	0x0800ebf5
 800a2b0:	7ff00000 	.word	0x7ff00000
 800a2b4:	0800ebda 	.word	0x0800ebda
 800a2b8:	0800eba9 	.word	0x0800eba9
 800a2bc:	0800eba8 	.word	0x0800eba8
 800a2c0:	3ff80000 	.word	0x3ff80000
 800a2c4:	0800ecf0 	.word	0x0800ecf0
 800a2c8:	0800ec4d 	.word	0x0800ec4d
 800a2cc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a2d0:	6018      	str	r0, [r3, #0]
 800a2d2:	9b07      	ldr	r3, [sp, #28]
 800a2d4:	2b0e      	cmp	r3, #14
 800a2d6:	f200 80a4 	bhi.w	800a422 <_dtoa_r+0x442>
 800a2da:	2c00      	cmp	r4, #0
 800a2dc:	f000 80a1 	beq.w	800a422 <_dtoa_r+0x442>
 800a2e0:	2f00      	cmp	r7, #0
 800a2e2:	dd33      	ble.n	800a34c <_dtoa_r+0x36c>
 800a2e4:	4b86      	ldr	r3, [pc, #536]	@ (800a500 <_dtoa_r+0x520>)
 800a2e6:	f007 020f 	and.w	r2, r7, #15
 800a2ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a2ee:	05f8      	lsls	r0, r7, #23
 800a2f0:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a2f4:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800a2f8:	ea4f 1427 	mov.w	r4, r7, asr #4
 800a2fc:	d516      	bpl.n	800a32c <_dtoa_r+0x34c>
 800a2fe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a302:	4b80      	ldr	r3, [pc, #512]	@ (800a504 <_dtoa_r+0x524>)
 800a304:	2603      	movs	r6, #3
 800a306:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a30a:	f7f6 fa0f 	bl	800072c <__aeabi_ddiv>
 800a30e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a312:	f004 040f 	and.w	r4, r4, #15
 800a316:	4d7b      	ldr	r5, [pc, #492]	@ (800a504 <_dtoa_r+0x524>)
 800a318:	b954      	cbnz	r4, 800a330 <_dtoa_r+0x350>
 800a31a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a31e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a322:	f7f6 fa03 	bl	800072c <__aeabi_ddiv>
 800a326:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a32a:	e028      	b.n	800a37e <_dtoa_r+0x39e>
 800a32c:	2602      	movs	r6, #2
 800a32e:	e7f2      	b.n	800a316 <_dtoa_r+0x336>
 800a330:	07e1      	lsls	r1, r4, #31
 800a332:	d508      	bpl.n	800a346 <_dtoa_r+0x366>
 800a334:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a338:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a33c:	f7f6 f8cc 	bl	80004d8 <__aeabi_dmul>
 800a340:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a344:	3601      	adds	r6, #1
 800a346:	1064      	asrs	r4, r4, #1
 800a348:	3508      	adds	r5, #8
 800a34a:	e7e5      	b.n	800a318 <_dtoa_r+0x338>
 800a34c:	f000 80d2 	beq.w	800a4f4 <_dtoa_r+0x514>
 800a350:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a354:	427c      	negs	r4, r7
 800a356:	4b6a      	ldr	r3, [pc, #424]	@ (800a500 <_dtoa_r+0x520>)
 800a358:	f004 020f 	and.w	r2, r4, #15
 800a35c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a360:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a364:	f7f6 f8b8 	bl	80004d8 <__aeabi_dmul>
 800a368:	2602      	movs	r6, #2
 800a36a:	2300      	movs	r3, #0
 800a36c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a370:	4d64      	ldr	r5, [pc, #400]	@ (800a504 <_dtoa_r+0x524>)
 800a372:	1124      	asrs	r4, r4, #4
 800a374:	2c00      	cmp	r4, #0
 800a376:	f040 80b2 	bne.w	800a4de <_dtoa_r+0x4fe>
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d1d3      	bne.n	800a326 <_dtoa_r+0x346>
 800a37e:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a382:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a384:	2b00      	cmp	r3, #0
 800a386:	f000 80b7 	beq.w	800a4f8 <_dtoa_r+0x518>
 800a38a:	2200      	movs	r2, #0
 800a38c:	4620      	mov	r0, r4
 800a38e:	4629      	mov	r1, r5
 800a390:	4b5d      	ldr	r3, [pc, #372]	@ (800a508 <_dtoa_r+0x528>)
 800a392:	f7f6 fb13 	bl	80009bc <__aeabi_dcmplt>
 800a396:	2800      	cmp	r0, #0
 800a398:	f000 80ae 	beq.w	800a4f8 <_dtoa_r+0x518>
 800a39c:	9b07      	ldr	r3, [sp, #28]
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	f000 80aa 	beq.w	800a4f8 <_dtoa_r+0x518>
 800a3a4:	9b08      	ldr	r3, [sp, #32]
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	dd37      	ble.n	800a41a <_dtoa_r+0x43a>
 800a3aa:	1e7b      	subs	r3, r7, #1
 800a3ac:	4620      	mov	r0, r4
 800a3ae:	9304      	str	r3, [sp, #16]
 800a3b0:	2200      	movs	r2, #0
 800a3b2:	4629      	mov	r1, r5
 800a3b4:	4b55      	ldr	r3, [pc, #340]	@ (800a50c <_dtoa_r+0x52c>)
 800a3b6:	f7f6 f88f 	bl	80004d8 <__aeabi_dmul>
 800a3ba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a3be:	9c08      	ldr	r4, [sp, #32]
 800a3c0:	3601      	adds	r6, #1
 800a3c2:	4630      	mov	r0, r6
 800a3c4:	f7f6 f81e 	bl	8000404 <__aeabi_i2d>
 800a3c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a3cc:	f7f6 f884 	bl	80004d8 <__aeabi_dmul>
 800a3d0:	2200      	movs	r2, #0
 800a3d2:	4b4f      	ldr	r3, [pc, #316]	@ (800a510 <_dtoa_r+0x530>)
 800a3d4:	f7f5 feca 	bl	800016c <__adddf3>
 800a3d8:	4605      	mov	r5, r0
 800a3da:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800a3de:	2c00      	cmp	r4, #0
 800a3e0:	f040 809a 	bne.w	800a518 <_dtoa_r+0x538>
 800a3e4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a3e8:	2200      	movs	r2, #0
 800a3ea:	4b4a      	ldr	r3, [pc, #296]	@ (800a514 <_dtoa_r+0x534>)
 800a3ec:	f7f5 febc 	bl	8000168 <__aeabi_dsub>
 800a3f0:	4602      	mov	r2, r0
 800a3f2:	460b      	mov	r3, r1
 800a3f4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a3f8:	462a      	mov	r2, r5
 800a3fa:	4633      	mov	r3, r6
 800a3fc:	f7f6 fafc 	bl	80009f8 <__aeabi_dcmpgt>
 800a400:	2800      	cmp	r0, #0
 800a402:	f040 828e 	bne.w	800a922 <_dtoa_r+0x942>
 800a406:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a40a:	462a      	mov	r2, r5
 800a40c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800a410:	f7f6 fad4 	bl	80009bc <__aeabi_dcmplt>
 800a414:	2800      	cmp	r0, #0
 800a416:	f040 8127 	bne.w	800a668 <_dtoa_r+0x688>
 800a41a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800a41e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800a422:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800a424:	2b00      	cmp	r3, #0
 800a426:	f2c0 8163 	blt.w	800a6f0 <_dtoa_r+0x710>
 800a42a:	2f0e      	cmp	r7, #14
 800a42c:	f300 8160 	bgt.w	800a6f0 <_dtoa_r+0x710>
 800a430:	4b33      	ldr	r3, [pc, #204]	@ (800a500 <_dtoa_r+0x520>)
 800a432:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a436:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a43a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800a43e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a440:	2b00      	cmp	r3, #0
 800a442:	da03      	bge.n	800a44c <_dtoa_r+0x46c>
 800a444:	9b07      	ldr	r3, [sp, #28]
 800a446:	2b00      	cmp	r3, #0
 800a448:	f340 8100 	ble.w	800a64c <_dtoa_r+0x66c>
 800a44c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a450:	4656      	mov	r6, sl
 800a452:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a456:	4620      	mov	r0, r4
 800a458:	4629      	mov	r1, r5
 800a45a:	f7f6 f967 	bl	800072c <__aeabi_ddiv>
 800a45e:	f7f6 faeb 	bl	8000a38 <__aeabi_d2iz>
 800a462:	4680      	mov	r8, r0
 800a464:	f7f5 ffce 	bl	8000404 <__aeabi_i2d>
 800a468:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a46c:	f7f6 f834 	bl	80004d8 <__aeabi_dmul>
 800a470:	4602      	mov	r2, r0
 800a472:	460b      	mov	r3, r1
 800a474:	4620      	mov	r0, r4
 800a476:	4629      	mov	r1, r5
 800a478:	f7f5 fe76 	bl	8000168 <__aeabi_dsub>
 800a47c:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800a480:	9d07      	ldr	r5, [sp, #28]
 800a482:	f806 4b01 	strb.w	r4, [r6], #1
 800a486:	eba6 040a 	sub.w	r4, r6, sl
 800a48a:	42a5      	cmp	r5, r4
 800a48c:	4602      	mov	r2, r0
 800a48e:	460b      	mov	r3, r1
 800a490:	f040 8116 	bne.w	800a6c0 <_dtoa_r+0x6e0>
 800a494:	f7f5 fe6a 	bl	800016c <__adddf3>
 800a498:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a49c:	4604      	mov	r4, r0
 800a49e:	460d      	mov	r5, r1
 800a4a0:	f7f6 faaa 	bl	80009f8 <__aeabi_dcmpgt>
 800a4a4:	2800      	cmp	r0, #0
 800a4a6:	f040 80f8 	bne.w	800a69a <_dtoa_r+0x6ba>
 800a4aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a4ae:	4620      	mov	r0, r4
 800a4b0:	4629      	mov	r1, r5
 800a4b2:	f7f6 fa79 	bl	80009a8 <__aeabi_dcmpeq>
 800a4b6:	b118      	cbz	r0, 800a4c0 <_dtoa_r+0x4e0>
 800a4b8:	f018 0f01 	tst.w	r8, #1
 800a4bc:	f040 80ed 	bne.w	800a69a <_dtoa_r+0x6ba>
 800a4c0:	4649      	mov	r1, r9
 800a4c2:	4658      	mov	r0, fp
 800a4c4:	f000 fc92 	bl	800adec <_Bfree>
 800a4c8:	2300      	movs	r3, #0
 800a4ca:	7033      	strb	r3, [r6, #0]
 800a4cc:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800a4ce:	3701      	adds	r7, #1
 800a4d0:	601f      	str	r7, [r3, #0]
 800a4d2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	f000 8320 	beq.w	800ab1a <_dtoa_r+0xb3a>
 800a4da:	601e      	str	r6, [r3, #0]
 800a4dc:	e31d      	b.n	800ab1a <_dtoa_r+0xb3a>
 800a4de:	07e2      	lsls	r2, r4, #31
 800a4e0:	d505      	bpl.n	800a4ee <_dtoa_r+0x50e>
 800a4e2:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a4e6:	f7f5 fff7 	bl	80004d8 <__aeabi_dmul>
 800a4ea:	2301      	movs	r3, #1
 800a4ec:	3601      	adds	r6, #1
 800a4ee:	1064      	asrs	r4, r4, #1
 800a4f0:	3508      	adds	r5, #8
 800a4f2:	e73f      	b.n	800a374 <_dtoa_r+0x394>
 800a4f4:	2602      	movs	r6, #2
 800a4f6:	e742      	b.n	800a37e <_dtoa_r+0x39e>
 800a4f8:	9c07      	ldr	r4, [sp, #28]
 800a4fa:	9704      	str	r7, [sp, #16]
 800a4fc:	e761      	b.n	800a3c2 <_dtoa_r+0x3e2>
 800a4fe:	bf00      	nop
 800a500:	0800ecf0 	.word	0x0800ecf0
 800a504:	0800ecc8 	.word	0x0800ecc8
 800a508:	3ff00000 	.word	0x3ff00000
 800a50c:	40240000 	.word	0x40240000
 800a510:	401c0000 	.word	0x401c0000
 800a514:	40140000 	.word	0x40140000
 800a518:	4b70      	ldr	r3, [pc, #448]	@ (800a6dc <_dtoa_r+0x6fc>)
 800a51a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a51c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a520:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a524:	4454      	add	r4, sl
 800a526:	2900      	cmp	r1, #0
 800a528:	d045      	beq.n	800a5b6 <_dtoa_r+0x5d6>
 800a52a:	2000      	movs	r0, #0
 800a52c:	496c      	ldr	r1, [pc, #432]	@ (800a6e0 <_dtoa_r+0x700>)
 800a52e:	f7f6 f8fd 	bl	800072c <__aeabi_ddiv>
 800a532:	4633      	mov	r3, r6
 800a534:	462a      	mov	r2, r5
 800a536:	f7f5 fe17 	bl	8000168 <__aeabi_dsub>
 800a53a:	4656      	mov	r6, sl
 800a53c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a540:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a544:	f7f6 fa78 	bl	8000a38 <__aeabi_d2iz>
 800a548:	4605      	mov	r5, r0
 800a54a:	f7f5 ff5b 	bl	8000404 <__aeabi_i2d>
 800a54e:	4602      	mov	r2, r0
 800a550:	460b      	mov	r3, r1
 800a552:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a556:	f7f5 fe07 	bl	8000168 <__aeabi_dsub>
 800a55a:	4602      	mov	r2, r0
 800a55c:	460b      	mov	r3, r1
 800a55e:	3530      	adds	r5, #48	@ 0x30
 800a560:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a564:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a568:	f806 5b01 	strb.w	r5, [r6], #1
 800a56c:	f7f6 fa26 	bl	80009bc <__aeabi_dcmplt>
 800a570:	2800      	cmp	r0, #0
 800a572:	d163      	bne.n	800a63c <_dtoa_r+0x65c>
 800a574:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a578:	2000      	movs	r0, #0
 800a57a:	495a      	ldr	r1, [pc, #360]	@ (800a6e4 <_dtoa_r+0x704>)
 800a57c:	f7f5 fdf4 	bl	8000168 <__aeabi_dsub>
 800a580:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a584:	f7f6 fa1a 	bl	80009bc <__aeabi_dcmplt>
 800a588:	2800      	cmp	r0, #0
 800a58a:	f040 8087 	bne.w	800a69c <_dtoa_r+0x6bc>
 800a58e:	42a6      	cmp	r6, r4
 800a590:	f43f af43 	beq.w	800a41a <_dtoa_r+0x43a>
 800a594:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a598:	2200      	movs	r2, #0
 800a59a:	4b53      	ldr	r3, [pc, #332]	@ (800a6e8 <_dtoa_r+0x708>)
 800a59c:	f7f5 ff9c 	bl	80004d8 <__aeabi_dmul>
 800a5a0:	2200      	movs	r2, #0
 800a5a2:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a5a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a5aa:	4b4f      	ldr	r3, [pc, #316]	@ (800a6e8 <_dtoa_r+0x708>)
 800a5ac:	f7f5 ff94 	bl	80004d8 <__aeabi_dmul>
 800a5b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a5b4:	e7c4      	b.n	800a540 <_dtoa_r+0x560>
 800a5b6:	4631      	mov	r1, r6
 800a5b8:	4628      	mov	r0, r5
 800a5ba:	f7f5 ff8d 	bl	80004d8 <__aeabi_dmul>
 800a5be:	4656      	mov	r6, sl
 800a5c0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a5c4:	9413      	str	r4, [sp, #76]	@ 0x4c
 800a5c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a5ca:	f7f6 fa35 	bl	8000a38 <__aeabi_d2iz>
 800a5ce:	4605      	mov	r5, r0
 800a5d0:	f7f5 ff18 	bl	8000404 <__aeabi_i2d>
 800a5d4:	4602      	mov	r2, r0
 800a5d6:	460b      	mov	r3, r1
 800a5d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a5dc:	f7f5 fdc4 	bl	8000168 <__aeabi_dsub>
 800a5e0:	4602      	mov	r2, r0
 800a5e2:	460b      	mov	r3, r1
 800a5e4:	3530      	adds	r5, #48	@ 0x30
 800a5e6:	f806 5b01 	strb.w	r5, [r6], #1
 800a5ea:	42a6      	cmp	r6, r4
 800a5ec:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a5f0:	f04f 0200 	mov.w	r2, #0
 800a5f4:	d124      	bne.n	800a640 <_dtoa_r+0x660>
 800a5f6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a5fa:	4b39      	ldr	r3, [pc, #228]	@ (800a6e0 <_dtoa_r+0x700>)
 800a5fc:	f7f5 fdb6 	bl	800016c <__adddf3>
 800a600:	4602      	mov	r2, r0
 800a602:	460b      	mov	r3, r1
 800a604:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a608:	f7f6 f9f6 	bl	80009f8 <__aeabi_dcmpgt>
 800a60c:	2800      	cmp	r0, #0
 800a60e:	d145      	bne.n	800a69c <_dtoa_r+0x6bc>
 800a610:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a614:	2000      	movs	r0, #0
 800a616:	4932      	ldr	r1, [pc, #200]	@ (800a6e0 <_dtoa_r+0x700>)
 800a618:	f7f5 fda6 	bl	8000168 <__aeabi_dsub>
 800a61c:	4602      	mov	r2, r0
 800a61e:	460b      	mov	r3, r1
 800a620:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a624:	f7f6 f9ca 	bl	80009bc <__aeabi_dcmplt>
 800a628:	2800      	cmp	r0, #0
 800a62a:	f43f aef6 	beq.w	800a41a <_dtoa_r+0x43a>
 800a62e:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800a630:	1e73      	subs	r3, r6, #1
 800a632:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a634:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a638:	2b30      	cmp	r3, #48	@ 0x30
 800a63a:	d0f8      	beq.n	800a62e <_dtoa_r+0x64e>
 800a63c:	9f04      	ldr	r7, [sp, #16]
 800a63e:	e73f      	b.n	800a4c0 <_dtoa_r+0x4e0>
 800a640:	4b29      	ldr	r3, [pc, #164]	@ (800a6e8 <_dtoa_r+0x708>)
 800a642:	f7f5 ff49 	bl	80004d8 <__aeabi_dmul>
 800a646:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a64a:	e7bc      	b.n	800a5c6 <_dtoa_r+0x5e6>
 800a64c:	d10c      	bne.n	800a668 <_dtoa_r+0x688>
 800a64e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a652:	2200      	movs	r2, #0
 800a654:	4b25      	ldr	r3, [pc, #148]	@ (800a6ec <_dtoa_r+0x70c>)
 800a656:	f7f5 ff3f 	bl	80004d8 <__aeabi_dmul>
 800a65a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a65e:	f7f6 f9c1 	bl	80009e4 <__aeabi_dcmpge>
 800a662:	2800      	cmp	r0, #0
 800a664:	f000 815b 	beq.w	800a91e <_dtoa_r+0x93e>
 800a668:	2400      	movs	r4, #0
 800a66a:	4625      	mov	r5, r4
 800a66c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a66e:	4656      	mov	r6, sl
 800a670:	43db      	mvns	r3, r3
 800a672:	9304      	str	r3, [sp, #16]
 800a674:	2700      	movs	r7, #0
 800a676:	4621      	mov	r1, r4
 800a678:	4658      	mov	r0, fp
 800a67a:	f000 fbb7 	bl	800adec <_Bfree>
 800a67e:	2d00      	cmp	r5, #0
 800a680:	d0dc      	beq.n	800a63c <_dtoa_r+0x65c>
 800a682:	b12f      	cbz	r7, 800a690 <_dtoa_r+0x6b0>
 800a684:	42af      	cmp	r7, r5
 800a686:	d003      	beq.n	800a690 <_dtoa_r+0x6b0>
 800a688:	4639      	mov	r1, r7
 800a68a:	4658      	mov	r0, fp
 800a68c:	f000 fbae 	bl	800adec <_Bfree>
 800a690:	4629      	mov	r1, r5
 800a692:	4658      	mov	r0, fp
 800a694:	f000 fbaa 	bl	800adec <_Bfree>
 800a698:	e7d0      	b.n	800a63c <_dtoa_r+0x65c>
 800a69a:	9704      	str	r7, [sp, #16]
 800a69c:	4633      	mov	r3, r6
 800a69e:	461e      	mov	r6, r3
 800a6a0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a6a4:	2a39      	cmp	r2, #57	@ 0x39
 800a6a6:	d107      	bne.n	800a6b8 <_dtoa_r+0x6d8>
 800a6a8:	459a      	cmp	sl, r3
 800a6aa:	d1f8      	bne.n	800a69e <_dtoa_r+0x6be>
 800a6ac:	9a04      	ldr	r2, [sp, #16]
 800a6ae:	3201      	adds	r2, #1
 800a6b0:	9204      	str	r2, [sp, #16]
 800a6b2:	2230      	movs	r2, #48	@ 0x30
 800a6b4:	f88a 2000 	strb.w	r2, [sl]
 800a6b8:	781a      	ldrb	r2, [r3, #0]
 800a6ba:	3201      	adds	r2, #1
 800a6bc:	701a      	strb	r2, [r3, #0]
 800a6be:	e7bd      	b.n	800a63c <_dtoa_r+0x65c>
 800a6c0:	2200      	movs	r2, #0
 800a6c2:	4b09      	ldr	r3, [pc, #36]	@ (800a6e8 <_dtoa_r+0x708>)
 800a6c4:	f7f5 ff08 	bl	80004d8 <__aeabi_dmul>
 800a6c8:	2200      	movs	r2, #0
 800a6ca:	2300      	movs	r3, #0
 800a6cc:	4604      	mov	r4, r0
 800a6ce:	460d      	mov	r5, r1
 800a6d0:	f7f6 f96a 	bl	80009a8 <__aeabi_dcmpeq>
 800a6d4:	2800      	cmp	r0, #0
 800a6d6:	f43f aebc 	beq.w	800a452 <_dtoa_r+0x472>
 800a6da:	e6f1      	b.n	800a4c0 <_dtoa_r+0x4e0>
 800a6dc:	0800ecf0 	.word	0x0800ecf0
 800a6e0:	3fe00000 	.word	0x3fe00000
 800a6e4:	3ff00000 	.word	0x3ff00000
 800a6e8:	40240000 	.word	0x40240000
 800a6ec:	40140000 	.word	0x40140000
 800a6f0:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a6f2:	2a00      	cmp	r2, #0
 800a6f4:	f000 80db 	beq.w	800a8ae <_dtoa_r+0x8ce>
 800a6f8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800a6fa:	2a01      	cmp	r2, #1
 800a6fc:	f300 80bf 	bgt.w	800a87e <_dtoa_r+0x89e>
 800a700:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800a702:	2a00      	cmp	r2, #0
 800a704:	f000 80b7 	beq.w	800a876 <_dtoa_r+0x896>
 800a708:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800a70c:	4646      	mov	r6, r8
 800a70e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a710:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a712:	2101      	movs	r1, #1
 800a714:	441a      	add	r2, r3
 800a716:	4658      	mov	r0, fp
 800a718:	4498      	add	r8, r3
 800a71a:	9209      	str	r2, [sp, #36]	@ 0x24
 800a71c:	f000 fc64 	bl	800afe8 <__i2b>
 800a720:	4605      	mov	r5, r0
 800a722:	b15e      	cbz	r6, 800a73c <_dtoa_r+0x75c>
 800a724:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a726:	2b00      	cmp	r3, #0
 800a728:	dd08      	ble.n	800a73c <_dtoa_r+0x75c>
 800a72a:	42b3      	cmp	r3, r6
 800a72c:	bfa8      	it	ge
 800a72e:	4633      	movge	r3, r6
 800a730:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a732:	eba8 0803 	sub.w	r8, r8, r3
 800a736:	1af6      	subs	r6, r6, r3
 800a738:	1ad3      	subs	r3, r2, r3
 800a73a:	9309      	str	r3, [sp, #36]	@ 0x24
 800a73c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a73e:	b1f3      	cbz	r3, 800a77e <_dtoa_r+0x79e>
 800a740:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a742:	2b00      	cmp	r3, #0
 800a744:	f000 80b7 	beq.w	800a8b6 <_dtoa_r+0x8d6>
 800a748:	b18c      	cbz	r4, 800a76e <_dtoa_r+0x78e>
 800a74a:	4629      	mov	r1, r5
 800a74c:	4622      	mov	r2, r4
 800a74e:	4658      	mov	r0, fp
 800a750:	f000 fd08 	bl	800b164 <__pow5mult>
 800a754:	464a      	mov	r2, r9
 800a756:	4601      	mov	r1, r0
 800a758:	4605      	mov	r5, r0
 800a75a:	4658      	mov	r0, fp
 800a75c:	f000 fc5a 	bl	800b014 <__multiply>
 800a760:	4649      	mov	r1, r9
 800a762:	9004      	str	r0, [sp, #16]
 800a764:	4658      	mov	r0, fp
 800a766:	f000 fb41 	bl	800adec <_Bfree>
 800a76a:	9b04      	ldr	r3, [sp, #16]
 800a76c:	4699      	mov	r9, r3
 800a76e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a770:	1b1a      	subs	r2, r3, r4
 800a772:	d004      	beq.n	800a77e <_dtoa_r+0x79e>
 800a774:	4649      	mov	r1, r9
 800a776:	4658      	mov	r0, fp
 800a778:	f000 fcf4 	bl	800b164 <__pow5mult>
 800a77c:	4681      	mov	r9, r0
 800a77e:	2101      	movs	r1, #1
 800a780:	4658      	mov	r0, fp
 800a782:	f000 fc31 	bl	800afe8 <__i2b>
 800a786:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a788:	4604      	mov	r4, r0
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	f000 81c9 	beq.w	800ab22 <_dtoa_r+0xb42>
 800a790:	461a      	mov	r2, r3
 800a792:	4601      	mov	r1, r0
 800a794:	4658      	mov	r0, fp
 800a796:	f000 fce5 	bl	800b164 <__pow5mult>
 800a79a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800a79c:	4604      	mov	r4, r0
 800a79e:	2b01      	cmp	r3, #1
 800a7a0:	f300 808f 	bgt.w	800a8c2 <_dtoa_r+0x8e2>
 800a7a4:	9b02      	ldr	r3, [sp, #8]
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	f040 8087 	bne.w	800a8ba <_dtoa_r+0x8da>
 800a7ac:	9b03      	ldr	r3, [sp, #12]
 800a7ae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	f040 8083 	bne.w	800a8be <_dtoa_r+0x8de>
 800a7b8:	9b03      	ldr	r3, [sp, #12]
 800a7ba:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a7be:	0d1b      	lsrs	r3, r3, #20
 800a7c0:	051b      	lsls	r3, r3, #20
 800a7c2:	b12b      	cbz	r3, 800a7d0 <_dtoa_r+0x7f0>
 800a7c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a7c6:	f108 0801 	add.w	r8, r8, #1
 800a7ca:	3301      	adds	r3, #1
 800a7cc:	9309      	str	r3, [sp, #36]	@ 0x24
 800a7ce:	2301      	movs	r3, #1
 800a7d0:	930a      	str	r3, [sp, #40]	@ 0x28
 800a7d2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	f000 81aa 	beq.w	800ab2e <_dtoa_r+0xb4e>
 800a7da:	6923      	ldr	r3, [r4, #16]
 800a7dc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a7e0:	6918      	ldr	r0, [r3, #16]
 800a7e2:	f000 fbb5 	bl	800af50 <__hi0bits>
 800a7e6:	f1c0 0020 	rsb	r0, r0, #32
 800a7ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a7ec:	4418      	add	r0, r3
 800a7ee:	f010 001f 	ands.w	r0, r0, #31
 800a7f2:	d071      	beq.n	800a8d8 <_dtoa_r+0x8f8>
 800a7f4:	f1c0 0320 	rsb	r3, r0, #32
 800a7f8:	2b04      	cmp	r3, #4
 800a7fa:	dd65      	ble.n	800a8c8 <_dtoa_r+0x8e8>
 800a7fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a7fe:	f1c0 001c 	rsb	r0, r0, #28
 800a802:	4403      	add	r3, r0
 800a804:	4480      	add	r8, r0
 800a806:	4406      	add	r6, r0
 800a808:	9309      	str	r3, [sp, #36]	@ 0x24
 800a80a:	f1b8 0f00 	cmp.w	r8, #0
 800a80e:	dd05      	ble.n	800a81c <_dtoa_r+0x83c>
 800a810:	4649      	mov	r1, r9
 800a812:	4642      	mov	r2, r8
 800a814:	4658      	mov	r0, fp
 800a816:	f000 fcff 	bl	800b218 <__lshift>
 800a81a:	4681      	mov	r9, r0
 800a81c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a81e:	2b00      	cmp	r3, #0
 800a820:	dd05      	ble.n	800a82e <_dtoa_r+0x84e>
 800a822:	4621      	mov	r1, r4
 800a824:	461a      	mov	r2, r3
 800a826:	4658      	mov	r0, fp
 800a828:	f000 fcf6 	bl	800b218 <__lshift>
 800a82c:	4604      	mov	r4, r0
 800a82e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a830:	2b00      	cmp	r3, #0
 800a832:	d053      	beq.n	800a8dc <_dtoa_r+0x8fc>
 800a834:	4621      	mov	r1, r4
 800a836:	4648      	mov	r0, r9
 800a838:	f000 fd5a 	bl	800b2f0 <__mcmp>
 800a83c:	2800      	cmp	r0, #0
 800a83e:	da4d      	bge.n	800a8dc <_dtoa_r+0x8fc>
 800a840:	1e7b      	subs	r3, r7, #1
 800a842:	4649      	mov	r1, r9
 800a844:	9304      	str	r3, [sp, #16]
 800a846:	220a      	movs	r2, #10
 800a848:	2300      	movs	r3, #0
 800a84a:	4658      	mov	r0, fp
 800a84c:	f000 faf0 	bl	800ae30 <__multadd>
 800a850:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a852:	4681      	mov	r9, r0
 800a854:	2b00      	cmp	r3, #0
 800a856:	f000 816c 	beq.w	800ab32 <_dtoa_r+0xb52>
 800a85a:	2300      	movs	r3, #0
 800a85c:	4629      	mov	r1, r5
 800a85e:	220a      	movs	r2, #10
 800a860:	4658      	mov	r0, fp
 800a862:	f000 fae5 	bl	800ae30 <__multadd>
 800a866:	9b08      	ldr	r3, [sp, #32]
 800a868:	4605      	mov	r5, r0
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	dc61      	bgt.n	800a932 <_dtoa_r+0x952>
 800a86e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800a870:	2b02      	cmp	r3, #2
 800a872:	dc3b      	bgt.n	800a8ec <_dtoa_r+0x90c>
 800a874:	e05d      	b.n	800a932 <_dtoa_r+0x952>
 800a876:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800a878:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800a87c:	e746      	b.n	800a70c <_dtoa_r+0x72c>
 800a87e:	9b07      	ldr	r3, [sp, #28]
 800a880:	1e5c      	subs	r4, r3, #1
 800a882:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a884:	42a3      	cmp	r3, r4
 800a886:	bfbf      	itttt	lt
 800a888:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800a88a:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 800a88c:	1ae3      	sublt	r3, r4, r3
 800a88e:	18d2      	addlt	r2, r2, r3
 800a890:	bfa8      	it	ge
 800a892:	1b1c      	subge	r4, r3, r4
 800a894:	9b07      	ldr	r3, [sp, #28]
 800a896:	bfbe      	ittt	lt
 800a898:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800a89a:	920e      	strlt	r2, [sp, #56]	@ 0x38
 800a89c:	2400      	movlt	r4, #0
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	bfb5      	itete	lt
 800a8a2:	eba8 0603 	sublt.w	r6, r8, r3
 800a8a6:	4646      	movge	r6, r8
 800a8a8:	2300      	movlt	r3, #0
 800a8aa:	9b07      	ldrge	r3, [sp, #28]
 800a8ac:	e730      	b.n	800a710 <_dtoa_r+0x730>
 800a8ae:	4646      	mov	r6, r8
 800a8b0:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a8b2:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800a8b4:	e735      	b.n	800a722 <_dtoa_r+0x742>
 800a8b6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a8b8:	e75c      	b.n	800a774 <_dtoa_r+0x794>
 800a8ba:	2300      	movs	r3, #0
 800a8bc:	e788      	b.n	800a7d0 <_dtoa_r+0x7f0>
 800a8be:	9b02      	ldr	r3, [sp, #8]
 800a8c0:	e786      	b.n	800a7d0 <_dtoa_r+0x7f0>
 800a8c2:	2300      	movs	r3, #0
 800a8c4:	930a      	str	r3, [sp, #40]	@ 0x28
 800a8c6:	e788      	b.n	800a7da <_dtoa_r+0x7fa>
 800a8c8:	d09f      	beq.n	800a80a <_dtoa_r+0x82a>
 800a8ca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a8cc:	331c      	adds	r3, #28
 800a8ce:	441a      	add	r2, r3
 800a8d0:	4498      	add	r8, r3
 800a8d2:	441e      	add	r6, r3
 800a8d4:	9209      	str	r2, [sp, #36]	@ 0x24
 800a8d6:	e798      	b.n	800a80a <_dtoa_r+0x82a>
 800a8d8:	4603      	mov	r3, r0
 800a8da:	e7f6      	b.n	800a8ca <_dtoa_r+0x8ea>
 800a8dc:	9b07      	ldr	r3, [sp, #28]
 800a8de:	9704      	str	r7, [sp, #16]
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	dc20      	bgt.n	800a926 <_dtoa_r+0x946>
 800a8e4:	9308      	str	r3, [sp, #32]
 800a8e6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800a8e8:	2b02      	cmp	r3, #2
 800a8ea:	dd1e      	ble.n	800a92a <_dtoa_r+0x94a>
 800a8ec:	9b08      	ldr	r3, [sp, #32]
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	f47f aebc 	bne.w	800a66c <_dtoa_r+0x68c>
 800a8f4:	4621      	mov	r1, r4
 800a8f6:	2205      	movs	r2, #5
 800a8f8:	4658      	mov	r0, fp
 800a8fa:	f000 fa99 	bl	800ae30 <__multadd>
 800a8fe:	4601      	mov	r1, r0
 800a900:	4604      	mov	r4, r0
 800a902:	4648      	mov	r0, r9
 800a904:	f000 fcf4 	bl	800b2f0 <__mcmp>
 800a908:	2800      	cmp	r0, #0
 800a90a:	f77f aeaf 	ble.w	800a66c <_dtoa_r+0x68c>
 800a90e:	2331      	movs	r3, #49	@ 0x31
 800a910:	4656      	mov	r6, sl
 800a912:	f806 3b01 	strb.w	r3, [r6], #1
 800a916:	9b04      	ldr	r3, [sp, #16]
 800a918:	3301      	adds	r3, #1
 800a91a:	9304      	str	r3, [sp, #16]
 800a91c:	e6aa      	b.n	800a674 <_dtoa_r+0x694>
 800a91e:	9c07      	ldr	r4, [sp, #28]
 800a920:	9704      	str	r7, [sp, #16]
 800a922:	4625      	mov	r5, r4
 800a924:	e7f3      	b.n	800a90e <_dtoa_r+0x92e>
 800a926:	9b07      	ldr	r3, [sp, #28]
 800a928:	9308      	str	r3, [sp, #32]
 800a92a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	f000 8104 	beq.w	800ab3a <_dtoa_r+0xb5a>
 800a932:	2e00      	cmp	r6, #0
 800a934:	dd05      	ble.n	800a942 <_dtoa_r+0x962>
 800a936:	4629      	mov	r1, r5
 800a938:	4632      	mov	r2, r6
 800a93a:	4658      	mov	r0, fp
 800a93c:	f000 fc6c 	bl	800b218 <__lshift>
 800a940:	4605      	mov	r5, r0
 800a942:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a944:	2b00      	cmp	r3, #0
 800a946:	d05a      	beq.n	800a9fe <_dtoa_r+0xa1e>
 800a948:	4658      	mov	r0, fp
 800a94a:	6869      	ldr	r1, [r5, #4]
 800a94c:	f000 fa0e 	bl	800ad6c <_Balloc>
 800a950:	4606      	mov	r6, r0
 800a952:	b928      	cbnz	r0, 800a960 <_dtoa_r+0x980>
 800a954:	4602      	mov	r2, r0
 800a956:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800a95a:	4b83      	ldr	r3, [pc, #524]	@ (800ab68 <_dtoa_r+0xb88>)
 800a95c:	f7ff bb54 	b.w	800a008 <_dtoa_r+0x28>
 800a960:	692a      	ldr	r2, [r5, #16]
 800a962:	f105 010c 	add.w	r1, r5, #12
 800a966:	3202      	adds	r2, #2
 800a968:	0092      	lsls	r2, r2, #2
 800a96a:	300c      	adds	r0, #12
 800a96c:	f7ff fa9d 	bl	8009eaa <memcpy>
 800a970:	2201      	movs	r2, #1
 800a972:	4631      	mov	r1, r6
 800a974:	4658      	mov	r0, fp
 800a976:	f000 fc4f 	bl	800b218 <__lshift>
 800a97a:	462f      	mov	r7, r5
 800a97c:	4605      	mov	r5, r0
 800a97e:	f10a 0301 	add.w	r3, sl, #1
 800a982:	9307      	str	r3, [sp, #28]
 800a984:	9b08      	ldr	r3, [sp, #32]
 800a986:	4453      	add	r3, sl
 800a988:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a98a:	9b02      	ldr	r3, [sp, #8]
 800a98c:	f003 0301 	and.w	r3, r3, #1
 800a990:	930a      	str	r3, [sp, #40]	@ 0x28
 800a992:	9b07      	ldr	r3, [sp, #28]
 800a994:	4621      	mov	r1, r4
 800a996:	3b01      	subs	r3, #1
 800a998:	4648      	mov	r0, r9
 800a99a:	9302      	str	r3, [sp, #8]
 800a99c:	f7ff fa98 	bl	8009ed0 <quorem>
 800a9a0:	4639      	mov	r1, r7
 800a9a2:	9008      	str	r0, [sp, #32]
 800a9a4:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a9a8:	4648      	mov	r0, r9
 800a9aa:	f000 fca1 	bl	800b2f0 <__mcmp>
 800a9ae:	462a      	mov	r2, r5
 800a9b0:	9009      	str	r0, [sp, #36]	@ 0x24
 800a9b2:	4621      	mov	r1, r4
 800a9b4:	4658      	mov	r0, fp
 800a9b6:	f000 fcb7 	bl	800b328 <__mdiff>
 800a9ba:	68c2      	ldr	r2, [r0, #12]
 800a9bc:	4606      	mov	r6, r0
 800a9be:	bb02      	cbnz	r2, 800aa02 <_dtoa_r+0xa22>
 800a9c0:	4601      	mov	r1, r0
 800a9c2:	4648      	mov	r0, r9
 800a9c4:	f000 fc94 	bl	800b2f0 <__mcmp>
 800a9c8:	4602      	mov	r2, r0
 800a9ca:	4631      	mov	r1, r6
 800a9cc:	4658      	mov	r0, fp
 800a9ce:	920c      	str	r2, [sp, #48]	@ 0x30
 800a9d0:	f000 fa0c 	bl	800adec <_Bfree>
 800a9d4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800a9d6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800a9d8:	9e07      	ldr	r6, [sp, #28]
 800a9da:	ea43 0102 	orr.w	r1, r3, r2
 800a9de:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a9e0:	4319      	orrs	r1, r3
 800a9e2:	d110      	bne.n	800aa06 <_dtoa_r+0xa26>
 800a9e4:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a9e8:	d029      	beq.n	800aa3e <_dtoa_r+0xa5e>
 800a9ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	dd02      	ble.n	800a9f6 <_dtoa_r+0xa16>
 800a9f0:	9b08      	ldr	r3, [sp, #32]
 800a9f2:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800a9f6:	9b02      	ldr	r3, [sp, #8]
 800a9f8:	f883 8000 	strb.w	r8, [r3]
 800a9fc:	e63b      	b.n	800a676 <_dtoa_r+0x696>
 800a9fe:	4628      	mov	r0, r5
 800aa00:	e7bb      	b.n	800a97a <_dtoa_r+0x99a>
 800aa02:	2201      	movs	r2, #1
 800aa04:	e7e1      	b.n	800a9ca <_dtoa_r+0x9ea>
 800aa06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	db04      	blt.n	800aa16 <_dtoa_r+0xa36>
 800aa0c:	9920      	ldr	r1, [sp, #128]	@ 0x80
 800aa0e:	430b      	orrs	r3, r1
 800aa10:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800aa12:	430b      	orrs	r3, r1
 800aa14:	d120      	bne.n	800aa58 <_dtoa_r+0xa78>
 800aa16:	2a00      	cmp	r2, #0
 800aa18:	dded      	ble.n	800a9f6 <_dtoa_r+0xa16>
 800aa1a:	4649      	mov	r1, r9
 800aa1c:	2201      	movs	r2, #1
 800aa1e:	4658      	mov	r0, fp
 800aa20:	f000 fbfa 	bl	800b218 <__lshift>
 800aa24:	4621      	mov	r1, r4
 800aa26:	4681      	mov	r9, r0
 800aa28:	f000 fc62 	bl	800b2f0 <__mcmp>
 800aa2c:	2800      	cmp	r0, #0
 800aa2e:	dc03      	bgt.n	800aa38 <_dtoa_r+0xa58>
 800aa30:	d1e1      	bne.n	800a9f6 <_dtoa_r+0xa16>
 800aa32:	f018 0f01 	tst.w	r8, #1
 800aa36:	d0de      	beq.n	800a9f6 <_dtoa_r+0xa16>
 800aa38:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800aa3c:	d1d8      	bne.n	800a9f0 <_dtoa_r+0xa10>
 800aa3e:	2339      	movs	r3, #57	@ 0x39
 800aa40:	9a02      	ldr	r2, [sp, #8]
 800aa42:	7013      	strb	r3, [r2, #0]
 800aa44:	4633      	mov	r3, r6
 800aa46:	461e      	mov	r6, r3
 800aa48:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800aa4c:	3b01      	subs	r3, #1
 800aa4e:	2a39      	cmp	r2, #57	@ 0x39
 800aa50:	d052      	beq.n	800aaf8 <_dtoa_r+0xb18>
 800aa52:	3201      	adds	r2, #1
 800aa54:	701a      	strb	r2, [r3, #0]
 800aa56:	e60e      	b.n	800a676 <_dtoa_r+0x696>
 800aa58:	2a00      	cmp	r2, #0
 800aa5a:	dd07      	ble.n	800aa6c <_dtoa_r+0xa8c>
 800aa5c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800aa60:	d0ed      	beq.n	800aa3e <_dtoa_r+0xa5e>
 800aa62:	9a02      	ldr	r2, [sp, #8]
 800aa64:	f108 0301 	add.w	r3, r8, #1
 800aa68:	7013      	strb	r3, [r2, #0]
 800aa6a:	e604      	b.n	800a676 <_dtoa_r+0x696>
 800aa6c:	9b07      	ldr	r3, [sp, #28]
 800aa6e:	9a07      	ldr	r2, [sp, #28]
 800aa70:	f803 8c01 	strb.w	r8, [r3, #-1]
 800aa74:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800aa76:	4293      	cmp	r3, r2
 800aa78:	d028      	beq.n	800aacc <_dtoa_r+0xaec>
 800aa7a:	4649      	mov	r1, r9
 800aa7c:	2300      	movs	r3, #0
 800aa7e:	220a      	movs	r2, #10
 800aa80:	4658      	mov	r0, fp
 800aa82:	f000 f9d5 	bl	800ae30 <__multadd>
 800aa86:	42af      	cmp	r7, r5
 800aa88:	4681      	mov	r9, r0
 800aa8a:	f04f 0300 	mov.w	r3, #0
 800aa8e:	f04f 020a 	mov.w	r2, #10
 800aa92:	4639      	mov	r1, r7
 800aa94:	4658      	mov	r0, fp
 800aa96:	d107      	bne.n	800aaa8 <_dtoa_r+0xac8>
 800aa98:	f000 f9ca 	bl	800ae30 <__multadd>
 800aa9c:	4607      	mov	r7, r0
 800aa9e:	4605      	mov	r5, r0
 800aaa0:	9b07      	ldr	r3, [sp, #28]
 800aaa2:	3301      	adds	r3, #1
 800aaa4:	9307      	str	r3, [sp, #28]
 800aaa6:	e774      	b.n	800a992 <_dtoa_r+0x9b2>
 800aaa8:	f000 f9c2 	bl	800ae30 <__multadd>
 800aaac:	4629      	mov	r1, r5
 800aaae:	4607      	mov	r7, r0
 800aab0:	2300      	movs	r3, #0
 800aab2:	220a      	movs	r2, #10
 800aab4:	4658      	mov	r0, fp
 800aab6:	f000 f9bb 	bl	800ae30 <__multadd>
 800aaba:	4605      	mov	r5, r0
 800aabc:	e7f0      	b.n	800aaa0 <_dtoa_r+0xac0>
 800aabe:	9b08      	ldr	r3, [sp, #32]
 800aac0:	2700      	movs	r7, #0
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	bfcc      	ite	gt
 800aac6:	461e      	movgt	r6, r3
 800aac8:	2601      	movle	r6, #1
 800aaca:	4456      	add	r6, sl
 800aacc:	4649      	mov	r1, r9
 800aace:	2201      	movs	r2, #1
 800aad0:	4658      	mov	r0, fp
 800aad2:	f000 fba1 	bl	800b218 <__lshift>
 800aad6:	4621      	mov	r1, r4
 800aad8:	4681      	mov	r9, r0
 800aada:	f000 fc09 	bl	800b2f0 <__mcmp>
 800aade:	2800      	cmp	r0, #0
 800aae0:	dcb0      	bgt.n	800aa44 <_dtoa_r+0xa64>
 800aae2:	d102      	bne.n	800aaea <_dtoa_r+0xb0a>
 800aae4:	f018 0f01 	tst.w	r8, #1
 800aae8:	d1ac      	bne.n	800aa44 <_dtoa_r+0xa64>
 800aaea:	4633      	mov	r3, r6
 800aaec:	461e      	mov	r6, r3
 800aaee:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800aaf2:	2a30      	cmp	r2, #48	@ 0x30
 800aaf4:	d0fa      	beq.n	800aaec <_dtoa_r+0xb0c>
 800aaf6:	e5be      	b.n	800a676 <_dtoa_r+0x696>
 800aaf8:	459a      	cmp	sl, r3
 800aafa:	d1a4      	bne.n	800aa46 <_dtoa_r+0xa66>
 800aafc:	9b04      	ldr	r3, [sp, #16]
 800aafe:	3301      	adds	r3, #1
 800ab00:	9304      	str	r3, [sp, #16]
 800ab02:	2331      	movs	r3, #49	@ 0x31
 800ab04:	f88a 3000 	strb.w	r3, [sl]
 800ab08:	e5b5      	b.n	800a676 <_dtoa_r+0x696>
 800ab0a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800ab0c:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800ab6c <_dtoa_r+0xb8c>
 800ab10:	b11b      	cbz	r3, 800ab1a <_dtoa_r+0xb3a>
 800ab12:	f10a 0308 	add.w	r3, sl, #8
 800ab16:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800ab18:	6013      	str	r3, [r2, #0]
 800ab1a:	4650      	mov	r0, sl
 800ab1c:	b017      	add	sp, #92	@ 0x5c
 800ab1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab22:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800ab24:	2b01      	cmp	r3, #1
 800ab26:	f77f ae3d 	ble.w	800a7a4 <_dtoa_r+0x7c4>
 800ab2a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ab2c:	930a      	str	r3, [sp, #40]	@ 0x28
 800ab2e:	2001      	movs	r0, #1
 800ab30:	e65b      	b.n	800a7ea <_dtoa_r+0x80a>
 800ab32:	9b08      	ldr	r3, [sp, #32]
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	f77f aed6 	ble.w	800a8e6 <_dtoa_r+0x906>
 800ab3a:	4656      	mov	r6, sl
 800ab3c:	4621      	mov	r1, r4
 800ab3e:	4648      	mov	r0, r9
 800ab40:	f7ff f9c6 	bl	8009ed0 <quorem>
 800ab44:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800ab48:	9b08      	ldr	r3, [sp, #32]
 800ab4a:	f806 8b01 	strb.w	r8, [r6], #1
 800ab4e:	eba6 020a 	sub.w	r2, r6, sl
 800ab52:	4293      	cmp	r3, r2
 800ab54:	ddb3      	ble.n	800aabe <_dtoa_r+0xade>
 800ab56:	4649      	mov	r1, r9
 800ab58:	2300      	movs	r3, #0
 800ab5a:	220a      	movs	r2, #10
 800ab5c:	4658      	mov	r0, fp
 800ab5e:	f000 f967 	bl	800ae30 <__multadd>
 800ab62:	4681      	mov	r9, r0
 800ab64:	e7ea      	b.n	800ab3c <_dtoa_r+0xb5c>
 800ab66:	bf00      	nop
 800ab68:	0800ec4d 	.word	0x0800ec4d
 800ab6c:	0800ebd1 	.word	0x0800ebd1

0800ab70 <_free_r>:
 800ab70:	b538      	push	{r3, r4, r5, lr}
 800ab72:	4605      	mov	r5, r0
 800ab74:	2900      	cmp	r1, #0
 800ab76:	d040      	beq.n	800abfa <_free_r+0x8a>
 800ab78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ab7c:	1f0c      	subs	r4, r1, #4
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	bfb8      	it	lt
 800ab82:	18e4      	addlt	r4, r4, r3
 800ab84:	f000 f8e6 	bl	800ad54 <__malloc_lock>
 800ab88:	4a1c      	ldr	r2, [pc, #112]	@ (800abfc <_free_r+0x8c>)
 800ab8a:	6813      	ldr	r3, [r2, #0]
 800ab8c:	b933      	cbnz	r3, 800ab9c <_free_r+0x2c>
 800ab8e:	6063      	str	r3, [r4, #4]
 800ab90:	6014      	str	r4, [r2, #0]
 800ab92:	4628      	mov	r0, r5
 800ab94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ab98:	f000 b8e2 	b.w	800ad60 <__malloc_unlock>
 800ab9c:	42a3      	cmp	r3, r4
 800ab9e:	d908      	bls.n	800abb2 <_free_r+0x42>
 800aba0:	6820      	ldr	r0, [r4, #0]
 800aba2:	1821      	adds	r1, r4, r0
 800aba4:	428b      	cmp	r3, r1
 800aba6:	bf01      	itttt	eq
 800aba8:	6819      	ldreq	r1, [r3, #0]
 800abaa:	685b      	ldreq	r3, [r3, #4]
 800abac:	1809      	addeq	r1, r1, r0
 800abae:	6021      	streq	r1, [r4, #0]
 800abb0:	e7ed      	b.n	800ab8e <_free_r+0x1e>
 800abb2:	461a      	mov	r2, r3
 800abb4:	685b      	ldr	r3, [r3, #4]
 800abb6:	b10b      	cbz	r3, 800abbc <_free_r+0x4c>
 800abb8:	42a3      	cmp	r3, r4
 800abba:	d9fa      	bls.n	800abb2 <_free_r+0x42>
 800abbc:	6811      	ldr	r1, [r2, #0]
 800abbe:	1850      	adds	r0, r2, r1
 800abc0:	42a0      	cmp	r0, r4
 800abc2:	d10b      	bne.n	800abdc <_free_r+0x6c>
 800abc4:	6820      	ldr	r0, [r4, #0]
 800abc6:	4401      	add	r1, r0
 800abc8:	1850      	adds	r0, r2, r1
 800abca:	4283      	cmp	r3, r0
 800abcc:	6011      	str	r1, [r2, #0]
 800abce:	d1e0      	bne.n	800ab92 <_free_r+0x22>
 800abd0:	6818      	ldr	r0, [r3, #0]
 800abd2:	685b      	ldr	r3, [r3, #4]
 800abd4:	4408      	add	r0, r1
 800abd6:	6010      	str	r0, [r2, #0]
 800abd8:	6053      	str	r3, [r2, #4]
 800abda:	e7da      	b.n	800ab92 <_free_r+0x22>
 800abdc:	d902      	bls.n	800abe4 <_free_r+0x74>
 800abde:	230c      	movs	r3, #12
 800abe0:	602b      	str	r3, [r5, #0]
 800abe2:	e7d6      	b.n	800ab92 <_free_r+0x22>
 800abe4:	6820      	ldr	r0, [r4, #0]
 800abe6:	1821      	adds	r1, r4, r0
 800abe8:	428b      	cmp	r3, r1
 800abea:	bf01      	itttt	eq
 800abec:	6819      	ldreq	r1, [r3, #0]
 800abee:	685b      	ldreq	r3, [r3, #4]
 800abf0:	1809      	addeq	r1, r1, r0
 800abf2:	6021      	streq	r1, [r4, #0]
 800abf4:	6063      	str	r3, [r4, #4]
 800abf6:	6054      	str	r4, [r2, #4]
 800abf8:	e7cb      	b.n	800ab92 <_free_r+0x22>
 800abfa:	bd38      	pop	{r3, r4, r5, pc}
 800abfc:	20000a10 	.word	0x20000a10

0800ac00 <malloc>:
 800ac00:	4b02      	ldr	r3, [pc, #8]	@ (800ac0c <malloc+0xc>)
 800ac02:	4601      	mov	r1, r0
 800ac04:	6818      	ldr	r0, [r3, #0]
 800ac06:	f000 b825 	b.w	800ac54 <_malloc_r>
 800ac0a:	bf00      	nop
 800ac0c:	20000040 	.word	0x20000040

0800ac10 <sbrk_aligned>:
 800ac10:	b570      	push	{r4, r5, r6, lr}
 800ac12:	4e0f      	ldr	r6, [pc, #60]	@ (800ac50 <sbrk_aligned+0x40>)
 800ac14:	460c      	mov	r4, r1
 800ac16:	6831      	ldr	r1, [r6, #0]
 800ac18:	4605      	mov	r5, r0
 800ac1a:	b911      	cbnz	r1, 800ac22 <sbrk_aligned+0x12>
 800ac1c:	f001 ffb0 	bl	800cb80 <_sbrk_r>
 800ac20:	6030      	str	r0, [r6, #0]
 800ac22:	4621      	mov	r1, r4
 800ac24:	4628      	mov	r0, r5
 800ac26:	f001 ffab 	bl	800cb80 <_sbrk_r>
 800ac2a:	1c43      	adds	r3, r0, #1
 800ac2c:	d103      	bne.n	800ac36 <sbrk_aligned+0x26>
 800ac2e:	f04f 34ff 	mov.w	r4, #4294967295
 800ac32:	4620      	mov	r0, r4
 800ac34:	bd70      	pop	{r4, r5, r6, pc}
 800ac36:	1cc4      	adds	r4, r0, #3
 800ac38:	f024 0403 	bic.w	r4, r4, #3
 800ac3c:	42a0      	cmp	r0, r4
 800ac3e:	d0f8      	beq.n	800ac32 <sbrk_aligned+0x22>
 800ac40:	1a21      	subs	r1, r4, r0
 800ac42:	4628      	mov	r0, r5
 800ac44:	f001 ff9c 	bl	800cb80 <_sbrk_r>
 800ac48:	3001      	adds	r0, #1
 800ac4a:	d1f2      	bne.n	800ac32 <sbrk_aligned+0x22>
 800ac4c:	e7ef      	b.n	800ac2e <sbrk_aligned+0x1e>
 800ac4e:	bf00      	nop
 800ac50:	20000a0c 	.word	0x20000a0c

0800ac54 <_malloc_r>:
 800ac54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ac58:	1ccd      	adds	r5, r1, #3
 800ac5a:	f025 0503 	bic.w	r5, r5, #3
 800ac5e:	3508      	adds	r5, #8
 800ac60:	2d0c      	cmp	r5, #12
 800ac62:	bf38      	it	cc
 800ac64:	250c      	movcc	r5, #12
 800ac66:	2d00      	cmp	r5, #0
 800ac68:	4606      	mov	r6, r0
 800ac6a:	db01      	blt.n	800ac70 <_malloc_r+0x1c>
 800ac6c:	42a9      	cmp	r1, r5
 800ac6e:	d904      	bls.n	800ac7a <_malloc_r+0x26>
 800ac70:	230c      	movs	r3, #12
 800ac72:	6033      	str	r3, [r6, #0]
 800ac74:	2000      	movs	r0, #0
 800ac76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ac7a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ad50 <_malloc_r+0xfc>
 800ac7e:	f000 f869 	bl	800ad54 <__malloc_lock>
 800ac82:	f8d8 3000 	ldr.w	r3, [r8]
 800ac86:	461c      	mov	r4, r3
 800ac88:	bb44      	cbnz	r4, 800acdc <_malloc_r+0x88>
 800ac8a:	4629      	mov	r1, r5
 800ac8c:	4630      	mov	r0, r6
 800ac8e:	f7ff ffbf 	bl	800ac10 <sbrk_aligned>
 800ac92:	1c43      	adds	r3, r0, #1
 800ac94:	4604      	mov	r4, r0
 800ac96:	d158      	bne.n	800ad4a <_malloc_r+0xf6>
 800ac98:	f8d8 4000 	ldr.w	r4, [r8]
 800ac9c:	4627      	mov	r7, r4
 800ac9e:	2f00      	cmp	r7, #0
 800aca0:	d143      	bne.n	800ad2a <_malloc_r+0xd6>
 800aca2:	2c00      	cmp	r4, #0
 800aca4:	d04b      	beq.n	800ad3e <_malloc_r+0xea>
 800aca6:	6823      	ldr	r3, [r4, #0]
 800aca8:	4639      	mov	r1, r7
 800acaa:	4630      	mov	r0, r6
 800acac:	eb04 0903 	add.w	r9, r4, r3
 800acb0:	f001 ff66 	bl	800cb80 <_sbrk_r>
 800acb4:	4581      	cmp	r9, r0
 800acb6:	d142      	bne.n	800ad3e <_malloc_r+0xea>
 800acb8:	6821      	ldr	r1, [r4, #0]
 800acba:	4630      	mov	r0, r6
 800acbc:	1a6d      	subs	r5, r5, r1
 800acbe:	4629      	mov	r1, r5
 800acc0:	f7ff ffa6 	bl	800ac10 <sbrk_aligned>
 800acc4:	3001      	adds	r0, #1
 800acc6:	d03a      	beq.n	800ad3e <_malloc_r+0xea>
 800acc8:	6823      	ldr	r3, [r4, #0]
 800acca:	442b      	add	r3, r5
 800accc:	6023      	str	r3, [r4, #0]
 800acce:	f8d8 3000 	ldr.w	r3, [r8]
 800acd2:	685a      	ldr	r2, [r3, #4]
 800acd4:	bb62      	cbnz	r2, 800ad30 <_malloc_r+0xdc>
 800acd6:	f8c8 7000 	str.w	r7, [r8]
 800acda:	e00f      	b.n	800acfc <_malloc_r+0xa8>
 800acdc:	6822      	ldr	r2, [r4, #0]
 800acde:	1b52      	subs	r2, r2, r5
 800ace0:	d420      	bmi.n	800ad24 <_malloc_r+0xd0>
 800ace2:	2a0b      	cmp	r2, #11
 800ace4:	d917      	bls.n	800ad16 <_malloc_r+0xc2>
 800ace6:	1961      	adds	r1, r4, r5
 800ace8:	42a3      	cmp	r3, r4
 800acea:	6025      	str	r5, [r4, #0]
 800acec:	bf18      	it	ne
 800acee:	6059      	strne	r1, [r3, #4]
 800acf0:	6863      	ldr	r3, [r4, #4]
 800acf2:	bf08      	it	eq
 800acf4:	f8c8 1000 	streq.w	r1, [r8]
 800acf8:	5162      	str	r2, [r4, r5]
 800acfa:	604b      	str	r3, [r1, #4]
 800acfc:	4630      	mov	r0, r6
 800acfe:	f000 f82f 	bl	800ad60 <__malloc_unlock>
 800ad02:	f104 000b 	add.w	r0, r4, #11
 800ad06:	1d23      	adds	r3, r4, #4
 800ad08:	f020 0007 	bic.w	r0, r0, #7
 800ad0c:	1ac2      	subs	r2, r0, r3
 800ad0e:	bf1c      	itt	ne
 800ad10:	1a1b      	subne	r3, r3, r0
 800ad12:	50a3      	strne	r3, [r4, r2]
 800ad14:	e7af      	b.n	800ac76 <_malloc_r+0x22>
 800ad16:	6862      	ldr	r2, [r4, #4]
 800ad18:	42a3      	cmp	r3, r4
 800ad1a:	bf0c      	ite	eq
 800ad1c:	f8c8 2000 	streq.w	r2, [r8]
 800ad20:	605a      	strne	r2, [r3, #4]
 800ad22:	e7eb      	b.n	800acfc <_malloc_r+0xa8>
 800ad24:	4623      	mov	r3, r4
 800ad26:	6864      	ldr	r4, [r4, #4]
 800ad28:	e7ae      	b.n	800ac88 <_malloc_r+0x34>
 800ad2a:	463c      	mov	r4, r7
 800ad2c:	687f      	ldr	r7, [r7, #4]
 800ad2e:	e7b6      	b.n	800ac9e <_malloc_r+0x4a>
 800ad30:	461a      	mov	r2, r3
 800ad32:	685b      	ldr	r3, [r3, #4]
 800ad34:	42a3      	cmp	r3, r4
 800ad36:	d1fb      	bne.n	800ad30 <_malloc_r+0xdc>
 800ad38:	2300      	movs	r3, #0
 800ad3a:	6053      	str	r3, [r2, #4]
 800ad3c:	e7de      	b.n	800acfc <_malloc_r+0xa8>
 800ad3e:	230c      	movs	r3, #12
 800ad40:	4630      	mov	r0, r6
 800ad42:	6033      	str	r3, [r6, #0]
 800ad44:	f000 f80c 	bl	800ad60 <__malloc_unlock>
 800ad48:	e794      	b.n	800ac74 <_malloc_r+0x20>
 800ad4a:	6005      	str	r5, [r0, #0]
 800ad4c:	e7d6      	b.n	800acfc <_malloc_r+0xa8>
 800ad4e:	bf00      	nop
 800ad50:	20000a10 	.word	0x20000a10

0800ad54 <__malloc_lock>:
 800ad54:	4801      	ldr	r0, [pc, #4]	@ (800ad5c <__malloc_lock+0x8>)
 800ad56:	f7ff b898 	b.w	8009e8a <__retarget_lock_acquire_recursive>
 800ad5a:	bf00      	nop
 800ad5c:	20000a08 	.word	0x20000a08

0800ad60 <__malloc_unlock>:
 800ad60:	4801      	ldr	r0, [pc, #4]	@ (800ad68 <__malloc_unlock+0x8>)
 800ad62:	f7ff b893 	b.w	8009e8c <__retarget_lock_release_recursive>
 800ad66:	bf00      	nop
 800ad68:	20000a08 	.word	0x20000a08

0800ad6c <_Balloc>:
 800ad6c:	b570      	push	{r4, r5, r6, lr}
 800ad6e:	69c6      	ldr	r6, [r0, #28]
 800ad70:	4604      	mov	r4, r0
 800ad72:	460d      	mov	r5, r1
 800ad74:	b976      	cbnz	r6, 800ad94 <_Balloc+0x28>
 800ad76:	2010      	movs	r0, #16
 800ad78:	f7ff ff42 	bl	800ac00 <malloc>
 800ad7c:	4602      	mov	r2, r0
 800ad7e:	61e0      	str	r0, [r4, #28]
 800ad80:	b920      	cbnz	r0, 800ad8c <_Balloc+0x20>
 800ad82:	216b      	movs	r1, #107	@ 0x6b
 800ad84:	4b17      	ldr	r3, [pc, #92]	@ (800ade4 <_Balloc+0x78>)
 800ad86:	4818      	ldr	r0, [pc, #96]	@ (800ade8 <_Balloc+0x7c>)
 800ad88:	f001 ff10 	bl	800cbac <__assert_func>
 800ad8c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ad90:	6006      	str	r6, [r0, #0]
 800ad92:	60c6      	str	r6, [r0, #12]
 800ad94:	69e6      	ldr	r6, [r4, #28]
 800ad96:	68f3      	ldr	r3, [r6, #12]
 800ad98:	b183      	cbz	r3, 800adbc <_Balloc+0x50>
 800ad9a:	69e3      	ldr	r3, [r4, #28]
 800ad9c:	68db      	ldr	r3, [r3, #12]
 800ad9e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ada2:	b9b8      	cbnz	r0, 800add4 <_Balloc+0x68>
 800ada4:	2101      	movs	r1, #1
 800ada6:	fa01 f605 	lsl.w	r6, r1, r5
 800adaa:	1d72      	adds	r2, r6, #5
 800adac:	4620      	mov	r0, r4
 800adae:	0092      	lsls	r2, r2, #2
 800adb0:	f001 ff1a 	bl	800cbe8 <_calloc_r>
 800adb4:	b160      	cbz	r0, 800add0 <_Balloc+0x64>
 800adb6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800adba:	e00e      	b.n	800adda <_Balloc+0x6e>
 800adbc:	2221      	movs	r2, #33	@ 0x21
 800adbe:	2104      	movs	r1, #4
 800adc0:	4620      	mov	r0, r4
 800adc2:	f001 ff11 	bl	800cbe8 <_calloc_r>
 800adc6:	69e3      	ldr	r3, [r4, #28]
 800adc8:	60f0      	str	r0, [r6, #12]
 800adca:	68db      	ldr	r3, [r3, #12]
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d1e4      	bne.n	800ad9a <_Balloc+0x2e>
 800add0:	2000      	movs	r0, #0
 800add2:	bd70      	pop	{r4, r5, r6, pc}
 800add4:	6802      	ldr	r2, [r0, #0]
 800add6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800adda:	2300      	movs	r3, #0
 800addc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ade0:	e7f7      	b.n	800add2 <_Balloc+0x66>
 800ade2:	bf00      	nop
 800ade4:	0800ebde 	.word	0x0800ebde
 800ade8:	0800ec5e 	.word	0x0800ec5e

0800adec <_Bfree>:
 800adec:	b570      	push	{r4, r5, r6, lr}
 800adee:	69c6      	ldr	r6, [r0, #28]
 800adf0:	4605      	mov	r5, r0
 800adf2:	460c      	mov	r4, r1
 800adf4:	b976      	cbnz	r6, 800ae14 <_Bfree+0x28>
 800adf6:	2010      	movs	r0, #16
 800adf8:	f7ff ff02 	bl	800ac00 <malloc>
 800adfc:	4602      	mov	r2, r0
 800adfe:	61e8      	str	r0, [r5, #28]
 800ae00:	b920      	cbnz	r0, 800ae0c <_Bfree+0x20>
 800ae02:	218f      	movs	r1, #143	@ 0x8f
 800ae04:	4b08      	ldr	r3, [pc, #32]	@ (800ae28 <_Bfree+0x3c>)
 800ae06:	4809      	ldr	r0, [pc, #36]	@ (800ae2c <_Bfree+0x40>)
 800ae08:	f001 fed0 	bl	800cbac <__assert_func>
 800ae0c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ae10:	6006      	str	r6, [r0, #0]
 800ae12:	60c6      	str	r6, [r0, #12]
 800ae14:	b13c      	cbz	r4, 800ae26 <_Bfree+0x3a>
 800ae16:	69eb      	ldr	r3, [r5, #28]
 800ae18:	6862      	ldr	r2, [r4, #4]
 800ae1a:	68db      	ldr	r3, [r3, #12]
 800ae1c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ae20:	6021      	str	r1, [r4, #0]
 800ae22:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ae26:	bd70      	pop	{r4, r5, r6, pc}
 800ae28:	0800ebde 	.word	0x0800ebde
 800ae2c:	0800ec5e 	.word	0x0800ec5e

0800ae30 <__multadd>:
 800ae30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae34:	4607      	mov	r7, r0
 800ae36:	460c      	mov	r4, r1
 800ae38:	461e      	mov	r6, r3
 800ae3a:	2000      	movs	r0, #0
 800ae3c:	690d      	ldr	r5, [r1, #16]
 800ae3e:	f101 0c14 	add.w	ip, r1, #20
 800ae42:	f8dc 3000 	ldr.w	r3, [ip]
 800ae46:	3001      	adds	r0, #1
 800ae48:	b299      	uxth	r1, r3
 800ae4a:	fb02 6101 	mla	r1, r2, r1, r6
 800ae4e:	0c1e      	lsrs	r6, r3, #16
 800ae50:	0c0b      	lsrs	r3, r1, #16
 800ae52:	fb02 3306 	mla	r3, r2, r6, r3
 800ae56:	b289      	uxth	r1, r1
 800ae58:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ae5c:	4285      	cmp	r5, r0
 800ae5e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ae62:	f84c 1b04 	str.w	r1, [ip], #4
 800ae66:	dcec      	bgt.n	800ae42 <__multadd+0x12>
 800ae68:	b30e      	cbz	r6, 800aeae <__multadd+0x7e>
 800ae6a:	68a3      	ldr	r3, [r4, #8]
 800ae6c:	42ab      	cmp	r3, r5
 800ae6e:	dc19      	bgt.n	800aea4 <__multadd+0x74>
 800ae70:	6861      	ldr	r1, [r4, #4]
 800ae72:	4638      	mov	r0, r7
 800ae74:	3101      	adds	r1, #1
 800ae76:	f7ff ff79 	bl	800ad6c <_Balloc>
 800ae7a:	4680      	mov	r8, r0
 800ae7c:	b928      	cbnz	r0, 800ae8a <__multadd+0x5a>
 800ae7e:	4602      	mov	r2, r0
 800ae80:	21ba      	movs	r1, #186	@ 0xba
 800ae82:	4b0c      	ldr	r3, [pc, #48]	@ (800aeb4 <__multadd+0x84>)
 800ae84:	480c      	ldr	r0, [pc, #48]	@ (800aeb8 <__multadd+0x88>)
 800ae86:	f001 fe91 	bl	800cbac <__assert_func>
 800ae8a:	6922      	ldr	r2, [r4, #16]
 800ae8c:	f104 010c 	add.w	r1, r4, #12
 800ae90:	3202      	adds	r2, #2
 800ae92:	0092      	lsls	r2, r2, #2
 800ae94:	300c      	adds	r0, #12
 800ae96:	f7ff f808 	bl	8009eaa <memcpy>
 800ae9a:	4621      	mov	r1, r4
 800ae9c:	4638      	mov	r0, r7
 800ae9e:	f7ff ffa5 	bl	800adec <_Bfree>
 800aea2:	4644      	mov	r4, r8
 800aea4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800aea8:	3501      	adds	r5, #1
 800aeaa:	615e      	str	r6, [r3, #20]
 800aeac:	6125      	str	r5, [r4, #16]
 800aeae:	4620      	mov	r0, r4
 800aeb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aeb4:	0800ec4d 	.word	0x0800ec4d
 800aeb8:	0800ec5e 	.word	0x0800ec5e

0800aebc <__s2b>:
 800aebc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aec0:	4615      	mov	r5, r2
 800aec2:	2209      	movs	r2, #9
 800aec4:	461f      	mov	r7, r3
 800aec6:	3308      	adds	r3, #8
 800aec8:	460c      	mov	r4, r1
 800aeca:	fb93 f3f2 	sdiv	r3, r3, r2
 800aece:	4606      	mov	r6, r0
 800aed0:	2201      	movs	r2, #1
 800aed2:	2100      	movs	r1, #0
 800aed4:	429a      	cmp	r2, r3
 800aed6:	db09      	blt.n	800aeec <__s2b+0x30>
 800aed8:	4630      	mov	r0, r6
 800aeda:	f7ff ff47 	bl	800ad6c <_Balloc>
 800aede:	b940      	cbnz	r0, 800aef2 <__s2b+0x36>
 800aee0:	4602      	mov	r2, r0
 800aee2:	21d3      	movs	r1, #211	@ 0xd3
 800aee4:	4b18      	ldr	r3, [pc, #96]	@ (800af48 <__s2b+0x8c>)
 800aee6:	4819      	ldr	r0, [pc, #100]	@ (800af4c <__s2b+0x90>)
 800aee8:	f001 fe60 	bl	800cbac <__assert_func>
 800aeec:	0052      	lsls	r2, r2, #1
 800aeee:	3101      	adds	r1, #1
 800aef0:	e7f0      	b.n	800aed4 <__s2b+0x18>
 800aef2:	9b08      	ldr	r3, [sp, #32]
 800aef4:	2d09      	cmp	r5, #9
 800aef6:	6143      	str	r3, [r0, #20]
 800aef8:	f04f 0301 	mov.w	r3, #1
 800aefc:	6103      	str	r3, [r0, #16]
 800aefe:	dd16      	ble.n	800af2e <__s2b+0x72>
 800af00:	f104 0909 	add.w	r9, r4, #9
 800af04:	46c8      	mov	r8, r9
 800af06:	442c      	add	r4, r5
 800af08:	f818 3b01 	ldrb.w	r3, [r8], #1
 800af0c:	4601      	mov	r1, r0
 800af0e:	220a      	movs	r2, #10
 800af10:	4630      	mov	r0, r6
 800af12:	3b30      	subs	r3, #48	@ 0x30
 800af14:	f7ff ff8c 	bl	800ae30 <__multadd>
 800af18:	45a0      	cmp	r8, r4
 800af1a:	d1f5      	bne.n	800af08 <__s2b+0x4c>
 800af1c:	f1a5 0408 	sub.w	r4, r5, #8
 800af20:	444c      	add	r4, r9
 800af22:	1b2d      	subs	r5, r5, r4
 800af24:	1963      	adds	r3, r4, r5
 800af26:	42bb      	cmp	r3, r7
 800af28:	db04      	blt.n	800af34 <__s2b+0x78>
 800af2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800af2e:	2509      	movs	r5, #9
 800af30:	340a      	adds	r4, #10
 800af32:	e7f6      	b.n	800af22 <__s2b+0x66>
 800af34:	f814 3b01 	ldrb.w	r3, [r4], #1
 800af38:	4601      	mov	r1, r0
 800af3a:	220a      	movs	r2, #10
 800af3c:	4630      	mov	r0, r6
 800af3e:	3b30      	subs	r3, #48	@ 0x30
 800af40:	f7ff ff76 	bl	800ae30 <__multadd>
 800af44:	e7ee      	b.n	800af24 <__s2b+0x68>
 800af46:	bf00      	nop
 800af48:	0800ec4d 	.word	0x0800ec4d
 800af4c:	0800ec5e 	.word	0x0800ec5e

0800af50 <__hi0bits>:
 800af50:	4603      	mov	r3, r0
 800af52:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800af56:	bf3a      	itte	cc
 800af58:	0403      	lslcc	r3, r0, #16
 800af5a:	2010      	movcc	r0, #16
 800af5c:	2000      	movcs	r0, #0
 800af5e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800af62:	bf3c      	itt	cc
 800af64:	021b      	lslcc	r3, r3, #8
 800af66:	3008      	addcc	r0, #8
 800af68:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800af6c:	bf3c      	itt	cc
 800af6e:	011b      	lslcc	r3, r3, #4
 800af70:	3004      	addcc	r0, #4
 800af72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800af76:	bf3c      	itt	cc
 800af78:	009b      	lslcc	r3, r3, #2
 800af7a:	3002      	addcc	r0, #2
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	db05      	blt.n	800af8c <__hi0bits+0x3c>
 800af80:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800af84:	f100 0001 	add.w	r0, r0, #1
 800af88:	bf08      	it	eq
 800af8a:	2020      	moveq	r0, #32
 800af8c:	4770      	bx	lr

0800af8e <__lo0bits>:
 800af8e:	6803      	ldr	r3, [r0, #0]
 800af90:	4602      	mov	r2, r0
 800af92:	f013 0007 	ands.w	r0, r3, #7
 800af96:	d00b      	beq.n	800afb0 <__lo0bits+0x22>
 800af98:	07d9      	lsls	r1, r3, #31
 800af9a:	d421      	bmi.n	800afe0 <__lo0bits+0x52>
 800af9c:	0798      	lsls	r0, r3, #30
 800af9e:	bf49      	itett	mi
 800afa0:	085b      	lsrmi	r3, r3, #1
 800afa2:	089b      	lsrpl	r3, r3, #2
 800afa4:	2001      	movmi	r0, #1
 800afa6:	6013      	strmi	r3, [r2, #0]
 800afa8:	bf5c      	itt	pl
 800afaa:	2002      	movpl	r0, #2
 800afac:	6013      	strpl	r3, [r2, #0]
 800afae:	4770      	bx	lr
 800afb0:	b299      	uxth	r1, r3
 800afb2:	b909      	cbnz	r1, 800afb8 <__lo0bits+0x2a>
 800afb4:	2010      	movs	r0, #16
 800afb6:	0c1b      	lsrs	r3, r3, #16
 800afb8:	b2d9      	uxtb	r1, r3
 800afba:	b909      	cbnz	r1, 800afc0 <__lo0bits+0x32>
 800afbc:	3008      	adds	r0, #8
 800afbe:	0a1b      	lsrs	r3, r3, #8
 800afc0:	0719      	lsls	r1, r3, #28
 800afc2:	bf04      	itt	eq
 800afc4:	091b      	lsreq	r3, r3, #4
 800afc6:	3004      	addeq	r0, #4
 800afc8:	0799      	lsls	r1, r3, #30
 800afca:	bf04      	itt	eq
 800afcc:	089b      	lsreq	r3, r3, #2
 800afce:	3002      	addeq	r0, #2
 800afd0:	07d9      	lsls	r1, r3, #31
 800afd2:	d403      	bmi.n	800afdc <__lo0bits+0x4e>
 800afd4:	085b      	lsrs	r3, r3, #1
 800afd6:	f100 0001 	add.w	r0, r0, #1
 800afda:	d003      	beq.n	800afe4 <__lo0bits+0x56>
 800afdc:	6013      	str	r3, [r2, #0]
 800afde:	4770      	bx	lr
 800afe0:	2000      	movs	r0, #0
 800afe2:	4770      	bx	lr
 800afe4:	2020      	movs	r0, #32
 800afe6:	4770      	bx	lr

0800afe8 <__i2b>:
 800afe8:	b510      	push	{r4, lr}
 800afea:	460c      	mov	r4, r1
 800afec:	2101      	movs	r1, #1
 800afee:	f7ff febd 	bl	800ad6c <_Balloc>
 800aff2:	4602      	mov	r2, r0
 800aff4:	b928      	cbnz	r0, 800b002 <__i2b+0x1a>
 800aff6:	f240 1145 	movw	r1, #325	@ 0x145
 800affa:	4b04      	ldr	r3, [pc, #16]	@ (800b00c <__i2b+0x24>)
 800affc:	4804      	ldr	r0, [pc, #16]	@ (800b010 <__i2b+0x28>)
 800affe:	f001 fdd5 	bl	800cbac <__assert_func>
 800b002:	2301      	movs	r3, #1
 800b004:	6144      	str	r4, [r0, #20]
 800b006:	6103      	str	r3, [r0, #16]
 800b008:	bd10      	pop	{r4, pc}
 800b00a:	bf00      	nop
 800b00c:	0800ec4d 	.word	0x0800ec4d
 800b010:	0800ec5e 	.word	0x0800ec5e

0800b014 <__multiply>:
 800b014:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b018:	4614      	mov	r4, r2
 800b01a:	690a      	ldr	r2, [r1, #16]
 800b01c:	6923      	ldr	r3, [r4, #16]
 800b01e:	460f      	mov	r7, r1
 800b020:	429a      	cmp	r2, r3
 800b022:	bfa2      	ittt	ge
 800b024:	4623      	movge	r3, r4
 800b026:	460c      	movge	r4, r1
 800b028:	461f      	movge	r7, r3
 800b02a:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800b02e:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800b032:	68a3      	ldr	r3, [r4, #8]
 800b034:	6861      	ldr	r1, [r4, #4]
 800b036:	eb0a 0609 	add.w	r6, sl, r9
 800b03a:	42b3      	cmp	r3, r6
 800b03c:	b085      	sub	sp, #20
 800b03e:	bfb8      	it	lt
 800b040:	3101      	addlt	r1, #1
 800b042:	f7ff fe93 	bl	800ad6c <_Balloc>
 800b046:	b930      	cbnz	r0, 800b056 <__multiply+0x42>
 800b048:	4602      	mov	r2, r0
 800b04a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800b04e:	4b43      	ldr	r3, [pc, #268]	@ (800b15c <__multiply+0x148>)
 800b050:	4843      	ldr	r0, [pc, #268]	@ (800b160 <__multiply+0x14c>)
 800b052:	f001 fdab 	bl	800cbac <__assert_func>
 800b056:	f100 0514 	add.w	r5, r0, #20
 800b05a:	462b      	mov	r3, r5
 800b05c:	2200      	movs	r2, #0
 800b05e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b062:	4543      	cmp	r3, r8
 800b064:	d321      	bcc.n	800b0aa <__multiply+0x96>
 800b066:	f107 0114 	add.w	r1, r7, #20
 800b06a:	f104 0214 	add.w	r2, r4, #20
 800b06e:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800b072:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800b076:	9302      	str	r3, [sp, #8]
 800b078:	1b13      	subs	r3, r2, r4
 800b07a:	3b15      	subs	r3, #21
 800b07c:	f023 0303 	bic.w	r3, r3, #3
 800b080:	3304      	adds	r3, #4
 800b082:	f104 0715 	add.w	r7, r4, #21
 800b086:	42ba      	cmp	r2, r7
 800b088:	bf38      	it	cc
 800b08a:	2304      	movcc	r3, #4
 800b08c:	9301      	str	r3, [sp, #4]
 800b08e:	9b02      	ldr	r3, [sp, #8]
 800b090:	9103      	str	r1, [sp, #12]
 800b092:	428b      	cmp	r3, r1
 800b094:	d80c      	bhi.n	800b0b0 <__multiply+0x9c>
 800b096:	2e00      	cmp	r6, #0
 800b098:	dd03      	ble.n	800b0a2 <__multiply+0x8e>
 800b09a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d05a      	beq.n	800b158 <__multiply+0x144>
 800b0a2:	6106      	str	r6, [r0, #16]
 800b0a4:	b005      	add	sp, #20
 800b0a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0aa:	f843 2b04 	str.w	r2, [r3], #4
 800b0ae:	e7d8      	b.n	800b062 <__multiply+0x4e>
 800b0b0:	f8b1 a000 	ldrh.w	sl, [r1]
 800b0b4:	f1ba 0f00 	cmp.w	sl, #0
 800b0b8:	d023      	beq.n	800b102 <__multiply+0xee>
 800b0ba:	46a9      	mov	r9, r5
 800b0bc:	f04f 0c00 	mov.w	ip, #0
 800b0c0:	f104 0e14 	add.w	lr, r4, #20
 800b0c4:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b0c8:	f8d9 3000 	ldr.w	r3, [r9]
 800b0cc:	fa1f fb87 	uxth.w	fp, r7
 800b0d0:	b29b      	uxth	r3, r3
 800b0d2:	fb0a 330b 	mla	r3, sl, fp, r3
 800b0d6:	4463      	add	r3, ip
 800b0d8:	f8d9 c000 	ldr.w	ip, [r9]
 800b0dc:	0c3f      	lsrs	r7, r7, #16
 800b0de:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800b0e2:	fb0a c707 	mla	r7, sl, r7, ip
 800b0e6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800b0ea:	b29b      	uxth	r3, r3
 800b0ec:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b0f0:	4572      	cmp	r2, lr
 800b0f2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b0f6:	f849 3b04 	str.w	r3, [r9], #4
 800b0fa:	d8e3      	bhi.n	800b0c4 <__multiply+0xb0>
 800b0fc:	9b01      	ldr	r3, [sp, #4]
 800b0fe:	f845 c003 	str.w	ip, [r5, r3]
 800b102:	9b03      	ldr	r3, [sp, #12]
 800b104:	3104      	adds	r1, #4
 800b106:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800b10a:	f1b9 0f00 	cmp.w	r9, #0
 800b10e:	d021      	beq.n	800b154 <__multiply+0x140>
 800b110:	46ae      	mov	lr, r5
 800b112:	f04f 0a00 	mov.w	sl, #0
 800b116:	682b      	ldr	r3, [r5, #0]
 800b118:	f104 0c14 	add.w	ip, r4, #20
 800b11c:	f8bc b000 	ldrh.w	fp, [ip]
 800b120:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800b124:	b29b      	uxth	r3, r3
 800b126:	fb09 770b 	mla	r7, r9, fp, r7
 800b12a:	4457      	add	r7, sl
 800b12c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b130:	f84e 3b04 	str.w	r3, [lr], #4
 800b134:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b138:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b13c:	f8be 3000 	ldrh.w	r3, [lr]
 800b140:	4562      	cmp	r2, ip
 800b142:	fb09 330a 	mla	r3, r9, sl, r3
 800b146:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800b14a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b14e:	d8e5      	bhi.n	800b11c <__multiply+0x108>
 800b150:	9f01      	ldr	r7, [sp, #4]
 800b152:	51eb      	str	r3, [r5, r7]
 800b154:	3504      	adds	r5, #4
 800b156:	e79a      	b.n	800b08e <__multiply+0x7a>
 800b158:	3e01      	subs	r6, #1
 800b15a:	e79c      	b.n	800b096 <__multiply+0x82>
 800b15c:	0800ec4d 	.word	0x0800ec4d
 800b160:	0800ec5e 	.word	0x0800ec5e

0800b164 <__pow5mult>:
 800b164:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b168:	4615      	mov	r5, r2
 800b16a:	f012 0203 	ands.w	r2, r2, #3
 800b16e:	4607      	mov	r7, r0
 800b170:	460e      	mov	r6, r1
 800b172:	d007      	beq.n	800b184 <__pow5mult+0x20>
 800b174:	4c25      	ldr	r4, [pc, #148]	@ (800b20c <__pow5mult+0xa8>)
 800b176:	3a01      	subs	r2, #1
 800b178:	2300      	movs	r3, #0
 800b17a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b17e:	f7ff fe57 	bl	800ae30 <__multadd>
 800b182:	4606      	mov	r6, r0
 800b184:	10ad      	asrs	r5, r5, #2
 800b186:	d03d      	beq.n	800b204 <__pow5mult+0xa0>
 800b188:	69fc      	ldr	r4, [r7, #28]
 800b18a:	b97c      	cbnz	r4, 800b1ac <__pow5mult+0x48>
 800b18c:	2010      	movs	r0, #16
 800b18e:	f7ff fd37 	bl	800ac00 <malloc>
 800b192:	4602      	mov	r2, r0
 800b194:	61f8      	str	r0, [r7, #28]
 800b196:	b928      	cbnz	r0, 800b1a4 <__pow5mult+0x40>
 800b198:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800b19c:	4b1c      	ldr	r3, [pc, #112]	@ (800b210 <__pow5mult+0xac>)
 800b19e:	481d      	ldr	r0, [pc, #116]	@ (800b214 <__pow5mult+0xb0>)
 800b1a0:	f001 fd04 	bl	800cbac <__assert_func>
 800b1a4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b1a8:	6004      	str	r4, [r0, #0]
 800b1aa:	60c4      	str	r4, [r0, #12]
 800b1ac:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800b1b0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b1b4:	b94c      	cbnz	r4, 800b1ca <__pow5mult+0x66>
 800b1b6:	f240 2171 	movw	r1, #625	@ 0x271
 800b1ba:	4638      	mov	r0, r7
 800b1bc:	f7ff ff14 	bl	800afe8 <__i2b>
 800b1c0:	2300      	movs	r3, #0
 800b1c2:	4604      	mov	r4, r0
 800b1c4:	f8c8 0008 	str.w	r0, [r8, #8]
 800b1c8:	6003      	str	r3, [r0, #0]
 800b1ca:	f04f 0900 	mov.w	r9, #0
 800b1ce:	07eb      	lsls	r3, r5, #31
 800b1d0:	d50a      	bpl.n	800b1e8 <__pow5mult+0x84>
 800b1d2:	4631      	mov	r1, r6
 800b1d4:	4622      	mov	r2, r4
 800b1d6:	4638      	mov	r0, r7
 800b1d8:	f7ff ff1c 	bl	800b014 <__multiply>
 800b1dc:	4680      	mov	r8, r0
 800b1de:	4631      	mov	r1, r6
 800b1e0:	4638      	mov	r0, r7
 800b1e2:	f7ff fe03 	bl	800adec <_Bfree>
 800b1e6:	4646      	mov	r6, r8
 800b1e8:	106d      	asrs	r5, r5, #1
 800b1ea:	d00b      	beq.n	800b204 <__pow5mult+0xa0>
 800b1ec:	6820      	ldr	r0, [r4, #0]
 800b1ee:	b938      	cbnz	r0, 800b200 <__pow5mult+0x9c>
 800b1f0:	4622      	mov	r2, r4
 800b1f2:	4621      	mov	r1, r4
 800b1f4:	4638      	mov	r0, r7
 800b1f6:	f7ff ff0d 	bl	800b014 <__multiply>
 800b1fa:	6020      	str	r0, [r4, #0]
 800b1fc:	f8c0 9000 	str.w	r9, [r0]
 800b200:	4604      	mov	r4, r0
 800b202:	e7e4      	b.n	800b1ce <__pow5mult+0x6a>
 800b204:	4630      	mov	r0, r6
 800b206:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b20a:	bf00      	nop
 800b20c:	0800ecb8 	.word	0x0800ecb8
 800b210:	0800ebde 	.word	0x0800ebde
 800b214:	0800ec5e 	.word	0x0800ec5e

0800b218 <__lshift>:
 800b218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b21c:	460c      	mov	r4, r1
 800b21e:	4607      	mov	r7, r0
 800b220:	4691      	mov	r9, r2
 800b222:	6923      	ldr	r3, [r4, #16]
 800b224:	6849      	ldr	r1, [r1, #4]
 800b226:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b22a:	68a3      	ldr	r3, [r4, #8]
 800b22c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b230:	f108 0601 	add.w	r6, r8, #1
 800b234:	42b3      	cmp	r3, r6
 800b236:	db0b      	blt.n	800b250 <__lshift+0x38>
 800b238:	4638      	mov	r0, r7
 800b23a:	f7ff fd97 	bl	800ad6c <_Balloc>
 800b23e:	4605      	mov	r5, r0
 800b240:	b948      	cbnz	r0, 800b256 <__lshift+0x3e>
 800b242:	4602      	mov	r2, r0
 800b244:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800b248:	4b27      	ldr	r3, [pc, #156]	@ (800b2e8 <__lshift+0xd0>)
 800b24a:	4828      	ldr	r0, [pc, #160]	@ (800b2ec <__lshift+0xd4>)
 800b24c:	f001 fcae 	bl	800cbac <__assert_func>
 800b250:	3101      	adds	r1, #1
 800b252:	005b      	lsls	r3, r3, #1
 800b254:	e7ee      	b.n	800b234 <__lshift+0x1c>
 800b256:	2300      	movs	r3, #0
 800b258:	f100 0114 	add.w	r1, r0, #20
 800b25c:	f100 0210 	add.w	r2, r0, #16
 800b260:	4618      	mov	r0, r3
 800b262:	4553      	cmp	r3, sl
 800b264:	db33      	blt.n	800b2ce <__lshift+0xb6>
 800b266:	6920      	ldr	r0, [r4, #16]
 800b268:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b26c:	f104 0314 	add.w	r3, r4, #20
 800b270:	f019 091f 	ands.w	r9, r9, #31
 800b274:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b278:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b27c:	d02b      	beq.n	800b2d6 <__lshift+0xbe>
 800b27e:	468a      	mov	sl, r1
 800b280:	2200      	movs	r2, #0
 800b282:	f1c9 0e20 	rsb	lr, r9, #32
 800b286:	6818      	ldr	r0, [r3, #0]
 800b288:	fa00 f009 	lsl.w	r0, r0, r9
 800b28c:	4310      	orrs	r0, r2
 800b28e:	f84a 0b04 	str.w	r0, [sl], #4
 800b292:	f853 2b04 	ldr.w	r2, [r3], #4
 800b296:	459c      	cmp	ip, r3
 800b298:	fa22 f20e 	lsr.w	r2, r2, lr
 800b29c:	d8f3      	bhi.n	800b286 <__lshift+0x6e>
 800b29e:	ebac 0304 	sub.w	r3, ip, r4
 800b2a2:	3b15      	subs	r3, #21
 800b2a4:	f023 0303 	bic.w	r3, r3, #3
 800b2a8:	3304      	adds	r3, #4
 800b2aa:	f104 0015 	add.w	r0, r4, #21
 800b2ae:	4584      	cmp	ip, r0
 800b2b0:	bf38      	it	cc
 800b2b2:	2304      	movcc	r3, #4
 800b2b4:	50ca      	str	r2, [r1, r3]
 800b2b6:	b10a      	cbz	r2, 800b2bc <__lshift+0xa4>
 800b2b8:	f108 0602 	add.w	r6, r8, #2
 800b2bc:	3e01      	subs	r6, #1
 800b2be:	4638      	mov	r0, r7
 800b2c0:	4621      	mov	r1, r4
 800b2c2:	612e      	str	r6, [r5, #16]
 800b2c4:	f7ff fd92 	bl	800adec <_Bfree>
 800b2c8:	4628      	mov	r0, r5
 800b2ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b2ce:	f842 0f04 	str.w	r0, [r2, #4]!
 800b2d2:	3301      	adds	r3, #1
 800b2d4:	e7c5      	b.n	800b262 <__lshift+0x4a>
 800b2d6:	3904      	subs	r1, #4
 800b2d8:	f853 2b04 	ldr.w	r2, [r3], #4
 800b2dc:	459c      	cmp	ip, r3
 800b2de:	f841 2f04 	str.w	r2, [r1, #4]!
 800b2e2:	d8f9      	bhi.n	800b2d8 <__lshift+0xc0>
 800b2e4:	e7ea      	b.n	800b2bc <__lshift+0xa4>
 800b2e6:	bf00      	nop
 800b2e8:	0800ec4d 	.word	0x0800ec4d
 800b2ec:	0800ec5e 	.word	0x0800ec5e

0800b2f0 <__mcmp>:
 800b2f0:	4603      	mov	r3, r0
 800b2f2:	690a      	ldr	r2, [r1, #16]
 800b2f4:	6900      	ldr	r0, [r0, #16]
 800b2f6:	b530      	push	{r4, r5, lr}
 800b2f8:	1a80      	subs	r0, r0, r2
 800b2fa:	d10e      	bne.n	800b31a <__mcmp+0x2a>
 800b2fc:	3314      	adds	r3, #20
 800b2fe:	3114      	adds	r1, #20
 800b300:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b304:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b308:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b30c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b310:	4295      	cmp	r5, r2
 800b312:	d003      	beq.n	800b31c <__mcmp+0x2c>
 800b314:	d205      	bcs.n	800b322 <__mcmp+0x32>
 800b316:	f04f 30ff 	mov.w	r0, #4294967295
 800b31a:	bd30      	pop	{r4, r5, pc}
 800b31c:	42a3      	cmp	r3, r4
 800b31e:	d3f3      	bcc.n	800b308 <__mcmp+0x18>
 800b320:	e7fb      	b.n	800b31a <__mcmp+0x2a>
 800b322:	2001      	movs	r0, #1
 800b324:	e7f9      	b.n	800b31a <__mcmp+0x2a>
	...

0800b328 <__mdiff>:
 800b328:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b32c:	4689      	mov	r9, r1
 800b32e:	4606      	mov	r6, r0
 800b330:	4611      	mov	r1, r2
 800b332:	4648      	mov	r0, r9
 800b334:	4614      	mov	r4, r2
 800b336:	f7ff ffdb 	bl	800b2f0 <__mcmp>
 800b33a:	1e05      	subs	r5, r0, #0
 800b33c:	d112      	bne.n	800b364 <__mdiff+0x3c>
 800b33e:	4629      	mov	r1, r5
 800b340:	4630      	mov	r0, r6
 800b342:	f7ff fd13 	bl	800ad6c <_Balloc>
 800b346:	4602      	mov	r2, r0
 800b348:	b928      	cbnz	r0, 800b356 <__mdiff+0x2e>
 800b34a:	f240 2137 	movw	r1, #567	@ 0x237
 800b34e:	4b3e      	ldr	r3, [pc, #248]	@ (800b448 <__mdiff+0x120>)
 800b350:	483e      	ldr	r0, [pc, #248]	@ (800b44c <__mdiff+0x124>)
 800b352:	f001 fc2b 	bl	800cbac <__assert_func>
 800b356:	2301      	movs	r3, #1
 800b358:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b35c:	4610      	mov	r0, r2
 800b35e:	b003      	add	sp, #12
 800b360:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b364:	bfbc      	itt	lt
 800b366:	464b      	movlt	r3, r9
 800b368:	46a1      	movlt	r9, r4
 800b36a:	4630      	mov	r0, r6
 800b36c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800b370:	bfba      	itte	lt
 800b372:	461c      	movlt	r4, r3
 800b374:	2501      	movlt	r5, #1
 800b376:	2500      	movge	r5, #0
 800b378:	f7ff fcf8 	bl	800ad6c <_Balloc>
 800b37c:	4602      	mov	r2, r0
 800b37e:	b918      	cbnz	r0, 800b388 <__mdiff+0x60>
 800b380:	f240 2145 	movw	r1, #581	@ 0x245
 800b384:	4b30      	ldr	r3, [pc, #192]	@ (800b448 <__mdiff+0x120>)
 800b386:	e7e3      	b.n	800b350 <__mdiff+0x28>
 800b388:	f100 0b14 	add.w	fp, r0, #20
 800b38c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800b390:	f109 0310 	add.w	r3, r9, #16
 800b394:	60c5      	str	r5, [r0, #12]
 800b396:	f04f 0c00 	mov.w	ip, #0
 800b39a:	f109 0514 	add.w	r5, r9, #20
 800b39e:	46d9      	mov	r9, fp
 800b3a0:	6926      	ldr	r6, [r4, #16]
 800b3a2:	f104 0e14 	add.w	lr, r4, #20
 800b3a6:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800b3aa:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800b3ae:	9301      	str	r3, [sp, #4]
 800b3b0:	9b01      	ldr	r3, [sp, #4]
 800b3b2:	f85e 0b04 	ldr.w	r0, [lr], #4
 800b3b6:	f853 af04 	ldr.w	sl, [r3, #4]!
 800b3ba:	b281      	uxth	r1, r0
 800b3bc:	9301      	str	r3, [sp, #4]
 800b3be:	fa1f f38a 	uxth.w	r3, sl
 800b3c2:	1a5b      	subs	r3, r3, r1
 800b3c4:	0c00      	lsrs	r0, r0, #16
 800b3c6:	4463      	add	r3, ip
 800b3c8:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800b3cc:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800b3d0:	b29b      	uxth	r3, r3
 800b3d2:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800b3d6:	4576      	cmp	r6, lr
 800b3d8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b3dc:	f849 3b04 	str.w	r3, [r9], #4
 800b3e0:	d8e6      	bhi.n	800b3b0 <__mdiff+0x88>
 800b3e2:	1b33      	subs	r3, r6, r4
 800b3e4:	3b15      	subs	r3, #21
 800b3e6:	f023 0303 	bic.w	r3, r3, #3
 800b3ea:	3415      	adds	r4, #21
 800b3ec:	3304      	adds	r3, #4
 800b3ee:	42a6      	cmp	r6, r4
 800b3f0:	bf38      	it	cc
 800b3f2:	2304      	movcc	r3, #4
 800b3f4:	441d      	add	r5, r3
 800b3f6:	445b      	add	r3, fp
 800b3f8:	461e      	mov	r6, r3
 800b3fa:	462c      	mov	r4, r5
 800b3fc:	4544      	cmp	r4, r8
 800b3fe:	d30e      	bcc.n	800b41e <__mdiff+0xf6>
 800b400:	f108 0103 	add.w	r1, r8, #3
 800b404:	1b49      	subs	r1, r1, r5
 800b406:	f021 0103 	bic.w	r1, r1, #3
 800b40a:	3d03      	subs	r5, #3
 800b40c:	45a8      	cmp	r8, r5
 800b40e:	bf38      	it	cc
 800b410:	2100      	movcc	r1, #0
 800b412:	440b      	add	r3, r1
 800b414:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b418:	b199      	cbz	r1, 800b442 <__mdiff+0x11a>
 800b41a:	6117      	str	r7, [r2, #16]
 800b41c:	e79e      	b.n	800b35c <__mdiff+0x34>
 800b41e:	46e6      	mov	lr, ip
 800b420:	f854 1b04 	ldr.w	r1, [r4], #4
 800b424:	fa1f fc81 	uxth.w	ip, r1
 800b428:	44f4      	add	ip, lr
 800b42a:	0c08      	lsrs	r0, r1, #16
 800b42c:	4471      	add	r1, lr
 800b42e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800b432:	b289      	uxth	r1, r1
 800b434:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800b438:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b43c:	f846 1b04 	str.w	r1, [r6], #4
 800b440:	e7dc      	b.n	800b3fc <__mdiff+0xd4>
 800b442:	3f01      	subs	r7, #1
 800b444:	e7e6      	b.n	800b414 <__mdiff+0xec>
 800b446:	bf00      	nop
 800b448:	0800ec4d 	.word	0x0800ec4d
 800b44c:	0800ec5e 	.word	0x0800ec5e

0800b450 <__ulp>:
 800b450:	4b0e      	ldr	r3, [pc, #56]	@ (800b48c <__ulp+0x3c>)
 800b452:	400b      	ands	r3, r1
 800b454:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800b458:	2b00      	cmp	r3, #0
 800b45a:	dc08      	bgt.n	800b46e <__ulp+0x1e>
 800b45c:	425b      	negs	r3, r3
 800b45e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800b462:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b466:	da04      	bge.n	800b472 <__ulp+0x22>
 800b468:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800b46c:	4113      	asrs	r3, r2
 800b46e:	2200      	movs	r2, #0
 800b470:	e008      	b.n	800b484 <__ulp+0x34>
 800b472:	f1a2 0314 	sub.w	r3, r2, #20
 800b476:	2b1e      	cmp	r3, #30
 800b478:	bfd6      	itet	le
 800b47a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800b47e:	2201      	movgt	r2, #1
 800b480:	40da      	lsrle	r2, r3
 800b482:	2300      	movs	r3, #0
 800b484:	4619      	mov	r1, r3
 800b486:	4610      	mov	r0, r2
 800b488:	4770      	bx	lr
 800b48a:	bf00      	nop
 800b48c:	7ff00000 	.word	0x7ff00000

0800b490 <__b2d>:
 800b490:	6902      	ldr	r2, [r0, #16]
 800b492:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b494:	f100 0614 	add.w	r6, r0, #20
 800b498:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 800b49c:	f852 4c04 	ldr.w	r4, [r2, #-4]
 800b4a0:	4f1e      	ldr	r7, [pc, #120]	@ (800b51c <__b2d+0x8c>)
 800b4a2:	4620      	mov	r0, r4
 800b4a4:	f7ff fd54 	bl	800af50 <__hi0bits>
 800b4a8:	4603      	mov	r3, r0
 800b4aa:	f1c0 0020 	rsb	r0, r0, #32
 800b4ae:	2b0a      	cmp	r3, #10
 800b4b0:	f1a2 0504 	sub.w	r5, r2, #4
 800b4b4:	6008      	str	r0, [r1, #0]
 800b4b6:	dc12      	bgt.n	800b4de <__b2d+0x4e>
 800b4b8:	42ae      	cmp	r6, r5
 800b4ba:	bf2c      	ite	cs
 800b4bc:	2200      	movcs	r2, #0
 800b4be:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800b4c2:	f1c3 0c0b 	rsb	ip, r3, #11
 800b4c6:	3315      	adds	r3, #21
 800b4c8:	fa24 fe0c 	lsr.w	lr, r4, ip
 800b4cc:	fa04 f303 	lsl.w	r3, r4, r3
 800b4d0:	fa22 f20c 	lsr.w	r2, r2, ip
 800b4d4:	ea4e 0107 	orr.w	r1, lr, r7
 800b4d8:	431a      	orrs	r2, r3
 800b4da:	4610      	mov	r0, r2
 800b4dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b4de:	42ae      	cmp	r6, r5
 800b4e0:	bf36      	itet	cc
 800b4e2:	f1a2 0508 	subcc.w	r5, r2, #8
 800b4e6:	2200      	movcs	r2, #0
 800b4e8:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800b4ec:	3b0b      	subs	r3, #11
 800b4ee:	d012      	beq.n	800b516 <__b2d+0x86>
 800b4f0:	f1c3 0720 	rsb	r7, r3, #32
 800b4f4:	fa22 f107 	lsr.w	r1, r2, r7
 800b4f8:	409c      	lsls	r4, r3
 800b4fa:	430c      	orrs	r4, r1
 800b4fc:	42b5      	cmp	r5, r6
 800b4fe:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 800b502:	bf94      	ite	ls
 800b504:	2400      	movls	r4, #0
 800b506:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 800b50a:	409a      	lsls	r2, r3
 800b50c:	40fc      	lsrs	r4, r7
 800b50e:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800b512:	4322      	orrs	r2, r4
 800b514:	e7e1      	b.n	800b4da <__b2d+0x4a>
 800b516:	ea44 0107 	orr.w	r1, r4, r7
 800b51a:	e7de      	b.n	800b4da <__b2d+0x4a>
 800b51c:	3ff00000 	.word	0x3ff00000

0800b520 <__d2b>:
 800b520:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800b524:	2101      	movs	r1, #1
 800b526:	4690      	mov	r8, r2
 800b528:	4699      	mov	r9, r3
 800b52a:	9e08      	ldr	r6, [sp, #32]
 800b52c:	f7ff fc1e 	bl	800ad6c <_Balloc>
 800b530:	4604      	mov	r4, r0
 800b532:	b930      	cbnz	r0, 800b542 <__d2b+0x22>
 800b534:	4602      	mov	r2, r0
 800b536:	f240 310f 	movw	r1, #783	@ 0x30f
 800b53a:	4b23      	ldr	r3, [pc, #140]	@ (800b5c8 <__d2b+0xa8>)
 800b53c:	4823      	ldr	r0, [pc, #140]	@ (800b5cc <__d2b+0xac>)
 800b53e:	f001 fb35 	bl	800cbac <__assert_func>
 800b542:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b546:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b54a:	b10d      	cbz	r5, 800b550 <__d2b+0x30>
 800b54c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b550:	9301      	str	r3, [sp, #4]
 800b552:	f1b8 0300 	subs.w	r3, r8, #0
 800b556:	d024      	beq.n	800b5a2 <__d2b+0x82>
 800b558:	4668      	mov	r0, sp
 800b55a:	9300      	str	r3, [sp, #0]
 800b55c:	f7ff fd17 	bl	800af8e <__lo0bits>
 800b560:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b564:	b1d8      	cbz	r0, 800b59e <__d2b+0x7e>
 800b566:	f1c0 0320 	rsb	r3, r0, #32
 800b56a:	fa02 f303 	lsl.w	r3, r2, r3
 800b56e:	430b      	orrs	r3, r1
 800b570:	40c2      	lsrs	r2, r0
 800b572:	6163      	str	r3, [r4, #20]
 800b574:	9201      	str	r2, [sp, #4]
 800b576:	9b01      	ldr	r3, [sp, #4]
 800b578:	2b00      	cmp	r3, #0
 800b57a:	bf0c      	ite	eq
 800b57c:	2201      	moveq	r2, #1
 800b57e:	2202      	movne	r2, #2
 800b580:	61a3      	str	r3, [r4, #24]
 800b582:	6122      	str	r2, [r4, #16]
 800b584:	b1ad      	cbz	r5, 800b5b2 <__d2b+0x92>
 800b586:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800b58a:	4405      	add	r5, r0
 800b58c:	6035      	str	r5, [r6, #0]
 800b58e:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800b592:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b594:	6018      	str	r0, [r3, #0]
 800b596:	4620      	mov	r0, r4
 800b598:	b002      	add	sp, #8
 800b59a:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800b59e:	6161      	str	r1, [r4, #20]
 800b5a0:	e7e9      	b.n	800b576 <__d2b+0x56>
 800b5a2:	a801      	add	r0, sp, #4
 800b5a4:	f7ff fcf3 	bl	800af8e <__lo0bits>
 800b5a8:	9b01      	ldr	r3, [sp, #4]
 800b5aa:	2201      	movs	r2, #1
 800b5ac:	6163      	str	r3, [r4, #20]
 800b5ae:	3020      	adds	r0, #32
 800b5b0:	e7e7      	b.n	800b582 <__d2b+0x62>
 800b5b2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800b5b6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b5ba:	6030      	str	r0, [r6, #0]
 800b5bc:	6918      	ldr	r0, [r3, #16]
 800b5be:	f7ff fcc7 	bl	800af50 <__hi0bits>
 800b5c2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b5c6:	e7e4      	b.n	800b592 <__d2b+0x72>
 800b5c8:	0800ec4d 	.word	0x0800ec4d
 800b5cc:	0800ec5e 	.word	0x0800ec5e

0800b5d0 <__ratio>:
 800b5d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5d4:	b085      	sub	sp, #20
 800b5d6:	e9cd 1000 	strd	r1, r0, [sp]
 800b5da:	a902      	add	r1, sp, #8
 800b5dc:	f7ff ff58 	bl	800b490 <__b2d>
 800b5e0:	468b      	mov	fp, r1
 800b5e2:	4606      	mov	r6, r0
 800b5e4:	460f      	mov	r7, r1
 800b5e6:	9800      	ldr	r0, [sp, #0]
 800b5e8:	a903      	add	r1, sp, #12
 800b5ea:	f7ff ff51 	bl	800b490 <__b2d>
 800b5ee:	460d      	mov	r5, r1
 800b5f0:	9b01      	ldr	r3, [sp, #4]
 800b5f2:	4689      	mov	r9, r1
 800b5f4:	6919      	ldr	r1, [r3, #16]
 800b5f6:	9b00      	ldr	r3, [sp, #0]
 800b5f8:	4604      	mov	r4, r0
 800b5fa:	691b      	ldr	r3, [r3, #16]
 800b5fc:	4630      	mov	r0, r6
 800b5fe:	1ac9      	subs	r1, r1, r3
 800b600:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800b604:	1a9b      	subs	r3, r3, r2
 800b606:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	bfcd      	iteet	gt
 800b60e:	463a      	movgt	r2, r7
 800b610:	462a      	movle	r2, r5
 800b612:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b616:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800b61a:	bfd8      	it	le
 800b61c:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800b620:	464b      	mov	r3, r9
 800b622:	4622      	mov	r2, r4
 800b624:	4659      	mov	r1, fp
 800b626:	f7f5 f881 	bl	800072c <__aeabi_ddiv>
 800b62a:	b005      	add	sp, #20
 800b62c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b630 <__copybits>:
 800b630:	3901      	subs	r1, #1
 800b632:	b570      	push	{r4, r5, r6, lr}
 800b634:	1149      	asrs	r1, r1, #5
 800b636:	6914      	ldr	r4, [r2, #16]
 800b638:	3101      	adds	r1, #1
 800b63a:	f102 0314 	add.w	r3, r2, #20
 800b63e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b642:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b646:	1f05      	subs	r5, r0, #4
 800b648:	42a3      	cmp	r3, r4
 800b64a:	d30c      	bcc.n	800b666 <__copybits+0x36>
 800b64c:	1aa3      	subs	r3, r4, r2
 800b64e:	3b11      	subs	r3, #17
 800b650:	f023 0303 	bic.w	r3, r3, #3
 800b654:	3211      	adds	r2, #17
 800b656:	42a2      	cmp	r2, r4
 800b658:	bf88      	it	hi
 800b65a:	2300      	movhi	r3, #0
 800b65c:	4418      	add	r0, r3
 800b65e:	2300      	movs	r3, #0
 800b660:	4288      	cmp	r0, r1
 800b662:	d305      	bcc.n	800b670 <__copybits+0x40>
 800b664:	bd70      	pop	{r4, r5, r6, pc}
 800b666:	f853 6b04 	ldr.w	r6, [r3], #4
 800b66a:	f845 6f04 	str.w	r6, [r5, #4]!
 800b66e:	e7eb      	b.n	800b648 <__copybits+0x18>
 800b670:	f840 3b04 	str.w	r3, [r0], #4
 800b674:	e7f4      	b.n	800b660 <__copybits+0x30>

0800b676 <__any_on>:
 800b676:	f100 0214 	add.w	r2, r0, #20
 800b67a:	6900      	ldr	r0, [r0, #16]
 800b67c:	114b      	asrs	r3, r1, #5
 800b67e:	4298      	cmp	r0, r3
 800b680:	b510      	push	{r4, lr}
 800b682:	db11      	blt.n	800b6a8 <__any_on+0x32>
 800b684:	dd0a      	ble.n	800b69c <__any_on+0x26>
 800b686:	f011 011f 	ands.w	r1, r1, #31
 800b68a:	d007      	beq.n	800b69c <__any_on+0x26>
 800b68c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b690:	fa24 f001 	lsr.w	r0, r4, r1
 800b694:	fa00 f101 	lsl.w	r1, r0, r1
 800b698:	428c      	cmp	r4, r1
 800b69a:	d10b      	bne.n	800b6b4 <__any_on+0x3e>
 800b69c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b6a0:	4293      	cmp	r3, r2
 800b6a2:	d803      	bhi.n	800b6ac <__any_on+0x36>
 800b6a4:	2000      	movs	r0, #0
 800b6a6:	bd10      	pop	{r4, pc}
 800b6a8:	4603      	mov	r3, r0
 800b6aa:	e7f7      	b.n	800b69c <__any_on+0x26>
 800b6ac:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b6b0:	2900      	cmp	r1, #0
 800b6b2:	d0f5      	beq.n	800b6a0 <__any_on+0x2a>
 800b6b4:	2001      	movs	r0, #1
 800b6b6:	e7f6      	b.n	800b6a6 <__any_on+0x30>

0800b6b8 <sulp>:
 800b6b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b6bc:	460f      	mov	r7, r1
 800b6be:	4690      	mov	r8, r2
 800b6c0:	f7ff fec6 	bl	800b450 <__ulp>
 800b6c4:	4604      	mov	r4, r0
 800b6c6:	460d      	mov	r5, r1
 800b6c8:	f1b8 0f00 	cmp.w	r8, #0
 800b6cc:	d011      	beq.n	800b6f2 <sulp+0x3a>
 800b6ce:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800b6d2:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	dd0b      	ble.n	800b6f2 <sulp+0x3a>
 800b6da:	2400      	movs	r4, #0
 800b6dc:	051b      	lsls	r3, r3, #20
 800b6de:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800b6e2:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800b6e6:	4622      	mov	r2, r4
 800b6e8:	462b      	mov	r3, r5
 800b6ea:	f7f4 fef5 	bl	80004d8 <__aeabi_dmul>
 800b6ee:	4604      	mov	r4, r0
 800b6f0:	460d      	mov	r5, r1
 800b6f2:	4620      	mov	r0, r4
 800b6f4:	4629      	mov	r1, r5
 800b6f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b6fa:	0000      	movs	r0, r0
 800b6fc:	0000      	movs	r0, r0
	...

0800b700 <_strtod_l>:
 800b700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b704:	b09f      	sub	sp, #124	@ 0x7c
 800b706:	9217      	str	r2, [sp, #92]	@ 0x5c
 800b708:	2200      	movs	r2, #0
 800b70a:	460c      	mov	r4, r1
 800b70c:	921a      	str	r2, [sp, #104]	@ 0x68
 800b70e:	f04f 0a00 	mov.w	sl, #0
 800b712:	f04f 0b00 	mov.w	fp, #0
 800b716:	460a      	mov	r2, r1
 800b718:	9005      	str	r0, [sp, #20]
 800b71a:	9219      	str	r2, [sp, #100]	@ 0x64
 800b71c:	7811      	ldrb	r1, [r2, #0]
 800b71e:	292b      	cmp	r1, #43	@ 0x2b
 800b720:	d048      	beq.n	800b7b4 <_strtod_l+0xb4>
 800b722:	d836      	bhi.n	800b792 <_strtod_l+0x92>
 800b724:	290d      	cmp	r1, #13
 800b726:	d830      	bhi.n	800b78a <_strtod_l+0x8a>
 800b728:	2908      	cmp	r1, #8
 800b72a:	d830      	bhi.n	800b78e <_strtod_l+0x8e>
 800b72c:	2900      	cmp	r1, #0
 800b72e:	d039      	beq.n	800b7a4 <_strtod_l+0xa4>
 800b730:	2200      	movs	r2, #0
 800b732:	920b      	str	r2, [sp, #44]	@ 0x2c
 800b734:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800b736:	782a      	ldrb	r2, [r5, #0]
 800b738:	2a30      	cmp	r2, #48	@ 0x30
 800b73a:	f040 80b1 	bne.w	800b8a0 <_strtod_l+0x1a0>
 800b73e:	786a      	ldrb	r2, [r5, #1]
 800b740:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b744:	2a58      	cmp	r2, #88	@ 0x58
 800b746:	d16c      	bne.n	800b822 <_strtod_l+0x122>
 800b748:	9302      	str	r3, [sp, #8]
 800b74a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b74c:	4a8e      	ldr	r2, [pc, #568]	@ (800b988 <_strtod_l+0x288>)
 800b74e:	9301      	str	r3, [sp, #4]
 800b750:	ab1a      	add	r3, sp, #104	@ 0x68
 800b752:	9300      	str	r3, [sp, #0]
 800b754:	9805      	ldr	r0, [sp, #20]
 800b756:	ab1b      	add	r3, sp, #108	@ 0x6c
 800b758:	a919      	add	r1, sp, #100	@ 0x64
 800b75a:	f001 fac1 	bl	800cce0 <__gethex>
 800b75e:	f010 060f 	ands.w	r6, r0, #15
 800b762:	4604      	mov	r4, r0
 800b764:	d005      	beq.n	800b772 <_strtod_l+0x72>
 800b766:	2e06      	cmp	r6, #6
 800b768:	d126      	bne.n	800b7b8 <_strtod_l+0xb8>
 800b76a:	2300      	movs	r3, #0
 800b76c:	3501      	adds	r5, #1
 800b76e:	9519      	str	r5, [sp, #100]	@ 0x64
 800b770:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b772:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b774:	2b00      	cmp	r3, #0
 800b776:	f040 8584 	bne.w	800c282 <_strtod_l+0xb82>
 800b77a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b77c:	b1bb      	cbz	r3, 800b7ae <_strtod_l+0xae>
 800b77e:	4650      	mov	r0, sl
 800b780:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 800b784:	b01f      	add	sp, #124	@ 0x7c
 800b786:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b78a:	2920      	cmp	r1, #32
 800b78c:	d1d0      	bne.n	800b730 <_strtod_l+0x30>
 800b78e:	3201      	adds	r2, #1
 800b790:	e7c3      	b.n	800b71a <_strtod_l+0x1a>
 800b792:	292d      	cmp	r1, #45	@ 0x2d
 800b794:	d1cc      	bne.n	800b730 <_strtod_l+0x30>
 800b796:	2101      	movs	r1, #1
 800b798:	910b      	str	r1, [sp, #44]	@ 0x2c
 800b79a:	1c51      	adds	r1, r2, #1
 800b79c:	9119      	str	r1, [sp, #100]	@ 0x64
 800b79e:	7852      	ldrb	r2, [r2, #1]
 800b7a0:	2a00      	cmp	r2, #0
 800b7a2:	d1c7      	bne.n	800b734 <_strtod_l+0x34>
 800b7a4:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b7a6:	9419      	str	r4, [sp, #100]	@ 0x64
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	f040 8568 	bne.w	800c27e <_strtod_l+0xb7e>
 800b7ae:	4650      	mov	r0, sl
 800b7b0:	4659      	mov	r1, fp
 800b7b2:	e7e7      	b.n	800b784 <_strtod_l+0x84>
 800b7b4:	2100      	movs	r1, #0
 800b7b6:	e7ef      	b.n	800b798 <_strtod_l+0x98>
 800b7b8:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800b7ba:	b13a      	cbz	r2, 800b7cc <_strtod_l+0xcc>
 800b7bc:	2135      	movs	r1, #53	@ 0x35
 800b7be:	a81c      	add	r0, sp, #112	@ 0x70
 800b7c0:	f7ff ff36 	bl	800b630 <__copybits>
 800b7c4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b7c6:	9805      	ldr	r0, [sp, #20]
 800b7c8:	f7ff fb10 	bl	800adec <_Bfree>
 800b7cc:	3e01      	subs	r6, #1
 800b7ce:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800b7d0:	2e04      	cmp	r6, #4
 800b7d2:	d806      	bhi.n	800b7e2 <_strtod_l+0xe2>
 800b7d4:	e8df f006 	tbb	[pc, r6]
 800b7d8:	201d0314 	.word	0x201d0314
 800b7dc:	14          	.byte	0x14
 800b7dd:	00          	.byte	0x00
 800b7de:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800b7e2:	05e1      	lsls	r1, r4, #23
 800b7e4:	bf48      	it	mi
 800b7e6:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800b7ea:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b7ee:	0d1b      	lsrs	r3, r3, #20
 800b7f0:	051b      	lsls	r3, r3, #20
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d1bd      	bne.n	800b772 <_strtod_l+0x72>
 800b7f6:	f7fe fb1d 	bl	8009e34 <__errno>
 800b7fa:	2322      	movs	r3, #34	@ 0x22
 800b7fc:	6003      	str	r3, [r0, #0]
 800b7fe:	e7b8      	b.n	800b772 <_strtod_l+0x72>
 800b800:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800b804:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800b808:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800b80c:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800b810:	e7e7      	b.n	800b7e2 <_strtod_l+0xe2>
 800b812:	f8df b178 	ldr.w	fp, [pc, #376]	@ 800b98c <_strtod_l+0x28c>
 800b816:	e7e4      	b.n	800b7e2 <_strtod_l+0xe2>
 800b818:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800b81c:	f04f 3aff 	mov.w	sl, #4294967295
 800b820:	e7df      	b.n	800b7e2 <_strtod_l+0xe2>
 800b822:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b824:	1c5a      	adds	r2, r3, #1
 800b826:	9219      	str	r2, [sp, #100]	@ 0x64
 800b828:	785b      	ldrb	r3, [r3, #1]
 800b82a:	2b30      	cmp	r3, #48	@ 0x30
 800b82c:	d0f9      	beq.n	800b822 <_strtod_l+0x122>
 800b82e:	2b00      	cmp	r3, #0
 800b830:	d09f      	beq.n	800b772 <_strtod_l+0x72>
 800b832:	2301      	movs	r3, #1
 800b834:	9309      	str	r3, [sp, #36]	@ 0x24
 800b836:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b838:	220a      	movs	r2, #10
 800b83a:	930c      	str	r3, [sp, #48]	@ 0x30
 800b83c:	2300      	movs	r3, #0
 800b83e:	461f      	mov	r7, r3
 800b840:	9308      	str	r3, [sp, #32]
 800b842:	930a      	str	r3, [sp, #40]	@ 0x28
 800b844:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800b846:	7805      	ldrb	r5, [r0, #0]
 800b848:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800b84c:	b2d9      	uxtb	r1, r3
 800b84e:	2909      	cmp	r1, #9
 800b850:	d928      	bls.n	800b8a4 <_strtod_l+0x1a4>
 800b852:	2201      	movs	r2, #1
 800b854:	494e      	ldr	r1, [pc, #312]	@ (800b990 <_strtod_l+0x290>)
 800b856:	f001 f981 	bl	800cb5c <strncmp>
 800b85a:	2800      	cmp	r0, #0
 800b85c:	d032      	beq.n	800b8c4 <_strtod_l+0x1c4>
 800b85e:	2000      	movs	r0, #0
 800b860:	462a      	mov	r2, r5
 800b862:	4681      	mov	r9, r0
 800b864:	463d      	mov	r5, r7
 800b866:	4603      	mov	r3, r0
 800b868:	2a65      	cmp	r2, #101	@ 0x65
 800b86a:	d001      	beq.n	800b870 <_strtod_l+0x170>
 800b86c:	2a45      	cmp	r2, #69	@ 0x45
 800b86e:	d114      	bne.n	800b89a <_strtod_l+0x19a>
 800b870:	b91d      	cbnz	r5, 800b87a <_strtod_l+0x17a>
 800b872:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b874:	4302      	orrs	r2, r0
 800b876:	d095      	beq.n	800b7a4 <_strtod_l+0xa4>
 800b878:	2500      	movs	r5, #0
 800b87a:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800b87c:	1c62      	adds	r2, r4, #1
 800b87e:	9219      	str	r2, [sp, #100]	@ 0x64
 800b880:	7862      	ldrb	r2, [r4, #1]
 800b882:	2a2b      	cmp	r2, #43	@ 0x2b
 800b884:	d077      	beq.n	800b976 <_strtod_l+0x276>
 800b886:	2a2d      	cmp	r2, #45	@ 0x2d
 800b888:	d07b      	beq.n	800b982 <_strtod_l+0x282>
 800b88a:	f04f 0c00 	mov.w	ip, #0
 800b88e:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800b892:	2909      	cmp	r1, #9
 800b894:	f240 8082 	bls.w	800b99c <_strtod_l+0x29c>
 800b898:	9419      	str	r4, [sp, #100]	@ 0x64
 800b89a:	f04f 0800 	mov.w	r8, #0
 800b89e:	e0a2      	b.n	800b9e6 <_strtod_l+0x2e6>
 800b8a0:	2300      	movs	r3, #0
 800b8a2:	e7c7      	b.n	800b834 <_strtod_l+0x134>
 800b8a4:	2f08      	cmp	r7, #8
 800b8a6:	bfd5      	itete	le
 800b8a8:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800b8aa:	9908      	ldrgt	r1, [sp, #32]
 800b8ac:	fb02 3301 	mlale	r3, r2, r1, r3
 800b8b0:	fb02 3301 	mlagt	r3, r2, r1, r3
 800b8b4:	f100 0001 	add.w	r0, r0, #1
 800b8b8:	bfd4      	ite	le
 800b8ba:	930a      	strle	r3, [sp, #40]	@ 0x28
 800b8bc:	9308      	strgt	r3, [sp, #32]
 800b8be:	3701      	adds	r7, #1
 800b8c0:	9019      	str	r0, [sp, #100]	@ 0x64
 800b8c2:	e7bf      	b.n	800b844 <_strtod_l+0x144>
 800b8c4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b8c6:	1c5a      	adds	r2, r3, #1
 800b8c8:	9219      	str	r2, [sp, #100]	@ 0x64
 800b8ca:	785a      	ldrb	r2, [r3, #1]
 800b8cc:	b37f      	cbz	r7, 800b92e <_strtod_l+0x22e>
 800b8ce:	4681      	mov	r9, r0
 800b8d0:	463d      	mov	r5, r7
 800b8d2:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800b8d6:	2b09      	cmp	r3, #9
 800b8d8:	d912      	bls.n	800b900 <_strtod_l+0x200>
 800b8da:	2301      	movs	r3, #1
 800b8dc:	e7c4      	b.n	800b868 <_strtod_l+0x168>
 800b8de:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b8e0:	3001      	adds	r0, #1
 800b8e2:	1c5a      	adds	r2, r3, #1
 800b8e4:	9219      	str	r2, [sp, #100]	@ 0x64
 800b8e6:	785a      	ldrb	r2, [r3, #1]
 800b8e8:	2a30      	cmp	r2, #48	@ 0x30
 800b8ea:	d0f8      	beq.n	800b8de <_strtod_l+0x1de>
 800b8ec:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800b8f0:	2b08      	cmp	r3, #8
 800b8f2:	f200 84cb 	bhi.w	800c28c <_strtod_l+0xb8c>
 800b8f6:	4681      	mov	r9, r0
 800b8f8:	2000      	movs	r0, #0
 800b8fa:	4605      	mov	r5, r0
 800b8fc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b8fe:	930c      	str	r3, [sp, #48]	@ 0x30
 800b900:	3a30      	subs	r2, #48	@ 0x30
 800b902:	f100 0301 	add.w	r3, r0, #1
 800b906:	d02a      	beq.n	800b95e <_strtod_l+0x25e>
 800b908:	4499      	add	r9, r3
 800b90a:	210a      	movs	r1, #10
 800b90c:	462b      	mov	r3, r5
 800b90e:	eb00 0c05 	add.w	ip, r0, r5
 800b912:	4563      	cmp	r3, ip
 800b914:	d10d      	bne.n	800b932 <_strtod_l+0x232>
 800b916:	1c69      	adds	r1, r5, #1
 800b918:	4401      	add	r1, r0
 800b91a:	4428      	add	r0, r5
 800b91c:	2808      	cmp	r0, #8
 800b91e:	dc16      	bgt.n	800b94e <_strtod_l+0x24e>
 800b920:	230a      	movs	r3, #10
 800b922:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800b924:	fb03 2300 	mla	r3, r3, r0, r2
 800b928:	930a      	str	r3, [sp, #40]	@ 0x28
 800b92a:	2300      	movs	r3, #0
 800b92c:	e018      	b.n	800b960 <_strtod_l+0x260>
 800b92e:	4638      	mov	r0, r7
 800b930:	e7da      	b.n	800b8e8 <_strtod_l+0x1e8>
 800b932:	2b08      	cmp	r3, #8
 800b934:	f103 0301 	add.w	r3, r3, #1
 800b938:	dc03      	bgt.n	800b942 <_strtod_l+0x242>
 800b93a:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800b93c:	434e      	muls	r6, r1
 800b93e:	960a      	str	r6, [sp, #40]	@ 0x28
 800b940:	e7e7      	b.n	800b912 <_strtod_l+0x212>
 800b942:	2b10      	cmp	r3, #16
 800b944:	bfde      	ittt	le
 800b946:	9e08      	ldrle	r6, [sp, #32]
 800b948:	434e      	mulle	r6, r1
 800b94a:	9608      	strle	r6, [sp, #32]
 800b94c:	e7e1      	b.n	800b912 <_strtod_l+0x212>
 800b94e:	280f      	cmp	r0, #15
 800b950:	dceb      	bgt.n	800b92a <_strtod_l+0x22a>
 800b952:	230a      	movs	r3, #10
 800b954:	9808      	ldr	r0, [sp, #32]
 800b956:	fb03 2300 	mla	r3, r3, r0, r2
 800b95a:	9308      	str	r3, [sp, #32]
 800b95c:	e7e5      	b.n	800b92a <_strtod_l+0x22a>
 800b95e:	4629      	mov	r1, r5
 800b960:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b962:	460d      	mov	r5, r1
 800b964:	1c50      	adds	r0, r2, #1
 800b966:	9019      	str	r0, [sp, #100]	@ 0x64
 800b968:	7852      	ldrb	r2, [r2, #1]
 800b96a:	4618      	mov	r0, r3
 800b96c:	e7b1      	b.n	800b8d2 <_strtod_l+0x1d2>
 800b96e:	f04f 0900 	mov.w	r9, #0
 800b972:	2301      	movs	r3, #1
 800b974:	e77d      	b.n	800b872 <_strtod_l+0x172>
 800b976:	f04f 0c00 	mov.w	ip, #0
 800b97a:	1ca2      	adds	r2, r4, #2
 800b97c:	9219      	str	r2, [sp, #100]	@ 0x64
 800b97e:	78a2      	ldrb	r2, [r4, #2]
 800b980:	e785      	b.n	800b88e <_strtod_l+0x18e>
 800b982:	f04f 0c01 	mov.w	ip, #1
 800b986:	e7f8      	b.n	800b97a <_strtod_l+0x27a>
 800b988:	0800edd0 	.word	0x0800edd0
 800b98c:	7ff00000 	.word	0x7ff00000
 800b990:	0800edb8 	.word	0x0800edb8
 800b994:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b996:	1c51      	adds	r1, r2, #1
 800b998:	9119      	str	r1, [sp, #100]	@ 0x64
 800b99a:	7852      	ldrb	r2, [r2, #1]
 800b99c:	2a30      	cmp	r2, #48	@ 0x30
 800b99e:	d0f9      	beq.n	800b994 <_strtod_l+0x294>
 800b9a0:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800b9a4:	2908      	cmp	r1, #8
 800b9a6:	f63f af78 	bhi.w	800b89a <_strtod_l+0x19a>
 800b9aa:	f04f 080a 	mov.w	r8, #10
 800b9ae:	3a30      	subs	r2, #48	@ 0x30
 800b9b0:	920e      	str	r2, [sp, #56]	@ 0x38
 800b9b2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b9b4:	920f      	str	r2, [sp, #60]	@ 0x3c
 800b9b6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b9b8:	1c56      	adds	r6, r2, #1
 800b9ba:	9619      	str	r6, [sp, #100]	@ 0x64
 800b9bc:	7852      	ldrb	r2, [r2, #1]
 800b9be:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800b9c2:	f1be 0f09 	cmp.w	lr, #9
 800b9c6:	d939      	bls.n	800ba3c <_strtod_l+0x33c>
 800b9c8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800b9ca:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800b9ce:	1a76      	subs	r6, r6, r1
 800b9d0:	2e08      	cmp	r6, #8
 800b9d2:	dc03      	bgt.n	800b9dc <_strtod_l+0x2dc>
 800b9d4:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800b9d6:	4588      	cmp	r8, r1
 800b9d8:	bfa8      	it	ge
 800b9da:	4688      	movge	r8, r1
 800b9dc:	f1bc 0f00 	cmp.w	ip, #0
 800b9e0:	d001      	beq.n	800b9e6 <_strtod_l+0x2e6>
 800b9e2:	f1c8 0800 	rsb	r8, r8, #0
 800b9e6:	2d00      	cmp	r5, #0
 800b9e8:	d14e      	bne.n	800ba88 <_strtod_l+0x388>
 800b9ea:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b9ec:	4308      	orrs	r0, r1
 800b9ee:	f47f aec0 	bne.w	800b772 <_strtod_l+0x72>
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	f47f aed6 	bne.w	800b7a4 <_strtod_l+0xa4>
 800b9f8:	2a69      	cmp	r2, #105	@ 0x69
 800b9fa:	d028      	beq.n	800ba4e <_strtod_l+0x34e>
 800b9fc:	dc25      	bgt.n	800ba4a <_strtod_l+0x34a>
 800b9fe:	2a49      	cmp	r2, #73	@ 0x49
 800ba00:	d025      	beq.n	800ba4e <_strtod_l+0x34e>
 800ba02:	2a4e      	cmp	r2, #78	@ 0x4e
 800ba04:	f47f aece 	bne.w	800b7a4 <_strtod_l+0xa4>
 800ba08:	499a      	ldr	r1, [pc, #616]	@ (800bc74 <_strtod_l+0x574>)
 800ba0a:	a819      	add	r0, sp, #100	@ 0x64
 800ba0c:	f001 fb8a 	bl	800d124 <__match>
 800ba10:	2800      	cmp	r0, #0
 800ba12:	f43f aec7 	beq.w	800b7a4 <_strtod_l+0xa4>
 800ba16:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ba18:	781b      	ldrb	r3, [r3, #0]
 800ba1a:	2b28      	cmp	r3, #40	@ 0x28
 800ba1c:	d12e      	bne.n	800ba7c <_strtod_l+0x37c>
 800ba1e:	4996      	ldr	r1, [pc, #600]	@ (800bc78 <_strtod_l+0x578>)
 800ba20:	aa1c      	add	r2, sp, #112	@ 0x70
 800ba22:	a819      	add	r0, sp, #100	@ 0x64
 800ba24:	f001 fb92 	bl	800d14c <__hexnan>
 800ba28:	2805      	cmp	r0, #5
 800ba2a:	d127      	bne.n	800ba7c <_strtod_l+0x37c>
 800ba2c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800ba2e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800ba32:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800ba36:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800ba3a:	e69a      	b.n	800b772 <_strtod_l+0x72>
 800ba3c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800ba3e:	fb08 2101 	mla	r1, r8, r1, r2
 800ba42:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800ba46:	920e      	str	r2, [sp, #56]	@ 0x38
 800ba48:	e7b5      	b.n	800b9b6 <_strtod_l+0x2b6>
 800ba4a:	2a6e      	cmp	r2, #110	@ 0x6e
 800ba4c:	e7da      	b.n	800ba04 <_strtod_l+0x304>
 800ba4e:	498b      	ldr	r1, [pc, #556]	@ (800bc7c <_strtod_l+0x57c>)
 800ba50:	a819      	add	r0, sp, #100	@ 0x64
 800ba52:	f001 fb67 	bl	800d124 <__match>
 800ba56:	2800      	cmp	r0, #0
 800ba58:	f43f aea4 	beq.w	800b7a4 <_strtod_l+0xa4>
 800ba5c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ba5e:	4988      	ldr	r1, [pc, #544]	@ (800bc80 <_strtod_l+0x580>)
 800ba60:	3b01      	subs	r3, #1
 800ba62:	a819      	add	r0, sp, #100	@ 0x64
 800ba64:	9319      	str	r3, [sp, #100]	@ 0x64
 800ba66:	f001 fb5d 	bl	800d124 <__match>
 800ba6a:	b910      	cbnz	r0, 800ba72 <_strtod_l+0x372>
 800ba6c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ba6e:	3301      	adds	r3, #1
 800ba70:	9319      	str	r3, [sp, #100]	@ 0x64
 800ba72:	f04f 0a00 	mov.w	sl, #0
 800ba76:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 800bc84 <_strtod_l+0x584>
 800ba7a:	e67a      	b.n	800b772 <_strtod_l+0x72>
 800ba7c:	4882      	ldr	r0, [pc, #520]	@ (800bc88 <_strtod_l+0x588>)
 800ba7e:	f001 f88f 	bl	800cba0 <nan>
 800ba82:	4682      	mov	sl, r0
 800ba84:	468b      	mov	fp, r1
 800ba86:	e674      	b.n	800b772 <_strtod_l+0x72>
 800ba88:	eba8 0309 	sub.w	r3, r8, r9
 800ba8c:	2f00      	cmp	r7, #0
 800ba8e:	bf08      	it	eq
 800ba90:	462f      	moveq	r7, r5
 800ba92:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800ba94:	2d10      	cmp	r5, #16
 800ba96:	462c      	mov	r4, r5
 800ba98:	9309      	str	r3, [sp, #36]	@ 0x24
 800ba9a:	bfa8      	it	ge
 800ba9c:	2410      	movge	r4, #16
 800ba9e:	f7f4 fca1 	bl	80003e4 <__aeabi_ui2d>
 800baa2:	2d09      	cmp	r5, #9
 800baa4:	4682      	mov	sl, r0
 800baa6:	468b      	mov	fp, r1
 800baa8:	dc11      	bgt.n	800bace <_strtod_l+0x3ce>
 800baaa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800baac:	2b00      	cmp	r3, #0
 800baae:	f43f ae60 	beq.w	800b772 <_strtod_l+0x72>
 800bab2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bab4:	dd76      	ble.n	800bba4 <_strtod_l+0x4a4>
 800bab6:	2b16      	cmp	r3, #22
 800bab8:	dc5d      	bgt.n	800bb76 <_strtod_l+0x476>
 800baba:	4974      	ldr	r1, [pc, #464]	@ (800bc8c <_strtod_l+0x58c>)
 800babc:	4652      	mov	r2, sl
 800babe:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800bac2:	465b      	mov	r3, fp
 800bac4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bac8:	f7f4 fd06 	bl	80004d8 <__aeabi_dmul>
 800bacc:	e7d9      	b.n	800ba82 <_strtod_l+0x382>
 800bace:	4b6f      	ldr	r3, [pc, #444]	@ (800bc8c <_strtod_l+0x58c>)
 800bad0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800bad4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800bad8:	f7f4 fcfe 	bl	80004d8 <__aeabi_dmul>
 800badc:	4682      	mov	sl, r0
 800bade:	9808      	ldr	r0, [sp, #32]
 800bae0:	468b      	mov	fp, r1
 800bae2:	f7f4 fc7f 	bl	80003e4 <__aeabi_ui2d>
 800bae6:	4602      	mov	r2, r0
 800bae8:	460b      	mov	r3, r1
 800baea:	4650      	mov	r0, sl
 800baec:	4659      	mov	r1, fp
 800baee:	f7f4 fb3d 	bl	800016c <__adddf3>
 800baf2:	2d0f      	cmp	r5, #15
 800baf4:	4682      	mov	sl, r0
 800baf6:	468b      	mov	fp, r1
 800baf8:	ddd7      	ble.n	800baaa <_strtod_l+0x3aa>
 800bafa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bafc:	1b2c      	subs	r4, r5, r4
 800bafe:	441c      	add	r4, r3
 800bb00:	2c00      	cmp	r4, #0
 800bb02:	f340 8096 	ble.w	800bc32 <_strtod_l+0x532>
 800bb06:	f014 030f 	ands.w	r3, r4, #15
 800bb0a:	d00a      	beq.n	800bb22 <_strtod_l+0x422>
 800bb0c:	495f      	ldr	r1, [pc, #380]	@ (800bc8c <_strtod_l+0x58c>)
 800bb0e:	4652      	mov	r2, sl
 800bb10:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800bb14:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bb18:	465b      	mov	r3, fp
 800bb1a:	f7f4 fcdd 	bl	80004d8 <__aeabi_dmul>
 800bb1e:	4682      	mov	sl, r0
 800bb20:	468b      	mov	fp, r1
 800bb22:	f034 040f 	bics.w	r4, r4, #15
 800bb26:	d073      	beq.n	800bc10 <_strtod_l+0x510>
 800bb28:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800bb2c:	dd48      	ble.n	800bbc0 <_strtod_l+0x4c0>
 800bb2e:	2400      	movs	r4, #0
 800bb30:	46a0      	mov	r8, r4
 800bb32:	46a1      	mov	r9, r4
 800bb34:	940a      	str	r4, [sp, #40]	@ 0x28
 800bb36:	2322      	movs	r3, #34	@ 0x22
 800bb38:	f04f 0a00 	mov.w	sl, #0
 800bb3c:	9a05      	ldr	r2, [sp, #20]
 800bb3e:	f8df b144 	ldr.w	fp, [pc, #324]	@ 800bc84 <_strtod_l+0x584>
 800bb42:	6013      	str	r3, [r2, #0]
 800bb44:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	f43f ae13 	beq.w	800b772 <_strtod_l+0x72>
 800bb4c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bb4e:	9805      	ldr	r0, [sp, #20]
 800bb50:	f7ff f94c 	bl	800adec <_Bfree>
 800bb54:	4649      	mov	r1, r9
 800bb56:	9805      	ldr	r0, [sp, #20]
 800bb58:	f7ff f948 	bl	800adec <_Bfree>
 800bb5c:	4641      	mov	r1, r8
 800bb5e:	9805      	ldr	r0, [sp, #20]
 800bb60:	f7ff f944 	bl	800adec <_Bfree>
 800bb64:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800bb66:	9805      	ldr	r0, [sp, #20]
 800bb68:	f7ff f940 	bl	800adec <_Bfree>
 800bb6c:	4621      	mov	r1, r4
 800bb6e:	9805      	ldr	r0, [sp, #20]
 800bb70:	f7ff f93c 	bl	800adec <_Bfree>
 800bb74:	e5fd      	b.n	800b772 <_strtod_l+0x72>
 800bb76:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bb78:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800bb7c:	4293      	cmp	r3, r2
 800bb7e:	dbbc      	blt.n	800bafa <_strtod_l+0x3fa>
 800bb80:	4c42      	ldr	r4, [pc, #264]	@ (800bc8c <_strtod_l+0x58c>)
 800bb82:	f1c5 050f 	rsb	r5, r5, #15
 800bb86:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800bb8a:	4652      	mov	r2, sl
 800bb8c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bb90:	465b      	mov	r3, fp
 800bb92:	f7f4 fca1 	bl	80004d8 <__aeabi_dmul>
 800bb96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bb98:	1b5d      	subs	r5, r3, r5
 800bb9a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800bb9e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800bba2:	e791      	b.n	800bac8 <_strtod_l+0x3c8>
 800bba4:	3316      	adds	r3, #22
 800bba6:	dba8      	blt.n	800bafa <_strtod_l+0x3fa>
 800bba8:	4b38      	ldr	r3, [pc, #224]	@ (800bc8c <_strtod_l+0x58c>)
 800bbaa:	eba9 0808 	sub.w	r8, r9, r8
 800bbae:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800bbb2:	4650      	mov	r0, sl
 800bbb4:	e9d8 2300 	ldrd	r2, r3, [r8]
 800bbb8:	4659      	mov	r1, fp
 800bbba:	f7f4 fdb7 	bl	800072c <__aeabi_ddiv>
 800bbbe:	e760      	b.n	800ba82 <_strtod_l+0x382>
 800bbc0:	4b33      	ldr	r3, [pc, #204]	@ (800bc90 <_strtod_l+0x590>)
 800bbc2:	4650      	mov	r0, sl
 800bbc4:	9308      	str	r3, [sp, #32]
 800bbc6:	2300      	movs	r3, #0
 800bbc8:	4659      	mov	r1, fp
 800bbca:	461e      	mov	r6, r3
 800bbcc:	1124      	asrs	r4, r4, #4
 800bbce:	2c01      	cmp	r4, #1
 800bbd0:	dc21      	bgt.n	800bc16 <_strtod_l+0x516>
 800bbd2:	b10b      	cbz	r3, 800bbd8 <_strtod_l+0x4d8>
 800bbd4:	4682      	mov	sl, r0
 800bbd6:	468b      	mov	fp, r1
 800bbd8:	492d      	ldr	r1, [pc, #180]	@ (800bc90 <_strtod_l+0x590>)
 800bbda:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800bbde:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800bbe2:	4652      	mov	r2, sl
 800bbe4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bbe8:	465b      	mov	r3, fp
 800bbea:	f7f4 fc75 	bl	80004d8 <__aeabi_dmul>
 800bbee:	4b25      	ldr	r3, [pc, #148]	@ (800bc84 <_strtod_l+0x584>)
 800bbf0:	460a      	mov	r2, r1
 800bbf2:	400b      	ands	r3, r1
 800bbf4:	4927      	ldr	r1, [pc, #156]	@ (800bc94 <_strtod_l+0x594>)
 800bbf6:	4682      	mov	sl, r0
 800bbf8:	428b      	cmp	r3, r1
 800bbfa:	d898      	bhi.n	800bb2e <_strtod_l+0x42e>
 800bbfc:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800bc00:	428b      	cmp	r3, r1
 800bc02:	bf86      	itte	hi
 800bc04:	f04f 3aff 	movhi.w	sl, #4294967295
 800bc08:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 800bc98 <_strtod_l+0x598>
 800bc0c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800bc10:	2300      	movs	r3, #0
 800bc12:	9308      	str	r3, [sp, #32]
 800bc14:	e07a      	b.n	800bd0c <_strtod_l+0x60c>
 800bc16:	07e2      	lsls	r2, r4, #31
 800bc18:	d505      	bpl.n	800bc26 <_strtod_l+0x526>
 800bc1a:	9b08      	ldr	r3, [sp, #32]
 800bc1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc20:	f7f4 fc5a 	bl	80004d8 <__aeabi_dmul>
 800bc24:	2301      	movs	r3, #1
 800bc26:	9a08      	ldr	r2, [sp, #32]
 800bc28:	3601      	adds	r6, #1
 800bc2a:	3208      	adds	r2, #8
 800bc2c:	1064      	asrs	r4, r4, #1
 800bc2e:	9208      	str	r2, [sp, #32]
 800bc30:	e7cd      	b.n	800bbce <_strtod_l+0x4ce>
 800bc32:	d0ed      	beq.n	800bc10 <_strtod_l+0x510>
 800bc34:	4264      	negs	r4, r4
 800bc36:	f014 020f 	ands.w	r2, r4, #15
 800bc3a:	d00a      	beq.n	800bc52 <_strtod_l+0x552>
 800bc3c:	4b13      	ldr	r3, [pc, #76]	@ (800bc8c <_strtod_l+0x58c>)
 800bc3e:	4650      	mov	r0, sl
 800bc40:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bc44:	4659      	mov	r1, fp
 800bc46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc4a:	f7f4 fd6f 	bl	800072c <__aeabi_ddiv>
 800bc4e:	4682      	mov	sl, r0
 800bc50:	468b      	mov	fp, r1
 800bc52:	1124      	asrs	r4, r4, #4
 800bc54:	d0dc      	beq.n	800bc10 <_strtod_l+0x510>
 800bc56:	2c1f      	cmp	r4, #31
 800bc58:	dd20      	ble.n	800bc9c <_strtod_l+0x59c>
 800bc5a:	2400      	movs	r4, #0
 800bc5c:	46a0      	mov	r8, r4
 800bc5e:	46a1      	mov	r9, r4
 800bc60:	940a      	str	r4, [sp, #40]	@ 0x28
 800bc62:	2322      	movs	r3, #34	@ 0x22
 800bc64:	9a05      	ldr	r2, [sp, #20]
 800bc66:	f04f 0a00 	mov.w	sl, #0
 800bc6a:	f04f 0b00 	mov.w	fp, #0
 800bc6e:	6013      	str	r3, [r2, #0]
 800bc70:	e768      	b.n	800bb44 <_strtod_l+0x444>
 800bc72:	bf00      	nop
 800bc74:	0800eba5 	.word	0x0800eba5
 800bc78:	0800edbc 	.word	0x0800edbc
 800bc7c:	0800eb9d 	.word	0x0800eb9d
 800bc80:	0800ebd4 	.word	0x0800ebd4
 800bc84:	7ff00000 	.word	0x7ff00000
 800bc88:	0800ef65 	.word	0x0800ef65
 800bc8c:	0800ecf0 	.word	0x0800ecf0
 800bc90:	0800ecc8 	.word	0x0800ecc8
 800bc94:	7ca00000 	.word	0x7ca00000
 800bc98:	7fefffff 	.word	0x7fefffff
 800bc9c:	f014 0310 	ands.w	r3, r4, #16
 800bca0:	bf18      	it	ne
 800bca2:	236a      	movne	r3, #106	@ 0x6a
 800bca4:	4650      	mov	r0, sl
 800bca6:	9308      	str	r3, [sp, #32]
 800bca8:	4659      	mov	r1, fp
 800bcaa:	2300      	movs	r3, #0
 800bcac:	4ea9      	ldr	r6, [pc, #676]	@ (800bf54 <_strtod_l+0x854>)
 800bcae:	07e2      	lsls	r2, r4, #31
 800bcb0:	d504      	bpl.n	800bcbc <_strtod_l+0x5bc>
 800bcb2:	e9d6 2300 	ldrd	r2, r3, [r6]
 800bcb6:	f7f4 fc0f 	bl	80004d8 <__aeabi_dmul>
 800bcba:	2301      	movs	r3, #1
 800bcbc:	1064      	asrs	r4, r4, #1
 800bcbe:	f106 0608 	add.w	r6, r6, #8
 800bcc2:	d1f4      	bne.n	800bcae <_strtod_l+0x5ae>
 800bcc4:	b10b      	cbz	r3, 800bcca <_strtod_l+0x5ca>
 800bcc6:	4682      	mov	sl, r0
 800bcc8:	468b      	mov	fp, r1
 800bcca:	9b08      	ldr	r3, [sp, #32]
 800bccc:	b1b3      	cbz	r3, 800bcfc <_strtod_l+0x5fc>
 800bcce:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800bcd2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	4659      	mov	r1, fp
 800bcda:	dd0f      	ble.n	800bcfc <_strtod_l+0x5fc>
 800bcdc:	2b1f      	cmp	r3, #31
 800bcde:	dd57      	ble.n	800bd90 <_strtod_l+0x690>
 800bce0:	2b34      	cmp	r3, #52	@ 0x34
 800bce2:	bfd8      	it	le
 800bce4:	f04f 33ff 	movle.w	r3, #4294967295
 800bce8:	f04f 0a00 	mov.w	sl, #0
 800bcec:	bfcf      	iteee	gt
 800bcee:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800bcf2:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800bcf6:	4093      	lslle	r3, r2
 800bcf8:	ea03 0b01 	andle.w	fp, r3, r1
 800bcfc:	2200      	movs	r2, #0
 800bcfe:	2300      	movs	r3, #0
 800bd00:	4650      	mov	r0, sl
 800bd02:	4659      	mov	r1, fp
 800bd04:	f7f4 fe50 	bl	80009a8 <__aeabi_dcmpeq>
 800bd08:	2800      	cmp	r0, #0
 800bd0a:	d1a6      	bne.n	800bc5a <_strtod_l+0x55a>
 800bd0c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bd0e:	463a      	mov	r2, r7
 800bd10:	9300      	str	r3, [sp, #0]
 800bd12:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800bd14:	462b      	mov	r3, r5
 800bd16:	9805      	ldr	r0, [sp, #20]
 800bd18:	f7ff f8d0 	bl	800aebc <__s2b>
 800bd1c:	900a      	str	r0, [sp, #40]	@ 0x28
 800bd1e:	2800      	cmp	r0, #0
 800bd20:	f43f af05 	beq.w	800bb2e <_strtod_l+0x42e>
 800bd24:	2400      	movs	r4, #0
 800bd26:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bd28:	eba9 0308 	sub.w	r3, r9, r8
 800bd2c:	2a00      	cmp	r2, #0
 800bd2e:	bfa8      	it	ge
 800bd30:	2300      	movge	r3, #0
 800bd32:	46a0      	mov	r8, r4
 800bd34:	9312      	str	r3, [sp, #72]	@ 0x48
 800bd36:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800bd3a:	9316      	str	r3, [sp, #88]	@ 0x58
 800bd3c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bd3e:	9805      	ldr	r0, [sp, #20]
 800bd40:	6859      	ldr	r1, [r3, #4]
 800bd42:	f7ff f813 	bl	800ad6c <_Balloc>
 800bd46:	4681      	mov	r9, r0
 800bd48:	2800      	cmp	r0, #0
 800bd4a:	f43f aef4 	beq.w	800bb36 <_strtod_l+0x436>
 800bd4e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bd50:	300c      	adds	r0, #12
 800bd52:	691a      	ldr	r2, [r3, #16]
 800bd54:	f103 010c 	add.w	r1, r3, #12
 800bd58:	3202      	adds	r2, #2
 800bd5a:	0092      	lsls	r2, r2, #2
 800bd5c:	f7fe f8a5 	bl	8009eaa <memcpy>
 800bd60:	ab1c      	add	r3, sp, #112	@ 0x70
 800bd62:	9301      	str	r3, [sp, #4]
 800bd64:	ab1b      	add	r3, sp, #108	@ 0x6c
 800bd66:	9300      	str	r3, [sp, #0]
 800bd68:	4652      	mov	r2, sl
 800bd6a:	465b      	mov	r3, fp
 800bd6c:	9805      	ldr	r0, [sp, #20]
 800bd6e:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800bd72:	f7ff fbd5 	bl	800b520 <__d2b>
 800bd76:	901a      	str	r0, [sp, #104]	@ 0x68
 800bd78:	2800      	cmp	r0, #0
 800bd7a:	f43f aedc 	beq.w	800bb36 <_strtod_l+0x436>
 800bd7e:	2101      	movs	r1, #1
 800bd80:	9805      	ldr	r0, [sp, #20]
 800bd82:	f7ff f931 	bl	800afe8 <__i2b>
 800bd86:	4680      	mov	r8, r0
 800bd88:	b948      	cbnz	r0, 800bd9e <_strtod_l+0x69e>
 800bd8a:	f04f 0800 	mov.w	r8, #0
 800bd8e:	e6d2      	b.n	800bb36 <_strtod_l+0x436>
 800bd90:	f04f 32ff 	mov.w	r2, #4294967295
 800bd94:	fa02 f303 	lsl.w	r3, r2, r3
 800bd98:	ea03 0a0a 	and.w	sl, r3, sl
 800bd9c:	e7ae      	b.n	800bcfc <_strtod_l+0x5fc>
 800bd9e:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800bda0:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800bda2:	2d00      	cmp	r5, #0
 800bda4:	bfab      	itete	ge
 800bda6:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800bda8:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800bdaa:	18ef      	addge	r7, r5, r3
 800bdac:	1b5e      	sublt	r6, r3, r5
 800bdae:	9b08      	ldr	r3, [sp, #32]
 800bdb0:	bfa8      	it	ge
 800bdb2:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800bdb4:	eba5 0503 	sub.w	r5, r5, r3
 800bdb8:	4415      	add	r5, r2
 800bdba:	4b67      	ldr	r3, [pc, #412]	@ (800bf58 <_strtod_l+0x858>)
 800bdbc:	f105 35ff 	add.w	r5, r5, #4294967295
 800bdc0:	bfb8      	it	lt
 800bdc2:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800bdc4:	429d      	cmp	r5, r3
 800bdc6:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800bdca:	da50      	bge.n	800be6e <_strtod_l+0x76e>
 800bdcc:	1b5b      	subs	r3, r3, r5
 800bdce:	2b1f      	cmp	r3, #31
 800bdd0:	f04f 0101 	mov.w	r1, #1
 800bdd4:	eba2 0203 	sub.w	r2, r2, r3
 800bdd8:	dc3d      	bgt.n	800be56 <_strtod_l+0x756>
 800bdda:	fa01 f303 	lsl.w	r3, r1, r3
 800bdde:	9313      	str	r3, [sp, #76]	@ 0x4c
 800bde0:	2300      	movs	r3, #0
 800bde2:	9310      	str	r3, [sp, #64]	@ 0x40
 800bde4:	18bd      	adds	r5, r7, r2
 800bde6:	9b08      	ldr	r3, [sp, #32]
 800bde8:	42af      	cmp	r7, r5
 800bdea:	4416      	add	r6, r2
 800bdec:	441e      	add	r6, r3
 800bdee:	463b      	mov	r3, r7
 800bdf0:	bfa8      	it	ge
 800bdf2:	462b      	movge	r3, r5
 800bdf4:	42b3      	cmp	r3, r6
 800bdf6:	bfa8      	it	ge
 800bdf8:	4633      	movge	r3, r6
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	bfc2      	ittt	gt
 800bdfe:	1aed      	subgt	r5, r5, r3
 800be00:	1af6      	subgt	r6, r6, r3
 800be02:	1aff      	subgt	r7, r7, r3
 800be04:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800be06:	2b00      	cmp	r3, #0
 800be08:	dd16      	ble.n	800be38 <_strtod_l+0x738>
 800be0a:	4641      	mov	r1, r8
 800be0c:	461a      	mov	r2, r3
 800be0e:	9805      	ldr	r0, [sp, #20]
 800be10:	f7ff f9a8 	bl	800b164 <__pow5mult>
 800be14:	4680      	mov	r8, r0
 800be16:	2800      	cmp	r0, #0
 800be18:	d0b7      	beq.n	800bd8a <_strtod_l+0x68a>
 800be1a:	4601      	mov	r1, r0
 800be1c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800be1e:	9805      	ldr	r0, [sp, #20]
 800be20:	f7ff f8f8 	bl	800b014 <__multiply>
 800be24:	900e      	str	r0, [sp, #56]	@ 0x38
 800be26:	2800      	cmp	r0, #0
 800be28:	f43f ae85 	beq.w	800bb36 <_strtod_l+0x436>
 800be2c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800be2e:	9805      	ldr	r0, [sp, #20]
 800be30:	f7fe ffdc 	bl	800adec <_Bfree>
 800be34:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800be36:	931a      	str	r3, [sp, #104]	@ 0x68
 800be38:	2d00      	cmp	r5, #0
 800be3a:	dc1d      	bgt.n	800be78 <_strtod_l+0x778>
 800be3c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800be3e:	2b00      	cmp	r3, #0
 800be40:	dd23      	ble.n	800be8a <_strtod_l+0x78a>
 800be42:	4649      	mov	r1, r9
 800be44:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800be46:	9805      	ldr	r0, [sp, #20]
 800be48:	f7ff f98c 	bl	800b164 <__pow5mult>
 800be4c:	4681      	mov	r9, r0
 800be4e:	b9e0      	cbnz	r0, 800be8a <_strtod_l+0x78a>
 800be50:	f04f 0900 	mov.w	r9, #0
 800be54:	e66f      	b.n	800bb36 <_strtod_l+0x436>
 800be56:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800be5a:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800be5e:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800be62:	35e2      	adds	r5, #226	@ 0xe2
 800be64:	fa01 f305 	lsl.w	r3, r1, r5
 800be68:	9310      	str	r3, [sp, #64]	@ 0x40
 800be6a:	9113      	str	r1, [sp, #76]	@ 0x4c
 800be6c:	e7ba      	b.n	800bde4 <_strtod_l+0x6e4>
 800be6e:	2300      	movs	r3, #0
 800be70:	9310      	str	r3, [sp, #64]	@ 0x40
 800be72:	2301      	movs	r3, #1
 800be74:	9313      	str	r3, [sp, #76]	@ 0x4c
 800be76:	e7b5      	b.n	800bde4 <_strtod_l+0x6e4>
 800be78:	462a      	mov	r2, r5
 800be7a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800be7c:	9805      	ldr	r0, [sp, #20]
 800be7e:	f7ff f9cb 	bl	800b218 <__lshift>
 800be82:	901a      	str	r0, [sp, #104]	@ 0x68
 800be84:	2800      	cmp	r0, #0
 800be86:	d1d9      	bne.n	800be3c <_strtod_l+0x73c>
 800be88:	e655      	b.n	800bb36 <_strtod_l+0x436>
 800be8a:	2e00      	cmp	r6, #0
 800be8c:	dd07      	ble.n	800be9e <_strtod_l+0x79e>
 800be8e:	4649      	mov	r1, r9
 800be90:	4632      	mov	r2, r6
 800be92:	9805      	ldr	r0, [sp, #20]
 800be94:	f7ff f9c0 	bl	800b218 <__lshift>
 800be98:	4681      	mov	r9, r0
 800be9a:	2800      	cmp	r0, #0
 800be9c:	d0d8      	beq.n	800be50 <_strtod_l+0x750>
 800be9e:	2f00      	cmp	r7, #0
 800bea0:	dd08      	ble.n	800beb4 <_strtod_l+0x7b4>
 800bea2:	4641      	mov	r1, r8
 800bea4:	463a      	mov	r2, r7
 800bea6:	9805      	ldr	r0, [sp, #20]
 800bea8:	f7ff f9b6 	bl	800b218 <__lshift>
 800beac:	4680      	mov	r8, r0
 800beae:	2800      	cmp	r0, #0
 800beb0:	f43f ae41 	beq.w	800bb36 <_strtod_l+0x436>
 800beb4:	464a      	mov	r2, r9
 800beb6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800beb8:	9805      	ldr	r0, [sp, #20]
 800beba:	f7ff fa35 	bl	800b328 <__mdiff>
 800bebe:	4604      	mov	r4, r0
 800bec0:	2800      	cmp	r0, #0
 800bec2:	f43f ae38 	beq.w	800bb36 <_strtod_l+0x436>
 800bec6:	68c3      	ldr	r3, [r0, #12]
 800bec8:	4641      	mov	r1, r8
 800beca:	930f      	str	r3, [sp, #60]	@ 0x3c
 800becc:	2300      	movs	r3, #0
 800bece:	60c3      	str	r3, [r0, #12]
 800bed0:	f7ff fa0e 	bl	800b2f0 <__mcmp>
 800bed4:	2800      	cmp	r0, #0
 800bed6:	da45      	bge.n	800bf64 <_strtod_l+0x864>
 800bed8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800beda:	ea53 030a 	orrs.w	r3, r3, sl
 800bede:	d16b      	bne.n	800bfb8 <_strtod_l+0x8b8>
 800bee0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d167      	bne.n	800bfb8 <_strtod_l+0x8b8>
 800bee8:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800beec:	0d1b      	lsrs	r3, r3, #20
 800beee:	051b      	lsls	r3, r3, #20
 800bef0:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800bef4:	d960      	bls.n	800bfb8 <_strtod_l+0x8b8>
 800bef6:	6963      	ldr	r3, [r4, #20]
 800bef8:	b913      	cbnz	r3, 800bf00 <_strtod_l+0x800>
 800befa:	6923      	ldr	r3, [r4, #16]
 800befc:	2b01      	cmp	r3, #1
 800befe:	dd5b      	ble.n	800bfb8 <_strtod_l+0x8b8>
 800bf00:	4621      	mov	r1, r4
 800bf02:	2201      	movs	r2, #1
 800bf04:	9805      	ldr	r0, [sp, #20]
 800bf06:	f7ff f987 	bl	800b218 <__lshift>
 800bf0a:	4641      	mov	r1, r8
 800bf0c:	4604      	mov	r4, r0
 800bf0e:	f7ff f9ef 	bl	800b2f0 <__mcmp>
 800bf12:	2800      	cmp	r0, #0
 800bf14:	dd50      	ble.n	800bfb8 <_strtod_l+0x8b8>
 800bf16:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800bf1a:	9a08      	ldr	r2, [sp, #32]
 800bf1c:	0d1b      	lsrs	r3, r3, #20
 800bf1e:	051b      	lsls	r3, r3, #20
 800bf20:	2a00      	cmp	r2, #0
 800bf22:	d06a      	beq.n	800bffa <_strtod_l+0x8fa>
 800bf24:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800bf28:	d867      	bhi.n	800bffa <_strtod_l+0x8fa>
 800bf2a:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800bf2e:	f67f ae98 	bls.w	800bc62 <_strtod_l+0x562>
 800bf32:	4650      	mov	r0, sl
 800bf34:	4659      	mov	r1, fp
 800bf36:	4b09      	ldr	r3, [pc, #36]	@ (800bf5c <_strtod_l+0x85c>)
 800bf38:	2200      	movs	r2, #0
 800bf3a:	f7f4 facd 	bl	80004d8 <__aeabi_dmul>
 800bf3e:	4b08      	ldr	r3, [pc, #32]	@ (800bf60 <_strtod_l+0x860>)
 800bf40:	4682      	mov	sl, r0
 800bf42:	400b      	ands	r3, r1
 800bf44:	468b      	mov	fp, r1
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	f47f ae00 	bne.w	800bb4c <_strtod_l+0x44c>
 800bf4c:	2322      	movs	r3, #34	@ 0x22
 800bf4e:	9a05      	ldr	r2, [sp, #20]
 800bf50:	6013      	str	r3, [r2, #0]
 800bf52:	e5fb      	b.n	800bb4c <_strtod_l+0x44c>
 800bf54:	0800ede8 	.word	0x0800ede8
 800bf58:	fffffc02 	.word	0xfffffc02
 800bf5c:	39500000 	.word	0x39500000
 800bf60:	7ff00000 	.word	0x7ff00000
 800bf64:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800bf68:	d165      	bne.n	800c036 <_strtod_l+0x936>
 800bf6a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800bf6c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bf70:	b35a      	cbz	r2, 800bfca <_strtod_l+0x8ca>
 800bf72:	4a99      	ldr	r2, [pc, #612]	@ (800c1d8 <_strtod_l+0xad8>)
 800bf74:	4293      	cmp	r3, r2
 800bf76:	d12b      	bne.n	800bfd0 <_strtod_l+0x8d0>
 800bf78:	9b08      	ldr	r3, [sp, #32]
 800bf7a:	4651      	mov	r1, sl
 800bf7c:	b303      	cbz	r3, 800bfc0 <_strtod_l+0x8c0>
 800bf7e:	465a      	mov	r2, fp
 800bf80:	4b96      	ldr	r3, [pc, #600]	@ (800c1dc <_strtod_l+0xadc>)
 800bf82:	4013      	ands	r3, r2
 800bf84:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800bf88:	f04f 32ff 	mov.w	r2, #4294967295
 800bf8c:	d81b      	bhi.n	800bfc6 <_strtod_l+0x8c6>
 800bf8e:	0d1b      	lsrs	r3, r3, #20
 800bf90:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800bf94:	fa02 f303 	lsl.w	r3, r2, r3
 800bf98:	4299      	cmp	r1, r3
 800bf9a:	d119      	bne.n	800bfd0 <_strtod_l+0x8d0>
 800bf9c:	4b90      	ldr	r3, [pc, #576]	@ (800c1e0 <_strtod_l+0xae0>)
 800bf9e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bfa0:	429a      	cmp	r2, r3
 800bfa2:	d102      	bne.n	800bfaa <_strtod_l+0x8aa>
 800bfa4:	3101      	adds	r1, #1
 800bfa6:	f43f adc6 	beq.w	800bb36 <_strtod_l+0x436>
 800bfaa:	f04f 0a00 	mov.w	sl, #0
 800bfae:	4b8b      	ldr	r3, [pc, #556]	@ (800c1dc <_strtod_l+0xadc>)
 800bfb0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bfb2:	401a      	ands	r2, r3
 800bfb4:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800bfb8:	9b08      	ldr	r3, [sp, #32]
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d1b9      	bne.n	800bf32 <_strtod_l+0x832>
 800bfbe:	e5c5      	b.n	800bb4c <_strtod_l+0x44c>
 800bfc0:	f04f 33ff 	mov.w	r3, #4294967295
 800bfc4:	e7e8      	b.n	800bf98 <_strtod_l+0x898>
 800bfc6:	4613      	mov	r3, r2
 800bfc8:	e7e6      	b.n	800bf98 <_strtod_l+0x898>
 800bfca:	ea53 030a 	orrs.w	r3, r3, sl
 800bfce:	d0a2      	beq.n	800bf16 <_strtod_l+0x816>
 800bfd0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800bfd2:	b1db      	cbz	r3, 800c00c <_strtod_l+0x90c>
 800bfd4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bfd6:	4213      	tst	r3, r2
 800bfd8:	d0ee      	beq.n	800bfb8 <_strtod_l+0x8b8>
 800bfda:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bfdc:	4650      	mov	r0, sl
 800bfde:	4659      	mov	r1, fp
 800bfe0:	9a08      	ldr	r2, [sp, #32]
 800bfe2:	b1bb      	cbz	r3, 800c014 <_strtod_l+0x914>
 800bfe4:	f7ff fb68 	bl	800b6b8 <sulp>
 800bfe8:	4602      	mov	r2, r0
 800bfea:	460b      	mov	r3, r1
 800bfec:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bff0:	f7f4 f8bc 	bl	800016c <__adddf3>
 800bff4:	4682      	mov	sl, r0
 800bff6:	468b      	mov	fp, r1
 800bff8:	e7de      	b.n	800bfb8 <_strtod_l+0x8b8>
 800bffa:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800bffe:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800c002:	f04f 3aff 	mov.w	sl, #4294967295
 800c006:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800c00a:	e7d5      	b.n	800bfb8 <_strtod_l+0x8b8>
 800c00c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800c00e:	ea13 0f0a 	tst.w	r3, sl
 800c012:	e7e1      	b.n	800bfd8 <_strtod_l+0x8d8>
 800c014:	f7ff fb50 	bl	800b6b8 <sulp>
 800c018:	4602      	mov	r2, r0
 800c01a:	460b      	mov	r3, r1
 800c01c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c020:	f7f4 f8a2 	bl	8000168 <__aeabi_dsub>
 800c024:	2200      	movs	r2, #0
 800c026:	2300      	movs	r3, #0
 800c028:	4682      	mov	sl, r0
 800c02a:	468b      	mov	fp, r1
 800c02c:	f7f4 fcbc 	bl	80009a8 <__aeabi_dcmpeq>
 800c030:	2800      	cmp	r0, #0
 800c032:	d0c1      	beq.n	800bfb8 <_strtod_l+0x8b8>
 800c034:	e615      	b.n	800bc62 <_strtod_l+0x562>
 800c036:	4641      	mov	r1, r8
 800c038:	4620      	mov	r0, r4
 800c03a:	f7ff fac9 	bl	800b5d0 <__ratio>
 800c03e:	2200      	movs	r2, #0
 800c040:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800c044:	4606      	mov	r6, r0
 800c046:	460f      	mov	r7, r1
 800c048:	f7f4 fcc2 	bl	80009d0 <__aeabi_dcmple>
 800c04c:	2800      	cmp	r0, #0
 800c04e:	d06d      	beq.n	800c12c <_strtod_l+0xa2c>
 800c050:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c052:	2b00      	cmp	r3, #0
 800c054:	d178      	bne.n	800c148 <_strtod_l+0xa48>
 800c056:	f1ba 0f00 	cmp.w	sl, #0
 800c05a:	d156      	bne.n	800c10a <_strtod_l+0xa0a>
 800c05c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c05e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c062:	2b00      	cmp	r3, #0
 800c064:	d158      	bne.n	800c118 <_strtod_l+0xa18>
 800c066:	2200      	movs	r2, #0
 800c068:	4630      	mov	r0, r6
 800c06a:	4639      	mov	r1, r7
 800c06c:	4b5d      	ldr	r3, [pc, #372]	@ (800c1e4 <_strtod_l+0xae4>)
 800c06e:	f7f4 fca5 	bl	80009bc <__aeabi_dcmplt>
 800c072:	2800      	cmp	r0, #0
 800c074:	d157      	bne.n	800c126 <_strtod_l+0xa26>
 800c076:	4630      	mov	r0, r6
 800c078:	4639      	mov	r1, r7
 800c07a:	2200      	movs	r2, #0
 800c07c:	4b5a      	ldr	r3, [pc, #360]	@ (800c1e8 <_strtod_l+0xae8>)
 800c07e:	f7f4 fa2b 	bl	80004d8 <__aeabi_dmul>
 800c082:	4606      	mov	r6, r0
 800c084:	460f      	mov	r7, r1
 800c086:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800c08a:	9606      	str	r6, [sp, #24]
 800c08c:	9307      	str	r3, [sp, #28]
 800c08e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c092:	4d52      	ldr	r5, [pc, #328]	@ (800c1dc <_strtod_l+0xadc>)
 800c094:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800c098:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c09a:	401d      	ands	r5, r3
 800c09c:	4b53      	ldr	r3, [pc, #332]	@ (800c1ec <_strtod_l+0xaec>)
 800c09e:	429d      	cmp	r5, r3
 800c0a0:	f040 80aa 	bne.w	800c1f8 <_strtod_l+0xaf8>
 800c0a4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c0a6:	4650      	mov	r0, sl
 800c0a8:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800c0ac:	4659      	mov	r1, fp
 800c0ae:	f7ff f9cf 	bl	800b450 <__ulp>
 800c0b2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c0b6:	f7f4 fa0f 	bl	80004d8 <__aeabi_dmul>
 800c0ba:	4652      	mov	r2, sl
 800c0bc:	465b      	mov	r3, fp
 800c0be:	f7f4 f855 	bl	800016c <__adddf3>
 800c0c2:	460b      	mov	r3, r1
 800c0c4:	4945      	ldr	r1, [pc, #276]	@ (800c1dc <_strtod_l+0xadc>)
 800c0c6:	4a4a      	ldr	r2, [pc, #296]	@ (800c1f0 <_strtod_l+0xaf0>)
 800c0c8:	4019      	ands	r1, r3
 800c0ca:	4291      	cmp	r1, r2
 800c0cc:	4682      	mov	sl, r0
 800c0ce:	d942      	bls.n	800c156 <_strtod_l+0xa56>
 800c0d0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c0d2:	4b43      	ldr	r3, [pc, #268]	@ (800c1e0 <_strtod_l+0xae0>)
 800c0d4:	429a      	cmp	r2, r3
 800c0d6:	d103      	bne.n	800c0e0 <_strtod_l+0x9e0>
 800c0d8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c0da:	3301      	adds	r3, #1
 800c0dc:	f43f ad2b 	beq.w	800bb36 <_strtod_l+0x436>
 800c0e0:	f04f 3aff 	mov.w	sl, #4294967295
 800c0e4:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 800c1e0 <_strtod_l+0xae0>
 800c0e8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c0ea:	9805      	ldr	r0, [sp, #20]
 800c0ec:	f7fe fe7e 	bl	800adec <_Bfree>
 800c0f0:	4649      	mov	r1, r9
 800c0f2:	9805      	ldr	r0, [sp, #20]
 800c0f4:	f7fe fe7a 	bl	800adec <_Bfree>
 800c0f8:	4641      	mov	r1, r8
 800c0fa:	9805      	ldr	r0, [sp, #20]
 800c0fc:	f7fe fe76 	bl	800adec <_Bfree>
 800c100:	4621      	mov	r1, r4
 800c102:	9805      	ldr	r0, [sp, #20]
 800c104:	f7fe fe72 	bl	800adec <_Bfree>
 800c108:	e618      	b.n	800bd3c <_strtod_l+0x63c>
 800c10a:	f1ba 0f01 	cmp.w	sl, #1
 800c10e:	d103      	bne.n	800c118 <_strtod_l+0xa18>
 800c110:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c112:	2b00      	cmp	r3, #0
 800c114:	f43f ada5 	beq.w	800bc62 <_strtod_l+0x562>
 800c118:	2200      	movs	r2, #0
 800c11a:	4b36      	ldr	r3, [pc, #216]	@ (800c1f4 <_strtod_l+0xaf4>)
 800c11c:	2600      	movs	r6, #0
 800c11e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c122:	4f30      	ldr	r7, [pc, #192]	@ (800c1e4 <_strtod_l+0xae4>)
 800c124:	e7b3      	b.n	800c08e <_strtod_l+0x98e>
 800c126:	2600      	movs	r6, #0
 800c128:	4f2f      	ldr	r7, [pc, #188]	@ (800c1e8 <_strtod_l+0xae8>)
 800c12a:	e7ac      	b.n	800c086 <_strtod_l+0x986>
 800c12c:	4630      	mov	r0, r6
 800c12e:	4639      	mov	r1, r7
 800c130:	4b2d      	ldr	r3, [pc, #180]	@ (800c1e8 <_strtod_l+0xae8>)
 800c132:	2200      	movs	r2, #0
 800c134:	f7f4 f9d0 	bl	80004d8 <__aeabi_dmul>
 800c138:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c13a:	4606      	mov	r6, r0
 800c13c:	460f      	mov	r7, r1
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d0a1      	beq.n	800c086 <_strtod_l+0x986>
 800c142:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800c146:	e7a2      	b.n	800c08e <_strtod_l+0x98e>
 800c148:	2200      	movs	r2, #0
 800c14a:	4b26      	ldr	r3, [pc, #152]	@ (800c1e4 <_strtod_l+0xae4>)
 800c14c:	4616      	mov	r6, r2
 800c14e:	461f      	mov	r7, r3
 800c150:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c154:	e79b      	b.n	800c08e <_strtod_l+0x98e>
 800c156:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800c15a:	9b08      	ldr	r3, [sp, #32]
 800c15c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800c160:	2b00      	cmp	r3, #0
 800c162:	d1c1      	bne.n	800c0e8 <_strtod_l+0x9e8>
 800c164:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c168:	0d1b      	lsrs	r3, r3, #20
 800c16a:	051b      	lsls	r3, r3, #20
 800c16c:	429d      	cmp	r5, r3
 800c16e:	d1bb      	bne.n	800c0e8 <_strtod_l+0x9e8>
 800c170:	4630      	mov	r0, r6
 800c172:	4639      	mov	r1, r7
 800c174:	f7f4 fff2 	bl	800115c <__aeabi_d2lz>
 800c178:	f7f4 f980 	bl	800047c <__aeabi_l2d>
 800c17c:	4602      	mov	r2, r0
 800c17e:	460b      	mov	r3, r1
 800c180:	4630      	mov	r0, r6
 800c182:	4639      	mov	r1, r7
 800c184:	f7f3 fff0 	bl	8000168 <__aeabi_dsub>
 800c188:	460b      	mov	r3, r1
 800c18a:	4602      	mov	r2, r0
 800c18c:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800c190:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800c194:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c196:	ea46 060a 	orr.w	r6, r6, sl
 800c19a:	431e      	orrs	r6, r3
 800c19c:	d069      	beq.n	800c272 <_strtod_l+0xb72>
 800c19e:	a30a      	add	r3, pc, #40	@ (adr r3, 800c1c8 <_strtod_l+0xac8>)
 800c1a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1a4:	f7f4 fc0a 	bl	80009bc <__aeabi_dcmplt>
 800c1a8:	2800      	cmp	r0, #0
 800c1aa:	f47f accf 	bne.w	800bb4c <_strtod_l+0x44c>
 800c1ae:	a308      	add	r3, pc, #32	@ (adr r3, 800c1d0 <_strtod_l+0xad0>)
 800c1b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1b4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c1b8:	f7f4 fc1e 	bl	80009f8 <__aeabi_dcmpgt>
 800c1bc:	2800      	cmp	r0, #0
 800c1be:	d093      	beq.n	800c0e8 <_strtod_l+0x9e8>
 800c1c0:	e4c4      	b.n	800bb4c <_strtod_l+0x44c>
 800c1c2:	bf00      	nop
 800c1c4:	f3af 8000 	nop.w
 800c1c8:	94a03595 	.word	0x94a03595
 800c1cc:	3fdfffff 	.word	0x3fdfffff
 800c1d0:	35afe535 	.word	0x35afe535
 800c1d4:	3fe00000 	.word	0x3fe00000
 800c1d8:	000fffff 	.word	0x000fffff
 800c1dc:	7ff00000 	.word	0x7ff00000
 800c1e0:	7fefffff 	.word	0x7fefffff
 800c1e4:	3ff00000 	.word	0x3ff00000
 800c1e8:	3fe00000 	.word	0x3fe00000
 800c1ec:	7fe00000 	.word	0x7fe00000
 800c1f0:	7c9fffff 	.word	0x7c9fffff
 800c1f4:	bff00000 	.word	0xbff00000
 800c1f8:	9b08      	ldr	r3, [sp, #32]
 800c1fa:	b323      	cbz	r3, 800c246 <_strtod_l+0xb46>
 800c1fc:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800c200:	d821      	bhi.n	800c246 <_strtod_l+0xb46>
 800c202:	a327      	add	r3, pc, #156	@ (adr r3, 800c2a0 <_strtod_l+0xba0>)
 800c204:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c208:	4630      	mov	r0, r6
 800c20a:	4639      	mov	r1, r7
 800c20c:	f7f4 fbe0 	bl	80009d0 <__aeabi_dcmple>
 800c210:	b1a0      	cbz	r0, 800c23c <_strtod_l+0xb3c>
 800c212:	4639      	mov	r1, r7
 800c214:	4630      	mov	r0, r6
 800c216:	f7f4 fc37 	bl	8000a88 <__aeabi_d2uiz>
 800c21a:	2801      	cmp	r0, #1
 800c21c:	bf38      	it	cc
 800c21e:	2001      	movcc	r0, #1
 800c220:	f7f4 f8e0 	bl	80003e4 <__aeabi_ui2d>
 800c224:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c226:	4606      	mov	r6, r0
 800c228:	460f      	mov	r7, r1
 800c22a:	b9fb      	cbnz	r3, 800c26c <_strtod_l+0xb6c>
 800c22c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c230:	9014      	str	r0, [sp, #80]	@ 0x50
 800c232:	9315      	str	r3, [sp, #84]	@ 0x54
 800c234:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800c238:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800c23c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c23e:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800c242:	1b5b      	subs	r3, r3, r5
 800c244:	9311      	str	r3, [sp, #68]	@ 0x44
 800c246:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c24a:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800c24e:	f7ff f8ff 	bl	800b450 <__ulp>
 800c252:	4602      	mov	r2, r0
 800c254:	460b      	mov	r3, r1
 800c256:	4650      	mov	r0, sl
 800c258:	4659      	mov	r1, fp
 800c25a:	f7f4 f93d 	bl	80004d8 <__aeabi_dmul>
 800c25e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800c262:	f7f3 ff83 	bl	800016c <__adddf3>
 800c266:	4682      	mov	sl, r0
 800c268:	468b      	mov	fp, r1
 800c26a:	e776      	b.n	800c15a <_strtod_l+0xa5a>
 800c26c:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800c270:	e7e0      	b.n	800c234 <_strtod_l+0xb34>
 800c272:	a30d      	add	r3, pc, #52	@ (adr r3, 800c2a8 <_strtod_l+0xba8>)
 800c274:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c278:	f7f4 fba0 	bl	80009bc <__aeabi_dcmplt>
 800c27c:	e79e      	b.n	800c1bc <_strtod_l+0xabc>
 800c27e:	2300      	movs	r3, #0
 800c280:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c282:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c284:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800c286:	6013      	str	r3, [r2, #0]
 800c288:	f7ff ba77 	b.w	800b77a <_strtod_l+0x7a>
 800c28c:	2a65      	cmp	r2, #101	@ 0x65
 800c28e:	f43f ab6e 	beq.w	800b96e <_strtod_l+0x26e>
 800c292:	2a45      	cmp	r2, #69	@ 0x45
 800c294:	f43f ab6b 	beq.w	800b96e <_strtod_l+0x26e>
 800c298:	2301      	movs	r3, #1
 800c29a:	f7ff bba6 	b.w	800b9ea <_strtod_l+0x2ea>
 800c29e:	bf00      	nop
 800c2a0:	ffc00000 	.word	0xffc00000
 800c2a4:	41dfffff 	.word	0x41dfffff
 800c2a8:	94a03595 	.word	0x94a03595
 800c2ac:	3fcfffff 	.word	0x3fcfffff

0800c2b0 <_strtod_r>:
 800c2b0:	4b01      	ldr	r3, [pc, #4]	@ (800c2b8 <_strtod_r+0x8>)
 800c2b2:	f7ff ba25 	b.w	800b700 <_strtod_l>
 800c2b6:	bf00      	nop
 800c2b8:	20000090 	.word	0x20000090

0800c2bc <_strtol_l.constprop.0>:
 800c2bc:	2b24      	cmp	r3, #36	@ 0x24
 800c2be:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c2c2:	4686      	mov	lr, r0
 800c2c4:	4690      	mov	r8, r2
 800c2c6:	d801      	bhi.n	800c2cc <_strtol_l.constprop.0+0x10>
 800c2c8:	2b01      	cmp	r3, #1
 800c2ca:	d106      	bne.n	800c2da <_strtol_l.constprop.0+0x1e>
 800c2cc:	f7fd fdb2 	bl	8009e34 <__errno>
 800c2d0:	2316      	movs	r3, #22
 800c2d2:	6003      	str	r3, [r0, #0]
 800c2d4:	2000      	movs	r0, #0
 800c2d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c2da:	460d      	mov	r5, r1
 800c2dc:	4833      	ldr	r0, [pc, #204]	@ (800c3ac <_strtol_l.constprop.0+0xf0>)
 800c2de:	462a      	mov	r2, r5
 800c2e0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c2e4:	5d06      	ldrb	r6, [r0, r4]
 800c2e6:	f016 0608 	ands.w	r6, r6, #8
 800c2ea:	d1f8      	bne.n	800c2de <_strtol_l.constprop.0+0x22>
 800c2ec:	2c2d      	cmp	r4, #45	@ 0x2d
 800c2ee:	d12d      	bne.n	800c34c <_strtol_l.constprop.0+0x90>
 800c2f0:	2601      	movs	r6, #1
 800c2f2:	782c      	ldrb	r4, [r5, #0]
 800c2f4:	1c95      	adds	r5, r2, #2
 800c2f6:	f033 0210 	bics.w	r2, r3, #16
 800c2fa:	d109      	bne.n	800c310 <_strtol_l.constprop.0+0x54>
 800c2fc:	2c30      	cmp	r4, #48	@ 0x30
 800c2fe:	d12a      	bne.n	800c356 <_strtol_l.constprop.0+0x9a>
 800c300:	782a      	ldrb	r2, [r5, #0]
 800c302:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800c306:	2a58      	cmp	r2, #88	@ 0x58
 800c308:	d125      	bne.n	800c356 <_strtol_l.constprop.0+0x9a>
 800c30a:	2310      	movs	r3, #16
 800c30c:	786c      	ldrb	r4, [r5, #1]
 800c30e:	3502      	adds	r5, #2
 800c310:	2200      	movs	r2, #0
 800c312:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800c316:	f10c 3cff 	add.w	ip, ip, #4294967295
 800c31a:	fbbc f9f3 	udiv	r9, ip, r3
 800c31e:	4610      	mov	r0, r2
 800c320:	fb03 ca19 	mls	sl, r3, r9, ip
 800c324:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800c328:	2f09      	cmp	r7, #9
 800c32a:	d81b      	bhi.n	800c364 <_strtol_l.constprop.0+0xa8>
 800c32c:	463c      	mov	r4, r7
 800c32e:	42a3      	cmp	r3, r4
 800c330:	dd27      	ble.n	800c382 <_strtol_l.constprop.0+0xc6>
 800c332:	1c57      	adds	r7, r2, #1
 800c334:	d007      	beq.n	800c346 <_strtol_l.constprop.0+0x8a>
 800c336:	4581      	cmp	r9, r0
 800c338:	d320      	bcc.n	800c37c <_strtol_l.constprop.0+0xc0>
 800c33a:	d101      	bne.n	800c340 <_strtol_l.constprop.0+0x84>
 800c33c:	45a2      	cmp	sl, r4
 800c33e:	db1d      	blt.n	800c37c <_strtol_l.constprop.0+0xc0>
 800c340:	2201      	movs	r2, #1
 800c342:	fb00 4003 	mla	r0, r0, r3, r4
 800c346:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c34a:	e7eb      	b.n	800c324 <_strtol_l.constprop.0+0x68>
 800c34c:	2c2b      	cmp	r4, #43	@ 0x2b
 800c34e:	bf04      	itt	eq
 800c350:	782c      	ldrbeq	r4, [r5, #0]
 800c352:	1c95      	addeq	r5, r2, #2
 800c354:	e7cf      	b.n	800c2f6 <_strtol_l.constprop.0+0x3a>
 800c356:	2b00      	cmp	r3, #0
 800c358:	d1da      	bne.n	800c310 <_strtol_l.constprop.0+0x54>
 800c35a:	2c30      	cmp	r4, #48	@ 0x30
 800c35c:	bf0c      	ite	eq
 800c35e:	2308      	moveq	r3, #8
 800c360:	230a      	movne	r3, #10
 800c362:	e7d5      	b.n	800c310 <_strtol_l.constprop.0+0x54>
 800c364:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800c368:	2f19      	cmp	r7, #25
 800c36a:	d801      	bhi.n	800c370 <_strtol_l.constprop.0+0xb4>
 800c36c:	3c37      	subs	r4, #55	@ 0x37
 800c36e:	e7de      	b.n	800c32e <_strtol_l.constprop.0+0x72>
 800c370:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800c374:	2f19      	cmp	r7, #25
 800c376:	d804      	bhi.n	800c382 <_strtol_l.constprop.0+0xc6>
 800c378:	3c57      	subs	r4, #87	@ 0x57
 800c37a:	e7d8      	b.n	800c32e <_strtol_l.constprop.0+0x72>
 800c37c:	f04f 32ff 	mov.w	r2, #4294967295
 800c380:	e7e1      	b.n	800c346 <_strtol_l.constprop.0+0x8a>
 800c382:	1c53      	adds	r3, r2, #1
 800c384:	d108      	bne.n	800c398 <_strtol_l.constprop.0+0xdc>
 800c386:	2322      	movs	r3, #34	@ 0x22
 800c388:	4660      	mov	r0, ip
 800c38a:	f8ce 3000 	str.w	r3, [lr]
 800c38e:	f1b8 0f00 	cmp.w	r8, #0
 800c392:	d0a0      	beq.n	800c2d6 <_strtol_l.constprop.0+0x1a>
 800c394:	1e69      	subs	r1, r5, #1
 800c396:	e006      	b.n	800c3a6 <_strtol_l.constprop.0+0xea>
 800c398:	b106      	cbz	r6, 800c39c <_strtol_l.constprop.0+0xe0>
 800c39a:	4240      	negs	r0, r0
 800c39c:	f1b8 0f00 	cmp.w	r8, #0
 800c3a0:	d099      	beq.n	800c2d6 <_strtol_l.constprop.0+0x1a>
 800c3a2:	2a00      	cmp	r2, #0
 800c3a4:	d1f6      	bne.n	800c394 <_strtol_l.constprop.0+0xd8>
 800c3a6:	f8c8 1000 	str.w	r1, [r8]
 800c3aa:	e794      	b.n	800c2d6 <_strtol_l.constprop.0+0x1a>
 800c3ac:	0800ee11 	.word	0x0800ee11

0800c3b0 <_strtol_r>:
 800c3b0:	f7ff bf84 	b.w	800c2bc <_strtol_l.constprop.0>

0800c3b4 <__ssputs_r>:
 800c3b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c3b8:	461f      	mov	r7, r3
 800c3ba:	688e      	ldr	r6, [r1, #8]
 800c3bc:	4682      	mov	sl, r0
 800c3be:	42be      	cmp	r6, r7
 800c3c0:	460c      	mov	r4, r1
 800c3c2:	4690      	mov	r8, r2
 800c3c4:	680b      	ldr	r3, [r1, #0]
 800c3c6:	d82d      	bhi.n	800c424 <__ssputs_r+0x70>
 800c3c8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c3cc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c3d0:	d026      	beq.n	800c420 <__ssputs_r+0x6c>
 800c3d2:	6965      	ldr	r5, [r4, #20]
 800c3d4:	6909      	ldr	r1, [r1, #16]
 800c3d6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c3da:	eba3 0901 	sub.w	r9, r3, r1
 800c3de:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c3e2:	1c7b      	adds	r3, r7, #1
 800c3e4:	444b      	add	r3, r9
 800c3e6:	106d      	asrs	r5, r5, #1
 800c3e8:	429d      	cmp	r5, r3
 800c3ea:	bf38      	it	cc
 800c3ec:	461d      	movcc	r5, r3
 800c3ee:	0553      	lsls	r3, r2, #21
 800c3f0:	d527      	bpl.n	800c442 <__ssputs_r+0x8e>
 800c3f2:	4629      	mov	r1, r5
 800c3f4:	f7fe fc2e 	bl	800ac54 <_malloc_r>
 800c3f8:	4606      	mov	r6, r0
 800c3fa:	b360      	cbz	r0, 800c456 <__ssputs_r+0xa2>
 800c3fc:	464a      	mov	r2, r9
 800c3fe:	6921      	ldr	r1, [r4, #16]
 800c400:	f7fd fd53 	bl	8009eaa <memcpy>
 800c404:	89a3      	ldrh	r3, [r4, #12]
 800c406:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c40a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c40e:	81a3      	strh	r3, [r4, #12]
 800c410:	6126      	str	r6, [r4, #16]
 800c412:	444e      	add	r6, r9
 800c414:	6026      	str	r6, [r4, #0]
 800c416:	463e      	mov	r6, r7
 800c418:	6165      	str	r5, [r4, #20]
 800c41a:	eba5 0509 	sub.w	r5, r5, r9
 800c41e:	60a5      	str	r5, [r4, #8]
 800c420:	42be      	cmp	r6, r7
 800c422:	d900      	bls.n	800c426 <__ssputs_r+0x72>
 800c424:	463e      	mov	r6, r7
 800c426:	4632      	mov	r2, r6
 800c428:	4641      	mov	r1, r8
 800c42a:	6820      	ldr	r0, [r4, #0]
 800c42c:	f7fd fc95 	bl	8009d5a <memmove>
 800c430:	2000      	movs	r0, #0
 800c432:	68a3      	ldr	r3, [r4, #8]
 800c434:	1b9b      	subs	r3, r3, r6
 800c436:	60a3      	str	r3, [r4, #8]
 800c438:	6823      	ldr	r3, [r4, #0]
 800c43a:	4433      	add	r3, r6
 800c43c:	6023      	str	r3, [r4, #0]
 800c43e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c442:	462a      	mov	r2, r5
 800c444:	f000 ff2f 	bl	800d2a6 <_realloc_r>
 800c448:	4606      	mov	r6, r0
 800c44a:	2800      	cmp	r0, #0
 800c44c:	d1e0      	bne.n	800c410 <__ssputs_r+0x5c>
 800c44e:	4650      	mov	r0, sl
 800c450:	6921      	ldr	r1, [r4, #16]
 800c452:	f7fe fb8d 	bl	800ab70 <_free_r>
 800c456:	230c      	movs	r3, #12
 800c458:	f8ca 3000 	str.w	r3, [sl]
 800c45c:	89a3      	ldrh	r3, [r4, #12]
 800c45e:	f04f 30ff 	mov.w	r0, #4294967295
 800c462:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c466:	81a3      	strh	r3, [r4, #12]
 800c468:	e7e9      	b.n	800c43e <__ssputs_r+0x8a>
	...

0800c46c <_svfiprintf_r>:
 800c46c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c470:	4698      	mov	r8, r3
 800c472:	898b      	ldrh	r3, [r1, #12]
 800c474:	4607      	mov	r7, r0
 800c476:	061b      	lsls	r3, r3, #24
 800c478:	460d      	mov	r5, r1
 800c47a:	4614      	mov	r4, r2
 800c47c:	b09d      	sub	sp, #116	@ 0x74
 800c47e:	d510      	bpl.n	800c4a2 <_svfiprintf_r+0x36>
 800c480:	690b      	ldr	r3, [r1, #16]
 800c482:	b973      	cbnz	r3, 800c4a2 <_svfiprintf_r+0x36>
 800c484:	2140      	movs	r1, #64	@ 0x40
 800c486:	f7fe fbe5 	bl	800ac54 <_malloc_r>
 800c48a:	6028      	str	r0, [r5, #0]
 800c48c:	6128      	str	r0, [r5, #16]
 800c48e:	b930      	cbnz	r0, 800c49e <_svfiprintf_r+0x32>
 800c490:	230c      	movs	r3, #12
 800c492:	603b      	str	r3, [r7, #0]
 800c494:	f04f 30ff 	mov.w	r0, #4294967295
 800c498:	b01d      	add	sp, #116	@ 0x74
 800c49a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c49e:	2340      	movs	r3, #64	@ 0x40
 800c4a0:	616b      	str	r3, [r5, #20]
 800c4a2:	2300      	movs	r3, #0
 800c4a4:	9309      	str	r3, [sp, #36]	@ 0x24
 800c4a6:	2320      	movs	r3, #32
 800c4a8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c4ac:	2330      	movs	r3, #48	@ 0x30
 800c4ae:	f04f 0901 	mov.w	r9, #1
 800c4b2:	f8cd 800c 	str.w	r8, [sp, #12]
 800c4b6:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800c650 <_svfiprintf_r+0x1e4>
 800c4ba:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c4be:	4623      	mov	r3, r4
 800c4c0:	469a      	mov	sl, r3
 800c4c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c4c6:	b10a      	cbz	r2, 800c4cc <_svfiprintf_r+0x60>
 800c4c8:	2a25      	cmp	r2, #37	@ 0x25
 800c4ca:	d1f9      	bne.n	800c4c0 <_svfiprintf_r+0x54>
 800c4cc:	ebba 0b04 	subs.w	fp, sl, r4
 800c4d0:	d00b      	beq.n	800c4ea <_svfiprintf_r+0x7e>
 800c4d2:	465b      	mov	r3, fp
 800c4d4:	4622      	mov	r2, r4
 800c4d6:	4629      	mov	r1, r5
 800c4d8:	4638      	mov	r0, r7
 800c4da:	f7ff ff6b 	bl	800c3b4 <__ssputs_r>
 800c4de:	3001      	adds	r0, #1
 800c4e0:	f000 80a7 	beq.w	800c632 <_svfiprintf_r+0x1c6>
 800c4e4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c4e6:	445a      	add	r2, fp
 800c4e8:	9209      	str	r2, [sp, #36]	@ 0x24
 800c4ea:	f89a 3000 	ldrb.w	r3, [sl]
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	f000 809f 	beq.w	800c632 <_svfiprintf_r+0x1c6>
 800c4f4:	2300      	movs	r3, #0
 800c4f6:	f04f 32ff 	mov.w	r2, #4294967295
 800c4fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c4fe:	f10a 0a01 	add.w	sl, sl, #1
 800c502:	9304      	str	r3, [sp, #16]
 800c504:	9307      	str	r3, [sp, #28]
 800c506:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c50a:	931a      	str	r3, [sp, #104]	@ 0x68
 800c50c:	4654      	mov	r4, sl
 800c50e:	2205      	movs	r2, #5
 800c510:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c514:	484e      	ldr	r0, [pc, #312]	@ (800c650 <_svfiprintf_r+0x1e4>)
 800c516:	f7fd fcba 	bl	8009e8e <memchr>
 800c51a:	9a04      	ldr	r2, [sp, #16]
 800c51c:	b9d8      	cbnz	r0, 800c556 <_svfiprintf_r+0xea>
 800c51e:	06d0      	lsls	r0, r2, #27
 800c520:	bf44      	itt	mi
 800c522:	2320      	movmi	r3, #32
 800c524:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c528:	0711      	lsls	r1, r2, #28
 800c52a:	bf44      	itt	mi
 800c52c:	232b      	movmi	r3, #43	@ 0x2b
 800c52e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c532:	f89a 3000 	ldrb.w	r3, [sl]
 800c536:	2b2a      	cmp	r3, #42	@ 0x2a
 800c538:	d015      	beq.n	800c566 <_svfiprintf_r+0xfa>
 800c53a:	4654      	mov	r4, sl
 800c53c:	2000      	movs	r0, #0
 800c53e:	f04f 0c0a 	mov.w	ip, #10
 800c542:	9a07      	ldr	r2, [sp, #28]
 800c544:	4621      	mov	r1, r4
 800c546:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c54a:	3b30      	subs	r3, #48	@ 0x30
 800c54c:	2b09      	cmp	r3, #9
 800c54e:	d94b      	bls.n	800c5e8 <_svfiprintf_r+0x17c>
 800c550:	b1b0      	cbz	r0, 800c580 <_svfiprintf_r+0x114>
 800c552:	9207      	str	r2, [sp, #28]
 800c554:	e014      	b.n	800c580 <_svfiprintf_r+0x114>
 800c556:	eba0 0308 	sub.w	r3, r0, r8
 800c55a:	fa09 f303 	lsl.w	r3, r9, r3
 800c55e:	4313      	orrs	r3, r2
 800c560:	46a2      	mov	sl, r4
 800c562:	9304      	str	r3, [sp, #16]
 800c564:	e7d2      	b.n	800c50c <_svfiprintf_r+0xa0>
 800c566:	9b03      	ldr	r3, [sp, #12]
 800c568:	1d19      	adds	r1, r3, #4
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	9103      	str	r1, [sp, #12]
 800c56e:	2b00      	cmp	r3, #0
 800c570:	bfbb      	ittet	lt
 800c572:	425b      	neglt	r3, r3
 800c574:	f042 0202 	orrlt.w	r2, r2, #2
 800c578:	9307      	strge	r3, [sp, #28]
 800c57a:	9307      	strlt	r3, [sp, #28]
 800c57c:	bfb8      	it	lt
 800c57e:	9204      	strlt	r2, [sp, #16]
 800c580:	7823      	ldrb	r3, [r4, #0]
 800c582:	2b2e      	cmp	r3, #46	@ 0x2e
 800c584:	d10a      	bne.n	800c59c <_svfiprintf_r+0x130>
 800c586:	7863      	ldrb	r3, [r4, #1]
 800c588:	2b2a      	cmp	r3, #42	@ 0x2a
 800c58a:	d132      	bne.n	800c5f2 <_svfiprintf_r+0x186>
 800c58c:	9b03      	ldr	r3, [sp, #12]
 800c58e:	3402      	adds	r4, #2
 800c590:	1d1a      	adds	r2, r3, #4
 800c592:	681b      	ldr	r3, [r3, #0]
 800c594:	9203      	str	r2, [sp, #12]
 800c596:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c59a:	9305      	str	r3, [sp, #20]
 800c59c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800c654 <_svfiprintf_r+0x1e8>
 800c5a0:	2203      	movs	r2, #3
 800c5a2:	4650      	mov	r0, sl
 800c5a4:	7821      	ldrb	r1, [r4, #0]
 800c5a6:	f7fd fc72 	bl	8009e8e <memchr>
 800c5aa:	b138      	cbz	r0, 800c5bc <_svfiprintf_r+0x150>
 800c5ac:	2240      	movs	r2, #64	@ 0x40
 800c5ae:	9b04      	ldr	r3, [sp, #16]
 800c5b0:	eba0 000a 	sub.w	r0, r0, sl
 800c5b4:	4082      	lsls	r2, r0
 800c5b6:	4313      	orrs	r3, r2
 800c5b8:	3401      	adds	r4, #1
 800c5ba:	9304      	str	r3, [sp, #16]
 800c5bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c5c0:	2206      	movs	r2, #6
 800c5c2:	4825      	ldr	r0, [pc, #148]	@ (800c658 <_svfiprintf_r+0x1ec>)
 800c5c4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c5c8:	f7fd fc61 	bl	8009e8e <memchr>
 800c5cc:	2800      	cmp	r0, #0
 800c5ce:	d036      	beq.n	800c63e <_svfiprintf_r+0x1d2>
 800c5d0:	4b22      	ldr	r3, [pc, #136]	@ (800c65c <_svfiprintf_r+0x1f0>)
 800c5d2:	bb1b      	cbnz	r3, 800c61c <_svfiprintf_r+0x1b0>
 800c5d4:	9b03      	ldr	r3, [sp, #12]
 800c5d6:	3307      	adds	r3, #7
 800c5d8:	f023 0307 	bic.w	r3, r3, #7
 800c5dc:	3308      	adds	r3, #8
 800c5de:	9303      	str	r3, [sp, #12]
 800c5e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c5e2:	4433      	add	r3, r6
 800c5e4:	9309      	str	r3, [sp, #36]	@ 0x24
 800c5e6:	e76a      	b.n	800c4be <_svfiprintf_r+0x52>
 800c5e8:	460c      	mov	r4, r1
 800c5ea:	2001      	movs	r0, #1
 800c5ec:	fb0c 3202 	mla	r2, ip, r2, r3
 800c5f0:	e7a8      	b.n	800c544 <_svfiprintf_r+0xd8>
 800c5f2:	2300      	movs	r3, #0
 800c5f4:	f04f 0c0a 	mov.w	ip, #10
 800c5f8:	4619      	mov	r1, r3
 800c5fa:	3401      	adds	r4, #1
 800c5fc:	9305      	str	r3, [sp, #20]
 800c5fe:	4620      	mov	r0, r4
 800c600:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c604:	3a30      	subs	r2, #48	@ 0x30
 800c606:	2a09      	cmp	r2, #9
 800c608:	d903      	bls.n	800c612 <_svfiprintf_r+0x1a6>
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d0c6      	beq.n	800c59c <_svfiprintf_r+0x130>
 800c60e:	9105      	str	r1, [sp, #20]
 800c610:	e7c4      	b.n	800c59c <_svfiprintf_r+0x130>
 800c612:	4604      	mov	r4, r0
 800c614:	2301      	movs	r3, #1
 800c616:	fb0c 2101 	mla	r1, ip, r1, r2
 800c61a:	e7f0      	b.n	800c5fe <_svfiprintf_r+0x192>
 800c61c:	ab03      	add	r3, sp, #12
 800c61e:	9300      	str	r3, [sp, #0]
 800c620:	462a      	mov	r2, r5
 800c622:	4638      	mov	r0, r7
 800c624:	4b0e      	ldr	r3, [pc, #56]	@ (800c660 <_svfiprintf_r+0x1f4>)
 800c626:	a904      	add	r1, sp, #16
 800c628:	f7fc fc92 	bl	8008f50 <_printf_float>
 800c62c:	1c42      	adds	r2, r0, #1
 800c62e:	4606      	mov	r6, r0
 800c630:	d1d6      	bne.n	800c5e0 <_svfiprintf_r+0x174>
 800c632:	89ab      	ldrh	r3, [r5, #12]
 800c634:	065b      	lsls	r3, r3, #25
 800c636:	f53f af2d 	bmi.w	800c494 <_svfiprintf_r+0x28>
 800c63a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c63c:	e72c      	b.n	800c498 <_svfiprintf_r+0x2c>
 800c63e:	ab03      	add	r3, sp, #12
 800c640:	9300      	str	r3, [sp, #0]
 800c642:	462a      	mov	r2, r5
 800c644:	4638      	mov	r0, r7
 800c646:	4b06      	ldr	r3, [pc, #24]	@ (800c660 <_svfiprintf_r+0x1f4>)
 800c648:	a904      	add	r1, sp, #16
 800c64a:	f7fc ff1f 	bl	800948c <_printf_i>
 800c64e:	e7ed      	b.n	800c62c <_svfiprintf_r+0x1c0>
 800c650:	0800ef11 	.word	0x0800ef11
 800c654:	0800ef17 	.word	0x0800ef17
 800c658:	0800ef1b 	.word	0x0800ef1b
 800c65c:	08008f51 	.word	0x08008f51
 800c660:	0800c3b5 	.word	0x0800c3b5

0800c664 <__sfputc_r>:
 800c664:	6893      	ldr	r3, [r2, #8]
 800c666:	b410      	push	{r4}
 800c668:	3b01      	subs	r3, #1
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	6093      	str	r3, [r2, #8]
 800c66e:	da07      	bge.n	800c680 <__sfputc_r+0x1c>
 800c670:	6994      	ldr	r4, [r2, #24]
 800c672:	42a3      	cmp	r3, r4
 800c674:	db01      	blt.n	800c67a <__sfputc_r+0x16>
 800c676:	290a      	cmp	r1, #10
 800c678:	d102      	bne.n	800c680 <__sfputc_r+0x1c>
 800c67a:	bc10      	pop	{r4}
 800c67c:	f000 b9da 	b.w	800ca34 <__swbuf_r>
 800c680:	6813      	ldr	r3, [r2, #0]
 800c682:	1c58      	adds	r0, r3, #1
 800c684:	6010      	str	r0, [r2, #0]
 800c686:	7019      	strb	r1, [r3, #0]
 800c688:	4608      	mov	r0, r1
 800c68a:	bc10      	pop	{r4}
 800c68c:	4770      	bx	lr

0800c68e <__sfputs_r>:
 800c68e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c690:	4606      	mov	r6, r0
 800c692:	460f      	mov	r7, r1
 800c694:	4614      	mov	r4, r2
 800c696:	18d5      	adds	r5, r2, r3
 800c698:	42ac      	cmp	r4, r5
 800c69a:	d101      	bne.n	800c6a0 <__sfputs_r+0x12>
 800c69c:	2000      	movs	r0, #0
 800c69e:	e007      	b.n	800c6b0 <__sfputs_r+0x22>
 800c6a0:	463a      	mov	r2, r7
 800c6a2:	4630      	mov	r0, r6
 800c6a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c6a8:	f7ff ffdc 	bl	800c664 <__sfputc_r>
 800c6ac:	1c43      	adds	r3, r0, #1
 800c6ae:	d1f3      	bne.n	800c698 <__sfputs_r+0xa>
 800c6b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c6b4 <_vfiprintf_r>:
 800c6b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6b8:	460d      	mov	r5, r1
 800c6ba:	4614      	mov	r4, r2
 800c6bc:	4698      	mov	r8, r3
 800c6be:	4606      	mov	r6, r0
 800c6c0:	b09d      	sub	sp, #116	@ 0x74
 800c6c2:	b118      	cbz	r0, 800c6cc <_vfiprintf_r+0x18>
 800c6c4:	6a03      	ldr	r3, [r0, #32]
 800c6c6:	b90b      	cbnz	r3, 800c6cc <_vfiprintf_r+0x18>
 800c6c8:	f7fd fa9c 	bl	8009c04 <__sinit>
 800c6cc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c6ce:	07d9      	lsls	r1, r3, #31
 800c6d0:	d405      	bmi.n	800c6de <_vfiprintf_r+0x2a>
 800c6d2:	89ab      	ldrh	r3, [r5, #12]
 800c6d4:	059a      	lsls	r2, r3, #22
 800c6d6:	d402      	bmi.n	800c6de <_vfiprintf_r+0x2a>
 800c6d8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c6da:	f7fd fbd6 	bl	8009e8a <__retarget_lock_acquire_recursive>
 800c6de:	89ab      	ldrh	r3, [r5, #12]
 800c6e0:	071b      	lsls	r3, r3, #28
 800c6e2:	d501      	bpl.n	800c6e8 <_vfiprintf_r+0x34>
 800c6e4:	692b      	ldr	r3, [r5, #16]
 800c6e6:	b99b      	cbnz	r3, 800c710 <_vfiprintf_r+0x5c>
 800c6e8:	4629      	mov	r1, r5
 800c6ea:	4630      	mov	r0, r6
 800c6ec:	f000 f9e0 	bl	800cab0 <__swsetup_r>
 800c6f0:	b170      	cbz	r0, 800c710 <_vfiprintf_r+0x5c>
 800c6f2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c6f4:	07dc      	lsls	r4, r3, #31
 800c6f6:	d504      	bpl.n	800c702 <_vfiprintf_r+0x4e>
 800c6f8:	f04f 30ff 	mov.w	r0, #4294967295
 800c6fc:	b01d      	add	sp, #116	@ 0x74
 800c6fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c702:	89ab      	ldrh	r3, [r5, #12]
 800c704:	0598      	lsls	r0, r3, #22
 800c706:	d4f7      	bmi.n	800c6f8 <_vfiprintf_r+0x44>
 800c708:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c70a:	f7fd fbbf 	bl	8009e8c <__retarget_lock_release_recursive>
 800c70e:	e7f3      	b.n	800c6f8 <_vfiprintf_r+0x44>
 800c710:	2300      	movs	r3, #0
 800c712:	9309      	str	r3, [sp, #36]	@ 0x24
 800c714:	2320      	movs	r3, #32
 800c716:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c71a:	2330      	movs	r3, #48	@ 0x30
 800c71c:	f04f 0901 	mov.w	r9, #1
 800c720:	f8cd 800c 	str.w	r8, [sp, #12]
 800c724:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800c8d0 <_vfiprintf_r+0x21c>
 800c728:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c72c:	4623      	mov	r3, r4
 800c72e:	469a      	mov	sl, r3
 800c730:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c734:	b10a      	cbz	r2, 800c73a <_vfiprintf_r+0x86>
 800c736:	2a25      	cmp	r2, #37	@ 0x25
 800c738:	d1f9      	bne.n	800c72e <_vfiprintf_r+0x7a>
 800c73a:	ebba 0b04 	subs.w	fp, sl, r4
 800c73e:	d00b      	beq.n	800c758 <_vfiprintf_r+0xa4>
 800c740:	465b      	mov	r3, fp
 800c742:	4622      	mov	r2, r4
 800c744:	4629      	mov	r1, r5
 800c746:	4630      	mov	r0, r6
 800c748:	f7ff ffa1 	bl	800c68e <__sfputs_r>
 800c74c:	3001      	adds	r0, #1
 800c74e:	f000 80a7 	beq.w	800c8a0 <_vfiprintf_r+0x1ec>
 800c752:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c754:	445a      	add	r2, fp
 800c756:	9209      	str	r2, [sp, #36]	@ 0x24
 800c758:	f89a 3000 	ldrb.w	r3, [sl]
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	f000 809f 	beq.w	800c8a0 <_vfiprintf_r+0x1ec>
 800c762:	2300      	movs	r3, #0
 800c764:	f04f 32ff 	mov.w	r2, #4294967295
 800c768:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c76c:	f10a 0a01 	add.w	sl, sl, #1
 800c770:	9304      	str	r3, [sp, #16]
 800c772:	9307      	str	r3, [sp, #28]
 800c774:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c778:	931a      	str	r3, [sp, #104]	@ 0x68
 800c77a:	4654      	mov	r4, sl
 800c77c:	2205      	movs	r2, #5
 800c77e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c782:	4853      	ldr	r0, [pc, #332]	@ (800c8d0 <_vfiprintf_r+0x21c>)
 800c784:	f7fd fb83 	bl	8009e8e <memchr>
 800c788:	9a04      	ldr	r2, [sp, #16]
 800c78a:	b9d8      	cbnz	r0, 800c7c4 <_vfiprintf_r+0x110>
 800c78c:	06d1      	lsls	r1, r2, #27
 800c78e:	bf44      	itt	mi
 800c790:	2320      	movmi	r3, #32
 800c792:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c796:	0713      	lsls	r3, r2, #28
 800c798:	bf44      	itt	mi
 800c79a:	232b      	movmi	r3, #43	@ 0x2b
 800c79c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c7a0:	f89a 3000 	ldrb.w	r3, [sl]
 800c7a4:	2b2a      	cmp	r3, #42	@ 0x2a
 800c7a6:	d015      	beq.n	800c7d4 <_vfiprintf_r+0x120>
 800c7a8:	4654      	mov	r4, sl
 800c7aa:	2000      	movs	r0, #0
 800c7ac:	f04f 0c0a 	mov.w	ip, #10
 800c7b0:	9a07      	ldr	r2, [sp, #28]
 800c7b2:	4621      	mov	r1, r4
 800c7b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c7b8:	3b30      	subs	r3, #48	@ 0x30
 800c7ba:	2b09      	cmp	r3, #9
 800c7bc:	d94b      	bls.n	800c856 <_vfiprintf_r+0x1a2>
 800c7be:	b1b0      	cbz	r0, 800c7ee <_vfiprintf_r+0x13a>
 800c7c0:	9207      	str	r2, [sp, #28]
 800c7c2:	e014      	b.n	800c7ee <_vfiprintf_r+0x13a>
 800c7c4:	eba0 0308 	sub.w	r3, r0, r8
 800c7c8:	fa09 f303 	lsl.w	r3, r9, r3
 800c7cc:	4313      	orrs	r3, r2
 800c7ce:	46a2      	mov	sl, r4
 800c7d0:	9304      	str	r3, [sp, #16]
 800c7d2:	e7d2      	b.n	800c77a <_vfiprintf_r+0xc6>
 800c7d4:	9b03      	ldr	r3, [sp, #12]
 800c7d6:	1d19      	adds	r1, r3, #4
 800c7d8:	681b      	ldr	r3, [r3, #0]
 800c7da:	9103      	str	r1, [sp, #12]
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	bfbb      	ittet	lt
 800c7e0:	425b      	neglt	r3, r3
 800c7e2:	f042 0202 	orrlt.w	r2, r2, #2
 800c7e6:	9307      	strge	r3, [sp, #28]
 800c7e8:	9307      	strlt	r3, [sp, #28]
 800c7ea:	bfb8      	it	lt
 800c7ec:	9204      	strlt	r2, [sp, #16]
 800c7ee:	7823      	ldrb	r3, [r4, #0]
 800c7f0:	2b2e      	cmp	r3, #46	@ 0x2e
 800c7f2:	d10a      	bne.n	800c80a <_vfiprintf_r+0x156>
 800c7f4:	7863      	ldrb	r3, [r4, #1]
 800c7f6:	2b2a      	cmp	r3, #42	@ 0x2a
 800c7f8:	d132      	bne.n	800c860 <_vfiprintf_r+0x1ac>
 800c7fa:	9b03      	ldr	r3, [sp, #12]
 800c7fc:	3402      	adds	r4, #2
 800c7fe:	1d1a      	adds	r2, r3, #4
 800c800:	681b      	ldr	r3, [r3, #0]
 800c802:	9203      	str	r2, [sp, #12]
 800c804:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c808:	9305      	str	r3, [sp, #20]
 800c80a:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800c8d4 <_vfiprintf_r+0x220>
 800c80e:	2203      	movs	r2, #3
 800c810:	4650      	mov	r0, sl
 800c812:	7821      	ldrb	r1, [r4, #0]
 800c814:	f7fd fb3b 	bl	8009e8e <memchr>
 800c818:	b138      	cbz	r0, 800c82a <_vfiprintf_r+0x176>
 800c81a:	2240      	movs	r2, #64	@ 0x40
 800c81c:	9b04      	ldr	r3, [sp, #16]
 800c81e:	eba0 000a 	sub.w	r0, r0, sl
 800c822:	4082      	lsls	r2, r0
 800c824:	4313      	orrs	r3, r2
 800c826:	3401      	adds	r4, #1
 800c828:	9304      	str	r3, [sp, #16]
 800c82a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c82e:	2206      	movs	r2, #6
 800c830:	4829      	ldr	r0, [pc, #164]	@ (800c8d8 <_vfiprintf_r+0x224>)
 800c832:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c836:	f7fd fb2a 	bl	8009e8e <memchr>
 800c83a:	2800      	cmp	r0, #0
 800c83c:	d03f      	beq.n	800c8be <_vfiprintf_r+0x20a>
 800c83e:	4b27      	ldr	r3, [pc, #156]	@ (800c8dc <_vfiprintf_r+0x228>)
 800c840:	bb1b      	cbnz	r3, 800c88a <_vfiprintf_r+0x1d6>
 800c842:	9b03      	ldr	r3, [sp, #12]
 800c844:	3307      	adds	r3, #7
 800c846:	f023 0307 	bic.w	r3, r3, #7
 800c84a:	3308      	adds	r3, #8
 800c84c:	9303      	str	r3, [sp, #12]
 800c84e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c850:	443b      	add	r3, r7
 800c852:	9309      	str	r3, [sp, #36]	@ 0x24
 800c854:	e76a      	b.n	800c72c <_vfiprintf_r+0x78>
 800c856:	460c      	mov	r4, r1
 800c858:	2001      	movs	r0, #1
 800c85a:	fb0c 3202 	mla	r2, ip, r2, r3
 800c85e:	e7a8      	b.n	800c7b2 <_vfiprintf_r+0xfe>
 800c860:	2300      	movs	r3, #0
 800c862:	f04f 0c0a 	mov.w	ip, #10
 800c866:	4619      	mov	r1, r3
 800c868:	3401      	adds	r4, #1
 800c86a:	9305      	str	r3, [sp, #20]
 800c86c:	4620      	mov	r0, r4
 800c86e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c872:	3a30      	subs	r2, #48	@ 0x30
 800c874:	2a09      	cmp	r2, #9
 800c876:	d903      	bls.n	800c880 <_vfiprintf_r+0x1cc>
 800c878:	2b00      	cmp	r3, #0
 800c87a:	d0c6      	beq.n	800c80a <_vfiprintf_r+0x156>
 800c87c:	9105      	str	r1, [sp, #20]
 800c87e:	e7c4      	b.n	800c80a <_vfiprintf_r+0x156>
 800c880:	4604      	mov	r4, r0
 800c882:	2301      	movs	r3, #1
 800c884:	fb0c 2101 	mla	r1, ip, r1, r2
 800c888:	e7f0      	b.n	800c86c <_vfiprintf_r+0x1b8>
 800c88a:	ab03      	add	r3, sp, #12
 800c88c:	9300      	str	r3, [sp, #0]
 800c88e:	462a      	mov	r2, r5
 800c890:	4630      	mov	r0, r6
 800c892:	4b13      	ldr	r3, [pc, #76]	@ (800c8e0 <_vfiprintf_r+0x22c>)
 800c894:	a904      	add	r1, sp, #16
 800c896:	f7fc fb5b 	bl	8008f50 <_printf_float>
 800c89a:	4607      	mov	r7, r0
 800c89c:	1c78      	adds	r0, r7, #1
 800c89e:	d1d6      	bne.n	800c84e <_vfiprintf_r+0x19a>
 800c8a0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c8a2:	07d9      	lsls	r1, r3, #31
 800c8a4:	d405      	bmi.n	800c8b2 <_vfiprintf_r+0x1fe>
 800c8a6:	89ab      	ldrh	r3, [r5, #12]
 800c8a8:	059a      	lsls	r2, r3, #22
 800c8aa:	d402      	bmi.n	800c8b2 <_vfiprintf_r+0x1fe>
 800c8ac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c8ae:	f7fd faed 	bl	8009e8c <__retarget_lock_release_recursive>
 800c8b2:	89ab      	ldrh	r3, [r5, #12]
 800c8b4:	065b      	lsls	r3, r3, #25
 800c8b6:	f53f af1f 	bmi.w	800c6f8 <_vfiprintf_r+0x44>
 800c8ba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c8bc:	e71e      	b.n	800c6fc <_vfiprintf_r+0x48>
 800c8be:	ab03      	add	r3, sp, #12
 800c8c0:	9300      	str	r3, [sp, #0]
 800c8c2:	462a      	mov	r2, r5
 800c8c4:	4630      	mov	r0, r6
 800c8c6:	4b06      	ldr	r3, [pc, #24]	@ (800c8e0 <_vfiprintf_r+0x22c>)
 800c8c8:	a904      	add	r1, sp, #16
 800c8ca:	f7fc fddf 	bl	800948c <_printf_i>
 800c8ce:	e7e4      	b.n	800c89a <_vfiprintf_r+0x1e6>
 800c8d0:	0800ef11 	.word	0x0800ef11
 800c8d4:	0800ef17 	.word	0x0800ef17
 800c8d8:	0800ef1b 	.word	0x0800ef1b
 800c8dc:	08008f51 	.word	0x08008f51
 800c8e0:	0800c68f 	.word	0x0800c68f

0800c8e4 <__sflush_r>:
 800c8e4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c8e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8ea:	0716      	lsls	r6, r2, #28
 800c8ec:	4605      	mov	r5, r0
 800c8ee:	460c      	mov	r4, r1
 800c8f0:	d454      	bmi.n	800c99c <__sflush_r+0xb8>
 800c8f2:	684b      	ldr	r3, [r1, #4]
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	dc02      	bgt.n	800c8fe <__sflush_r+0x1a>
 800c8f8:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	dd48      	ble.n	800c990 <__sflush_r+0xac>
 800c8fe:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c900:	2e00      	cmp	r6, #0
 800c902:	d045      	beq.n	800c990 <__sflush_r+0xac>
 800c904:	2300      	movs	r3, #0
 800c906:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c90a:	682f      	ldr	r7, [r5, #0]
 800c90c:	6a21      	ldr	r1, [r4, #32]
 800c90e:	602b      	str	r3, [r5, #0]
 800c910:	d030      	beq.n	800c974 <__sflush_r+0x90>
 800c912:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c914:	89a3      	ldrh	r3, [r4, #12]
 800c916:	0759      	lsls	r1, r3, #29
 800c918:	d505      	bpl.n	800c926 <__sflush_r+0x42>
 800c91a:	6863      	ldr	r3, [r4, #4]
 800c91c:	1ad2      	subs	r2, r2, r3
 800c91e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c920:	b10b      	cbz	r3, 800c926 <__sflush_r+0x42>
 800c922:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c924:	1ad2      	subs	r2, r2, r3
 800c926:	2300      	movs	r3, #0
 800c928:	4628      	mov	r0, r5
 800c92a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c92c:	6a21      	ldr	r1, [r4, #32]
 800c92e:	47b0      	blx	r6
 800c930:	1c43      	adds	r3, r0, #1
 800c932:	89a3      	ldrh	r3, [r4, #12]
 800c934:	d106      	bne.n	800c944 <__sflush_r+0x60>
 800c936:	6829      	ldr	r1, [r5, #0]
 800c938:	291d      	cmp	r1, #29
 800c93a:	d82b      	bhi.n	800c994 <__sflush_r+0xb0>
 800c93c:	4a28      	ldr	r2, [pc, #160]	@ (800c9e0 <__sflush_r+0xfc>)
 800c93e:	410a      	asrs	r2, r1
 800c940:	07d6      	lsls	r6, r2, #31
 800c942:	d427      	bmi.n	800c994 <__sflush_r+0xb0>
 800c944:	2200      	movs	r2, #0
 800c946:	6062      	str	r2, [r4, #4]
 800c948:	6922      	ldr	r2, [r4, #16]
 800c94a:	04d9      	lsls	r1, r3, #19
 800c94c:	6022      	str	r2, [r4, #0]
 800c94e:	d504      	bpl.n	800c95a <__sflush_r+0x76>
 800c950:	1c42      	adds	r2, r0, #1
 800c952:	d101      	bne.n	800c958 <__sflush_r+0x74>
 800c954:	682b      	ldr	r3, [r5, #0]
 800c956:	b903      	cbnz	r3, 800c95a <__sflush_r+0x76>
 800c958:	6560      	str	r0, [r4, #84]	@ 0x54
 800c95a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c95c:	602f      	str	r7, [r5, #0]
 800c95e:	b1b9      	cbz	r1, 800c990 <__sflush_r+0xac>
 800c960:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c964:	4299      	cmp	r1, r3
 800c966:	d002      	beq.n	800c96e <__sflush_r+0x8a>
 800c968:	4628      	mov	r0, r5
 800c96a:	f7fe f901 	bl	800ab70 <_free_r>
 800c96e:	2300      	movs	r3, #0
 800c970:	6363      	str	r3, [r4, #52]	@ 0x34
 800c972:	e00d      	b.n	800c990 <__sflush_r+0xac>
 800c974:	2301      	movs	r3, #1
 800c976:	4628      	mov	r0, r5
 800c978:	47b0      	blx	r6
 800c97a:	4602      	mov	r2, r0
 800c97c:	1c50      	adds	r0, r2, #1
 800c97e:	d1c9      	bne.n	800c914 <__sflush_r+0x30>
 800c980:	682b      	ldr	r3, [r5, #0]
 800c982:	2b00      	cmp	r3, #0
 800c984:	d0c6      	beq.n	800c914 <__sflush_r+0x30>
 800c986:	2b1d      	cmp	r3, #29
 800c988:	d001      	beq.n	800c98e <__sflush_r+0xaa>
 800c98a:	2b16      	cmp	r3, #22
 800c98c:	d11d      	bne.n	800c9ca <__sflush_r+0xe6>
 800c98e:	602f      	str	r7, [r5, #0]
 800c990:	2000      	movs	r0, #0
 800c992:	e021      	b.n	800c9d8 <__sflush_r+0xf4>
 800c994:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c998:	b21b      	sxth	r3, r3
 800c99a:	e01a      	b.n	800c9d2 <__sflush_r+0xee>
 800c99c:	690f      	ldr	r7, [r1, #16]
 800c99e:	2f00      	cmp	r7, #0
 800c9a0:	d0f6      	beq.n	800c990 <__sflush_r+0xac>
 800c9a2:	0793      	lsls	r3, r2, #30
 800c9a4:	bf18      	it	ne
 800c9a6:	2300      	movne	r3, #0
 800c9a8:	680e      	ldr	r6, [r1, #0]
 800c9aa:	bf08      	it	eq
 800c9ac:	694b      	ldreq	r3, [r1, #20]
 800c9ae:	1bf6      	subs	r6, r6, r7
 800c9b0:	600f      	str	r7, [r1, #0]
 800c9b2:	608b      	str	r3, [r1, #8]
 800c9b4:	2e00      	cmp	r6, #0
 800c9b6:	ddeb      	ble.n	800c990 <__sflush_r+0xac>
 800c9b8:	4633      	mov	r3, r6
 800c9ba:	463a      	mov	r2, r7
 800c9bc:	4628      	mov	r0, r5
 800c9be:	6a21      	ldr	r1, [r4, #32]
 800c9c0:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800c9c4:	47e0      	blx	ip
 800c9c6:	2800      	cmp	r0, #0
 800c9c8:	dc07      	bgt.n	800c9da <__sflush_r+0xf6>
 800c9ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c9ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c9d2:	f04f 30ff 	mov.w	r0, #4294967295
 800c9d6:	81a3      	strh	r3, [r4, #12]
 800c9d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c9da:	4407      	add	r7, r0
 800c9dc:	1a36      	subs	r6, r6, r0
 800c9de:	e7e9      	b.n	800c9b4 <__sflush_r+0xd0>
 800c9e0:	dfbffffe 	.word	0xdfbffffe

0800c9e4 <_fflush_r>:
 800c9e4:	b538      	push	{r3, r4, r5, lr}
 800c9e6:	690b      	ldr	r3, [r1, #16]
 800c9e8:	4605      	mov	r5, r0
 800c9ea:	460c      	mov	r4, r1
 800c9ec:	b913      	cbnz	r3, 800c9f4 <_fflush_r+0x10>
 800c9ee:	2500      	movs	r5, #0
 800c9f0:	4628      	mov	r0, r5
 800c9f2:	bd38      	pop	{r3, r4, r5, pc}
 800c9f4:	b118      	cbz	r0, 800c9fe <_fflush_r+0x1a>
 800c9f6:	6a03      	ldr	r3, [r0, #32]
 800c9f8:	b90b      	cbnz	r3, 800c9fe <_fflush_r+0x1a>
 800c9fa:	f7fd f903 	bl	8009c04 <__sinit>
 800c9fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	d0f3      	beq.n	800c9ee <_fflush_r+0xa>
 800ca06:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ca08:	07d0      	lsls	r0, r2, #31
 800ca0a:	d404      	bmi.n	800ca16 <_fflush_r+0x32>
 800ca0c:	0599      	lsls	r1, r3, #22
 800ca0e:	d402      	bmi.n	800ca16 <_fflush_r+0x32>
 800ca10:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ca12:	f7fd fa3a 	bl	8009e8a <__retarget_lock_acquire_recursive>
 800ca16:	4628      	mov	r0, r5
 800ca18:	4621      	mov	r1, r4
 800ca1a:	f7ff ff63 	bl	800c8e4 <__sflush_r>
 800ca1e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ca20:	4605      	mov	r5, r0
 800ca22:	07da      	lsls	r2, r3, #31
 800ca24:	d4e4      	bmi.n	800c9f0 <_fflush_r+0xc>
 800ca26:	89a3      	ldrh	r3, [r4, #12]
 800ca28:	059b      	lsls	r3, r3, #22
 800ca2a:	d4e1      	bmi.n	800c9f0 <_fflush_r+0xc>
 800ca2c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ca2e:	f7fd fa2d 	bl	8009e8c <__retarget_lock_release_recursive>
 800ca32:	e7dd      	b.n	800c9f0 <_fflush_r+0xc>

0800ca34 <__swbuf_r>:
 800ca34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca36:	460e      	mov	r6, r1
 800ca38:	4614      	mov	r4, r2
 800ca3a:	4605      	mov	r5, r0
 800ca3c:	b118      	cbz	r0, 800ca46 <__swbuf_r+0x12>
 800ca3e:	6a03      	ldr	r3, [r0, #32]
 800ca40:	b90b      	cbnz	r3, 800ca46 <__swbuf_r+0x12>
 800ca42:	f7fd f8df 	bl	8009c04 <__sinit>
 800ca46:	69a3      	ldr	r3, [r4, #24]
 800ca48:	60a3      	str	r3, [r4, #8]
 800ca4a:	89a3      	ldrh	r3, [r4, #12]
 800ca4c:	071a      	lsls	r2, r3, #28
 800ca4e:	d501      	bpl.n	800ca54 <__swbuf_r+0x20>
 800ca50:	6923      	ldr	r3, [r4, #16]
 800ca52:	b943      	cbnz	r3, 800ca66 <__swbuf_r+0x32>
 800ca54:	4621      	mov	r1, r4
 800ca56:	4628      	mov	r0, r5
 800ca58:	f000 f82a 	bl	800cab0 <__swsetup_r>
 800ca5c:	b118      	cbz	r0, 800ca66 <__swbuf_r+0x32>
 800ca5e:	f04f 37ff 	mov.w	r7, #4294967295
 800ca62:	4638      	mov	r0, r7
 800ca64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ca66:	6823      	ldr	r3, [r4, #0]
 800ca68:	6922      	ldr	r2, [r4, #16]
 800ca6a:	b2f6      	uxtb	r6, r6
 800ca6c:	1a98      	subs	r0, r3, r2
 800ca6e:	6963      	ldr	r3, [r4, #20]
 800ca70:	4637      	mov	r7, r6
 800ca72:	4283      	cmp	r3, r0
 800ca74:	dc05      	bgt.n	800ca82 <__swbuf_r+0x4e>
 800ca76:	4621      	mov	r1, r4
 800ca78:	4628      	mov	r0, r5
 800ca7a:	f7ff ffb3 	bl	800c9e4 <_fflush_r>
 800ca7e:	2800      	cmp	r0, #0
 800ca80:	d1ed      	bne.n	800ca5e <__swbuf_r+0x2a>
 800ca82:	68a3      	ldr	r3, [r4, #8]
 800ca84:	3b01      	subs	r3, #1
 800ca86:	60a3      	str	r3, [r4, #8]
 800ca88:	6823      	ldr	r3, [r4, #0]
 800ca8a:	1c5a      	adds	r2, r3, #1
 800ca8c:	6022      	str	r2, [r4, #0]
 800ca8e:	701e      	strb	r6, [r3, #0]
 800ca90:	6962      	ldr	r2, [r4, #20]
 800ca92:	1c43      	adds	r3, r0, #1
 800ca94:	429a      	cmp	r2, r3
 800ca96:	d004      	beq.n	800caa2 <__swbuf_r+0x6e>
 800ca98:	89a3      	ldrh	r3, [r4, #12]
 800ca9a:	07db      	lsls	r3, r3, #31
 800ca9c:	d5e1      	bpl.n	800ca62 <__swbuf_r+0x2e>
 800ca9e:	2e0a      	cmp	r6, #10
 800caa0:	d1df      	bne.n	800ca62 <__swbuf_r+0x2e>
 800caa2:	4621      	mov	r1, r4
 800caa4:	4628      	mov	r0, r5
 800caa6:	f7ff ff9d 	bl	800c9e4 <_fflush_r>
 800caaa:	2800      	cmp	r0, #0
 800caac:	d0d9      	beq.n	800ca62 <__swbuf_r+0x2e>
 800caae:	e7d6      	b.n	800ca5e <__swbuf_r+0x2a>

0800cab0 <__swsetup_r>:
 800cab0:	b538      	push	{r3, r4, r5, lr}
 800cab2:	4b29      	ldr	r3, [pc, #164]	@ (800cb58 <__swsetup_r+0xa8>)
 800cab4:	4605      	mov	r5, r0
 800cab6:	6818      	ldr	r0, [r3, #0]
 800cab8:	460c      	mov	r4, r1
 800caba:	b118      	cbz	r0, 800cac4 <__swsetup_r+0x14>
 800cabc:	6a03      	ldr	r3, [r0, #32]
 800cabe:	b90b      	cbnz	r3, 800cac4 <__swsetup_r+0x14>
 800cac0:	f7fd f8a0 	bl	8009c04 <__sinit>
 800cac4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cac8:	0719      	lsls	r1, r3, #28
 800caca:	d422      	bmi.n	800cb12 <__swsetup_r+0x62>
 800cacc:	06da      	lsls	r2, r3, #27
 800cace:	d407      	bmi.n	800cae0 <__swsetup_r+0x30>
 800cad0:	2209      	movs	r2, #9
 800cad2:	602a      	str	r2, [r5, #0]
 800cad4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cad8:	f04f 30ff 	mov.w	r0, #4294967295
 800cadc:	81a3      	strh	r3, [r4, #12]
 800cade:	e033      	b.n	800cb48 <__swsetup_r+0x98>
 800cae0:	0758      	lsls	r0, r3, #29
 800cae2:	d512      	bpl.n	800cb0a <__swsetup_r+0x5a>
 800cae4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cae6:	b141      	cbz	r1, 800cafa <__swsetup_r+0x4a>
 800cae8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800caec:	4299      	cmp	r1, r3
 800caee:	d002      	beq.n	800caf6 <__swsetup_r+0x46>
 800caf0:	4628      	mov	r0, r5
 800caf2:	f7fe f83d 	bl	800ab70 <_free_r>
 800caf6:	2300      	movs	r3, #0
 800caf8:	6363      	str	r3, [r4, #52]	@ 0x34
 800cafa:	89a3      	ldrh	r3, [r4, #12]
 800cafc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800cb00:	81a3      	strh	r3, [r4, #12]
 800cb02:	2300      	movs	r3, #0
 800cb04:	6063      	str	r3, [r4, #4]
 800cb06:	6923      	ldr	r3, [r4, #16]
 800cb08:	6023      	str	r3, [r4, #0]
 800cb0a:	89a3      	ldrh	r3, [r4, #12]
 800cb0c:	f043 0308 	orr.w	r3, r3, #8
 800cb10:	81a3      	strh	r3, [r4, #12]
 800cb12:	6923      	ldr	r3, [r4, #16]
 800cb14:	b94b      	cbnz	r3, 800cb2a <__swsetup_r+0x7a>
 800cb16:	89a3      	ldrh	r3, [r4, #12]
 800cb18:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800cb1c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cb20:	d003      	beq.n	800cb2a <__swsetup_r+0x7a>
 800cb22:	4621      	mov	r1, r4
 800cb24:	4628      	mov	r0, r5
 800cb26:	f000 fc30 	bl	800d38a <__smakebuf_r>
 800cb2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cb2e:	f013 0201 	ands.w	r2, r3, #1
 800cb32:	d00a      	beq.n	800cb4a <__swsetup_r+0x9a>
 800cb34:	2200      	movs	r2, #0
 800cb36:	60a2      	str	r2, [r4, #8]
 800cb38:	6962      	ldr	r2, [r4, #20]
 800cb3a:	4252      	negs	r2, r2
 800cb3c:	61a2      	str	r2, [r4, #24]
 800cb3e:	6922      	ldr	r2, [r4, #16]
 800cb40:	b942      	cbnz	r2, 800cb54 <__swsetup_r+0xa4>
 800cb42:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800cb46:	d1c5      	bne.n	800cad4 <__swsetup_r+0x24>
 800cb48:	bd38      	pop	{r3, r4, r5, pc}
 800cb4a:	0799      	lsls	r1, r3, #30
 800cb4c:	bf58      	it	pl
 800cb4e:	6962      	ldrpl	r2, [r4, #20]
 800cb50:	60a2      	str	r2, [r4, #8]
 800cb52:	e7f4      	b.n	800cb3e <__swsetup_r+0x8e>
 800cb54:	2000      	movs	r0, #0
 800cb56:	e7f7      	b.n	800cb48 <__swsetup_r+0x98>
 800cb58:	20000040 	.word	0x20000040

0800cb5c <strncmp>:
 800cb5c:	b510      	push	{r4, lr}
 800cb5e:	b16a      	cbz	r2, 800cb7c <strncmp+0x20>
 800cb60:	3901      	subs	r1, #1
 800cb62:	1884      	adds	r4, r0, r2
 800cb64:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cb68:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800cb6c:	429a      	cmp	r2, r3
 800cb6e:	d103      	bne.n	800cb78 <strncmp+0x1c>
 800cb70:	42a0      	cmp	r0, r4
 800cb72:	d001      	beq.n	800cb78 <strncmp+0x1c>
 800cb74:	2a00      	cmp	r2, #0
 800cb76:	d1f5      	bne.n	800cb64 <strncmp+0x8>
 800cb78:	1ad0      	subs	r0, r2, r3
 800cb7a:	bd10      	pop	{r4, pc}
 800cb7c:	4610      	mov	r0, r2
 800cb7e:	e7fc      	b.n	800cb7a <strncmp+0x1e>

0800cb80 <_sbrk_r>:
 800cb80:	b538      	push	{r3, r4, r5, lr}
 800cb82:	2300      	movs	r3, #0
 800cb84:	4d05      	ldr	r5, [pc, #20]	@ (800cb9c <_sbrk_r+0x1c>)
 800cb86:	4604      	mov	r4, r0
 800cb88:	4608      	mov	r0, r1
 800cb8a:	602b      	str	r3, [r5, #0]
 800cb8c:	f7f5 ffb8 	bl	8002b00 <_sbrk>
 800cb90:	1c43      	adds	r3, r0, #1
 800cb92:	d102      	bne.n	800cb9a <_sbrk_r+0x1a>
 800cb94:	682b      	ldr	r3, [r5, #0]
 800cb96:	b103      	cbz	r3, 800cb9a <_sbrk_r+0x1a>
 800cb98:	6023      	str	r3, [r4, #0]
 800cb9a:	bd38      	pop	{r3, r4, r5, pc}
 800cb9c:	20000a04 	.word	0x20000a04

0800cba0 <nan>:
 800cba0:	2000      	movs	r0, #0
 800cba2:	4901      	ldr	r1, [pc, #4]	@ (800cba8 <nan+0x8>)
 800cba4:	4770      	bx	lr
 800cba6:	bf00      	nop
 800cba8:	7ff80000 	.word	0x7ff80000

0800cbac <__assert_func>:
 800cbac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cbae:	4614      	mov	r4, r2
 800cbb0:	461a      	mov	r2, r3
 800cbb2:	4b09      	ldr	r3, [pc, #36]	@ (800cbd8 <__assert_func+0x2c>)
 800cbb4:	4605      	mov	r5, r0
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	68d8      	ldr	r0, [r3, #12]
 800cbba:	b954      	cbnz	r4, 800cbd2 <__assert_func+0x26>
 800cbbc:	4b07      	ldr	r3, [pc, #28]	@ (800cbdc <__assert_func+0x30>)
 800cbbe:	461c      	mov	r4, r3
 800cbc0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cbc4:	9100      	str	r1, [sp, #0]
 800cbc6:	462b      	mov	r3, r5
 800cbc8:	4905      	ldr	r1, [pc, #20]	@ (800cbe0 <__assert_func+0x34>)
 800cbca:	f000 fba7 	bl	800d31c <fiprintf>
 800cbce:	f000 fc3b 	bl	800d448 <abort>
 800cbd2:	4b04      	ldr	r3, [pc, #16]	@ (800cbe4 <__assert_func+0x38>)
 800cbd4:	e7f4      	b.n	800cbc0 <__assert_func+0x14>
 800cbd6:	bf00      	nop
 800cbd8:	20000040 	.word	0x20000040
 800cbdc:	0800ef65 	.word	0x0800ef65
 800cbe0:	0800ef37 	.word	0x0800ef37
 800cbe4:	0800ef2a 	.word	0x0800ef2a

0800cbe8 <_calloc_r>:
 800cbe8:	b570      	push	{r4, r5, r6, lr}
 800cbea:	fba1 5402 	umull	r5, r4, r1, r2
 800cbee:	b93c      	cbnz	r4, 800cc00 <_calloc_r+0x18>
 800cbf0:	4629      	mov	r1, r5
 800cbf2:	f7fe f82f 	bl	800ac54 <_malloc_r>
 800cbf6:	4606      	mov	r6, r0
 800cbf8:	b928      	cbnz	r0, 800cc06 <_calloc_r+0x1e>
 800cbfa:	2600      	movs	r6, #0
 800cbfc:	4630      	mov	r0, r6
 800cbfe:	bd70      	pop	{r4, r5, r6, pc}
 800cc00:	220c      	movs	r2, #12
 800cc02:	6002      	str	r2, [r0, #0]
 800cc04:	e7f9      	b.n	800cbfa <_calloc_r+0x12>
 800cc06:	462a      	mov	r2, r5
 800cc08:	4621      	mov	r1, r4
 800cc0a:	f7fd f8c0 	bl	8009d8e <memset>
 800cc0e:	e7f5      	b.n	800cbfc <_calloc_r+0x14>

0800cc10 <rshift>:
 800cc10:	6903      	ldr	r3, [r0, #16]
 800cc12:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cc16:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800cc1a:	f100 0414 	add.w	r4, r0, #20
 800cc1e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800cc22:	dd46      	ble.n	800ccb2 <rshift+0xa2>
 800cc24:	f011 011f 	ands.w	r1, r1, #31
 800cc28:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800cc2c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800cc30:	d10c      	bne.n	800cc4c <rshift+0x3c>
 800cc32:	4629      	mov	r1, r5
 800cc34:	f100 0710 	add.w	r7, r0, #16
 800cc38:	42b1      	cmp	r1, r6
 800cc3a:	d335      	bcc.n	800cca8 <rshift+0x98>
 800cc3c:	1a9b      	subs	r3, r3, r2
 800cc3e:	009b      	lsls	r3, r3, #2
 800cc40:	1eea      	subs	r2, r5, #3
 800cc42:	4296      	cmp	r6, r2
 800cc44:	bf38      	it	cc
 800cc46:	2300      	movcc	r3, #0
 800cc48:	4423      	add	r3, r4
 800cc4a:	e015      	b.n	800cc78 <rshift+0x68>
 800cc4c:	46a1      	mov	r9, r4
 800cc4e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800cc52:	f1c1 0820 	rsb	r8, r1, #32
 800cc56:	40cf      	lsrs	r7, r1
 800cc58:	f105 0e04 	add.w	lr, r5, #4
 800cc5c:	4576      	cmp	r6, lr
 800cc5e:	46f4      	mov	ip, lr
 800cc60:	d816      	bhi.n	800cc90 <rshift+0x80>
 800cc62:	1a9a      	subs	r2, r3, r2
 800cc64:	0092      	lsls	r2, r2, #2
 800cc66:	3a04      	subs	r2, #4
 800cc68:	3501      	adds	r5, #1
 800cc6a:	42ae      	cmp	r6, r5
 800cc6c:	bf38      	it	cc
 800cc6e:	2200      	movcc	r2, #0
 800cc70:	18a3      	adds	r3, r4, r2
 800cc72:	50a7      	str	r7, [r4, r2]
 800cc74:	b107      	cbz	r7, 800cc78 <rshift+0x68>
 800cc76:	3304      	adds	r3, #4
 800cc78:	42a3      	cmp	r3, r4
 800cc7a:	eba3 0204 	sub.w	r2, r3, r4
 800cc7e:	bf08      	it	eq
 800cc80:	2300      	moveq	r3, #0
 800cc82:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800cc86:	6102      	str	r2, [r0, #16]
 800cc88:	bf08      	it	eq
 800cc8a:	6143      	streq	r3, [r0, #20]
 800cc8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cc90:	f8dc c000 	ldr.w	ip, [ip]
 800cc94:	fa0c fc08 	lsl.w	ip, ip, r8
 800cc98:	ea4c 0707 	orr.w	r7, ip, r7
 800cc9c:	f849 7b04 	str.w	r7, [r9], #4
 800cca0:	f85e 7b04 	ldr.w	r7, [lr], #4
 800cca4:	40cf      	lsrs	r7, r1
 800cca6:	e7d9      	b.n	800cc5c <rshift+0x4c>
 800cca8:	f851 cb04 	ldr.w	ip, [r1], #4
 800ccac:	f847 cf04 	str.w	ip, [r7, #4]!
 800ccb0:	e7c2      	b.n	800cc38 <rshift+0x28>
 800ccb2:	4623      	mov	r3, r4
 800ccb4:	e7e0      	b.n	800cc78 <rshift+0x68>

0800ccb6 <__hexdig_fun>:
 800ccb6:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800ccba:	2b09      	cmp	r3, #9
 800ccbc:	d802      	bhi.n	800ccc4 <__hexdig_fun+0xe>
 800ccbe:	3820      	subs	r0, #32
 800ccc0:	b2c0      	uxtb	r0, r0
 800ccc2:	4770      	bx	lr
 800ccc4:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800ccc8:	2b05      	cmp	r3, #5
 800ccca:	d801      	bhi.n	800ccd0 <__hexdig_fun+0x1a>
 800cccc:	3847      	subs	r0, #71	@ 0x47
 800ccce:	e7f7      	b.n	800ccc0 <__hexdig_fun+0xa>
 800ccd0:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800ccd4:	2b05      	cmp	r3, #5
 800ccd6:	d801      	bhi.n	800ccdc <__hexdig_fun+0x26>
 800ccd8:	3827      	subs	r0, #39	@ 0x27
 800ccda:	e7f1      	b.n	800ccc0 <__hexdig_fun+0xa>
 800ccdc:	2000      	movs	r0, #0
 800ccde:	4770      	bx	lr

0800cce0 <__gethex>:
 800cce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cce4:	468a      	mov	sl, r1
 800cce6:	4690      	mov	r8, r2
 800cce8:	b085      	sub	sp, #20
 800ccea:	9302      	str	r3, [sp, #8]
 800ccec:	680b      	ldr	r3, [r1, #0]
 800ccee:	9001      	str	r0, [sp, #4]
 800ccf0:	1c9c      	adds	r4, r3, #2
 800ccf2:	46a1      	mov	r9, r4
 800ccf4:	f814 0b01 	ldrb.w	r0, [r4], #1
 800ccf8:	2830      	cmp	r0, #48	@ 0x30
 800ccfa:	d0fa      	beq.n	800ccf2 <__gethex+0x12>
 800ccfc:	eba9 0303 	sub.w	r3, r9, r3
 800cd00:	f1a3 0b02 	sub.w	fp, r3, #2
 800cd04:	f7ff ffd7 	bl	800ccb6 <__hexdig_fun>
 800cd08:	4605      	mov	r5, r0
 800cd0a:	2800      	cmp	r0, #0
 800cd0c:	d168      	bne.n	800cde0 <__gethex+0x100>
 800cd0e:	2201      	movs	r2, #1
 800cd10:	4648      	mov	r0, r9
 800cd12:	499f      	ldr	r1, [pc, #636]	@ (800cf90 <__gethex+0x2b0>)
 800cd14:	f7ff ff22 	bl	800cb5c <strncmp>
 800cd18:	4607      	mov	r7, r0
 800cd1a:	2800      	cmp	r0, #0
 800cd1c:	d167      	bne.n	800cdee <__gethex+0x10e>
 800cd1e:	f899 0001 	ldrb.w	r0, [r9, #1]
 800cd22:	4626      	mov	r6, r4
 800cd24:	f7ff ffc7 	bl	800ccb6 <__hexdig_fun>
 800cd28:	2800      	cmp	r0, #0
 800cd2a:	d062      	beq.n	800cdf2 <__gethex+0x112>
 800cd2c:	4623      	mov	r3, r4
 800cd2e:	7818      	ldrb	r0, [r3, #0]
 800cd30:	4699      	mov	r9, r3
 800cd32:	2830      	cmp	r0, #48	@ 0x30
 800cd34:	f103 0301 	add.w	r3, r3, #1
 800cd38:	d0f9      	beq.n	800cd2e <__gethex+0x4e>
 800cd3a:	f7ff ffbc 	bl	800ccb6 <__hexdig_fun>
 800cd3e:	fab0 f580 	clz	r5, r0
 800cd42:	f04f 0b01 	mov.w	fp, #1
 800cd46:	096d      	lsrs	r5, r5, #5
 800cd48:	464a      	mov	r2, r9
 800cd4a:	4616      	mov	r6, r2
 800cd4c:	7830      	ldrb	r0, [r6, #0]
 800cd4e:	3201      	adds	r2, #1
 800cd50:	f7ff ffb1 	bl	800ccb6 <__hexdig_fun>
 800cd54:	2800      	cmp	r0, #0
 800cd56:	d1f8      	bne.n	800cd4a <__gethex+0x6a>
 800cd58:	2201      	movs	r2, #1
 800cd5a:	4630      	mov	r0, r6
 800cd5c:	498c      	ldr	r1, [pc, #560]	@ (800cf90 <__gethex+0x2b0>)
 800cd5e:	f7ff fefd 	bl	800cb5c <strncmp>
 800cd62:	2800      	cmp	r0, #0
 800cd64:	d13f      	bne.n	800cde6 <__gethex+0x106>
 800cd66:	b944      	cbnz	r4, 800cd7a <__gethex+0x9a>
 800cd68:	1c74      	adds	r4, r6, #1
 800cd6a:	4622      	mov	r2, r4
 800cd6c:	4616      	mov	r6, r2
 800cd6e:	7830      	ldrb	r0, [r6, #0]
 800cd70:	3201      	adds	r2, #1
 800cd72:	f7ff ffa0 	bl	800ccb6 <__hexdig_fun>
 800cd76:	2800      	cmp	r0, #0
 800cd78:	d1f8      	bne.n	800cd6c <__gethex+0x8c>
 800cd7a:	1ba4      	subs	r4, r4, r6
 800cd7c:	00a7      	lsls	r7, r4, #2
 800cd7e:	7833      	ldrb	r3, [r6, #0]
 800cd80:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800cd84:	2b50      	cmp	r3, #80	@ 0x50
 800cd86:	d13e      	bne.n	800ce06 <__gethex+0x126>
 800cd88:	7873      	ldrb	r3, [r6, #1]
 800cd8a:	2b2b      	cmp	r3, #43	@ 0x2b
 800cd8c:	d033      	beq.n	800cdf6 <__gethex+0x116>
 800cd8e:	2b2d      	cmp	r3, #45	@ 0x2d
 800cd90:	d034      	beq.n	800cdfc <__gethex+0x11c>
 800cd92:	2400      	movs	r4, #0
 800cd94:	1c71      	adds	r1, r6, #1
 800cd96:	7808      	ldrb	r0, [r1, #0]
 800cd98:	f7ff ff8d 	bl	800ccb6 <__hexdig_fun>
 800cd9c:	1e43      	subs	r3, r0, #1
 800cd9e:	b2db      	uxtb	r3, r3
 800cda0:	2b18      	cmp	r3, #24
 800cda2:	d830      	bhi.n	800ce06 <__gethex+0x126>
 800cda4:	f1a0 0210 	sub.w	r2, r0, #16
 800cda8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800cdac:	f7ff ff83 	bl	800ccb6 <__hexdig_fun>
 800cdb0:	f100 3cff 	add.w	ip, r0, #4294967295
 800cdb4:	fa5f fc8c 	uxtb.w	ip, ip
 800cdb8:	f1bc 0f18 	cmp.w	ip, #24
 800cdbc:	f04f 030a 	mov.w	r3, #10
 800cdc0:	d91e      	bls.n	800ce00 <__gethex+0x120>
 800cdc2:	b104      	cbz	r4, 800cdc6 <__gethex+0xe6>
 800cdc4:	4252      	negs	r2, r2
 800cdc6:	4417      	add	r7, r2
 800cdc8:	f8ca 1000 	str.w	r1, [sl]
 800cdcc:	b1ed      	cbz	r5, 800ce0a <__gethex+0x12a>
 800cdce:	f1bb 0f00 	cmp.w	fp, #0
 800cdd2:	bf0c      	ite	eq
 800cdd4:	2506      	moveq	r5, #6
 800cdd6:	2500      	movne	r5, #0
 800cdd8:	4628      	mov	r0, r5
 800cdda:	b005      	add	sp, #20
 800cddc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cde0:	2500      	movs	r5, #0
 800cde2:	462c      	mov	r4, r5
 800cde4:	e7b0      	b.n	800cd48 <__gethex+0x68>
 800cde6:	2c00      	cmp	r4, #0
 800cde8:	d1c7      	bne.n	800cd7a <__gethex+0x9a>
 800cdea:	4627      	mov	r7, r4
 800cdec:	e7c7      	b.n	800cd7e <__gethex+0x9e>
 800cdee:	464e      	mov	r6, r9
 800cdf0:	462f      	mov	r7, r5
 800cdf2:	2501      	movs	r5, #1
 800cdf4:	e7c3      	b.n	800cd7e <__gethex+0x9e>
 800cdf6:	2400      	movs	r4, #0
 800cdf8:	1cb1      	adds	r1, r6, #2
 800cdfa:	e7cc      	b.n	800cd96 <__gethex+0xb6>
 800cdfc:	2401      	movs	r4, #1
 800cdfe:	e7fb      	b.n	800cdf8 <__gethex+0x118>
 800ce00:	fb03 0002 	mla	r0, r3, r2, r0
 800ce04:	e7ce      	b.n	800cda4 <__gethex+0xc4>
 800ce06:	4631      	mov	r1, r6
 800ce08:	e7de      	b.n	800cdc8 <__gethex+0xe8>
 800ce0a:	4629      	mov	r1, r5
 800ce0c:	eba6 0309 	sub.w	r3, r6, r9
 800ce10:	3b01      	subs	r3, #1
 800ce12:	2b07      	cmp	r3, #7
 800ce14:	dc0a      	bgt.n	800ce2c <__gethex+0x14c>
 800ce16:	9801      	ldr	r0, [sp, #4]
 800ce18:	f7fd ffa8 	bl	800ad6c <_Balloc>
 800ce1c:	4604      	mov	r4, r0
 800ce1e:	b940      	cbnz	r0, 800ce32 <__gethex+0x152>
 800ce20:	4602      	mov	r2, r0
 800ce22:	21e4      	movs	r1, #228	@ 0xe4
 800ce24:	4b5b      	ldr	r3, [pc, #364]	@ (800cf94 <__gethex+0x2b4>)
 800ce26:	485c      	ldr	r0, [pc, #368]	@ (800cf98 <__gethex+0x2b8>)
 800ce28:	f7ff fec0 	bl	800cbac <__assert_func>
 800ce2c:	3101      	adds	r1, #1
 800ce2e:	105b      	asrs	r3, r3, #1
 800ce30:	e7ef      	b.n	800ce12 <__gethex+0x132>
 800ce32:	2300      	movs	r3, #0
 800ce34:	f100 0a14 	add.w	sl, r0, #20
 800ce38:	4655      	mov	r5, sl
 800ce3a:	469b      	mov	fp, r3
 800ce3c:	45b1      	cmp	r9, r6
 800ce3e:	d337      	bcc.n	800ceb0 <__gethex+0x1d0>
 800ce40:	f845 bb04 	str.w	fp, [r5], #4
 800ce44:	eba5 050a 	sub.w	r5, r5, sl
 800ce48:	10ad      	asrs	r5, r5, #2
 800ce4a:	6125      	str	r5, [r4, #16]
 800ce4c:	4658      	mov	r0, fp
 800ce4e:	f7fe f87f 	bl	800af50 <__hi0bits>
 800ce52:	016d      	lsls	r5, r5, #5
 800ce54:	f8d8 6000 	ldr.w	r6, [r8]
 800ce58:	1a2d      	subs	r5, r5, r0
 800ce5a:	42b5      	cmp	r5, r6
 800ce5c:	dd54      	ble.n	800cf08 <__gethex+0x228>
 800ce5e:	1bad      	subs	r5, r5, r6
 800ce60:	4629      	mov	r1, r5
 800ce62:	4620      	mov	r0, r4
 800ce64:	f7fe fc07 	bl	800b676 <__any_on>
 800ce68:	4681      	mov	r9, r0
 800ce6a:	b178      	cbz	r0, 800ce8c <__gethex+0x1ac>
 800ce6c:	f04f 0901 	mov.w	r9, #1
 800ce70:	1e6b      	subs	r3, r5, #1
 800ce72:	1159      	asrs	r1, r3, #5
 800ce74:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800ce78:	f003 021f 	and.w	r2, r3, #31
 800ce7c:	fa09 f202 	lsl.w	r2, r9, r2
 800ce80:	420a      	tst	r2, r1
 800ce82:	d003      	beq.n	800ce8c <__gethex+0x1ac>
 800ce84:	454b      	cmp	r3, r9
 800ce86:	dc36      	bgt.n	800cef6 <__gethex+0x216>
 800ce88:	f04f 0902 	mov.w	r9, #2
 800ce8c:	4629      	mov	r1, r5
 800ce8e:	4620      	mov	r0, r4
 800ce90:	f7ff febe 	bl	800cc10 <rshift>
 800ce94:	442f      	add	r7, r5
 800ce96:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ce9a:	42bb      	cmp	r3, r7
 800ce9c:	da42      	bge.n	800cf24 <__gethex+0x244>
 800ce9e:	4621      	mov	r1, r4
 800cea0:	9801      	ldr	r0, [sp, #4]
 800cea2:	f7fd ffa3 	bl	800adec <_Bfree>
 800cea6:	2300      	movs	r3, #0
 800cea8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ceaa:	25a3      	movs	r5, #163	@ 0xa3
 800ceac:	6013      	str	r3, [r2, #0]
 800ceae:	e793      	b.n	800cdd8 <__gethex+0xf8>
 800ceb0:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800ceb4:	2a2e      	cmp	r2, #46	@ 0x2e
 800ceb6:	d012      	beq.n	800cede <__gethex+0x1fe>
 800ceb8:	2b20      	cmp	r3, #32
 800ceba:	d104      	bne.n	800cec6 <__gethex+0x1e6>
 800cebc:	f845 bb04 	str.w	fp, [r5], #4
 800cec0:	f04f 0b00 	mov.w	fp, #0
 800cec4:	465b      	mov	r3, fp
 800cec6:	7830      	ldrb	r0, [r6, #0]
 800cec8:	9303      	str	r3, [sp, #12]
 800ceca:	f7ff fef4 	bl	800ccb6 <__hexdig_fun>
 800cece:	9b03      	ldr	r3, [sp, #12]
 800ced0:	f000 000f 	and.w	r0, r0, #15
 800ced4:	4098      	lsls	r0, r3
 800ced6:	ea4b 0b00 	orr.w	fp, fp, r0
 800ceda:	3304      	adds	r3, #4
 800cedc:	e7ae      	b.n	800ce3c <__gethex+0x15c>
 800cede:	45b1      	cmp	r9, r6
 800cee0:	d8ea      	bhi.n	800ceb8 <__gethex+0x1d8>
 800cee2:	2201      	movs	r2, #1
 800cee4:	4630      	mov	r0, r6
 800cee6:	492a      	ldr	r1, [pc, #168]	@ (800cf90 <__gethex+0x2b0>)
 800cee8:	9303      	str	r3, [sp, #12]
 800ceea:	f7ff fe37 	bl	800cb5c <strncmp>
 800ceee:	9b03      	ldr	r3, [sp, #12]
 800cef0:	2800      	cmp	r0, #0
 800cef2:	d1e1      	bne.n	800ceb8 <__gethex+0x1d8>
 800cef4:	e7a2      	b.n	800ce3c <__gethex+0x15c>
 800cef6:	4620      	mov	r0, r4
 800cef8:	1ea9      	subs	r1, r5, #2
 800cefa:	f7fe fbbc 	bl	800b676 <__any_on>
 800cefe:	2800      	cmp	r0, #0
 800cf00:	d0c2      	beq.n	800ce88 <__gethex+0x1a8>
 800cf02:	f04f 0903 	mov.w	r9, #3
 800cf06:	e7c1      	b.n	800ce8c <__gethex+0x1ac>
 800cf08:	da09      	bge.n	800cf1e <__gethex+0x23e>
 800cf0a:	1b75      	subs	r5, r6, r5
 800cf0c:	4621      	mov	r1, r4
 800cf0e:	462a      	mov	r2, r5
 800cf10:	9801      	ldr	r0, [sp, #4]
 800cf12:	f7fe f981 	bl	800b218 <__lshift>
 800cf16:	4604      	mov	r4, r0
 800cf18:	1b7f      	subs	r7, r7, r5
 800cf1a:	f100 0a14 	add.w	sl, r0, #20
 800cf1e:	f04f 0900 	mov.w	r9, #0
 800cf22:	e7b8      	b.n	800ce96 <__gethex+0x1b6>
 800cf24:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800cf28:	42bd      	cmp	r5, r7
 800cf2a:	dd6f      	ble.n	800d00c <__gethex+0x32c>
 800cf2c:	1bed      	subs	r5, r5, r7
 800cf2e:	42ae      	cmp	r6, r5
 800cf30:	dc34      	bgt.n	800cf9c <__gethex+0x2bc>
 800cf32:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800cf36:	2b02      	cmp	r3, #2
 800cf38:	d022      	beq.n	800cf80 <__gethex+0x2a0>
 800cf3a:	2b03      	cmp	r3, #3
 800cf3c:	d024      	beq.n	800cf88 <__gethex+0x2a8>
 800cf3e:	2b01      	cmp	r3, #1
 800cf40:	d115      	bne.n	800cf6e <__gethex+0x28e>
 800cf42:	42ae      	cmp	r6, r5
 800cf44:	d113      	bne.n	800cf6e <__gethex+0x28e>
 800cf46:	2e01      	cmp	r6, #1
 800cf48:	d10b      	bne.n	800cf62 <__gethex+0x282>
 800cf4a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800cf4e:	9a02      	ldr	r2, [sp, #8]
 800cf50:	2562      	movs	r5, #98	@ 0x62
 800cf52:	6013      	str	r3, [r2, #0]
 800cf54:	2301      	movs	r3, #1
 800cf56:	6123      	str	r3, [r4, #16]
 800cf58:	f8ca 3000 	str.w	r3, [sl]
 800cf5c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cf5e:	601c      	str	r4, [r3, #0]
 800cf60:	e73a      	b.n	800cdd8 <__gethex+0xf8>
 800cf62:	4620      	mov	r0, r4
 800cf64:	1e71      	subs	r1, r6, #1
 800cf66:	f7fe fb86 	bl	800b676 <__any_on>
 800cf6a:	2800      	cmp	r0, #0
 800cf6c:	d1ed      	bne.n	800cf4a <__gethex+0x26a>
 800cf6e:	4621      	mov	r1, r4
 800cf70:	9801      	ldr	r0, [sp, #4]
 800cf72:	f7fd ff3b 	bl	800adec <_Bfree>
 800cf76:	2300      	movs	r3, #0
 800cf78:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cf7a:	2550      	movs	r5, #80	@ 0x50
 800cf7c:	6013      	str	r3, [r2, #0]
 800cf7e:	e72b      	b.n	800cdd8 <__gethex+0xf8>
 800cf80:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	d1f3      	bne.n	800cf6e <__gethex+0x28e>
 800cf86:	e7e0      	b.n	800cf4a <__gethex+0x26a>
 800cf88:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	d1dd      	bne.n	800cf4a <__gethex+0x26a>
 800cf8e:	e7ee      	b.n	800cf6e <__gethex+0x28e>
 800cf90:	0800edb8 	.word	0x0800edb8
 800cf94:	0800ec4d 	.word	0x0800ec4d
 800cf98:	0800ef66 	.word	0x0800ef66
 800cf9c:	1e6f      	subs	r7, r5, #1
 800cf9e:	f1b9 0f00 	cmp.w	r9, #0
 800cfa2:	d130      	bne.n	800d006 <__gethex+0x326>
 800cfa4:	b127      	cbz	r7, 800cfb0 <__gethex+0x2d0>
 800cfa6:	4639      	mov	r1, r7
 800cfa8:	4620      	mov	r0, r4
 800cfaa:	f7fe fb64 	bl	800b676 <__any_on>
 800cfae:	4681      	mov	r9, r0
 800cfb0:	2301      	movs	r3, #1
 800cfb2:	4629      	mov	r1, r5
 800cfb4:	1b76      	subs	r6, r6, r5
 800cfb6:	2502      	movs	r5, #2
 800cfb8:	117a      	asrs	r2, r7, #5
 800cfba:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800cfbe:	f007 071f 	and.w	r7, r7, #31
 800cfc2:	40bb      	lsls	r3, r7
 800cfc4:	4213      	tst	r3, r2
 800cfc6:	4620      	mov	r0, r4
 800cfc8:	bf18      	it	ne
 800cfca:	f049 0902 	orrne.w	r9, r9, #2
 800cfce:	f7ff fe1f 	bl	800cc10 <rshift>
 800cfd2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800cfd6:	f1b9 0f00 	cmp.w	r9, #0
 800cfda:	d047      	beq.n	800d06c <__gethex+0x38c>
 800cfdc:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800cfe0:	2b02      	cmp	r3, #2
 800cfe2:	d015      	beq.n	800d010 <__gethex+0x330>
 800cfe4:	2b03      	cmp	r3, #3
 800cfe6:	d017      	beq.n	800d018 <__gethex+0x338>
 800cfe8:	2b01      	cmp	r3, #1
 800cfea:	d109      	bne.n	800d000 <__gethex+0x320>
 800cfec:	f019 0f02 	tst.w	r9, #2
 800cff0:	d006      	beq.n	800d000 <__gethex+0x320>
 800cff2:	f8da 3000 	ldr.w	r3, [sl]
 800cff6:	ea49 0903 	orr.w	r9, r9, r3
 800cffa:	f019 0f01 	tst.w	r9, #1
 800cffe:	d10e      	bne.n	800d01e <__gethex+0x33e>
 800d000:	f045 0510 	orr.w	r5, r5, #16
 800d004:	e032      	b.n	800d06c <__gethex+0x38c>
 800d006:	f04f 0901 	mov.w	r9, #1
 800d00a:	e7d1      	b.n	800cfb0 <__gethex+0x2d0>
 800d00c:	2501      	movs	r5, #1
 800d00e:	e7e2      	b.n	800cfd6 <__gethex+0x2f6>
 800d010:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d012:	f1c3 0301 	rsb	r3, r3, #1
 800d016:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d018:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	d0f0      	beq.n	800d000 <__gethex+0x320>
 800d01e:	f04f 0c00 	mov.w	ip, #0
 800d022:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800d026:	f104 0314 	add.w	r3, r4, #20
 800d02a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800d02e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800d032:	4618      	mov	r0, r3
 800d034:	f853 2b04 	ldr.w	r2, [r3], #4
 800d038:	f1b2 3fff 	cmp.w	r2, #4294967295
 800d03c:	d01b      	beq.n	800d076 <__gethex+0x396>
 800d03e:	3201      	adds	r2, #1
 800d040:	6002      	str	r2, [r0, #0]
 800d042:	2d02      	cmp	r5, #2
 800d044:	f104 0314 	add.w	r3, r4, #20
 800d048:	d13c      	bne.n	800d0c4 <__gethex+0x3e4>
 800d04a:	f8d8 2000 	ldr.w	r2, [r8]
 800d04e:	3a01      	subs	r2, #1
 800d050:	42b2      	cmp	r2, r6
 800d052:	d109      	bne.n	800d068 <__gethex+0x388>
 800d054:	2201      	movs	r2, #1
 800d056:	1171      	asrs	r1, r6, #5
 800d058:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d05c:	f006 061f 	and.w	r6, r6, #31
 800d060:	fa02 f606 	lsl.w	r6, r2, r6
 800d064:	421e      	tst	r6, r3
 800d066:	d13a      	bne.n	800d0de <__gethex+0x3fe>
 800d068:	f045 0520 	orr.w	r5, r5, #32
 800d06c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d06e:	601c      	str	r4, [r3, #0]
 800d070:	9b02      	ldr	r3, [sp, #8]
 800d072:	601f      	str	r7, [r3, #0]
 800d074:	e6b0      	b.n	800cdd8 <__gethex+0xf8>
 800d076:	4299      	cmp	r1, r3
 800d078:	f843 cc04 	str.w	ip, [r3, #-4]
 800d07c:	d8d9      	bhi.n	800d032 <__gethex+0x352>
 800d07e:	68a3      	ldr	r3, [r4, #8]
 800d080:	459b      	cmp	fp, r3
 800d082:	db17      	blt.n	800d0b4 <__gethex+0x3d4>
 800d084:	6861      	ldr	r1, [r4, #4]
 800d086:	9801      	ldr	r0, [sp, #4]
 800d088:	3101      	adds	r1, #1
 800d08a:	f7fd fe6f 	bl	800ad6c <_Balloc>
 800d08e:	4681      	mov	r9, r0
 800d090:	b918      	cbnz	r0, 800d09a <__gethex+0x3ba>
 800d092:	4602      	mov	r2, r0
 800d094:	2184      	movs	r1, #132	@ 0x84
 800d096:	4b19      	ldr	r3, [pc, #100]	@ (800d0fc <__gethex+0x41c>)
 800d098:	e6c5      	b.n	800ce26 <__gethex+0x146>
 800d09a:	6922      	ldr	r2, [r4, #16]
 800d09c:	f104 010c 	add.w	r1, r4, #12
 800d0a0:	3202      	adds	r2, #2
 800d0a2:	0092      	lsls	r2, r2, #2
 800d0a4:	300c      	adds	r0, #12
 800d0a6:	f7fc ff00 	bl	8009eaa <memcpy>
 800d0aa:	4621      	mov	r1, r4
 800d0ac:	9801      	ldr	r0, [sp, #4]
 800d0ae:	f7fd fe9d 	bl	800adec <_Bfree>
 800d0b2:	464c      	mov	r4, r9
 800d0b4:	6923      	ldr	r3, [r4, #16]
 800d0b6:	1c5a      	adds	r2, r3, #1
 800d0b8:	6122      	str	r2, [r4, #16]
 800d0ba:	2201      	movs	r2, #1
 800d0bc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d0c0:	615a      	str	r2, [r3, #20]
 800d0c2:	e7be      	b.n	800d042 <__gethex+0x362>
 800d0c4:	6922      	ldr	r2, [r4, #16]
 800d0c6:	455a      	cmp	r2, fp
 800d0c8:	dd0b      	ble.n	800d0e2 <__gethex+0x402>
 800d0ca:	2101      	movs	r1, #1
 800d0cc:	4620      	mov	r0, r4
 800d0ce:	f7ff fd9f 	bl	800cc10 <rshift>
 800d0d2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d0d6:	3701      	adds	r7, #1
 800d0d8:	42bb      	cmp	r3, r7
 800d0da:	f6ff aee0 	blt.w	800ce9e <__gethex+0x1be>
 800d0de:	2501      	movs	r5, #1
 800d0e0:	e7c2      	b.n	800d068 <__gethex+0x388>
 800d0e2:	f016 061f 	ands.w	r6, r6, #31
 800d0e6:	d0fa      	beq.n	800d0de <__gethex+0x3fe>
 800d0e8:	4453      	add	r3, sl
 800d0ea:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800d0ee:	f7fd ff2f 	bl	800af50 <__hi0bits>
 800d0f2:	f1c6 0620 	rsb	r6, r6, #32
 800d0f6:	42b0      	cmp	r0, r6
 800d0f8:	dbe7      	blt.n	800d0ca <__gethex+0x3ea>
 800d0fa:	e7f0      	b.n	800d0de <__gethex+0x3fe>
 800d0fc:	0800ec4d 	.word	0x0800ec4d

0800d100 <L_shift>:
 800d100:	f1c2 0208 	rsb	r2, r2, #8
 800d104:	0092      	lsls	r2, r2, #2
 800d106:	b570      	push	{r4, r5, r6, lr}
 800d108:	f1c2 0620 	rsb	r6, r2, #32
 800d10c:	6843      	ldr	r3, [r0, #4]
 800d10e:	6804      	ldr	r4, [r0, #0]
 800d110:	fa03 f506 	lsl.w	r5, r3, r6
 800d114:	432c      	orrs	r4, r5
 800d116:	40d3      	lsrs	r3, r2
 800d118:	6004      	str	r4, [r0, #0]
 800d11a:	f840 3f04 	str.w	r3, [r0, #4]!
 800d11e:	4288      	cmp	r0, r1
 800d120:	d3f4      	bcc.n	800d10c <L_shift+0xc>
 800d122:	bd70      	pop	{r4, r5, r6, pc}

0800d124 <__match>:
 800d124:	b530      	push	{r4, r5, lr}
 800d126:	6803      	ldr	r3, [r0, #0]
 800d128:	3301      	adds	r3, #1
 800d12a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d12e:	b914      	cbnz	r4, 800d136 <__match+0x12>
 800d130:	6003      	str	r3, [r0, #0]
 800d132:	2001      	movs	r0, #1
 800d134:	bd30      	pop	{r4, r5, pc}
 800d136:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d13a:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800d13e:	2d19      	cmp	r5, #25
 800d140:	bf98      	it	ls
 800d142:	3220      	addls	r2, #32
 800d144:	42a2      	cmp	r2, r4
 800d146:	d0f0      	beq.n	800d12a <__match+0x6>
 800d148:	2000      	movs	r0, #0
 800d14a:	e7f3      	b.n	800d134 <__match+0x10>

0800d14c <__hexnan>:
 800d14c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d150:	2500      	movs	r5, #0
 800d152:	680b      	ldr	r3, [r1, #0]
 800d154:	4682      	mov	sl, r0
 800d156:	115e      	asrs	r6, r3, #5
 800d158:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800d15c:	f013 031f 	ands.w	r3, r3, #31
 800d160:	bf18      	it	ne
 800d162:	3604      	addne	r6, #4
 800d164:	1f37      	subs	r7, r6, #4
 800d166:	4690      	mov	r8, r2
 800d168:	46b9      	mov	r9, r7
 800d16a:	463c      	mov	r4, r7
 800d16c:	46ab      	mov	fp, r5
 800d16e:	b087      	sub	sp, #28
 800d170:	6801      	ldr	r1, [r0, #0]
 800d172:	9301      	str	r3, [sp, #4]
 800d174:	f846 5c04 	str.w	r5, [r6, #-4]
 800d178:	9502      	str	r5, [sp, #8]
 800d17a:	784a      	ldrb	r2, [r1, #1]
 800d17c:	1c4b      	adds	r3, r1, #1
 800d17e:	9303      	str	r3, [sp, #12]
 800d180:	b342      	cbz	r2, 800d1d4 <__hexnan+0x88>
 800d182:	4610      	mov	r0, r2
 800d184:	9105      	str	r1, [sp, #20]
 800d186:	9204      	str	r2, [sp, #16]
 800d188:	f7ff fd95 	bl	800ccb6 <__hexdig_fun>
 800d18c:	2800      	cmp	r0, #0
 800d18e:	d151      	bne.n	800d234 <__hexnan+0xe8>
 800d190:	9a04      	ldr	r2, [sp, #16]
 800d192:	9905      	ldr	r1, [sp, #20]
 800d194:	2a20      	cmp	r2, #32
 800d196:	d818      	bhi.n	800d1ca <__hexnan+0x7e>
 800d198:	9b02      	ldr	r3, [sp, #8]
 800d19a:	459b      	cmp	fp, r3
 800d19c:	dd13      	ble.n	800d1c6 <__hexnan+0x7a>
 800d19e:	454c      	cmp	r4, r9
 800d1a0:	d206      	bcs.n	800d1b0 <__hexnan+0x64>
 800d1a2:	2d07      	cmp	r5, #7
 800d1a4:	dc04      	bgt.n	800d1b0 <__hexnan+0x64>
 800d1a6:	462a      	mov	r2, r5
 800d1a8:	4649      	mov	r1, r9
 800d1aa:	4620      	mov	r0, r4
 800d1ac:	f7ff ffa8 	bl	800d100 <L_shift>
 800d1b0:	4544      	cmp	r4, r8
 800d1b2:	d952      	bls.n	800d25a <__hexnan+0x10e>
 800d1b4:	2300      	movs	r3, #0
 800d1b6:	f1a4 0904 	sub.w	r9, r4, #4
 800d1ba:	f844 3c04 	str.w	r3, [r4, #-4]
 800d1be:	461d      	mov	r5, r3
 800d1c0:	464c      	mov	r4, r9
 800d1c2:	f8cd b008 	str.w	fp, [sp, #8]
 800d1c6:	9903      	ldr	r1, [sp, #12]
 800d1c8:	e7d7      	b.n	800d17a <__hexnan+0x2e>
 800d1ca:	2a29      	cmp	r2, #41	@ 0x29
 800d1cc:	d157      	bne.n	800d27e <__hexnan+0x132>
 800d1ce:	3102      	adds	r1, #2
 800d1d0:	f8ca 1000 	str.w	r1, [sl]
 800d1d4:	f1bb 0f00 	cmp.w	fp, #0
 800d1d8:	d051      	beq.n	800d27e <__hexnan+0x132>
 800d1da:	454c      	cmp	r4, r9
 800d1dc:	d206      	bcs.n	800d1ec <__hexnan+0xa0>
 800d1de:	2d07      	cmp	r5, #7
 800d1e0:	dc04      	bgt.n	800d1ec <__hexnan+0xa0>
 800d1e2:	462a      	mov	r2, r5
 800d1e4:	4649      	mov	r1, r9
 800d1e6:	4620      	mov	r0, r4
 800d1e8:	f7ff ff8a 	bl	800d100 <L_shift>
 800d1ec:	4544      	cmp	r4, r8
 800d1ee:	d936      	bls.n	800d25e <__hexnan+0x112>
 800d1f0:	4623      	mov	r3, r4
 800d1f2:	f1a8 0204 	sub.w	r2, r8, #4
 800d1f6:	f853 1b04 	ldr.w	r1, [r3], #4
 800d1fa:	429f      	cmp	r7, r3
 800d1fc:	f842 1f04 	str.w	r1, [r2, #4]!
 800d200:	d2f9      	bcs.n	800d1f6 <__hexnan+0xaa>
 800d202:	1b3b      	subs	r3, r7, r4
 800d204:	f023 0303 	bic.w	r3, r3, #3
 800d208:	3304      	adds	r3, #4
 800d20a:	3401      	adds	r4, #1
 800d20c:	3e03      	subs	r6, #3
 800d20e:	42b4      	cmp	r4, r6
 800d210:	bf88      	it	hi
 800d212:	2304      	movhi	r3, #4
 800d214:	2200      	movs	r2, #0
 800d216:	4443      	add	r3, r8
 800d218:	f843 2b04 	str.w	r2, [r3], #4
 800d21c:	429f      	cmp	r7, r3
 800d21e:	d2fb      	bcs.n	800d218 <__hexnan+0xcc>
 800d220:	683b      	ldr	r3, [r7, #0]
 800d222:	b91b      	cbnz	r3, 800d22c <__hexnan+0xe0>
 800d224:	4547      	cmp	r7, r8
 800d226:	d128      	bne.n	800d27a <__hexnan+0x12e>
 800d228:	2301      	movs	r3, #1
 800d22a:	603b      	str	r3, [r7, #0]
 800d22c:	2005      	movs	r0, #5
 800d22e:	b007      	add	sp, #28
 800d230:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d234:	3501      	adds	r5, #1
 800d236:	2d08      	cmp	r5, #8
 800d238:	f10b 0b01 	add.w	fp, fp, #1
 800d23c:	dd06      	ble.n	800d24c <__hexnan+0x100>
 800d23e:	4544      	cmp	r4, r8
 800d240:	d9c1      	bls.n	800d1c6 <__hexnan+0x7a>
 800d242:	2300      	movs	r3, #0
 800d244:	2501      	movs	r5, #1
 800d246:	f844 3c04 	str.w	r3, [r4, #-4]
 800d24a:	3c04      	subs	r4, #4
 800d24c:	6822      	ldr	r2, [r4, #0]
 800d24e:	f000 000f 	and.w	r0, r0, #15
 800d252:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800d256:	6020      	str	r0, [r4, #0]
 800d258:	e7b5      	b.n	800d1c6 <__hexnan+0x7a>
 800d25a:	2508      	movs	r5, #8
 800d25c:	e7b3      	b.n	800d1c6 <__hexnan+0x7a>
 800d25e:	9b01      	ldr	r3, [sp, #4]
 800d260:	2b00      	cmp	r3, #0
 800d262:	d0dd      	beq.n	800d220 <__hexnan+0xd4>
 800d264:	f04f 32ff 	mov.w	r2, #4294967295
 800d268:	f1c3 0320 	rsb	r3, r3, #32
 800d26c:	40da      	lsrs	r2, r3
 800d26e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800d272:	4013      	ands	r3, r2
 800d274:	f846 3c04 	str.w	r3, [r6, #-4]
 800d278:	e7d2      	b.n	800d220 <__hexnan+0xd4>
 800d27a:	3f04      	subs	r7, #4
 800d27c:	e7d0      	b.n	800d220 <__hexnan+0xd4>
 800d27e:	2004      	movs	r0, #4
 800d280:	e7d5      	b.n	800d22e <__hexnan+0xe2>

0800d282 <__ascii_mbtowc>:
 800d282:	b082      	sub	sp, #8
 800d284:	b901      	cbnz	r1, 800d288 <__ascii_mbtowc+0x6>
 800d286:	a901      	add	r1, sp, #4
 800d288:	b142      	cbz	r2, 800d29c <__ascii_mbtowc+0x1a>
 800d28a:	b14b      	cbz	r3, 800d2a0 <__ascii_mbtowc+0x1e>
 800d28c:	7813      	ldrb	r3, [r2, #0]
 800d28e:	600b      	str	r3, [r1, #0]
 800d290:	7812      	ldrb	r2, [r2, #0]
 800d292:	1e10      	subs	r0, r2, #0
 800d294:	bf18      	it	ne
 800d296:	2001      	movne	r0, #1
 800d298:	b002      	add	sp, #8
 800d29a:	4770      	bx	lr
 800d29c:	4610      	mov	r0, r2
 800d29e:	e7fb      	b.n	800d298 <__ascii_mbtowc+0x16>
 800d2a0:	f06f 0001 	mvn.w	r0, #1
 800d2a4:	e7f8      	b.n	800d298 <__ascii_mbtowc+0x16>

0800d2a6 <_realloc_r>:
 800d2a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d2aa:	4680      	mov	r8, r0
 800d2ac:	4615      	mov	r5, r2
 800d2ae:	460c      	mov	r4, r1
 800d2b0:	b921      	cbnz	r1, 800d2bc <_realloc_r+0x16>
 800d2b2:	4611      	mov	r1, r2
 800d2b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d2b8:	f7fd bccc 	b.w	800ac54 <_malloc_r>
 800d2bc:	b92a      	cbnz	r2, 800d2ca <_realloc_r+0x24>
 800d2be:	f7fd fc57 	bl	800ab70 <_free_r>
 800d2c2:	2400      	movs	r4, #0
 800d2c4:	4620      	mov	r0, r4
 800d2c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d2ca:	f000 f8c4 	bl	800d456 <_malloc_usable_size_r>
 800d2ce:	4285      	cmp	r5, r0
 800d2d0:	4606      	mov	r6, r0
 800d2d2:	d802      	bhi.n	800d2da <_realloc_r+0x34>
 800d2d4:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800d2d8:	d8f4      	bhi.n	800d2c4 <_realloc_r+0x1e>
 800d2da:	4629      	mov	r1, r5
 800d2dc:	4640      	mov	r0, r8
 800d2de:	f7fd fcb9 	bl	800ac54 <_malloc_r>
 800d2e2:	4607      	mov	r7, r0
 800d2e4:	2800      	cmp	r0, #0
 800d2e6:	d0ec      	beq.n	800d2c2 <_realloc_r+0x1c>
 800d2e8:	42b5      	cmp	r5, r6
 800d2ea:	462a      	mov	r2, r5
 800d2ec:	4621      	mov	r1, r4
 800d2ee:	bf28      	it	cs
 800d2f0:	4632      	movcs	r2, r6
 800d2f2:	f7fc fdda 	bl	8009eaa <memcpy>
 800d2f6:	4621      	mov	r1, r4
 800d2f8:	4640      	mov	r0, r8
 800d2fa:	f7fd fc39 	bl	800ab70 <_free_r>
 800d2fe:	463c      	mov	r4, r7
 800d300:	e7e0      	b.n	800d2c4 <_realloc_r+0x1e>

0800d302 <__ascii_wctomb>:
 800d302:	4603      	mov	r3, r0
 800d304:	4608      	mov	r0, r1
 800d306:	b141      	cbz	r1, 800d31a <__ascii_wctomb+0x18>
 800d308:	2aff      	cmp	r2, #255	@ 0xff
 800d30a:	d904      	bls.n	800d316 <__ascii_wctomb+0x14>
 800d30c:	228a      	movs	r2, #138	@ 0x8a
 800d30e:	f04f 30ff 	mov.w	r0, #4294967295
 800d312:	601a      	str	r2, [r3, #0]
 800d314:	4770      	bx	lr
 800d316:	2001      	movs	r0, #1
 800d318:	700a      	strb	r2, [r1, #0]
 800d31a:	4770      	bx	lr

0800d31c <fiprintf>:
 800d31c:	b40e      	push	{r1, r2, r3}
 800d31e:	b503      	push	{r0, r1, lr}
 800d320:	4601      	mov	r1, r0
 800d322:	ab03      	add	r3, sp, #12
 800d324:	4805      	ldr	r0, [pc, #20]	@ (800d33c <fiprintf+0x20>)
 800d326:	f853 2b04 	ldr.w	r2, [r3], #4
 800d32a:	6800      	ldr	r0, [r0, #0]
 800d32c:	9301      	str	r3, [sp, #4]
 800d32e:	f7ff f9c1 	bl	800c6b4 <_vfiprintf_r>
 800d332:	b002      	add	sp, #8
 800d334:	f85d eb04 	ldr.w	lr, [sp], #4
 800d338:	b003      	add	sp, #12
 800d33a:	4770      	bx	lr
 800d33c:	20000040 	.word	0x20000040

0800d340 <__swhatbuf_r>:
 800d340:	b570      	push	{r4, r5, r6, lr}
 800d342:	460c      	mov	r4, r1
 800d344:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d348:	4615      	mov	r5, r2
 800d34a:	2900      	cmp	r1, #0
 800d34c:	461e      	mov	r6, r3
 800d34e:	b096      	sub	sp, #88	@ 0x58
 800d350:	da0c      	bge.n	800d36c <__swhatbuf_r+0x2c>
 800d352:	89a3      	ldrh	r3, [r4, #12]
 800d354:	2100      	movs	r1, #0
 800d356:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d35a:	bf14      	ite	ne
 800d35c:	2340      	movne	r3, #64	@ 0x40
 800d35e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d362:	2000      	movs	r0, #0
 800d364:	6031      	str	r1, [r6, #0]
 800d366:	602b      	str	r3, [r5, #0]
 800d368:	b016      	add	sp, #88	@ 0x58
 800d36a:	bd70      	pop	{r4, r5, r6, pc}
 800d36c:	466a      	mov	r2, sp
 800d36e:	f000 f849 	bl	800d404 <_fstat_r>
 800d372:	2800      	cmp	r0, #0
 800d374:	dbed      	blt.n	800d352 <__swhatbuf_r+0x12>
 800d376:	9901      	ldr	r1, [sp, #4]
 800d378:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d37c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d380:	4259      	negs	r1, r3
 800d382:	4159      	adcs	r1, r3
 800d384:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d388:	e7eb      	b.n	800d362 <__swhatbuf_r+0x22>

0800d38a <__smakebuf_r>:
 800d38a:	898b      	ldrh	r3, [r1, #12]
 800d38c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d38e:	079d      	lsls	r5, r3, #30
 800d390:	4606      	mov	r6, r0
 800d392:	460c      	mov	r4, r1
 800d394:	d507      	bpl.n	800d3a6 <__smakebuf_r+0x1c>
 800d396:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d39a:	6023      	str	r3, [r4, #0]
 800d39c:	6123      	str	r3, [r4, #16]
 800d39e:	2301      	movs	r3, #1
 800d3a0:	6163      	str	r3, [r4, #20]
 800d3a2:	b003      	add	sp, #12
 800d3a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d3a6:	466a      	mov	r2, sp
 800d3a8:	ab01      	add	r3, sp, #4
 800d3aa:	f7ff ffc9 	bl	800d340 <__swhatbuf_r>
 800d3ae:	9f00      	ldr	r7, [sp, #0]
 800d3b0:	4605      	mov	r5, r0
 800d3b2:	4639      	mov	r1, r7
 800d3b4:	4630      	mov	r0, r6
 800d3b6:	f7fd fc4d 	bl	800ac54 <_malloc_r>
 800d3ba:	b948      	cbnz	r0, 800d3d0 <__smakebuf_r+0x46>
 800d3bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d3c0:	059a      	lsls	r2, r3, #22
 800d3c2:	d4ee      	bmi.n	800d3a2 <__smakebuf_r+0x18>
 800d3c4:	f023 0303 	bic.w	r3, r3, #3
 800d3c8:	f043 0302 	orr.w	r3, r3, #2
 800d3cc:	81a3      	strh	r3, [r4, #12]
 800d3ce:	e7e2      	b.n	800d396 <__smakebuf_r+0xc>
 800d3d0:	89a3      	ldrh	r3, [r4, #12]
 800d3d2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d3d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d3da:	81a3      	strh	r3, [r4, #12]
 800d3dc:	9b01      	ldr	r3, [sp, #4]
 800d3de:	6020      	str	r0, [r4, #0]
 800d3e0:	b15b      	cbz	r3, 800d3fa <__smakebuf_r+0x70>
 800d3e2:	4630      	mov	r0, r6
 800d3e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d3e8:	f000 f81e 	bl	800d428 <_isatty_r>
 800d3ec:	b128      	cbz	r0, 800d3fa <__smakebuf_r+0x70>
 800d3ee:	89a3      	ldrh	r3, [r4, #12]
 800d3f0:	f023 0303 	bic.w	r3, r3, #3
 800d3f4:	f043 0301 	orr.w	r3, r3, #1
 800d3f8:	81a3      	strh	r3, [r4, #12]
 800d3fa:	89a3      	ldrh	r3, [r4, #12]
 800d3fc:	431d      	orrs	r5, r3
 800d3fe:	81a5      	strh	r5, [r4, #12]
 800d400:	e7cf      	b.n	800d3a2 <__smakebuf_r+0x18>
	...

0800d404 <_fstat_r>:
 800d404:	b538      	push	{r3, r4, r5, lr}
 800d406:	2300      	movs	r3, #0
 800d408:	4d06      	ldr	r5, [pc, #24]	@ (800d424 <_fstat_r+0x20>)
 800d40a:	4604      	mov	r4, r0
 800d40c:	4608      	mov	r0, r1
 800d40e:	4611      	mov	r1, r2
 800d410:	602b      	str	r3, [r5, #0]
 800d412:	f7f5 fb4f 	bl	8002ab4 <_fstat>
 800d416:	1c43      	adds	r3, r0, #1
 800d418:	d102      	bne.n	800d420 <_fstat_r+0x1c>
 800d41a:	682b      	ldr	r3, [r5, #0]
 800d41c:	b103      	cbz	r3, 800d420 <_fstat_r+0x1c>
 800d41e:	6023      	str	r3, [r4, #0]
 800d420:	bd38      	pop	{r3, r4, r5, pc}
 800d422:	bf00      	nop
 800d424:	20000a04 	.word	0x20000a04

0800d428 <_isatty_r>:
 800d428:	b538      	push	{r3, r4, r5, lr}
 800d42a:	2300      	movs	r3, #0
 800d42c:	4d05      	ldr	r5, [pc, #20]	@ (800d444 <_isatty_r+0x1c>)
 800d42e:	4604      	mov	r4, r0
 800d430:	4608      	mov	r0, r1
 800d432:	602b      	str	r3, [r5, #0]
 800d434:	f7f5 fb4d 	bl	8002ad2 <_isatty>
 800d438:	1c43      	adds	r3, r0, #1
 800d43a:	d102      	bne.n	800d442 <_isatty_r+0x1a>
 800d43c:	682b      	ldr	r3, [r5, #0]
 800d43e:	b103      	cbz	r3, 800d442 <_isatty_r+0x1a>
 800d440:	6023      	str	r3, [r4, #0]
 800d442:	bd38      	pop	{r3, r4, r5, pc}
 800d444:	20000a04 	.word	0x20000a04

0800d448 <abort>:
 800d448:	2006      	movs	r0, #6
 800d44a:	b508      	push	{r3, lr}
 800d44c:	f000 f834 	bl	800d4b8 <raise>
 800d450:	2001      	movs	r0, #1
 800d452:	f7f5 fae0 	bl	8002a16 <_exit>

0800d456 <_malloc_usable_size_r>:
 800d456:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d45a:	1f18      	subs	r0, r3, #4
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	bfbc      	itt	lt
 800d460:	580b      	ldrlt	r3, [r1, r0]
 800d462:	18c0      	addlt	r0, r0, r3
 800d464:	4770      	bx	lr

0800d466 <_raise_r>:
 800d466:	291f      	cmp	r1, #31
 800d468:	b538      	push	{r3, r4, r5, lr}
 800d46a:	4605      	mov	r5, r0
 800d46c:	460c      	mov	r4, r1
 800d46e:	d904      	bls.n	800d47a <_raise_r+0x14>
 800d470:	2316      	movs	r3, #22
 800d472:	6003      	str	r3, [r0, #0]
 800d474:	f04f 30ff 	mov.w	r0, #4294967295
 800d478:	bd38      	pop	{r3, r4, r5, pc}
 800d47a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d47c:	b112      	cbz	r2, 800d484 <_raise_r+0x1e>
 800d47e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d482:	b94b      	cbnz	r3, 800d498 <_raise_r+0x32>
 800d484:	4628      	mov	r0, r5
 800d486:	f000 f831 	bl	800d4ec <_getpid_r>
 800d48a:	4622      	mov	r2, r4
 800d48c:	4601      	mov	r1, r0
 800d48e:	4628      	mov	r0, r5
 800d490:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d494:	f000 b818 	b.w	800d4c8 <_kill_r>
 800d498:	2b01      	cmp	r3, #1
 800d49a:	d00a      	beq.n	800d4b2 <_raise_r+0x4c>
 800d49c:	1c59      	adds	r1, r3, #1
 800d49e:	d103      	bne.n	800d4a8 <_raise_r+0x42>
 800d4a0:	2316      	movs	r3, #22
 800d4a2:	6003      	str	r3, [r0, #0]
 800d4a4:	2001      	movs	r0, #1
 800d4a6:	e7e7      	b.n	800d478 <_raise_r+0x12>
 800d4a8:	2100      	movs	r1, #0
 800d4aa:	4620      	mov	r0, r4
 800d4ac:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d4b0:	4798      	blx	r3
 800d4b2:	2000      	movs	r0, #0
 800d4b4:	e7e0      	b.n	800d478 <_raise_r+0x12>
	...

0800d4b8 <raise>:
 800d4b8:	4b02      	ldr	r3, [pc, #8]	@ (800d4c4 <raise+0xc>)
 800d4ba:	4601      	mov	r1, r0
 800d4bc:	6818      	ldr	r0, [r3, #0]
 800d4be:	f7ff bfd2 	b.w	800d466 <_raise_r>
 800d4c2:	bf00      	nop
 800d4c4:	20000040 	.word	0x20000040

0800d4c8 <_kill_r>:
 800d4c8:	b538      	push	{r3, r4, r5, lr}
 800d4ca:	2300      	movs	r3, #0
 800d4cc:	4d06      	ldr	r5, [pc, #24]	@ (800d4e8 <_kill_r+0x20>)
 800d4ce:	4604      	mov	r4, r0
 800d4d0:	4608      	mov	r0, r1
 800d4d2:	4611      	mov	r1, r2
 800d4d4:	602b      	str	r3, [r5, #0]
 800d4d6:	f7f5 fa8e 	bl	80029f6 <_kill>
 800d4da:	1c43      	adds	r3, r0, #1
 800d4dc:	d102      	bne.n	800d4e4 <_kill_r+0x1c>
 800d4de:	682b      	ldr	r3, [r5, #0]
 800d4e0:	b103      	cbz	r3, 800d4e4 <_kill_r+0x1c>
 800d4e2:	6023      	str	r3, [r4, #0]
 800d4e4:	bd38      	pop	{r3, r4, r5, pc}
 800d4e6:	bf00      	nop
 800d4e8:	20000a04 	.word	0x20000a04

0800d4ec <_getpid_r>:
 800d4ec:	f7f5 ba7c 	b.w	80029e8 <_getpid>

0800d4f0 <_init>:
 800d4f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d4f2:	bf00      	nop
 800d4f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d4f6:	bc08      	pop	{r3}
 800d4f8:	469e      	mov	lr, r3
 800d4fa:	4770      	bx	lr

0800d4fc <_fini>:
 800d4fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d4fe:	bf00      	nop
 800d500:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d502:	bc08      	pop	{r3}
 800d504:	469e      	mov	lr, r3
 800d506:	4770      	bx	lr
