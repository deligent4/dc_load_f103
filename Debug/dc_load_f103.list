
dc_load_f103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d700  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001b30  0800d810  0800d810  0000e810  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f340  0800f340  000111fc  2**0
                  CONTENTS
  4 .ARM          00000008  0800f340  0800f340  00010340  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f348  0800f348  000111fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f348  0800f348  00010348  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f34c  0800f34c  0001034c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  0800f350  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000824  200001fc  0800f54c  000111fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000a20  0800f54c  00011a20  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000111fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015d6a  00000000  00000000  00011225  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000039fa  00000000  00000000  00026f8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001490  00000000  00000000  0002a990  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ff4  00000000  00000000  0002be20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b8ca  00000000  00000000  0002ce14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b6af  00000000  00000000  000486de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000964cf  00000000  00000000  00063d8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fa25c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006b44  00000000  00000000  000fa2a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  00100de4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001fc 	.word	0x200001fc
 800012c:	00000000 	.word	0x00000000
 8000130:	0800d7f8 	.word	0x0800d7f8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000200 	.word	0x20000200
 800014c:	0800d7f8 	.word	0x0800d7f8

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	@ 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000dd6:	2afd      	cmp	r2, #253	@ 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	@ 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	@ 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	@ 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__gesf2>:
 8001024:	f04f 3cff 	mov.w	ip, #4294967295
 8001028:	e006      	b.n	8001038 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__lesf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	e002      	b.n	8001038 <__cmpsf2+0x4>
 8001032:	bf00      	nop

08001034 <__cmpsf2>:
 8001034:	f04f 0c01 	mov.w	ip, #1
 8001038:	f84d cd04 	str.w	ip, [sp, #-4]!
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	bf18      	it	ne
 800104a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104e:	d011      	beq.n	8001074 <__cmpsf2+0x40>
 8001050:	b001      	add	sp, #4
 8001052:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001056:	bf18      	it	ne
 8001058:	ea90 0f01 	teqne	r0, r1
 800105c:	bf58      	it	pl
 800105e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001062:	bf88      	it	hi
 8001064:	17c8      	asrhi	r0, r1, #31
 8001066:	bf38      	it	cc
 8001068:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800106c:	bf18      	it	ne
 800106e:	f040 0001 	orrne.w	r0, r0, #1
 8001072:	4770      	bx	lr
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__cmpsf2+0x4c>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d105      	bne.n	800108c <__cmpsf2+0x58>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d1e4      	bne.n	8001050 <__cmpsf2+0x1c>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d0e1      	beq.n	8001050 <__cmpsf2+0x1c>
 800108c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <__aeabi_cfrcmple>:
 8001094:	4684      	mov	ip, r0
 8001096:	4608      	mov	r0, r1
 8001098:	4661      	mov	r1, ip
 800109a:	e7ff      	b.n	800109c <__aeabi_cfcmpeq>

0800109c <__aeabi_cfcmpeq>:
 800109c:	b50f      	push	{r0, r1, r2, r3, lr}
 800109e:	f7ff ffc9 	bl	8001034 <__cmpsf2>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	bf48      	it	mi
 80010a6:	f110 0f00 	cmnmi.w	r0, #0
 80010aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ac <__aeabi_fcmpeq>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff fff4 	bl	800109c <__aeabi_cfcmpeq>
 80010b4:	bf0c      	ite	eq
 80010b6:	2001      	moveq	r0, #1
 80010b8:	2000      	movne	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmplt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffea 	bl	800109c <__aeabi_cfcmpeq>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmple>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffe0 	bl	800109c <__aeabi_cfcmpeq>
 80010dc:	bf94      	ite	ls
 80010de:	2001      	movls	r0, #1
 80010e0:	2000      	movhi	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmpge>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffd2 	bl	8001094 <__aeabi_cfrcmple>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpgt>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffc8 	bl	8001094 <__aeabi_cfrcmple>
 8001104:	bf34      	ite	cc
 8001106:	2001      	movcc	r0, #1
 8001108:	2000      	movcs	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_f2iz>:
 8001110:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001114:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8001118:	d30f      	bcc.n	800113a <__aeabi_f2iz+0x2a>
 800111a:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800111e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001122:	d90d      	bls.n	8001140 <__aeabi_f2iz+0x30>
 8001124:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001128:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800112c:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8001130:	fa23 f002 	lsr.w	r0, r3, r2
 8001134:	bf18      	it	ne
 8001136:	4240      	negne	r0, r0
 8001138:	4770      	bx	lr
 800113a:	f04f 0000 	mov.w	r0, #0
 800113e:	4770      	bx	lr
 8001140:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001144:	d101      	bne.n	800114a <__aeabi_f2iz+0x3a>
 8001146:	0242      	lsls	r2, r0, #9
 8001148:	d105      	bne.n	8001156 <__aeabi_f2iz+0x46>
 800114a:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 800114e:	bf08      	it	eq
 8001150:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8001154:	4770      	bx	lr
 8001156:	f04f 0000 	mov.w	r0, #0
 800115a:	4770      	bx	lr

0800115c <__aeabi_f2uiz>:
 800115c:	0042      	lsls	r2, r0, #1
 800115e:	d20e      	bcs.n	800117e <__aeabi_f2uiz+0x22>
 8001160:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8001164:	d30b      	bcc.n	800117e <__aeabi_f2uiz+0x22>
 8001166:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800116a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800116e:	d409      	bmi.n	8001184 <__aeabi_f2uiz+0x28>
 8001170:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001174:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001178:	fa23 f002 	lsr.w	r0, r3, r2
 800117c:	4770      	bx	lr
 800117e:	f04f 0000 	mov.w	r0, #0
 8001182:	4770      	bx	lr
 8001184:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001188:	d101      	bne.n	800118e <__aeabi_f2uiz+0x32>
 800118a:	0242      	lsls	r2, r0, #9
 800118c:	d102      	bne.n	8001194 <__aeabi_f2uiz+0x38>
 800118e:	f04f 30ff 	mov.w	r0, #4294967295
 8001192:	4770      	bx	lr
 8001194:	f04f 0000 	mov.w	r0, #0
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop

0800119c <__aeabi_d2lz>:
 800119c:	b538      	push	{r3, r4, r5, lr}
 800119e:	2200      	movs	r2, #0
 80011a0:	2300      	movs	r3, #0
 80011a2:	4604      	mov	r4, r0
 80011a4:	460d      	mov	r5, r1
 80011a6:	f7ff fc09 	bl	80009bc <__aeabi_dcmplt>
 80011aa:	b928      	cbnz	r0, 80011b8 <__aeabi_d2lz+0x1c>
 80011ac:	4620      	mov	r0, r4
 80011ae:	4629      	mov	r1, r5
 80011b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80011b4:	f000 b80a 	b.w	80011cc <__aeabi_d2ulz>
 80011b8:	4620      	mov	r0, r4
 80011ba:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 80011be:	f000 f805 	bl	80011cc <__aeabi_d2ulz>
 80011c2:	4240      	negs	r0, r0
 80011c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80011c8:	bd38      	pop	{r3, r4, r5, pc}
 80011ca:	bf00      	nop

080011cc <__aeabi_d2ulz>:
 80011cc:	b5d0      	push	{r4, r6, r7, lr}
 80011ce:	2200      	movs	r2, #0
 80011d0:	4b0b      	ldr	r3, [pc, #44]	@ (8001200 <__aeabi_d2ulz+0x34>)
 80011d2:	4606      	mov	r6, r0
 80011d4:	460f      	mov	r7, r1
 80011d6:	f7ff f97f 	bl	80004d8 <__aeabi_dmul>
 80011da:	f7ff fc55 	bl	8000a88 <__aeabi_d2uiz>
 80011de:	4604      	mov	r4, r0
 80011e0:	f7ff f900 	bl	80003e4 <__aeabi_ui2d>
 80011e4:	2200      	movs	r2, #0
 80011e6:	4b07      	ldr	r3, [pc, #28]	@ (8001204 <__aeabi_d2ulz+0x38>)
 80011e8:	f7ff f976 	bl	80004d8 <__aeabi_dmul>
 80011ec:	4602      	mov	r2, r0
 80011ee:	460b      	mov	r3, r1
 80011f0:	4630      	mov	r0, r6
 80011f2:	4639      	mov	r1, r7
 80011f4:	f7fe ffb8 	bl	8000168 <__aeabi_dsub>
 80011f8:	f7ff fc46 	bl	8000a88 <__aeabi_d2uiz>
 80011fc:	4621      	mov	r1, r4
 80011fe:	bdd0      	pop	{r4, r6, r7, pc}
 8001200:	3df00000 	.word	0x3df00000
 8001204:	41f00000 	.word	0x41f00000

08001208 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b084      	sub	sp, #16
 800120c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800120e:	1d3b      	adds	r3, r7, #4
 8001210:	2200      	movs	r2, #0
 8001212:	601a      	str	r2, [r3, #0]
 8001214:	605a      	str	r2, [r3, #4]
 8001216:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001218:	4b18      	ldr	r3, [pc, #96]	@ (800127c <MX_ADC1_Init+0x74>)
 800121a:	4a19      	ldr	r2, [pc, #100]	@ (8001280 <MX_ADC1_Init+0x78>)
 800121c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800121e:	4b17      	ldr	r3, [pc, #92]	@ (800127c <MX_ADC1_Init+0x74>)
 8001220:	2200      	movs	r2, #0
 8001222:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001224:	4b15      	ldr	r3, [pc, #84]	@ (800127c <MX_ADC1_Init+0x74>)
 8001226:	2201      	movs	r2, #1
 8001228:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800122a:	4b14      	ldr	r3, [pc, #80]	@ (800127c <MX_ADC1_Init+0x74>)
 800122c:	2200      	movs	r2, #0
 800122e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001230:	4b12      	ldr	r3, [pc, #72]	@ (800127c <MX_ADC1_Init+0x74>)
 8001232:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8001236:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001238:	4b10      	ldr	r3, [pc, #64]	@ (800127c <MX_ADC1_Init+0x74>)
 800123a:	2200      	movs	r2, #0
 800123c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800123e:	4b0f      	ldr	r3, [pc, #60]	@ (800127c <MX_ADC1_Init+0x74>)
 8001240:	2201      	movs	r2, #1
 8001242:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001244:	480d      	ldr	r0, [pc, #52]	@ (800127c <MX_ADC1_Init+0x74>)
 8001246:	f001 ff75 	bl	8003134 <HAL_ADC_Init>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d001      	beq.n	8001254 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001250:	f001 fc4a 	bl	8002ae8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001254:	2309      	movs	r3, #9
 8001256:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001258:	2301      	movs	r3, #1
 800125a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 800125c:	2305      	movs	r3, #5
 800125e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001260:	1d3b      	adds	r3, r7, #4
 8001262:	4619      	mov	r1, r3
 8001264:	4805      	ldr	r0, [pc, #20]	@ (800127c <MX_ADC1_Init+0x74>)
 8001266:	f002 f9fd 	bl	8003664 <HAL_ADC_ConfigChannel>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001270:	f001 fc3a 	bl	8002ae8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001274:	bf00      	nop
 8001276:	3710      	adds	r7, #16
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	20000218 	.word	0x20000218
 8001280:	40012400 	.word	0x40012400

08001284 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b088      	sub	sp, #32
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800128c:	f107 0310 	add.w	r3, r7, #16
 8001290:	2200      	movs	r2, #0
 8001292:	601a      	str	r2, [r3, #0]
 8001294:	605a      	str	r2, [r3, #4]
 8001296:	609a      	str	r2, [r3, #8]
 8001298:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4a14      	ldr	r2, [pc, #80]	@ (80012f0 <HAL_ADC_MspInit+0x6c>)
 80012a0:	4293      	cmp	r3, r2
 80012a2:	d121      	bne.n	80012e8 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80012a4:	4b13      	ldr	r3, [pc, #76]	@ (80012f4 <HAL_ADC_MspInit+0x70>)
 80012a6:	699b      	ldr	r3, [r3, #24]
 80012a8:	4a12      	ldr	r2, [pc, #72]	@ (80012f4 <HAL_ADC_MspInit+0x70>)
 80012aa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80012ae:	6193      	str	r3, [r2, #24]
 80012b0:	4b10      	ldr	r3, [pc, #64]	@ (80012f4 <HAL_ADC_MspInit+0x70>)
 80012b2:	699b      	ldr	r3, [r3, #24]
 80012b4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80012b8:	60fb      	str	r3, [r7, #12]
 80012ba:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012bc:	4b0d      	ldr	r3, [pc, #52]	@ (80012f4 <HAL_ADC_MspInit+0x70>)
 80012be:	699b      	ldr	r3, [r3, #24]
 80012c0:	4a0c      	ldr	r2, [pc, #48]	@ (80012f4 <HAL_ADC_MspInit+0x70>)
 80012c2:	f043 0308 	orr.w	r3, r3, #8
 80012c6:	6193      	str	r3, [r2, #24]
 80012c8:	4b0a      	ldr	r3, [pc, #40]	@ (80012f4 <HAL_ADC_MspInit+0x70>)
 80012ca:	699b      	ldr	r3, [r3, #24]
 80012cc:	f003 0308 	and.w	r3, r3, #8
 80012d0:	60bb      	str	r3, [r7, #8]
 80012d2:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = BATT_SENSE_Pin;
 80012d4:	2302      	movs	r3, #2
 80012d6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012d8:	2303      	movs	r3, #3
 80012da:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(BATT_SENSE_GPIO_Port, &GPIO_InitStruct);
 80012dc:	f107 0310 	add.w	r3, r7, #16
 80012e0:	4619      	mov	r1, r3
 80012e2:	4805      	ldr	r0, [pc, #20]	@ (80012f8 <HAL_ADC_MspInit+0x74>)
 80012e4:	f002 fef4 	bl	80040d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80012e8:	bf00      	nop
 80012ea:	3720      	adds	r7, #32
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	40012400 	.word	0x40012400
 80012f4:	40021000 	.word	0x40021000
 80012f8:	40010c00 	.word	0x40010c00

080012fc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001302:	4b0c      	ldr	r3, [pc, #48]	@ (8001334 <MX_DMA_Init+0x38>)
 8001304:	695b      	ldr	r3, [r3, #20]
 8001306:	4a0b      	ldr	r2, [pc, #44]	@ (8001334 <MX_DMA_Init+0x38>)
 8001308:	f043 0301 	orr.w	r3, r3, #1
 800130c:	6153      	str	r3, [r2, #20]
 800130e:	4b09      	ldr	r3, [pc, #36]	@ (8001334 <MX_DMA_Init+0x38>)
 8001310:	695b      	ldr	r3, [r3, #20]
 8001312:	f003 0301 	and.w	r3, r3, #1
 8001316:	607b      	str	r3, [r7, #4]
 8001318:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 800131a:	2200      	movs	r2, #0
 800131c:	2100      	movs	r1, #0
 800131e:	2010      	movs	r0, #16
 8001320:	f002 fcb9 	bl	8003c96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001324:	2010      	movs	r0, #16
 8001326:	f002 fcd2 	bl	8003cce <HAL_NVIC_EnableIRQ>

}
 800132a:	bf00      	nop
 800132c:	3708      	adds	r7, #8
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	40021000 	.word	0x40021000

08001338 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b088      	sub	sp, #32
 800133c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800133e:	f107 0310 	add.w	r3, r7, #16
 8001342:	2200      	movs	r2, #0
 8001344:	601a      	str	r2, [r3, #0]
 8001346:	605a      	str	r2, [r3, #4]
 8001348:	609a      	str	r2, [r3, #8]
 800134a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800134c:	4b4b      	ldr	r3, [pc, #300]	@ (800147c <MX_GPIO_Init+0x144>)
 800134e:	699b      	ldr	r3, [r3, #24]
 8001350:	4a4a      	ldr	r2, [pc, #296]	@ (800147c <MX_GPIO_Init+0x144>)
 8001352:	f043 0310 	orr.w	r3, r3, #16
 8001356:	6193      	str	r3, [r2, #24]
 8001358:	4b48      	ldr	r3, [pc, #288]	@ (800147c <MX_GPIO_Init+0x144>)
 800135a:	699b      	ldr	r3, [r3, #24]
 800135c:	f003 0310 	and.w	r3, r3, #16
 8001360:	60fb      	str	r3, [r7, #12]
 8001362:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001364:	4b45      	ldr	r3, [pc, #276]	@ (800147c <MX_GPIO_Init+0x144>)
 8001366:	699b      	ldr	r3, [r3, #24]
 8001368:	4a44      	ldr	r2, [pc, #272]	@ (800147c <MX_GPIO_Init+0x144>)
 800136a:	f043 0320 	orr.w	r3, r3, #32
 800136e:	6193      	str	r3, [r2, #24]
 8001370:	4b42      	ldr	r3, [pc, #264]	@ (800147c <MX_GPIO_Init+0x144>)
 8001372:	699b      	ldr	r3, [r3, #24]
 8001374:	f003 0320 	and.w	r3, r3, #32
 8001378:	60bb      	str	r3, [r7, #8]
 800137a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800137c:	4b3f      	ldr	r3, [pc, #252]	@ (800147c <MX_GPIO_Init+0x144>)
 800137e:	699b      	ldr	r3, [r3, #24]
 8001380:	4a3e      	ldr	r2, [pc, #248]	@ (800147c <MX_GPIO_Init+0x144>)
 8001382:	f043 0304 	orr.w	r3, r3, #4
 8001386:	6193      	str	r3, [r2, #24]
 8001388:	4b3c      	ldr	r3, [pc, #240]	@ (800147c <MX_GPIO_Init+0x144>)
 800138a:	699b      	ldr	r3, [r3, #24]
 800138c:	f003 0304 	and.w	r3, r3, #4
 8001390:	607b      	str	r3, [r7, #4]
 8001392:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001394:	4b39      	ldr	r3, [pc, #228]	@ (800147c <MX_GPIO_Init+0x144>)
 8001396:	699b      	ldr	r3, [r3, #24]
 8001398:	4a38      	ldr	r2, [pc, #224]	@ (800147c <MX_GPIO_Init+0x144>)
 800139a:	f043 0308 	orr.w	r3, r3, #8
 800139e:	6193      	str	r3, [r2, #24]
 80013a0:	4b36      	ldr	r3, [pc, #216]	@ (800147c <MX_GPIO_Init+0x144>)
 80013a2:	699b      	ldr	r3, [r3, #24]
 80013a4:	f003 0308 	and.w	r3, r3, #8
 80013a8:	603b      	str	r3, [r7, #0]
 80013aa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_RED_Pin|LED_GRN_Pin|LED_BLU_Pin, GPIO_PIN_RESET);
 80013ac:	2200      	movs	r2, #0
 80013ae:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 80013b2:	4833      	ldr	r0, [pc, #204]	@ (8001480 <MX_GPIO_Init+0x148>)
 80013b4:	f003 f810 	bl	80043d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LTC4151_SHDN_N_GPIO_Port, LTC4151_SHDN_N_Pin, GPIO_PIN_RESET);
 80013b8:	2200      	movs	r2, #0
 80013ba:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80013be:	4831      	ldr	r0, [pc, #196]	@ (8001484 <MX_GPIO_Init+0x14c>)
 80013c0:	f003 f80a 	bl	80043d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = LED_RED_Pin|LED_GRN_Pin|LED_BLU_Pin;
 80013c4:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 80013c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ca:	2301      	movs	r3, #1
 80013cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ce:	2300      	movs	r3, #0
 80013d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d2:	2302      	movs	r3, #2
 80013d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013d6:	f107 0310 	add.w	r3, r7, #16
 80013da:	4619      	mov	r1, r3
 80013dc:	4828      	ldr	r0, [pc, #160]	@ (8001480 <MX_GPIO_Init+0x148>)
 80013de:	f002 fe77 	bl	80040d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = A_SW_Pin|B_SW_Pin|C_SW_Pin|ROT_SW_Pin;
 80013e2:	2333      	movs	r3, #51	@ 0x33
 80013e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013e6:	4b28      	ldr	r3, [pc, #160]	@ (8001488 <MX_GPIO_Init+0x150>)
 80013e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ea:	2300      	movs	r3, #0
 80013ec:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ee:	f107 0310 	add.w	r3, r7, #16
 80013f2:	4619      	mov	r1, r3
 80013f4:	4825      	ldr	r0, [pc, #148]	@ (800148c <MX_GPIO_Init+0x154>)
 80013f6:	f002 fe6b 	bl	80040d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LTC2944_ALCC_Pin;
 80013fa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80013fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001400:	4b23      	ldr	r3, [pc, #140]	@ (8001490 <MX_GPIO_Init+0x158>)
 8001402:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001404:	2301      	movs	r3, #1
 8001406:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LTC2944_ALCC_GPIO_Port, &GPIO_InitStruct);
 8001408:	f107 0310 	add.w	r3, r7, #16
 800140c:	4619      	mov	r1, r3
 800140e:	481d      	ldr	r0, [pc, #116]	@ (8001484 <MX_GPIO_Init+0x14c>)
 8001410:	f002 fe5e 	bl	80040d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LTC4151_SHDN_N_Pin;
 8001414:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001418:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800141a:	2301      	movs	r3, #1
 800141c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141e:	2300      	movs	r3, #0
 8001420:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001422:	2302      	movs	r3, #2
 8001424:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LTC4151_SHDN_N_GPIO_Port, &GPIO_InitStruct);
 8001426:	f107 0310 	add.w	r3, r7, #16
 800142a:	4619      	mov	r1, r3
 800142c:	4815      	ldr	r0, [pc, #84]	@ (8001484 <MX_GPIO_Init+0x14c>)
 800142e:	f002 fe4f 	bl	80040d0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001432:	2200      	movs	r2, #0
 8001434:	2100      	movs	r1, #0
 8001436:	2006      	movs	r0, #6
 8001438:	f002 fc2d 	bl	8003c96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800143c:	2006      	movs	r0, #6
 800143e:	f002 fc46 	bl	8003cce <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001442:	2200      	movs	r2, #0
 8001444:	2100      	movs	r1, #0
 8001446:	2007      	movs	r0, #7
 8001448:	f002 fc25 	bl	8003c96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800144c:	2007      	movs	r0, #7
 800144e:	f002 fc3e 	bl	8003cce <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001452:	2200      	movs	r2, #0
 8001454:	2100      	movs	r1, #0
 8001456:	200a      	movs	r0, #10
 8001458:	f002 fc1d 	bl	8003c96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800145c:	200a      	movs	r0, #10
 800145e:	f002 fc36 	bl	8003cce <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001462:	2200      	movs	r2, #0
 8001464:	2100      	movs	r1, #0
 8001466:	2017      	movs	r0, #23
 8001468:	f002 fc15 	bl	8003c96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800146c:	2017      	movs	r0, #23
 800146e:	f002 fc2e 	bl	8003cce <HAL_NVIC_EnableIRQ>

}
 8001472:	bf00      	nop
 8001474:	3720      	adds	r7, #32
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	40021000 	.word	0x40021000
 8001480:	40011000 	.word	0x40011000
 8001484:	40010c00 	.word	0x40010c00
 8001488:	10110000 	.word	0x10110000
 800148c:	40010800 	.word	0x40010800
 8001490:	10210000 	.word	0x10210000

08001494 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c2;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001498:	4b12      	ldr	r3, [pc, #72]	@ (80014e4 <MX_I2C1_Init+0x50>)
 800149a:	4a13      	ldr	r2, [pc, #76]	@ (80014e8 <MX_I2C1_Init+0x54>)
 800149c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800149e:	4b11      	ldr	r3, [pc, #68]	@ (80014e4 <MX_I2C1_Init+0x50>)
 80014a0:	4a12      	ldr	r2, [pc, #72]	@ (80014ec <MX_I2C1_Init+0x58>)
 80014a2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80014a4:	4b0f      	ldr	r3, [pc, #60]	@ (80014e4 <MX_I2C1_Init+0x50>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80014aa:	4b0e      	ldr	r3, [pc, #56]	@ (80014e4 <MX_I2C1_Init+0x50>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014b0:	4b0c      	ldr	r3, [pc, #48]	@ (80014e4 <MX_I2C1_Init+0x50>)
 80014b2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80014b6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014b8:	4b0a      	ldr	r3, [pc, #40]	@ (80014e4 <MX_I2C1_Init+0x50>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80014be:	4b09      	ldr	r3, [pc, #36]	@ (80014e4 <MX_I2C1_Init+0x50>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014c4:	4b07      	ldr	r3, [pc, #28]	@ (80014e4 <MX_I2C1_Init+0x50>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014ca:	4b06      	ldr	r3, [pc, #24]	@ (80014e4 <MX_I2C1_Init+0x50>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80014d0:	4804      	ldr	r0, [pc, #16]	@ (80014e4 <MX_I2C1_Init+0x50>)
 80014d2:	f002 ffcb 	bl	800446c <HAL_I2C_Init>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d001      	beq.n	80014e0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80014dc:	f001 fb04 	bl	8002ae8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80014e0:	bf00      	nop
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	20000248 	.word	0x20000248
 80014e8:	40005400 	.word	0x40005400
 80014ec:	000186a0 	.word	0x000186a0

080014f0 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80014f4:	4b12      	ldr	r3, [pc, #72]	@ (8001540 <MX_I2C2_Init+0x50>)
 80014f6:	4a13      	ldr	r2, [pc, #76]	@ (8001544 <MX_I2C2_Init+0x54>)
 80014f8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 80014fa:	4b11      	ldr	r3, [pc, #68]	@ (8001540 <MX_I2C2_Init+0x50>)
 80014fc:	4a12      	ldr	r2, [pc, #72]	@ (8001548 <MX_I2C2_Init+0x58>)
 80014fe:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001500:	4b0f      	ldr	r3, [pc, #60]	@ (8001540 <MX_I2C2_Init+0x50>)
 8001502:	2200      	movs	r2, #0
 8001504:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001506:	4b0e      	ldr	r3, [pc, #56]	@ (8001540 <MX_I2C2_Init+0x50>)
 8001508:	2200      	movs	r2, #0
 800150a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800150c:	4b0c      	ldr	r3, [pc, #48]	@ (8001540 <MX_I2C2_Init+0x50>)
 800150e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001512:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001514:	4b0a      	ldr	r3, [pc, #40]	@ (8001540 <MX_I2C2_Init+0x50>)
 8001516:	2200      	movs	r2, #0
 8001518:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800151a:	4b09      	ldr	r3, [pc, #36]	@ (8001540 <MX_I2C2_Init+0x50>)
 800151c:	2200      	movs	r2, #0
 800151e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001520:	4b07      	ldr	r3, [pc, #28]	@ (8001540 <MX_I2C2_Init+0x50>)
 8001522:	2200      	movs	r2, #0
 8001524:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001526:	4b06      	ldr	r3, [pc, #24]	@ (8001540 <MX_I2C2_Init+0x50>)
 8001528:	2200      	movs	r2, #0
 800152a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800152c:	4804      	ldr	r0, [pc, #16]	@ (8001540 <MX_I2C2_Init+0x50>)
 800152e:	f002 ff9d 	bl	800446c <HAL_I2C_Init>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d001      	beq.n	800153c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001538:	f001 fad6 	bl	8002ae8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800153c:	bf00      	nop
 800153e:	bd80      	pop	{r7, pc}
 8001540:	2000029c 	.word	0x2000029c
 8001544:	40005800 	.word	0x40005800
 8001548:	00061a80 	.word	0x00061a80

0800154c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b08a      	sub	sp, #40	@ 0x28
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001554:	f107 0318 	add.w	r3, r7, #24
 8001558:	2200      	movs	r2, #0
 800155a:	601a      	str	r2, [r3, #0]
 800155c:	605a      	str	r2, [r3, #4]
 800155e:	609a      	str	r2, [r3, #8]
 8001560:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4a42      	ldr	r2, [pc, #264]	@ (8001670 <HAL_I2C_MspInit+0x124>)
 8001568:	4293      	cmp	r3, r2
 800156a:	d152      	bne.n	8001612 <HAL_I2C_MspInit+0xc6>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800156c:	4b41      	ldr	r3, [pc, #260]	@ (8001674 <HAL_I2C_MspInit+0x128>)
 800156e:	699b      	ldr	r3, [r3, #24]
 8001570:	4a40      	ldr	r2, [pc, #256]	@ (8001674 <HAL_I2C_MspInit+0x128>)
 8001572:	f043 0308 	orr.w	r3, r3, #8
 8001576:	6193      	str	r3, [r2, #24]
 8001578:	4b3e      	ldr	r3, [pc, #248]	@ (8001674 <HAL_I2C_MspInit+0x128>)
 800157a:	699b      	ldr	r3, [r3, #24]
 800157c:	f003 0308 	and.w	r3, r3, #8
 8001580:	617b      	str	r3, [r7, #20]
 8001582:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001584:	23c0      	movs	r3, #192	@ 0xc0
 8001586:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001588:	2312      	movs	r3, #18
 800158a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800158c:	2303      	movs	r3, #3
 800158e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001590:	f107 0318 	add.w	r3, r7, #24
 8001594:	4619      	mov	r1, r3
 8001596:	4838      	ldr	r0, [pc, #224]	@ (8001678 <HAL_I2C_MspInit+0x12c>)
 8001598:	f002 fd9a 	bl	80040d0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800159c:	4b35      	ldr	r3, [pc, #212]	@ (8001674 <HAL_I2C_MspInit+0x128>)
 800159e:	69db      	ldr	r3, [r3, #28]
 80015a0:	4a34      	ldr	r2, [pc, #208]	@ (8001674 <HAL_I2C_MspInit+0x128>)
 80015a2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80015a6:	61d3      	str	r3, [r2, #28]
 80015a8:	4b32      	ldr	r3, [pc, #200]	@ (8001674 <HAL_I2C_MspInit+0x128>)
 80015aa:	69db      	ldr	r3, [r3, #28]
 80015ac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80015b0:	613b      	str	r3, [r7, #16]
 80015b2:	693b      	ldr	r3, [r7, #16]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 80015b4:	4b31      	ldr	r3, [pc, #196]	@ (800167c <HAL_I2C_MspInit+0x130>)
 80015b6:	4a32      	ldr	r2, [pc, #200]	@ (8001680 <HAL_I2C_MspInit+0x134>)
 80015b8:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80015ba:	4b30      	ldr	r3, [pc, #192]	@ (800167c <HAL_I2C_MspInit+0x130>)
 80015bc:	2210      	movs	r2, #16
 80015be:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80015c0:	4b2e      	ldr	r3, [pc, #184]	@ (800167c <HAL_I2C_MspInit+0x130>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80015c6:	4b2d      	ldr	r3, [pc, #180]	@ (800167c <HAL_I2C_MspInit+0x130>)
 80015c8:	2280      	movs	r2, #128	@ 0x80
 80015ca:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80015cc:	4b2b      	ldr	r3, [pc, #172]	@ (800167c <HAL_I2C_MspInit+0x130>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80015d2:	4b2a      	ldr	r3, [pc, #168]	@ (800167c <HAL_I2C_MspInit+0x130>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 80015d8:	4b28      	ldr	r3, [pc, #160]	@ (800167c <HAL_I2C_MspInit+0x130>)
 80015da:	2200      	movs	r2, #0
 80015dc:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80015de:	4b27      	ldr	r3, [pc, #156]	@ (800167c <HAL_I2C_MspInit+0x130>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 80015e4:	4825      	ldr	r0, [pc, #148]	@ (800167c <HAL_I2C_MspInit+0x130>)
 80015e6:	f002 fb8d 	bl	8003d04 <HAL_DMA_Init>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d001      	beq.n	80015f4 <HAL_I2C_MspInit+0xa8>
    {
      Error_Handler();
 80015f0:	f001 fa7a 	bl	8002ae8 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	4a21      	ldr	r2, [pc, #132]	@ (800167c <HAL_I2C_MspInit+0x130>)
 80015f8:	635a      	str	r2, [r3, #52]	@ 0x34
 80015fa:	4a20      	ldr	r2, [pc, #128]	@ (800167c <HAL_I2C_MspInit+0x130>)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6253      	str	r3, [r2, #36]	@ 0x24

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001600:	2200      	movs	r2, #0
 8001602:	2100      	movs	r1, #0
 8001604:	201f      	movs	r0, #31
 8001606:	f002 fb46 	bl	8003c96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800160a:	201f      	movs	r0, #31
 800160c:	f002 fb5f 	bl	8003cce <HAL_NVIC_EnableIRQ>
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001610:	e029      	b.n	8001666 <HAL_I2C_MspInit+0x11a>
  else if(i2cHandle->Instance==I2C2)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4a1b      	ldr	r2, [pc, #108]	@ (8001684 <HAL_I2C_MspInit+0x138>)
 8001618:	4293      	cmp	r3, r2
 800161a:	d124      	bne.n	8001666 <HAL_I2C_MspInit+0x11a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800161c:	4b15      	ldr	r3, [pc, #84]	@ (8001674 <HAL_I2C_MspInit+0x128>)
 800161e:	699b      	ldr	r3, [r3, #24]
 8001620:	4a14      	ldr	r2, [pc, #80]	@ (8001674 <HAL_I2C_MspInit+0x128>)
 8001622:	f043 0308 	orr.w	r3, r3, #8
 8001626:	6193      	str	r3, [r2, #24]
 8001628:	4b12      	ldr	r3, [pc, #72]	@ (8001674 <HAL_I2C_MspInit+0x128>)
 800162a:	699b      	ldr	r3, [r3, #24]
 800162c:	f003 0308 	and.w	r3, r3, #8
 8001630:	60fb      	str	r3, [r7, #12]
 8001632:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001634:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001638:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800163a:	2312      	movs	r3, #18
 800163c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800163e:	2303      	movs	r3, #3
 8001640:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001642:	f107 0318 	add.w	r3, r7, #24
 8001646:	4619      	mov	r1, r3
 8001648:	480b      	ldr	r0, [pc, #44]	@ (8001678 <HAL_I2C_MspInit+0x12c>)
 800164a:	f002 fd41 	bl	80040d0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800164e:	4b09      	ldr	r3, [pc, #36]	@ (8001674 <HAL_I2C_MspInit+0x128>)
 8001650:	69db      	ldr	r3, [r3, #28]
 8001652:	4a08      	ldr	r2, [pc, #32]	@ (8001674 <HAL_I2C_MspInit+0x128>)
 8001654:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001658:	61d3      	str	r3, [r2, #28]
 800165a:	4b06      	ldr	r3, [pc, #24]	@ (8001674 <HAL_I2C_MspInit+0x128>)
 800165c:	69db      	ldr	r3, [r3, #28]
 800165e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001662:	60bb      	str	r3, [r7, #8]
 8001664:	68bb      	ldr	r3, [r7, #8]
}
 8001666:	bf00      	nop
 8001668:	3728      	adds	r7, #40	@ 0x28
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	40005400 	.word	0x40005400
 8001674:	40021000 	.word	0x40021000
 8001678:	40010c00 	.word	0x40010c00
 800167c:	200002f0 	.word	0x200002f0
 8001680:	4002006c 	.word	0x4002006c
 8001684:	40005800 	.word	0x40005800

08001688 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8001690:	1d39      	adds	r1, r7, #4
 8001692:	f04f 33ff 	mov.w	r3, #4294967295
 8001696:	2201      	movs	r2, #1
 8001698:	4803      	ldr	r0, [pc, #12]	@ (80016a8 <__io_putchar+0x20>)
 800169a:	f006 fdcb 	bl	8008234 <HAL_UART_Transmit>
  return ch;
 800169e:	687b      	ldr	r3, [r7, #4]
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	3708      	adds	r7, #8
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	2000041c 	.word	0x2000041c

080016ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b082      	sub	sp, #8
 80016b0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016b2:	f001 fcb9 	bl	8003028 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016b6:	f000 f92d 	bl	8001914 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016ba:	f7ff fe3d 	bl	8001338 <MX_GPIO_Init>
  MX_DMA_Init();
 80016be:	f7ff fe1d 	bl	80012fc <MX_DMA_Init>
  MX_I2C2_Init();
 80016c2:	f7ff ff15 	bl	80014f0 <MX_I2C2_Init>
  MX_I2C1_Init();
 80016c6:	f7ff fee5 	bl	8001494 <MX_I2C1_Init>
  MX_ADC1_Init();
 80016ca:	f7ff fd9d 	bl	8001208 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 80016ce:	f001 fc11 	bl	8002ef4 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 80016d2:	f001 fb75 	bl	8002dc0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start_IT(&htim3, TIM_CHANNEL_ALL);
 80016d6:	213c      	movs	r1, #60	@ 0x3c
 80016d8:	4877      	ldr	r0, [pc, #476]	@ (80018b8 <main+0x20c>)
 80016da:	f006 fa97 	bl	8007c0c <HAL_TIM_Encoder_Start_IT>

  ssd1306_Init();
 80016de:	f007 f9f9 	bl	8008ad4 <ssd1306_Init>
  HAL_ADCEx_Calibration_Start(&hadc1);
 80016e2:	4876      	ldr	r0, [pc, #472]	@ (80018bc <main+0x210>)
 80016e4:	f002 f952 	bl	800398c <HAL_ADCEx_Calibration_Start>
  HAL_Delay(100);
 80016e8:	2064      	movs	r0, #100	@ 0x64
 80016ea:	f001 fcff 	bl	80030ec <HAL_Delay>
  HAL_ADC_Start(&hadc1);
 80016ee:	4873      	ldr	r0, [pc, #460]	@ (80018bc <main+0x210>)
 80016f0:	f001 fdf8 	bl	80032e4 <HAL_ADC_Start>

  printf("LTC2959 Begin\n\r");
 80016f4:	4872      	ldr	r0, [pc, #456]	@ (80018c0 <main+0x214>)
 80016f6:	f008 fbdf 	bl	8009eb8 <iprintf>
//  while(HAL_I2C_IsDeviceReady(&LTC2959_I2C_PORT, LTC2959_I2C_ADDR, 100, 1000) != HAL_OK);	// wait for it to come alive
  LTC2959_Init(&ltc2959);
 80016fa:	4872      	ldr	r0, [pc, #456]	@ (80018c4 <main+0x218>)
 80016fc:	f007 f94b 	bl	8008996 <LTC2959_Init>
  HAL_Delay(100);
 8001700:	2064      	movs	r0, #100	@ 0x64
 8001702:	f001 fcf3 	bl	80030ec <HAL_Delay>

  AD5693_Reset();
 8001706:	f006 ff69 	bl	80085dc <AD5693_Reset>
  HAL_Delay(10);
 800170a:	200a      	movs	r0, #10
 800170c:	f001 fcee 	bl	80030ec <HAL_Delay>
  AD5693_Init(ad5693);
 8001710:	4b6d      	ldr	r3, [pc, #436]	@ (80018c8 <main+0x21c>)
 8001712:	6818      	ldr	r0, [r3, #0]
 8001714:	f006 ff82 	bl	800861c <AD5693_Init>
  HAL_Delay(10);
 8001718:	200a      	movs	r0, #10
 800171a:	f001 fce7 	bl	80030ec <HAL_Delay>

//  myOLED_char(1, 12, "Volt = ");
//  myOLED_char(1, 24, "Curr = ");
//  myOLED_char(1, 36, "Chg  = ");
//  myOLED_char(1, 48, "Temp = ");
  ssd1306_UpdateScreen();
 800171e:	f007 fa65 	bl	8008bec <ssd1306_UpdateScreen>
  HAL_Delay(100);
 8001722:	2064      	movs	r0, #100	@ 0x64
 8001724:	f001 fce2 	bl	80030ec <HAL_Delay>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  printf("RUNNING\n");
 8001728:	4868      	ldr	r0, [pc, #416]	@ (80018cc <main+0x220>)
 800172a:	f008 fc2d 	bl	8009f88 <puts>
//  printf("%ld\n", concatenate(12,354));

  while (1)
  {
	  tick = HAL_GetTick();
 800172e:	f001 fcd3 	bl	80030d8 <HAL_GetTick>
 8001732:	4603      	mov	r3, r0
 8001734:	4a66      	ldr	r2, [pc, #408]	@ (80018d0 <main+0x224>)
 8001736:	6013      	str	r3, [r2, #0]

	  update_display();
 8001738:	f000 face 	bl	8001cd8 <update_display>
	  update_encoder_state();
 800173c:	f000 fe0c 	bl	8002358 <update_encoder_state>
	  handle_button_press();
 8001740:	f001 f8c4 	bl	80028cc <handle_button_press>
	  set_param.set_current = param_mode.current * 1000;
 8001744:	4b63      	ldr	r3, [pc, #396]	@ (80018d4 <main+0x228>)
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	4963      	ldr	r1, [pc, #396]	@ (80018d8 <main+0x22c>)
 800174a:	4618      	mov	r0, r3
 800174c:	f7ff fb1a 	bl	8000d84 <__aeabi_fmul>
 8001750:	4603      	mov	r3, r0
 8001752:	4618      	mov	r0, r3
 8001754:	f7ff fd02 	bl	800115c <__aeabi_f2uiz>
 8001758:	4603      	mov	r3, r0
 800175a:	b29a      	uxth	r2, r3
 800175c:	4b5f      	ldr	r3, [pc, #380]	@ (80018dc <main+0x230>)
 800175e:	805a      	strh	r2, [r3, #2]

//	  myOLED_int16(1, 2, tick);
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_ADC_PollForConversion(&hadc1, 10);
 8001760:	210a      	movs	r1, #10
 8001762:	4856      	ldr	r0, [pc, #344]	@ (80018bc <main+0x210>)
 8001764:	f001 fe6c 	bl	8003440 <HAL_ADC_PollForConversion>
  	  if(HAL_ADC_GetValue(&hadc1) >= 200){
 8001768:	4854      	ldr	r0, [pc, #336]	@ (80018bc <main+0x210>)
 800176a:	f001 ff6f 	bl	800364c <HAL_ADC_GetValue>
 800176e:	4603      	mov	r3, r0
 8001770:	2bc7      	cmp	r3, #199	@ 0xc7
 8001772:	d903      	bls.n	800177c <main+0xd0>
  		  battery_detect = true;
 8001774:	4b5a      	ldr	r3, [pc, #360]	@ (80018e0 <main+0x234>)
 8001776:	2201      	movs	r2, #1
 8001778:	701a      	strb	r2, [r3, #0]
 800177a:	e008      	b.n	800178e <main+0xe2>
  	  }else if(HAL_ADC_GetValue(&hadc1) < 200){
 800177c:	484f      	ldr	r0, [pc, #316]	@ (80018bc <main+0x210>)
 800177e:	f001 ff65 	bl	800364c <HAL_ADC_GetValue>
 8001782:	4603      	mov	r3, r0
 8001784:	2bc7      	cmp	r3, #199	@ 0xc7
 8001786:	d802      	bhi.n	800178e <main+0xe2>
  		  battery_detect = false;
 8001788:	4b55      	ldr	r3, [pc, #340]	@ (80018e0 <main+0x234>)
 800178a:	2200      	movs	r2, #0
 800178c:	701a      	strb	r2, [r3, #0]
  	  }


      for (uint8_t i = 0; i < 10; i++) {
 800178e:	2300      	movs	r3, #0
 8001790:	71fb      	strb	r3, [r7, #7]
 8001792:	e00a      	b.n	80017aa <main+0xfe>
          sensor_data[i] = LTC2959_Get_Current();
 8001794:	f007 f928 	bl	80089e8 <LTC2959_Get_Current>
 8001798:	4602      	mov	r2, r0
 800179a:	79fb      	ldrb	r3, [r7, #7]
 800179c:	4611      	mov	r1, r2
 800179e:	4a51      	ldr	r2, [pc, #324]	@ (80018e4 <main+0x238>)
 80017a0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      for (uint8_t i = 0; i < 10; i++) {
 80017a4:	79fb      	ldrb	r3, [r7, #7]
 80017a6:	3301      	adds	r3, #1
 80017a8:	71fb      	strb	r3, [r7, #7]
 80017aa:	79fb      	ldrb	r3, [r7, #7]
 80017ac:	2b09      	cmp	r3, #9
 80017ae:	d9f1      	bls.n	8001794 <main+0xe8>
      }

	  current = LTC2959_Get_Current();
 80017b0:	f007 f91a 	bl	80089e8 <LTC2959_Get_Current>
 80017b4:	4603      	mov	r3, r0
 80017b6:	4a4c      	ldr	r2, [pc, #304]	@ (80018e8 <main+0x23c>)
 80017b8:	6013      	str	r3, [r2, #0]
  	  filter_current = Get_Current_Filtered(current);
 80017ba:	4b4b      	ldr	r3, [pc, #300]	@ (80018e8 <main+0x23c>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4618      	mov	r0, r3
 80017c0:	f006 fffc 	bl	80087bc <Get_Current_Filtered>
 80017c4:	4603      	mov	r3, r0
 80017c6:	4a49      	ldr	r2, [pc, #292]	@ (80018ec <main+0x240>)
 80017c8:	6013      	str	r3, [r2, #0]
		  prev_control_delay = tick;
	  }
*/


	  switch(state){
 80017ca:	4b49      	ldr	r3, [pc, #292]	@ (80018f0 <main+0x244>)
 80017cc:	781b      	ldrb	r3, [r3, #0]
 80017ce:	2b02      	cmp	r3, #2
 80017d0:	d03a      	beq.n	8001848 <main+0x19c>
 80017d2:	2b02      	cmp	r3, #2
 80017d4:	dc5b      	bgt.n	800188e <main+0x1e2>
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d002      	beq.n	80017e0 <main+0x134>
 80017da:	2b01      	cmp	r3, #1
 80017dc:	d02a      	beq.n	8001834 <main+0x188>
 80017de:	e056      	b.n	800188e <main+0x1e2>
	  case IDLE:
		  if(battery_detect){
 80017e0:	4b3f      	ldr	r3, [pc, #252]	@ (80018e0 <main+0x234>)
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d003      	beq.n	80017f0 <main+0x144>
			  state = BATT_CONN;
 80017e8:	4b41      	ldr	r3, [pc, #260]	@ (80018f0 <main+0x244>)
 80017ea:	2201      	movs	r2, #1
 80017ec:	701a      	strb	r2, [r3, #0]
			  // Resets the seconds count every time battery is removed
			  if(seconds > 1){
				  seconds = 0;
			  }
		  }
		  break;
 80017ee:	e04b      	b.n	8001888 <main+0x1dc>
			  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, RESET);
 80017f0:	2200      	movs	r2, #0
 80017f2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80017f6:	483f      	ldr	r0, [pc, #252]	@ (80018f4 <main+0x248>)
 80017f8:	f002 fdee 	bl	80043d8 <HAL_GPIO_WritePin>
			  myOLED_char(50, 24, "        ");	// print empty spaces in curr
 80017fc:	4a3e      	ldr	r2, [pc, #248]	@ (80018f8 <main+0x24c>)
 80017fe:	2118      	movs	r1, #24
 8001800:	2032      	movs	r0, #50	@ 0x32
 8001802:	f000 f98d 	bl	8001b20 <myOLED_char>
			  myOLED_char(50, 36, "       ");	// print empty spaces in chg
 8001806:	4a3d      	ldr	r2, [pc, #244]	@ (80018fc <main+0x250>)
 8001808:	2124      	movs	r1, #36	@ 0x24
 800180a:	2032      	movs	r0, #50	@ 0x32
 800180c:	f000 f988 	bl	8001b20 <myOLED_char>
			  myOLED_char(50, 48, "  ");		// print empty spaces in temp
 8001810:	4a3b      	ldr	r2, [pc, #236]	@ (8001900 <main+0x254>)
 8001812:	2130      	movs	r1, #48	@ 0x30
 8001814:	2032      	movs	r0, #50	@ 0x32
 8001816:	f000 f983 	bl	8001b20 <myOLED_char>
			  myOLED_int8(50, 2, 0);
 800181a:	2200      	movs	r2, #0
 800181c:	2102      	movs	r1, #2
 800181e:	2032      	movs	r0, #50	@ 0x32
 8001820:	f000 fa32 	bl	8001c88 <myOLED_int8>
			  if(seconds > 1){
 8001824:	4b37      	ldr	r3, [pc, #220]	@ (8001904 <main+0x258>)
 8001826:	881b      	ldrh	r3, [r3, #0]
 8001828:	2b01      	cmp	r3, #1
 800182a:	d92d      	bls.n	8001888 <main+0x1dc>
				  seconds = 0;
 800182c:	4b35      	ldr	r3, [pc, #212]	@ (8001904 <main+0x258>)
 800182e:	2200      	movs	r2, #0
 8001830:	801a      	strh	r2, [r3, #0]
		  break;
 8001832:	e029      	b.n	8001888 <main+0x1dc>

	  case BATT_CONN:
		  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, SET); 		// Turn on RED led for indication
 8001834:	2201      	movs	r2, #1
 8001836:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800183a:	482e      	ldr	r0, [pc, #184]	@ (80018f4 <main+0x248>)
 800183c:	f002 fdcc 	bl	80043d8 <HAL_GPIO_WritePin>
		  state = RUN;
 8001840:	4b2b      	ldr	r3, [pc, #172]	@ (80018f0 <main+0x244>)
 8001842:	2202      	movs	r2, #2
 8001844:	701a      	strb	r2, [r3, #0]
		  break;
 8001846:	e022      	b.n	800188e <main+0x1e2>

	  case RUN:
		  /*
		  * test timer for run condition
		  */
		  if(tick - sec_prev >= 1000){		// 1000ms = 1 sec
 8001848:	4b21      	ldr	r3, [pc, #132]	@ (80018d0 <main+0x224>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a2e      	ldr	r2, [pc, #184]	@ (8001908 <main+0x25c>)
 800184e:	8812      	ldrh	r2, [r2, #0]
 8001850:	1a9b      	subs	r3, r3, r2
 8001852:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001856:	d30f      	bcc.n	8001878 <main+0x1cc>
			  sec_prev = tick;
 8001858:	4b1d      	ldr	r3, [pc, #116]	@ (80018d0 <main+0x224>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	b29a      	uxth	r2, r3
 800185e:	4b2a      	ldr	r3, [pc, #168]	@ (8001908 <main+0x25c>)
 8001860:	801a      	strh	r2, [r3, #0]
			  myOLED_int16(50, 2, seconds++);
 8001862:	4b28      	ldr	r3, [pc, #160]	@ (8001904 <main+0x258>)
 8001864:	881b      	ldrh	r3, [r3, #0]
 8001866:	1c5a      	adds	r2, r3, #1
 8001868:	b291      	uxth	r1, r2
 800186a:	4a26      	ldr	r2, [pc, #152]	@ (8001904 <main+0x258>)
 800186c:	8011      	strh	r1, [r2, #0]
 800186e:	461a      	mov	r2, r3
 8001870:	2102      	movs	r1, #2
 8001872:	2032      	movs	r0, #50	@ 0x32
 8001874:	f000 f9e0 	bl	8001c38 <myOLED_int16>
		  }
		  if(battery_detect){
 8001878:	4b19      	ldr	r3, [pc, #100]	@ (80018e0 <main+0x234>)
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d105      	bne.n	800188c <main+0x1e0>
			  // print the battery values on oled screen
				  break;
//			  }
		  }else{
			  state = IDLE;
 8001880:	4b1b      	ldr	r3, [pc, #108]	@ (80018f0 <main+0x244>)
 8001882:	2200      	movs	r2, #0
 8001884:	701a      	strb	r2, [r3, #0]
		  }
		  break;
 8001886:	e002      	b.n	800188e <main+0x1e2>
		  break;
 8001888:	bf00      	nop
 800188a:	e000      	b.n	800188e <main+0x1e2>
				  break;
 800188c:	bf00      	nop

	  default:
	  }

	  if(tick - prev_tick >= blink_delay){
 800188e:	4b10      	ldr	r3, [pc, #64]	@ (80018d0 <main+0x224>)
 8001890:	681a      	ldr	r2, [r3, #0]
 8001892:	4b1e      	ldr	r3, [pc, #120]	@ (800190c <main+0x260>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	1ad3      	subs	r3, r2, r3
 8001898:	4a1d      	ldr	r2, [pc, #116]	@ (8001910 <main+0x264>)
 800189a:	8812      	ldrh	r2, [r2, #0]
 800189c:	4293      	cmp	r3, r2
 800189e:	f4ff af46 	bcc.w	800172e <main+0x82>
		  prev_tick = tick;
 80018a2:	4b0b      	ldr	r3, [pc, #44]	@ (80018d0 <main+0x224>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4a19      	ldr	r2, [pc, #100]	@ (800190c <main+0x260>)
 80018a8:	6013      	str	r3, [r2, #0]
		  HAL_GPIO_TogglePin(LED_BLU_GPIO_Port, LED_BLU_Pin);
 80018aa:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80018ae:	4811      	ldr	r0, [pc, #68]	@ (80018f4 <main+0x248>)
 80018b0:	f002 fdaa 	bl	8004408 <HAL_GPIO_TogglePin>
	  tick = HAL_GetTick();
 80018b4:	e73b      	b.n	800172e <main+0x82>
 80018b6:	bf00      	nop
 80018b8:	200003d4 	.word	0x200003d4
 80018bc:	20000218 	.word	0x20000218
 80018c0:	0800d810 	.word	0x0800d810
 80018c4:	20000004 	.word	0x20000004
 80018c8:	20000380 	.word	0x20000380
 80018cc:	0800d820 	.word	0x0800d820
 80018d0:	20000334 	.word	0x20000334
 80018d4:	20000384 	.word	0x20000384
 80018d8:	447a0000 	.word	0x447a0000
 80018dc:	20000394 	.word	0x20000394
 80018e0:	20000357 	.word	0x20000357
 80018e4:	20000358 	.word	0x20000358
 80018e8:	20000340 	.word	0x20000340
 80018ec:	20000344 	.word	0x20000344
 80018f0:	20000356 	.word	0x20000356
 80018f4:	40011000 	.word	0x40011000
 80018f8:	0800d828 	.word	0x0800d828
 80018fc:	0800d834 	.word	0x0800d834
 8001900:	0800d83c 	.word	0x0800d83c
 8001904:	20000354 	.word	0x20000354
 8001908:	20000352 	.word	0x20000352
 800190c:	20000338 	.word	0x20000338
 8001910:	20000000 	.word	0x20000000

08001914 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b094      	sub	sp, #80	@ 0x50
 8001918:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800191a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800191e:	2228      	movs	r2, #40	@ 0x28
 8001920:	2100      	movs	r1, #0
 8001922:	4618      	mov	r0, r3
 8001924:	f008 fc4a 	bl	800a1bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001928:	f107 0314 	add.w	r3, r7, #20
 800192c:	2200      	movs	r2, #0
 800192e:	601a      	str	r2, [r3, #0]
 8001930:	605a      	str	r2, [r3, #4]
 8001932:	609a      	str	r2, [r3, #8]
 8001934:	60da      	str	r2, [r3, #12]
 8001936:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001938:	1d3b      	adds	r3, r7, #4
 800193a:	2200      	movs	r2, #0
 800193c:	601a      	str	r2, [r3, #0]
 800193e:	605a      	str	r2, [r3, #4]
 8001940:	609a      	str	r2, [r3, #8]
 8001942:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001944:	2301      	movs	r3, #1
 8001946:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001948:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800194c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800194e:	2300      	movs	r3, #0
 8001950:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001952:	2301      	movs	r3, #1
 8001954:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001956:	2302      	movs	r3, #2
 8001958:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800195a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800195e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001960:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001964:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001966:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800196a:	4618      	mov	r0, r3
 800196c:	f005 fb30 	bl	8006fd0 <HAL_RCC_OscConfig>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d001      	beq.n	800197a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001976:	f001 f8b7 	bl	8002ae8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800197a:	230f      	movs	r3, #15
 800197c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800197e:	2302      	movs	r3, #2
 8001980:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001982:	2300      	movs	r3, #0
 8001984:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001986:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800198a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800198c:	2300      	movs	r3, #0
 800198e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001990:	f107 0314 	add.w	r3, r7, #20
 8001994:	2102      	movs	r1, #2
 8001996:	4618      	mov	r0, r3
 8001998:	f005 fd9c 	bl	80074d4 <HAL_RCC_ClockConfig>
 800199c:	4603      	mov	r3, r0
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d001      	beq.n	80019a6 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80019a2:	f001 f8a1 	bl	8002ae8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80019a6:	2302      	movs	r3, #2
 80019a8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80019aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80019ae:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019b0:	1d3b      	adds	r3, r7, #4
 80019b2:	4618      	mov	r0, r3
 80019b4:	f005 ff1c 	bl	80077f0 <HAL_RCCEx_PeriphCLKConfig>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d001      	beq.n	80019c2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80019be:	f001 f893 	bl	8002ae8 <Error_Handler>
  }
}
 80019c2:	bf00      	nop
 80019c4:	3750      	adds	r7, #80	@ 0x50
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
	...

080019cc <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 80019cc:	b480      	push	{r7}
 80019ce:	b083      	sub	sp, #12
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
	rotary_out = __HAL_TIM_GET_COUNTER(htim);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019da:	4a06      	ldr	r2, [pc, #24]	@ (80019f4 <HAL_TIM_IC_CaptureCallback+0x28>)
 80019dc:	6013      	str	r3, [r2, #0]
	rot_cnt = rotary_out / 4;
 80019de:	4b05      	ldr	r3, [pc, #20]	@ (80019f4 <HAL_TIM_IC_CaptureCallback+0x28>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	089b      	lsrs	r3, r3, #2
 80019e4:	4a04      	ldr	r2, [pc, #16]	@ (80019f8 <HAL_TIM_IC_CaptureCallback+0x2c>)
 80019e6:	6013      	str	r3, [r2, #0]
}
 80019e8:	bf00      	nop
 80019ea:	370c      	adds	r7, #12
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bc80      	pop	{r7}
 80019f0:	4770      	bx	lr
 80019f2:	bf00      	nop
 80019f4:	200003a0 	.word	0x200003a0
 80019f8:	200003a4 	.word	0x200003a4

080019fc <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80019fc:	b480      	push	{r7}
 80019fe:	b083      	sub	sp, #12
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	4603      	mov	r3, r0
 8001a04:	80fb      	strh	r3, [r7, #6]
	switch(GPIO_Pin){
 8001a06:	88fb      	ldrh	r3, [r7, #6]
 8001a08:	3b01      	subs	r3, #1
 8001a0a:	2b1f      	cmp	r3, #31
 8001a0c:	d86f      	bhi.n	8001aee <HAL_GPIO_EXTI_Callback+0xf2>
 8001a0e:	a201      	add	r2, pc, #4	@ (adr r2, 8001a14 <HAL_GPIO_EXTI_Callback+0x18>)
 8001a10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a14:	08001ab3 	.word	0x08001ab3
 8001a18:	08001ac7 	.word	0x08001ac7
 8001a1c:	08001aef 	.word	0x08001aef
 8001a20:	08001aef 	.word	0x08001aef
 8001a24:	08001aef 	.word	0x08001aef
 8001a28:	08001aef 	.word	0x08001aef
 8001a2c:	08001aef 	.word	0x08001aef
 8001a30:	08001aef 	.word	0x08001aef
 8001a34:	08001aef 	.word	0x08001aef
 8001a38:	08001aef 	.word	0x08001aef
 8001a3c:	08001aef 	.word	0x08001aef
 8001a40:	08001aef 	.word	0x08001aef
 8001a44:	08001aef 	.word	0x08001aef
 8001a48:	08001aef 	.word	0x08001aef
 8001a4c:	08001aef 	.word	0x08001aef
 8001a50:	08001adb 	.word	0x08001adb
 8001a54:	08001aef 	.word	0x08001aef
 8001a58:	08001aef 	.word	0x08001aef
 8001a5c:	08001aef 	.word	0x08001aef
 8001a60:	08001aef 	.word	0x08001aef
 8001a64:	08001aef 	.word	0x08001aef
 8001a68:	08001aef 	.word	0x08001aef
 8001a6c:	08001aef 	.word	0x08001aef
 8001a70:	08001aef 	.word	0x08001aef
 8001a74:	08001aef 	.word	0x08001aef
 8001a78:	08001aef 	.word	0x08001aef
 8001a7c:	08001aef 	.word	0x08001aef
 8001a80:	08001aef 	.word	0x08001aef
 8001a84:	08001aef 	.word	0x08001aef
 8001a88:	08001aef 	.word	0x08001aef
 8001a8c:	08001aef 	.word	0x08001aef
 8001a90:	08001a95 	.word	0x08001a95
	case ROT_SW_Pin:
		sw_rot_state = true;
 8001a94:	4b19      	ldr	r3, [pc, #100]	@ (8001afc <HAL_GPIO_EXTI_Callback+0x100>)
 8001a96:	2201      	movs	r2, #1
 8001a98:	701a      	strb	r2, [r3, #0]
		if(current_state == PARAMETER_SETTING){
 8001a9a:	4b19      	ldr	r3, [pc, #100]	@ (8001b00 <HAL_GPIO_EXTI_Callback+0x104>)
 8001a9c:	781b      	ldrb	r3, [r3, #0]
 8001a9e:	2b02      	cmp	r3, #2
 8001aa0:	d103      	bne.n	8001aaa <HAL_GPIO_EXTI_Callback+0xae>
			save_param = true;	 	// raise the flag for saving param
 8001aa2:	4b18      	ldr	r3, [pc, #96]	@ (8001b04 <HAL_GPIO_EXTI_Callback+0x108>)
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	701a      	strb	r2, [r3, #0]
		}else{
			save_param = false;
		}
		break;
 8001aa8:	e022      	b.n	8001af0 <HAL_GPIO_EXTI_Callback+0xf4>
			save_param = false;
 8001aaa:	4b16      	ldr	r3, [pc, #88]	@ (8001b04 <HAL_GPIO_EXTI_Callback+0x108>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	701a      	strb	r2, [r3, #0]
		break;
 8001ab0:	e01e      	b.n	8001af0 <HAL_GPIO_EXTI_Callback+0xf4>
	case A_SW_Pin:
		sw_a_state = true;
 8001ab2:	4b15      	ldr	r3, [pc, #84]	@ (8001b08 <HAL_GPIO_EXTI_Callback+0x10c>)
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	701a      	strb	r2, [r3, #0]
		sw_a_cnt++;
 8001ab8:	4b14      	ldr	r3, [pc, #80]	@ (8001b0c <HAL_GPIO_EXTI_Callback+0x110>)
 8001aba:	881b      	ldrh	r3, [r3, #0]
 8001abc:	3301      	adds	r3, #1
 8001abe:	b29a      	uxth	r2, r3
 8001ac0:	4b12      	ldr	r3, [pc, #72]	@ (8001b0c <HAL_GPIO_EXTI_Callback+0x110>)
 8001ac2:	801a      	strh	r2, [r3, #0]
		break;
 8001ac4:	e014      	b.n	8001af0 <HAL_GPIO_EXTI_Callback+0xf4>
	case B_SW_Pin:
		sw_b_state = true;
 8001ac6:	4b12      	ldr	r3, [pc, #72]	@ (8001b10 <HAL_GPIO_EXTI_Callback+0x114>)
 8001ac8:	2201      	movs	r2, #1
 8001aca:	701a      	strb	r2, [r3, #0]
		sw_b_cnt++;
 8001acc:	4b11      	ldr	r3, [pc, #68]	@ (8001b14 <HAL_GPIO_EXTI_Callback+0x118>)
 8001ace:	881b      	ldrh	r3, [r3, #0]
 8001ad0:	3301      	adds	r3, #1
 8001ad2:	b29a      	uxth	r2, r3
 8001ad4:	4b0f      	ldr	r3, [pc, #60]	@ (8001b14 <HAL_GPIO_EXTI_Callback+0x118>)
 8001ad6:	801a      	strh	r2, [r3, #0]
		break;
 8001ad8:	e00a      	b.n	8001af0 <HAL_GPIO_EXTI_Callback+0xf4>
	case C_SW_Pin:
		sw_c_state = true;
 8001ada:	4b0f      	ldr	r3, [pc, #60]	@ (8001b18 <HAL_GPIO_EXTI_Callback+0x11c>)
 8001adc:	2201      	movs	r2, #1
 8001ade:	701a      	strb	r2, [r3, #0]
		sw_c_cnt++;
 8001ae0:	4b0e      	ldr	r3, [pc, #56]	@ (8001b1c <HAL_GPIO_EXTI_Callback+0x120>)
 8001ae2:	881b      	ldrh	r3, [r3, #0]
 8001ae4:	3301      	adds	r3, #1
 8001ae6:	b29a      	uxth	r2, r3
 8001ae8:	4b0c      	ldr	r3, [pc, #48]	@ (8001b1c <HAL_GPIO_EXTI_Callback+0x120>)
 8001aea:	801a      	strh	r2, [r3, #0]
		break;
 8001aec:	e000      	b.n	8001af0 <HAL_GPIO_EXTI_Callback+0xf4>
	default:
		break;
 8001aee:	bf00      	nop
	}
}
 8001af0:	bf00      	nop
 8001af2:	370c      	adds	r7, #12
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bc80      	pop	{r7}
 8001af8:	4770      	bx	lr
 8001afa:	bf00      	nop
 8001afc:	200003b8 	.word	0x200003b8
 8001b00:	2000039c 	.word	0x2000039c
 8001b04:	200003bc 	.word	0x200003bc
 8001b08:	200003b9 	.word	0x200003b9
 8001b0c:	200003b2 	.word	0x200003b2
 8001b10:	200003ba 	.word	0x200003ba
 8001b14:	200003b4 	.word	0x200003b4
 8001b18:	200003bb 	.word	0x200003bb
 8001b1c:	200003b6 	.word	0x200003b6

08001b20 <myOLED_char>:

void myOLED_char(uint16_t cursorX, uint16_t cursorY, char *data){
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b082      	sub	sp, #8
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	4603      	mov	r3, r0
 8001b28:	603a      	str	r2, [r7, #0]
 8001b2a:	80fb      	strh	r3, [r7, #6]
 8001b2c:	460b      	mov	r3, r1
 8001b2e:	80bb      	strh	r3, [r7, #4]

	ssd1306_SetCursor(cursorX, cursorY);
 8001b30:	88fb      	ldrh	r3, [r7, #6]
 8001b32:	b2db      	uxtb	r3, r3
 8001b34:	88ba      	ldrh	r2, [r7, #4]
 8001b36:	b2d2      	uxtb	r2, r2
 8001b38:	4611      	mov	r1, r2
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f007 f97e 	bl	8008e3c <ssd1306_SetCursor>
	ssd1306_WriteString(data, Font_7x10, White);
 8001b40:	4a04      	ldr	r2, [pc, #16]	@ (8001b54 <myOLED_char+0x34>)
 8001b42:	2301      	movs	r3, #1
 8001b44:	ca06      	ldmia	r2, {r1, r2}
 8001b46:	6838      	ldr	r0, [r7, #0]
 8001b48:	f007 f952 	bl	8008df0 <ssd1306_WriteString>
}
 8001b4c:	bf00      	nop
 8001b4e:	3708      	adds	r7, #8
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	20000024 	.word	0x20000024

08001b58 <myOLED_char_big>:

void myOLED_char_big(uint16_t cursorX, uint16_t cursorY, char *data){
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	4603      	mov	r3, r0
 8001b60:	603a      	str	r2, [r7, #0]
 8001b62:	80fb      	strh	r3, [r7, #6]
 8001b64:	460b      	mov	r3, r1
 8001b66:	80bb      	strh	r3, [r7, #4]

	ssd1306_SetCursor(cursorX, cursorY);
 8001b68:	88fb      	ldrh	r3, [r7, #6]
 8001b6a:	b2db      	uxtb	r3, r3
 8001b6c:	88ba      	ldrh	r2, [r7, #4]
 8001b6e:	b2d2      	uxtb	r2, r2
 8001b70:	4611      	mov	r1, r2
 8001b72:	4618      	mov	r0, r3
 8001b74:	f007 f962 	bl	8008e3c <ssd1306_SetCursor>
	ssd1306_WriteString(data, Font_11x18, White);
 8001b78:	4a04      	ldr	r2, [pc, #16]	@ (8001b8c <myOLED_char_big+0x34>)
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	ca06      	ldmia	r2, {r1, r2}
 8001b7e:	6838      	ldr	r0, [r7, #0]
 8001b80:	f007 f936 	bl	8008df0 <ssd1306_WriteString>
}
 8001b84:	bf00      	nop
 8001b86:	3708      	adds	r7, #8
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	2000002c 	.word	0x2000002c

08001b90 <myOLED_float>:

void myOLED_float(uint16_t cursorX, uint16_t cursorY, float data){
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b086      	sub	sp, #24
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	4603      	mov	r3, r0
 8001b98:	603a      	str	r2, [r7, #0]
 8001b9a:	80fb      	strh	r3, [r7, #6]
 8001b9c:	460b      	mov	r3, r1
 8001b9e:	80bb      	strh	r3, [r7, #4]
	char str_data[10];

	sprintf(str_data, "%.3f", data);
 8001ba0:	6838      	ldr	r0, [r7, #0]
 8001ba2:	f7fe fc41 	bl	8000428 <__aeabi_f2d>
 8001ba6:	4602      	mov	r2, r0
 8001ba8:	460b      	mov	r3, r1
 8001baa:	f107 000c 	add.w	r0, r7, #12
 8001bae:	490b      	ldr	r1, [pc, #44]	@ (8001bdc <myOLED_float+0x4c>)
 8001bb0:	f008 f9f2 	bl	8009f98 <siprintf>
	ssd1306_SetCursor(cursorX, cursorY);
 8001bb4:	88fb      	ldrh	r3, [r7, #6]
 8001bb6:	b2db      	uxtb	r3, r3
 8001bb8:	88ba      	ldrh	r2, [r7, #4]
 8001bba:	b2d2      	uxtb	r2, r2
 8001bbc:	4611      	mov	r1, r2
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f007 f93c 	bl	8008e3c <ssd1306_SetCursor>
	ssd1306_WriteString(str_data, Font_7x10, White);
 8001bc4:	4a06      	ldr	r2, [pc, #24]	@ (8001be0 <myOLED_float+0x50>)
 8001bc6:	f107 000c 	add.w	r0, r7, #12
 8001bca:	2301      	movs	r3, #1
 8001bcc:	ca06      	ldmia	r2, {r1, r2}
 8001bce:	f007 f90f 	bl	8008df0 <ssd1306_WriteString>
}
 8001bd2:	bf00      	nop
 8001bd4:	3718      	adds	r7, #24
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	0800d840 	.word	0x0800d840
 8001be0:	20000024 	.word	0x20000024

08001be4 <myOLED_float_big>:

void myOLED_float_big(uint16_t cursorX, uint16_t cursorY, float data){
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b086      	sub	sp, #24
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	4603      	mov	r3, r0
 8001bec:	603a      	str	r2, [r7, #0]
 8001bee:	80fb      	strh	r3, [r7, #6]
 8001bf0:	460b      	mov	r3, r1
 8001bf2:	80bb      	strh	r3, [r7, #4]
	char str_data[10];

	sprintf(str_data, "%.3f", data);
 8001bf4:	6838      	ldr	r0, [r7, #0]
 8001bf6:	f7fe fc17 	bl	8000428 <__aeabi_f2d>
 8001bfa:	4602      	mov	r2, r0
 8001bfc:	460b      	mov	r3, r1
 8001bfe:	f107 000c 	add.w	r0, r7, #12
 8001c02:	490b      	ldr	r1, [pc, #44]	@ (8001c30 <myOLED_float_big+0x4c>)
 8001c04:	f008 f9c8 	bl	8009f98 <siprintf>
	ssd1306_SetCursor(cursorX, cursorY);
 8001c08:	88fb      	ldrh	r3, [r7, #6]
 8001c0a:	b2db      	uxtb	r3, r3
 8001c0c:	88ba      	ldrh	r2, [r7, #4]
 8001c0e:	b2d2      	uxtb	r2, r2
 8001c10:	4611      	mov	r1, r2
 8001c12:	4618      	mov	r0, r3
 8001c14:	f007 f912 	bl	8008e3c <ssd1306_SetCursor>
	ssd1306_WriteString(str_data, Font_11x18, White);
 8001c18:	4a06      	ldr	r2, [pc, #24]	@ (8001c34 <myOLED_float_big+0x50>)
 8001c1a:	f107 000c 	add.w	r0, r7, #12
 8001c1e:	2301      	movs	r3, #1
 8001c20:	ca06      	ldmia	r2, {r1, r2}
 8001c22:	f007 f8e5 	bl	8008df0 <ssd1306_WriteString>
}
 8001c26:	bf00      	nop
 8001c28:	3718      	adds	r7, #24
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	0800d840 	.word	0x0800d840
 8001c34:	2000002c 	.word	0x2000002c

08001c38 <myOLED_int16>:

void myOLED_int16(uint16_t cursorX, uint16_t cursorY, uint16_t data){
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b086      	sub	sp, #24
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	4603      	mov	r3, r0
 8001c40:	80fb      	strh	r3, [r7, #6]
 8001c42:	460b      	mov	r3, r1
 8001c44:	80bb      	strh	r3, [r7, #4]
 8001c46:	4613      	mov	r3, r2
 8001c48:	807b      	strh	r3, [r7, #2]
	char str_data[10];

	sprintf(str_data, "%u", data);
 8001c4a:	887a      	ldrh	r2, [r7, #2]
 8001c4c:	f107 030c 	add.w	r3, r7, #12
 8001c50:	490b      	ldr	r1, [pc, #44]	@ (8001c80 <myOLED_int16+0x48>)
 8001c52:	4618      	mov	r0, r3
 8001c54:	f008 f9a0 	bl	8009f98 <siprintf>
	ssd1306_SetCursor(cursorX, cursorY);
 8001c58:	88fb      	ldrh	r3, [r7, #6]
 8001c5a:	b2db      	uxtb	r3, r3
 8001c5c:	88ba      	ldrh	r2, [r7, #4]
 8001c5e:	b2d2      	uxtb	r2, r2
 8001c60:	4611      	mov	r1, r2
 8001c62:	4618      	mov	r0, r3
 8001c64:	f007 f8ea 	bl	8008e3c <ssd1306_SetCursor>
	ssd1306_WriteString(str_data, Font_7x10, White);
 8001c68:	4a06      	ldr	r2, [pc, #24]	@ (8001c84 <myOLED_int16+0x4c>)
 8001c6a:	f107 000c 	add.w	r0, r7, #12
 8001c6e:	2301      	movs	r3, #1
 8001c70:	ca06      	ldmia	r2, {r1, r2}
 8001c72:	f007 f8bd 	bl	8008df0 <ssd1306_WriteString>
}
 8001c76:	bf00      	nop
 8001c78:	3718      	adds	r7, #24
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	0800d848 	.word	0x0800d848
 8001c84:	20000024 	.word	0x20000024

08001c88 <myOLED_int8>:

void myOLED_int8(uint16_t cursorX, uint16_t cursorY, uint8_t data){
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b086      	sub	sp, #24
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	4603      	mov	r3, r0
 8001c90:	80fb      	strh	r3, [r7, #6]
 8001c92:	460b      	mov	r3, r1
 8001c94:	80bb      	strh	r3, [r7, #4]
 8001c96:	4613      	mov	r3, r2
 8001c98:	70fb      	strb	r3, [r7, #3]
	char str_data[10];

	sprintf(str_data, "%d", data);
 8001c9a:	78fa      	ldrb	r2, [r7, #3]
 8001c9c:	f107 030c 	add.w	r3, r7, #12
 8001ca0:	490b      	ldr	r1, [pc, #44]	@ (8001cd0 <myOLED_int8+0x48>)
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f008 f978 	bl	8009f98 <siprintf>
	ssd1306_SetCursor(cursorX, cursorY);
 8001ca8:	88fb      	ldrh	r3, [r7, #6]
 8001caa:	b2db      	uxtb	r3, r3
 8001cac:	88ba      	ldrh	r2, [r7, #4]
 8001cae:	b2d2      	uxtb	r2, r2
 8001cb0:	4611      	mov	r1, r2
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f007 f8c2 	bl	8008e3c <ssd1306_SetCursor>
	ssd1306_WriteString(str_data, Font_7x10, White);
 8001cb8:	4a06      	ldr	r2, [pc, #24]	@ (8001cd4 <myOLED_int8+0x4c>)
 8001cba:	f107 000c 	add.w	r0, r7, #12
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	ca06      	ldmia	r2, {r1, r2}
 8001cc2:	f007 f895 	bl	8008df0 <ssd1306_WriteString>
}
 8001cc6:	bf00      	nop
 8001cc8:	3718      	adds	r7, #24
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	0800d84c 	.word	0x0800d84c
 8001cd4:	20000024 	.word	0x20000024

08001cd8 <update_display>:


// Update Display
void update_display(){
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b082      	sub	sp, #8
 8001cdc:	af00      	add	r7, sp, #0
	static Menu_State_e last_state = HOME_SCREEN;
	static bool first_update = true;
	force_update = (current_state != last_state) || first_update || !output_on_flag;
 8001cde:	4b40      	ldr	r3, [pc, #256]	@ (8001de0 <update_display+0x108>)
 8001ce0:	781a      	ldrb	r2, [r3, #0]
 8001ce2:	4b40      	ldr	r3, [pc, #256]	@ (8001de4 <update_display+0x10c>)
 8001ce4:	781b      	ldrb	r3, [r3, #0]
 8001ce6:	429a      	cmp	r2, r3
 8001ce8:	d10a      	bne.n	8001d00 <update_display+0x28>
 8001cea:	4b3f      	ldr	r3, [pc, #252]	@ (8001de8 <update_display+0x110>)
 8001cec:	781b      	ldrb	r3, [r3, #0]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d106      	bne.n	8001d00 <update_display+0x28>
 8001cf2:	4b3e      	ldr	r3, [pc, #248]	@ (8001dec <update_display+0x114>)
 8001cf4:	781b      	ldrb	r3, [r3, #0]
 8001cf6:	f083 0301 	eor.w	r3, r3, #1
 8001cfa:	b2db      	uxtb	r3, r3
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d001      	beq.n	8001d04 <update_display+0x2c>
 8001d00:	2301      	movs	r3, #1
 8001d02:	e000      	b.n	8001d06 <update_display+0x2e>
 8001d04:	2300      	movs	r3, #0
 8001d06:	f003 0301 	and.w	r3, r3, #1
 8001d0a:	b2da      	uxtb	r2, r3
 8001d0c:	4b38      	ldr	r3, [pc, #224]	@ (8001df0 <update_display+0x118>)
 8001d0e:	701a      	strb	r2, [r3, #0]

	if(force_update){
 8001d10:	4b37      	ldr	r3, [pc, #220]	@ (8001df0 <update_display+0x118>)
 8001d12:	781b      	ldrb	r3, [r3, #0]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d00a      	beq.n	8001d2e <update_display+0x56>
		last_state = current_state;
 8001d18:	4b31      	ldr	r3, [pc, #196]	@ (8001de0 <update_display+0x108>)
 8001d1a:	781a      	ldrb	r2, [r3, #0]
 8001d1c:	4b31      	ldr	r3, [pc, #196]	@ (8001de4 <update_display+0x10c>)
 8001d1e:	701a      	strb	r2, [r3, #0]
		last_cursor_position = -1; // Force full update on state change
 8001d20:	4b34      	ldr	r3, [pc, #208]	@ (8001df4 <update_display+0x11c>)
 8001d22:	f04f 32ff 	mov.w	r2, #4294967295
 8001d26:	601a      	str	r2, [r3, #0]
		first_update = false;
 8001d28:	4b2f      	ldr	r3, [pc, #188]	@ (8001de8 <update_display+0x110>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	701a      	strb	r2, [r3, #0]
	}

	// Handle cursor position updates separately
	bool cursor_changed = (cursor_position != last_cursor_position);
 8001d2e:	4b32      	ldr	r3, [pc, #200]	@ (8001df8 <update_display+0x120>)
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	4b30      	ldr	r3, [pc, #192]	@ (8001df4 <update_display+0x11c>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	429a      	cmp	r2, r3
 8001d38:	bf14      	ite	ne
 8001d3a:	2301      	movne	r3, #1
 8001d3c:	2300      	moveq	r3, #0
 8001d3e:	71fb      	strb	r3, [r7, #7]

	switch(current_state){
 8001d40:	4b27      	ldr	r3, [pc, #156]	@ (8001de0 <update_display+0x108>)
 8001d42:	781b      	ldrb	r3, [r3, #0]
 8001d44:	2b03      	cmp	r3, #3
 8001d46:	d842      	bhi.n	8001dce <update_display+0xf6>
 8001d48:	a201      	add	r2, pc, #4	@ (adr r2, 8001d50 <update_display+0x78>)
 8001d4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d4e:	bf00      	nop
 8001d50:	08001d61 	.word	0x08001d61
 8001d54:	08001d83 	.word	0x08001d83
 8001d58:	08001da5 	.word	0x08001da5
 8001d5c:	08001dc7 	.word	0x08001dc7
	case HOME_SCREEN:
		display_home_screen(force_update || cursor_changed);
 8001d60:	4b23      	ldr	r3, [pc, #140]	@ (8001df0 <update_display+0x118>)
 8001d62:	781b      	ldrb	r3, [r3, #0]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d102      	bne.n	8001d6e <update_display+0x96>
 8001d68:	79fb      	ldrb	r3, [r7, #7]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d001      	beq.n	8001d72 <update_display+0x9a>
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e000      	b.n	8001d74 <update_display+0x9c>
 8001d72:	2300      	movs	r3, #0
 8001d74:	f003 0301 	and.w	r3, r3, #1
 8001d78:	b2db      	uxtb	r3, r3
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f000 f83e 	bl	8001dfc <display_home_screen>
		break;
 8001d80:	e026      	b.n	8001dd0 <update_display+0xf8>
	case MODE_SELECTION:
		display_mode_selection(force_update || cursor_changed);
 8001d82:	4b1b      	ldr	r3, [pc, #108]	@ (8001df0 <update_display+0x118>)
 8001d84:	781b      	ldrb	r3, [r3, #0]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d102      	bne.n	8001d90 <update_display+0xb8>
 8001d8a:	79fb      	ldrb	r3, [r7, #7]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d001      	beq.n	8001d94 <update_display+0xbc>
 8001d90:	2301      	movs	r3, #1
 8001d92:	e000      	b.n	8001d96 <update_display+0xbe>
 8001d94:	2300      	movs	r3, #0
 8001d96:	f003 0301 	and.w	r3, r3, #1
 8001d9a:	b2db      	uxtb	r3, r3
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f000 f987 	bl	80020b0 <display_mode_selection>
		break;
 8001da2:	e015      	b.n	8001dd0 <update_display+0xf8>
	case PARAMETER_SETTING:
		display_parameter_setting(force_update || cursor_changed);
 8001da4:	4b12      	ldr	r3, [pc, #72]	@ (8001df0 <update_display+0x118>)
 8001da6:	781b      	ldrb	r3, [r3, #0]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d102      	bne.n	8001db2 <update_display+0xda>
 8001dac:	79fb      	ldrb	r3, [r7, #7]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d001      	beq.n	8001db6 <update_display+0xde>
 8001db2:	2301      	movs	r3, #1
 8001db4:	e000      	b.n	8001db8 <update_display+0xe0>
 8001db6:	2300      	movs	r3, #0
 8001db8:	f003 0301 	and.w	r3, r3, #1
 8001dbc:	b2db      	uxtb	r3, r3
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f000 f9e0 	bl	8002184 <display_parameter_setting>
		break;
 8001dc4:	e004      	b.n	8001dd0 <update_display+0xf8>
	case RETURN_TO_HOME:
		current_state = HOME_SCREEN;
 8001dc6:	4b06      	ldr	r3, [pc, #24]	@ (8001de0 <update_display+0x108>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	701a      	strb	r2, [r3, #0]
		break;
 8001dcc:	e000      	b.n	8001dd0 <update_display+0xf8>
	default:
		break;
 8001dce:	bf00      	nop
	}
	last_cursor_position = cursor_position;
 8001dd0:	4b09      	ldr	r3, [pc, #36]	@ (8001df8 <update_display+0x120>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a07      	ldr	r2, [pc, #28]	@ (8001df4 <update_display+0x11c>)
 8001dd6:	6013      	str	r3, [r2, #0]
}
 8001dd8:	bf00      	nop
 8001dda:	3708      	adds	r7, #8
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	2000039c 	.word	0x2000039c
 8001de4:	200003cc 	.word	0x200003cc
 8001de8:	20000014 	.word	0x20000014
 8001dec:	200003be 	.word	0x200003be
 8001df0:	200003bf 	.word	0x200003bf
 8001df4:	20000010 	.word	0x20000010
 8001df8:	200003a8 	.word	0x200003a8

08001dfc <display_home_screen>:

// Display Home Screen
void display_home_screen(bool force_update){
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b088      	sub	sp, #32
 8001e00:	af02      	add	r7, sp, #8
 8001e02:	4603      	mov	r3, r0
 8001e04:	71fb      	strb	r3, [r7, #7]
	if(force_update || output_on_flag){
 8001e06:	79fb      	ldrb	r3, [r7, #7]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d103      	bne.n	8001e14 <display_home_screen+0x18>
 8001e0c:	4b8e      	ldr	r3, [pc, #568]	@ (8002048 <display_home_screen+0x24c>)
 8001e0e:	781b      	ldrb	r3, [r3, #0]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d075      	beq.n	8001f00 <display_home_screen+0x104>
		ssd1306_Fill(Black);			// Clear the display before printing
 8001e14:	2000      	movs	r0, #0
 8001e16:	f006 fec7 	bl	8008ba8 <ssd1306_Fill>
		myOLED_char_big(0, 0, "V:");
 8001e1a:	4a8c      	ldr	r2, [pc, #560]	@ (800204c <display_home_screen+0x250>)
 8001e1c:	2100      	movs	r1, #0
 8001e1e:	2000      	movs	r0, #0
 8001e20:	f7ff fe9a 	bl	8001b58 <myOLED_char_big>
		myOLED_float_big(21, 0, voltage);
 8001e24:	4b8a      	ldr	r3, [pc, #552]	@ (8002050 <display_home_screen+0x254>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f7fe ff53 	bl	8000cd4 <__aeabi_ui2f>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	461a      	mov	r2, r3
 8001e32:	2100      	movs	r1, #0
 8001e34:	2015      	movs	r0, #21
 8001e36:	f7ff fed5 	bl	8001be4 <myOLED_float_big>
		myOLED_char_big(0, 18, "C:");
 8001e3a:	4a86      	ldr	r2, [pc, #536]	@ (8002054 <display_home_screen+0x258>)
 8001e3c:	2112      	movs	r1, #18
 8001e3e:	2000      	movs	r0, #0
 8001e40:	f7ff fe8a 	bl	8001b58 <myOLED_char_big>
		myOLED_float_big(21, 18, curr);
 8001e44:	4b84      	ldr	r3, [pc, #528]	@ (8002058 <display_home_screen+0x25c>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f7fe ff47 	bl	8000cdc <__aeabi_i2f>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	461a      	mov	r2, r3
 8001e52:	2112      	movs	r1, #18
 8001e54:	2015      	movs	r0, #21
 8001e56:	f7ff fec5 	bl	8001be4 <myOLED_float_big>
		myOLED_char_big(0, 36, "Q:");
 8001e5a:	4a80      	ldr	r2, [pc, #512]	@ (800205c <display_home_screen+0x260>)
 8001e5c:	2124      	movs	r1, #36	@ 0x24
 8001e5e:	2000      	movs	r0, #0
 8001e60:	f7ff fe7a 	bl	8001b58 <myOLED_char_big>
		myOLED_float_big(21, 36, charge);
 8001e64:	4b7e      	ldr	r3, [pc, #504]	@ (8002060 <display_home_screen+0x264>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f7fe ff33 	bl	8000cd4 <__aeabi_ui2f>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	461a      	mov	r2, r3
 8001e72:	2124      	movs	r1, #36	@ 0x24
 8001e74:	2015      	movs	r0, #21
 8001e76:	f7ff feb5 	bl	8001be4 <myOLED_float_big>
		myOLED_char(0, 54, "t:");
 8001e7a:	4a7a      	ldr	r2, [pc, #488]	@ (8002064 <display_home_screen+0x268>)
 8001e7c:	2136      	movs	r1, #54	@ 0x36
 8001e7e:	2000      	movs	r0, #0
 8001e80:	f7ff fe4e 	bl	8001b20 <myOLED_char>
		myOLED_int16(15, 54, temperature);
 8001e84:	4b78      	ldr	r3, [pc, #480]	@ (8002068 <display_home_screen+0x26c>)
 8001e86:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e8a:	b29b      	uxth	r3, r3
 8001e8c:	461a      	mov	r2, r3
 8001e8e:	2136      	movs	r1, #54	@ 0x36
 8001e90:	200f      	movs	r0, #15
 8001e92:	f7ff fed1 	bl	8001c38 <myOLED_int16>
		ssd1306_Line(78, 0, 78, 50, White);	// Draw line to separate the values and options
 8001e96:	2301      	movs	r3, #1
 8001e98:	9300      	str	r3, [sp, #0]
 8001e9a:	2332      	movs	r3, #50	@ 0x32
 8001e9c:	224e      	movs	r2, #78	@ 0x4e
 8001e9e:	2100      	movs	r1, #0
 8001ea0:	204e      	movs	r0, #78	@ 0x4e
 8001ea2:	f006 ffe3 	bl	8008e6c <ssd1306_Line>
		myOLED_char(90, 0, "<SET>");			// SET MODE
 8001ea6:	4a71      	ldr	r2, [pc, #452]	@ (800206c <display_home_screen+0x270>)
 8001ea8:	2100      	movs	r1, #0
 8001eaa:	205a      	movs	r0, #90	@ 0x5a
 8001eac:	f7ff fe38 	bl	8001b20 <myOLED_char>
		myOLED_char(90, 10, "<ON>");			// Turn ON LOAD
 8001eb0:	4a6f      	ldr	r2, [pc, #444]	@ (8002070 <display_home_screen+0x274>)
 8001eb2:	210a      	movs	r1, #10
 8001eb4:	205a      	movs	r0, #90	@ 0x5a
 8001eb6:	f7ff fe33 	bl	8001b20 <myOLED_char>
		myOLED_char(90, 20, "<RST>");			// Reset the LOAD
 8001eba:	4a6e      	ldr	r2, [pc, #440]	@ (8002074 <display_home_screen+0x278>)
 8001ebc:	2114      	movs	r1, #20
 8001ebe:	205a      	movs	r0, #90	@ 0x5a
 8001ec0:	f7ff fe2e 	bl	8001b20 <myOLED_char>

		// Show ON or OFF bitmap on display for LOAD status
		if(output_on_flag){
 8001ec4:	4b60      	ldr	r3, [pc, #384]	@ (8002048 <display_home_screen+0x24c>)
 8001ec6:	781b      	ldrb	r3, [r3, #0]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d00f      	beq.n	8001eec <display_home_screen+0xf0>
//			output_on_flag = false;									// Change the flag state
			myOLED_char(90, 10, "<OFF>");							// Print OFF in ON position if button is pressed
 8001ecc:	4a6a      	ldr	r2, [pc, #424]	@ (8002078 <display_home_screen+0x27c>)
 8001ece:	210a      	movs	r1, #10
 8001ed0:	205a      	movs	r0, #90	@ 0x5a
 8001ed2:	f7ff fe25 	bl	8001b20 <myOLED_char>
			ssd1306_DrawBitmap(90, 31, ON_BITMAP, 29, 16, White);	//	Draw ON bitmap
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	9301      	str	r3, [sp, #4]
 8001eda:	2310      	movs	r3, #16
 8001edc:	9300      	str	r3, [sp, #0]
 8001ede:	231d      	movs	r3, #29
 8001ee0:	4a66      	ldr	r2, [pc, #408]	@ (800207c <display_home_screen+0x280>)
 8001ee2:	211f      	movs	r1, #31
 8001ee4:	205a      	movs	r0, #90	@ 0x5a
 8001ee6:	f007 f82d 	bl	8008f44 <ssd1306_DrawBitmap>
 8001eea:	e009      	b.n	8001f00 <display_home_screen+0x104>
		}else{
			ssd1306_DrawBitmap(90, 31, OFF_BITMAP, 29, 16, White);	// Draw OFF bitmap
 8001eec:	2301      	movs	r3, #1
 8001eee:	9301      	str	r3, [sp, #4]
 8001ef0:	2310      	movs	r3, #16
 8001ef2:	9300      	str	r3, [sp, #0]
 8001ef4:	231d      	movs	r3, #29
 8001ef6:	4a62      	ldr	r2, [pc, #392]	@ (8002080 <display_home_screen+0x284>)
 8001ef8:	211f      	movs	r1, #31
 8001efa:	205a      	movs	r0, #90	@ 0x5a
 8001efc:	f007 f822 	bl	8008f44 <ssd1306_DrawBitmap>
		}
	}

	// Update cursor only
	uint8_t scroll_num = 3;
 8001f00:	2303      	movs	r3, #3
 8001f02:	74fb      	strb	r3, [r7, #19]
	for(int i = 0; i < scroll_num; i++){
 8001f04:	2300      	movs	r3, #0
 8001f06:	617b      	str	r3, [r7, #20]
 8001f08:	e020      	b.n	8001f4c <display_home_screen+0x150>
		if(i == cursor_position){
 8001f0a:	4b5e      	ldr	r3, [pc, #376]	@ (8002084 <display_home_screen+0x288>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	697a      	ldr	r2, [r7, #20]
 8001f10:	429a      	cmp	r2, r3
 8001f12:	d10c      	bne.n	8001f2e <display_home_screen+0x132>
			myOLED_char(82, i * 10, ">");
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	b29b      	uxth	r3, r3
 8001f18:	461a      	mov	r2, r3
 8001f1a:	0092      	lsls	r2, r2, #2
 8001f1c:	4413      	add	r3, r2
 8001f1e:	005b      	lsls	r3, r3, #1
 8001f20:	b29b      	uxth	r3, r3
 8001f22:	4a59      	ldr	r2, [pc, #356]	@ (8002088 <display_home_screen+0x28c>)
 8001f24:	4619      	mov	r1, r3
 8001f26:	2052      	movs	r0, #82	@ 0x52
 8001f28:	f7ff fdfa 	bl	8001b20 <myOLED_char>
 8001f2c:	e00b      	b.n	8001f46 <display_home_screen+0x14a>
		}else{
			myOLED_char(82, i * 10, " ");
 8001f2e:	697b      	ldr	r3, [r7, #20]
 8001f30:	b29b      	uxth	r3, r3
 8001f32:	461a      	mov	r2, r3
 8001f34:	0092      	lsls	r2, r2, #2
 8001f36:	4413      	add	r3, r2
 8001f38:	005b      	lsls	r3, r3, #1
 8001f3a:	b29b      	uxth	r3, r3
 8001f3c:	4a53      	ldr	r2, [pc, #332]	@ (800208c <display_home_screen+0x290>)
 8001f3e:	4619      	mov	r1, r3
 8001f40:	2052      	movs	r0, #82	@ 0x52
 8001f42:	f7ff fded 	bl	8001b20 <myOLED_char>
	for(int i = 0; i < scroll_num; i++){
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	3301      	adds	r3, #1
 8001f4a:	617b      	str	r3, [r7, #20]
 8001f4c:	7cfb      	ldrb	r3, [r7, #19]
 8001f4e:	697a      	ldr	r2, [r7, #20]
 8001f50:	429a      	cmp	r2, r3
 8001f52:	dbda      	blt.n	8001f0a <display_home_screen+0x10e>
		}
	}

	// Display the param value and mode if it is set
	if(((current_state == HOME_SCREEN) || save_param) || force_update){
 8001f54:	4b4e      	ldr	r3, [pc, #312]	@ (8002090 <display_home_screen+0x294>)
 8001f56:	781b      	ldrb	r3, [r3, #0]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d006      	beq.n	8001f6a <display_home_screen+0x16e>
 8001f5c:	4b4d      	ldr	r3, [pc, #308]	@ (8002094 <display_home_screen+0x298>)
 8001f5e:	781b      	ldrb	r3, [r3, #0]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d102      	bne.n	8001f6a <display_home_screen+0x16e>
 8001f64:	79fb      	ldrb	r3, [r7, #7]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d067      	beq.n	800203a <display_home_screen+0x23e>
		uint8_t x_mode = 50;
 8001f6a:	2332      	movs	r3, #50	@ 0x32
 8001f6c:	74bb      	strb	r3, [r7, #18]
		uint8_t y_mode = 54;
 8001f6e:	2336      	movs	r3, #54	@ 0x36
 8001f70:	747b      	strb	r3, [r7, #17]
		uint8_t x_val = 80;
 8001f72:	2350      	movs	r3, #80	@ 0x50
 8001f74:	743b      	strb	r3, [r7, #16]
		uint8_t y_val = 54;
 8001f76:	2336      	movs	r3, #54	@ 0x36
 8001f78:	73fb      	strb	r3, [r7, #15]

		ssd1306_Line(45, y_mode, 45, 64, White);		// Draw line
 8001f7a:	7c79      	ldrb	r1, [r7, #17]
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	9300      	str	r3, [sp, #0]
 8001f80:	2340      	movs	r3, #64	@ 0x40
 8001f82:	222d      	movs	r2, #45	@ 0x2d
 8001f84:	202d      	movs	r0, #45	@ 0x2d
 8001f86:	f006 ff71 	bl	8008e6c <ssd1306_Line>
		switch(mode_index){
 8001f8a:	4b43      	ldr	r3, [pc, #268]	@ (8002098 <display_home_screen+0x29c>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	2b03      	cmp	r3, #3
 8001f90:	d852      	bhi.n	8002038 <display_home_screen+0x23c>
 8001f92:	a201      	add	r2, pc, #4	@ (adr r2, 8001f98 <display_home_screen+0x19c>)
 8001f94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f98:	08001fa9 	.word	0x08001fa9
 8001f9c:	08001fcd 	.word	0x08001fcd
 8001fa0:	08001ff1 	.word	0x08001ff1
 8001fa4:	08002015 	.word	0x08002015
		case 0:
			myOLED_char(x_mode, y_mode, "CC:");
 8001fa8:	7cbb      	ldrb	r3, [r7, #18]
 8001faa:	b29b      	uxth	r3, r3
 8001fac:	7c7a      	ldrb	r2, [r7, #17]
 8001fae:	b291      	uxth	r1, r2
 8001fb0:	4a3a      	ldr	r2, [pc, #232]	@ (800209c <display_home_screen+0x2a0>)
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f7ff fdb4 	bl	8001b20 <myOLED_char>
			myOLED_float(x_val, y_val, param_mode.current);
 8001fb8:	7c3b      	ldrb	r3, [r7, #16]
 8001fba:	b29b      	uxth	r3, r3
 8001fbc:	7bfa      	ldrb	r2, [r7, #15]
 8001fbe:	b291      	uxth	r1, r2
 8001fc0:	4a37      	ldr	r2, [pc, #220]	@ (80020a0 <display_home_screen+0x2a4>)
 8001fc2:	6852      	ldr	r2, [r2, #4]
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f7ff fde3 	bl	8001b90 <myOLED_float>
			break;
 8001fca:	e036      	b.n	800203a <display_home_screen+0x23e>
		case 1:
			myOLED_char(x_mode, y_mode, "CV:");
 8001fcc:	7cbb      	ldrb	r3, [r7, #18]
 8001fce:	b29b      	uxth	r3, r3
 8001fd0:	7c7a      	ldrb	r2, [r7, #17]
 8001fd2:	b291      	uxth	r1, r2
 8001fd4:	4a33      	ldr	r2, [pc, #204]	@ (80020a4 <display_home_screen+0x2a8>)
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f7ff fda2 	bl	8001b20 <myOLED_char>
			myOLED_float(x_val, y_val, param_mode.voltage);
 8001fdc:	7c3b      	ldrb	r3, [r7, #16]
 8001fde:	b29b      	uxth	r3, r3
 8001fe0:	7bfa      	ldrb	r2, [r7, #15]
 8001fe2:	b291      	uxth	r1, r2
 8001fe4:	4a2e      	ldr	r2, [pc, #184]	@ (80020a0 <display_home_screen+0x2a4>)
 8001fe6:	6812      	ldr	r2, [r2, #0]
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f7ff fdd1 	bl	8001b90 <myOLED_float>
			break;
 8001fee:	e024      	b.n	800203a <display_home_screen+0x23e>
		case 2:
			myOLED_char(x_mode, y_mode, "CP:");
 8001ff0:	7cbb      	ldrb	r3, [r7, #18]
 8001ff2:	b29b      	uxth	r3, r3
 8001ff4:	7c7a      	ldrb	r2, [r7, #17]
 8001ff6:	b291      	uxth	r1, r2
 8001ff8:	4a2b      	ldr	r2, [pc, #172]	@ (80020a8 <display_home_screen+0x2ac>)
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f7ff fd90 	bl	8001b20 <myOLED_char>
			myOLED_float(x_val, y_val, param_mode.power);
 8002000:	7c3b      	ldrb	r3, [r7, #16]
 8002002:	b29b      	uxth	r3, r3
 8002004:	7bfa      	ldrb	r2, [r7, #15]
 8002006:	b291      	uxth	r1, r2
 8002008:	4a25      	ldr	r2, [pc, #148]	@ (80020a0 <display_home_screen+0x2a4>)
 800200a:	6892      	ldr	r2, [r2, #8]
 800200c:	4618      	mov	r0, r3
 800200e:	f7ff fdbf 	bl	8001b90 <myOLED_float>
			break;
 8002012:	e012      	b.n	800203a <display_home_screen+0x23e>
		case 3:
			myOLED_char(x_mode, y_mode, "CR:");
 8002014:	7cbb      	ldrb	r3, [r7, #18]
 8002016:	b29b      	uxth	r3, r3
 8002018:	7c7a      	ldrb	r2, [r7, #17]
 800201a:	b291      	uxth	r1, r2
 800201c:	4a23      	ldr	r2, [pc, #140]	@ (80020ac <display_home_screen+0x2b0>)
 800201e:	4618      	mov	r0, r3
 8002020:	f7ff fd7e 	bl	8001b20 <myOLED_char>
			myOLED_float(x_val, y_val, param_mode.resistance);
 8002024:	7c3b      	ldrb	r3, [r7, #16]
 8002026:	b29b      	uxth	r3, r3
 8002028:	7bfa      	ldrb	r2, [r7, #15]
 800202a:	b291      	uxth	r1, r2
 800202c:	4a1c      	ldr	r2, [pc, #112]	@ (80020a0 <display_home_screen+0x2a4>)
 800202e:	68d2      	ldr	r2, [r2, #12]
 8002030:	4618      	mov	r0, r3
 8002032:	f7ff fdad 	bl	8001b90 <myOLED_float>
			break;
 8002036:	e000      	b.n	800203a <display_home_screen+0x23e>
		default:
			break;
 8002038:	bf00      	nop
		}
	}

	ssd1306_UpdateScreen();
 800203a:	f006 fdd7 	bl	8008bec <ssd1306_UpdateScreen>
}
 800203e:	bf00      	nop
 8002040:	3718      	adds	r7, #24
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	200003be 	.word	0x200003be
 800204c:	0800d850 	.word	0x0800d850
 8002050:	20000348 	.word	0x20000348
 8002054:	0800d854 	.word	0x0800d854
 8002058:	2000033c 	.word	0x2000033c
 800205c:	0800d858 	.word	0x0800d858
 8002060:	2000034c 	.word	0x2000034c
 8002064:	0800d85c 	.word	0x0800d85c
 8002068:	20000350 	.word	0x20000350
 800206c:	0800d860 	.word	0x0800d860
 8002070:	0800d868 	.word	0x0800d868
 8002074:	0800d870 	.word	0x0800d870
 8002078:	0800d878 	.word	0x0800d878
 800207c:	0800d988 	.word	0x0800d988
 8002080:	0800d9cc 	.word	0x0800d9cc
 8002084:	200003a8 	.word	0x200003a8
 8002088:	0800d880 	.word	0x0800d880
 800208c:	0800d884 	.word	0x0800d884
 8002090:	2000039c 	.word	0x2000039c
 8002094:	200003bc 	.word	0x200003bc
 8002098:	20000008 	.word	0x20000008
 800209c:	0800d888 	.word	0x0800d888
 80020a0:	20000384 	.word	0x20000384
 80020a4:	0800d88c 	.word	0x0800d88c
 80020a8:	0800d890 	.word	0x0800d890
 80020ac:	0800d894 	.word	0x0800d894

080020b0 <display_mode_selection>:

// Display Mode Selection Screen
void display_mode_selection(bool force_update){
 80020b0:	b590      	push	{r4, r7, lr}
 80020b2:	b08b      	sub	sp, #44	@ 0x2c
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	4603      	mov	r3, r0
 80020b8:	71fb      	strb	r3, [r7, #7]
	const char *modes[] = { "CC", "CV", "CP", "CR" };
 80020ba:	4b2d      	ldr	r3, [pc, #180]	@ (8002170 <display_mode_selection+0xc0>)
 80020bc:	f107 040c 	add.w	r4, r7, #12
 80020c0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80020c2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if(force_update){
 80020c6:	79fb      	ldrb	r3, [r7, #7]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d01c      	beq.n	8002106 <display_mode_selection+0x56>
		ssd1306_Fill(Black); // Clear the screen
 80020cc:	2000      	movs	r0, #0
 80020ce:	f006 fd6b 	bl	8008ba8 <ssd1306_Fill>
		for(int i = 0; i < 4; i++){
 80020d2:	2300      	movs	r3, #0
 80020d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80020d6:	e013      	b.n	8002100 <display_mode_selection+0x50>
			myOLED_char(15, i * 10, (char*) modes[i]); // Print modes in column
 80020d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020da:	b29b      	uxth	r3, r3
 80020dc:	461a      	mov	r2, r3
 80020de:	0092      	lsls	r2, r2, #2
 80020e0:	4413      	add	r3, r2
 80020e2:	005b      	lsls	r3, r3, #1
 80020e4:	b299      	uxth	r1, r3
 80020e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020e8:	009b      	lsls	r3, r3, #2
 80020ea:	3328      	adds	r3, #40	@ 0x28
 80020ec:	443b      	add	r3, r7
 80020ee:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 80020f2:	461a      	mov	r2, r3
 80020f4:	200f      	movs	r0, #15
 80020f6:	f7ff fd13 	bl	8001b20 <myOLED_char>
		for(int i = 0; i < 4; i++){
 80020fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020fc:	3301      	adds	r3, #1
 80020fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8002100:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002102:	2b03      	cmp	r3, #3
 8002104:	dde8      	ble.n	80020d8 <display_mode_selection+0x28>
		}
	}

	// Update cursor only
	uint8_t num_of_modes = 4;
 8002106:	2304      	movs	r3, #4
 8002108:	77fb      	strb	r3, [r7, #31]
	for(int i = 0; i < num_of_modes; i++){
 800210a:	2300      	movs	r3, #0
 800210c:	623b      	str	r3, [r7, #32]
 800210e:	e020      	b.n	8002152 <display_mode_selection+0xa2>
		if(i == cursor_position){
 8002110:	4b18      	ldr	r3, [pc, #96]	@ (8002174 <display_mode_selection+0xc4>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	6a3a      	ldr	r2, [r7, #32]
 8002116:	429a      	cmp	r2, r3
 8002118:	d10c      	bne.n	8002134 <display_mode_selection+0x84>
			myOLED_char(0, i * 10, "->");
 800211a:	6a3b      	ldr	r3, [r7, #32]
 800211c:	b29b      	uxth	r3, r3
 800211e:	461a      	mov	r2, r3
 8002120:	0092      	lsls	r2, r2, #2
 8002122:	4413      	add	r3, r2
 8002124:	005b      	lsls	r3, r3, #1
 8002126:	b29b      	uxth	r3, r3
 8002128:	4a13      	ldr	r2, [pc, #76]	@ (8002178 <display_mode_selection+0xc8>)
 800212a:	4619      	mov	r1, r3
 800212c:	2000      	movs	r0, #0
 800212e:	f7ff fcf7 	bl	8001b20 <myOLED_char>
 8002132:	e00b      	b.n	800214c <display_mode_selection+0x9c>
		}else{
			myOLED_char(0, i * 10, "  ");
 8002134:	6a3b      	ldr	r3, [r7, #32]
 8002136:	b29b      	uxth	r3, r3
 8002138:	461a      	mov	r2, r3
 800213a:	0092      	lsls	r2, r2, #2
 800213c:	4413      	add	r3, r2
 800213e:	005b      	lsls	r3, r3, #1
 8002140:	b29b      	uxth	r3, r3
 8002142:	4a0e      	ldr	r2, [pc, #56]	@ (800217c <display_mode_selection+0xcc>)
 8002144:	4619      	mov	r1, r3
 8002146:	2000      	movs	r0, #0
 8002148:	f7ff fcea 	bl	8001b20 <myOLED_char>
	for(int i = 0; i < num_of_modes; i++){
 800214c:	6a3b      	ldr	r3, [r7, #32]
 800214e:	3301      	adds	r3, #1
 8002150:	623b      	str	r3, [r7, #32]
 8002152:	7ffb      	ldrb	r3, [r7, #31]
 8002154:	6a3a      	ldr	r2, [r7, #32]
 8002156:	429a      	cmp	r2, r3
 8002158:	dbda      	blt.n	8002110 <display_mode_selection+0x60>
		}
	}

	myOLED_char(5, 50, "<SELECT THE MODE>");
 800215a:	4a09      	ldr	r2, [pc, #36]	@ (8002180 <display_mode_selection+0xd0>)
 800215c:	2132      	movs	r1, #50	@ 0x32
 800215e:	2005      	movs	r0, #5
 8002160:	f7ff fcde 	bl	8001b20 <myOLED_char>
	ssd1306_UpdateScreen();
 8002164:	f006 fd42 	bl	8008bec <ssd1306_UpdateScreen>
}
 8002168:	bf00      	nop
 800216a:	372c      	adds	r7, #44	@ 0x2c
 800216c:	46bd      	mov	sp, r7
 800216e:	bd90      	pop	{r4, r7, pc}
 8002170:	0800d8c0 	.word	0x0800d8c0
 8002174:	200003a8 	.word	0x200003a8
 8002178:	0800d898 	.word	0x0800d898
 800217c:	0800d83c 	.word	0x0800d83c
 8002180:	0800d89c 	.word	0x0800d89c

08002184 <display_parameter_setting>:

void display_parameter_setting(bool force_update){
 8002184:	b580      	push	{r7, lr}
 8002186:	b084      	sub	sp, #16
 8002188:	af00      	add	r7, sp, #0
 800218a:	4603      	mov	r3, r0
 800218c:	71fb      	strb	r3, [r7, #7]
	if(force_update){
 800218e:	79fb      	ldrb	r3, [r7, #7]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d07b      	beq.n	800228c <display_parameter_setting+0x108>
		// Redraw entire screen if forced
		ssd1306_Fill(Black);
 8002194:	2000      	movs	r0, #0
 8002196:	f006 fd07 	bl	8008ba8 <ssd1306_Fill>
		myOLED_char(5, 0, "Set Value:");
 800219a:	4a57      	ldr	r2, [pc, #348]	@ (80022f8 <display_parameter_setting+0x174>)
 800219c:	2100      	movs	r1, #0
 800219e:	2005      	movs	r0, #5
 80021a0:	f7ff fcbe 	bl	8001b20 <myOLED_char>

		// Check the state and print the mode in parameter setting screen
		if(current_state == PARAMETER_SETTING){
 80021a4:	4b55      	ldr	r3, [pc, #340]	@ (80022fc <display_parameter_setting+0x178>)
 80021a6:	781b      	ldrb	r3, [r3, #0]
 80021a8:	2b02      	cmp	r3, #2
 80021aa:	d16f      	bne.n	800228c <display_parameter_setting+0x108>
			myOLED_char(5, 42, "MIN:");
 80021ac:	4a54      	ldr	r2, [pc, #336]	@ (8002300 <display_parameter_setting+0x17c>)
 80021ae:	212a      	movs	r1, #42	@ 0x2a
 80021b0:	2005      	movs	r0, #5
 80021b2:	f7ff fcb5 	bl	8001b20 <myOLED_char>
			myOLED_char(5, 52, "MAX:");
 80021b6:	4a53      	ldr	r2, [pc, #332]	@ (8002304 <display_parameter_setting+0x180>)
 80021b8:	2134      	movs	r1, #52	@ 0x34
 80021ba:	2005      	movs	r0, #5
 80021bc:	f7ff fcb0 	bl	8001b20 <myOLED_char>
			switch(mode_index){
 80021c0:	4b51      	ldr	r3, [pc, #324]	@ (8002308 <display_parameter_setting+0x184>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	2b03      	cmp	r3, #3
 80021c6:	d860      	bhi.n	800228a <display_parameter_setting+0x106>
 80021c8:	a201      	add	r2, pc, #4	@ (adr r2, 80021d0 <display_parameter_setting+0x4c>)
 80021ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021ce:	bf00      	nop
 80021d0:	080021e1 	.word	0x080021e1
 80021d4:	0800220b 	.word	0x0800220b
 80021d8:	08002235 	.word	0x08002235
 80021dc:	08002261 	.word	0x08002261
			case 0:
				myOLED_char(70, 0, "CC");
 80021e0:	4a4a      	ldr	r2, [pc, #296]	@ (800230c <display_parameter_setting+0x188>)
 80021e2:	2100      	movs	r1, #0
 80021e4:	2046      	movs	r0, #70	@ 0x46
 80021e6:	f7ff fc9b 	bl	8001b20 <myOLED_char>
				myOLED_char(70, 20, "mAmp");
 80021ea:	4a49      	ldr	r2, [pc, #292]	@ (8002310 <display_parameter_setting+0x18c>)
 80021ec:	2114      	movs	r1, #20
 80021ee:	2046      	movs	r0, #70	@ 0x46
 80021f0:	f7ff fc96 	bl	8001b20 <myOLED_char>
				myOLED_float(35, 42, (float)MIN_CC_VALUE);
 80021f4:	4a47      	ldr	r2, [pc, #284]	@ (8002314 <display_parameter_setting+0x190>)
 80021f6:	212a      	movs	r1, #42	@ 0x2a
 80021f8:	2023      	movs	r0, #35	@ 0x23
 80021fa:	f7ff fcc9 	bl	8001b90 <myOLED_float>
				myOLED_float(35, 52, (float)MAX_CC_VALUE);
 80021fe:	4a46      	ldr	r2, [pc, #280]	@ (8002318 <display_parameter_setting+0x194>)
 8002200:	2134      	movs	r1, #52	@ 0x34
 8002202:	2023      	movs	r0, #35	@ 0x23
 8002204:	f7ff fcc4 	bl	8001b90 <myOLED_float>
				break;
 8002208:	e040      	b.n	800228c <display_parameter_setting+0x108>
			case 1:
				myOLED_char(70, 0, "CV");
 800220a:	4a44      	ldr	r2, [pc, #272]	@ (800231c <display_parameter_setting+0x198>)
 800220c:	2100      	movs	r1, #0
 800220e:	2046      	movs	r0, #70	@ 0x46
 8002210:	f7ff fc86 	bl	8001b20 <myOLED_char>
				myOLED_char(70, 20, "Volt");
 8002214:	4a42      	ldr	r2, [pc, #264]	@ (8002320 <display_parameter_setting+0x19c>)
 8002216:	2114      	movs	r1, #20
 8002218:	2046      	movs	r0, #70	@ 0x46
 800221a:	f7ff fc81 	bl	8001b20 <myOLED_char>
				myOLED_float(35, 42, (float)MIN_CV_VALUE);
 800221e:	4a41      	ldr	r2, [pc, #260]	@ (8002324 <display_parameter_setting+0x1a0>)
 8002220:	212a      	movs	r1, #42	@ 0x2a
 8002222:	2023      	movs	r0, #35	@ 0x23
 8002224:	f7ff fcb4 	bl	8001b90 <myOLED_float>
				myOLED_float(35, 52, (float)MAX_CV_VALUE);
 8002228:	4a3f      	ldr	r2, [pc, #252]	@ (8002328 <display_parameter_setting+0x1a4>)
 800222a:	2134      	movs	r1, #52	@ 0x34
 800222c:	2023      	movs	r0, #35	@ 0x23
 800222e:	f7ff fcaf 	bl	8001b90 <myOLED_float>
				break;
 8002232:	e02b      	b.n	800228c <display_parameter_setting+0x108>
			case 2:
				myOLED_char(70, 0, "CP");
 8002234:	4a3d      	ldr	r2, [pc, #244]	@ (800232c <display_parameter_setting+0x1a8>)
 8002236:	2100      	movs	r1, #0
 8002238:	2046      	movs	r0, #70	@ 0x46
 800223a:	f7ff fc71 	bl	8001b20 <myOLED_char>
				myOLED_char(70, 20, "Watt");
 800223e:	4a3c      	ldr	r2, [pc, #240]	@ (8002330 <display_parameter_setting+0x1ac>)
 8002240:	2114      	movs	r1, #20
 8002242:	2046      	movs	r0, #70	@ 0x46
 8002244:	f7ff fc6c 	bl	8001b20 <myOLED_char>
				myOLED_float(35, 42, (float)MIN_CP_VALUE);
 8002248:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800224c:	212a      	movs	r1, #42	@ 0x2a
 800224e:	2023      	movs	r0, #35	@ 0x23
 8002250:	f7ff fc9e 	bl	8001b90 <myOLED_float>
				myOLED_float(35, 52, (float)MAX_CP_VALUE);
 8002254:	4a37      	ldr	r2, [pc, #220]	@ (8002334 <display_parameter_setting+0x1b0>)
 8002256:	2134      	movs	r1, #52	@ 0x34
 8002258:	2023      	movs	r0, #35	@ 0x23
 800225a:	f7ff fc99 	bl	8001b90 <myOLED_float>
				break;
 800225e:	e015      	b.n	800228c <display_parameter_setting+0x108>
			case 3:
				myOLED_char(70, 0, "CR");
 8002260:	4a35      	ldr	r2, [pc, #212]	@ (8002338 <display_parameter_setting+0x1b4>)
 8002262:	2100      	movs	r1, #0
 8002264:	2046      	movs	r0, #70	@ 0x46
 8002266:	f7ff fc5b 	bl	8001b20 <myOLED_char>
				myOLED_char(70, 20, "Ohm");
 800226a:	4a34      	ldr	r2, [pc, #208]	@ (800233c <display_parameter_setting+0x1b8>)
 800226c:	2114      	movs	r1, #20
 800226e:	2046      	movs	r0, #70	@ 0x46
 8002270:	f7ff fc56 	bl	8001b20 <myOLED_char>
				myOLED_float(35, 42, (float)MIN_CR_VALUE);
 8002274:	4a32      	ldr	r2, [pc, #200]	@ (8002340 <display_parameter_setting+0x1bc>)
 8002276:	212a      	movs	r1, #42	@ 0x2a
 8002278:	2023      	movs	r0, #35	@ 0x23
 800227a:	f7ff fc89 	bl	8001b90 <myOLED_float>
				myOLED_float(35, 52, (float)MAX_CR_VALUE);
 800227e:	4a31      	ldr	r2, [pc, #196]	@ (8002344 <display_parameter_setting+0x1c0>)
 8002280:	2134      	movs	r1, #52	@ 0x34
 8002282:	2023      	movs	r0, #35	@ 0x23
 8002284:	f7ff fc84 	bl	8001b90 <myOLED_float>
				break;
 8002288:	e000      	b.n	800228c <display_parameter_setting+0x108>
			default:
				break;
 800228a:	bf00      	nop
//	}

//	myOLED_int16(5, 20, display_value);
//	printf("display value: %d", display_value);
	// Display the value with proper formatting
	if(param_value >= 10.000){
 800228c:	4b2e      	ldr	r3, [pc, #184]	@ (8002348 <display_parameter_setting+0x1c4>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	492c      	ldr	r1, [pc, #176]	@ (8002344 <display_parameter_setting+0x1c0>)
 8002292:	4618      	mov	r0, r3
 8002294:	f7fe ff28 	bl	80010e8 <__aeabi_fcmpge>
 8002298:	4603      	mov	r3, r0
 800229a:	2b00      	cmp	r3, #0
 800229c:	d007      	beq.n	80022ae <display_parameter_setting+0x12a>
		myOLED_float(0, 20, param_value);
 800229e:	4b2a      	ldr	r3, [pc, #168]	@ (8002348 <display_parameter_setting+0x1c4>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	461a      	mov	r2, r3
 80022a4:	2114      	movs	r1, #20
 80022a6:	2000      	movs	r0, #0
 80022a8:	f7ff fc72 	bl	8001b90 <myOLED_float>
 80022ac:	e00b      	b.n	80022c6 <display_parameter_setting+0x142>
	}else{
		myOLED_float(7, 20, param_value);
 80022ae:	4b26      	ldr	r3, [pc, #152]	@ (8002348 <display_parameter_setting+0x1c4>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	461a      	mov	r2, r3
 80022b4:	2114      	movs	r1, #20
 80022b6:	2007      	movs	r0, #7
 80022b8:	f7ff fc6a 	bl	8001b90 <myOLED_float>
		myOLED_int16(0, 20, 0);  // Print "0" at the first location
 80022bc:	2200      	movs	r2, #0
 80022be:	2114      	movs	r1, #20
 80022c0:	2000      	movs	r0, #0
 80022c2:	f7ff fcb9 	bl	8001c38 <myOLED_int16>
	}

	// Clear previous cursor position by redrawing the entire line
	myOLED_char(0, 30, "         ");
 80022c6:	4a21      	ldr	r2, [pc, #132]	@ (800234c <display_parameter_setting+0x1c8>)
 80022c8:	211e      	movs	r1, #30
 80022ca:	2000      	movs	r0, #0
 80022cc:	f7ff fc28 	bl	8001b20 <myOLED_char>
	// Draw cursor under the digit
	uint8_t cursor_x;
	cursor_x = digit_position * 7;		// 7 pixels width per character
 80022d0:	4b1f      	ldr	r3, [pc, #124]	@ (8002350 <display_parameter_setting+0x1cc>)
 80022d2:	781b      	ldrb	r3, [r3, #0]
 80022d4:	461a      	mov	r2, r3
 80022d6:	00d2      	lsls	r2, r2, #3
 80022d8:	1ad3      	subs	r3, r2, r3
 80022da:	73fb      	strb	r3, [r7, #15]
	myOLED_char(cursor_x , 30, "^");  	// Draw the cursor
 80022dc:	7bfb      	ldrb	r3, [r7, #15]
 80022de:	b29b      	uxth	r3, r3
 80022e0:	4a1c      	ldr	r2, [pc, #112]	@ (8002354 <display_parameter_setting+0x1d0>)
 80022e2:	211e      	movs	r1, #30
 80022e4:	4618      	mov	r0, r3
 80022e6:	f7ff fc1b 	bl	8001b20 <myOLED_char>

	// Refresh the display after updating
	ssd1306_UpdateScreen();
 80022ea:	f006 fc7f 	bl	8008bec <ssd1306_UpdateScreen>
}
 80022ee:	bf00      	nop
 80022f0:	3710      	adds	r7, #16
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	0800d8d0 	.word	0x0800d8d0
 80022fc:	2000039c 	.word	0x2000039c
 8002300:	0800d8dc 	.word	0x0800d8dc
 8002304:	0800d8e4 	.word	0x0800d8e4
 8002308:	20000008 	.word	0x20000008
 800230c:	0800d8b0 	.word	0x0800d8b0
 8002310:	0800d8ec 	.word	0x0800d8ec
 8002314:	3a83126f 	.word	0x3a83126f
 8002318:	40a00000 	.word	0x40a00000
 800231c:	0800d8b4 	.word	0x0800d8b4
 8002320:	0800d8f4 	.word	0x0800d8f4
 8002324:	40400000 	.word	0x40400000
 8002328:	41f00000 	.word	0x41f00000
 800232c:	0800d8b8 	.word	0x0800d8b8
 8002330:	0800d8fc 	.word	0x0800d8fc
 8002334:	42c7ff7d 	.word	0x42c7ff7d
 8002338:	0800d8bc 	.word	0x0800d8bc
 800233c:	0800d904 	.word	0x0800d904
 8002340:	3dcccccd 	.word	0x3dcccccd
 8002344:	41200000 	.word	0x41200000
 8002348:	200003ac 	.word	0x200003ac
 800234c:	0800d908 	.word	0x0800d908
 8002350:	200003b0 	.word	0x200003b0
 8002354:	0800d914 	.word	0x0800d914

08002358 <update_encoder_state>:

// Update Encoder State
void update_encoder_state(){
 8002358:	b580      	push	{r7, lr}
 800235a:	af00      	add	r7, sp, #0
	new_rot_pos = rot_cnt;
 800235c:	4b37      	ldr	r3, [pc, #220]	@ (800243c <update_encoder_state+0xe4>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	b29a      	uxth	r2, r3
 8002362:	4b37      	ldr	r3, [pc, #220]	@ (8002440 <update_encoder_state+0xe8>)
 8002364:	801a      	strh	r2, [r3, #0]

	if(new_rot_pos > old_rot_pos){
 8002366:	4b36      	ldr	r3, [pc, #216]	@ (8002440 <update_encoder_state+0xe8>)
 8002368:	881a      	ldrh	r2, [r3, #0]
 800236a:	4b36      	ldr	r3, [pc, #216]	@ (8002444 <update_encoder_state+0xec>)
 800236c:	881b      	ldrh	r3, [r3, #0]
 800236e:	429a      	cmp	r2, r3
 8002370:	d911      	bls.n	8002396 <update_encoder_state+0x3e>
		if(current_state == PARAMETER_SETTING){
 8002372:	4b35      	ldr	r3, [pc, #212]	@ (8002448 <update_encoder_state+0xf0>)
 8002374:	781b      	ldrb	r3, [r3, #0]
 8002376:	2b02      	cmp	r3, #2
 8002378:	d107      	bne.n	800238a <update_encoder_state+0x32>
			if(adjusting_digit){
 800237a:	4b34      	ldr	r3, [pc, #208]	@ (800244c <update_encoder_state+0xf4>)
 800237c:	781b      	ldrb	r3, [r3, #0]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d021      	beq.n	80023c6 <update_encoder_state+0x6e>
				update_parameter_value(1); // Increment digit
 8002382:	2001      	movs	r0, #1
 8002384:	f000 f86c 	bl	8002460 <update_parameter_value>
 8002388:	e01d      	b.n	80023c6 <update_encoder_state+0x6e>
			}
		}else{
			cursor_position++;
 800238a:	4b31      	ldr	r3, [pc, #196]	@ (8002450 <update_encoder_state+0xf8>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	3301      	adds	r3, #1
 8002390:	4a2f      	ldr	r2, [pc, #188]	@ (8002450 <update_encoder_state+0xf8>)
 8002392:	6013      	str	r3, [r2, #0]
 8002394:	e017      	b.n	80023c6 <update_encoder_state+0x6e>
		}
	}else if(new_rot_pos < old_rot_pos){
 8002396:	4b2a      	ldr	r3, [pc, #168]	@ (8002440 <update_encoder_state+0xe8>)
 8002398:	881a      	ldrh	r2, [r3, #0]
 800239a:	4b2a      	ldr	r3, [pc, #168]	@ (8002444 <update_encoder_state+0xec>)
 800239c:	881b      	ldrh	r3, [r3, #0]
 800239e:	429a      	cmp	r2, r3
 80023a0:	d211      	bcs.n	80023c6 <update_encoder_state+0x6e>
		if(current_state == PARAMETER_SETTING){
 80023a2:	4b29      	ldr	r3, [pc, #164]	@ (8002448 <update_encoder_state+0xf0>)
 80023a4:	781b      	ldrb	r3, [r3, #0]
 80023a6:	2b02      	cmp	r3, #2
 80023a8:	d108      	bne.n	80023bc <update_encoder_state+0x64>
			if(adjusting_digit){
 80023aa:	4b28      	ldr	r3, [pc, #160]	@ (800244c <update_encoder_state+0xf4>)
 80023ac:	781b      	ldrb	r3, [r3, #0]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d009      	beq.n	80023c6 <update_encoder_state+0x6e>
				update_parameter_value(-1); // Decrement digit
 80023b2:	f04f 30ff 	mov.w	r0, #4294967295
 80023b6:	f000 f853 	bl	8002460 <update_parameter_value>
 80023ba:	e004      	b.n	80023c6 <update_encoder_state+0x6e>
			}
		}else{
			cursor_position--;
 80023bc:	4b24      	ldr	r3, [pc, #144]	@ (8002450 <update_encoder_state+0xf8>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	3b01      	subs	r3, #1
 80023c2:	4a23      	ldr	r2, [pc, #140]	@ (8002450 <update_encoder_state+0xf8>)
 80023c4:	6013      	str	r3, [r2, #0]
		}
	}
	old_rot_pos = new_rot_pos;
 80023c6:	4b1e      	ldr	r3, [pc, #120]	@ (8002440 <update_encoder_state+0xe8>)
 80023c8:	881a      	ldrh	r2, [r3, #0]
 80023ca:	4b1e      	ldr	r3, [pc, #120]	@ (8002444 <update_encoder_state+0xec>)
 80023cc:	801a      	strh	r2, [r3, #0]

	// Put limit on parameters and assign param_value
	// to specified mode
	put_parameter_limit();
 80023ce:	f000 f95f 	bl	8002690 <put_parameter_limit>

	printf("param_value limit: %f\n\r\v", param_value);
 80023d2:	4b20      	ldr	r3, [pc, #128]	@ (8002454 <update_encoder_state+0xfc>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4618      	mov	r0, r3
 80023d8:	f7fe f826 	bl	8000428 <__aeabi_f2d>
 80023dc:	4602      	mov	r2, r0
 80023de:	460b      	mov	r3, r1
 80023e0:	481d      	ldr	r0, [pc, #116]	@ (8002458 <update_encoder_state+0x100>)
 80023e2:	f007 fd69 	bl	8009eb8 <iprintf>


	// putting limits
	if(cursor_position < 0)
 80023e6:	4b1a      	ldr	r3, [pc, #104]	@ (8002450 <update_encoder_state+0xf8>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	da02      	bge.n	80023f4 <update_encoder_state+0x9c>
		cursor_position = 0;
 80023ee:	4b18      	ldr	r3, [pc, #96]	@ (8002450 <update_encoder_state+0xf8>)
 80023f0:	2200      	movs	r2, #0
 80023f2:	601a      	str	r2, [r3, #0]
	if(current_state == HOME_SCREEN && cursor_position > 2)
 80023f4:	4b14      	ldr	r3, [pc, #80]	@ (8002448 <update_encoder_state+0xf0>)
 80023f6:	781b      	ldrb	r3, [r3, #0]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d106      	bne.n	800240a <update_encoder_state+0xb2>
 80023fc:	4b14      	ldr	r3, [pc, #80]	@ (8002450 <update_encoder_state+0xf8>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	2b02      	cmp	r3, #2
 8002402:	dd02      	ble.n	800240a <update_encoder_state+0xb2>
		cursor_position = 2;
 8002404:	4b12      	ldr	r3, [pc, #72]	@ (8002450 <update_encoder_state+0xf8>)
 8002406:	2202      	movs	r2, #2
 8002408:	601a      	str	r2, [r3, #0]
	if(current_state == MODE_SELECTION && cursor_position > 3)
 800240a:	4b0f      	ldr	r3, [pc, #60]	@ (8002448 <update_encoder_state+0xf0>)
 800240c:	781b      	ldrb	r3, [r3, #0]
 800240e:	2b01      	cmp	r3, #1
 8002410:	d106      	bne.n	8002420 <update_encoder_state+0xc8>
 8002412:	4b0f      	ldr	r3, [pc, #60]	@ (8002450 <update_encoder_state+0xf8>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	2b03      	cmp	r3, #3
 8002418:	dd02      	ble.n	8002420 <update_encoder_state+0xc8>
		cursor_position = 3;
 800241a:	4b0d      	ldr	r3, [pc, #52]	@ (8002450 <update_encoder_state+0xf8>)
 800241c:	2203      	movs	r2, #3
 800241e:	601a      	str	r2, [r3, #0]
	if(current_state == PARAMETER_SETTING && digit_position > MAX_DIGITS)
 8002420:	4b09      	ldr	r3, [pc, #36]	@ (8002448 <update_encoder_state+0xf0>)
 8002422:	781b      	ldrb	r3, [r3, #0]
 8002424:	2b02      	cmp	r3, #2
 8002426:	d106      	bne.n	8002436 <update_encoder_state+0xde>
 8002428:	4b0c      	ldr	r3, [pc, #48]	@ (800245c <update_encoder_state+0x104>)
 800242a:	781b      	ldrb	r3, [r3, #0]
 800242c:	2b06      	cmp	r3, #6
 800242e:	d902      	bls.n	8002436 <update_encoder_state+0xde>
		digit_position = 0;
 8002430:	4b0a      	ldr	r3, [pc, #40]	@ (800245c <update_encoder_state+0x104>)
 8002432:	2200      	movs	r2, #0
 8002434:	701a      	strb	r2, [r3, #0]
}
 8002436:	bf00      	nop
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	200003a4 	.word	0x200003a4
 8002440:	200003c0 	.word	0x200003c0
 8002444:	200003ca 	.word	0x200003ca
 8002448:	2000039c 	.word	0x2000039c
 800244c:	200003bd 	.word	0x200003bd
 8002450:	200003a8 	.word	0x200003a8
 8002454:	200003ac 	.word	0x200003ac
 8002458:	0800d918 	.word	0x0800d918
 800245c:	200003b0 	.word	0x200003b0

08002460 <update_parameter_value>:


void update_parameter_value(int direction) {
 8002460:	b580      	push	{r7, lr}
 8002462:	b08a      	sub	sp, #40	@ 0x28
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
    // Convert the whole value to an integer, treating it as 00.000
    int full_value = (int)(param_value * 1000);
 8002468:	4b7f      	ldr	r3, [pc, #508]	@ (8002668 <update_parameter_value+0x208>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	497f      	ldr	r1, [pc, #508]	@ (800266c <update_parameter_value+0x20c>)
 800246e:	4618      	mov	r0, r3
 8002470:	f7fe fc88 	bl	8000d84 <__aeabi_fmul>
 8002474:	4603      	mov	r3, r0
 8002476:	4618      	mov	r0, r3
 8002478:	f7fe fe4a 	bl	8001110 <__aeabi_f2iz>
 800247c:	4603      	mov	r3, r0
 800247e:	623b      	str	r3, [r7, #32]

    // Extract individual digits
    int digits[5]; // [tens, ones, tenths, hundredths, thousandths]
    digits[0] = (full_value / 10000) % 10;     // tens
 8002480:	6a3b      	ldr	r3, [r7, #32]
 8002482:	4a7b      	ldr	r2, [pc, #492]	@ (8002670 <update_parameter_value+0x210>)
 8002484:	fb82 1203 	smull	r1, r2, r2, r3
 8002488:	1312      	asrs	r2, r2, #12
 800248a:	17db      	asrs	r3, r3, #31
 800248c:	1ad1      	subs	r1, r2, r3
 800248e:	4b79      	ldr	r3, [pc, #484]	@ (8002674 <update_parameter_value+0x214>)
 8002490:	fb83 2301 	smull	r2, r3, r3, r1
 8002494:	109a      	asrs	r2, r3, #2
 8002496:	17cb      	asrs	r3, r1, #31
 8002498:	1ad2      	subs	r2, r2, r3
 800249a:	4613      	mov	r3, r2
 800249c:	009b      	lsls	r3, r3, #2
 800249e:	4413      	add	r3, r2
 80024a0:	005b      	lsls	r3, r3, #1
 80024a2:	1aca      	subs	r2, r1, r3
 80024a4:	60ba      	str	r2, [r7, #8]
    digits[1] = (full_value / 1000) % 10;      // ones
 80024a6:	6a3b      	ldr	r3, [r7, #32]
 80024a8:	4a73      	ldr	r2, [pc, #460]	@ (8002678 <update_parameter_value+0x218>)
 80024aa:	fb82 1203 	smull	r1, r2, r2, r3
 80024ae:	1192      	asrs	r2, r2, #6
 80024b0:	17db      	asrs	r3, r3, #31
 80024b2:	1ad1      	subs	r1, r2, r3
 80024b4:	4b6f      	ldr	r3, [pc, #444]	@ (8002674 <update_parameter_value+0x214>)
 80024b6:	fb83 2301 	smull	r2, r3, r3, r1
 80024ba:	109a      	asrs	r2, r3, #2
 80024bc:	17cb      	asrs	r3, r1, #31
 80024be:	1ad2      	subs	r2, r2, r3
 80024c0:	4613      	mov	r3, r2
 80024c2:	009b      	lsls	r3, r3, #2
 80024c4:	4413      	add	r3, r2
 80024c6:	005b      	lsls	r3, r3, #1
 80024c8:	1aca      	subs	r2, r1, r3
 80024ca:	60fa      	str	r2, [r7, #12]
    digits[2] = (full_value / 100) % 10;       // tenths
 80024cc:	6a3b      	ldr	r3, [r7, #32]
 80024ce:	4a6b      	ldr	r2, [pc, #428]	@ (800267c <update_parameter_value+0x21c>)
 80024d0:	fb82 1203 	smull	r1, r2, r2, r3
 80024d4:	1152      	asrs	r2, r2, #5
 80024d6:	17db      	asrs	r3, r3, #31
 80024d8:	1ad1      	subs	r1, r2, r3
 80024da:	4b66      	ldr	r3, [pc, #408]	@ (8002674 <update_parameter_value+0x214>)
 80024dc:	fb83 2301 	smull	r2, r3, r3, r1
 80024e0:	109a      	asrs	r2, r3, #2
 80024e2:	17cb      	asrs	r3, r1, #31
 80024e4:	1ad2      	subs	r2, r2, r3
 80024e6:	4613      	mov	r3, r2
 80024e8:	009b      	lsls	r3, r3, #2
 80024ea:	4413      	add	r3, r2
 80024ec:	005b      	lsls	r3, r3, #1
 80024ee:	1aca      	subs	r2, r1, r3
 80024f0:	613a      	str	r2, [r7, #16]
    digits[3] = (full_value / 10) % 10;        // hundredths
 80024f2:	6a3b      	ldr	r3, [r7, #32]
 80024f4:	4a5f      	ldr	r2, [pc, #380]	@ (8002674 <update_parameter_value+0x214>)
 80024f6:	fb82 1203 	smull	r1, r2, r2, r3
 80024fa:	1092      	asrs	r2, r2, #2
 80024fc:	17db      	asrs	r3, r3, #31
 80024fe:	1ad1      	subs	r1, r2, r3
 8002500:	4b5c      	ldr	r3, [pc, #368]	@ (8002674 <update_parameter_value+0x214>)
 8002502:	fb83 2301 	smull	r2, r3, r3, r1
 8002506:	109a      	asrs	r2, r3, #2
 8002508:	17cb      	asrs	r3, r1, #31
 800250a:	1ad2      	subs	r2, r2, r3
 800250c:	4613      	mov	r3, r2
 800250e:	009b      	lsls	r3, r3, #2
 8002510:	4413      	add	r3, r2
 8002512:	005b      	lsls	r3, r3, #1
 8002514:	1aca      	subs	r2, r1, r3
 8002516:	617a      	str	r2, [r7, #20]
    digits[4] = full_value % 10;               // thousandths
 8002518:	6a39      	ldr	r1, [r7, #32]
 800251a:	4b56      	ldr	r3, [pc, #344]	@ (8002674 <update_parameter_value+0x214>)
 800251c:	fb83 2301 	smull	r2, r3, r3, r1
 8002520:	109a      	asrs	r2, r3, #2
 8002522:	17cb      	asrs	r3, r1, #31
 8002524:	1ad2      	subs	r2, r2, r3
 8002526:	4613      	mov	r3, r2
 8002528:	009b      	lsls	r3, r3, #2
 800252a:	4413      	add	r3, r2
 800252c:	005b      	lsls	r3, r3, #1
 800252e:	1aca      	subs	r2, r1, r3
 8002530:	61ba      	str	r2, [r7, #24]

    // Skip if we're at the decimal point position
    if (digit_position == 2) {
 8002532:	4b53      	ldr	r3, [pc, #332]	@ (8002680 <update_parameter_value+0x220>)
 8002534:	781b      	ldrb	r3, [r3, #0]
 8002536:	2b02      	cmp	r3, #2
 8002538:	f000 8092 	beq.w	8002660 <update_parameter_value+0x200>
        return;
    }

    // Map cursor position to array index
    int digit_index = (digit_position < 2) ? digit_position : digit_position - 1;
 800253c:	4b50      	ldr	r3, [pc, #320]	@ (8002680 <update_parameter_value+0x220>)
 800253e:	781b      	ldrb	r3, [r3, #0]
 8002540:	2b01      	cmp	r3, #1
 8002542:	d802      	bhi.n	800254a <update_parameter_value+0xea>
 8002544:	4b4e      	ldr	r3, [pc, #312]	@ (8002680 <update_parameter_value+0x220>)
 8002546:	781b      	ldrb	r3, [r3, #0]
 8002548:	e002      	b.n	8002550 <update_parameter_value+0xf0>
 800254a:	4b4d      	ldr	r3, [pc, #308]	@ (8002680 <update_parameter_value+0x220>)
 800254c:	781b      	ldrb	r3, [r3, #0]
 800254e:	3b01      	subs	r3, #1
 8002550:	61fb      	str	r3, [r7, #28]

    // Update the selected digit
    digits[digit_index] += direction;
 8002552:	69fb      	ldr	r3, [r7, #28]
 8002554:	009b      	lsls	r3, r3, #2
 8002556:	3328      	adds	r3, #40	@ 0x28
 8002558:	443b      	add	r3, r7
 800255a:	f853 2c20 	ldr.w	r2, [r3, #-32]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	441a      	add	r2, r3
 8002562:	69fb      	ldr	r3, [r7, #28]
 8002564:	009b      	lsls	r3, r3, #2
 8002566:	3328      	adds	r3, #40	@ 0x28
 8002568:	443b      	add	r3, r7
 800256a:	f843 2c20 	str.w	r2, [r3, #-32]

    // Handle propagation and wrapping
    for (int i = digit_index; i >= 0; i--) {
 800256e:	69fb      	ldr	r3, [r7, #28]
 8002570:	627b      	str	r3, [r7, #36]	@ 0x24
 8002572:	e041      	b.n	80025f8 <update_parameter_value+0x198>
        if (digits[i] > 9) {
 8002574:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	3328      	adds	r3, #40	@ 0x28
 800257a:	443b      	add	r3, r7
 800257c:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8002580:	2b09      	cmp	r3, #9
 8002582:	dd17      	ble.n	80025b4 <update_parameter_value+0x154>
            digits[i] = 0;
 8002584:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002586:	009b      	lsls	r3, r3, #2
 8002588:	3328      	adds	r3, #40	@ 0x28
 800258a:	443b      	add	r3, r7
 800258c:	2200      	movs	r2, #0
 800258e:	f843 2c20 	str.w	r2, [r3, #-32]
            if (i > 0) {
 8002592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002594:	2b00      	cmp	r3, #0
 8002596:	dd2c      	ble.n	80025f2 <update_parameter_value+0x192>
                digits[i-1]++;  // Carry over to the next digit
 8002598:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800259a:	1e5a      	subs	r2, r3, #1
 800259c:	0093      	lsls	r3, r2, #2
 800259e:	3328      	adds	r3, #40	@ 0x28
 80025a0:	443b      	add	r3, r7
 80025a2:	f853 3c20 	ldr.w	r3, [r3, #-32]
 80025a6:	1c59      	adds	r1, r3, #1
 80025a8:	0093      	lsls	r3, r2, #2
 80025aa:	3328      	adds	r3, #40	@ 0x28
 80025ac:	443b      	add	r3, r7
 80025ae:	f843 1c20 	str.w	r1, [r3, #-32]
 80025b2:	e01e      	b.n	80025f2 <update_parameter_value+0x192>
            }
        } else if (digits[i] < 0) {
 80025b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025b6:	009b      	lsls	r3, r3, #2
 80025b8:	3328      	adds	r3, #40	@ 0x28
 80025ba:	443b      	add	r3, r7
 80025bc:	f853 3c20 	ldr.w	r3, [r3, #-32]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	da1d      	bge.n	8002600 <update_parameter_value+0x1a0>
            digits[i] = 9;
 80025c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025c6:	009b      	lsls	r3, r3, #2
 80025c8:	3328      	adds	r3, #40	@ 0x28
 80025ca:	443b      	add	r3, r7
 80025cc:	2209      	movs	r2, #9
 80025ce:	f843 2c20 	str.w	r2, [r3, #-32]
            if (i > 0) {
 80025d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	dd0c      	ble.n	80025f2 <update_parameter_value+0x192>
                digits[i-1]--;  // Borrow from the next digit
 80025d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025da:	1e5a      	subs	r2, r3, #1
 80025dc:	0093      	lsls	r3, r2, #2
 80025de:	3328      	adds	r3, #40	@ 0x28
 80025e0:	443b      	add	r3, r7
 80025e2:	f853 3c20 	ldr.w	r3, [r3, #-32]
 80025e6:	1e59      	subs	r1, r3, #1
 80025e8:	0093      	lsls	r3, r2, #2
 80025ea:	3328      	adds	r3, #40	@ 0x28
 80025ec:	443b      	add	r3, r7
 80025ee:	f843 1c20 	str.w	r1, [r3, #-32]
    for (int i = digit_index; i >= 0; i--) {
 80025f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025f4:	3b01      	subs	r3, #1
 80025f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80025f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	daba      	bge.n	8002574 <update_parameter_value+0x114>
 80025fe:	e000      	b.n	8002602 <update_parameter_value+0x1a2>
            }
        } else {
            break;  // Stop if no further propagation needed
 8002600:	bf00      	nop
        }
    }

    // Reconstruct the value
    full_value = digits[0] * 10000 +
 8002602:	68bb      	ldr	r3, [r7, #8]
 8002604:	f242 7210 	movw	r2, #10000	@ 0x2710
 8002608:	fb03 f202 	mul.w	r2, r3, r2
                 digits[1] * 1000 +
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002612:	fb01 f303 	mul.w	r3, r1, r3
    full_value = digits[0] * 10000 +
 8002616:	441a      	add	r2, r3
                 digits[2] * 100 +
 8002618:	693b      	ldr	r3, [r7, #16]
 800261a:	2164      	movs	r1, #100	@ 0x64
 800261c:	fb01 f303 	mul.w	r3, r1, r3
                 digits[1] * 1000 +
 8002620:	18d1      	adds	r1, r2, r3
                 digits[3] * 10 +
 8002622:	697a      	ldr	r2, [r7, #20]
 8002624:	4613      	mov	r3, r2
 8002626:	009b      	lsls	r3, r3, #2
 8002628:	4413      	add	r3, r2
 800262a:	005b      	lsls	r3, r3, #1
                 digits[2] * 100 +
 800262c:	18ca      	adds	r2, r1, r3
                 digits[4];
 800262e:	69bb      	ldr	r3, [r7, #24]
    full_value = digits[0] * 10000 +
 8002630:	4413      	add	r3, r2
 8002632:	623b      	str	r3, [r7, #32]

    printf("full_value: %d\n\r", full_value);
 8002634:	6a39      	ldr	r1, [r7, #32]
 8002636:	4813      	ldr	r0, [pc, #76]	@ (8002684 <update_parameter_value+0x224>)
 8002638:	f007 fc3e 	bl	8009eb8 <iprintf>
    // Convert back to floating-point
    param_value = full_value / 1000.0;
 800263c:	6a38      	ldr	r0, [r7, #32]
 800263e:	f7fd fee1 	bl	8000404 <__aeabi_i2d>
 8002642:	f04f 0200 	mov.w	r2, #0
 8002646:	4b10      	ldr	r3, [pc, #64]	@ (8002688 <update_parameter_value+0x228>)
 8002648:	f7fe f870 	bl	800072c <__aeabi_ddiv>
 800264c:	4602      	mov	r2, r0
 800264e:	460b      	mov	r3, r1
 8002650:	4610      	mov	r0, r2
 8002652:	4619      	mov	r1, r3
 8002654:	f7fe fa38 	bl	8000ac8 <__aeabi_d2f>
 8002658:	4603      	mov	r3, r0
 800265a:	4a03      	ldr	r2, [pc, #12]	@ (8002668 <update_parameter_value+0x208>)
 800265c:	6013      	str	r3, [r2, #0]
 800265e:	e000      	b.n	8002662 <update_parameter_value+0x202>
        return;
 8002660:	bf00      	nop
}
 8002662:	3728      	adds	r7, #40	@ 0x28
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}
 8002668:	200003ac 	.word	0x200003ac
 800266c:	447a0000 	.word	0x447a0000
 8002670:	68db8bad 	.word	0x68db8bad
 8002674:	66666667 	.word	0x66666667
 8002678:	10624dd3 	.word	0x10624dd3
 800267c:	51eb851f 	.word	0x51eb851f
 8002680:	200003b0 	.word	0x200003b0
 8002684:	0800d934 	.word	0x0800d934
 8002688:	408f4000 	.word	0x408f4000
 800268c:	00000000 	.word	0x00000000

08002690 <put_parameter_limit>:


// Put limit on parameter value
void put_parameter_limit(){
 8002690:	b580      	push	{r7, lr}
 8002692:	af00      	add	r7, sp, #0
	// RESET the param_value if mode is changed
	if(mode_index_last != mode_index){
 8002694:	4b7c      	ldr	r3, [pc, #496]	@ (8002888 <put_parameter_limit+0x1f8>)
 8002696:	681a      	ldr	r2, [r3, #0]
 8002698:	4b7c      	ldr	r3, [pc, #496]	@ (800288c <put_parameter_limit+0x1fc>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	429a      	cmp	r2, r3
 800269e:	d007      	beq.n	80026b0 <put_parameter_limit+0x20>
		param_value = 0;
 80026a0:	4b7b      	ldr	r3, [pc, #492]	@ (8002890 <put_parameter_limit+0x200>)
 80026a2:	f04f 0200 	mov.w	r2, #0
 80026a6:	601a      	str	r2, [r3, #0]
		mode_index_last = mode_index;
 80026a8:	4b78      	ldr	r3, [pc, #480]	@ (800288c <put_parameter_limit+0x1fc>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a76      	ldr	r2, [pc, #472]	@ (8002888 <put_parameter_limit+0x1f8>)
 80026ae:	6013      	str	r3, [r2, #0]
	}

	// check the MIN and MAX value of each mode to set limits on the value.
	if(current_state == PARAMETER_SETTING){
 80026b0:	4b78      	ldr	r3, [pc, #480]	@ (8002894 <put_parameter_limit+0x204>)
 80026b2:	781b      	ldrb	r3, [r3, #0]
 80026b4:	2b02      	cmp	r3, #2
 80026b6:	f040 80d9 	bne.w	800286c <put_parameter_limit+0x1dc>
		switch(mode_index){
 80026ba:	4b74      	ldr	r3, [pc, #464]	@ (800288c <put_parameter_limit+0x1fc>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	2b03      	cmp	r3, #3
 80026c0:	f200 80cb 	bhi.w	800285a <put_parameter_limit+0x1ca>
 80026c4:	a201      	add	r2, pc, #4	@ (adr r2, 80026cc <put_parameter_limit+0x3c>)
 80026c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026ca:	bf00      	nop
 80026cc:	080026dd 	.word	0x080026dd
 80026d0:	0800273f 	.word	0x0800273f
 80026d4:	08002797 	.word	0x08002797
 80026d8:	080027fb 	.word	0x080027fb
		case 0:
			if(param_value >= MAX_CC_VALUE){
 80026dc:	4b6c      	ldr	r3, [pc, #432]	@ (8002890 <put_parameter_limit+0x200>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	496d      	ldr	r1, [pc, #436]	@ (8002898 <put_parameter_limit+0x208>)
 80026e2:	4618      	mov	r0, r3
 80026e4:	f7fe fd00 	bl	80010e8 <__aeabi_fcmpge>
 80026e8:	4603      	mov	r3, r0
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d003      	beq.n	80026f6 <put_parameter_limit+0x66>
				param_value = MAX_CC_VALUE;
 80026ee:	4b68      	ldr	r3, [pc, #416]	@ (8002890 <put_parameter_limit+0x200>)
 80026f0:	4a69      	ldr	r2, [pc, #420]	@ (8002898 <put_parameter_limit+0x208>)
 80026f2:	601a      	str	r2, [r3, #0]
 80026f4:	e00f      	b.n	8002716 <put_parameter_limit+0x86>
			}else if(param_value <= MIN_CC_VALUE){
 80026f6:	4b66      	ldr	r3, [pc, #408]	@ (8002890 <put_parameter_limit+0x200>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4618      	mov	r0, r3
 80026fc:	f7fd fe94 	bl	8000428 <__aeabi_f2d>
 8002700:	a35b      	add	r3, pc, #364	@ (adr r3, 8002870 <put_parameter_limit+0x1e0>)
 8002702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002706:	f7fe f963 	bl	80009d0 <__aeabi_dcmple>
 800270a:	4603      	mov	r3, r0
 800270c:	2b00      	cmp	r3, #0
 800270e:	d002      	beq.n	8002716 <put_parameter_limit+0x86>
				param_value = MIN_CC_VALUE;
 8002710:	4b5f      	ldr	r3, [pc, #380]	@ (8002890 <put_parameter_limit+0x200>)
 8002712:	4a62      	ldr	r2, [pc, #392]	@ (800289c <put_parameter_limit+0x20c>)
 8002714:	601a      	str	r2, [r3, #0]
			}
			if(save_param){
 8002716:	4b62      	ldr	r3, [pc, #392]	@ (80028a0 <put_parameter_limit+0x210>)
 8002718:	781b      	ldrb	r3, [r3, #0]
 800271a:	2b00      	cmp	r3, #0
 800271c:	f000 809f 	beq.w	800285e <put_parameter_limit+0x1ce>
				param_mode.current = param_value;
 8002720:	4b5b      	ldr	r3, [pc, #364]	@ (8002890 <put_parameter_limit+0x200>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a5f      	ldr	r2, [pc, #380]	@ (80028a4 <put_parameter_limit+0x214>)
 8002726:	6053      	str	r3, [r2, #4]
				printf("current: %f\n\r", param_mode.current);
 8002728:	4b5e      	ldr	r3, [pc, #376]	@ (80028a4 <put_parameter_limit+0x214>)
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	4618      	mov	r0, r3
 800272e:	f7fd fe7b 	bl	8000428 <__aeabi_f2d>
 8002732:	4602      	mov	r2, r0
 8002734:	460b      	mov	r3, r1
 8002736:	485c      	ldr	r0, [pc, #368]	@ (80028a8 <put_parameter_limit+0x218>)
 8002738:	f007 fbbe 	bl	8009eb8 <iprintf>

			}
			break;
 800273c:	e08f      	b.n	800285e <put_parameter_limit+0x1ce>
		case 1:
			if(param_value >= MAX_CV_VALUE){
 800273e:	4b54      	ldr	r3, [pc, #336]	@ (8002890 <put_parameter_limit+0x200>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	495a      	ldr	r1, [pc, #360]	@ (80028ac <put_parameter_limit+0x21c>)
 8002744:	4618      	mov	r0, r3
 8002746:	f7fe fccf 	bl	80010e8 <__aeabi_fcmpge>
 800274a:	4603      	mov	r3, r0
 800274c:	2b00      	cmp	r3, #0
 800274e:	d003      	beq.n	8002758 <put_parameter_limit+0xc8>
				param_value = MAX_CV_VALUE;
 8002750:	4b4f      	ldr	r3, [pc, #316]	@ (8002890 <put_parameter_limit+0x200>)
 8002752:	4a56      	ldr	r2, [pc, #344]	@ (80028ac <put_parameter_limit+0x21c>)
 8002754:	601a      	str	r2, [r3, #0]
 8002756:	e00b      	b.n	8002770 <put_parameter_limit+0xe0>
			}else if(param_value <= MIN_CV_VALUE){
 8002758:	4b4d      	ldr	r3, [pc, #308]	@ (8002890 <put_parameter_limit+0x200>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4954      	ldr	r1, [pc, #336]	@ (80028b0 <put_parameter_limit+0x220>)
 800275e:	4618      	mov	r0, r3
 8002760:	f7fe fcb8 	bl	80010d4 <__aeabi_fcmple>
 8002764:	4603      	mov	r3, r0
 8002766:	2b00      	cmp	r3, #0
 8002768:	d002      	beq.n	8002770 <put_parameter_limit+0xe0>
				param_value = MIN_CV_VALUE;
 800276a:	4b49      	ldr	r3, [pc, #292]	@ (8002890 <put_parameter_limit+0x200>)
 800276c:	4a50      	ldr	r2, [pc, #320]	@ (80028b0 <put_parameter_limit+0x220>)
 800276e:	601a      	str	r2, [r3, #0]
			}
			if(save_param){
 8002770:	4b4b      	ldr	r3, [pc, #300]	@ (80028a0 <put_parameter_limit+0x210>)
 8002772:	781b      	ldrb	r3, [r3, #0]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d074      	beq.n	8002862 <put_parameter_limit+0x1d2>
				param_mode.voltage = param_value;
 8002778:	4b45      	ldr	r3, [pc, #276]	@ (8002890 <put_parameter_limit+0x200>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a49      	ldr	r2, [pc, #292]	@ (80028a4 <put_parameter_limit+0x214>)
 800277e:	6013      	str	r3, [r2, #0]
				printf("voltage: %f\n\r", param_mode.voltage);
 8002780:	4b48      	ldr	r3, [pc, #288]	@ (80028a4 <put_parameter_limit+0x214>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4618      	mov	r0, r3
 8002786:	f7fd fe4f 	bl	8000428 <__aeabi_f2d>
 800278a:	4602      	mov	r2, r0
 800278c:	460b      	mov	r3, r1
 800278e:	4849      	ldr	r0, [pc, #292]	@ (80028b4 <put_parameter_limit+0x224>)
 8002790:	f007 fb92 	bl	8009eb8 <iprintf>
			}
			break;
 8002794:	e065      	b.n	8002862 <put_parameter_limit+0x1d2>
		case 2:
			if(param_value >= MAX_CP_VALUE){
 8002796:	4b3e      	ldr	r3, [pc, #248]	@ (8002890 <put_parameter_limit+0x200>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4618      	mov	r0, r3
 800279c:	f7fd fe44 	bl	8000428 <__aeabi_f2d>
 80027a0:	a335      	add	r3, pc, #212	@ (adr r3, 8002878 <put_parameter_limit+0x1e8>)
 80027a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027a6:	f7fe f91d 	bl	80009e4 <__aeabi_dcmpge>
 80027aa:	4603      	mov	r3, r0
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d003      	beq.n	80027b8 <put_parameter_limit+0x128>
				param_value = MAX_CP_VALUE;
 80027b0:	4b37      	ldr	r3, [pc, #220]	@ (8002890 <put_parameter_limit+0x200>)
 80027b2:	4a41      	ldr	r2, [pc, #260]	@ (80028b8 <put_parameter_limit+0x228>)
 80027b4:	601a      	str	r2, [r3, #0]
 80027b6:	e00d      	b.n	80027d4 <put_parameter_limit+0x144>
			}else if(param_value <= MIN_CP_VALUE){
 80027b8:	4b35      	ldr	r3, [pc, #212]	@ (8002890 <put_parameter_limit+0x200>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80027c0:	4618      	mov	r0, r3
 80027c2:	f7fe fc87 	bl	80010d4 <__aeabi_fcmple>
 80027c6:	4603      	mov	r3, r0
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d003      	beq.n	80027d4 <put_parameter_limit+0x144>
				param_value = MIN_CP_VALUE;
 80027cc:	4b30      	ldr	r3, [pc, #192]	@ (8002890 <put_parameter_limit+0x200>)
 80027ce:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80027d2:	601a      	str	r2, [r3, #0]
			}
			if(save_param){
 80027d4:	4b32      	ldr	r3, [pc, #200]	@ (80028a0 <put_parameter_limit+0x210>)
 80027d6:	781b      	ldrb	r3, [r3, #0]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d044      	beq.n	8002866 <put_parameter_limit+0x1d6>
				param_mode.power = param_value;
 80027dc:	4b2c      	ldr	r3, [pc, #176]	@ (8002890 <put_parameter_limit+0x200>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a30      	ldr	r2, [pc, #192]	@ (80028a4 <put_parameter_limit+0x214>)
 80027e2:	6093      	str	r3, [r2, #8]
				printf("power: %f\n\r", param_mode.power);}
 80027e4:	4b2f      	ldr	r3, [pc, #188]	@ (80028a4 <put_parameter_limit+0x214>)
 80027e6:	689b      	ldr	r3, [r3, #8]
 80027e8:	4618      	mov	r0, r3
 80027ea:	f7fd fe1d 	bl	8000428 <__aeabi_f2d>
 80027ee:	4602      	mov	r2, r0
 80027f0:	460b      	mov	r3, r1
 80027f2:	4832      	ldr	r0, [pc, #200]	@ (80028bc <put_parameter_limit+0x22c>)
 80027f4:	f007 fb60 	bl	8009eb8 <iprintf>
			break;
 80027f8:	e035      	b.n	8002866 <put_parameter_limit+0x1d6>
		case 3:
			if(param_value >= MAX_CR_VALUE){
 80027fa:	4b25      	ldr	r3, [pc, #148]	@ (8002890 <put_parameter_limit+0x200>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4930      	ldr	r1, [pc, #192]	@ (80028c0 <put_parameter_limit+0x230>)
 8002800:	4618      	mov	r0, r3
 8002802:	f7fe fc71 	bl	80010e8 <__aeabi_fcmpge>
 8002806:	4603      	mov	r3, r0
 8002808:	2b00      	cmp	r3, #0
 800280a:	d003      	beq.n	8002814 <put_parameter_limit+0x184>
				param_value = MAX_CR_VALUE;
 800280c:	4b20      	ldr	r3, [pc, #128]	@ (8002890 <put_parameter_limit+0x200>)
 800280e:	4a2c      	ldr	r2, [pc, #176]	@ (80028c0 <put_parameter_limit+0x230>)
 8002810:	601a      	str	r2, [r3, #0]
 8002812:	e00f      	b.n	8002834 <put_parameter_limit+0x1a4>
			}else if(param_value <= MIN_CR_VALUE){
 8002814:	4b1e      	ldr	r3, [pc, #120]	@ (8002890 <put_parameter_limit+0x200>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4618      	mov	r0, r3
 800281a:	f7fd fe05 	bl	8000428 <__aeabi_f2d>
 800281e:	a318      	add	r3, pc, #96	@ (adr r3, 8002880 <put_parameter_limit+0x1f0>)
 8002820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002824:	f7fe f8d4 	bl	80009d0 <__aeabi_dcmple>
 8002828:	4603      	mov	r3, r0
 800282a:	2b00      	cmp	r3, #0
 800282c:	d002      	beq.n	8002834 <put_parameter_limit+0x1a4>
				param_value = MIN_CR_VALUE;
 800282e:	4b18      	ldr	r3, [pc, #96]	@ (8002890 <put_parameter_limit+0x200>)
 8002830:	4a24      	ldr	r2, [pc, #144]	@ (80028c4 <put_parameter_limit+0x234>)
 8002832:	601a      	str	r2, [r3, #0]
			}
			if(save_param){
 8002834:	4b1a      	ldr	r3, [pc, #104]	@ (80028a0 <put_parameter_limit+0x210>)
 8002836:	781b      	ldrb	r3, [r3, #0]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d016      	beq.n	800286a <put_parameter_limit+0x1da>
				param_mode.resistance= param_value;
 800283c:	4b14      	ldr	r3, [pc, #80]	@ (8002890 <put_parameter_limit+0x200>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a18      	ldr	r2, [pc, #96]	@ (80028a4 <put_parameter_limit+0x214>)
 8002842:	60d3      	str	r3, [r2, #12]
				printf("resistance: %f\n\r", param_mode.resistance);
 8002844:	4b17      	ldr	r3, [pc, #92]	@ (80028a4 <put_parameter_limit+0x214>)
 8002846:	68db      	ldr	r3, [r3, #12]
 8002848:	4618      	mov	r0, r3
 800284a:	f7fd fded 	bl	8000428 <__aeabi_f2d>
 800284e:	4602      	mov	r2, r0
 8002850:	460b      	mov	r3, r1
 8002852:	481d      	ldr	r0, [pc, #116]	@ (80028c8 <put_parameter_limit+0x238>)
 8002854:	f007 fb30 	bl	8009eb8 <iprintf>
			}
			break;
 8002858:	e007      	b.n	800286a <put_parameter_limit+0x1da>
		default:
			break;
 800285a:	bf00      	nop
 800285c:	e006      	b.n	800286c <put_parameter_limit+0x1dc>
			break;
 800285e:	bf00      	nop
 8002860:	e004      	b.n	800286c <put_parameter_limit+0x1dc>
			break;
 8002862:	bf00      	nop
 8002864:	e002      	b.n	800286c <put_parameter_limit+0x1dc>
			break;
 8002866:	bf00      	nop
 8002868:	e000      	b.n	800286c <put_parameter_limit+0x1dc>
			break;
 800286a:	bf00      	nop
		}
	}
}
 800286c:	bf00      	nop
 800286e:	bd80      	pop	{r7, pc}
 8002870:	d2f1a9fc 	.word	0xd2f1a9fc
 8002874:	3f50624d 	.word	0x3f50624d
 8002878:	9db22d0e 	.word	0x9db22d0e
 800287c:	4058ffef 	.word	0x4058ffef
 8002880:	9999999a 	.word	0x9999999a
 8002884:	3fb99999 	.word	0x3fb99999
 8002888:	2000000c 	.word	0x2000000c
 800288c:	20000008 	.word	0x20000008
 8002890:	200003ac 	.word	0x200003ac
 8002894:	2000039c 	.word	0x2000039c
 8002898:	40a00000 	.word	0x40a00000
 800289c:	3a83126f 	.word	0x3a83126f
 80028a0:	200003bc 	.word	0x200003bc
 80028a4:	20000384 	.word	0x20000384
 80028a8:	0800d948 	.word	0x0800d948
 80028ac:	41f00000 	.word	0x41f00000
 80028b0:	40400000 	.word	0x40400000
 80028b4:	0800d958 	.word	0x0800d958
 80028b8:	42c7ff7d 	.word	0x42c7ff7d
 80028bc:	0800d968 	.word	0x0800d968
 80028c0:	41200000 	.word	0x41200000
 80028c4:	3dcccccd 	.word	0x3dcccccd
 80028c8:	0800d974 	.word	0x0800d974

080028cc <handle_button_press>:

void handle_button_press(){
 80028cc:	b580      	push	{r7, lr}
 80028ce:	af00      	add	r7, sp, #0
	new_a_cnt = sw_a_cnt;
 80028d0:	4b5c      	ldr	r3, [pc, #368]	@ (8002a44 <handle_button_press+0x178>)
 80028d2:	881a      	ldrh	r2, [r3, #0]
 80028d4:	4b5c      	ldr	r3, [pc, #368]	@ (8002a48 <handle_button_press+0x17c>)
 80028d6:	801a      	strh	r2, [r3, #0]
	new_b_cnt = sw_b_cnt;
 80028d8:	4b5c      	ldr	r3, [pc, #368]	@ (8002a4c <handle_button_press+0x180>)
 80028da:	881a      	ldrh	r2, [r3, #0]
 80028dc:	4b5c      	ldr	r3, [pc, #368]	@ (8002a50 <handle_button_press+0x184>)
 80028de:	801a      	strh	r2, [r3, #0]

	// Handle the EXIT button
	if(sw_c_state){
 80028e0:	4b5c      	ldr	r3, [pc, #368]	@ (8002a54 <handle_button_press+0x188>)
 80028e2:	781b      	ldrb	r3, [r3, #0]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d020      	beq.n	800292a <handle_button_press+0x5e>
		if((current_state == MODE_SELECTION )||(current_state == PARAMETER_SETTING)){
 80028e8:	4b5b      	ldr	r3, [pc, #364]	@ (8002a58 <handle_button_press+0x18c>)
 80028ea:	781b      	ldrb	r3, [r3, #0]
 80028ec:	2b01      	cmp	r3, #1
 80028ee:	d003      	beq.n	80028f8 <handle_button_press+0x2c>
 80028f0:	4b59      	ldr	r3, [pc, #356]	@ (8002a58 <handle_button_press+0x18c>)
 80028f2:	781b      	ldrb	r3, [r3, #0]
 80028f4:	2b02      	cmp	r3, #2
 80028f6:	d10b      	bne.n	8002910 <handle_button_press+0x44>
			current_state = HOME_SCREEN;
 80028f8:	4b57      	ldr	r3, [pc, #348]	@ (8002a58 <handle_button_press+0x18c>)
 80028fa:	2200      	movs	r2, #0
 80028fc:	701a      	strb	r2, [r3, #0]
			save_param = false;
 80028fe:	4b57      	ldr	r3, [pc, #348]	@ (8002a5c <handle_button_press+0x190>)
 8002900:	2200      	movs	r2, #0
 8002902:	701a      	strb	r2, [r3, #0]
			sw_c_state = false;
 8002904:	4b53      	ldr	r3, [pc, #332]	@ (8002a54 <handle_button_press+0x188>)
 8002906:	2200      	movs	r2, #0
 8002908:	701a      	strb	r2, [r3, #0]
			Reset_Everything();
 800290a:	f000 f8bb 	bl	8002a84 <Reset_Everything>
 800290e:	e00c      	b.n	800292a <handle_button_press+0x5e>
		}else if((current_state == HOME_SCREEN) && (cursor_position == 1)){
 8002910:	4b51      	ldr	r3, [pc, #324]	@ (8002a58 <handle_button_press+0x18c>)
 8002912:	781b      	ldrb	r3, [r3, #0]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d108      	bne.n	800292a <handle_button_press+0x5e>
 8002918:	4b51      	ldr	r3, [pc, #324]	@ (8002a60 <handle_button_press+0x194>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	2b01      	cmp	r3, #1
 800291e:	d104      	bne.n	800292a <handle_button_press+0x5e>
			Reset_Everything();
 8002920:	f000 f8b0 	bl	8002a84 <Reset_Everything>
			sw_c_state = false;
 8002924:	4b4b      	ldr	r3, [pc, #300]	@ (8002a54 <handle_button_press+0x188>)
 8002926:	2200      	movs	r2, #0
 8002928:	701a      	strb	r2, [r3, #0]
		}
	}

	if(sw_rot_state){
 800292a:	4b4e      	ldr	r3, [pc, #312]	@ (8002a64 <handle_button_press+0x198>)
 800292c:	781b      	ldrb	r3, [r3, #0]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d059      	beq.n	80029e6 <handle_button_press+0x11a>
		switch(current_state){
 8002932:	4b49      	ldr	r3, [pc, #292]	@ (8002a58 <handle_button_press+0x18c>)
 8002934:	781b      	ldrb	r3, [r3, #0]
 8002936:	2b02      	cmp	r3, #2
 8002938:	d04a      	beq.n	80029d0 <handle_button_press+0x104>
 800293a:	2b02      	cmp	r3, #2
 800293c:	dc4f      	bgt.n	80029de <handle_button_press+0x112>
 800293e:	2b00      	cmp	r3, #0
 8002940:	d002      	beq.n	8002948 <handle_button_press+0x7c>
 8002942:	2b01      	cmp	r3, #1
 8002944:	d033      	beq.n	80029ae <handle_button_press+0xe2>
			digit_position = 0;
//			save_param = false;
//			}
			break;
		default:
			break;
 8002946:	e04a      	b.n	80029de <handle_button_press+0x112>
			if(cursor_position == 0){
 8002948:	4b45      	ldr	r3, [pc, #276]	@ (8002a60 <handle_button_press+0x194>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d106      	bne.n	800295e <handle_button_press+0x92>
				current_state = MODE_SELECTION;		// GoTo MODE SELECTION PAGE
 8002950:	4b41      	ldr	r3, [pc, #260]	@ (8002a58 <handle_button_press+0x18c>)
 8002952:	2201      	movs	r2, #1
 8002954:	701a      	strb	r2, [r3, #0]
				output_on_flag = false;				// turn off when page is changed
 8002956:	4b44      	ldr	r3, [pc, #272]	@ (8002a68 <handle_button_press+0x19c>)
 8002958:	2200      	movs	r2, #0
 800295a:	701a      	strb	r2, [r3, #0]
 800295c:	e023      	b.n	80029a6 <handle_button_press+0xda>
			}else if((cursor_position == 1) && (!output_on_flag)){
 800295e:	4b40      	ldr	r3, [pc, #256]	@ (8002a60 <handle_button_press+0x194>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	2b01      	cmp	r3, #1
 8002964:	d10a      	bne.n	800297c <handle_button_press+0xb0>
 8002966:	4b40      	ldr	r3, [pc, #256]	@ (8002a68 <handle_button_press+0x19c>)
 8002968:	781b      	ldrb	r3, [r3, #0]
 800296a:	f083 0301 	eor.w	r3, r3, #1
 800296e:	b2db      	uxtb	r3, r3
 8002970:	2b00      	cmp	r3, #0
 8002972:	d003      	beq.n	800297c <handle_button_press+0xb0>
				output_on_flag = true;
 8002974:	4b3c      	ldr	r3, [pc, #240]	@ (8002a68 <handle_button_press+0x19c>)
 8002976:	2201      	movs	r2, #1
 8002978:	701a      	strb	r2, [r3, #0]
 800297a:	e014      	b.n	80029a6 <handle_button_press+0xda>
			}else if((cursor_position == 1) && output_on_flag){
 800297c:	4b38      	ldr	r3, [pc, #224]	@ (8002a60 <handle_button_press+0x194>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	2b01      	cmp	r3, #1
 8002982:	d10a      	bne.n	800299a <handle_button_press+0xce>
 8002984:	4b38      	ldr	r3, [pc, #224]	@ (8002a68 <handle_button_press+0x19c>)
 8002986:	781b      	ldrb	r3, [r3, #0]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d006      	beq.n	800299a <handle_button_press+0xce>
				output_on_flag = false;
 800298c:	4b36      	ldr	r3, [pc, #216]	@ (8002a68 <handle_button_press+0x19c>)
 800298e:	2200      	movs	r2, #0
 8002990:	701a      	strb	r2, [r3, #0]
				force_update = true;
 8002992:	4b36      	ldr	r3, [pc, #216]	@ (8002a6c <handle_button_press+0x1a0>)
 8002994:	2201      	movs	r2, #1
 8002996:	701a      	strb	r2, [r3, #0]
 8002998:	e005      	b.n	80029a6 <handle_button_press+0xda>
			}else if(cursor_position == 2){		// Reset everything
 800299a:	4b31      	ldr	r3, [pc, #196]	@ (8002a60 <handle_button_press+0x194>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	2b02      	cmp	r3, #2
 80029a0:	d101      	bne.n	80029a6 <handle_button_press+0xda>
				Reset_Everything();
 80029a2:	f000 f86f 	bl	8002a84 <Reset_Everything>
			adjusting_digit = false;			// Disable adjusting in param setting
 80029a6:	4b32      	ldr	r3, [pc, #200]	@ (8002a70 <handle_button_press+0x1a4>)
 80029a8:	2200      	movs	r2, #0
 80029aa:	701a      	strb	r2, [r3, #0]
			break;
 80029ac:	e018      	b.n	80029e0 <handle_button_press+0x114>
			current_state = PARAMETER_SETTING;			// go to next state
 80029ae:	4b2a      	ldr	r3, [pc, #168]	@ (8002a58 <handle_button_press+0x18c>)
 80029b0:	2202      	movs	r2, #2
 80029b2:	701a      	strb	r2, [r3, #0]
			mode_index = cursor_position;
 80029b4:	4b2a      	ldr	r3, [pc, #168]	@ (8002a60 <handle_button_press+0x194>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a2e      	ldr	r2, [pc, #184]	@ (8002a74 <handle_button_press+0x1a8>)
 80029ba:	6013      	str	r3, [r2, #0]
			cursor_position = 0;
 80029bc:	4b28      	ldr	r3, [pc, #160]	@ (8002a60 <handle_button_press+0x194>)
 80029be:	2200      	movs	r2, #0
 80029c0:	601a      	str	r2, [r3, #0]
			digit_position = 0;
 80029c2:	4b2d      	ldr	r3, [pc, #180]	@ (8002a78 <handle_button_press+0x1ac>)
 80029c4:	2200      	movs	r2, #0
 80029c6:	701a      	strb	r2, [r3, #0]
			adjusting_digit = false;
 80029c8:	4b29      	ldr	r3, [pc, #164]	@ (8002a70 <handle_button_press+0x1a4>)
 80029ca:	2200      	movs	r2, #0
 80029cc:	701a      	strb	r2, [r3, #0]
			break;
 80029ce:	e007      	b.n	80029e0 <handle_button_press+0x114>
			current_state = RETURN_TO_HOME;
 80029d0:	4b21      	ldr	r3, [pc, #132]	@ (8002a58 <handle_button_press+0x18c>)
 80029d2:	2203      	movs	r2, #3
 80029d4:	701a      	strb	r2, [r3, #0]
			digit_position = 0;
 80029d6:	4b28      	ldr	r3, [pc, #160]	@ (8002a78 <handle_button_press+0x1ac>)
 80029d8:	2200      	movs	r2, #0
 80029da:	701a      	strb	r2, [r3, #0]
			break;
 80029dc:	e000      	b.n	80029e0 <handle_button_press+0x114>
			break;
 80029de:	bf00      	nop
		}
		sw_rot_state = false; // Reset button state
 80029e0:	4b20      	ldr	r3, [pc, #128]	@ (8002a64 <handle_button_press+0x198>)
 80029e2:	2200      	movs	r2, #0
 80029e4:	701a      	strb	r2, [r3, #0]
	}

	// Move cursor under the digits
	if(current_state == PARAMETER_SETTING) {
 80029e6:	4b1c      	ldr	r3, [pc, #112]	@ (8002a58 <handle_button_press+0x18c>)
 80029e8:	781b      	ldrb	r3, [r3, #0]
 80029ea:	2b02      	cmp	r3, #2
 80029ec:	d103      	bne.n	80029f6 <handle_button_press+0x12a>
		adjusting_digit = true;
 80029ee:	4b20      	ldr	r3, [pc, #128]	@ (8002a70 <handle_button_press+0x1a4>)
 80029f0:	2201      	movs	r2, #1
 80029f2:	701a      	strb	r2, [r3, #0]
 80029f4:	e002      	b.n	80029fc <handle_button_press+0x130>
	}else adjusting_digit = false;
 80029f6:	4b1e      	ldr	r3, [pc, #120]	@ (8002a70 <handle_button_press+0x1a4>)
 80029f8:	2200      	movs	r2, #0
 80029fa:	701a      	strb	r2, [r3, #0]

	if(new_b_cnt > old_b_cnt){
 80029fc:	4b14      	ldr	r3, [pc, #80]	@ (8002a50 <handle_button_press+0x184>)
 80029fe:	881a      	ldrh	r2, [r3, #0]
 8002a00:	4b1e      	ldr	r3, [pc, #120]	@ (8002a7c <handle_button_press+0x1b0>)
 8002a02:	881b      	ldrh	r3, [r3, #0]
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d906      	bls.n	8002a16 <handle_button_press+0x14a>
		digit_position++;
 8002a08:	4b1b      	ldr	r3, [pc, #108]	@ (8002a78 <handle_button_press+0x1ac>)
 8002a0a:	781b      	ldrb	r3, [r3, #0]
 8002a0c:	3301      	adds	r3, #1
 8002a0e:	b2da      	uxtb	r2, r3
 8002a10:	4b19      	ldr	r3, [pc, #100]	@ (8002a78 <handle_button_press+0x1ac>)
 8002a12:	701a      	strb	r2, [r3, #0]
 8002a14:	e00b      	b.n	8002a2e <handle_button_press+0x162>
	}else if(new_a_cnt > old_a_cnt) {
 8002a16:	4b0c      	ldr	r3, [pc, #48]	@ (8002a48 <handle_button_press+0x17c>)
 8002a18:	881a      	ldrh	r2, [r3, #0]
 8002a1a:	4b19      	ldr	r3, [pc, #100]	@ (8002a80 <handle_button_press+0x1b4>)
 8002a1c:	881b      	ldrh	r3, [r3, #0]
 8002a1e:	429a      	cmp	r2, r3
 8002a20:	d905      	bls.n	8002a2e <handle_button_press+0x162>
		digit_position--;
 8002a22:	4b15      	ldr	r3, [pc, #84]	@ (8002a78 <handle_button_press+0x1ac>)
 8002a24:	781b      	ldrb	r3, [r3, #0]
 8002a26:	3b01      	subs	r3, #1
 8002a28:	b2da      	uxtb	r2, r3
 8002a2a:	4b13      	ldr	r3, [pc, #76]	@ (8002a78 <handle_button_press+0x1ac>)
 8002a2c:	701a      	strb	r2, [r3, #0]
	}
	old_b_cnt = new_b_cnt;
 8002a2e:	4b08      	ldr	r3, [pc, #32]	@ (8002a50 <handle_button_press+0x184>)
 8002a30:	881a      	ldrh	r2, [r3, #0]
 8002a32:	4b12      	ldr	r3, [pc, #72]	@ (8002a7c <handle_button_press+0x1b0>)
 8002a34:	801a      	strh	r2, [r3, #0]
	old_a_cnt = new_a_cnt;
 8002a36:	4b04      	ldr	r3, [pc, #16]	@ (8002a48 <handle_button_press+0x17c>)
 8002a38:	881a      	ldrh	r2, [r3, #0]
 8002a3a:	4b11      	ldr	r3, [pc, #68]	@ (8002a80 <handle_button_press+0x1b4>)
 8002a3c:	801a      	strh	r2, [r3, #0]
}
 8002a3e:	bf00      	nop
 8002a40:	bd80      	pop	{r7, pc}
 8002a42:	bf00      	nop
 8002a44:	200003b2 	.word	0x200003b2
 8002a48:	200003c2 	.word	0x200003c2
 8002a4c:	200003b4 	.word	0x200003b4
 8002a50:	200003c4 	.word	0x200003c4
 8002a54:	200003bb 	.word	0x200003bb
 8002a58:	2000039c 	.word	0x2000039c
 8002a5c:	200003bc 	.word	0x200003bc
 8002a60:	200003a8 	.word	0x200003a8
 8002a64:	200003b8 	.word	0x200003b8
 8002a68:	200003be 	.word	0x200003be
 8002a6c:	200003bf 	.word	0x200003bf
 8002a70:	200003bd 	.word	0x200003bd
 8002a74:	20000008 	.word	0x20000008
 8002a78:	200003b0 	.word	0x200003b0
 8002a7c:	200003c8 	.word	0x200003c8
 8002a80:	200003c6 	.word	0x200003c6

08002a84 <Reset_Everything>:

void Reset_Everything(void){
 8002a84:	b580      	push	{r7, lr}
 8002a86:	af00      	add	r7, sp, #0
	current_state = HOME_SCREEN;	// not necessary to reset current_state
 8002a88:	4b0f      	ldr	r3, [pc, #60]	@ (8002ac8 <Reset_Everything+0x44>)
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	701a      	strb	r2, [r3, #0]
	cursor_position = 0;
 8002a8e:	4b0f      	ldr	r3, [pc, #60]	@ (8002acc <Reset_Everything+0x48>)
 8002a90:	2200      	movs	r2, #0
 8002a92:	601a      	str	r2, [r3, #0]
	mode_index = -1;
 8002a94:	4b0e      	ldr	r3, [pc, #56]	@ (8002ad0 <Reset_Everything+0x4c>)
 8002a96:	f04f 32ff 	mov.w	r2, #4294967295
 8002a9a:	601a      	str	r2, [r3, #0]
	param_value = 0.0;
 8002a9c:	4b0d      	ldr	r3, [pc, #52]	@ (8002ad4 <Reset_Everything+0x50>)
 8002a9e:	f04f 0200 	mov.w	r2, #0
 8002aa2:	601a      	str	r2, [r3, #0]
	output_on_flag = false;
 8002aa4:	4b0c      	ldr	r3, [pc, #48]	@ (8002ad8 <Reset_Everything+0x54>)
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	701a      	strb	r2, [r3, #0]
	save_param = false;
 8002aaa:	4b0c      	ldr	r3, [pc, #48]	@ (8002adc <Reset_Everything+0x58>)
 8002aac:	2200      	movs	r2, #0
 8002aae:	701a      	strb	r2, [r3, #0]
	memset(&param_mode, 0, sizeof(param_mode));
 8002ab0:	2210      	movs	r2, #16
 8002ab2:	2100      	movs	r1, #0
 8002ab4:	480a      	ldr	r0, [pc, #40]	@ (8002ae0 <Reset_Everything+0x5c>)
 8002ab6:	f007 fb81 	bl	800a1bc <memset>
	memset(&set_param, 0, sizeof(set_param));
 8002aba:	2208      	movs	r2, #8
 8002abc:	2100      	movs	r1, #0
 8002abe:	4809      	ldr	r0, [pc, #36]	@ (8002ae4 <Reset_Everything+0x60>)
 8002ac0:	f007 fb7c 	bl	800a1bc <memset>
}
 8002ac4:	bf00      	nop
 8002ac6:	bd80      	pop	{r7, pc}
 8002ac8:	2000039c 	.word	0x2000039c
 8002acc:	200003a8 	.word	0x200003a8
 8002ad0:	20000008 	.word	0x20000008
 8002ad4:	200003ac 	.word	0x200003ac
 8002ad8:	200003be 	.word	0x200003be
 8002adc:	200003bc 	.word	0x200003bc
 8002ae0:	20000384 	.word	0x20000384
 8002ae4:	20000394 	.word	0x20000394

08002ae8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002aec:	b672      	cpsid	i
}
 8002aee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002af0:	bf00      	nop
 8002af2:	e7fd      	b.n	8002af0 <Error_Handler+0x8>

08002af4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002af4:	b480      	push	{r7}
 8002af6:	b085      	sub	sp, #20
 8002af8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002afa:	4b15      	ldr	r3, [pc, #84]	@ (8002b50 <HAL_MspInit+0x5c>)
 8002afc:	699b      	ldr	r3, [r3, #24]
 8002afe:	4a14      	ldr	r2, [pc, #80]	@ (8002b50 <HAL_MspInit+0x5c>)
 8002b00:	f043 0301 	orr.w	r3, r3, #1
 8002b04:	6193      	str	r3, [r2, #24]
 8002b06:	4b12      	ldr	r3, [pc, #72]	@ (8002b50 <HAL_MspInit+0x5c>)
 8002b08:	699b      	ldr	r3, [r3, #24]
 8002b0a:	f003 0301 	and.w	r3, r3, #1
 8002b0e:	60bb      	str	r3, [r7, #8]
 8002b10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b12:	4b0f      	ldr	r3, [pc, #60]	@ (8002b50 <HAL_MspInit+0x5c>)
 8002b14:	69db      	ldr	r3, [r3, #28]
 8002b16:	4a0e      	ldr	r2, [pc, #56]	@ (8002b50 <HAL_MspInit+0x5c>)
 8002b18:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b1c:	61d3      	str	r3, [r2, #28]
 8002b1e:	4b0c      	ldr	r3, [pc, #48]	@ (8002b50 <HAL_MspInit+0x5c>)
 8002b20:	69db      	ldr	r3, [r3, #28]
 8002b22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b26:	607b      	str	r3, [r7, #4]
 8002b28:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002b2a:	4b0a      	ldr	r3, [pc, #40]	@ (8002b54 <HAL_MspInit+0x60>)
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	60fb      	str	r3, [r7, #12]
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8002b36:	60fb      	str	r3, [r7, #12]
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002b3e:	60fb      	str	r3, [r7, #12]
 8002b40:	4a04      	ldr	r2, [pc, #16]	@ (8002b54 <HAL_MspInit+0x60>)
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b46:	bf00      	nop
 8002b48:	3714      	adds	r7, #20
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bc80      	pop	{r7}
 8002b4e:	4770      	bx	lr
 8002b50:	40021000 	.word	0x40021000
 8002b54:	40010000 	.word	0x40010000

08002b58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002b5c:	bf00      	nop
 8002b5e:	e7fd      	b.n	8002b5c <NMI_Handler+0x4>

08002b60 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b60:	b480      	push	{r7}
 8002b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b64:	bf00      	nop
 8002b66:	e7fd      	b.n	8002b64 <HardFault_Handler+0x4>

08002b68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b6c:	bf00      	nop
 8002b6e:	e7fd      	b.n	8002b6c <MemManage_Handler+0x4>

08002b70 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b70:	b480      	push	{r7}
 8002b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b74:	bf00      	nop
 8002b76:	e7fd      	b.n	8002b74 <BusFault_Handler+0x4>

08002b78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b7c:	bf00      	nop
 8002b7e:	e7fd      	b.n	8002b7c <UsageFault_Handler+0x4>

08002b80 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b80:	b480      	push	{r7}
 8002b82:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002b84:	bf00      	nop
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bc80      	pop	{r7}
 8002b8a:	4770      	bx	lr

08002b8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b90:	bf00      	nop
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bc80      	pop	{r7}
 8002b96:	4770      	bx	lr

08002b98 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b9c:	bf00      	nop
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bc80      	pop	{r7}
 8002ba2:	4770      	bx	lr

08002ba4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ba8:	f000 fa84 	bl	80030b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002bac:	bf00      	nop
 8002bae:	bd80      	pop	{r7, pc}

08002bb0 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(A_SW_Pin);
 8002bb4:	2001      	movs	r0, #1
 8002bb6:	f001 fc41 	bl	800443c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002bba:	bf00      	nop
 8002bbc:	bd80      	pop	{r7, pc}

08002bbe <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002bbe:	b580      	push	{r7, lr}
 8002bc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B_SW_Pin);
 8002bc2:	2002      	movs	r0, #2
 8002bc4:	f001 fc3a 	bl	800443c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002bc8:	bf00      	nop
 8002bca:	bd80      	pop	{r7, pc}

08002bcc <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(C_SW_Pin);
 8002bd0:	2010      	movs	r0, #16
 8002bd2:	f001 fc33 	bl	800443c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8002bd6:	bf00      	nop
 8002bd8:	bd80      	pop	{r7, pc}
	...

08002bdc <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8002be0:	4802      	ldr	r0, [pc, #8]	@ (8002bec <DMA1_Channel6_IRQHandler+0x10>)
 8002be2:	f001 f961 	bl	8003ea8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8002be6:	bf00      	nop
 8002be8:	bd80      	pop	{r7, pc}
 8002bea:	bf00      	nop
 8002bec:	200002f0 	.word	0x200002f0

08002bf0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ROT_SW_Pin);
 8002bf4:	2020      	movs	r0, #32
 8002bf6:	f001 fc21 	bl	800443c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LTC2944_ALCC_Pin);
 8002bfa:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8002bfe:	f001 fc1d 	bl	800443c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002c02:	bf00      	nop
 8002c04:	bd80      	pop	{r7, pc}
	...

08002c08 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002c0c:	4802      	ldr	r0, [pc, #8]	@ (8002c18 <TIM3_IRQHandler+0x10>)
 8002c0e:	f005 f8ab 	bl	8007d68 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002c12:	bf00      	nop
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	bf00      	nop
 8002c18:	200003d4 	.word	0x200003d4

08002c1c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002c20:	4802      	ldr	r0, [pc, #8]	@ (8002c2c <I2C1_EV_IRQHandler+0x10>)
 8002c22:	f002 f9e7 	bl	8004ff4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002c26:	bf00      	nop
 8002c28:	bd80      	pop	{r7, pc}
 8002c2a:	bf00      	nop
 8002c2c:	20000248 	.word	0x20000248

08002c30 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002c30:	b480      	push	{r7}
 8002c32:	af00      	add	r7, sp, #0
  return 1;
 8002c34:	2301      	movs	r3, #1
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bc80      	pop	{r7}
 8002c3c:	4770      	bx	lr

08002c3e <_kill>:

int _kill(int pid, int sig)
{
 8002c3e:	b580      	push	{r7, lr}
 8002c40:	b082      	sub	sp, #8
 8002c42:	af00      	add	r7, sp, #0
 8002c44:	6078      	str	r0, [r7, #4]
 8002c46:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002c48:	f007 fb0a 	bl	800a260 <__errno>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	2216      	movs	r2, #22
 8002c50:	601a      	str	r2, [r3, #0]
  return -1;
 8002c52:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	3708      	adds	r7, #8
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}

08002c5e <_exit>:

void _exit (int status)
{
 8002c5e:	b580      	push	{r7, lr}
 8002c60:	b082      	sub	sp, #8
 8002c62:	af00      	add	r7, sp, #0
 8002c64:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002c66:	f04f 31ff 	mov.w	r1, #4294967295
 8002c6a:	6878      	ldr	r0, [r7, #4]
 8002c6c:	f7ff ffe7 	bl	8002c3e <_kill>
  while (1) {}    /* Make sure we hang here */
 8002c70:	bf00      	nop
 8002c72:	e7fd      	b.n	8002c70 <_exit+0x12>

08002c74 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b086      	sub	sp, #24
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	60f8      	str	r0, [r7, #12]
 8002c7c:	60b9      	str	r1, [r7, #8]
 8002c7e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c80:	2300      	movs	r3, #0
 8002c82:	617b      	str	r3, [r7, #20]
 8002c84:	e00a      	b.n	8002c9c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002c86:	f3af 8000 	nop.w
 8002c8a:	4601      	mov	r1, r0
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	1c5a      	adds	r2, r3, #1
 8002c90:	60ba      	str	r2, [r7, #8]
 8002c92:	b2ca      	uxtb	r2, r1
 8002c94:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	3301      	adds	r3, #1
 8002c9a:	617b      	str	r3, [r7, #20]
 8002c9c:	697a      	ldr	r2, [r7, #20]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	dbf0      	blt.n	8002c86 <_read+0x12>
  }

  return len;
 8002ca4:	687b      	ldr	r3, [r7, #4]
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	3718      	adds	r7, #24
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}

08002cae <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002cae:	b580      	push	{r7, lr}
 8002cb0:	b086      	sub	sp, #24
 8002cb2:	af00      	add	r7, sp, #0
 8002cb4:	60f8      	str	r0, [r7, #12]
 8002cb6:	60b9      	str	r1, [r7, #8]
 8002cb8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cba:	2300      	movs	r3, #0
 8002cbc:	617b      	str	r3, [r7, #20]
 8002cbe:	e009      	b.n	8002cd4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	1c5a      	adds	r2, r3, #1
 8002cc4:	60ba      	str	r2, [r7, #8]
 8002cc6:	781b      	ldrb	r3, [r3, #0]
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f7fe fcdd 	bl	8001688 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	3301      	adds	r3, #1
 8002cd2:	617b      	str	r3, [r7, #20]
 8002cd4:	697a      	ldr	r2, [r7, #20]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	dbf1      	blt.n	8002cc0 <_write+0x12>
  }
  return len;
 8002cdc:	687b      	ldr	r3, [r7, #4]
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	3718      	adds	r7, #24
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}

08002ce6 <_close>:

int _close(int file)
{
 8002ce6:	b480      	push	{r7}
 8002ce8:	b083      	sub	sp, #12
 8002cea:	af00      	add	r7, sp, #0
 8002cec:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002cee:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	370c      	adds	r7, #12
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bc80      	pop	{r7}
 8002cfa:	4770      	bx	lr

08002cfc <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	b083      	sub	sp, #12
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
 8002d04:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002d0c:	605a      	str	r2, [r3, #4]
  return 0;
 8002d0e:	2300      	movs	r3, #0
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	370c      	adds	r7, #12
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bc80      	pop	{r7}
 8002d18:	4770      	bx	lr

08002d1a <_isatty>:

int _isatty(int file)
{
 8002d1a:	b480      	push	{r7}
 8002d1c:	b083      	sub	sp, #12
 8002d1e:	af00      	add	r7, sp, #0
 8002d20:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002d22:	2301      	movs	r3, #1
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	370c      	adds	r7, #12
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bc80      	pop	{r7}
 8002d2c:	4770      	bx	lr

08002d2e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002d2e:	b480      	push	{r7}
 8002d30:	b085      	sub	sp, #20
 8002d32:	af00      	add	r7, sp, #0
 8002d34:	60f8      	str	r0, [r7, #12]
 8002d36:	60b9      	str	r1, [r7, #8]
 8002d38:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002d3a:	2300      	movs	r3, #0
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	3714      	adds	r7, #20
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bc80      	pop	{r7}
 8002d44:	4770      	bx	lr
	...

08002d48 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b086      	sub	sp, #24
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d50:	4a14      	ldr	r2, [pc, #80]	@ (8002da4 <_sbrk+0x5c>)
 8002d52:	4b15      	ldr	r3, [pc, #84]	@ (8002da8 <_sbrk+0x60>)
 8002d54:	1ad3      	subs	r3, r2, r3
 8002d56:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002d5c:	4b13      	ldr	r3, [pc, #76]	@ (8002dac <_sbrk+0x64>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d102      	bne.n	8002d6a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002d64:	4b11      	ldr	r3, [pc, #68]	@ (8002dac <_sbrk+0x64>)
 8002d66:	4a12      	ldr	r2, [pc, #72]	@ (8002db0 <_sbrk+0x68>)
 8002d68:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d6a:	4b10      	ldr	r3, [pc, #64]	@ (8002dac <_sbrk+0x64>)
 8002d6c:	681a      	ldr	r2, [r3, #0]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	4413      	add	r3, r2
 8002d72:	693a      	ldr	r2, [r7, #16]
 8002d74:	429a      	cmp	r2, r3
 8002d76:	d207      	bcs.n	8002d88 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002d78:	f007 fa72 	bl	800a260 <__errno>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	220c      	movs	r2, #12
 8002d80:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002d82:	f04f 33ff 	mov.w	r3, #4294967295
 8002d86:	e009      	b.n	8002d9c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002d88:	4b08      	ldr	r3, [pc, #32]	@ (8002dac <_sbrk+0x64>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002d8e:	4b07      	ldr	r3, [pc, #28]	@ (8002dac <_sbrk+0x64>)
 8002d90:	681a      	ldr	r2, [r3, #0]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	4413      	add	r3, r2
 8002d96:	4a05      	ldr	r2, [pc, #20]	@ (8002dac <_sbrk+0x64>)
 8002d98:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	3718      	adds	r7, #24
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bd80      	pop	{r7, pc}
 8002da4:	20005000 	.word	0x20005000
 8002da8:	00000400 	.word	0x00000400
 8002dac:	200003d0 	.word	0x200003d0
 8002db0:	20000a20 	.word	0x20000a20

08002db4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002db4:	b480      	push	{r7}
 8002db6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002db8:	bf00      	nop
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bc80      	pop	{r7}
 8002dbe:	4770      	bx	lr

08002dc0 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b08c      	sub	sp, #48	@ 0x30
 8002dc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002dc6:	f107 030c 	add.w	r3, r7, #12
 8002dca:	2224      	movs	r2, #36	@ 0x24
 8002dcc:	2100      	movs	r1, #0
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f007 f9f4 	bl	800a1bc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002dd4:	1d3b      	adds	r3, r7, #4
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	601a      	str	r2, [r3, #0]
 8002dda:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002ddc:	4b20      	ldr	r3, [pc, #128]	@ (8002e60 <MX_TIM3_Init+0xa0>)
 8002dde:	4a21      	ldr	r2, [pc, #132]	@ (8002e64 <MX_TIM3_Init+0xa4>)
 8002de0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002de2:	4b1f      	ldr	r3, [pc, #124]	@ (8002e60 <MX_TIM3_Init+0xa0>)
 8002de4:	2200      	movs	r2, #0
 8002de6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002de8:	4b1d      	ldr	r3, [pc, #116]	@ (8002e60 <MX_TIM3_Init+0xa0>)
 8002dea:	2200      	movs	r2, #0
 8002dec:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 8002dee:	4b1c      	ldr	r3, [pc, #112]	@ (8002e60 <MX_TIM3_Init+0xa0>)
 8002df0:	f242 720f 	movw	r2, #9999	@ 0x270f
 8002df4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002df6:	4b1a      	ldr	r3, [pc, #104]	@ (8002e60 <MX_TIM3_Init+0xa0>)
 8002df8:	2200      	movs	r2, #0
 8002dfa:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002dfc:	4b18      	ldr	r3, [pc, #96]	@ (8002e60 <MX_TIM3_Init+0xa0>)
 8002dfe:	2200      	movs	r2, #0
 8002e00:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002e02:	2303      	movs	r3, #3
 8002e04:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002e06:	2300      	movs	r3, #0
 8002e08:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8002e12:	230a      	movs	r3, #10
 8002e14:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002e16:	2300      	movs	r3, #0
 8002e18:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002e22:	2300      	movs	r3, #0
 8002e24:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002e26:	f107 030c 	add.w	r3, r7, #12
 8002e2a:	4619      	mov	r1, r3
 8002e2c:	480c      	ldr	r0, [pc, #48]	@ (8002e60 <MX_TIM3_Init+0xa0>)
 8002e2e:	f004 fe4b 	bl	8007ac8 <HAL_TIM_Encoder_Init>
 8002e32:	4603      	mov	r3, r0
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d001      	beq.n	8002e3c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8002e38:	f7ff fe56 	bl	8002ae8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e40:	2300      	movs	r3, #0
 8002e42:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002e44:	1d3b      	adds	r3, r7, #4
 8002e46:	4619      	mov	r1, r3
 8002e48:	4805      	ldr	r0, [pc, #20]	@ (8002e60 <MX_TIM3_Init+0xa0>)
 8002e4a:	f005 f933 	bl	80080b4 <HAL_TIMEx_MasterConfigSynchronization>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d001      	beq.n	8002e58 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8002e54:	f7ff fe48 	bl	8002ae8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002e58:	bf00      	nop
 8002e5a:	3730      	adds	r7, #48	@ 0x30
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}
 8002e60:	200003d4 	.word	0x200003d4
 8002e64:	40000400 	.word	0x40000400

08002e68 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b088      	sub	sp, #32
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e70:	f107 0310 	add.w	r3, r7, #16
 8002e74:	2200      	movs	r2, #0
 8002e76:	601a      	str	r2, [r3, #0]
 8002e78:	605a      	str	r2, [r3, #4]
 8002e7a:	609a      	str	r2, [r3, #8]
 8002e7c:	60da      	str	r2, [r3, #12]
  if(tim_encoderHandle->Instance==TIM3)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a19      	ldr	r2, [pc, #100]	@ (8002ee8 <HAL_TIM_Encoder_MspInit+0x80>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d12b      	bne.n	8002ee0 <HAL_TIM_Encoder_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002e88:	4b18      	ldr	r3, [pc, #96]	@ (8002eec <HAL_TIM_Encoder_MspInit+0x84>)
 8002e8a:	69db      	ldr	r3, [r3, #28]
 8002e8c:	4a17      	ldr	r2, [pc, #92]	@ (8002eec <HAL_TIM_Encoder_MspInit+0x84>)
 8002e8e:	f043 0302 	orr.w	r3, r3, #2
 8002e92:	61d3      	str	r3, [r2, #28]
 8002e94:	4b15      	ldr	r3, [pc, #84]	@ (8002eec <HAL_TIM_Encoder_MspInit+0x84>)
 8002e96:	69db      	ldr	r3, [r3, #28]
 8002e98:	f003 0302 	and.w	r3, r3, #2
 8002e9c:	60fb      	str	r3, [r7, #12]
 8002e9e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ea0:	4b12      	ldr	r3, [pc, #72]	@ (8002eec <HAL_TIM_Encoder_MspInit+0x84>)
 8002ea2:	699b      	ldr	r3, [r3, #24]
 8002ea4:	4a11      	ldr	r2, [pc, #68]	@ (8002eec <HAL_TIM_Encoder_MspInit+0x84>)
 8002ea6:	f043 0304 	orr.w	r3, r3, #4
 8002eaa:	6193      	str	r3, [r2, #24]
 8002eac:	4b0f      	ldr	r3, [pc, #60]	@ (8002eec <HAL_TIM_Encoder_MspInit+0x84>)
 8002eae:	699b      	ldr	r3, [r3, #24]
 8002eb0:	f003 0304 	and.w	r3, r3, #4
 8002eb4:	60bb      	str	r3, [r7, #8]
 8002eb6:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = ROT_A_Pin|ROT_B_Pin;
 8002eb8:	23c0      	movs	r3, #192	@ 0xc0
 8002eba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ec4:	f107 0310 	add.w	r3, r7, #16
 8002ec8:	4619      	mov	r1, r3
 8002eca:	4809      	ldr	r0, [pc, #36]	@ (8002ef0 <HAL_TIM_Encoder_MspInit+0x88>)
 8002ecc:	f001 f900 	bl	80040d0 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	2100      	movs	r1, #0
 8002ed4:	201d      	movs	r0, #29
 8002ed6:	f000 fede 	bl	8003c96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002eda:	201d      	movs	r0, #29
 8002edc:	f000 fef7 	bl	8003cce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002ee0:	bf00      	nop
 8002ee2:	3720      	adds	r7, #32
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bd80      	pop	{r7, pc}
 8002ee8:	40000400 	.word	0x40000400
 8002eec:	40021000 	.word	0x40021000
 8002ef0:	40010800 	.word	0x40010800

08002ef4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002ef8:	4b11      	ldr	r3, [pc, #68]	@ (8002f40 <MX_USART2_UART_Init+0x4c>)
 8002efa:	4a12      	ldr	r2, [pc, #72]	@ (8002f44 <MX_USART2_UART_Init+0x50>)
 8002efc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002efe:	4b10      	ldr	r3, [pc, #64]	@ (8002f40 <MX_USART2_UART_Init+0x4c>)
 8002f00:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002f04:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002f06:	4b0e      	ldr	r3, [pc, #56]	@ (8002f40 <MX_USART2_UART_Init+0x4c>)
 8002f08:	2200      	movs	r2, #0
 8002f0a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002f0c:	4b0c      	ldr	r3, [pc, #48]	@ (8002f40 <MX_USART2_UART_Init+0x4c>)
 8002f0e:	2200      	movs	r2, #0
 8002f10:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002f12:	4b0b      	ldr	r3, [pc, #44]	@ (8002f40 <MX_USART2_UART_Init+0x4c>)
 8002f14:	2200      	movs	r2, #0
 8002f16:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002f18:	4b09      	ldr	r3, [pc, #36]	@ (8002f40 <MX_USART2_UART_Init+0x4c>)
 8002f1a:	220c      	movs	r2, #12
 8002f1c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f1e:	4b08      	ldr	r3, [pc, #32]	@ (8002f40 <MX_USART2_UART_Init+0x4c>)
 8002f20:	2200      	movs	r2, #0
 8002f22:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f24:	4b06      	ldr	r3, [pc, #24]	@ (8002f40 <MX_USART2_UART_Init+0x4c>)
 8002f26:	2200      	movs	r2, #0
 8002f28:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002f2a:	4805      	ldr	r0, [pc, #20]	@ (8002f40 <MX_USART2_UART_Init+0x4c>)
 8002f2c:	f005 f932 	bl	8008194 <HAL_UART_Init>
 8002f30:	4603      	mov	r3, r0
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d001      	beq.n	8002f3a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002f36:	f7ff fdd7 	bl	8002ae8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002f3a:	bf00      	nop
 8002f3c:	bd80      	pop	{r7, pc}
 8002f3e:	bf00      	nop
 8002f40:	2000041c 	.word	0x2000041c
 8002f44:	40004400 	.word	0x40004400

08002f48 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b088      	sub	sp, #32
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f50:	f107 0310 	add.w	r3, r7, #16
 8002f54:	2200      	movs	r2, #0
 8002f56:	601a      	str	r2, [r3, #0]
 8002f58:	605a      	str	r2, [r3, #4]
 8002f5a:	609a      	str	r2, [r3, #8]
 8002f5c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a1b      	ldr	r2, [pc, #108]	@ (8002fd0 <HAL_UART_MspInit+0x88>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d12f      	bne.n	8002fc8 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002f68:	4b1a      	ldr	r3, [pc, #104]	@ (8002fd4 <HAL_UART_MspInit+0x8c>)
 8002f6a:	69db      	ldr	r3, [r3, #28]
 8002f6c:	4a19      	ldr	r2, [pc, #100]	@ (8002fd4 <HAL_UART_MspInit+0x8c>)
 8002f6e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f72:	61d3      	str	r3, [r2, #28]
 8002f74:	4b17      	ldr	r3, [pc, #92]	@ (8002fd4 <HAL_UART_MspInit+0x8c>)
 8002f76:	69db      	ldr	r3, [r3, #28]
 8002f78:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f7c:	60fb      	str	r3, [r7, #12]
 8002f7e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f80:	4b14      	ldr	r3, [pc, #80]	@ (8002fd4 <HAL_UART_MspInit+0x8c>)
 8002f82:	699b      	ldr	r3, [r3, #24]
 8002f84:	4a13      	ldr	r2, [pc, #76]	@ (8002fd4 <HAL_UART_MspInit+0x8c>)
 8002f86:	f043 0304 	orr.w	r3, r3, #4
 8002f8a:	6193      	str	r3, [r2, #24]
 8002f8c:	4b11      	ldr	r3, [pc, #68]	@ (8002fd4 <HAL_UART_MspInit+0x8c>)
 8002f8e:	699b      	ldr	r3, [r3, #24]
 8002f90:	f003 0304 	and.w	r3, r3, #4
 8002f94:	60bb      	str	r3, [r7, #8]
 8002f96:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002f98:	2304      	movs	r3, #4
 8002f9a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f9c:	2302      	movs	r3, #2
 8002f9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002fa0:	2303      	movs	r3, #3
 8002fa2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fa4:	f107 0310 	add.w	r3, r7, #16
 8002fa8:	4619      	mov	r1, r3
 8002faa:	480b      	ldr	r0, [pc, #44]	@ (8002fd8 <HAL_UART_MspInit+0x90>)
 8002fac:	f001 f890 	bl	80040d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002fb0:	2308      	movs	r3, #8
 8002fb2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fbc:	f107 0310 	add.w	r3, r7, #16
 8002fc0:	4619      	mov	r1, r3
 8002fc2:	4805      	ldr	r0, [pc, #20]	@ (8002fd8 <HAL_UART_MspInit+0x90>)
 8002fc4:	f001 f884 	bl	80040d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002fc8:	bf00      	nop
 8002fca:	3720      	adds	r7, #32
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}
 8002fd0:	40004400 	.word	0x40004400
 8002fd4:	40021000 	.word	0x40021000
 8002fd8:	40010800 	.word	0x40010800

08002fdc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002fdc:	f7ff feea 	bl	8002db4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002fe0:	480b      	ldr	r0, [pc, #44]	@ (8003010 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002fe2:	490c      	ldr	r1, [pc, #48]	@ (8003014 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002fe4:	4a0c      	ldr	r2, [pc, #48]	@ (8003018 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002fe6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002fe8:	e002      	b.n	8002ff0 <LoopCopyDataInit>

08002fea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002fea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002fec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002fee:	3304      	adds	r3, #4

08002ff0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ff0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ff2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ff4:	d3f9      	bcc.n	8002fea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ff6:	4a09      	ldr	r2, [pc, #36]	@ (800301c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002ff8:	4c09      	ldr	r4, [pc, #36]	@ (8003020 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002ffa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ffc:	e001      	b.n	8003002 <LoopFillZerobss>

08002ffe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ffe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003000:	3204      	adds	r2, #4

08003002 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003002:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003004:	d3fb      	bcc.n	8002ffe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003006:	f007 f931 	bl	800a26c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800300a:	f7fe fb4f 	bl	80016ac <main>
  bx lr
 800300e:	4770      	bx	lr
  ldr r0, =_sdata
 8003010:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003014:	200001fc 	.word	0x200001fc
  ldr r2, =_sidata
 8003018:	0800f350 	.word	0x0800f350
  ldr r2, =_sbss
 800301c:	200001fc 	.word	0x200001fc
  ldr r4, =_ebss
 8003020:	20000a20 	.word	0x20000a20

08003024 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003024:	e7fe      	b.n	8003024 <ADC1_2_IRQHandler>
	...

08003028 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800302c:	4b08      	ldr	r3, [pc, #32]	@ (8003050 <HAL_Init+0x28>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a07      	ldr	r2, [pc, #28]	@ (8003050 <HAL_Init+0x28>)
 8003032:	f043 0310 	orr.w	r3, r3, #16
 8003036:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003038:	2003      	movs	r0, #3
 800303a:	f000 fe21 	bl	8003c80 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800303e:	200f      	movs	r0, #15
 8003040:	f000 f808 	bl	8003054 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003044:	f7ff fd56 	bl	8002af4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003048:	2300      	movs	r3, #0
}
 800304a:	4618      	mov	r0, r3
 800304c:	bd80      	pop	{r7, pc}
 800304e:	bf00      	nop
 8003050:	40022000 	.word	0x40022000

08003054 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b082      	sub	sp, #8
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800305c:	4b12      	ldr	r3, [pc, #72]	@ (80030a8 <HAL_InitTick+0x54>)
 800305e:	681a      	ldr	r2, [r3, #0]
 8003060:	4b12      	ldr	r3, [pc, #72]	@ (80030ac <HAL_InitTick+0x58>)
 8003062:	781b      	ldrb	r3, [r3, #0]
 8003064:	4619      	mov	r1, r3
 8003066:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800306a:	fbb3 f3f1 	udiv	r3, r3, r1
 800306e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003072:	4618      	mov	r0, r3
 8003074:	f000 fe39 	bl	8003cea <HAL_SYSTICK_Config>
 8003078:	4603      	mov	r3, r0
 800307a:	2b00      	cmp	r3, #0
 800307c:	d001      	beq.n	8003082 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800307e:	2301      	movs	r3, #1
 8003080:	e00e      	b.n	80030a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2b0f      	cmp	r3, #15
 8003086:	d80a      	bhi.n	800309e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003088:	2200      	movs	r2, #0
 800308a:	6879      	ldr	r1, [r7, #4]
 800308c:	f04f 30ff 	mov.w	r0, #4294967295
 8003090:	f000 fe01 	bl	8003c96 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003094:	4a06      	ldr	r2, [pc, #24]	@ (80030b0 <HAL_InitTick+0x5c>)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800309a:	2300      	movs	r3, #0
 800309c:	e000      	b.n	80030a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800309e:	2301      	movs	r3, #1
}
 80030a0:	4618      	mov	r0, r3
 80030a2:	3708      	adds	r7, #8
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bd80      	pop	{r7, pc}
 80030a8:	20000018 	.word	0x20000018
 80030ac:	20000020 	.word	0x20000020
 80030b0:	2000001c 	.word	0x2000001c

080030b4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80030b4:	b480      	push	{r7}
 80030b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80030b8:	4b05      	ldr	r3, [pc, #20]	@ (80030d0 <HAL_IncTick+0x1c>)
 80030ba:	781b      	ldrb	r3, [r3, #0]
 80030bc:	461a      	mov	r2, r3
 80030be:	4b05      	ldr	r3, [pc, #20]	@ (80030d4 <HAL_IncTick+0x20>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4413      	add	r3, r2
 80030c4:	4a03      	ldr	r2, [pc, #12]	@ (80030d4 <HAL_IncTick+0x20>)
 80030c6:	6013      	str	r3, [r2, #0]
}
 80030c8:	bf00      	nop
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bc80      	pop	{r7}
 80030ce:	4770      	bx	lr
 80030d0:	20000020 	.word	0x20000020
 80030d4:	20000464 	.word	0x20000464

080030d8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80030d8:	b480      	push	{r7}
 80030da:	af00      	add	r7, sp, #0
  return uwTick;
 80030dc:	4b02      	ldr	r3, [pc, #8]	@ (80030e8 <HAL_GetTick+0x10>)
 80030de:	681b      	ldr	r3, [r3, #0]
}
 80030e0:	4618      	mov	r0, r3
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bc80      	pop	{r7}
 80030e6:	4770      	bx	lr
 80030e8:	20000464 	.word	0x20000464

080030ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b084      	sub	sp, #16
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80030f4:	f7ff fff0 	bl	80030d8 <HAL_GetTick>
 80030f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003104:	d005      	beq.n	8003112 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003106:	4b0a      	ldr	r3, [pc, #40]	@ (8003130 <HAL_Delay+0x44>)
 8003108:	781b      	ldrb	r3, [r3, #0]
 800310a:	461a      	mov	r2, r3
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	4413      	add	r3, r2
 8003110:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003112:	bf00      	nop
 8003114:	f7ff ffe0 	bl	80030d8 <HAL_GetTick>
 8003118:	4602      	mov	r2, r0
 800311a:	68bb      	ldr	r3, [r7, #8]
 800311c:	1ad3      	subs	r3, r2, r3
 800311e:	68fa      	ldr	r2, [r7, #12]
 8003120:	429a      	cmp	r2, r3
 8003122:	d8f7      	bhi.n	8003114 <HAL_Delay+0x28>
  {
  }
}
 8003124:	bf00      	nop
 8003126:	bf00      	nop
 8003128:	3710      	adds	r7, #16
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}
 800312e:	bf00      	nop
 8003130:	20000020 	.word	0x20000020

08003134 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b086      	sub	sp, #24
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800313c:	2300      	movs	r3, #0
 800313e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8003140:	2300      	movs	r3, #0
 8003142:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8003144:	2300      	movs	r3, #0
 8003146:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8003148:	2300      	movs	r3, #0
 800314a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d101      	bne.n	8003156 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	e0be      	b.n	80032d4 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	689b      	ldr	r3, [r3, #8]
 800315a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003160:	2b00      	cmp	r3, #0
 8003162:	d109      	bne.n	8003178 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2200      	movs	r2, #0
 8003168:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2200      	movs	r2, #0
 800316e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003172:	6878      	ldr	r0, [r7, #4]
 8003174:	f7fe f886 	bl	8001284 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003178:	6878      	ldr	r0, [r7, #4]
 800317a:	f000 fbc5 	bl	8003908 <ADC_ConversionStop_Disable>
 800317e:	4603      	mov	r3, r0
 8003180:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003186:	f003 0310 	and.w	r3, r3, #16
 800318a:	2b00      	cmp	r3, #0
 800318c:	f040 8099 	bne.w	80032c2 <HAL_ADC_Init+0x18e>
 8003190:	7dfb      	ldrb	r3, [r7, #23]
 8003192:	2b00      	cmp	r3, #0
 8003194:	f040 8095 	bne.w	80032c2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800319c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80031a0:	f023 0302 	bic.w	r3, r3, #2
 80031a4:	f043 0202 	orr.w	r2, r3, #2
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80031b4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	7b1b      	ldrb	r3, [r3, #12]
 80031ba:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80031bc:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80031be:	68ba      	ldr	r2, [r7, #8]
 80031c0:	4313      	orrs	r3, r2
 80031c2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	689b      	ldr	r3, [r3, #8]
 80031c8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80031cc:	d003      	beq.n	80031d6 <HAL_ADC_Init+0xa2>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	689b      	ldr	r3, [r3, #8]
 80031d2:	2b01      	cmp	r3, #1
 80031d4:	d102      	bne.n	80031dc <HAL_ADC_Init+0xa8>
 80031d6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80031da:	e000      	b.n	80031de <HAL_ADC_Init+0xaa>
 80031dc:	2300      	movs	r3, #0
 80031de:	693a      	ldr	r2, [r7, #16]
 80031e0:	4313      	orrs	r3, r2
 80031e2:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	7d1b      	ldrb	r3, [r3, #20]
 80031e8:	2b01      	cmp	r3, #1
 80031ea:	d119      	bne.n	8003220 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	7b1b      	ldrb	r3, [r3, #12]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d109      	bne.n	8003208 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	699b      	ldr	r3, [r3, #24]
 80031f8:	3b01      	subs	r3, #1
 80031fa:	035a      	lsls	r2, r3, #13
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	4313      	orrs	r3, r2
 8003200:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003204:	613b      	str	r3, [r7, #16]
 8003206:	e00b      	b.n	8003220 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800320c:	f043 0220 	orr.w	r2, r3, #32
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003218:	f043 0201 	orr.w	r2, r3, #1
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	693a      	ldr	r2, [r7, #16]
 8003230:	430a      	orrs	r2, r1
 8003232:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	689a      	ldr	r2, [r3, #8]
 800323a:	4b28      	ldr	r3, [pc, #160]	@ (80032dc <HAL_ADC_Init+0x1a8>)
 800323c:	4013      	ands	r3, r2
 800323e:	687a      	ldr	r2, [r7, #4]
 8003240:	6812      	ldr	r2, [r2, #0]
 8003242:	68b9      	ldr	r1, [r7, #8]
 8003244:	430b      	orrs	r3, r1
 8003246:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	689b      	ldr	r3, [r3, #8]
 800324c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003250:	d003      	beq.n	800325a <HAL_ADC_Init+0x126>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	689b      	ldr	r3, [r3, #8]
 8003256:	2b01      	cmp	r3, #1
 8003258:	d104      	bne.n	8003264 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	691b      	ldr	r3, [r3, #16]
 800325e:	3b01      	subs	r3, #1
 8003260:	051b      	lsls	r3, r3, #20
 8003262:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800326a:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	68fa      	ldr	r2, [r7, #12]
 8003274:	430a      	orrs	r2, r1
 8003276:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	689a      	ldr	r2, [r3, #8]
 800327e:	4b18      	ldr	r3, [pc, #96]	@ (80032e0 <HAL_ADC_Init+0x1ac>)
 8003280:	4013      	ands	r3, r2
 8003282:	68ba      	ldr	r2, [r7, #8]
 8003284:	429a      	cmp	r2, r3
 8003286:	d10b      	bne.n	80032a0 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2200      	movs	r2, #0
 800328c:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003292:	f023 0303 	bic.w	r3, r3, #3
 8003296:	f043 0201 	orr.w	r2, r3, #1
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800329e:	e018      	b.n	80032d2 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032a4:	f023 0312 	bic.w	r3, r3, #18
 80032a8:	f043 0210 	orr.w	r2, r3, #16
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032b4:	f043 0201 	orr.w	r2, r3, #1
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80032bc:	2301      	movs	r3, #1
 80032be:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80032c0:	e007      	b.n	80032d2 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032c6:	f043 0210 	orr.w	r2, r3, #16
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 80032ce:	2301      	movs	r3, #1
 80032d0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80032d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	3718      	adds	r7, #24
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd80      	pop	{r7, pc}
 80032dc:	ffe1f7fd 	.word	0xffe1f7fd
 80032e0:	ff1f0efe 	.word	0xff1f0efe

080032e4 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b084      	sub	sp, #16
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80032ec:	2300      	movs	r3, #0
 80032ee:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80032f6:	2b01      	cmp	r3, #1
 80032f8:	d101      	bne.n	80032fe <HAL_ADC_Start+0x1a>
 80032fa:	2302      	movs	r3, #2
 80032fc:	e098      	b.n	8003430 <HAL_ADC_Start+0x14c>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2201      	movs	r2, #1
 8003302:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8003306:	6878      	ldr	r0, [r7, #4]
 8003308:	f000 faa4 	bl	8003854 <ADC_Enable>
 800330c:	4603      	mov	r3, r0
 800330e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8003310:	7bfb      	ldrb	r3, [r7, #15]
 8003312:	2b00      	cmp	r3, #0
 8003314:	f040 8087 	bne.w	8003426 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800331c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003320:	f023 0301 	bic.w	r3, r3, #1
 8003324:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a41      	ldr	r2, [pc, #260]	@ (8003438 <HAL_ADC_Start+0x154>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d105      	bne.n	8003342 <HAL_ADC_Start+0x5e>
 8003336:	4b41      	ldr	r3, [pc, #260]	@ (800343c <HAL_ADC_Start+0x158>)
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 800333e:	2b00      	cmp	r3, #0
 8003340:	d115      	bne.n	800336e <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003346:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003358:	2b00      	cmp	r3, #0
 800335a:	d026      	beq.n	80033aa <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003360:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003364:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800336c:	e01d      	b.n	80033aa <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003372:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a2f      	ldr	r2, [pc, #188]	@ (800343c <HAL_ADC_Start+0x158>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d004      	beq.n	800338e <HAL_ADC_Start+0xaa>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a2b      	ldr	r2, [pc, #172]	@ (8003438 <HAL_ADC_Start+0x154>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d10d      	bne.n	80033aa <HAL_ADC_Start+0xc6>
 800338e:	4b2b      	ldr	r3, [pc, #172]	@ (800343c <HAL_ADC_Start+0x158>)
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003396:	2b00      	cmp	r3, #0
 8003398:	d007      	beq.n	80033aa <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800339e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80033a2:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033ae:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d006      	beq.n	80033c4 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033ba:	f023 0206 	bic.w	r2, r3, #6
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	62da      	str	r2, [r3, #44]	@ 0x2c
 80033c2:	e002      	b.n	80033ca <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2200      	movs	r2, #0
 80033c8:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2200      	movs	r2, #0
 80033ce:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f06f 0202 	mvn.w	r2, #2
 80033da:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80033e6:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80033ea:	d113      	bne.n	8003414 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80033f0:	4a11      	ldr	r2, [pc, #68]	@ (8003438 <HAL_ADC_Start+0x154>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d105      	bne.n	8003402 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80033f6:	4b11      	ldr	r3, [pc, #68]	@ (800343c <HAL_ADC_Start+0x158>)
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d108      	bne.n	8003414 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	689a      	ldr	r2, [r3, #8]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8003410:	609a      	str	r2, [r3, #8]
 8003412:	e00c      	b.n	800342e <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	689a      	ldr	r2, [r3, #8]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8003422:	609a      	str	r2, [r3, #8]
 8003424:	e003      	b.n	800342e <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2200      	movs	r2, #0
 800342a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 800342e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003430:	4618      	mov	r0, r3
 8003432:	3710      	adds	r7, #16
 8003434:	46bd      	mov	sp, r7
 8003436:	bd80      	pop	{r7, pc}
 8003438:	40012800 	.word	0x40012800
 800343c:	40012400 	.word	0x40012400

08003440 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003440:	b590      	push	{r4, r7, lr}
 8003442:	b087      	sub	sp, #28
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
 8003448:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800344a:	2300      	movs	r3, #0
 800344c:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800344e:	2300      	movs	r3, #0
 8003450:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8003452:	2300      	movs	r3, #0
 8003454:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8003456:	f7ff fe3f 	bl	80030d8 <HAL_GetTick>
 800345a:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	689b      	ldr	r3, [r3, #8]
 8003462:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003466:	2b00      	cmp	r3, #0
 8003468:	d00b      	beq.n	8003482 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800346e:	f043 0220 	orr.w	r2, r3, #32
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2200      	movs	r2, #0
 800347a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	e0d3      	b.n	800362a <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800348c:	2b00      	cmp	r3, #0
 800348e:	d131      	bne.n	80034f4 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003496:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800349a:	2b00      	cmp	r3, #0
 800349c:	d12a      	bne.n	80034f4 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800349e:	e021      	b.n	80034e4 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034a6:	d01d      	beq.n	80034e4 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d007      	beq.n	80034be <HAL_ADC_PollForConversion+0x7e>
 80034ae:	f7ff fe13 	bl	80030d8 <HAL_GetTick>
 80034b2:	4602      	mov	r2, r0
 80034b4:	697b      	ldr	r3, [r7, #20]
 80034b6:	1ad3      	subs	r3, r2, r3
 80034b8:	683a      	ldr	r2, [r7, #0]
 80034ba:	429a      	cmp	r2, r3
 80034bc:	d212      	bcs.n	80034e4 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f003 0302 	and.w	r3, r3, #2
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d10b      	bne.n	80034e4 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034d0:	f043 0204 	orr.w	r2, r3, #4
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2200      	movs	r2, #0
 80034dc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 80034e0:	2303      	movs	r3, #3
 80034e2:	e0a2      	b.n	800362a <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f003 0302 	and.w	r3, r3, #2
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d0d6      	beq.n	80034a0 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80034f2:	e070      	b.n	80035d6 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80034f4:	4b4f      	ldr	r3, [pc, #316]	@ (8003634 <HAL_ADC_PollForConversion+0x1f4>)
 80034f6:	681c      	ldr	r4, [r3, #0]
 80034f8:	2002      	movs	r0, #2
 80034fa:	f004 fa2f 	bl	800795c <HAL_RCCEx_GetPeriphCLKFreq>
 80034fe:	4603      	mov	r3, r0
 8003500:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	6919      	ldr	r1, [r3, #16]
 800350a:	4b4b      	ldr	r3, [pc, #300]	@ (8003638 <HAL_ADC_PollForConversion+0x1f8>)
 800350c:	400b      	ands	r3, r1
 800350e:	2b00      	cmp	r3, #0
 8003510:	d118      	bne.n	8003544 <HAL_ADC_PollForConversion+0x104>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	68d9      	ldr	r1, [r3, #12]
 8003518:	4b48      	ldr	r3, [pc, #288]	@ (800363c <HAL_ADC_PollForConversion+0x1fc>)
 800351a:	400b      	ands	r3, r1
 800351c:	2b00      	cmp	r3, #0
 800351e:	d111      	bne.n	8003544 <HAL_ADC_PollForConversion+0x104>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	6919      	ldr	r1, [r3, #16]
 8003526:	4b46      	ldr	r3, [pc, #280]	@ (8003640 <HAL_ADC_PollForConversion+0x200>)
 8003528:	400b      	ands	r3, r1
 800352a:	2b00      	cmp	r3, #0
 800352c:	d108      	bne.n	8003540 <HAL_ADC_PollForConversion+0x100>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	68d9      	ldr	r1, [r3, #12]
 8003534:	4b43      	ldr	r3, [pc, #268]	@ (8003644 <HAL_ADC_PollForConversion+0x204>)
 8003536:	400b      	ands	r3, r1
 8003538:	2b00      	cmp	r3, #0
 800353a:	d101      	bne.n	8003540 <HAL_ADC_PollForConversion+0x100>
 800353c:	2314      	movs	r3, #20
 800353e:	e020      	b.n	8003582 <HAL_ADC_PollForConversion+0x142>
 8003540:	2329      	movs	r3, #41	@ 0x29
 8003542:	e01e      	b.n	8003582 <HAL_ADC_PollForConversion+0x142>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	6919      	ldr	r1, [r3, #16]
 800354a:	4b3d      	ldr	r3, [pc, #244]	@ (8003640 <HAL_ADC_PollForConversion+0x200>)
 800354c:	400b      	ands	r3, r1
 800354e:	2b00      	cmp	r3, #0
 8003550:	d106      	bne.n	8003560 <HAL_ADC_PollForConversion+0x120>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	68d9      	ldr	r1, [r3, #12]
 8003558:	4b3a      	ldr	r3, [pc, #232]	@ (8003644 <HAL_ADC_PollForConversion+0x204>)
 800355a:	400b      	ands	r3, r1
 800355c:	2b00      	cmp	r3, #0
 800355e:	d00d      	beq.n	800357c <HAL_ADC_PollForConversion+0x13c>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	6919      	ldr	r1, [r3, #16]
 8003566:	4b38      	ldr	r3, [pc, #224]	@ (8003648 <HAL_ADC_PollForConversion+0x208>)
 8003568:	400b      	ands	r3, r1
 800356a:	2b00      	cmp	r3, #0
 800356c:	d108      	bne.n	8003580 <HAL_ADC_PollForConversion+0x140>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	68d9      	ldr	r1, [r3, #12]
 8003574:	4b34      	ldr	r3, [pc, #208]	@ (8003648 <HAL_ADC_PollForConversion+0x208>)
 8003576:	400b      	ands	r3, r1
 8003578:	2b00      	cmp	r3, #0
 800357a:	d101      	bne.n	8003580 <HAL_ADC_PollForConversion+0x140>
 800357c:	2354      	movs	r3, #84	@ 0x54
 800357e:	e000      	b.n	8003582 <HAL_ADC_PollForConversion+0x142>
 8003580:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8003582:	fb02 f303 	mul.w	r3, r2, r3
 8003586:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8003588:	e021      	b.n	80035ce <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003590:	d01a      	beq.n	80035c8 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d007      	beq.n	80035a8 <HAL_ADC_PollForConversion+0x168>
 8003598:	f7ff fd9e 	bl	80030d8 <HAL_GetTick>
 800359c:	4602      	mov	r2, r0
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	1ad3      	subs	r3, r2, r3
 80035a2:	683a      	ldr	r2, [r7, #0]
 80035a4:	429a      	cmp	r2, r3
 80035a6:	d20f      	bcs.n	80035c8 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	693a      	ldr	r2, [r7, #16]
 80035ac:	429a      	cmp	r2, r3
 80035ae:	d90b      	bls.n	80035c8 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035b4:	f043 0204 	orr.w	r2, r3, #4
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2200      	movs	r2, #0
 80035c0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 80035c4:	2303      	movs	r3, #3
 80035c6:	e030      	b.n	800362a <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	3301      	adds	r3, #1
 80035cc:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	693a      	ldr	r2, [r7, #16]
 80035d2:	429a      	cmp	r2, r3
 80035d4:	d8d9      	bhi.n	800358a <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f06f 0212 	mvn.w	r2, #18
 80035de:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035e4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80035f6:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80035fa:	d115      	bne.n	8003628 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003600:	2b00      	cmp	r3, #0
 8003602:	d111      	bne.n	8003628 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003608:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003614:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003618:	2b00      	cmp	r3, #0
 800361a:	d105      	bne.n	8003628 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003620:	f043 0201 	orr.w	r2, r3, #1
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003628:	2300      	movs	r3, #0
}
 800362a:	4618      	mov	r0, r3
 800362c:	371c      	adds	r7, #28
 800362e:	46bd      	mov	sp, r7
 8003630:	bd90      	pop	{r4, r7, pc}
 8003632:	bf00      	nop
 8003634:	20000018 	.word	0x20000018
 8003638:	24924924 	.word	0x24924924
 800363c:	00924924 	.word	0x00924924
 8003640:	12492492 	.word	0x12492492
 8003644:	00492492 	.word	0x00492492
 8003648:	00249249 	.word	0x00249249

0800364c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800364c:	b480      	push	{r7}
 800364e:	b083      	sub	sp, #12
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800365a:	4618      	mov	r0, r3
 800365c:	370c      	adds	r7, #12
 800365e:	46bd      	mov	sp, r7
 8003660:	bc80      	pop	{r7}
 8003662:	4770      	bx	lr

08003664 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8003664:	b480      	push	{r7}
 8003666:	b085      	sub	sp, #20
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
 800366c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800366e:	2300      	movs	r3, #0
 8003670:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8003672:	2300      	movs	r3, #0
 8003674:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800367c:	2b01      	cmp	r3, #1
 800367e:	d101      	bne.n	8003684 <HAL_ADC_ConfigChannel+0x20>
 8003680:	2302      	movs	r3, #2
 8003682:	e0dc      	b.n	800383e <HAL_ADC_ConfigChannel+0x1da>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2201      	movs	r2, #1
 8003688:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	2b06      	cmp	r3, #6
 8003692:	d81c      	bhi.n	80036ce <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	685a      	ldr	r2, [r3, #4]
 800369e:	4613      	mov	r3, r2
 80036a0:	009b      	lsls	r3, r3, #2
 80036a2:	4413      	add	r3, r2
 80036a4:	3b05      	subs	r3, #5
 80036a6:	221f      	movs	r2, #31
 80036a8:	fa02 f303 	lsl.w	r3, r2, r3
 80036ac:	43db      	mvns	r3, r3
 80036ae:	4019      	ands	r1, r3
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	6818      	ldr	r0, [r3, #0]
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	685a      	ldr	r2, [r3, #4]
 80036b8:	4613      	mov	r3, r2
 80036ba:	009b      	lsls	r3, r3, #2
 80036bc:	4413      	add	r3, r2
 80036be:	3b05      	subs	r3, #5
 80036c0:	fa00 f203 	lsl.w	r2, r0, r3
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	430a      	orrs	r2, r1
 80036ca:	635a      	str	r2, [r3, #52]	@ 0x34
 80036cc:	e03c      	b.n	8003748 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	2b0c      	cmp	r3, #12
 80036d4:	d81c      	bhi.n	8003710 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	685a      	ldr	r2, [r3, #4]
 80036e0:	4613      	mov	r3, r2
 80036e2:	009b      	lsls	r3, r3, #2
 80036e4:	4413      	add	r3, r2
 80036e6:	3b23      	subs	r3, #35	@ 0x23
 80036e8:	221f      	movs	r2, #31
 80036ea:	fa02 f303 	lsl.w	r3, r2, r3
 80036ee:	43db      	mvns	r3, r3
 80036f0:	4019      	ands	r1, r3
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	6818      	ldr	r0, [r3, #0]
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	685a      	ldr	r2, [r3, #4]
 80036fa:	4613      	mov	r3, r2
 80036fc:	009b      	lsls	r3, r3, #2
 80036fe:	4413      	add	r3, r2
 8003700:	3b23      	subs	r3, #35	@ 0x23
 8003702:	fa00 f203 	lsl.w	r2, r0, r3
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	430a      	orrs	r2, r1
 800370c:	631a      	str	r2, [r3, #48]	@ 0x30
 800370e:	e01b      	b.n	8003748 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	685a      	ldr	r2, [r3, #4]
 800371a:	4613      	mov	r3, r2
 800371c:	009b      	lsls	r3, r3, #2
 800371e:	4413      	add	r3, r2
 8003720:	3b41      	subs	r3, #65	@ 0x41
 8003722:	221f      	movs	r2, #31
 8003724:	fa02 f303 	lsl.w	r3, r2, r3
 8003728:	43db      	mvns	r3, r3
 800372a:	4019      	ands	r1, r3
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	6818      	ldr	r0, [r3, #0]
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	685a      	ldr	r2, [r3, #4]
 8003734:	4613      	mov	r3, r2
 8003736:	009b      	lsls	r3, r3, #2
 8003738:	4413      	add	r3, r2
 800373a:	3b41      	subs	r3, #65	@ 0x41
 800373c:	fa00 f203 	lsl.w	r2, r0, r3
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	430a      	orrs	r2, r1
 8003746:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	2b09      	cmp	r3, #9
 800374e:	d91c      	bls.n	800378a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	68d9      	ldr	r1, [r3, #12]
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	681a      	ldr	r2, [r3, #0]
 800375a:	4613      	mov	r3, r2
 800375c:	005b      	lsls	r3, r3, #1
 800375e:	4413      	add	r3, r2
 8003760:	3b1e      	subs	r3, #30
 8003762:	2207      	movs	r2, #7
 8003764:	fa02 f303 	lsl.w	r3, r2, r3
 8003768:	43db      	mvns	r3, r3
 800376a:	4019      	ands	r1, r3
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	6898      	ldr	r0, [r3, #8]
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	681a      	ldr	r2, [r3, #0]
 8003774:	4613      	mov	r3, r2
 8003776:	005b      	lsls	r3, r3, #1
 8003778:	4413      	add	r3, r2
 800377a:	3b1e      	subs	r3, #30
 800377c:	fa00 f203 	lsl.w	r2, r0, r3
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	430a      	orrs	r2, r1
 8003786:	60da      	str	r2, [r3, #12]
 8003788:	e019      	b.n	80037be <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	6919      	ldr	r1, [r3, #16]
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	681a      	ldr	r2, [r3, #0]
 8003794:	4613      	mov	r3, r2
 8003796:	005b      	lsls	r3, r3, #1
 8003798:	4413      	add	r3, r2
 800379a:	2207      	movs	r2, #7
 800379c:	fa02 f303 	lsl.w	r3, r2, r3
 80037a0:	43db      	mvns	r3, r3
 80037a2:	4019      	ands	r1, r3
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	6898      	ldr	r0, [r3, #8]
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	681a      	ldr	r2, [r3, #0]
 80037ac:	4613      	mov	r3, r2
 80037ae:	005b      	lsls	r3, r3, #1
 80037b0:	4413      	add	r3, r2
 80037b2:	fa00 f203 	lsl.w	r2, r0, r3
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	430a      	orrs	r2, r1
 80037bc:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	2b10      	cmp	r3, #16
 80037c4:	d003      	beq.n	80037ce <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80037ca:	2b11      	cmp	r3, #17
 80037cc:	d132      	bne.n	8003834 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a1d      	ldr	r2, [pc, #116]	@ (8003848 <HAL_ADC_ConfigChannel+0x1e4>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d125      	bne.n	8003824 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	689b      	ldr	r3, [r3, #8]
 80037de:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d126      	bne.n	8003834 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	689a      	ldr	r2, [r3, #8]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80037f4:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	2b10      	cmp	r3, #16
 80037fc:	d11a      	bne.n	8003834 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80037fe:	4b13      	ldr	r3, [pc, #76]	@ (800384c <HAL_ADC_ConfigChannel+0x1e8>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a13      	ldr	r2, [pc, #76]	@ (8003850 <HAL_ADC_ConfigChannel+0x1ec>)
 8003804:	fba2 2303 	umull	r2, r3, r2, r3
 8003808:	0c9a      	lsrs	r2, r3, #18
 800380a:	4613      	mov	r3, r2
 800380c:	009b      	lsls	r3, r3, #2
 800380e:	4413      	add	r3, r2
 8003810:	005b      	lsls	r3, r3, #1
 8003812:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003814:	e002      	b.n	800381c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8003816:	68bb      	ldr	r3, [r7, #8]
 8003818:	3b01      	subs	r3, #1
 800381a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d1f9      	bne.n	8003816 <HAL_ADC_ConfigChannel+0x1b2>
 8003822:	e007      	b.n	8003834 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003828:	f043 0220 	orr.w	r2, r3, #32
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2200      	movs	r2, #0
 8003838:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800383c:	7bfb      	ldrb	r3, [r7, #15]
}
 800383e:	4618      	mov	r0, r3
 8003840:	3714      	adds	r7, #20
 8003842:	46bd      	mov	sp, r7
 8003844:	bc80      	pop	{r7}
 8003846:	4770      	bx	lr
 8003848:	40012400 	.word	0x40012400
 800384c:	20000018 	.word	0x20000018
 8003850:	431bde83 	.word	0x431bde83

08003854 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b084      	sub	sp, #16
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800385c:	2300      	movs	r3, #0
 800385e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003860:	2300      	movs	r3, #0
 8003862:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	689b      	ldr	r3, [r3, #8]
 800386a:	f003 0301 	and.w	r3, r3, #1
 800386e:	2b01      	cmp	r3, #1
 8003870:	d040      	beq.n	80038f4 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	689a      	ldr	r2, [r3, #8]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f042 0201 	orr.w	r2, r2, #1
 8003880:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003882:	4b1f      	ldr	r3, [pc, #124]	@ (8003900 <ADC_Enable+0xac>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4a1f      	ldr	r2, [pc, #124]	@ (8003904 <ADC_Enable+0xb0>)
 8003888:	fba2 2303 	umull	r2, r3, r2, r3
 800388c:	0c9b      	lsrs	r3, r3, #18
 800388e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003890:	e002      	b.n	8003898 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8003892:	68bb      	ldr	r3, [r7, #8]
 8003894:	3b01      	subs	r3, #1
 8003896:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003898:	68bb      	ldr	r3, [r7, #8]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d1f9      	bne.n	8003892 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800389e:	f7ff fc1b 	bl	80030d8 <HAL_GetTick>
 80038a2:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80038a4:	e01f      	b.n	80038e6 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80038a6:	f7ff fc17 	bl	80030d8 <HAL_GetTick>
 80038aa:	4602      	mov	r2, r0
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	1ad3      	subs	r3, r2, r3
 80038b0:	2b02      	cmp	r3, #2
 80038b2:	d918      	bls.n	80038e6 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	689b      	ldr	r3, [r3, #8]
 80038ba:	f003 0301 	and.w	r3, r3, #1
 80038be:	2b01      	cmp	r3, #1
 80038c0:	d011      	beq.n	80038e6 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038c6:	f043 0210 	orr.w	r2, r3, #16
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038d2:	f043 0201 	orr.w	r2, r3, #1
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2200      	movs	r2, #0
 80038de:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	e007      	b.n	80038f6 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	f003 0301 	and.w	r3, r3, #1
 80038f0:	2b01      	cmp	r3, #1
 80038f2:	d1d8      	bne.n	80038a6 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80038f4:	2300      	movs	r3, #0
}
 80038f6:	4618      	mov	r0, r3
 80038f8:	3710      	adds	r7, #16
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}
 80038fe:	bf00      	nop
 8003900:	20000018 	.word	0x20000018
 8003904:	431bde83 	.word	0x431bde83

08003908 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b084      	sub	sp, #16
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003910:	2300      	movs	r3, #0
 8003912:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	f003 0301 	and.w	r3, r3, #1
 800391e:	2b01      	cmp	r3, #1
 8003920:	d12e      	bne.n	8003980 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	689a      	ldr	r2, [r3, #8]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f022 0201 	bic.w	r2, r2, #1
 8003930:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003932:	f7ff fbd1 	bl	80030d8 <HAL_GetTick>
 8003936:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003938:	e01b      	b.n	8003972 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800393a:	f7ff fbcd 	bl	80030d8 <HAL_GetTick>
 800393e:	4602      	mov	r2, r0
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	1ad3      	subs	r3, r2, r3
 8003944:	2b02      	cmp	r3, #2
 8003946:	d914      	bls.n	8003972 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	689b      	ldr	r3, [r3, #8]
 800394e:	f003 0301 	and.w	r3, r3, #1
 8003952:	2b01      	cmp	r3, #1
 8003954:	d10d      	bne.n	8003972 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800395a:	f043 0210 	orr.w	r2, r3, #16
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003966:	f043 0201 	orr.w	r2, r3, #1
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	e007      	b.n	8003982 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	689b      	ldr	r3, [r3, #8]
 8003978:	f003 0301 	and.w	r3, r3, #1
 800397c:	2b01      	cmp	r3, #1
 800397e:	d0dc      	beq.n	800393a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003980:	2300      	movs	r3, #0
}
 8003982:	4618      	mov	r0, r3
 8003984:	3710      	adds	r7, #16
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}
	...

0800398c <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 800398c:	b590      	push	{r4, r7, lr}
 800398e:	b087      	sub	sp, #28
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003994:	2300      	movs	r3, #0
 8003996:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8003998:	2300      	movs	r3, #0
 800399a:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80039a2:	2b01      	cmp	r3, #1
 80039a4:	d101      	bne.n	80039aa <HAL_ADCEx_Calibration_Start+0x1e>
 80039a6:	2302      	movs	r3, #2
 80039a8:	e097      	b.n	8003ada <HAL_ADCEx_Calibration_Start+0x14e>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2201      	movs	r2, #1
 80039ae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	f7ff ffa8 	bl	8003908 <ADC_ConversionStop_Disable>
 80039b8:	4603      	mov	r3, r0
 80039ba:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 80039bc:	6878      	ldr	r0, [r7, #4]
 80039be:	f7ff ff49 	bl	8003854 <ADC_Enable>
 80039c2:	4603      	mov	r3, r0
 80039c4:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 80039c6:	7dfb      	ldrb	r3, [r7, #23]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	f040 8081 	bne.w	8003ad0 <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039d2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80039d6:	f023 0302 	bic.w	r3, r3, #2
 80039da:	f043 0202 	orr.w	r2, r3, #2
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80039e2:	4b40      	ldr	r3, [pc, #256]	@ (8003ae4 <HAL_ADCEx_Calibration_Start+0x158>)
 80039e4:	681c      	ldr	r4, [r3, #0]
 80039e6:	2002      	movs	r0, #2
 80039e8:	f003 ffb8 	bl	800795c <HAL_RCCEx_GetPeriphCLKFreq>
 80039ec:	4603      	mov	r3, r0
 80039ee:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 80039f2:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 80039f4:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 80039f6:	e002      	b.n	80039fe <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	3b01      	subs	r3, #1
 80039fc:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d1f9      	bne.n	80039f8 <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	689a      	ldr	r2, [r3, #8]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f042 0208 	orr.w	r2, r2, #8
 8003a12:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8003a14:	f7ff fb60 	bl	80030d8 <HAL_GetTick>
 8003a18:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8003a1a:	e01b      	b.n	8003a54 <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8003a1c:	f7ff fb5c 	bl	80030d8 <HAL_GetTick>
 8003a20:	4602      	mov	r2, r0
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	1ad3      	subs	r3, r2, r3
 8003a26:	2b0a      	cmp	r3, #10
 8003a28:	d914      	bls.n	8003a54 <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	689b      	ldr	r3, [r3, #8]
 8003a30:	f003 0308 	and.w	r3, r3, #8
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d00d      	beq.n	8003a54 <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a3c:	f023 0312 	bic.w	r3, r3, #18
 8003a40:	f043 0210 	orr.w	r2, r3, #16
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8003a50:	2301      	movs	r3, #1
 8003a52:	e042      	b.n	8003ada <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	689b      	ldr	r3, [r3, #8]
 8003a5a:	f003 0308 	and.w	r3, r3, #8
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d1dc      	bne.n	8003a1c <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	689a      	ldr	r2, [r3, #8]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f042 0204 	orr.w	r2, r2, #4
 8003a70:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8003a72:	f7ff fb31 	bl	80030d8 <HAL_GetTick>
 8003a76:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8003a78:	e01b      	b.n	8003ab2 <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8003a7a:	f7ff fb2d 	bl	80030d8 <HAL_GetTick>
 8003a7e:	4602      	mov	r2, r0
 8003a80:	693b      	ldr	r3, [r7, #16]
 8003a82:	1ad3      	subs	r3, r2, r3
 8003a84:	2b0a      	cmp	r3, #10
 8003a86:	d914      	bls.n	8003ab2 <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	689b      	ldr	r3, [r3, #8]
 8003a8e:	f003 0304 	and.w	r3, r3, #4
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d00d      	beq.n	8003ab2 <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a9a:	f023 0312 	bic.w	r3, r3, #18
 8003a9e:	f043 0210 	orr.w	r2, r3, #16
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	e013      	b.n	8003ada <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	689b      	ldr	r3, [r3, #8]
 8003ab8:	f003 0304 	and.w	r3, r3, #4
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d1dc      	bne.n	8003a7a <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ac4:	f023 0303 	bic.w	r3, r3, #3
 8003ac8:	f043 0201 	orr.w	r2, r3, #1
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003ad8:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ada:	4618      	mov	r0, r3
 8003adc:	371c      	adds	r7, #28
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bd90      	pop	{r4, r7, pc}
 8003ae2:	bf00      	nop
 8003ae4:	20000018 	.word	0x20000018

08003ae8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	b085      	sub	sp, #20
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	f003 0307 	and.w	r3, r3, #7
 8003af6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003af8:	4b0c      	ldr	r3, [pc, #48]	@ (8003b2c <__NVIC_SetPriorityGrouping+0x44>)
 8003afa:	68db      	ldr	r3, [r3, #12]
 8003afc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003afe:	68ba      	ldr	r2, [r7, #8]
 8003b00:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003b04:	4013      	ands	r3, r2
 8003b06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003b10:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003b14:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003b1a:	4a04      	ldr	r2, [pc, #16]	@ (8003b2c <__NVIC_SetPriorityGrouping+0x44>)
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	60d3      	str	r3, [r2, #12]
}
 8003b20:	bf00      	nop
 8003b22:	3714      	adds	r7, #20
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bc80      	pop	{r7}
 8003b28:	4770      	bx	lr
 8003b2a:	bf00      	nop
 8003b2c:	e000ed00 	.word	0xe000ed00

08003b30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003b30:	b480      	push	{r7}
 8003b32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003b34:	4b04      	ldr	r3, [pc, #16]	@ (8003b48 <__NVIC_GetPriorityGrouping+0x18>)
 8003b36:	68db      	ldr	r3, [r3, #12]
 8003b38:	0a1b      	lsrs	r3, r3, #8
 8003b3a:	f003 0307 	and.w	r3, r3, #7
}
 8003b3e:	4618      	mov	r0, r3
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bc80      	pop	{r7}
 8003b44:	4770      	bx	lr
 8003b46:	bf00      	nop
 8003b48:	e000ed00 	.word	0xe000ed00

08003b4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b083      	sub	sp, #12
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	4603      	mov	r3, r0
 8003b54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	db0b      	blt.n	8003b76 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b5e:	79fb      	ldrb	r3, [r7, #7]
 8003b60:	f003 021f 	and.w	r2, r3, #31
 8003b64:	4906      	ldr	r1, [pc, #24]	@ (8003b80 <__NVIC_EnableIRQ+0x34>)
 8003b66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b6a:	095b      	lsrs	r3, r3, #5
 8003b6c:	2001      	movs	r0, #1
 8003b6e:	fa00 f202 	lsl.w	r2, r0, r2
 8003b72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003b76:	bf00      	nop
 8003b78:	370c      	adds	r7, #12
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bc80      	pop	{r7}
 8003b7e:	4770      	bx	lr
 8003b80:	e000e100 	.word	0xe000e100

08003b84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003b84:	b480      	push	{r7}
 8003b86:	b083      	sub	sp, #12
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	6039      	str	r1, [r7, #0]
 8003b8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	db0a      	blt.n	8003bae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	b2da      	uxtb	r2, r3
 8003b9c:	490c      	ldr	r1, [pc, #48]	@ (8003bd0 <__NVIC_SetPriority+0x4c>)
 8003b9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ba2:	0112      	lsls	r2, r2, #4
 8003ba4:	b2d2      	uxtb	r2, r2
 8003ba6:	440b      	add	r3, r1
 8003ba8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003bac:	e00a      	b.n	8003bc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	b2da      	uxtb	r2, r3
 8003bb2:	4908      	ldr	r1, [pc, #32]	@ (8003bd4 <__NVIC_SetPriority+0x50>)
 8003bb4:	79fb      	ldrb	r3, [r7, #7]
 8003bb6:	f003 030f 	and.w	r3, r3, #15
 8003bba:	3b04      	subs	r3, #4
 8003bbc:	0112      	lsls	r2, r2, #4
 8003bbe:	b2d2      	uxtb	r2, r2
 8003bc0:	440b      	add	r3, r1
 8003bc2:	761a      	strb	r2, [r3, #24]
}
 8003bc4:	bf00      	nop
 8003bc6:	370c      	adds	r7, #12
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bc80      	pop	{r7}
 8003bcc:	4770      	bx	lr
 8003bce:	bf00      	nop
 8003bd0:	e000e100 	.word	0xe000e100
 8003bd4:	e000ed00 	.word	0xe000ed00

08003bd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b089      	sub	sp, #36	@ 0x24
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	60f8      	str	r0, [r7, #12]
 8003be0:	60b9      	str	r1, [r7, #8]
 8003be2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	f003 0307 	and.w	r3, r3, #7
 8003bea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003bec:	69fb      	ldr	r3, [r7, #28]
 8003bee:	f1c3 0307 	rsb	r3, r3, #7
 8003bf2:	2b04      	cmp	r3, #4
 8003bf4:	bf28      	it	cs
 8003bf6:	2304      	movcs	r3, #4
 8003bf8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003bfa:	69fb      	ldr	r3, [r7, #28]
 8003bfc:	3304      	adds	r3, #4
 8003bfe:	2b06      	cmp	r3, #6
 8003c00:	d902      	bls.n	8003c08 <NVIC_EncodePriority+0x30>
 8003c02:	69fb      	ldr	r3, [r7, #28]
 8003c04:	3b03      	subs	r3, #3
 8003c06:	e000      	b.n	8003c0a <NVIC_EncodePriority+0x32>
 8003c08:	2300      	movs	r3, #0
 8003c0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c0c:	f04f 32ff 	mov.w	r2, #4294967295
 8003c10:	69bb      	ldr	r3, [r7, #24]
 8003c12:	fa02 f303 	lsl.w	r3, r2, r3
 8003c16:	43da      	mvns	r2, r3
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	401a      	ands	r2, r3
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003c20:	f04f 31ff 	mov.w	r1, #4294967295
 8003c24:	697b      	ldr	r3, [r7, #20]
 8003c26:	fa01 f303 	lsl.w	r3, r1, r3
 8003c2a:	43d9      	mvns	r1, r3
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c30:	4313      	orrs	r3, r2
         );
}
 8003c32:	4618      	mov	r0, r3
 8003c34:	3724      	adds	r7, #36	@ 0x24
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bc80      	pop	{r7}
 8003c3a:	4770      	bx	lr

08003c3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b082      	sub	sp, #8
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	3b01      	subs	r3, #1
 8003c48:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003c4c:	d301      	bcc.n	8003c52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003c4e:	2301      	movs	r3, #1
 8003c50:	e00f      	b.n	8003c72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003c52:	4a0a      	ldr	r2, [pc, #40]	@ (8003c7c <SysTick_Config+0x40>)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	3b01      	subs	r3, #1
 8003c58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003c5a:	210f      	movs	r1, #15
 8003c5c:	f04f 30ff 	mov.w	r0, #4294967295
 8003c60:	f7ff ff90 	bl	8003b84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003c64:	4b05      	ldr	r3, [pc, #20]	@ (8003c7c <SysTick_Config+0x40>)
 8003c66:	2200      	movs	r2, #0
 8003c68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003c6a:	4b04      	ldr	r3, [pc, #16]	@ (8003c7c <SysTick_Config+0x40>)
 8003c6c:	2207      	movs	r2, #7
 8003c6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003c70:	2300      	movs	r3, #0
}
 8003c72:	4618      	mov	r0, r3
 8003c74:	3708      	adds	r7, #8
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bd80      	pop	{r7, pc}
 8003c7a:	bf00      	nop
 8003c7c:	e000e010 	.word	0xe000e010

08003c80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b082      	sub	sp, #8
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003c88:	6878      	ldr	r0, [r7, #4]
 8003c8a:	f7ff ff2d 	bl	8003ae8 <__NVIC_SetPriorityGrouping>
}
 8003c8e:	bf00      	nop
 8003c90:	3708      	adds	r7, #8
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bd80      	pop	{r7, pc}

08003c96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003c96:	b580      	push	{r7, lr}
 8003c98:	b086      	sub	sp, #24
 8003c9a:	af00      	add	r7, sp, #0
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	60b9      	str	r1, [r7, #8]
 8003ca0:	607a      	str	r2, [r7, #4]
 8003ca2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003ca8:	f7ff ff42 	bl	8003b30 <__NVIC_GetPriorityGrouping>
 8003cac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003cae:	687a      	ldr	r2, [r7, #4]
 8003cb0:	68b9      	ldr	r1, [r7, #8]
 8003cb2:	6978      	ldr	r0, [r7, #20]
 8003cb4:	f7ff ff90 	bl	8003bd8 <NVIC_EncodePriority>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003cbe:	4611      	mov	r1, r2
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	f7ff ff5f 	bl	8003b84 <__NVIC_SetPriority>
}
 8003cc6:	bf00      	nop
 8003cc8:	3718      	adds	r7, #24
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd80      	pop	{r7, pc}

08003cce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003cce:	b580      	push	{r7, lr}
 8003cd0:	b082      	sub	sp, #8
 8003cd2:	af00      	add	r7, sp, #0
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003cd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cdc:	4618      	mov	r0, r3
 8003cde:	f7ff ff35 	bl	8003b4c <__NVIC_EnableIRQ>
}
 8003ce2:	bf00      	nop
 8003ce4:	3708      	adds	r7, #8
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}

08003cea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003cea:	b580      	push	{r7, lr}
 8003cec:	b082      	sub	sp, #8
 8003cee:	af00      	add	r7, sp, #0
 8003cf0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003cf2:	6878      	ldr	r0, [r7, #4]
 8003cf4:	f7ff ffa2 	bl	8003c3c <SysTick_Config>
 8003cf8:	4603      	mov	r3, r0
}
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	3708      	adds	r7, #8
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}
	...

08003d04 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003d04:	b480      	push	{r7}
 8003d06:	b085      	sub	sp, #20
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d101      	bne.n	8003d1a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003d16:	2301      	movs	r3, #1
 8003d18:	e043      	b.n	8003da2 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	461a      	mov	r2, r3
 8003d20:	4b22      	ldr	r3, [pc, #136]	@ (8003dac <HAL_DMA_Init+0xa8>)
 8003d22:	4413      	add	r3, r2
 8003d24:	4a22      	ldr	r2, [pc, #136]	@ (8003db0 <HAL_DMA_Init+0xac>)
 8003d26:	fba2 2303 	umull	r2, r3, r2, r3
 8003d2a:	091b      	lsrs	r3, r3, #4
 8003d2c:	009a      	lsls	r2, r3, #2
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	4a1f      	ldr	r2, [pc, #124]	@ (8003db4 <HAL_DMA_Init+0xb0>)
 8003d36:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2202      	movs	r2, #2
 8003d3c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003d4e:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8003d52:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003d5c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	68db      	ldr	r3, [r3, #12]
 8003d62:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d68:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	695b      	ldr	r3, [r3, #20]
 8003d6e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d74:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	69db      	ldr	r3, [r3, #28]
 8003d7a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003d7c:	68fa      	ldr	r2, [r7, #12]
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	68fa      	ldr	r2, [r7, #12]
 8003d88:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2201      	movs	r2, #1
 8003d94:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003da0:	2300      	movs	r3, #0
}
 8003da2:	4618      	mov	r0, r3
 8003da4:	3714      	adds	r7, #20
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bc80      	pop	{r7}
 8003daa:	4770      	bx	lr
 8003dac:	bffdfff8 	.word	0xbffdfff8
 8003db0:	cccccccd 	.word	0xcccccccd
 8003db4:	40020000 	.word	0x40020000

08003db8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b084      	sub	sp, #16
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003dca:	b2db      	uxtb	r3, r3
 8003dcc:	2b02      	cmp	r3, #2
 8003dce:	d005      	beq.n	8003ddc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2204      	movs	r2, #4
 8003dd4:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	73fb      	strb	r3, [r7, #15]
 8003dda:	e051      	b.n	8003e80 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	681a      	ldr	r2, [r3, #0]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f022 020e 	bic.w	r2, r2, #14
 8003dea:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	681a      	ldr	r2, [r3, #0]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f022 0201 	bic.w	r2, r2, #1
 8003dfa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a22      	ldr	r2, [pc, #136]	@ (8003e8c <HAL_DMA_Abort_IT+0xd4>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d029      	beq.n	8003e5a <HAL_DMA_Abort_IT+0xa2>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a21      	ldr	r2, [pc, #132]	@ (8003e90 <HAL_DMA_Abort_IT+0xd8>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d022      	beq.n	8003e56 <HAL_DMA_Abort_IT+0x9e>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a1f      	ldr	r2, [pc, #124]	@ (8003e94 <HAL_DMA_Abort_IT+0xdc>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d01a      	beq.n	8003e50 <HAL_DMA_Abort_IT+0x98>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a1e      	ldr	r2, [pc, #120]	@ (8003e98 <HAL_DMA_Abort_IT+0xe0>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d012      	beq.n	8003e4a <HAL_DMA_Abort_IT+0x92>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a1c      	ldr	r2, [pc, #112]	@ (8003e9c <HAL_DMA_Abort_IT+0xe4>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d00a      	beq.n	8003e44 <HAL_DMA_Abort_IT+0x8c>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4a1b      	ldr	r2, [pc, #108]	@ (8003ea0 <HAL_DMA_Abort_IT+0xe8>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d102      	bne.n	8003e3e <HAL_DMA_Abort_IT+0x86>
 8003e38:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8003e3c:	e00e      	b.n	8003e5c <HAL_DMA_Abort_IT+0xa4>
 8003e3e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003e42:	e00b      	b.n	8003e5c <HAL_DMA_Abort_IT+0xa4>
 8003e44:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003e48:	e008      	b.n	8003e5c <HAL_DMA_Abort_IT+0xa4>
 8003e4a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003e4e:	e005      	b.n	8003e5c <HAL_DMA_Abort_IT+0xa4>
 8003e50:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003e54:	e002      	b.n	8003e5c <HAL_DMA_Abort_IT+0xa4>
 8003e56:	2310      	movs	r3, #16
 8003e58:	e000      	b.n	8003e5c <HAL_DMA_Abort_IT+0xa4>
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	4a11      	ldr	r2, [pc, #68]	@ (8003ea4 <HAL_DMA_Abort_IT+0xec>)
 8003e5e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2201      	movs	r2, #1
 8003e64:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d003      	beq.n	8003e80 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e7c:	6878      	ldr	r0, [r7, #4]
 8003e7e:	4798      	blx	r3
    } 
  }
  return status;
 8003e80:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	3710      	adds	r7, #16
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}
 8003e8a:	bf00      	nop
 8003e8c:	40020008 	.word	0x40020008
 8003e90:	4002001c 	.word	0x4002001c
 8003e94:	40020030 	.word	0x40020030
 8003e98:	40020044 	.word	0x40020044
 8003e9c:	40020058 	.word	0x40020058
 8003ea0:	4002006c 	.word	0x4002006c
 8003ea4:	40020000 	.word	0x40020000

08003ea8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b084      	sub	sp, #16
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ec4:	2204      	movs	r2, #4
 8003ec6:	409a      	lsls	r2, r3
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	4013      	ands	r3, r2
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d04f      	beq.n	8003f70 <HAL_DMA_IRQHandler+0xc8>
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	f003 0304 	and.w	r3, r3, #4
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d04a      	beq.n	8003f70 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f003 0320 	and.w	r3, r3, #32
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d107      	bne.n	8003ef8 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	681a      	ldr	r2, [r3, #0]
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f022 0204 	bic.w	r2, r2, #4
 8003ef6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a66      	ldr	r2, [pc, #408]	@ (8004098 <HAL_DMA_IRQHandler+0x1f0>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d029      	beq.n	8003f56 <HAL_DMA_IRQHandler+0xae>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a65      	ldr	r2, [pc, #404]	@ (800409c <HAL_DMA_IRQHandler+0x1f4>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d022      	beq.n	8003f52 <HAL_DMA_IRQHandler+0xaa>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a63      	ldr	r2, [pc, #396]	@ (80040a0 <HAL_DMA_IRQHandler+0x1f8>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d01a      	beq.n	8003f4c <HAL_DMA_IRQHandler+0xa4>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a62      	ldr	r2, [pc, #392]	@ (80040a4 <HAL_DMA_IRQHandler+0x1fc>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d012      	beq.n	8003f46 <HAL_DMA_IRQHandler+0x9e>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a60      	ldr	r2, [pc, #384]	@ (80040a8 <HAL_DMA_IRQHandler+0x200>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d00a      	beq.n	8003f40 <HAL_DMA_IRQHandler+0x98>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a5f      	ldr	r2, [pc, #380]	@ (80040ac <HAL_DMA_IRQHandler+0x204>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d102      	bne.n	8003f3a <HAL_DMA_IRQHandler+0x92>
 8003f34:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003f38:	e00e      	b.n	8003f58 <HAL_DMA_IRQHandler+0xb0>
 8003f3a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8003f3e:	e00b      	b.n	8003f58 <HAL_DMA_IRQHandler+0xb0>
 8003f40:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8003f44:	e008      	b.n	8003f58 <HAL_DMA_IRQHandler+0xb0>
 8003f46:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003f4a:	e005      	b.n	8003f58 <HAL_DMA_IRQHandler+0xb0>
 8003f4c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003f50:	e002      	b.n	8003f58 <HAL_DMA_IRQHandler+0xb0>
 8003f52:	2340      	movs	r3, #64	@ 0x40
 8003f54:	e000      	b.n	8003f58 <HAL_DMA_IRQHandler+0xb0>
 8003f56:	2304      	movs	r3, #4
 8003f58:	4a55      	ldr	r2, [pc, #340]	@ (80040b0 <HAL_DMA_IRQHandler+0x208>)
 8003f5a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	f000 8094 	beq.w	800408e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f6a:	6878      	ldr	r0, [r7, #4]
 8003f6c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8003f6e:	e08e      	b.n	800408e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f74:	2202      	movs	r2, #2
 8003f76:	409a      	lsls	r2, r3
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	4013      	ands	r3, r2
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d056      	beq.n	800402e <HAL_DMA_IRQHandler+0x186>
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	f003 0302 	and.w	r3, r3, #2
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d051      	beq.n	800402e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f003 0320 	and.w	r3, r3, #32
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d10b      	bne.n	8003fb0 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	681a      	ldr	r2, [r3, #0]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f022 020a 	bic.w	r2, r2, #10
 8003fa6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2201      	movs	r2, #1
 8003fac:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a38      	ldr	r2, [pc, #224]	@ (8004098 <HAL_DMA_IRQHandler+0x1f0>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d029      	beq.n	800400e <HAL_DMA_IRQHandler+0x166>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a37      	ldr	r2, [pc, #220]	@ (800409c <HAL_DMA_IRQHandler+0x1f4>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d022      	beq.n	800400a <HAL_DMA_IRQHandler+0x162>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a35      	ldr	r2, [pc, #212]	@ (80040a0 <HAL_DMA_IRQHandler+0x1f8>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d01a      	beq.n	8004004 <HAL_DMA_IRQHandler+0x15c>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a34      	ldr	r2, [pc, #208]	@ (80040a4 <HAL_DMA_IRQHandler+0x1fc>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d012      	beq.n	8003ffe <HAL_DMA_IRQHandler+0x156>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a32      	ldr	r2, [pc, #200]	@ (80040a8 <HAL_DMA_IRQHandler+0x200>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d00a      	beq.n	8003ff8 <HAL_DMA_IRQHandler+0x150>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a31      	ldr	r2, [pc, #196]	@ (80040ac <HAL_DMA_IRQHandler+0x204>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d102      	bne.n	8003ff2 <HAL_DMA_IRQHandler+0x14a>
 8003fec:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8003ff0:	e00e      	b.n	8004010 <HAL_DMA_IRQHandler+0x168>
 8003ff2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003ff6:	e00b      	b.n	8004010 <HAL_DMA_IRQHandler+0x168>
 8003ff8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003ffc:	e008      	b.n	8004010 <HAL_DMA_IRQHandler+0x168>
 8003ffe:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004002:	e005      	b.n	8004010 <HAL_DMA_IRQHandler+0x168>
 8004004:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004008:	e002      	b.n	8004010 <HAL_DMA_IRQHandler+0x168>
 800400a:	2320      	movs	r3, #32
 800400c:	e000      	b.n	8004010 <HAL_DMA_IRQHandler+0x168>
 800400e:	2302      	movs	r3, #2
 8004010:	4a27      	ldr	r2, [pc, #156]	@ (80040b0 <HAL_DMA_IRQHandler+0x208>)
 8004012:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2200      	movs	r2, #0
 8004018:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004020:	2b00      	cmp	r3, #0
 8004022:	d034      	beq.n	800408e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004028:	6878      	ldr	r0, [r7, #4]
 800402a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800402c:	e02f      	b.n	800408e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004032:	2208      	movs	r2, #8
 8004034:	409a      	lsls	r2, r3
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	4013      	ands	r3, r2
 800403a:	2b00      	cmp	r3, #0
 800403c:	d028      	beq.n	8004090 <HAL_DMA_IRQHandler+0x1e8>
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	f003 0308 	and.w	r3, r3, #8
 8004044:	2b00      	cmp	r3, #0
 8004046:	d023      	beq.n	8004090 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	681a      	ldr	r2, [r3, #0]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f022 020e 	bic.w	r2, r2, #14
 8004056:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004060:	2101      	movs	r1, #1
 8004062:	fa01 f202 	lsl.w	r2, r1, r2
 8004066:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2201      	movs	r2, #1
 800406c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2201      	movs	r2, #1
 8004072:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2200      	movs	r2, #0
 800407a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004082:	2b00      	cmp	r3, #0
 8004084:	d004      	beq.n	8004090 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800408a:	6878      	ldr	r0, [r7, #4]
 800408c:	4798      	blx	r3
    }
  }
  return;
 800408e:	bf00      	nop
 8004090:	bf00      	nop
}
 8004092:	3710      	adds	r7, #16
 8004094:	46bd      	mov	sp, r7
 8004096:	bd80      	pop	{r7, pc}
 8004098:	40020008 	.word	0x40020008
 800409c:	4002001c 	.word	0x4002001c
 80040a0:	40020030 	.word	0x40020030
 80040a4:	40020044 	.word	0x40020044
 80040a8:	40020058 	.word	0x40020058
 80040ac:	4002006c 	.word	0x4002006c
 80040b0:	40020000 	.word	0x40020000

080040b4 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b083      	sub	sp, #12
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80040c2:	b2db      	uxtb	r3, r3
}
 80040c4:	4618      	mov	r0, r3
 80040c6:	370c      	adds	r7, #12
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bc80      	pop	{r7}
 80040cc:	4770      	bx	lr
	...

080040d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80040d0:	b480      	push	{r7}
 80040d2:	b08b      	sub	sp, #44	@ 0x2c
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
 80040d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80040da:	2300      	movs	r3, #0
 80040dc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80040de:	2300      	movs	r3, #0
 80040e0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80040e2:	e169      	b.n	80043b8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80040e4:	2201      	movs	r2, #1
 80040e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040e8:	fa02 f303 	lsl.w	r3, r2, r3
 80040ec:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	69fa      	ldr	r2, [r7, #28]
 80040f4:	4013      	ands	r3, r2
 80040f6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80040f8:	69ba      	ldr	r2, [r7, #24]
 80040fa:	69fb      	ldr	r3, [r7, #28]
 80040fc:	429a      	cmp	r2, r3
 80040fe:	f040 8158 	bne.w	80043b2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	4a9a      	ldr	r2, [pc, #616]	@ (8004370 <HAL_GPIO_Init+0x2a0>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d05e      	beq.n	80041ca <HAL_GPIO_Init+0xfa>
 800410c:	4a98      	ldr	r2, [pc, #608]	@ (8004370 <HAL_GPIO_Init+0x2a0>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d875      	bhi.n	80041fe <HAL_GPIO_Init+0x12e>
 8004112:	4a98      	ldr	r2, [pc, #608]	@ (8004374 <HAL_GPIO_Init+0x2a4>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d058      	beq.n	80041ca <HAL_GPIO_Init+0xfa>
 8004118:	4a96      	ldr	r2, [pc, #600]	@ (8004374 <HAL_GPIO_Init+0x2a4>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d86f      	bhi.n	80041fe <HAL_GPIO_Init+0x12e>
 800411e:	4a96      	ldr	r2, [pc, #600]	@ (8004378 <HAL_GPIO_Init+0x2a8>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d052      	beq.n	80041ca <HAL_GPIO_Init+0xfa>
 8004124:	4a94      	ldr	r2, [pc, #592]	@ (8004378 <HAL_GPIO_Init+0x2a8>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d869      	bhi.n	80041fe <HAL_GPIO_Init+0x12e>
 800412a:	4a94      	ldr	r2, [pc, #592]	@ (800437c <HAL_GPIO_Init+0x2ac>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d04c      	beq.n	80041ca <HAL_GPIO_Init+0xfa>
 8004130:	4a92      	ldr	r2, [pc, #584]	@ (800437c <HAL_GPIO_Init+0x2ac>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d863      	bhi.n	80041fe <HAL_GPIO_Init+0x12e>
 8004136:	4a92      	ldr	r2, [pc, #584]	@ (8004380 <HAL_GPIO_Init+0x2b0>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d046      	beq.n	80041ca <HAL_GPIO_Init+0xfa>
 800413c:	4a90      	ldr	r2, [pc, #576]	@ (8004380 <HAL_GPIO_Init+0x2b0>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d85d      	bhi.n	80041fe <HAL_GPIO_Init+0x12e>
 8004142:	2b12      	cmp	r3, #18
 8004144:	d82a      	bhi.n	800419c <HAL_GPIO_Init+0xcc>
 8004146:	2b12      	cmp	r3, #18
 8004148:	d859      	bhi.n	80041fe <HAL_GPIO_Init+0x12e>
 800414a:	a201      	add	r2, pc, #4	@ (adr r2, 8004150 <HAL_GPIO_Init+0x80>)
 800414c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004150:	080041cb 	.word	0x080041cb
 8004154:	080041a5 	.word	0x080041a5
 8004158:	080041b7 	.word	0x080041b7
 800415c:	080041f9 	.word	0x080041f9
 8004160:	080041ff 	.word	0x080041ff
 8004164:	080041ff 	.word	0x080041ff
 8004168:	080041ff 	.word	0x080041ff
 800416c:	080041ff 	.word	0x080041ff
 8004170:	080041ff 	.word	0x080041ff
 8004174:	080041ff 	.word	0x080041ff
 8004178:	080041ff 	.word	0x080041ff
 800417c:	080041ff 	.word	0x080041ff
 8004180:	080041ff 	.word	0x080041ff
 8004184:	080041ff 	.word	0x080041ff
 8004188:	080041ff 	.word	0x080041ff
 800418c:	080041ff 	.word	0x080041ff
 8004190:	080041ff 	.word	0x080041ff
 8004194:	080041ad 	.word	0x080041ad
 8004198:	080041c1 	.word	0x080041c1
 800419c:	4a79      	ldr	r2, [pc, #484]	@ (8004384 <HAL_GPIO_Init+0x2b4>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d013      	beq.n	80041ca <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80041a2:	e02c      	b.n	80041fe <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	68db      	ldr	r3, [r3, #12]
 80041a8:	623b      	str	r3, [r7, #32]
          break;
 80041aa:	e029      	b.n	8004200 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	68db      	ldr	r3, [r3, #12]
 80041b0:	3304      	adds	r3, #4
 80041b2:	623b      	str	r3, [r7, #32]
          break;
 80041b4:	e024      	b.n	8004200 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	68db      	ldr	r3, [r3, #12]
 80041ba:	3308      	adds	r3, #8
 80041bc:	623b      	str	r3, [r7, #32]
          break;
 80041be:	e01f      	b.n	8004200 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	68db      	ldr	r3, [r3, #12]
 80041c4:	330c      	adds	r3, #12
 80041c6:	623b      	str	r3, [r7, #32]
          break;
 80041c8:	e01a      	b.n	8004200 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	689b      	ldr	r3, [r3, #8]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d102      	bne.n	80041d8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80041d2:	2304      	movs	r3, #4
 80041d4:	623b      	str	r3, [r7, #32]
          break;
 80041d6:	e013      	b.n	8004200 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	689b      	ldr	r3, [r3, #8]
 80041dc:	2b01      	cmp	r3, #1
 80041de:	d105      	bne.n	80041ec <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80041e0:	2308      	movs	r3, #8
 80041e2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	69fa      	ldr	r2, [r7, #28]
 80041e8:	611a      	str	r2, [r3, #16]
          break;
 80041ea:	e009      	b.n	8004200 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80041ec:	2308      	movs	r3, #8
 80041ee:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	69fa      	ldr	r2, [r7, #28]
 80041f4:	615a      	str	r2, [r3, #20]
          break;
 80041f6:	e003      	b.n	8004200 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80041f8:	2300      	movs	r3, #0
 80041fa:	623b      	str	r3, [r7, #32]
          break;
 80041fc:	e000      	b.n	8004200 <HAL_GPIO_Init+0x130>
          break;
 80041fe:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004200:	69bb      	ldr	r3, [r7, #24]
 8004202:	2bff      	cmp	r3, #255	@ 0xff
 8004204:	d801      	bhi.n	800420a <HAL_GPIO_Init+0x13a>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	e001      	b.n	800420e <HAL_GPIO_Init+0x13e>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	3304      	adds	r3, #4
 800420e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004210:	69bb      	ldr	r3, [r7, #24]
 8004212:	2bff      	cmp	r3, #255	@ 0xff
 8004214:	d802      	bhi.n	800421c <HAL_GPIO_Init+0x14c>
 8004216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004218:	009b      	lsls	r3, r3, #2
 800421a:	e002      	b.n	8004222 <HAL_GPIO_Init+0x152>
 800421c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800421e:	3b08      	subs	r3, #8
 8004220:	009b      	lsls	r3, r3, #2
 8004222:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004224:	697b      	ldr	r3, [r7, #20]
 8004226:	681a      	ldr	r2, [r3, #0]
 8004228:	210f      	movs	r1, #15
 800422a:	693b      	ldr	r3, [r7, #16]
 800422c:	fa01 f303 	lsl.w	r3, r1, r3
 8004230:	43db      	mvns	r3, r3
 8004232:	401a      	ands	r2, r3
 8004234:	6a39      	ldr	r1, [r7, #32]
 8004236:	693b      	ldr	r3, [r7, #16]
 8004238:	fa01 f303 	lsl.w	r3, r1, r3
 800423c:	431a      	orrs	r2, r3
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800424a:	2b00      	cmp	r3, #0
 800424c:	f000 80b1 	beq.w	80043b2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004250:	4b4d      	ldr	r3, [pc, #308]	@ (8004388 <HAL_GPIO_Init+0x2b8>)
 8004252:	699b      	ldr	r3, [r3, #24]
 8004254:	4a4c      	ldr	r2, [pc, #304]	@ (8004388 <HAL_GPIO_Init+0x2b8>)
 8004256:	f043 0301 	orr.w	r3, r3, #1
 800425a:	6193      	str	r3, [r2, #24]
 800425c:	4b4a      	ldr	r3, [pc, #296]	@ (8004388 <HAL_GPIO_Init+0x2b8>)
 800425e:	699b      	ldr	r3, [r3, #24]
 8004260:	f003 0301 	and.w	r3, r3, #1
 8004264:	60bb      	str	r3, [r7, #8]
 8004266:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004268:	4a48      	ldr	r2, [pc, #288]	@ (800438c <HAL_GPIO_Init+0x2bc>)
 800426a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800426c:	089b      	lsrs	r3, r3, #2
 800426e:	3302      	adds	r3, #2
 8004270:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004274:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004278:	f003 0303 	and.w	r3, r3, #3
 800427c:	009b      	lsls	r3, r3, #2
 800427e:	220f      	movs	r2, #15
 8004280:	fa02 f303 	lsl.w	r3, r2, r3
 8004284:	43db      	mvns	r3, r3
 8004286:	68fa      	ldr	r2, [r7, #12]
 8004288:	4013      	ands	r3, r2
 800428a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	4a40      	ldr	r2, [pc, #256]	@ (8004390 <HAL_GPIO_Init+0x2c0>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d013      	beq.n	80042bc <HAL_GPIO_Init+0x1ec>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	4a3f      	ldr	r2, [pc, #252]	@ (8004394 <HAL_GPIO_Init+0x2c4>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d00d      	beq.n	80042b8 <HAL_GPIO_Init+0x1e8>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	4a3e      	ldr	r2, [pc, #248]	@ (8004398 <HAL_GPIO_Init+0x2c8>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d007      	beq.n	80042b4 <HAL_GPIO_Init+0x1e4>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	4a3d      	ldr	r2, [pc, #244]	@ (800439c <HAL_GPIO_Init+0x2cc>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d101      	bne.n	80042b0 <HAL_GPIO_Init+0x1e0>
 80042ac:	2303      	movs	r3, #3
 80042ae:	e006      	b.n	80042be <HAL_GPIO_Init+0x1ee>
 80042b0:	2304      	movs	r3, #4
 80042b2:	e004      	b.n	80042be <HAL_GPIO_Init+0x1ee>
 80042b4:	2302      	movs	r3, #2
 80042b6:	e002      	b.n	80042be <HAL_GPIO_Init+0x1ee>
 80042b8:	2301      	movs	r3, #1
 80042ba:	e000      	b.n	80042be <HAL_GPIO_Init+0x1ee>
 80042bc:	2300      	movs	r3, #0
 80042be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042c0:	f002 0203 	and.w	r2, r2, #3
 80042c4:	0092      	lsls	r2, r2, #2
 80042c6:	4093      	lsls	r3, r2
 80042c8:	68fa      	ldr	r2, [r7, #12]
 80042ca:	4313      	orrs	r3, r2
 80042cc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80042ce:	492f      	ldr	r1, [pc, #188]	@ (800438c <HAL_GPIO_Init+0x2bc>)
 80042d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042d2:	089b      	lsrs	r3, r3, #2
 80042d4:	3302      	adds	r3, #2
 80042d6:	68fa      	ldr	r2, [r7, #12]
 80042d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d006      	beq.n	80042f6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80042e8:	4b2d      	ldr	r3, [pc, #180]	@ (80043a0 <HAL_GPIO_Init+0x2d0>)
 80042ea:	689a      	ldr	r2, [r3, #8]
 80042ec:	492c      	ldr	r1, [pc, #176]	@ (80043a0 <HAL_GPIO_Init+0x2d0>)
 80042ee:	69bb      	ldr	r3, [r7, #24]
 80042f0:	4313      	orrs	r3, r2
 80042f2:	608b      	str	r3, [r1, #8]
 80042f4:	e006      	b.n	8004304 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80042f6:	4b2a      	ldr	r3, [pc, #168]	@ (80043a0 <HAL_GPIO_Init+0x2d0>)
 80042f8:	689a      	ldr	r2, [r3, #8]
 80042fa:	69bb      	ldr	r3, [r7, #24]
 80042fc:	43db      	mvns	r3, r3
 80042fe:	4928      	ldr	r1, [pc, #160]	@ (80043a0 <HAL_GPIO_Init+0x2d0>)
 8004300:	4013      	ands	r3, r2
 8004302:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800430c:	2b00      	cmp	r3, #0
 800430e:	d006      	beq.n	800431e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004310:	4b23      	ldr	r3, [pc, #140]	@ (80043a0 <HAL_GPIO_Init+0x2d0>)
 8004312:	68da      	ldr	r2, [r3, #12]
 8004314:	4922      	ldr	r1, [pc, #136]	@ (80043a0 <HAL_GPIO_Init+0x2d0>)
 8004316:	69bb      	ldr	r3, [r7, #24]
 8004318:	4313      	orrs	r3, r2
 800431a:	60cb      	str	r3, [r1, #12]
 800431c:	e006      	b.n	800432c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800431e:	4b20      	ldr	r3, [pc, #128]	@ (80043a0 <HAL_GPIO_Init+0x2d0>)
 8004320:	68da      	ldr	r2, [r3, #12]
 8004322:	69bb      	ldr	r3, [r7, #24]
 8004324:	43db      	mvns	r3, r3
 8004326:	491e      	ldr	r1, [pc, #120]	@ (80043a0 <HAL_GPIO_Init+0x2d0>)
 8004328:	4013      	ands	r3, r2
 800432a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004334:	2b00      	cmp	r3, #0
 8004336:	d006      	beq.n	8004346 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004338:	4b19      	ldr	r3, [pc, #100]	@ (80043a0 <HAL_GPIO_Init+0x2d0>)
 800433a:	685a      	ldr	r2, [r3, #4]
 800433c:	4918      	ldr	r1, [pc, #96]	@ (80043a0 <HAL_GPIO_Init+0x2d0>)
 800433e:	69bb      	ldr	r3, [r7, #24]
 8004340:	4313      	orrs	r3, r2
 8004342:	604b      	str	r3, [r1, #4]
 8004344:	e006      	b.n	8004354 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004346:	4b16      	ldr	r3, [pc, #88]	@ (80043a0 <HAL_GPIO_Init+0x2d0>)
 8004348:	685a      	ldr	r2, [r3, #4]
 800434a:	69bb      	ldr	r3, [r7, #24]
 800434c:	43db      	mvns	r3, r3
 800434e:	4914      	ldr	r1, [pc, #80]	@ (80043a0 <HAL_GPIO_Init+0x2d0>)
 8004350:	4013      	ands	r3, r2
 8004352:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800435c:	2b00      	cmp	r3, #0
 800435e:	d021      	beq.n	80043a4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004360:	4b0f      	ldr	r3, [pc, #60]	@ (80043a0 <HAL_GPIO_Init+0x2d0>)
 8004362:	681a      	ldr	r2, [r3, #0]
 8004364:	490e      	ldr	r1, [pc, #56]	@ (80043a0 <HAL_GPIO_Init+0x2d0>)
 8004366:	69bb      	ldr	r3, [r7, #24]
 8004368:	4313      	orrs	r3, r2
 800436a:	600b      	str	r3, [r1, #0]
 800436c:	e021      	b.n	80043b2 <HAL_GPIO_Init+0x2e2>
 800436e:	bf00      	nop
 8004370:	10320000 	.word	0x10320000
 8004374:	10310000 	.word	0x10310000
 8004378:	10220000 	.word	0x10220000
 800437c:	10210000 	.word	0x10210000
 8004380:	10120000 	.word	0x10120000
 8004384:	10110000 	.word	0x10110000
 8004388:	40021000 	.word	0x40021000
 800438c:	40010000 	.word	0x40010000
 8004390:	40010800 	.word	0x40010800
 8004394:	40010c00 	.word	0x40010c00
 8004398:	40011000 	.word	0x40011000
 800439c:	40011400 	.word	0x40011400
 80043a0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80043a4:	4b0b      	ldr	r3, [pc, #44]	@ (80043d4 <HAL_GPIO_Init+0x304>)
 80043a6:	681a      	ldr	r2, [r3, #0]
 80043a8:	69bb      	ldr	r3, [r7, #24]
 80043aa:	43db      	mvns	r3, r3
 80043ac:	4909      	ldr	r1, [pc, #36]	@ (80043d4 <HAL_GPIO_Init+0x304>)
 80043ae:	4013      	ands	r3, r2
 80043b0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80043b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043b4:	3301      	adds	r3, #1
 80043b6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	681a      	ldr	r2, [r3, #0]
 80043bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043be:	fa22 f303 	lsr.w	r3, r2, r3
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	f47f ae8e 	bne.w	80040e4 <HAL_GPIO_Init+0x14>
  }
}
 80043c8:	bf00      	nop
 80043ca:	bf00      	nop
 80043cc:	372c      	adds	r7, #44	@ 0x2c
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bc80      	pop	{r7}
 80043d2:	4770      	bx	lr
 80043d4:	40010400 	.word	0x40010400

080043d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80043d8:	b480      	push	{r7}
 80043da:	b083      	sub	sp, #12
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
 80043e0:	460b      	mov	r3, r1
 80043e2:	807b      	strh	r3, [r7, #2]
 80043e4:	4613      	mov	r3, r2
 80043e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80043e8:	787b      	ldrb	r3, [r7, #1]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d003      	beq.n	80043f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80043ee:	887a      	ldrh	r2, [r7, #2]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80043f4:	e003      	b.n	80043fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80043f6:	887b      	ldrh	r3, [r7, #2]
 80043f8:	041a      	lsls	r2, r3, #16
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	611a      	str	r2, [r3, #16]
}
 80043fe:	bf00      	nop
 8004400:	370c      	adds	r7, #12
 8004402:	46bd      	mov	sp, r7
 8004404:	bc80      	pop	{r7}
 8004406:	4770      	bx	lr

08004408 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004408:	b480      	push	{r7}
 800440a:	b085      	sub	sp, #20
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
 8004410:	460b      	mov	r3, r1
 8004412:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	68db      	ldr	r3, [r3, #12]
 8004418:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800441a:	887a      	ldrh	r2, [r7, #2]
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	4013      	ands	r3, r2
 8004420:	041a      	lsls	r2, r3, #16
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	43d9      	mvns	r1, r3
 8004426:	887b      	ldrh	r3, [r7, #2]
 8004428:	400b      	ands	r3, r1
 800442a:	431a      	orrs	r2, r3
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	611a      	str	r2, [r3, #16]
}
 8004430:	bf00      	nop
 8004432:	3714      	adds	r7, #20
 8004434:	46bd      	mov	sp, r7
 8004436:	bc80      	pop	{r7}
 8004438:	4770      	bx	lr
	...

0800443c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b082      	sub	sp, #8
 8004440:	af00      	add	r7, sp, #0
 8004442:	4603      	mov	r3, r0
 8004444:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004446:	4b08      	ldr	r3, [pc, #32]	@ (8004468 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004448:	695a      	ldr	r2, [r3, #20]
 800444a:	88fb      	ldrh	r3, [r7, #6]
 800444c:	4013      	ands	r3, r2
 800444e:	2b00      	cmp	r3, #0
 8004450:	d006      	beq.n	8004460 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004452:	4a05      	ldr	r2, [pc, #20]	@ (8004468 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004454:	88fb      	ldrh	r3, [r7, #6]
 8004456:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004458:	88fb      	ldrh	r3, [r7, #6]
 800445a:	4618      	mov	r0, r3
 800445c:	f7fd face 	bl	80019fc <HAL_GPIO_EXTI_Callback>
  }
}
 8004460:	bf00      	nop
 8004462:	3708      	adds	r7, #8
 8004464:	46bd      	mov	sp, r7
 8004466:	bd80      	pop	{r7, pc}
 8004468:	40010400 	.word	0x40010400

0800446c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b084      	sub	sp, #16
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d101      	bne.n	800447e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800447a:	2301      	movs	r3, #1
 800447c:	e12b      	b.n	80046d6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004484:	b2db      	uxtb	r3, r3
 8004486:	2b00      	cmp	r3, #0
 8004488:	d106      	bne.n	8004498 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2200      	movs	r2, #0
 800448e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004492:	6878      	ldr	r0, [r7, #4]
 8004494:	f7fd f85a 	bl	800154c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2224      	movs	r2, #36	@ 0x24
 800449c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	681a      	ldr	r2, [r3, #0]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f022 0201 	bic.w	r2, r2, #1
 80044ae:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	681a      	ldr	r2, [r3, #0]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80044be:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	681a      	ldr	r2, [r3, #0]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80044ce:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80044d0:	f003 f948 	bl	8007764 <HAL_RCC_GetPCLK1Freq>
 80044d4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	4a81      	ldr	r2, [pc, #516]	@ (80046e0 <HAL_I2C_Init+0x274>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d807      	bhi.n	80044f0 <HAL_I2C_Init+0x84>
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	4a80      	ldr	r2, [pc, #512]	@ (80046e4 <HAL_I2C_Init+0x278>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	bf94      	ite	ls
 80044e8:	2301      	movls	r3, #1
 80044ea:	2300      	movhi	r3, #0
 80044ec:	b2db      	uxtb	r3, r3
 80044ee:	e006      	b.n	80044fe <HAL_I2C_Init+0x92>
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	4a7d      	ldr	r2, [pc, #500]	@ (80046e8 <HAL_I2C_Init+0x27c>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	bf94      	ite	ls
 80044f8:	2301      	movls	r3, #1
 80044fa:	2300      	movhi	r3, #0
 80044fc:	b2db      	uxtb	r3, r3
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d001      	beq.n	8004506 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004502:	2301      	movs	r3, #1
 8004504:	e0e7      	b.n	80046d6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	4a78      	ldr	r2, [pc, #480]	@ (80046ec <HAL_I2C_Init+0x280>)
 800450a:	fba2 2303 	umull	r2, r3, r2, r3
 800450e:	0c9b      	lsrs	r3, r3, #18
 8004510:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	68ba      	ldr	r2, [r7, #8]
 8004522:	430a      	orrs	r2, r1
 8004524:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	6a1b      	ldr	r3, [r3, #32]
 800452c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	4a6a      	ldr	r2, [pc, #424]	@ (80046e0 <HAL_I2C_Init+0x274>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d802      	bhi.n	8004540 <HAL_I2C_Init+0xd4>
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	3301      	adds	r3, #1
 800453e:	e009      	b.n	8004554 <HAL_I2C_Init+0xe8>
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004546:	fb02 f303 	mul.w	r3, r2, r3
 800454a:	4a69      	ldr	r2, [pc, #420]	@ (80046f0 <HAL_I2C_Init+0x284>)
 800454c:	fba2 2303 	umull	r2, r3, r2, r3
 8004550:	099b      	lsrs	r3, r3, #6
 8004552:	3301      	adds	r3, #1
 8004554:	687a      	ldr	r2, [r7, #4]
 8004556:	6812      	ldr	r2, [r2, #0]
 8004558:	430b      	orrs	r3, r1
 800455a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	69db      	ldr	r3, [r3, #28]
 8004562:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004566:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	495c      	ldr	r1, [pc, #368]	@ (80046e0 <HAL_I2C_Init+0x274>)
 8004570:	428b      	cmp	r3, r1
 8004572:	d819      	bhi.n	80045a8 <HAL_I2C_Init+0x13c>
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	1e59      	subs	r1, r3, #1
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	005b      	lsls	r3, r3, #1
 800457e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004582:	1c59      	adds	r1, r3, #1
 8004584:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004588:	400b      	ands	r3, r1
 800458a:	2b00      	cmp	r3, #0
 800458c:	d00a      	beq.n	80045a4 <HAL_I2C_Init+0x138>
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	1e59      	subs	r1, r3, #1
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	005b      	lsls	r3, r3, #1
 8004598:	fbb1 f3f3 	udiv	r3, r1, r3
 800459c:	3301      	adds	r3, #1
 800459e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045a2:	e051      	b.n	8004648 <HAL_I2C_Init+0x1dc>
 80045a4:	2304      	movs	r3, #4
 80045a6:	e04f      	b.n	8004648 <HAL_I2C_Init+0x1dc>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	689b      	ldr	r3, [r3, #8]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d111      	bne.n	80045d4 <HAL_I2C_Init+0x168>
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	1e58      	subs	r0, r3, #1
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6859      	ldr	r1, [r3, #4]
 80045b8:	460b      	mov	r3, r1
 80045ba:	005b      	lsls	r3, r3, #1
 80045bc:	440b      	add	r3, r1
 80045be:	fbb0 f3f3 	udiv	r3, r0, r3
 80045c2:	3301      	adds	r3, #1
 80045c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	bf0c      	ite	eq
 80045cc:	2301      	moveq	r3, #1
 80045ce:	2300      	movne	r3, #0
 80045d0:	b2db      	uxtb	r3, r3
 80045d2:	e012      	b.n	80045fa <HAL_I2C_Init+0x18e>
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	1e58      	subs	r0, r3, #1
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6859      	ldr	r1, [r3, #4]
 80045dc:	460b      	mov	r3, r1
 80045de:	009b      	lsls	r3, r3, #2
 80045e0:	440b      	add	r3, r1
 80045e2:	0099      	lsls	r1, r3, #2
 80045e4:	440b      	add	r3, r1
 80045e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80045ea:	3301      	adds	r3, #1
 80045ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	bf0c      	ite	eq
 80045f4:	2301      	moveq	r3, #1
 80045f6:	2300      	movne	r3, #0
 80045f8:	b2db      	uxtb	r3, r3
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d001      	beq.n	8004602 <HAL_I2C_Init+0x196>
 80045fe:	2301      	movs	r3, #1
 8004600:	e022      	b.n	8004648 <HAL_I2C_Init+0x1dc>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	689b      	ldr	r3, [r3, #8]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d10e      	bne.n	8004628 <HAL_I2C_Init+0x1bc>
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	1e58      	subs	r0, r3, #1
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6859      	ldr	r1, [r3, #4]
 8004612:	460b      	mov	r3, r1
 8004614:	005b      	lsls	r3, r3, #1
 8004616:	440b      	add	r3, r1
 8004618:	fbb0 f3f3 	udiv	r3, r0, r3
 800461c:	3301      	adds	r3, #1
 800461e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004622:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004626:	e00f      	b.n	8004648 <HAL_I2C_Init+0x1dc>
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	1e58      	subs	r0, r3, #1
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6859      	ldr	r1, [r3, #4]
 8004630:	460b      	mov	r3, r1
 8004632:	009b      	lsls	r3, r3, #2
 8004634:	440b      	add	r3, r1
 8004636:	0099      	lsls	r1, r3, #2
 8004638:	440b      	add	r3, r1
 800463a:	fbb0 f3f3 	udiv	r3, r0, r3
 800463e:	3301      	adds	r3, #1
 8004640:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004644:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004648:	6879      	ldr	r1, [r7, #4]
 800464a:	6809      	ldr	r1, [r1, #0]
 800464c:	4313      	orrs	r3, r2
 800464e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	69da      	ldr	r2, [r3, #28]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6a1b      	ldr	r3, [r3, #32]
 8004662:	431a      	orrs	r2, r3
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	430a      	orrs	r2, r1
 800466a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	689b      	ldr	r3, [r3, #8]
 8004672:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004676:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800467a:	687a      	ldr	r2, [r7, #4]
 800467c:	6911      	ldr	r1, [r2, #16]
 800467e:	687a      	ldr	r2, [r7, #4]
 8004680:	68d2      	ldr	r2, [r2, #12]
 8004682:	4311      	orrs	r1, r2
 8004684:	687a      	ldr	r2, [r7, #4]
 8004686:	6812      	ldr	r2, [r2, #0]
 8004688:	430b      	orrs	r3, r1
 800468a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	68db      	ldr	r3, [r3, #12]
 8004692:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	695a      	ldr	r2, [r3, #20]
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	699b      	ldr	r3, [r3, #24]
 800469e:	431a      	orrs	r2, r3
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	430a      	orrs	r2, r1
 80046a6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	681a      	ldr	r2, [r3, #0]
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f042 0201 	orr.w	r2, r2, #1
 80046b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2200      	movs	r2, #0
 80046bc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2220      	movs	r2, #32
 80046c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2200      	movs	r2, #0
 80046ca:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2200      	movs	r2, #0
 80046d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80046d4:	2300      	movs	r3, #0
}
 80046d6:	4618      	mov	r0, r3
 80046d8:	3710      	adds	r7, #16
 80046da:	46bd      	mov	sp, r7
 80046dc:	bd80      	pop	{r7, pc}
 80046de:	bf00      	nop
 80046e0:	000186a0 	.word	0x000186a0
 80046e4:	001e847f 	.word	0x001e847f
 80046e8:	003d08ff 	.word	0x003d08ff
 80046ec:	431bde83 	.word	0x431bde83
 80046f0:	10624dd3 	.word	0x10624dd3

080046f4 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 80046f4:	b480      	push	{r7}
 80046f6:	b083      	sub	sp, #12
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	695b      	ldr	r3, [r3, #20]
 8004702:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004706:	2b80      	cmp	r3, #128	@ 0x80
 8004708:	d103      	bne.n	8004712 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	2200      	movs	r2, #0
 8004710:	611a      	str	r2, [r3, #16]
  }
}
 8004712:	bf00      	nop
 8004714:	370c      	adds	r7, #12
 8004716:	46bd      	mov	sp, r7
 8004718:	bc80      	pop	{r7}
 800471a:	4770      	bx	lr

0800471c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b088      	sub	sp, #32
 8004720:	af02      	add	r7, sp, #8
 8004722:	60f8      	str	r0, [r7, #12]
 8004724:	607a      	str	r2, [r7, #4]
 8004726:	461a      	mov	r2, r3
 8004728:	460b      	mov	r3, r1
 800472a:	817b      	strh	r3, [r7, #10]
 800472c:	4613      	mov	r3, r2
 800472e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004730:	f7fe fcd2 	bl	80030d8 <HAL_GetTick>
 8004734:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800473c:	b2db      	uxtb	r3, r3
 800473e:	2b20      	cmp	r3, #32
 8004740:	f040 80e0 	bne.w	8004904 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004744:	697b      	ldr	r3, [r7, #20]
 8004746:	9300      	str	r3, [sp, #0]
 8004748:	2319      	movs	r3, #25
 800474a:	2201      	movs	r2, #1
 800474c:	4970      	ldr	r1, [pc, #448]	@ (8004910 <HAL_I2C_Master_Transmit+0x1f4>)
 800474e:	68f8      	ldr	r0, [r7, #12]
 8004750:	f002 f9bc 	bl	8006acc <I2C_WaitOnFlagUntilTimeout>
 8004754:	4603      	mov	r3, r0
 8004756:	2b00      	cmp	r3, #0
 8004758:	d001      	beq.n	800475e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800475a:	2302      	movs	r3, #2
 800475c:	e0d3      	b.n	8004906 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004764:	2b01      	cmp	r3, #1
 8004766:	d101      	bne.n	800476c <HAL_I2C_Master_Transmit+0x50>
 8004768:	2302      	movs	r3, #2
 800476a:	e0cc      	b.n	8004906 <HAL_I2C_Master_Transmit+0x1ea>
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	2201      	movs	r2, #1
 8004770:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f003 0301 	and.w	r3, r3, #1
 800477e:	2b01      	cmp	r3, #1
 8004780:	d007      	beq.n	8004792 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	681a      	ldr	r2, [r3, #0]
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f042 0201 	orr.w	r2, r2, #1
 8004790:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	681a      	ldr	r2, [r3, #0]
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80047a0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	2221      	movs	r2, #33	@ 0x21
 80047a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	2210      	movs	r2, #16
 80047ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	2200      	movs	r2, #0
 80047b6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	687a      	ldr	r2, [r7, #4]
 80047bc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	893a      	ldrh	r2, [r7, #8]
 80047c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047c8:	b29a      	uxth	r2, r3
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	4a50      	ldr	r2, [pc, #320]	@ (8004914 <HAL_I2C_Master_Transmit+0x1f8>)
 80047d2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80047d4:	8979      	ldrh	r1, [r7, #10]
 80047d6:	697b      	ldr	r3, [r7, #20]
 80047d8:	6a3a      	ldr	r2, [r7, #32]
 80047da:	68f8      	ldr	r0, [r7, #12]
 80047dc:	f001 fece 	bl	800657c <I2C_MasterRequestWrite>
 80047e0:	4603      	mov	r3, r0
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d001      	beq.n	80047ea <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80047e6:	2301      	movs	r3, #1
 80047e8:	e08d      	b.n	8004906 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047ea:	2300      	movs	r3, #0
 80047ec:	613b      	str	r3, [r7, #16]
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	695b      	ldr	r3, [r3, #20]
 80047f4:	613b      	str	r3, [r7, #16]
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	699b      	ldr	r3, [r3, #24]
 80047fc:	613b      	str	r3, [r7, #16]
 80047fe:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004800:	e066      	b.n	80048d0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004802:	697a      	ldr	r2, [r7, #20]
 8004804:	6a39      	ldr	r1, [r7, #32]
 8004806:	68f8      	ldr	r0, [r7, #12]
 8004808:	f002 fa7a 	bl	8006d00 <I2C_WaitOnTXEFlagUntilTimeout>
 800480c:	4603      	mov	r3, r0
 800480e:	2b00      	cmp	r3, #0
 8004810:	d00d      	beq.n	800482e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004816:	2b04      	cmp	r3, #4
 8004818:	d107      	bne.n	800482a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	681a      	ldr	r2, [r3, #0]
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004828:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800482a:	2301      	movs	r3, #1
 800482c:	e06b      	b.n	8004906 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004832:	781a      	ldrb	r2, [r3, #0]
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800483e:	1c5a      	adds	r2, r3, #1
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004848:	b29b      	uxth	r3, r3
 800484a:	3b01      	subs	r3, #1
 800484c:	b29a      	uxth	r2, r3
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004856:	3b01      	subs	r3, #1
 8004858:	b29a      	uxth	r2, r3
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	695b      	ldr	r3, [r3, #20]
 8004864:	f003 0304 	and.w	r3, r3, #4
 8004868:	2b04      	cmp	r3, #4
 800486a:	d11b      	bne.n	80048a4 <HAL_I2C_Master_Transmit+0x188>
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004870:	2b00      	cmp	r3, #0
 8004872:	d017      	beq.n	80048a4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004878:	781a      	ldrb	r2, [r3, #0]
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004884:	1c5a      	adds	r2, r3, #1
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800488e:	b29b      	uxth	r3, r3
 8004890:	3b01      	subs	r3, #1
 8004892:	b29a      	uxth	r2, r3
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800489c:	3b01      	subs	r3, #1
 800489e:	b29a      	uxth	r2, r3
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80048a4:	697a      	ldr	r2, [r7, #20]
 80048a6:	6a39      	ldr	r1, [r7, #32]
 80048a8:	68f8      	ldr	r0, [r7, #12]
 80048aa:	f002 fa71 	bl	8006d90 <I2C_WaitOnBTFFlagUntilTimeout>
 80048ae:	4603      	mov	r3, r0
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d00d      	beq.n	80048d0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048b8:	2b04      	cmp	r3, #4
 80048ba:	d107      	bne.n	80048cc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	681a      	ldr	r2, [r3, #0]
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80048ca:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80048cc:	2301      	movs	r3, #1
 80048ce:	e01a      	b.n	8004906 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d194      	bne.n	8004802 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	681a      	ldr	r2, [r3, #0]
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80048e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	2220      	movs	r2, #32
 80048ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	2200      	movs	r2, #0
 80048f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	2200      	movs	r2, #0
 80048fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004900:	2300      	movs	r3, #0
 8004902:	e000      	b.n	8004906 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004904:	2302      	movs	r3, #2
  }
}
 8004906:	4618      	mov	r0, r3
 8004908:	3718      	adds	r7, #24
 800490a:	46bd      	mov	sp, r7
 800490c:	bd80      	pop	{r7, pc}
 800490e:	bf00      	nop
 8004910:	00100002 	.word	0x00100002
 8004914:	ffff0000 	.word	0xffff0000

08004918 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b088      	sub	sp, #32
 800491c:	af02      	add	r7, sp, #8
 800491e:	60f8      	str	r0, [r7, #12]
 8004920:	4608      	mov	r0, r1
 8004922:	4611      	mov	r1, r2
 8004924:	461a      	mov	r2, r3
 8004926:	4603      	mov	r3, r0
 8004928:	817b      	strh	r3, [r7, #10]
 800492a:	460b      	mov	r3, r1
 800492c:	813b      	strh	r3, [r7, #8]
 800492e:	4613      	mov	r3, r2
 8004930:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004932:	f7fe fbd1 	bl	80030d8 <HAL_GetTick>
 8004936:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800493e:	b2db      	uxtb	r3, r3
 8004940:	2b20      	cmp	r3, #32
 8004942:	f040 80d9 	bne.w	8004af8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004946:	697b      	ldr	r3, [r7, #20]
 8004948:	9300      	str	r3, [sp, #0]
 800494a:	2319      	movs	r3, #25
 800494c:	2201      	movs	r2, #1
 800494e:	496d      	ldr	r1, [pc, #436]	@ (8004b04 <HAL_I2C_Mem_Write+0x1ec>)
 8004950:	68f8      	ldr	r0, [r7, #12]
 8004952:	f002 f8bb 	bl	8006acc <I2C_WaitOnFlagUntilTimeout>
 8004956:	4603      	mov	r3, r0
 8004958:	2b00      	cmp	r3, #0
 800495a:	d001      	beq.n	8004960 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800495c:	2302      	movs	r3, #2
 800495e:	e0cc      	b.n	8004afa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004966:	2b01      	cmp	r3, #1
 8004968:	d101      	bne.n	800496e <HAL_I2C_Mem_Write+0x56>
 800496a:	2302      	movs	r3, #2
 800496c:	e0c5      	b.n	8004afa <HAL_I2C_Mem_Write+0x1e2>
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	2201      	movs	r2, #1
 8004972:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f003 0301 	and.w	r3, r3, #1
 8004980:	2b01      	cmp	r3, #1
 8004982:	d007      	beq.n	8004994 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	681a      	ldr	r2, [r3, #0]
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f042 0201 	orr.w	r2, r2, #1
 8004992:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	681a      	ldr	r2, [r3, #0]
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80049a2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	2221      	movs	r2, #33	@ 0x21
 80049a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	2240      	movs	r2, #64	@ 0x40
 80049b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	2200      	movs	r2, #0
 80049b8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	6a3a      	ldr	r2, [r7, #32]
 80049be:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80049c4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049ca:	b29a      	uxth	r2, r3
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	4a4d      	ldr	r2, [pc, #308]	@ (8004b08 <HAL_I2C_Mem_Write+0x1f0>)
 80049d4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80049d6:	88f8      	ldrh	r0, [r7, #6]
 80049d8:	893a      	ldrh	r2, [r7, #8]
 80049da:	8979      	ldrh	r1, [r7, #10]
 80049dc:	697b      	ldr	r3, [r7, #20]
 80049de:	9301      	str	r3, [sp, #4]
 80049e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049e2:	9300      	str	r3, [sp, #0]
 80049e4:	4603      	mov	r3, r0
 80049e6:	68f8      	ldr	r0, [r7, #12]
 80049e8:	f001 fe4a 	bl	8006680 <I2C_RequestMemoryWrite>
 80049ec:	4603      	mov	r3, r0
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d052      	beq.n	8004a98 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80049f2:	2301      	movs	r3, #1
 80049f4:	e081      	b.n	8004afa <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80049f6:	697a      	ldr	r2, [r7, #20]
 80049f8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80049fa:	68f8      	ldr	r0, [r7, #12]
 80049fc:	f002 f980 	bl	8006d00 <I2C_WaitOnTXEFlagUntilTimeout>
 8004a00:	4603      	mov	r3, r0
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d00d      	beq.n	8004a22 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a0a:	2b04      	cmp	r3, #4
 8004a0c:	d107      	bne.n	8004a1e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	681a      	ldr	r2, [r3, #0]
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a1c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	e06b      	b.n	8004afa <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a26:	781a      	ldrb	r2, [r3, #0]
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a32:	1c5a      	adds	r2, r3, #1
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a3c:	3b01      	subs	r3, #1
 8004a3e:	b29a      	uxth	r2, r3
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a48:	b29b      	uxth	r3, r3
 8004a4a:	3b01      	subs	r3, #1
 8004a4c:	b29a      	uxth	r2, r3
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	695b      	ldr	r3, [r3, #20]
 8004a58:	f003 0304 	and.w	r3, r3, #4
 8004a5c:	2b04      	cmp	r3, #4
 8004a5e:	d11b      	bne.n	8004a98 <HAL_I2C_Mem_Write+0x180>
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d017      	beq.n	8004a98 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a6c:	781a      	ldrb	r2, [r3, #0]
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a78:	1c5a      	adds	r2, r3, #1
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a82:	3b01      	subs	r3, #1
 8004a84:	b29a      	uxth	r2, r3
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a8e:	b29b      	uxth	r3, r3
 8004a90:	3b01      	subs	r3, #1
 8004a92:	b29a      	uxth	r2, r3
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d1aa      	bne.n	80049f6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004aa0:	697a      	ldr	r2, [r7, #20]
 8004aa2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004aa4:	68f8      	ldr	r0, [r7, #12]
 8004aa6:	f002 f973 	bl	8006d90 <I2C_WaitOnBTFFlagUntilTimeout>
 8004aaa:	4603      	mov	r3, r0
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d00d      	beq.n	8004acc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ab4:	2b04      	cmp	r3, #4
 8004ab6:	d107      	bne.n	8004ac8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	681a      	ldr	r2, [r3, #0]
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004ac6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004ac8:	2301      	movs	r3, #1
 8004aca:	e016      	b.n	8004afa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	681a      	ldr	r2, [r3, #0]
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004ada:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	2220      	movs	r2, #32
 8004ae0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	2200      	movs	r2, #0
 8004af0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004af4:	2300      	movs	r3, #0
 8004af6:	e000      	b.n	8004afa <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004af8:	2302      	movs	r3, #2
  }
}
 8004afa:	4618      	mov	r0, r3
 8004afc:	3718      	adds	r7, #24
 8004afe:	46bd      	mov	sp, r7
 8004b00:	bd80      	pop	{r7, pc}
 8004b02:	bf00      	nop
 8004b04:	00100002 	.word	0x00100002
 8004b08:	ffff0000 	.word	0xffff0000

08004b0c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b08c      	sub	sp, #48	@ 0x30
 8004b10:	af02      	add	r7, sp, #8
 8004b12:	60f8      	str	r0, [r7, #12]
 8004b14:	4608      	mov	r0, r1
 8004b16:	4611      	mov	r1, r2
 8004b18:	461a      	mov	r2, r3
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	817b      	strh	r3, [r7, #10]
 8004b1e:	460b      	mov	r3, r1
 8004b20:	813b      	strh	r3, [r7, #8]
 8004b22:	4613      	mov	r3, r2
 8004b24:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8004b26:	2300      	movs	r3, #0
 8004b28:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004b2a:	f7fe fad5 	bl	80030d8 <HAL_GetTick>
 8004b2e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b36:	b2db      	uxtb	r3, r3
 8004b38:	2b20      	cmp	r3, #32
 8004b3a:	f040 8250 	bne.w	8004fde <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004b3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b40:	9300      	str	r3, [sp, #0]
 8004b42:	2319      	movs	r3, #25
 8004b44:	2201      	movs	r2, #1
 8004b46:	4982      	ldr	r1, [pc, #520]	@ (8004d50 <HAL_I2C_Mem_Read+0x244>)
 8004b48:	68f8      	ldr	r0, [r7, #12]
 8004b4a:	f001 ffbf 	bl	8006acc <I2C_WaitOnFlagUntilTimeout>
 8004b4e:	4603      	mov	r3, r0
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d001      	beq.n	8004b58 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8004b54:	2302      	movs	r3, #2
 8004b56:	e243      	b.n	8004fe0 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b5e:	2b01      	cmp	r3, #1
 8004b60:	d101      	bne.n	8004b66 <HAL_I2C_Mem_Read+0x5a>
 8004b62:	2302      	movs	r3, #2
 8004b64:	e23c      	b.n	8004fe0 <HAL_I2C_Mem_Read+0x4d4>
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	2201      	movs	r2, #1
 8004b6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f003 0301 	and.w	r3, r3, #1
 8004b78:	2b01      	cmp	r3, #1
 8004b7a:	d007      	beq.n	8004b8c <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	681a      	ldr	r2, [r3, #0]
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f042 0201 	orr.w	r2, r2, #1
 8004b8a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	681a      	ldr	r2, [r3, #0]
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004b9a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	2222      	movs	r2, #34	@ 0x22
 8004ba0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	2240      	movs	r2, #64	@ 0x40
 8004ba8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	2200      	movs	r2, #0
 8004bb0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004bb6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8004bbc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004bc2:	b29a      	uxth	r2, r3
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	4a62      	ldr	r2, [pc, #392]	@ (8004d54 <HAL_I2C_Mem_Read+0x248>)
 8004bcc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004bce:	88f8      	ldrh	r0, [r7, #6]
 8004bd0:	893a      	ldrh	r2, [r7, #8]
 8004bd2:	8979      	ldrh	r1, [r7, #10]
 8004bd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bd6:	9301      	str	r3, [sp, #4]
 8004bd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bda:	9300      	str	r3, [sp, #0]
 8004bdc:	4603      	mov	r3, r0
 8004bde:	68f8      	ldr	r0, [r7, #12]
 8004be0:	f001 fde4 	bl	80067ac <I2C_RequestMemoryRead>
 8004be4:	4603      	mov	r3, r0
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d001      	beq.n	8004bee <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8004bea:	2301      	movs	r3, #1
 8004bec:	e1f8      	b.n	8004fe0 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d113      	bne.n	8004c1e <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	61fb      	str	r3, [r7, #28]
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	695b      	ldr	r3, [r3, #20]
 8004c00:	61fb      	str	r3, [r7, #28]
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	699b      	ldr	r3, [r3, #24]
 8004c08:	61fb      	str	r3, [r7, #28]
 8004c0a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	681a      	ldr	r2, [r3, #0]
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c1a:	601a      	str	r2, [r3, #0]
 8004c1c:	e1cc      	b.n	8004fb8 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c22:	2b01      	cmp	r3, #1
 8004c24:	d11e      	bne.n	8004c64 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	681a      	ldr	r2, [r3, #0]
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c34:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004c36:	b672      	cpsid	i
}
 8004c38:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	61bb      	str	r3, [r7, #24]
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	695b      	ldr	r3, [r3, #20]
 8004c44:	61bb      	str	r3, [r7, #24]
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	699b      	ldr	r3, [r3, #24]
 8004c4c:	61bb      	str	r3, [r7, #24]
 8004c4e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	681a      	ldr	r2, [r3, #0]
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c5e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004c60:	b662      	cpsie	i
}
 8004c62:	e035      	b.n	8004cd0 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c68:	2b02      	cmp	r3, #2
 8004c6a:	d11e      	bne.n	8004caa <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	681a      	ldr	r2, [r3, #0]
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004c7a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004c7c:	b672      	cpsid	i
}
 8004c7e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c80:	2300      	movs	r3, #0
 8004c82:	617b      	str	r3, [r7, #20]
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	695b      	ldr	r3, [r3, #20]
 8004c8a:	617b      	str	r3, [r7, #20]
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	699b      	ldr	r3, [r3, #24]
 8004c92:	617b      	str	r3, [r7, #20]
 8004c94:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	681a      	ldr	r2, [r3, #0]
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004ca4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004ca6:	b662      	cpsie	i
}
 8004ca8:	e012      	b.n	8004cd0 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	681a      	ldr	r2, [r3, #0]
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004cb8:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004cba:	2300      	movs	r3, #0
 8004cbc:	613b      	str	r3, [r7, #16]
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	695b      	ldr	r3, [r3, #20]
 8004cc4:	613b      	str	r3, [r7, #16]
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	699b      	ldr	r3, [r3, #24]
 8004ccc:	613b      	str	r3, [r7, #16]
 8004cce:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8004cd0:	e172      	b.n	8004fb8 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004cd6:	2b03      	cmp	r3, #3
 8004cd8:	f200 811f 	bhi.w	8004f1a <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ce0:	2b01      	cmp	r3, #1
 8004ce2:	d123      	bne.n	8004d2c <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ce4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ce6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004ce8:	68f8      	ldr	r0, [r7, #12]
 8004cea:	f002 f8cb 	bl	8006e84 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004cee:	4603      	mov	r3, r0
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d001      	beq.n	8004cf8 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	e173      	b.n	8004fe0 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	691a      	ldr	r2, [r3, #16]
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d02:	b2d2      	uxtb	r2, r2
 8004d04:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d0a:	1c5a      	adds	r2, r3, #1
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d14:	3b01      	subs	r3, #1
 8004d16:	b29a      	uxth	r2, r3
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d20:	b29b      	uxth	r3, r3
 8004d22:	3b01      	subs	r3, #1
 8004d24:	b29a      	uxth	r2, r3
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004d2a:	e145      	b.n	8004fb8 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d30:	2b02      	cmp	r3, #2
 8004d32:	d152      	bne.n	8004dda <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004d34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d36:	9300      	str	r3, [sp, #0]
 8004d38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	4906      	ldr	r1, [pc, #24]	@ (8004d58 <HAL_I2C_Mem_Read+0x24c>)
 8004d3e:	68f8      	ldr	r0, [r7, #12]
 8004d40:	f001 fec4 	bl	8006acc <I2C_WaitOnFlagUntilTimeout>
 8004d44:	4603      	mov	r3, r0
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d008      	beq.n	8004d5c <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	e148      	b.n	8004fe0 <HAL_I2C_Mem_Read+0x4d4>
 8004d4e:	bf00      	nop
 8004d50:	00100002 	.word	0x00100002
 8004d54:	ffff0000 	.word	0xffff0000
 8004d58:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8004d5c:	b672      	cpsid	i
}
 8004d5e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	681a      	ldr	r2, [r3, #0]
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004d6e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	691a      	ldr	r2, [r3, #16]
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d7a:	b2d2      	uxtb	r2, r2
 8004d7c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d82:	1c5a      	adds	r2, r3, #1
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d8c:	3b01      	subs	r3, #1
 8004d8e:	b29a      	uxth	r2, r3
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d98:	b29b      	uxth	r3, r3
 8004d9a:	3b01      	subs	r3, #1
 8004d9c:	b29a      	uxth	r2, r3
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004da2:	b662      	cpsie	i
}
 8004da4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	691a      	ldr	r2, [r3, #16]
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004db0:	b2d2      	uxtb	r2, r2
 8004db2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004db8:	1c5a      	adds	r2, r3, #1
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004dc2:	3b01      	subs	r3, #1
 8004dc4:	b29a      	uxth	r2, r3
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004dce:	b29b      	uxth	r3, r3
 8004dd0:	3b01      	subs	r3, #1
 8004dd2:	b29a      	uxth	r2, r3
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004dd8:	e0ee      	b.n	8004fb8 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004dda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ddc:	9300      	str	r3, [sp, #0]
 8004dde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004de0:	2200      	movs	r2, #0
 8004de2:	4981      	ldr	r1, [pc, #516]	@ (8004fe8 <HAL_I2C_Mem_Read+0x4dc>)
 8004de4:	68f8      	ldr	r0, [r7, #12]
 8004de6:	f001 fe71 	bl	8006acc <I2C_WaitOnFlagUntilTimeout>
 8004dea:	4603      	mov	r3, r0
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d001      	beq.n	8004df4 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8004df0:	2301      	movs	r3, #1
 8004df2:	e0f5      	b.n	8004fe0 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	681a      	ldr	r2, [r3, #0]
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004e02:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004e04:	b672      	cpsid	i
}
 8004e06:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	691a      	ldr	r2, [r3, #16]
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e12:	b2d2      	uxtb	r2, r2
 8004e14:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e1a:	1c5a      	adds	r2, r3, #1
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e24:	3b01      	subs	r3, #1
 8004e26:	b29a      	uxth	r2, r3
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e30:	b29b      	uxth	r3, r3
 8004e32:	3b01      	subs	r3, #1
 8004e34:	b29a      	uxth	r2, r3
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004e3a:	4b6c      	ldr	r3, [pc, #432]	@ (8004fec <HAL_I2C_Mem_Read+0x4e0>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	08db      	lsrs	r3, r3, #3
 8004e40:	4a6b      	ldr	r2, [pc, #428]	@ (8004ff0 <HAL_I2C_Mem_Read+0x4e4>)
 8004e42:	fba2 2303 	umull	r2, r3, r2, r3
 8004e46:	0a1a      	lsrs	r2, r3, #8
 8004e48:	4613      	mov	r3, r2
 8004e4a:	009b      	lsls	r3, r3, #2
 8004e4c:	4413      	add	r3, r2
 8004e4e:	00da      	lsls	r2, r3, #3
 8004e50:	1ad3      	subs	r3, r2, r3
 8004e52:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8004e54:	6a3b      	ldr	r3, [r7, #32]
 8004e56:	3b01      	subs	r3, #1
 8004e58:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8004e5a:	6a3b      	ldr	r3, [r7, #32]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d118      	bne.n	8004e92 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	2200      	movs	r2, #0
 8004e64:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	2220      	movs	r2, #32
 8004e6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	2200      	movs	r2, #0
 8004e72:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e7a:	f043 0220 	orr.w	r2, r3, #32
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8004e82:	b662      	cpsie	i
}
 8004e84:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	2200      	movs	r2, #0
 8004e8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8004e8e:	2301      	movs	r3, #1
 8004e90:	e0a6      	b.n	8004fe0 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	695b      	ldr	r3, [r3, #20]
 8004e98:	f003 0304 	and.w	r3, r3, #4
 8004e9c:	2b04      	cmp	r3, #4
 8004e9e:	d1d9      	bne.n	8004e54 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	681a      	ldr	r2, [r3, #0]
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004eae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	691a      	ldr	r2, [r3, #16]
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004eba:	b2d2      	uxtb	r2, r2
 8004ebc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ec2:	1c5a      	adds	r2, r3, #1
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ecc:	3b01      	subs	r3, #1
 8004ece:	b29a      	uxth	r2, r3
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ed8:	b29b      	uxth	r3, r3
 8004eda:	3b01      	subs	r3, #1
 8004edc:	b29a      	uxth	r2, r3
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004ee2:	b662      	cpsie	i
}
 8004ee4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	691a      	ldr	r2, [r3, #16]
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ef0:	b2d2      	uxtb	r2, r2
 8004ef2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ef8:	1c5a      	adds	r2, r3, #1
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f02:	3b01      	subs	r3, #1
 8004f04:	b29a      	uxth	r2, r3
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f0e:	b29b      	uxth	r3, r3
 8004f10:	3b01      	subs	r3, #1
 8004f12:	b29a      	uxth	r2, r3
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004f18:	e04e      	b.n	8004fb8 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f1c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004f1e:	68f8      	ldr	r0, [r7, #12]
 8004f20:	f001 ffb0 	bl	8006e84 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004f24:	4603      	mov	r3, r0
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d001      	beq.n	8004f2e <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	e058      	b.n	8004fe0 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	691a      	ldr	r2, [r3, #16]
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f38:	b2d2      	uxtb	r2, r2
 8004f3a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f40:	1c5a      	adds	r2, r3, #1
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f4a:	3b01      	subs	r3, #1
 8004f4c:	b29a      	uxth	r2, r3
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f56:	b29b      	uxth	r3, r3
 8004f58:	3b01      	subs	r3, #1
 8004f5a:	b29a      	uxth	r2, r3
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	695b      	ldr	r3, [r3, #20]
 8004f66:	f003 0304 	and.w	r3, r3, #4
 8004f6a:	2b04      	cmp	r3, #4
 8004f6c:	d124      	bne.n	8004fb8 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f72:	2b03      	cmp	r3, #3
 8004f74:	d107      	bne.n	8004f86 <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	681a      	ldr	r2, [r3, #0]
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004f84:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	691a      	ldr	r2, [r3, #16]
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f90:	b2d2      	uxtb	r2, r2
 8004f92:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f98:	1c5a      	adds	r2, r3, #1
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004fa2:	3b01      	subs	r3, #1
 8004fa4:	b29a      	uxth	r2, r3
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004fae:	b29b      	uxth	r3, r3
 8004fb0:	3b01      	subs	r3, #1
 8004fb2:	b29a      	uxth	r2, r3
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	f47f ae88 	bne.w	8004cd2 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	2220      	movs	r2, #32
 8004fc6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004fda:	2300      	movs	r3, #0
 8004fdc:	e000      	b.n	8004fe0 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 8004fde:	2302      	movs	r3, #2
  }
}
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	3728      	adds	r7, #40	@ 0x28
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	bd80      	pop	{r7, pc}
 8004fe8:	00010004 	.word	0x00010004
 8004fec:	20000018 	.word	0x20000018
 8004ff0:	14f8b589 	.word	0x14f8b589

08004ff4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b088      	sub	sp, #32
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	685b      	ldr	r3, [r3, #4]
 8005006:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800500c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005014:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800501c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800501e:	7bfb      	ldrb	r3, [r7, #15]
 8005020:	2b10      	cmp	r3, #16
 8005022:	d003      	beq.n	800502c <HAL_I2C_EV_IRQHandler+0x38>
 8005024:	7bfb      	ldrb	r3, [r7, #15]
 8005026:	2b40      	cmp	r3, #64	@ 0x40
 8005028:	f040 80b1 	bne.w	800518e <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	699b      	ldr	r3, [r3, #24]
 8005032:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	695b      	ldr	r3, [r3, #20]
 800503a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800503c:	69fb      	ldr	r3, [r7, #28]
 800503e:	f003 0301 	and.w	r3, r3, #1
 8005042:	2b00      	cmp	r3, #0
 8005044:	d10d      	bne.n	8005062 <HAL_I2C_EV_IRQHandler+0x6e>
 8005046:	693b      	ldr	r3, [r7, #16]
 8005048:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 800504c:	d003      	beq.n	8005056 <HAL_I2C_EV_IRQHandler+0x62>
 800504e:	693b      	ldr	r3, [r7, #16]
 8005050:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8005054:	d101      	bne.n	800505a <HAL_I2C_EV_IRQHandler+0x66>
 8005056:	2301      	movs	r3, #1
 8005058:	e000      	b.n	800505c <HAL_I2C_EV_IRQHandler+0x68>
 800505a:	2300      	movs	r3, #0
 800505c:	2b01      	cmp	r3, #1
 800505e:	f000 8114 	beq.w	800528a <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005062:	69fb      	ldr	r3, [r7, #28]
 8005064:	f003 0301 	and.w	r3, r3, #1
 8005068:	2b00      	cmp	r3, #0
 800506a:	d00b      	beq.n	8005084 <HAL_I2C_EV_IRQHandler+0x90>
 800506c:	697b      	ldr	r3, [r7, #20]
 800506e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005072:	2b00      	cmp	r3, #0
 8005074:	d006      	beq.n	8005084 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8005076:	6878      	ldr	r0, [r7, #4]
 8005078:	f001 ff8f 	bl	8006f9a <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800507c:	6878      	ldr	r0, [r7, #4]
 800507e:	f000 fccd 	bl	8005a1c <I2C_Master_SB>
 8005082:	e083      	b.n	800518c <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005084:	69fb      	ldr	r3, [r7, #28]
 8005086:	f003 0308 	and.w	r3, r3, #8
 800508a:	2b00      	cmp	r3, #0
 800508c:	d008      	beq.n	80050a0 <HAL_I2C_EV_IRQHandler+0xac>
 800508e:	697b      	ldr	r3, [r7, #20]
 8005090:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005094:	2b00      	cmp	r3, #0
 8005096:	d003      	beq.n	80050a0 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8005098:	6878      	ldr	r0, [r7, #4]
 800509a:	f000 fd44 	bl	8005b26 <I2C_Master_ADD10>
 800509e:	e075      	b.n	800518c <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80050a0:	69fb      	ldr	r3, [r7, #28]
 80050a2:	f003 0302 	and.w	r3, r3, #2
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d008      	beq.n	80050bc <HAL_I2C_EV_IRQHandler+0xc8>
 80050aa:	697b      	ldr	r3, [r7, #20]
 80050ac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d003      	beq.n	80050bc <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 80050b4:	6878      	ldr	r0, [r7, #4]
 80050b6:	f000 fd5f 	bl	8005b78 <I2C_Master_ADDR>
 80050ba:	e067      	b.n	800518c <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80050bc:	69bb      	ldr	r3, [r7, #24]
 80050be:	f003 0304 	and.w	r3, r3, #4
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d036      	beq.n	8005134 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	685b      	ldr	r3, [r3, #4]
 80050cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80050d0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80050d4:	f000 80db 	beq.w	800528e <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80050d8:	69fb      	ldr	r3, [r7, #28]
 80050da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d00d      	beq.n	80050fe <HAL_I2C_EV_IRQHandler+0x10a>
 80050e2:	697b      	ldr	r3, [r7, #20]
 80050e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d008      	beq.n	80050fe <HAL_I2C_EV_IRQHandler+0x10a>
 80050ec:	69fb      	ldr	r3, [r7, #28]
 80050ee:	f003 0304 	and.w	r3, r3, #4
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d103      	bne.n	80050fe <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80050f6:	6878      	ldr	r0, [r7, #4]
 80050f8:	f000 f92d 	bl	8005356 <I2C_MasterTransmit_TXE>
 80050fc:	e046      	b.n	800518c <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80050fe:	69fb      	ldr	r3, [r7, #28]
 8005100:	f003 0304 	and.w	r3, r3, #4
 8005104:	2b00      	cmp	r3, #0
 8005106:	f000 80c2 	beq.w	800528e <HAL_I2C_EV_IRQHandler+0x29a>
 800510a:	697b      	ldr	r3, [r7, #20]
 800510c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005110:	2b00      	cmp	r3, #0
 8005112:	f000 80bc 	beq.w	800528e <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8005116:	7bbb      	ldrb	r3, [r7, #14]
 8005118:	2b21      	cmp	r3, #33	@ 0x21
 800511a:	d103      	bne.n	8005124 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800511c:	6878      	ldr	r0, [r7, #4]
 800511e:	f000 f9b6 	bl	800548e <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005122:	e0b4      	b.n	800528e <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8005124:	7bfb      	ldrb	r3, [r7, #15]
 8005126:	2b40      	cmp	r3, #64	@ 0x40
 8005128:	f040 80b1 	bne.w	800528e <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800512c:	6878      	ldr	r0, [r7, #4]
 800512e:	f000 fa24 	bl	800557a <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005132:	e0ac      	b.n	800528e <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800513e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005142:	f000 80a4 	beq.w	800528e <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005146:	69fb      	ldr	r3, [r7, #28]
 8005148:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800514c:	2b00      	cmp	r3, #0
 800514e:	d00d      	beq.n	800516c <HAL_I2C_EV_IRQHandler+0x178>
 8005150:	697b      	ldr	r3, [r7, #20]
 8005152:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005156:	2b00      	cmp	r3, #0
 8005158:	d008      	beq.n	800516c <HAL_I2C_EV_IRQHandler+0x178>
 800515a:	69fb      	ldr	r3, [r7, #28]
 800515c:	f003 0304 	and.w	r3, r3, #4
 8005160:	2b00      	cmp	r3, #0
 8005162:	d103      	bne.n	800516c <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8005164:	6878      	ldr	r0, [r7, #4]
 8005166:	f000 faa0 	bl	80056aa <I2C_MasterReceive_RXNE>
 800516a:	e00f      	b.n	800518c <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800516c:	69fb      	ldr	r3, [r7, #28]
 800516e:	f003 0304 	and.w	r3, r3, #4
 8005172:	2b00      	cmp	r3, #0
 8005174:	f000 808b 	beq.w	800528e <HAL_I2C_EV_IRQHandler+0x29a>
 8005178:	697b      	ldr	r3, [r7, #20]
 800517a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800517e:	2b00      	cmp	r3, #0
 8005180:	f000 8085 	beq.w	800528e <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8005184:	6878      	ldr	r0, [r7, #4]
 8005186:	f000 fb58 	bl	800583a <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800518a:	e080      	b.n	800528e <HAL_I2C_EV_IRQHandler+0x29a>
 800518c:	e07f      	b.n	800528e <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005192:	2b00      	cmp	r3, #0
 8005194:	d004      	beq.n	80051a0 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	695b      	ldr	r3, [r3, #20]
 800519c:	61fb      	str	r3, [r7, #28]
 800519e:	e007      	b.n	80051b0 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	699b      	ldr	r3, [r3, #24]
 80051a6:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	695b      	ldr	r3, [r3, #20]
 80051ae:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80051b0:	69fb      	ldr	r3, [r7, #28]
 80051b2:	f003 0302 	and.w	r3, r3, #2
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d011      	beq.n	80051de <HAL_I2C_EV_IRQHandler+0x1ea>
 80051ba:	697b      	ldr	r3, [r7, #20]
 80051bc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d00c      	beq.n	80051de <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d003      	beq.n	80051d4 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	699b      	ldr	r3, [r3, #24]
 80051d2:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80051d4:	69b9      	ldr	r1, [r7, #24]
 80051d6:	6878      	ldr	r0, [r7, #4]
 80051d8:	f000 ff25 	bl	8006026 <I2C_Slave_ADDR>
 80051dc:	e05a      	b.n	8005294 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80051de:	69fb      	ldr	r3, [r7, #28]
 80051e0:	f003 0310 	and.w	r3, r3, #16
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d008      	beq.n	80051fa <HAL_I2C_EV_IRQHandler+0x206>
 80051e8:	697b      	ldr	r3, [r7, #20]
 80051ea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d003      	beq.n	80051fa <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 80051f2:	6878      	ldr	r0, [r7, #4]
 80051f4:	f000 ff60 	bl	80060b8 <I2C_Slave_STOPF>
 80051f8:	e04c      	b.n	8005294 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80051fa:	7bbb      	ldrb	r3, [r7, #14]
 80051fc:	2b21      	cmp	r3, #33	@ 0x21
 80051fe:	d002      	beq.n	8005206 <HAL_I2C_EV_IRQHandler+0x212>
 8005200:	7bbb      	ldrb	r3, [r7, #14]
 8005202:	2b29      	cmp	r3, #41	@ 0x29
 8005204:	d120      	bne.n	8005248 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005206:	69fb      	ldr	r3, [r7, #28]
 8005208:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800520c:	2b00      	cmp	r3, #0
 800520e:	d00d      	beq.n	800522c <HAL_I2C_EV_IRQHandler+0x238>
 8005210:	697b      	ldr	r3, [r7, #20]
 8005212:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005216:	2b00      	cmp	r3, #0
 8005218:	d008      	beq.n	800522c <HAL_I2C_EV_IRQHandler+0x238>
 800521a:	69fb      	ldr	r3, [r7, #28]
 800521c:	f003 0304 	and.w	r3, r3, #4
 8005220:	2b00      	cmp	r3, #0
 8005222:	d103      	bne.n	800522c <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8005224:	6878      	ldr	r0, [r7, #4]
 8005226:	f000 fe42 	bl	8005eae <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800522a:	e032      	b.n	8005292 <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800522c:	69fb      	ldr	r3, [r7, #28]
 800522e:	f003 0304 	and.w	r3, r3, #4
 8005232:	2b00      	cmp	r3, #0
 8005234:	d02d      	beq.n	8005292 <HAL_I2C_EV_IRQHandler+0x29e>
 8005236:	697b      	ldr	r3, [r7, #20]
 8005238:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800523c:	2b00      	cmp	r3, #0
 800523e:	d028      	beq.n	8005292 <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8005240:	6878      	ldr	r0, [r7, #4]
 8005242:	f000 fe71 	bl	8005f28 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005246:	e024      	b.n	8005292 <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005248:	69fb      	ldr	r3, [r7, #28]
 800524a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800524e:	2b00      	cmp	r3, #0
 8005250:	d00d      	beq.n	800526e <HAL_I2C_EV_IRQHandler+0x27a>
 8005252:	697b      	ldr	r3, [r7, #20]
 8005254:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005258:	2b00      	cmp	r3, #0
 800525a:	d008      	beq.n	800526e <HAL_I2C_EV_IRQHandler+0x27a>
 800525c:	69fb      	ldr	r3, [r7, #28]
 800525e:	f003 0304 	and.w	r3, r3, #4
 8005262:	2b00      	cmp	r3, #0
 8005264:	d103      	bne.n	800526e <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8005266:	6878      	ldr	r0, [r7, #4]
 8005268:	f000 fe7e 	bl	8005f68 <I2C_SlaveReceive_RXNE>
 800526c:	e012      	b.n	8005294 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800526e:	69fb      	ldr	r3, [r7, #28]
 8005270:	f003 0304 	and.w	r3, r3, #4
 8005274:	2b00      	cmp	r3, #0
 8005276:	d00d      	beq.n	8005294 <HAL_I2C_EV_IRQHandler+0x2a0>
 8005278:	697b      	ldr	r3, [r7, #20]
 800527a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800527e:	2b00      	cmp	r3, #0
 8005280:	d008      	beq.n	8005294 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8005282:	6878      	ldr	r0, [r7, #4]
 8005284:	f000 feae 	bl	8005fe4 <I2C_SlaveReceive_BTF>
 8005288:	e004      	b.n	8005294 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 800528a:	bf00      	nop
 800528c:	e002      	b.n	8005294 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800528e:	bf00      	nop
 8005290:	e000      	b.n	8005294 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005292:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8005294:	3720      	adds	r7, #32
 8005296:	46bd      	mov	sp, r7
 8005298:	bd80      	pop	{r7, pc}

0800529a <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800529a:	b480      	push	{r7}
 800529c:	b083      	sub	sp, #12
 800529e:	af00      	add	r7, sp, #0
 80052a0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80052a2:	bf00      	nop
 80052a4:	370c      	adds	r7, #12
 80052a6:	46bd      	mov	sp, r7
 80052a8:	bc80      	pop	{r7}
 80052aa:	4770      	bx	lr

080052ac <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80052ac:	b480      	push	{r7}
 80052ae:	b083      	sub	sp, #12
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80052b4:	bf00      	nop
 80052b6:	370c      	adds	r7, #12
 80052b8:	46bd      	mov	sp, r7
 80052ba:	bc80      	pop	{r7}
 80052bc:	4770      	bx	lr

080052be <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80052be:	b480      	push	{r7}
 80052c0:	b083      	sub	sp, #12
 80052c2:	af00      	add	r7, sp, #0
 80052c4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80052c6:	bf00      	nop
 80052c8:	370c      	adds	r7, #12
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bc80      	pop	{r7}
 80052ce:	4770      	bx	lr

080052d0 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80052d0:	b480      	push	{r7}
 80052d2:	b083      	sub	sp, #12
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80052d8:	bf00      	nop
 80052da:	370c      	adds	r7, #12
 80052dc:	46bd      	mov	sp, r7
 80052de:	bc80      	pop	{r7}
 80052e0:	4770      	bx	lr

080052e2 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80052e2:	b480      	push	{r7}
 80052e4:	b083      	sub	sp, #12
 80052e6:	af00      	add	r7, sp, #0
 80052e8:	6078      	str	r0, [r7, #4]
 80052ea:	460b      	mov	r3, r1
 80052ec:	70fb      	strb	r3, [r7, #3]
 80052ee:	4613      	mov	r3, r2
 80052f0:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80052f2:	bf00      	nop
 80052f4:	370c      	adds	r7, #12
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bc80      	pop	{r7}
 80052fa:	4770      	bx	lr

080052fc <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80052fc:	b480      	push	{r7}
 80052fe:	b083      	sub	sp, #12
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8005304:	bf00      	nop
 8005306:	370c      	adds	r7, #12
 8005308:	46bd      	mov	sp, r7
 800530a:	bc80      	pop	{r7}
 800530c:	4770      	bx	lr

0800530e <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800530e:	b480      	push	{r7}
 8005310:	b083      	sub	sp, #12
 8005312:	af00      	add	r7, sp, #0
 8005314:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8005316:	bf00      	nop
 8005318:	370c      	adds	r7, #12
 800531a:	46bd      	mov	sp, r7
 800531c:	bc80      	pop	{r7}
 800531e:	4770      	bx	lr

08005320 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005320:	b480      	push	{r7}
 8005322:	b083      	sub	sp, #12
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8005328:	bf00      	nop
 800532a:	370c      	adds	r7, #12
 800532c:	46bd      	mov	sp, r7
 800532e:	bc80      	pop	{r7}
 8005330:	4770      	bx	lr

08005332 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005332:	b480      	push	{r7}
 8005334:	b083      	sub	sp, #12
 8005336:	af00      	add	r7, sp, #0
 8005338:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800533a:	bf00      	nop
 800533c:	370c      	adds	r7, #12
 800533e:	46bd      	mov	sp, r7
 8005340:	bc80      	pop	{r7}
 8005342:	4770      	bx	lr

08005344 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005344:	b480      	push	{r7}
 8005346:	b083      	sub	sp, #12
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800534c:	bf00      	nop
 800534e:	370c      	adds	r7, #12
 8005350:	46bd      	mov	sp, r7
 8005352:	bc80      	pop	{r7}
 8005354:	4770      	bx	lr

08005356 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005356:	b580      	push	{r7, lr}
 8005358:	b084      	sub	sp, #16
 800535a:	af00      	add	r7, sp, #0
 800535c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005364:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800536c:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005372:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005378:	2b00      	cmp	r3, #0
 800537a:	d150      	bne.n	800541e <I2C_MasterTransmit_TXE+0xc8>
 800537c:	7bfb      	ldrb	r3, [r7, #15]
 800537e:	2b21      	cmp	r3, #33	@ 0x21
 8005380:	d14d      	bne.n	800541e <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005382:	68bb      	ldr	r3, [r7, #8]
 8005384:	2b08      	cmp	r3, #8
 8005386:	d01d      	beq.n	80053c4 <I2C_MasterTransmit_TXE+0x6e>
 8005388:	68bb      	ldr	r3, [r7, #8]
 800538a:	2b20      	cmp	r3, #32
 800538c:	d01a      	beq.n	80053c4 <I2C_MasterTransmit_TXE+0x6e>
 800538e:	68bb      	ldr	r3, [r7, #8]
 8005390:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005394:	d016      	beq.n	80053c4 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	685a      	ldr	r2, [r3, #4]
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80053a4:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2211      	movs	r2, #17
 80053aa:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2200      	movs	r2, #0
 80053b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2220      	movs	r2, #32
 80053b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80053bc:	6878      	ldr	r0, [r7, #4]
 80053be:	f7ff ff6c 	bl	800529a <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80053c2:	e060      	b.n	8005486 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	685a      	ldr	r2, [r3, #4]
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80053d2:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	681a      	ldr	r2, [r3, #0]
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80053e2:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2200      	movs	r2, #0
 80053e8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2220      	movs	r2, #32
 80053ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80053f8:	b2db      	uxtb	r3, r3
 80053fa:	2b40      	cmp	r3, #64	@ 0x40
 80053fc:	d107      	bne.n	800540e <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2200      	movs	r2, #0
 8005402:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8005406:	6878      	ldr	r0, [r7, #4]
 8005408:	f7ff ff81 	bl	800530e <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800540c:	e03b      	b.n	8005486 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2200      	movs	r2, #0
 8005412:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005416:	6878      	ldr	r0, [r7, #4]
 8005418:	f7ff ff3f 	bl	800529a <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800541c:	e033      	b.n	8005486 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800541e:	7bfb      	ldrb	r3, [r7, #15]
 8005420:	2b21      	cmp	r3, #33	@ 0x21
 8005422:	d005      	beq.n	8005430 <I2C_MasterTransmit_TXE+0xda>
 8005424:	7bbb      	ldrb	r3, [r7, #14]
 8005426:	2b40      	cmp	r3, #64	@ 0x40
 8005428:	d12d      	bne.n	8005486 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800542a:	7bfb      	ldrb	r3, [r7, #15]
 800542c:	2b22      	cmp	r3, #34	@ 0x22
 800542e:	d12a      	bne.n	8005486 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005434:	b29b      	uxth	r3, r3
 8005436:	2b00      	cmp	r3, #0
 8005438:	d108      	bne.n	800544c <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	685a      	ldr	r2, [r3, #4]
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005448:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800544a:	e01c      	b.n	8005486 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005452:	b2db      	uxtb	r3, r3
 8005454:	2b40      	cmp	r3, #64	@ 0x40
 8005456:	d103      	bne.n	8005460 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8005458:	6878      	ldr	r0, [r7, #4]
 800545a:	f000 f88e 	bl	800557a <I2C_MemoryTransmit_TXE_BTF>
}
 800545e:	e012      	b.n	8005486 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005464:	781a      	ldrb	r2, [r3, #0]
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005470:	1c5a      	adds	r2, r3, #1
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800547a:	b29b      	uxth	r3, r3
 800547c:	3b01      	subs	r3, #1
 800547e:	b29a      	uxth	r2, r3
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8005484:	e7ff      	b.n	8005486 <I2C_MasterTransmit_TXE+0x130>
 8005486:	bf00      	nop
 8005488:	3710      	adds	r7, #16
 800548a:	46bd      	mov	sp, r7
 800548c:	bd80      	pop	{r7, pc}

0800548e <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800548e:	b580      	push	{r7, lr}
 8005490:	b084      	sub	sp, #16
 8005492:	af00      	add	r7, sp, #0
 8005494:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800549a:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80054a2:	b2db      	uxtb	r3, r3
 80054a4:	2b21      	cmp	r3, #33	@ 0x21
 80054a6:	d164      	bne.n	8005572 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054ac:	b29b      	uxth	r3, r3
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d012      	beq.n	80054d8 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054b6:	781a      	ldrb	r2, [r3, #0]
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054c2:	1c5a      	adds	r2, r3, #1
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054cc:	b29b      	uxth	r3, r3
 80054ce:	3b01      	subs	r3, #1
 80054d0:	b29a      	uxth	r2, r3
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80054d6:	e04c      	b.n	8005572 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	2b08      	cmp	r3, #8
 80054dc:	d01d      	beq.n	800551a <I2C_MasterTransmit_BTF+0x8c>
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	2b20      	cmp	r3, #32
 80054e2:	d01a      	beq.n	800551a <I2C_MasterTransmit_BTF+0x8c>
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80054ea:	d016      	beq.n	800551a <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	685a      	ldr	r2, [r3, #4]
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80054fa:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2211      	movs	r2, #17
 8005500:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2200      	movs	r2, #0
 8005506:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2220      	movs	r2, #32
 800550e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005512:	6878      	ldr	r0, [r7, #4]
 8005514:	f7ff fec1 	bl	800529a <HAL_I2C_MasterTxCpltCallback>
}
 8005518:	e02b      	b.n	8005572 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	685a      	ldr	r2, [r3, #4]
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005528:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	681a      	ldr	r2, [r3, #0]
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005538:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2200      	movs	r2, #0
 800553e:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2220      	movs	r2, #32
 8005544:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800554e:	b2db      	uxtb	r3, r3
 8005550:	2b40      	cmp	r3, #64	@ 0x40
 8005552:	d107      	bne.n	8005564 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2200      	movs	r2, #0
 8005558:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800555c:	6878      	ldr	r0, [r7, #4]
 800555e:	f7ff fed6 	bl	800530e <HAL_I2C_MemTxCpltCallback>
}
 8005562:	e006      	b.n	8005572 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2200      	movs	r2, #0
 8005568:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800556c:	6878      	ldr	r0, [r7, #4]
 800556e:	f7ff fe94 	bl	800529a <HAL_I2C_MasterTxCpltCallback>
}
 8005572:	bf00      	nop
 8005574:	3710      	adds	r7, #16
 8005576:	46bd      	mov	sp, r7
 8005578:	bd80      	pop	{r7, pc}

0800557a <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800557a:	b580      	push	{r7, lr}
 800557c:	b084      	sub	sp, #16
 800557e:	af00      	add	r7, sp, #0
 8005580:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005588:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800558e:	2b00      	cmp	r3, #0
 8005590:	d11d      	bne.n	80055ce <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005596:	2b01      	cmp	r3, #1
 8005598:	d10b      	bne.n	80055b2 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800559e:	b2da      	uxtb	r2, r3
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80055aa:	1c9a      	adds	r2, r3, #2
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 80055b0:	e077      	b.n	80056a2 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80055b6:	b29b      	uxth	r3, r3
 80055b8:	121b      	asrs	r3, r3, #8
 80055ba:	b2da      	uxtb	r2, r3
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80055c6:	1c5a      	adds	r2, r3, #1
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80055cc:	e069      	b.n	80056a2 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80055d2:	2b01      	cmp	r3, #1
 80055d4:	d10b      	bne.n	80055ee <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80055da:	b2da      	uxtb	r2, r3
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80055e6:	1c5a      	adds	r2, r3, #1
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80055ec:	e059      	b.n	80056a2 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80055f2:	2b02      	cmp	r3, #2
 80055f4:	d152      	bne.n	800569c <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80055f6:	7bfb      	ldrb	r3, [r7, #15]
 80055f8:	2b22      	cmp	r3, #34	@ 0x22
 80055fa:	d10d      	bne.n	8005618 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	681a      	ldr	r2, [r3, #0]
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800560a:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005610:	1c5a      	adds	r2, r3, #1
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8005616:	e044      	b.n	80056a2 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800561c:	b29b      	uxth	r3, r3
 800561e:	2b00      	cmp	r3, #0
 8005620:	d015      	beq.n	800564e <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8005622:	7bfb      	ldrb	r3, [r7, #15]
 8005624:	2b21      	cmp	r3, #33	@ 0x21
 8005626:	d112      	bne.n	800564e <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800562c:	781a      	ldrb	r2, [r3, #0]
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005638:	1c5a      	adds	r2, r3, #1
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005642:	b29b      	uxth	r3, r3
 8005644:	3b01      	subs	r3, #1
 8005646:	b29a      	uxth	r2, r3
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800564c:	e029      	b.n	80056a2 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005652:	b29b      	uxth	r3, r3
 8005654:	2b00      	cmp	r3, #0
 8005656:	d124      	bne.n	80056a2 <I2C_MemoryTransmit_TXE_BTF+0x128>
 8005658:	7bfb      	ldrb	r3, [r7, #15]
 800565a:	2b21      	cmp	r3, #33	@ 0x21
 800565c:	d121      	bne.n	80056a2 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	685a      	ldr	r2, [r3, #4]
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800566c:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	681a      	ldr	r2, [r3, #0]
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800567c:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2200      	movs	r2, #0
 8005682:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2220      	movs	r2, #32
 8005688:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2200      	movs	r2, #0
 8005690:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8005694:	6878      	ldr	r0, [r7, #4]
 8005696:	f7ff fe3a 	bl	800530e <HAL_I2C_MemTxCpltCallback>
}
 800569a:	e002      	b.n	80056a2 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 800569c:	6878      	ldr	r0, [r7, #4]
 800569e:	f7ff f829 	bl	80046f4 <I2C_Flush_DR>
}
 80056a2:	bf00      	nop
 80056a4:	3710      	adds	r7, #16
 80056a6:	46bd      	mov	sp, r7
 80056a8:	bd80      	pop	{r7, pc}

080056aa <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80056aa:	b580      	push	{r7, lr}
 80056ac:	b084      	sub	sp, #16
 80056ae:	af00      	add	r7, sp, #0
 80056b0:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80056b8:	b2db      	uxtb	r3, r3
 80056ba:	2b22      	cmp	r3, #34	@ 0x22
 80056bc:	f040 80b9 	bne.w	8005832 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056c4:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056ca:	b29b      	uxth	r3, r3
 80056cc:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 80056ce:	68bb      	ldr	r3, [r7, #8]
 80056d0:	2b03      	cmp	r3, #3
 80056d2:	d921      	bls.n	8005718 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	691a      	ldr	r2, [r3, #16]
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056de:	b2d2      	uxtb	r2, r2
 80056e0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056e6:	1c5a      	adds	r2, r3, #1
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056f0:	b29b      	uxth	r3, r3
 80056f2:	3b01      	subs	r3, #1
 80056f4:	b29a      	uxth	r2, r3
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056fe:	b29b      	uxth	r3, r3
 8005700:	2b03      	cmp	r3, #3
 8005702:	f040 8096 	bne.w	8005832 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	685a      	ldr	r2, [r3, #4]
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005714:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8005716:	e08c      	b.n	8005832 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800571c:	2b02      	cmp	r3, #2
 800571e:	d07f      	beq.n	8005820 <I2C_MasterReceive_RXNE+0x176>
 8005720:	68bb      	ldr	r3, [r7, #8]
 8005722:	2b01      	cmp	r3, #1
 8005724:	d002      	beq.n	800572c <I2C_MasterReceive_RXNE+0x82>
 8005726:	68bb      	ldr	r3, [r7, #8]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d179      	bne.n	8005820 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800572c:	6878      	ldr	r0, [r7, #4]
 800572e:	f001 fb77 	bl	8006e20 <I2C_WaitOnSTOPRequestThroughIT>
 8005732:	4603      	mov	r3, r0
 8005734:	2b00      	cmp	r3, #0
 8005736:	d14c      	bne.n	80057d2 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	681a      	ldr	r2, [r3, #0]
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005746:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	685a      	ldr	r2, [r3, #4]
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005756:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	691a      	ldr	r2, [r3, #16]
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005762:	b2d2      	uxtb	r2, r2
 8005764:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800576a:	1c5a      	adds	r2, r3, #1
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005774:	b29b      	uxth	r3, r3
 8005776:	3b01      	subs	r3, #1
 8005778:	b29a      	uxth	r2, r3
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2220      	movs	r2, #32
 8005782:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800578c:	b2db      	uxtb	r3, r3
 800578e:	2b40      	cmp	r3, #64	@ 0x40
 8005790:	d10a      	bne.n	80057a8 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2200      	movs	r2, #0
 8005796:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2200      	movs	r2, #0
 800579e:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80057a0:	6878      	ldr	r0, [r7, #4]
 80057a2:	f7ff fdbd 	bl	8005320 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80057a6:	e044      	b.n	8005832 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2200      	movs	r2, #0
 80057ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	2b08      	cmp	r3, #8
 80057b4:	d002      	beq.n	80057bc <I2C_MasterReceive_RXNE+0x112>
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	2b20      	cmp	r3, #32
 80057ba:	d103      	bne.n	80057c4 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2200      	movs	r2, #0
 80057c0:	631a      	str	r2, [r3, #48]	@ 0x30
 80057c2:	e002      	b.n	80057ca <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2212      	movs	r2, #18
 80057c8:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80057ca:	6878      	ldr	r0, [r7, #4]
 80057cc:	f7ff fd6e 	bl	80052ac <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80057d0:	e02f      	b.n	8005832 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	685a      	ldr	r2, [r3, #4]
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80057e0:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	691a      	ldr	r2, [r3, #16]
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057ec:	b2d2      	uxtb	r2, r2
 80057ee:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057f4:	1c5a      	adds	r2, r3, #1
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057fe:	b29b      	uxth	r3, r3
 8005800:	3b01      	subs	r3, #1
 8005802:	b29a      	uxth	r2, r3
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2220      	movs	r2, #32
 800580c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2200      	movs	r2, #0
 8005814:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8005818:	6878      	ldr	r0, [r7, #4]
 800581a:	f7ff fd8a 	bl	8005332 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800581e:	e008      	b.n	8005832 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	685a      	ldr	r2, [r3, #4]
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800582e:	605a      	str	r2, [r3, #4]
}
 8005830:	e7ff      	b.n	8005832 <I2C_MasterReceive_RXNE+0x188>
 8005832:	bf00      	nop
 8005834:	3710      	adds	r7, #16
 8005836:	46bd      	mov	sp, r7
 8005838:	bd80      	pop	{r7, pc}

0800583a <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800583a:	b580      	push	{r7, lr}
 800583c:	b084      	sub	sp, #16
 800583e:	af00      	add	r7, sp, #0
 8005840:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005846:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800584c:	b29b      	uxth	r3, r3
 800584e:	2b04      	cmp	r3, #4
 8005850:	d11b      	bne.n	800588a <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	685a      	ldr	r2, [r3, #4]
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005860:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	691a      	ldr	r2, [r3, #16]
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800586c:	b2d2      	uxtb	r2, r2
 800586e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005874:	1c5a      	adds	r2, r3, #1
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800587e:	b29b      	uxth	r3, r3
 8005880:	3b01      	subs	r3, #1
 8005882:	b29a      	uxth	r2, r3
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8005888:	e0c4      	b.n	8005a14 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800588e:	b29b      	uxth	r3, r3
 8005890:	2b03      	cmp	r3, #3
 8005892:	d129      	bne.n	80058e8 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	685a      	ldr	r2, [r3, #4]
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80058a2:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	2b04      	cmp	r3, #4
 80058a8:	d00a      	beq.n	80058c0 <I2C_MasterReceive_BTF+0x86>
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	2b02      	cmp	r3, #2
 80058ae:	d007      	beq.n	80058c0 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	681a      	ldr	r2, [r3, #0]
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80058be:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	691a      	ldr	r2, [r3, #16]
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058ca:	b2d2      	uxtb	r2, r2
 80058cc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058d2:	1c5a      	adds	r2, r3, #1
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058dc:	b29b      	uxth	r3, r3
 80058de:	3b01      	subs	r3, #1
 80058e0:	b29a      	uxth	r2, r3
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80058e6:	e095      	b.n	8005a14 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058ec:	b29b      	uxth	r3, r3
 80058ee:	2b02      	cmp	r3, #2
 80058f0:	d17d      	bne.n	80059ee <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	2b01      	cmp	r3, #1
 80058f6:	d002      	beq.n	80058fe <I2C_MasterReceive_BTF+0xc4>
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	2b10      	cmp	r3, #16
 80058fc:	d108      	bne.n	8005910 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	681a      	ldr	r2, [r3, #0]
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800590c:	601a      	str	r2, [r3, #0]
 800590e:	e016      	b.n	800593e <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	2b04      	cmp	r3, #4
 8005914:	d002      	beq.n	800591c <I2C_MasterReceive_BTF+0xe2>
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	2b02      	cmp	r3, #2
 800591a:	d108      	bne.n	800592e <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	681a      	ldr	r2, [r3, #0]
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800592a:	601a      	str	r2, [r3, #0]
 800592c:	e007      	b.n	800593e <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	681a      	ldr	r2, [r3, #0]
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800593c:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	691a      	ldr	r2, [r3, #16]
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005948:	b2d2      	uxtb	r2, r2
 800594a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005950:	1c5a      	adds	r2, r3, #1
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800595a:	b29b      	uxth	r3, r3
 800595c:	3b01      	subs	r3, #1
 800595e:	b29a      	uxth	r2, r3
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	691a      	ldr	r2, [r3, #16]
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800596e:	b2d2      	uxtb	r2, r2
 8005970:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005976:	1c5a      	adds	r2, r3, #1
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005980:	b29b      	uxth	r3, r3
 8005982:	3b01      	subs	r3, #1
 8005984:	b29a      	uxth	r2, r3
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	685a      	ldr	r2, [r3, #4]
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8005998:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2220      	movs	r2, #32
 800599e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80059a8:	b2db      	uxtb	r3, r3
 80059aa:	2b40      	cmp	r3, #64	@ 0x40
 80059ac:	d10a      	bne.n	80059c4 <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2200      	movs	r2, #0
 80059b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2200      	movs	r2, #0
 80059ba:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80059bc:	6878      	ldr	r0, [r7, #4]
 80059be:	f7ff fcaf 	bl	8005320 <HAL_I2C_MemRxCpltCallback>
}
 80059c2:	e027      	b.n	8005a14 <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2200      	movs	r2, #0
 80059c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	2b08      	cmp	r3, #8
 80059d0:	d002      	beq.n	80059d8 <I2C_MasterReceive_BTF+0x19e>
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	2b20      	cmp	r3, #32
 80059d6:	d103      	bne.n	80059e0 <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2200      	movs	r2, #0
 80059dc:	631a      	str	r2, [r3, #48]	@ 0x30
 80059de:	e002      	b.n	80059e6 <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2212      	movs	r2, #18
 80059e4:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80059e6:	6878      	ldr	r0, [r7, #4]
 80059e8:	f7ff fc60 	bl	80052ac <HAL_I2C_MasterRxCpltCallback>
}
 80059ec:	e012      	b.n	8005a14 <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	691a      	ldr	r2, [r3, #16]
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059f8:	b2d2      	uxtb	r2, r2
 80059fa:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a00:	1c5a      	adds	r2, r3, #1
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a0a:	b29b      	uxth	r3, r3
 8005a0c:	3b01      	subs	r3, #1
 8005a0e:	b29a      	uxth	r2, r3
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8005a14:	bf00      	nop
 8005a16:	3710      	adds	r7, #16
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	bd80      	pop	{r7, pc}

08005a1c <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8005a1c:	b480      	push	{r7}
 8005a1e:	b083      	sub	sp, #12
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005a2a:	b2db      	uxtb	r3, r3
 8005a2c:	2b40      	cmp	r3, #64	@ 0x40
 8005a2e:	d117      	bne.n	8005a60 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d109      	bne.n	8005a4c <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a3c:	b2db      	uxtb	r3, r3
 8005a3e:	461a      	mov	r2, r3
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005a48:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8005a4a:	e067      	b.n	8005b1c <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a50:	b2db      	uxtb	r3, r3
 8005a52:	f043 0301 	orr.w	r3, r3, #1
 8005a56:	b2da      	uxtb	r2, r3
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	611a      	str	r2, [r3, #16]
}
 8005a5e:	e05d      	b.n	8005b1c <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	691b      	ldr	r3, [r3, #16]
 8005a64:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005a68:	d133      	bne.n	8005ad2 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005a70:	b2db      	uxtb	r3, r3
 8005a72:	2b21      	cmp	r3, #33	@ 0x21
 8005a74:	d109      	bne.n	8005a8a <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a7a:	b2db      	uxtb	r3, r3
 8005a7c:	461a      	mov	r2, r3
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005a86:	611a      	str	r2, [r3, #16]
 8005a88:	e008      	b.n	8005a9c <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a8e:	b2db      	uxtb	r3, r3
 8005a90:	f043 0301 	orr.w	r3, r3, #1
 8005a94:	b2da      	uxtb	r2, r3
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d004      	beq.n	8005aae <I2C_Master_SB+0x92>
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005aa8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d108      	bne.n	8005ac0 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d032      	beq.n	8005b1c <I2C_Master_SB+0x100>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005aba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d02d      	beq.n	8005b1c <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	685a      	ldr	r2, [r3, #4]
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005ace:	605a      	str	r2, [r3, #4]
}
 8005ad0:	e024      	b.n	8005b1c <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d10e      	bne.n	8005af8 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ade:	b29b      	uxth	r3, r3
 8005ae0:	11db      	asrs	r3, r3, #7
 8005ae2:	b2db      	uxtb	r3, r3
 8005ae4:	f003 0306 	and.w	r3, r3, #6
 8005ae8:	b2db      	uxtb	r3, r3
 8005aea:	f063 030f 	orn	r3, r3, #15
 8005aee:	b2da      	uxtb	r2, r3
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	611a      	str	r2, [r3, #16]
}
 8005af6:	e011      	b.n	8005b1c <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005afc:	2b01      	cmp	r3, #1
 8005afe:	d10d      	bne.n	8005b1c <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b04:	b29b      	uxth	r3, r3
 8005b06:	11db      	asrs	r3, r3, #7
 8005b08:	b2db      	uxtb	r3, r3
 8005b0a:	f003 0306 	and.w	r3, r3, #6
 8005b0e:	b2db      	uxtb	r3, r3
 8005b10:	f063 030e 	orn	r3, r3, #14
 8005b14:	b2da      	uxtb	r2, r3
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	611a      	str	r2, [r3, #16]
}
 8005b1c:	bf00      	nop
 8005b1e:	370c      	adds	r7, #12
 8005b20:	46bd      	mov	sp, r7
 8005b22:	bc80      	pop	{r7}
 8005b24:	4770      	bx	lr

08005b26 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8005b26:	b480      	push	{r7}
 8005b28:	b083      	sub	sp, #12
 8005b2a:	af00      	add	r7, sp, #0
 8005b2c:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b32:	b2da      	uxtb	r2, r3
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d004      	beq.n	8005b4c <I2C_Master_ADD10+0x26>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d108      	bne.n	8005b5e <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d00c      	beq.n	8005b6e <I2C_Master_ADD10+0x48>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d007      	beq.n	8005b6e <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	685a      	ldr	r2, [r3, #4]
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005b6c:	605a      	str	r2, [r3, #4]
  }
}
 8005b6e:	bf00      	nop
 8005b70:	370c      	adds	r7, #12
 8005b72:	46bd      	mov	sp, r7
 8005b74:	bc80      	pop	{r7}
 8005b76:	4770      	bx	lr

08005b78 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8005b78:	b480      	push	{r7}
 8005b7a:	b091      	sub	sp, #68	@ 0x44
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005b86:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b8e:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b94:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b9c:	b2db      	uxtb	r3, r3
 8005b9e:	2b22      	cmp	r3, #34	@ 0x22
 8005ba0:	f040 8174 	bne.w	8005e8c <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d10f      	bne.n	8005bcc <I2C_Master_ADDR+0x54>
 8005bac:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8005bb0:	2b40      	cmp	r3, #64	@ 0x40
 8005bb2:	d10b      	bne.n	8005bcc <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	633b      	str	r3, [r7, #48]	@ 0x30
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	695b      	ldr	r3, [r3, #20]
 8005bbe:	633b      	str	r3, [r7, #48]	@ 0x30
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	699b      	ldr	r3, [r3, #24]
 8005bc6:	633b      	str	r3, [r7, #48]	@ 0x30
 8005bc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bca:	e16b      	b.n	8005ea4 <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d11d      	bne.n	8005c10 <I2C_Master_ADDR+0x98>
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	691b      	ldr	r3, [r3, #16]
 8005bd8:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8005bdc:	d118      	bne.n	8005c10 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005bde:	2300      	movs	r3, #0
 8005be0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	695b      	ldr	r3, [r3, #20]
 8005be8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	699b      	ldr	r3, [r3, #24]
 8005bf0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005bf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	681a      	ldr	r2, [r3, #0]
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005c02:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c08:	1c5a      	adds	r2, r3, #1
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	651a      	str	r2, [r3, #80]	@ 0x50
 8005c0e:	e149      	b.n	8005ea4 <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c14:	b29b      	uxth	r3, r3
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d113      	bne.n	8005c42 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	695b      	ldr	r3, [r3, #20]
 8005c24:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	699b      	ldr	r3, [r3, #24]
 8005c2c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005c2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	681a      	ldr	r2, [r3, #0]
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005c3e:	601a      	str	r2, [r3, #0]
 8005c40:	e120      	b.n	8005e84 <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c46:	b29b      	uxth	r3, r3
 8005c48:	2b01      	cmp	r3, #1
 8005c4a:	f040 808a 	bne.w	8005d62 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8005c4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c50:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005c54:	d137      	bne.n	8005cc6 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	681a      	ldr	r2, [r3, #0]
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005c64:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	685b      	ldr	r3, [r3, #4]
 8005c6c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005c70:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005c74:	d113      	bne.n	8005c9e <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	681a      	ldr	r2, [r3, #0]
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005c84:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c86:	2300      	movs	r3, #0
 8005c88:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	695b      	ldr	r3, [r3, #20]
 8005c90:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	699b      	ldr	r3, [r3, #24]
 8005c98:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c9c:	e0f2      	b.n	8005e84 <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	623b      	str	r3, [r7, #32]
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	695b      	ldr	r3, [r3, #20]
 8005ca8:	623b      	str	r3, [r7, #32]
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	699b      	ldr	r3, [r3, #24]
 8005cb0:	623b      	str	r3, [r7, #32]
 8005cb2:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	681a      	ldr	r2, [r3, #0]
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005cc2:	601a      	str	r2, [r3, #0]
 8005cc4:	e0de      	b.n	8005e84 <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8005cc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cc8:	2b08      	cmp	r3, #8
 8005cca:	d02e      	beq.n	8005d2a <I2C_Master_ADDR+0x1b2>
 8005ccc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cce:	2b20      	cmp	r3, #32
 8005cd0:	d02b      	beq.n	8005d2a <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8005cd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005cd4:	2b12      	cmp	r3, #18
 8005cd6:	d102      	bne.n	8005cde <I2C_Master_ADDR+0x166>
 8005cd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cda:	2b01      	cmp	r3, #1
 8005cdc:	d125      	bne.n	8005d2a <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005cde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ce0:	2b04      	cmp	r3, #4
 8005ce2:	d00e      	beq.n	8005d02 <I2C_Master_ADDR+0x18a>
 8005ce4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ce6:	2b02      	cmp	r3, #2
 8005ce8:	d00b      	beq.n	8005d02 <I2C_Master_ADDR+0x18a>
 8005cea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cec:	2b10      	cmp	r3, #16
 8005cee:	d008      	beq.n	8005d02 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	681a      	ldr	r2, [r3, #0]
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005cfe:	601a      	str	r2, [r3, #0]
 8005d00:	e007      	b.n	8005d12 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	681a      	ldr	r2, [r3, #0]
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005d10:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d12:	2300      	movs	r3, #0
 8005d14:	61fb      	str	r3, [r7, #28]
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	695b      	ldr	r3, [r3, #20]
 8005d1c:	61fb      	str	r3, [r7, #28]
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	699b      	ldr	r3, [r3, #24]
 8005d24:	61fb      	str	r3, [r7, #28]
 8005d26:	69fb      	ldr	r3, [r7, #28]
 8005d28:	e0ac      	b.n	8005e84 <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	681a      	ldr	r2, [r3, #0]
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005d38:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	61bb      	str	r3, [r7, #24]
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	695b      	ldr	r3, [r3, #20]
 8005d44:	61bb      	str	r3, [r7, #24]
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	699b      	ldr	r3, [r3, #24]
 8005d4c:	61bb      	str	r3, [r7, #24]
 8005d4e:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	681a      	ldr	r2, [r3, #0]
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005d5e:	601a      	str	r2, [r3, #0]
 8005d60:	e090      	b.n	8005e84 <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d66:	b29b      	uxth	r3, r3
 8005d68:	2b02      	cmp	r3, #2
 8005d6a:	d158      	bne.n	8005e1e <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005d6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d6e:	2b04      	cmp	r3, #4
 8005d70:	d021      	beq.n	8005db6 <I2C_Master_ADDR+0x23e>
 8005d72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d74:	2b02      	cmp	r3, #2
 8005d76:	d01e      	beq.n	8005db6 <I2C_Master_ADDR+0x23e>
 8005d78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d7a:	2b10      	cmp	r3, #16
 8005d7c:	d01b      	beq.n	8005db6 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	681a      	ldr	r2, [r3, #0]
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005d8c:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d8e:	2300      	movs	r3, #0
 8005d90:	617b      	str	r3, [r7, #20]
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	695b      	ldr	r3, [r3, #20]
 8005d98:	617b      	str	r3, [r7, #20]
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	699b      	ldr	r3, [r3, #24]
 8005da0:	617b      	str	r3, [r7, #20]
 8005da2:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	681a      	ldr	r2, [r3, #0]
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005db2:	601a      	str	r2, [r3, #0]
 8005db4:	e012      	b.n	8005ddc <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	681a      	ldr	r2, [r3, #0]
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005dc4:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	613b      	str	r3, [r7, #16]
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	695b      	ldr	r3, [r3, #20]
 8005dd0:	613b      	str	r3, [r7, #16]
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	699b      	ldr	r3, [r3, #24]
 8005dd8:	613b      	str	r3, [r7, #16]
 8005dda:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	685b      	ldr	r3, [r3, #4]
 8005de2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005de6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005dea:	d14b      	bne.n	8005e84 <I2C_Master_ADDR+0x30c>
 8005dec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dee:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005df2:	d00b      	beq.n	8005e0c <I2C_Master_ADDR+0x294>
 8005df4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005df6:	2b01      	cmp	r3, #1
 8005df8:	d008      	beq.n	8005e0c <I2C_Master_ADDR+0x294>
 8005dfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dfc:	2b08      	cmp	r3, #8
 8005dfe:	d005      	beq.n	8005e0c <I2C_Master_ADDR+0x294>
 8005e00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e02:	2b10      	cmp	r3, #16
 8005e04:	d002      	beq.n	8005e0c <I2C_Master_ADDR+0x294>
 8005e06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e08:	2b20      	cmp	r3, #32
 8005e0a:	d13b      	bne.n	8005e84 <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	685a      	ldr	r2, [r3, #4]
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005e1a:	605a      	str	r2, [r3, #4]
 8005e1c:	e032      	b.n	8005e84 <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	681a      	ldr	r2, [r3, #0]
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005e2c:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	685b      	ldr	r3, [r3, #4]
 8005e34:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005e38:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005e3c:	d117      	bne.n	8005e6e <I2C_Master_ADDR+0x2f6>
 8005e3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e40:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005e44:	d00b      	beq.n	8005e5e <I2C_Master_ADDR+0x2e6>
 8005e46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e48:	2b01      	cmp	r3, #1
 8005e4a:	d008      	beq.n	8005e5e <I2C_Master_ADDR+0x2e6>
 8005e4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e4e:	2b08      	cmp	r3, #8
 8005e50:	d005      	beq.n	8005e5e <I2C_Master_ADDR+0x2e6>
 8005e52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e54:	2b10      	cmp	r3, #16
 8005e56:	d002      	beq.n	8005e5e <I2C_Master_ADDR+0x2e6>
 8005e58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e5a:	2b20      	cmp	r3, #32
 8005e5c:	d107      	bne.n	8005e6e <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	685a      	ldr	r2, [r3, #4]
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005e6c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e6e:	2300      	movs	r3, #0
 8005e70:	60fb      	str	r3, [r7, #12]
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	695b      	ldr	r3, [r3, #20]
 8005e78:	60fb      	str	r3, [r7, #12]
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	699b      	ldr	r3, [r3, #24]
 8005e80:	60fb      	str	r3, [r7, #12]
 8005e82:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2200      	movs	r2, #0
 8005e88:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8005e8a:	e00b      	b.n	8005ea4 <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	60bb      	str	r3, [r7, #8]
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	695b      	ldr	r3, [r3, #20]
 8005e96:	60bb      	str	r3, [r7, #8]
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	699b      	ldr	r3, [r3, #24]
 8005e9e:	60bb      	str	r3, [r7, #8]
 8005ea0:	68bb      	ldr	r3, [r7, #8]
}
 8005ea2:	e7ff      	b.n	8005ea4 <I2C_Master_ADDR+0x32c>
 8005ea4:	bf00      	nop
 8005ea6:	3744      	adds	r7, #68	@ 0x44
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	bc80      	pop	{r7}
 8005eac:	4770      	bx	lr

08005eae <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005eae:	b580      	push	{r7, lr}
 8005eb0:	b084      	sub	sp, #16
 8005eb2:	af00      	add	r7, sp, #0
 8005eb4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005ebc:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ec2:	b29b      	uxth	r3, r3
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d02b      	beq.n	8005f20 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ecc:	781a      	ldrb	r2, [r3, #0]
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ed8:	1c5a      	adds	r2, r3, #1
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ee2:	b29b      	uxth	r3, r3
 8005ee4:	3b01      	subs	r3, #1
 8005ee6:	b29a      	uxth	r2, r3
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ef0:	b29b      	uxth	r3, r3
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d114      	bne.n	8005f20 <I2C_SlaveTransmit_TXE+0x72>
 8005ef6:	7bfb      	ldrb	r3, [r7, #15]
 8005ef8:	2b29      	cmp	r3, #41	@ 0x29
 8005efa:	d111      	bne.n	8005f20 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	685a      	ldr	r2, [r3, #4]
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005f0a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2221      	movs	r2, #33	@ 0x21
 8005f10:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2228      	movs	r2, #40	@ 0x28
 8005f16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005f1a:	6878      	ldr	r0, [r7, #4]
 8005f1c:	f7ff f9cf 	bl	80052be <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005f20:	bf00      	nop
 8005f22:	3710      	adds	r7, #16
 8005f24:	46bd      	mov	sp, r7
 8005f26:	bd80      	pop	{r7, pc}

08005f28 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005f28:	b480      	push	{r7}
 8005f2a:	b083      	sub	sp, #12
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f34:	b29b      	uxth	r3, r3
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d011      	beq.n	8005f5e <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f3e:	781a      	ldrb	r2, [r3, #0]
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f4a:	1c5a      	adds	r2, r3, #1
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f54:	b29b      	uxth	r3, r3
 8005f56:	3b01      	subs	r3, #1
 8005f58:	b29a      	uxth	r2, r3
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8005f5e:	bf00      	nop
 8005f60:	370c      	adds	r7, #12
 8005f62:	46bd      	mov	sp, r7
 8005f64:	bc80      	pop	{r7}
 8005f66:	4770      	bx	lr

08005f68 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b084      	sub	sp, #16
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005f76:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f7c:	b29b      	uxth	r3, r3
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d02c      	beq.n	8005fdc <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	691a      	ldr	r2, [r3, #16]
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f8c:	b2d2      	uxtb	r2, r2
 8005f8e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f94:	1c5a      	adds	r2, r3, #1
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f9e:	b29b      	uxth	r3, r3
 8005fa0:	3b01      	subs	r3, #1
 8005fa2:	b29a      	uxth	r2, r3
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005fac:	b29b      	uxth	r3, r3
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d114      	bne.n	8005fdc <I2C_SlaveReceive_RXNE+0x74>
 8005fb2:	7bfb      	ldrb	r3, [r7, #15]
 8005fb4:	2b2a      	cmp	r3, #42	@ 0x2a
 8005fb6:	d111      	bne.n	8005fdc <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	685a      	ldr	r2, [r3, #4]
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005fc6:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2222      	movs	r2, #34	@ 0x22
 8005fcc:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2228      	movs	r2, #40	@ 0x28
 8005fd2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005fd6:	6878      	ldr	r0, [r7, #4]
 8005fd8:	f7ff f97a 	bl	80052d0 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005fdc:	bf00      	nop
 8005fde:	3710      	adds	r7, #16
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	bd80      	pop	{r7, pc}

08005fe4 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005fe4:	b480      	push	{r7}
 8005fe6:	b083      	sub	sp, #12
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ff0:	b29b      	uxth	r3, r3
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d012      	beq.n	800601c <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	691a      	ldr	r2, [r3, #16]
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006000:	b2d2      	uxtb	r2, r2
 8006002:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006008:	1c5a      	adds	r2, r3, #1
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006012:	b29b      	uxth	r3, r3
 8006014:	3b01      	subs	r3, #1
 8006016:	b29a      	uxth	r2, r3
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 800601c:	bf00      	nop
 800601e:	370c      	adds	r7, #12
 8006020:	46bd      	mov	sp, r7
 8006022:	bc80      	pop	{r7}
 8006024:	4770      	bx	lr

08006026 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8006026:	b580      	push	{r7, lr}
 8006028:	b084      	sub	sp, #16
 800602a:	af00      	add	r7, sp, #0
 800602c:	6078      	str	r0, [r7, #4]
 800602e:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8006030:	2300      	movs	r3, #0
 8006032:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800603a:	b2db      	uxtb	r3, r3
 800603c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006040:	2b28      	cmp	r3, #40	@ 0x28
 8006042:	d125      	bne.n	8006090 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	685a      	ldr	r2, [r3, #4]
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006052:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	f003 0304 	and.w	r3, r3, #4
 800605a:	2b00      	cmp	r3, #0
 800605c:	d101      	bne.n	8006062 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800605e:	2301      	movs	r3, #1
 8006060:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006068:	2b00      	cmp	r3, #0
 800606a:	d103      	bne.n	8006074 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	68db      	ldr	r3, [r3, #12]
 8006070:	81bb      	strh	r3, [r7, #12]
 8006072:	e002      	b.n	800607a <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	699b      	ldr	r3, [r3, #24]
 8006078:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2200      	movs	r2, #0
 800607e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8006082:	89ba      	ldrh	r2, [r7, #12]
 8006084:	7bfb      	ldrb	r3, [r7, #15]
 8006086:	4619      	mov	r1, r3
 8006088:	6878      	ldr	r0, [r7, #4]
 800608a:	f7ff f92a 	bl	80052e2 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800608e:	e00e      	b.n	80060ae <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006090:	2300      	movs	r3, #0
 8006092:	60bb      	str	r3, [r7, #8]
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	695b      	ldr	r3, [r3, #20]
 800609a:	60bb      	str	r3, [r7, #8]
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	699b      	ldr	r3, [r3, #24]
 80060a2:	60bb      	str	r3, [r7, #8]
 80060a4:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2200      	movs	r2, #0
 80060aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 80060ae:	bf00      	nop
 80060b0:	3710      	adds	r7, #16
 80060b2:	46bd      	mov	sp, r7
 80060b4:	bd80      	pop	{r7, pc}
	...

080060b8 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b084      	sub	sp, #16
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80060c6:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	685a      	ldr	r2, [r3, #4]
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80060d6:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80060d8:	2300      	movs	r3, #0
 80060da:	60bb      	str	r3, [r7, #8]
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	695b      	ldr	r3, [r3, #20]
 80060e2:	60bb      	str	r3, [r7, #8]
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	681a      	ldr	r2, [r3, #0]
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f042 0201 	orr.w	r2, r2, #1
 80060f2:	601a      	str	r2, [r3, #0]
 80060f4:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	681a      	ldr	r2, [r3, #0]
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006104:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	685b      	ldr	r3, [r3, #4]
 800610c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006110:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006114:	d172      	bne.n	80061fc <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006116:	7bfb      	ldrb	r3, [r7, #15]
 8006118:	2b22      	cmp	r3, #34	@ 0x22
 800611a:	d002      	beq.n	8006122 <I2C_Slave_STOPF+0x6a>
 800611c:	7bfb      	ldrb	r3, [r7, #15]
 800611e:	2b2a      	cmp	r3, #42	@ 0x2a
 8006120:	d135      	bne.n	800618e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	685b      	ldr	r3, [r3, #4]
 800612a:	b29a      	uxth	r2, r3
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006134:	b29b      	uxth	r3, r3
 8006136:	2b00      	cmp	r3, #0
 8006138:	d005      	beq.n	8006146 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800613e:	f043 0204 	orr.w	r2, r3, #4
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	685a      	ldr	r2, [r3, #4]
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006154:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800615a:	4618      	mov	r0, r3
 800615c:	f7fd ffaa 	bl	80040b4 <HAL_DMA_GetState>
 8006160:	4603      	mov	r3, r0
 8006162:	2b01      	cmp	r3, #1
 8006164:	d049      	beq.n	80061fa <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800616a:	4a69      	ldr	r2, [pc, #420]	@ (8006310 <I2C_Slave_STOPF+0x258>)
 800616c:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006172:	4618      	mov	r0, r3
 8006174:	f7fd fe20 	bl	8003db8 <HAL_DMA_Abort_IT>
 8006178:	4603      	mov	r3, r0
 800617a:	2b00      	cmp	r3, #0
 800617c:	d03d      	beq.n	80061fa <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006182:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006184:	687a      	ldr	r2, [r7, #4]
 8006186:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006188:	4610      	mov	r0, r2
 800618a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800618c:	e035      	b.n	80061fa <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	685b      	ldr	r3, [r3, #4]
 8006196:	b29a      	uxth	r2, r3
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80061a0:	b29b      	uxth	r3, r3
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d005      	beq.n	80061b2 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061aa:	f043 0204 	orr.w	r2, r3, #4
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	685a      	ldr	r2, [r3, #4]
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80061c0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80061c6:	4618      	mov	r0, r3
 80061c8:	f7fd ff74 	bl	80040b4 <HAL_DMA_GetState>
 80061cc:	4603      	mov	r3, r0
 80061ce:	2b01      	cmp	r3, #1
 80061d0:	d014      	beq.n	80061fc <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80061d6:	4a4e      	ldr	r2, [pc, #312]	@ (8006310 <I2C_Slave_STOPF+0x258>)
 80061d8:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80061de:	4618      	mov	r0, r3
 80061e0:	f7fd fdea 	bl	8003db8 <HAL_DMA_Abort_IT>
 80061e4:	4603      	mov	r3, r0
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d008      	beq.n	80061fc <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80061ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80061f0:	687a      	ldr	r2, [r7, #4]
 80061f2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80061f4:	4610      	mov	r0, r2
 80061f6:	4798      	blx	r3
 80061f8:	e000      	b.n	80061fc <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80061fa:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006200:	b29b      	uxth	r3, r3
 8006202:	2b00      	cmp	r3, #0
 8006204:	d03e      	beq.n	8006284 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	695b      	ldr	r3, [r3, #20]
 800620c:	f003 0304 	and.w	r3, r3, #4
 8006210:	2b04      	cmp	r3, #4
 8006212:	d112      	bne.n	800623a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	691a      	ldr	r2, [r3, #16]
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800621e:	b2d2      	uxtb	r2, r2
 8006220:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006226:	1c5a      	adds	r2, r3, #1
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006230:	b29b      	uxth	r3, r3
 8006232:	3b01      	subs	r3, #1
 8006234:	b29a      	uxth	r2, r3
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	695b      	ldr	r3, [r3, #20]
 8006240:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006244:	2b40      	cmp	r3, #64	@ 0x40
 8006246:	d112      	bne.n	800626e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	691a      	ldr	r2, [r3, #16]
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006252:	b2d2      	uxtb	r2, r2
 8006254:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800625a:	1c5a      	adds	r2, r3, #1
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006264:	b29b      	uxth	r3, r3
 8006266:	3b01      	subs	r3, #1
 8006268:	b29a      	uxth	r2, r3
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006272:	b29b      	uxth	r3, r3
 8006274:	2b00      	cmp	r3, #0
 8006276:	d005      	beq.n	8006284 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800627c:	f043 0204 	orr.w	r2, r3, #4
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006288:	2b00      	cmp	r3, #0
 800628a:	d003      	beq.n	8006294 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800628c:	6878      	ldr	r0, [r7, #4]
 800628e:	f000 f843 	bl	8006318 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8006292:	e039      	b.n	8006308 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006294:	7bfb      	ldrb	r3, [r7, #15]
 8006296:	2b2a      	cmp	r3, #42	@ 0x2a
 8006298:	d109      	bne.n	80062ae <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	2200      	movs	r2, #0
 800629e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2228      	movs	r2, #40	@ 0x28
 80062a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80062a8:	6878      	ldr	r0, [r7, #4]
 80062aa:	f7ff f811 	bl	80052d0 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80062b4:	b2db      	uxtb	r3, r3
 80062b6:	2b28      	cmp	r3, #40	@ 0x28
 80062b8:	d111      	bne.n	80062de <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	4a15      	ldr	r2, [pc, #84]	@ (8006314 <I2C_Slave_STOPF+0x25c>)
 80062be:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2200      	movs	r2, #0
 80062c4:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2220      	movs	r2, #32
 80062ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	2200      	movs	r2, #0
 80062d2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80062d6:	6878      	ldr	r0, [r7, #4]
 80062d8:	f7ff f810 	bl	80052fc <HAL_I2C_ListenCpltCallback>
}
 80062dc:	e014      	b.n	8006308 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062e2:	2b22      	cmp	r3, #34	@ 0x22
 80062e4:	d002      	beq.n	80062ec <I2C_Slave_STOPF+0x234>
 80062e6:	7bfb      	ldrb	r3, [r7, #15]
 80062e8:	2b22      	cmp	r3, #34	@ 0x22
 80062ea:	d10d      	bne.n	8006308 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2200      	movs	r2, #0
 80062f0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2220      	movs	r2, #32
 80062f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	2200      	movs	r2, #0
 80062fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006302:	6878      	ldr	r0, [r7, #4]
 8006304:	f7fe ffe4 	bl	80052d0 <HAL_I2C_SlaveRxCpltCallback>
}
 8006308:	bf00      	nop
 800630a:	3710      	adds	r7, #16
 800630c:	46bd      	mov	sp, r7
 800630e:	bd80      	pop	{r7, pc}
 8006310:	0800697d 	.word	0x0800697d
 8006314:	ffff0000 	.word	0xffff0000

08006318 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b084      	sub	sp, #16
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006326:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800632e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006330:	7bbb      	ldrb	r3, [r7, #14]
 8006332:	2b10      	cmp	r3, #16
 8006334:	d002      	beq.n	800633c <I2C_ITError+0x24>
 8006336:	7bbb      	ldrb	r3, [r7, #14]
 8006338:	2b40      	cmp	r3, #64	@ 0x40
 800633a:	d10a      	bne.n	8006352 <I2C_ITError+0x3a>
 800633c:	7bfb      	ldrb	r3, [r7, #15]
 800633e:	2b22      	cmp	r3, #34	@ 0x22
 8006340:	d107      	bne.n	8006352 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	681a      	ldr	r2, [r3, #0]
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006350:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006352:	7bfb      	ldrb	r3, [r7, #15]
 8006354:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006358:	2b28      	cmp	r3, #40	@ 0x28
 800635a:	d107      	bne.n	800636c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2200      	movs	r2, #0
 8006360:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2228      	movs	r2, #40	@ 0x28
 8006366:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800636a:	e015      	b.n	8006398 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	685b      	ldr	r3, [r3, #4]
 8006372:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006376:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800637a:	d00a      	beq.n	8006392 <I2C_ITError+0x7a>
 800637c:	7bfb      	ldrb	r3, [r7, #15]
 800637e:	2b60      	cmp	r3, #96	@ 0x60
 8006380:	d007      	beq.n	8006392 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2220      	movs	r2, #32
 8006386:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2200      	movs	r2, #0
 800638e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2200      	movs	r2, #0
 8006396:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	685b      	ldr	r3, [r3, #4]
 800639e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80063a2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80063a6:	d162      	bne.n	800646e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	685a      	ldr	r2, [r3, #4]
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80063b6:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80063bc:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80063c0:	b2db      	uxtb	r3, r3
 80063c2:	2b01      	cmp	r3, #1
 80063c4:	d020      	beq.n	8006408 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80063ca:	4a6a      	ldr	r2, [pc, #424]	@ (8006574 <I2C_ITError+0x25c>)
 80063cc:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80063d2:	4618      	mov	r0, r3
 80063d4:	f7fd fcf0 	bl	8003db8 <HAL_DMA_Abort_IT>
 80063d8:	4603      	mov	r3, r0
 80063da:	2b00      	cmp	r3, #0
 80063dc:	f000 8089 	beq.w	80064f2 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	681a      	ldr	r2, [r3, #0]
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f022 0201 	bic.w	r2, r2, #1
 80063ee:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2220      	movs	r2, #32
 80063f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80063fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80063fe:	687a      	ldr	r2, [r7, #4]
 8006400:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006402:	4610      	mov	r0, r2
 8006404:	4798      	blx	r3
 8006406:	e074      	b.n	80064f2 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800640c:	4a59      	ldr	r2, [pc, #356]	@ (8006574 <I2C_ITError+0x25c>)
 800640e:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006414:	4618      	mov	r0, r3
 8006416:	f7fd fccf 	bl	8003db8 <HAL_DMA_Abort_IT>
 800641a:	4603      	mov	r3, r0
 800641c:	2b00      	cmp	r3, #0
 800641e:	d068      	beq.n	80064f2 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	695b      	ldr	r3, [r3, #20]
 8006426:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800642a:	2b40      	cmp	r3, #64	@ 0x40
 800642c:	d10b      	bne.n	8006446 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	691a      	ldr	r2, [r3, #16]
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006438:	b2d2      	uxtb	r2, r2
 800643a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006440:	1c5a      	adds	r2, r3, #1
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	681a      	ldr	r2, [r3, #0]
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f022 0201 	bic.w	r2, r2, #1
 8006454:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2220      	movs	r2, #32
 800645a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006462:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006464:	687a      	ldr	r2, [r7, #4]
 8006466:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006468:	4610      	mov	r0, r2
 800646a:	4798      	blx	r3
 800646c:	e041      	b.n	80064f2 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006474:	b2db      	uxtb	r3, r3
 8006476:	2b60      	cmp	r3, #96	@ 0x60
 8006478:	d125      	bne.n	80064c6 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2220      	movs	r2, #32
 800647e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2200      	movs	r2, #0
 8006486:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	695b      	ldr	r3, [r3, #20]
 800648e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006492:	2b40      	cmp	r3, #64	@ 0x40
 8006494:	d10b      	bne.n	80064ae <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	691a      	ldr	r2, [r3, #16]
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064a0:	b2d2      	uxtb	r2, r2
 80064a2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064a8:	1c5a      	adds	r2, r3, #1
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	681a      	ldr	r2, [r3, #0]
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f022 0201 	bic.w	r2, r2, #1
 80064bc:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80064be:	6878      	ldr	r0, [r7, #4]
 80064c0:	f7fe ff40 	bl	8005344 <HAL_I2C_AbortCpltCallback>
 80064c4:	e015      	b.n	80064f2 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	695b      	ldr	r3, [r3, #20]
 80064cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064d0:	2b40      	cmp	r3, #64	@ 0x40
 80064d2:	d10b      	bne.n	80064ec <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	691a      	ldr	r2, [r3, #16]
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064de:	b2d2      	uxtb	r2, r2
 80064e0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064e6:	1c5a      	adds	r2, r3, #1
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80064ec:	6878      	ldr	r0, [r7, #4]
 80064ee:	f7fe ff20 	bl	8005332 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064f6:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80064f8:	68bb      	ldr	r3, [r7, #8]
 80064fa:	f003 0301 	and.w	r3, r3, #1
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d10e      	bne.n	8006520 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8006502:	68bb      	ldr	r3, [r7, #8]
 8006504:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006508:	2b00      	cmp	r3, #0
 800650a:	d109      	bne.n	8006520 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800650c:	68bb      	ldr	r3, [r7, #8]
 800650e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8006512:	2b00      	cmp	r3, #0
 8006514:	d104      	bne.n	8006520 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8006516:	68bb      	ldr	r3, [r7, #8]
 8006518:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800651c:	2b00      	cmp	r3, #0
 800651e:	d007      	beq.n	8006530 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	685a      	ldr	r2, [r3, #4]
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800652e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006536:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800653c:	f003 0304 	and.w	r3, r3, #4
 8006540:	2b04      	cmp	r3, #4
 8006542:	d113      	bne.n	800656c <I2C_ITError+0x254>
 8006544:	7bfb      	ldrb	r3, [r7, #15]
 8006546:	2b28      	cmp	r3, #40	@ 0x28
 8006548:	d110      	bne.n	800656c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	4a0a      	ldr	r2, [pc, #40]	@ (8006578 <I2C_ITError+0x260>)
 800654e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2200      	movs	r2, #0
 8006554:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	2220      	movs	r2, #32
 800655a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	2200      	movs	r2, #0
 8006562:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8006566:	6878      	ldr	r0, [r7, #4]
 8006568:	f7fe fec8 	bl	80052fc <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800656c:	bf00      	nop
 800656e:	3710      	adds	r7, #16
 8006570:	46bd      	mov	sp, r7
 8006572:	bd80      	pop	{r7, pc}
 8006574:	0800697d 	.word	0x0800697d
 8006578:	ffff0000 	.word	0xffff0000

0800657c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800657c:	b580      	push	{r7, lr}
 800657e:	b088      	sub	sp, #32
 8006580:	af02      	add	r7, sp, #8
 8006582:	60f8      	str	r0, [r7, #12]
 8006584:	607a      	str	r2, [r7, #4]
 8006586:	603b      	str	r3, [r7, #0]
 8006588:	460b      	mov	r3, r1
 800658a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006590:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006592:	697b      	ldr	r3, [r7, #20]
 8006594:	2b08      	cmp	r3, #8
 8006596:	d006      	beq.n	80065a6 <I2C_MasterRequestWrite+0x2a>
 8006598:	697b      	ldr	r3, [r7, #20]
 800659a:	2b01      	cmp	r3, #1
 800659c:	d003      	beq.n	80065a6 <I2C_MasterRequestWrite+0x2a>
 800659e:	697b      	ldr	r3, [r7, #20]
 80065a0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80065a4:	d108      	bne.n	80065b8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	681a      	ldr	r2, [r3, #0]
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80065b4:	601a      	str	r2, [r3, #0]
 80065b6:	e00b      	b.n	80065d0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065bc:	2b12      	cmp	r3, #18
 80065be:	d107      	bne.n	80065d0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	681a      	ldr	r2, [r3, #0]
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80065ce:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	9300      	str	r3, [sp, #0]
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2200      	movs	r2, #0
 80065d8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80065dc:	68f8      	ldr	r0, [r7, #12]
 80065de:	f000 fa75 	bl	8006acc <I2C_WaitOnFlagUntilTimeout>
 80065e2:	4603      	mov	r3, r0
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d00d      	beq.n	8006604 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80065f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80065f6:	d103      	bne.n	8006600 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80065fe:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006600:	2303      	movs	r3, #3
 8006602:	e035      	b.n	8006670 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	691b      	ldr	r3, [r3, #16]
 8006608:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800660c:	d108      	bne.n	8006620 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800660e:	897b      	ldrh	r3, [r7, #10]
 8006610:	b2db      	uxtb	r3, r3
 8006612:	461a      	mov	r2, r3
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800661c:	611a      	str	r2, [r3, #16]
 800661e:	e01b      	b.n	8006658 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006620:	897b      	ldrh	r3, [r7, #10]
 8006622:	11db      	asrs	r3, r3, #7
 8006624:	b2db      	uxtb	r3, r3
 8006626:	f003 0306 	and.w	r3, r3, #6
 800662a:	b2db      	uxtb	r3, r3
 800662c:	f063 030f 	orn	r3, r3, #15
 8006630:	b2da      	uxtb	r2, r3
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	687a      	ldr	r2, [r7, #4]
 800663c:	490e      	ldr	r1, [pc, #56]	@ (8006678 <I2C_MasterRequestWrite+0xfc>)
 800663e:	68f8      	ldr	r0, [r7, #12]
 8006640:	f000 fabe 	bl	8006bc0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006644:	4603      	mov	r3, r0
 8006646:	2b00      	cmp	r3, #0
 8006648:	d001      	beq.n	800664e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800664a:	2301      	movs	r3, #1
 800664c:	e010      	b.n	8006670 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800664e:	897b      	ldrh	r3, [r7, #10]
 8006650:	b2da      	uxtb	r2, r3
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	687a      	ldr	r2, [r7, #4]
 800665c:	4907      	ldr	r1, [pc, #28]	@ (800667c <I2C_MasterRequestWrite+0x100>)
 800665e:	68f8      	ldr	r0, [r7, #12]
 8006660:	f000 faae 	bl	8006bc0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006664:	4603      	mov	r3, r0
 8006666:	2b00      	cmp	r3, #0
 8006668:	d001      	beq.n	800666e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800666a:	2301      	movs	r3, #1
 800666c:	e000      	b.n	8006670 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800666e:	2300      	movs	r3, #0
}
 8006670:	4618      	mov	r0, r3
 8006672:	3718      	adds	r7, #24
 8006674:	46bd      	mov	sp, r7
 8006676:	bd80      	pop	{r7, pc}
 8006678:	00010008 	.word	0x00010008
 800667c:	00010002 	.word	0x00010002

08006680 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006680:	b580      	push	{r7, lr}
 8006682:	b088      	sub	sp, #32
 8006684:	af02      	add	r7, sp, #8
 8006686:	60f8      	str	r0, [r7, #12]
 8006688:	4608      	mov	r0, r1
 800668a:	4611      	mov	r1, r2
 800668c:	461a      	mov	r2, r3
 800668e:	4603      	mov	r3, r0
 8006690:	817b      	strh	r3, [r7, #10]
 8006692:	460b      	mov	r3, r1
 8006694:	813b      	strh	r3, [r7, #8]
 8006696:	4613      	mov	r3, r2
 8006698:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	681a      	ldr	r2, [r3, #0]
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80066a8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80066aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066ac:	9300      	str	r3, [sp, #0]
 80066ae:	6a3b      	ldr	r3, [r7, #32]
 80066b0:	2200      	movs	r2, #0
 80066b2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80066b6:	68f8      	ldr	r0, [r7, #12]
 80066b8:	f000 fa08 	bl	8006acc <I2C_WaitOnFlagUntilTimeout>
 80066bc:	4603      	mov	r3, r0
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d00d      	beq.n	80066de <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80066cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80066d0:	d103      	bne.n	80066da <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80066d8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80066da:	2303      	movs	r3, #3
 80066dc:	e05f      	b.n	800679e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80066de:	897b      	ldrh	r3, [r7, #10]
 80066e0:	b2db      	uxtb	r3, r3
 80066e2:	461a      	mov	r2, r3
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80066ec:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80066ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066f0:	6a3a      	ldr	r2, [r7, #32]
 80066f2:	492d      	ldr	r1, [pc, #180]	@ (80067a8 <I2C_RequestMemoryWrite+0x128>)
 80066f4:	68f8      	ldr	r0, [r7, #12]
 80066f6:	f000 fa63 	bl	8006bc0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80066fa:	4603      	mov	r3, r0
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d001      	beq.n	8006704 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006700:	2301      	movs	r3, #1
 8006702:	e04c      	b.n	800679e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006704:	2300      	movs	r3, #0
 8006706:	617b      	str	r3, [r7, #20]
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	695b      	ldr	r3, [r3, #20]
 800670e:	617b      	str	r3, [r7, #20]
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	699b      	ldr	r3, [r3, #24]
 8006716:	617b      	str	r3, [r7, #20]
 8006718:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800671a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800671c:	6a39      	ldr	r1, [r7, #32]
 800671e:	68f8      	ldr	r0, [r7, #12]
 8006720:	f000 faee 	bl	8006d00 <I2C_WaitOnTXEFlagUntilTimeout>
 8006724:	4603      	mov	r3, r0
 8006726:	2b00      	cmp	r3, #0
 8006728:	d00d      	beq.n	8006746 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800672e:	2b04      	cmp	r3, #4
 8006730:	d107      	bne.n	8006742 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	681a      	ldr	r2, [r3, #0]
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006740:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006742:	2301      	movs	r3, #1
 8006744:	e02b      	b.n	800679e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006746:	88fb      	ldrh	r3, [r7, #6]
 8006748:	2b01      	cmp	r3, #1
 800674a:	d105      	bne.n	8006758 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800674c:	893b      	ldrh	r3, [r7, #8]
 800674e:	b2da      	uxtb	r2, r3
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	611a      	str	r2, [r3, #16]
 8006756:	e021      	b.n	800679c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006758:	893b      	ldrh	r3, [r7, #8]
 800675a:	0a1b      	lsrs	r3, r3, #8
 800675c:	b29b      	uxth	r3, r3
 800675e:	b2da      	uxtb	r2, r3
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006766:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006768:	6a39      	ldr	r1, [r7, #32]
 800676a:	68f8      	ldr	r0, [r7, #12]
 800676c:	f000 fac8 	bl	8006d00 <I2C_WaitOnTXEFlagUntilTimeout>
 8006770:	4603      	mov	r3, r0
 8006772:	2b00      	cmp	r3, #0
 8006774:	d00d      	beq.n	8006792 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800677a:	2b04      	cmp	r3, #4
 800677c:	d107      	bne.n	800678e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	681a      	ldr	r2, [r3, #0]
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800678c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800678e:	2301      	movs	r3, #1
 8006790:	e005      	b.n	800679e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006792:	893b      	ldrh	r3, [r7, #8]
 8006794:	b2da      	uxtb	r2, r3
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800679c:	2300      	movs	r3, #0
}
 800679e:	4618      	mov	r0, r3
 80067a0:	3718      	adds	r7, #24
 80067a2:	46bd      	mov	sp, r7
 80067a4:	bd80      	pop	{r7, pc}
 80067a6:	bf00      	nop
 80067a8:	00010002 	.word	0x00010002

080067ac <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b088      	sub	sp, #32
 80067b0:	af02      	add	r7, sp, #8
 80067b2:	60f8      	str	r0, [r7, #12]
 80067b4:	4608      	mov	r0, r1
 80067b6:	4611      	mov	r1, r2
 80067b8:	461a      	mov	r2, r3
 80067ba:	4603      	mov	r3, r0
 80067bc:	817b      	strh	r3, [r7, #10]
 80067be:	460b      	mov	r3, r1
 80067c0:	813b      	strh	r3, [r7, #8]
 80067c2:	4613      	mov	r3, r2
 80067c4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	681a      	ldr	r2, [r3, #0]
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80067d4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	681a      	ldr	r2, [r3, #0]
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80067e4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80067e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067e8:	9300      	str	r3, [sp, #0]
 80067ea:	6a3b      	ldr	r3, [r7, #32]
 80067ec:	2200      	movs	r2, #0
 80067ee:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80067f2:	68f8      	ldr	r0, [r7, #12]
 80067f4:	f000 f96a 	bl	8006acc <I2C_WaitOnFlagUntilTimeout>
 80067f8:	4603      	mov	r3, r0
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d00d      	beq.n	800681a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006808:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800680c:	d103      	bne.n	8006816 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006814:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006816:	2303      	movs	r3, #3
 8006818:	e0aa      	b.n	8006970 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800681a:	897b      	ldrh	r3, [r7, #10]
 800681c:	b2db      	uxtb	r3, r3
 800681e:	461a      	mov	r2, r3
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006828:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800682a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800682c:	6a3a      	ldr	r2, [r7, #32]
 800682e:	4952      	ldr	r1, [pc, #328]	@ (8006978 <I2C_RequestMemoryRead+0x1cc>)
 8006830:	68f8      	ldr	r0, [r7, #12]
 8006832:	f000 f9c5 	bl	8006bc0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006836:	4603      	mov	r3, r0
 8006838:	2b00      	cmp	r3, #0
 800683a:	d001      	beq.n	8006840 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800683c:	2301      	movs	r3, #1
 800683e:	e097      	b.n	8006970 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006840:	2300      	movs	r3, #0
 8006842:	617b      	str	r3, [r7, #20]
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	695b      	ldr	r3, [r3, #20]
 800684a:	617b      	str	r3, [r7, #20]
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	699b      	ldr	r3, [r3, #24]
 8006852:	617b      	str	r3, [r7, #20]
 8006854:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006856:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006858:	6a39      	ldr	r1, [r7, #32]
 800685a:	68f8      	ldr	r0, [r7, #12]
 800685c:	f000 fa50 	bl	8006d00 <I2C_WaitOnTXEFlagUntilTimeout>
 8006860:	4603      	mov	r3, r0
 8006862:	2b00      	cmp	r3, #0
 8006864:	d00d      	beq.n	8006882 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800686a:	2b04      	cmp	r3, #4
 800686c:	d107      	bne.n	800687e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	681a      	ldr	r2, [r3, #0]
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800687c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800687e:	2301      	movs	r3, #1
 8006880:	e076      	b.n	8006970 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006882:	88fb      	ldrh	r3, [r7, #6]
 8006884:	2b01      	cmp	r3, #1
 8006886:	d105      	bne.n	8006894 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006888:	893b      	ldrh	r3, [r7, #8]
 800688a:	b2da      	uxtb	r2, r3
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	611a      	str	r2, [r3, #16]
 8006892:	e021      	b.n	80068d8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006894:	893b      	ldrh	r3, [r7, #8]
 8006896:	0a1b      	lsrs	r3, r3, #8
 8006898:	b29b      	uxth	r3, r3
 800689a:	b2da      	uxtb	r2, r3
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80068a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80068a4:	6a39      	ldr	r1, [r7, #32]
 80068a6:	68f8      	ldr	r0, [r7, #12]
 80068a8:	f000 fa2a 	bl	8006d00 <I2C_WaitOnTXEFlagUntilTimeout>
 80068ac:	4603      	mov	r3, r0
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d00d      	beq.n	80068ce <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068b6:	2b04      	cmp	r3, #4
 80068b8:	d107      	bne.n	80068ca <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	681a      	ldr	r2, [r3, #0]
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80068c8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80068ca:	2301      	movs	r3, #1
 80068cc:	e050      	b.n	8006970 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80068ce:	893b      	ldrh	r3, [r7, #8]
 80068d0:	b2da      	uxtb	r2, r3
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80068d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80068da:	6a39      	ldr	r1, [r7, #32]
 80068dc:	68f8      	ldr	r0, [r7, #12]
 80068de:	f000 fa0f 	bl	8006d00 <I2C_WaitOnTXEFlagUntilTimeout>
 80068e2:	4603      	mov	r3, r0
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d00d      	beq.n	8006904 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068ec:	2b04      	cmp	r3, #4
 80068ee:	d107      	bne.n	8006900 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	681a      	ldr	r2, [r3, #0]
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80068fe:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006900:	2301      	movs	r3, #1
 8006902:	e035      	b.n	8006970 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	681a      	ldr	r2, [r3, #0]
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006912:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006914:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006916:	9300      	str	r3, [sp, #0]
 8006918:	6a3b      	ldr	r3, [r7, #32]
 800691a:	2200      	movs	r2, #0
 800691c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006920:	68f8      	ldr	r0, [r7, #12]
 8006922:	f000 f8d3 	bl	8006acc <I2C_WaitOnFlagUntilTimeout>
 8006926:	4603      	mov	r3, r0
 8006928:	2b00      	cmp	r3, #0
 800692a:	d00d      	beq.n	8006948 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006936:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800693a:	d103      	bne.n	8006944 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006942:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006944:	2303      	movs	r3, #3
 8006946:	e013      	b.n	8006970 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006948:	897b      	ldrh	r3, [r7, #10]
 800694a:	b2db      	uxtb	r3, r3
 800694c:	f043 0301 	orr.w	r3, r3, #1
 8006950:	b2da      	uxtb	r2, r3
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006958:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800695a:	6a3a      	ldr	r2, [r7, #32]
 800695c:	4906      	ldr	r1, [pc, #24]	@ (8006978 <I2C_RequestMemoryRead+0x1cc>)
 800695e:	68f8      	ldr	r0, [r7, #12]
 8006960:	f000 f92e 	bl	8006bc0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006964:	4603      	mov	r3, r0
 8006966:	2b00      	cmp	r3, #0
 8006968:	d001      	beq.n	800696e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800696a:	2301      	movs	r3, #1
 800696c:	e000      	b.n	8006970 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800696e:	2300      	movs	r3, #0
}
 8006970:	4618      	mov	r0, r3
 8006972:	3718      	adds	r7, #24
 8006974:	46bd      	mov	sp, r7
 8006976:	bd80      	pop	{r7, pc}
 8006978:	00010002 	.word	0x00010002

0800697c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800697c:	b580      	push	{r7, lr}
 800697e:	b086      	sub	sp, #24
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006984:	2300      	movs	r3, #0
 8006986:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800698c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800698e:	697b      	ldr	r3, [r7, #20]
 8006990:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006994:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8006996:	4b4b      	ldr	r3, [pc, #300]	@ (8006ac4 <I2C_DMAAbort+0x148>)
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	08db      	lsrs	r3, r3, #3
 800699c:	4a4a      	ldr	r2, [pc, #296]	@ (8006ac8 <I2C_DMAAbort+0x14c>)
 800699e:	fba2 2303 	umull	r2, r3, r2, r3
 80069a2:	0a1a      	lsrs	r2, r3, #8
 80069a4:	4613      	mov	r3, r2
 80069a6:	009b      	lsls	r3, r3, #2
 80069a8:	4413      	add	r3, r2
 80069aa:	00da      	lsls	r2, r3, #3
 80069ac:	1ad3      	subs	r3, r2, r3
 80069ae:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d106      	bne.n	80069c4 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80069b6:	697b      	ldr	r3, [r7, #20]
 80069b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069ba:	f043 0220 	orr.w	r2, r3, #32
 80069be:	697b      	ldr	r3, [r7, #20]
 80069c0:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 80069c2:	e00a      	b.n	80069da <I2C_DMAAbort+0x5e>
    }
    count--;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	3b01      	subs	r3, #1
 80069c8:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80069ca:	697b      	ldr	r3, [r7, #20]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80069d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80069d8:	d0ea      	beq.n	80069b0 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80069da:	697b      	ldr	r3, [r7, #20]
 80069dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d003      	beq.n	80069ea <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80069e2:	697b      	ldr	r3, [r7, #20]
 80069e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80069e6:	2200      	movs	r2, #0
 80069e8:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  if (hi2c->hdmarx != NULL)
 80069ea:	697b      	ldr	r3, [r7, #20]
 80069ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d003      	beq.n	80069fa <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80069f2:	697b      	ldr	r3, [r7, #20]
 80069f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069f6:	2200      	movs	r2, #0
 80069f8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80069fa:	697b      	ldr	r3, [r7, #20]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	681a      	ldr	r2, [r3, #0]
 8006a00:	697b      	ldr	r3, [r7, #20]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006a08:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8006a0a:	697b      	ldr	r3, [r7, #20]
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8006a10:	697b      	ldr	r3, [r7, #20]
 8006a12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d003      	beq.n	8006a20 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006a18:	697b      	ldr	r3, [r7, #20]
 8006a1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	635a      	str	r2, [r3, #52]	@ 0x34
  }
  if (hi2c->hdmarx != NULL)
 8006a20:	697b      	ldr	r3, [r7, #20]
 8006a22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d003      	beq.n	8006a30 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006a28:	697b      	ldr	r3, [r7, #20]
 8006a2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8006a30:	697b      	ldr	r3, [r7, #20]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	681a      	ldr	r2, [r3, #0]
 8006a36:	697b      	ldr	r3, [r7, #20]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f022 0201 	bic.w	r2, r2, #1
 8006a3e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006a40:	697b      	ldr	r3, [r7, #20]
 8006a42:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006a46:	b2db      	uxtb	r3, r3
 8006a48:	2b60      	cmp	r3, #96	@ 0x60
 8006a4a:	d10e      	bne.n	8006a6a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8006a4c:	697b      	ldr	r3, [r7, #20]
 8006a4e:	2220      	movs	r2, #32
 8006a50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006a54:	697b      	ldr	r3, [r7, #20]
 8006a56:	2200      	movs	r2, #0
 8006a58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8006a5c:	697b      	ldr	r3, [r7, #20]
 8006a5e:	2200      	movs	r2, #0
 8006a60:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006a62:	6978      	ldr	r0, [r7, #20]
 8006a64:	f7fe fc6e 	bl	8005344 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006a68:	e027      	b.n	8006aba <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006a6a:	7cfb      	ldrb	r3, [r7, #19]
 8006a6c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006a70:	2b28      	cmp	r3, #40	@ 0x28
 8006a72:	d117      	bne.n	8006aa4 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8006a74:	697b      	ldr	r3, [r7, #20]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	681a      	ldr	r2, [r3, #0]
 8006a7a:	697b      	ldr	r3, [r7, #20]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f042 0201 	orr.w	r2, r2, #1
 8006a82:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006a84:	697b      	ldr	r3, [r7, #20]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	681a      	ldr	r2, [r3, #0]
 8006a8a:	697b      	ldr	r3, [r7, #20]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006a92:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006a94:	697b      	ldr	r3, [r7, #20]
 8006a96:	2200      	movs	r2, #0
 8006a98:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006a9a:	697b      	ldr	r3, [r7, #20]
 8006a9c:	2228      	movs	r2, #40	@ 0x28
 8006a9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8006aa2:	e007      	b.n	8006ab4 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8006aa4:	697b      	ldr	r3, [r7, #20]
 8006aa6:	2220      	movs	r2, #32
 8006aa8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006aac:	697b      	ldr	r3, [r7, #20]
 8006aae:	2200      	movs	r2, #0
 8006ab0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8006ab4:	6978      	ldr	r0, [r7, #20]
 8006ab6:	f7fe fc3c 	bl	8005332 <HAL_I2C_ErrorCallback>
}
 8006aba:	bf00      	nop
 8006abc:	3718      	adds	r7, #24
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	bd80      	pop	{r7, pc}
 8006ac2:	bf00      	nop
 8006ac4:	20000018 	.word	0x20000018
 8006ac8:	14f8b589 	.word	0x14f8b589

08006acc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b084      	sub	sp, #16
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	60f8      	str	r0, [r7, #12]
 8006ad4:	60b9      	str	r1, [r7, #8]
 8006ad6:	603b      	str	r3, [r7, #0]
 8006ad8:	4613      	mov	r3, r2
 8006ada:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006adc:	e048      	b.n	8006b70 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ae4:	d044      	beq.n	8006b70 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ae6:	f7fc faf7 	bl	80030d8 <HAL_GetTick>
 8006aea:	4602      	mov	r2, r0
 8006aec:	69bb      	ldr	r3, [r7, #24]
 8006aee:	1ad3      	subs	r3, r2, r3
 8006af0:	683a      	ldr	r2, [r7, #0]
 8006af2:	429a      	cmp	r2, r3
 8006af4:	d302      	bcc.n	8006afc <I2C_WaitOnFlagUntilTimeout+0x30>
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d139      	bne.n	8006b70 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006afc:	68bb      	ldr	r3, [r7, #8]
 8006afe:	0c1b      	lsrs	r3, r3, #16
 8006b00:	b2db      	uxtb	r3, r3
 8006b02:	2b01      	cmp	r3, #1
 8006b04:	d10d      	bne.n	8006b22 <I2C_WaitOnFlagUntilTimeout+0x56>
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	695b      	ldr	r3, [r3, #20]
 8006b0c:	43da      	mvns	r2, r3
 8006b0e:	68bb      	ldr	r3, [r7, #8]
 8006b10:	4013      	ands	r3, r2
 8006b12:	b29b      	uxth	r3, r3
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	bf0c      	ite	eq
 8006b18:	2301      	moveq	r3, #1
 8006b1a:	2300      	movne	r3, #0
 8006b1c:	b2db      	uxtb	r3, r3
 8006b1e:	461a      	mov	r2, r3
 8006b20:	e00c      	b.n	8006b3c <I2C_WaitOnFlagUntilTimeout+0x70>
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	699b      	ldr	r3, [r3, #24]
 8006b28:	43da      	mvns	r2, r3
 8006b2a:	68bb      	ldr	r3, [r7, #8]
 8006b2c:	4013      	ands	r3, r2
 8006b2e:	b29b      	uxth	r3, r3
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	bf0c      	ite	eq
 8006b34:	2301      	moveq	r3, #1
 8006b36:	2300      	movne	r3, #0
 8006b38:	b2db      	uxtb	r3, r3
 8006b3a:	461a      	mov	r2, r3
 8006b3c:	79fb      	ldrb	r3, [r7, #7]
 8006b3e:	429a      	cmp	r2, r3
 8006b40:	d116      	bne.n	8006b70 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	2200      	movs	r2, #0
 8006b46:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	2220      	movs	r2, #32
 8006b4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	2200      	movs	r2, #0
 8006b54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b5c:	f043 0220 	orr.w	r2, r3, #32
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	2200      	movs	r2, #0
 8006b68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006b6c:	2301      	movs	r3, #1
 8006b6e:	e023      	b.n	8006bb8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006b70:	68bb      	ldr	r3, [r7, #8]
 8006b72:	0c1b      	lsrs	r3, r3, #16
 8006b74:	b2db      	uxtb	r3, r3
 8006b76:	2b01      	cmp	r3, #1
 8006b78:	d10d      	bne.n	8006b96 <I2C_WaitOnFlagUntilTimeout+0xca>
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	695b      	ldr	r3, [r3, #20]
 8006b80:	43da      	mvns	r2, r3
 8006b82:	68bb      	ldr	r3, [r7, #8]
 8006b84:	4013      	ands	r3, r2
 8006b86:	b29b      	uxth	r3, r3
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	bf0c      	ite	eq
 8006b8c:	2301      	moveq	r3, #1
 8006b8e:	2300      	movne	r3, #0
 8006b90:	b2db      	uxtb	r3, r3
 8006b92:	461a      	mov	r2, r3
 8006b94:	e00c      	b.n	8006bb0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	699b      	ldr	r3, [r3, #24]
 8006b9c:	43da      	mvns	r2, r3
 8006b9e:	68bb      	ldr	r3, [r7, #8]
 8006ba0:	4013      	ands	r3, r2
 8006ba2:	b29b      	uxth	r3, r3
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	bf0c      	ite	eq
 8006ba8:	2301      	moveq	r3, #1
 8006baa:	2300      	movne	r3, #0
 8006bac:	b2db      	uxtb	r3, r3
 8006bae:	461a      	mov	r2, r3
 8006bb0:	79fb      	ldrb	r3, [r7, #7]
 8006bb2:	429a      	cmp	r2, r3
 8006bb4:	d093      	beq.n	8006ade <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006bb6:	2300      	movs	r3, #0
}
 8006bb8:	4618      	mov	r0, r3
 8006bba:	3710      	adds	r7, #16
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	bd80      	pop	{r7, pc}

08006bc0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	b084      	sub	sp, #16
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	60f8      	str	r0, [r7, #12]
 8006bc8:	60b9      	str	r1, [r7, #8]
 8006bca:	607a      	str	r2, [r7, #4]
 8006bcc:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006bce:	e071      	b.n	8006cb4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	695b      	ldr	r3, [r3, #20]
 8006bd6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006bda:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006bde:	d123      	bne.n	8006c28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	681a      	ldr	r2, [r3, #0]
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006bee:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006bf8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	2220      	movs	r2, #32
 8006c04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c14:	f043 0204 	orr.w	r2, r3, #4
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	2200      	movs	r2, #0
 8006c20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006c24:	2301      	movs	r3, #1
 8006c26:	e067      	b.n	8006cf8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c2e:	d041      	beq.n	8006cb4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c30:	f7fc fa52 	bl	80030d8 <HAL_GetTick>
 8006c34:	4602      	mov	r2, r0
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	1ad3      	subs	r3, r2, r3
 8006c3a:	687a      	ldr	r2, [r7, #4]
 8006c3c:	429a      	cmp	r2, r3
 8006c3e:	d302      	bcc.n	8006c46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d136      	bne.n	8006cb4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8006c46:	68bb      	ldr	r3, [r7, #8]
 8006c48:	0c1b      	lsrs	r3, r3, #16
 8006c4a:	b2db      	uxtb	r3, r3
 8006c4c:	2b01      	cmp	r3, #1
 8006c4e:	d10c      	bne.n	8006c6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	695b      	ldr	r3, [r3, #20]
 8006c56:	43da      	mvns	r2, r3
 8006c58:	68bb      	ldr	r3, [r7, #8]
 8006c5a:	4013      	ands	r3, r2
 8006c5c:	b29b      	uxth	r3, r3
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	bf14      	ite	ne
 8006c62:	2301      	movne	r3, #1
 8006c64:	2300      	moveq	r3, #0
 8006c66:	b2db      	uxtb	r3, r3
 8006c68:	e00b      	b.n	8006c82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	699b      	ldr	r3, [r3, #24]
 8006c70:	43da      	mvns	r2, r3
 8006c72:	68bb      	ldr	r3, [r7, #8]
 8006c74:	4013      	ands	r3, r2
 8006c76:	b29b      	uxth	r3, r3
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	bf14      	ite	ne
 8006c7c:	2301      	movne	r3, #1
 8006c7e:	2300      	moveq	r3, #0
 8006c80:	b2db      	uxtb	r3, r3
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d016      	beq.n	8006cb4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	2200      	movs	r2, #0
 8006c8a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	2220      	movs	r2, #32
 8006c90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	2200      	movs	r2, #0
 8006c98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ca0:	f043 0220 	orr.w	r2, r3, #32
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	2200      	movs	r2, #0
 8006cac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006cb0:	2301      	movs	r3, #1
 8006cb2:	e021      	b.n	8006cf8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006cb4:	68bb      	ldr	r3, [r7, #8]
 8006cb6:	0c1b      	lsrs	r3, r3, #16
 8006cb8:	b2db      	uxtb	r3, r3
 8006cba:	2b01      	cmp	r3, #1
 8006cbc:	d10c      	bne.n	8006cd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	695b      	ldr	r3, [r3, #20]
 8006cc4:	43da      	mvns	r2, r3
 8006cc6:	68bb      	ldr	r3, [r7, #8]
 8006cc8:	4013      	ands	r3, r2
 8006cca:	b29b      	uxth	r3, r3
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	bf14      	ite	ne
 8006cd0:	2301      	movne	r3, #1
 8006cd2:	2300      	moveq	r3, #0
 8006cd4:	b2db      	uxtb	r3, r3
 8006cd6:	e00b      	b.n	8006cf0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	699b      	ldr	r3, [r3, #24]
 8006cde:	43da      	mvns	r2, r3
 8006ce0:	68bb      	ldr	r3, [r7, #8]
 8006ce2:	4013      	ands	r3, r2
 8006ce4:	b29b      	uxth	r3, r3
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	bf14      	ite	ne
 8006cea:	2301      	movne	r3, #1
 8006cec:	2300      	moveq	r3, #0
 8006cee:	b2db      	uxtb	r3, r3
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	f47f af6d 	bne.w	8006bd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8006cf6:	2300      	movs	r3, #0
}
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	3710      	adds	r7, #16
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	bd80      	pop	{r7, pc}

08006d00 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b084      	sub	sp, #16
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	60f8      	str	r0, [r7, #12]
 8006d08:	60b9      	str	r1, [r7, #8]
 8006d0a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006d0c:	e034      	b.n	8006d78 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006d0e:	68f8      	ldr	r0, [r7, #12]
 8006d10:	f000 f915 	bl	8006f3e <I2C_IsAcknowledgeFailed>
 8006d14:	4603      	mov	r3, r0
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d001      	beq.n	8006d1e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006d1a:	2301      	movs	r3, #1
 8006d1c:	e034      	b.n	8006d88 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d1e:	68bb      	ldr	r3, [r7, #8]
 8006d20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d24:	d028      	beq.n	8006d78 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d26:	f7fc f9d7 	bl	80030d8 <HAL_GetTick>
 8006d2a:	4602      	mov	r2, r0
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	1ad3      	subs	r3, r2, r3
 8006d30:	68ba      	ldr	r2, [r7, #8]
 8006d32:	429a      	cmp	r2, r3
 8006d34:	d302      	bcc.n	8006d3c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006d36:	68bb      	ldr	r3, [r7, #8]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d11d      	bne.n	8006d78 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	695b      	ldr	r3, [r3, #20]
 8006d42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d46:	2b80      	cmp	r3, #128	@ 0x80
 8006d48:	d016      	beq.n	8006d78 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	2220      	movs	r2, #32
 8006d54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d64:	f043 0220 	orr.w	r2, r3, #32
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	2200      	movs	r2, #0
 8006d70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006d74:	2301      	movs	r3, #1
 8006d76:	e007      	b.n	8006d88 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	695b      	ldr	r3, [r3, #20]
 8006d7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d82:	2b80      	cmp	r3, #128	@ 0x80
 8006d84:	d1c3      	bne.n	8006d0e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006d86:	2300      	movs	r3, #0
}
 8006d88:	4618      	mov	r0, r3
 8006d8a:	3710      	adds	r7, #16
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	bd80      	pop	{r7, pc}

08006d90 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b084      	sub	sp, #16
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	60f8      	str	r0, [r7, #12]
 8006d98:	60b9      	str	r1, [r7, #8]
 8006d9a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006d9c:	e034      	b.n	8006e08 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006d9e:	68f8      	ldr	r0, [r7, #12]
 8006da0:	f000 f8cd 	bl	8006f3e <I2C_IsAcknowledgeFailed>
 8006da4:	4603      	mov	r3, r0
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d001      	beq.n	8006dae <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006daa:	2301      	movs	r3, #1
 8006dac:	e034      	b.n	8006e18 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006dae:	68bb      	ldr	r3, [r7, #8]
 8006db0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006db4:	d028      	beq.n	8006e08 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006db6:	f7fc f98f 	bl	80030d8 <HAL_GetTick>
 8006dba:	4602      	mov	r2, r0
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	1ad3      	subs	r3, r2, r3
 8006dc0:	68ba      	ldr	r2, [r7, #8]
 8006dc2:	429a      	cmp	r2, r3
 8006dc4:	d302      	bcc.n	8006dcc <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006dc6:	68bb      	ldr	r3, [r7, #8]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d11d      	bne.n	8006e08 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	695b      	ldr	r3, [r3, #20]
 8006dd2:	f003 0304 	and.w	r3, r3, #4
 8006dd6:	2b04      	cmp	r3, #4
 8006dd8:	d016      	beq.n	8006e08 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	2200      	movs	r2, #0
 8006dde:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	2220      	movs	r2, #32
 8006de4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	2200      	movs	r2, #0
 8006dec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006df4:	f043 0220 	orr.w	r2, r3, #32
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	2200      	movs	r2, #0
 8006e00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006e04:	2301      	movs	r3, #1
 8006e06:	e007      	b.n	8006e18 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	695b      	ldr	r3, [r3, #20]
 8006e0e:	f003 0304 	and.w	r3, r3, #4
 8006e12:	2b04      	cmp	r3, #4
 8006e14:	d1c3      	bne.n	8006d9e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006e16:	2300      	movs	r3, #0
}
 8006e18:	4618      	mov	r0, r3
 8006e1a:	3710      	adds	r7, #16
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	bd80      	pop	{r7, pc}

08006e20 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8006e20:	b480      	push	{r7}
 8006e22:	b085      	sub	sp, #20
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006e28:	2300      	movs	r3, #0
 8006e2a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8006e2c:	4b13      	ldr	r3, [pc, #76]	@ (8006e7c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	08db      	lsrs	r3, r3, #3
 8006e32:	4a13      	ldr	r2, [pc, #76]	@ (8006e80 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8006e34:	fba2 2303 	umull	r2, r3, r2, r3
 8006e38:	0a1a      	lsrs	r2, r3, #8
 8006e3a:	4613      	mov	r3, r2
 8006e3c:	009b      	lsls	r3, r3, #2
 8006e3e:	4413      	add	r3, r2
 8006e40:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	3b01      	subs	r3, #1
 8006e46:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d107      	bne.n	8006e5e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e52:	f043 0220 	orr.w	r2, r3, #32
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8006e5a:	2301      	movs	r3, #1
 8006e5c:	e008      	b.n	8006e70 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006e68:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006e6c:	d0e9      	beq.n	8006e42 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8006e6e:	2300      	movs	r3, #0
}
 8006e70:	4618      	mov	r0, r3
 8006e72:	3714      	adds	r7, #20
 8006e74:	46bd      	mov	sp, r7
 8006e76:	bc80      	pop	{r7}
 8006e78:	4770      	bx	lr
 8006e7a:	bf00      	nop
 8006e7c:	20000018 	.word	0x20000018
 8006e80:	14f8b589 	.word	0x14f8b589

08006e84 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006e84:	b580      	push	{r7, lr}
 8006e86:	b084      	sub	sp, #16
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	60f8      	str	r0, [r7, #12]
 8006e8c:	60b9      	str	r1, [r7, #8]
 8006e8e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006e90:	e049      	b.n	8006f26 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	695b      	ldr	r3, [r3, #20]
 8006e98:	f003 0310 	and.w	r3, r3, #16
 8006e9c:	2b10      	cmp	r3, #16
 8006e9e:	d119      	bne.n	8006ed4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f06f 0210 	mvn.w	r2, #16
 8006ea8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	2200      	movs	r2, #0
 8006eae:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	2220      	movs	r2, #32
 8006eb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	2200      	movs	r2, #0
 8006ebc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	2200      	movs	r2, #0
 8006ecc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006ed0:	2301      	movs	r3, #1
 8006ed2:	e030      	b.n	8006f36 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ed4:	f7fc f900 	bl	80030d8 <HAL_GetTick>
 8006ed8:	4602      	mov	r2, r0
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	1ad3      	subs	r3, r2, r3
 8006ede:	68ba      	ldr	r2, [r7, #8]
 8006ee0:	429a      	cmp	r2, r3
 8006ee2:	d302      	bcc.n	8006eea <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006ee4:	68bb      	ldr	r3, [r7, #8]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d11d      	bne.n	8006f26 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	695b      	ldr	r3, [r3, #20]
 8006ef0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ef4:	2b40      	cmp	r3, #64	@ 0x40
 8006ef6:	d016      	beq.n	8006f26 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	2200      	movs	r2, #0
 8006efc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	2220      	movs	r2, #32
 8006f02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	2200      	movs	r2, #0
 8006f0a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f12:	f043 0220 	orr.w	r2, r3, #32
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8006f22:	2301      	movs	r3, #1
 8006f24:	e007      	b.n	8006f36 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	695b      	ldr	r3, [r3, #20]
 8006f2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f30:	2b40      	cmp	r3, #64	@ 0x40
 8006f32:	d1ae      	bne.n	8006e92 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006f34:	2300      	movs	r3, #0
}
 8006f36:	4618      	mov	r0, r3
 8006f38:	3710      	adds	r7, #16
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	bd80      	pop	{r7, pc}

08006f3e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006f3e:	b480      	push	{r7}
 8006f40:	b083      	sub	sp, #12
 8006f42:	af00      	add	r7, sp, #0
 8006f44:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	695b      	ldr	r3, [r3, #20]
 8006f4c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006f50:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006f54:	d11b      	bne.n	8006f8e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006f5e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2200      	movs	r2, #0
 8006f64:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	2220      	movs	r2, #32
 8006f6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	2200      	movs	r2, #0
 8006f72:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f7a:	f043 0204 	orr.w	r2, r3, #4
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2200      	movs	r2, #0
 8006f86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8006f8a:	2301      	movs	r3, #1
 8006f8c:	e000      	b.n	8006f90 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006f8e:	2300      	movs	r3, #0
}
 8006f90:	4618      	mov	r0, r3
 8006f92:	370c      	adds	r7, #12
 8006f94:	46bd      	mov	sp, r7
 8006f96:	bc80      	pop	{r7}
 8006f98:	4770      	bx	lr

08006f9a <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8006f9a:	b480      	push	{r7}
 8006f9c:	b083      	sub	sp, #12
 8006f9e:	af00      	add	r7, sp, #0
 8006fa0:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fa6:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8006faa:	d103      	bne.n	8006fb4 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2201      	movs	r2, #1
 8006fb0:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8006fb2:	e007      	b.n	8006fc4 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fb8:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8006fbc:	d102      	bne.n	8006fc4 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	2208      	movs	r2, #8
 8006fc2:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8006fc4:	bf00      	nop
 8006fc6:	370c      	adds	r7, #12
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	bc80      	pop	{r7}
 8006fcc:	4770      	bx	lr
	...

08006fd0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b086      	sub	sp, #24
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d101      	bne.n	8006fe2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006fde:	2301      	movs	r3, #1
 8006fe0:	e272      	b.n	80074c8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	f003 0301 	and.w	r3, r3, #1
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	f000 8087 	beq.w	80070fe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006ff0:	4b92      	ldr	r3, [pc, #584]	@ (800723c <HAL_RCC_OscConfig+0x26c>)
 8006ff2:	685b      	ldr	r3, [r3, #4]
 8006ff4:	f003 030c 	and.w	r3, r3, #12
 8006ff8:	2b04      	cmp	r3, #4
 8006ffa:	d00c      	beq.n	8007016 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006ffc:	4b8f      	ldr	r3, [pc, #572]	@ (800723c <HAL_RCC_OscConfig+0x26c>)
 8006ffe:	685b      	ldr	r3, [r3, #4]
 8007000:	f003 030c 	and.w	r3, r3, #12
 8007004:	2b08      	cmp	r3, #8
 8007006:	d112      	bne.n	800702e <HAL_RCC_OscConfig+0x5e>
 8007008:	4b8c      	ldr	r3, [pc, #560]	@ (800723c <HAL_RCC_OscConfig+0x26c>)
 800700a:	685b      	ldr	r3, [r3, #4]
 800700c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007010:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007014:	d10b      	bne.n	800702e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007016:	4b89      	ldr	r3, [pc, #548]	@ (800723c <HAL_RCC_OscConfig+0x26c>)
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800701e:	2b00      	cmp	r3, #0
 8007020:	d06c      	beq.n	80070fc <HAL_RCC_OscConfig+0x12c>
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	685b      	ldr	r3, [r3, #4]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d168      	bne.n	80070fc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800702a:	2301      	movs	r3, #1
 800702c:	e24c      	b.n	80074c8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	685b      	ldr	r3, [r3, #4]
 8007032:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007036:	d106      	bne.n	8007046 <HAL_RCC_OscConfig+0x76>
 8007038:	4b80      	ldr	r3, [pc, #512]	@ (800723c <HAL_RCC_OscConfig+0x26c>)
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	4a7f      	ldr	r2, [pc, #508]	@ (800723c <HAL_RCC_OscConfig+0x26c>)
 800703e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007042:	6013      	str	r3, [r2, #0]
 8007044:	e02e      	b.n	80070a4 <HAL_RCC_OscConfig+0xd4>
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	685b      	ldr	r3, [r3, #4]
 800704a:	2b00      	cmp	r3, #0
 800704c:	d10c      	bne.n	8007068 <HAL_RCC_OscConfig+0x98>
 800704e:	4b7b      	ldr	r3, [pc, #492]	@ (800723c <HAL_RCC_OscConfig+0x26c>)
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	4a7a      	ldr	r2, [pc, #488]	@ (800723c <HAL_RCC_OscConfig+0x26c>)
 8007054:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007058:	6013      	str	r3, [r2, #0]
 800705a:	4b78      	ldr	r3, [pc, #480]	@ (800723c <HAL_RCC_OscConfig+0x26c>)
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	4a77      	ldr	r2, [pc, #476]	@ (800723c <HAL_RCC_OscConfig+0x26c>)
 8007060:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007064:	6013      	str	r3, [r2, #0]
 8007066:	e01d      	b.n	80070a4 <HAL_RCC_OscConfig+0xd4>
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	685b      	ldr	r3, [r3, #4]
 800706c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007070:	d10c      	bne.n	800708c <HAL_RCC_OscConfig+0xbc>
 8007072:	4b72      	ldr	r3, [pc, #456]	@ (800723c <HAL_RCC_OscConfig+0x26c>)
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	4a71      	ldr	r2, [pc, #452]	@ (800723c <HAL_RCC_OscConfig+0x26c>)
 8007078:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800707c:	6013      	str	r3, [r2, #0]
 800707e:	4b6f      	ldr	r3, [pc, #444]	@ (800723c <HAL_RCC_OscConfig+0x26c>)
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	4a6e      	ldr	r2, [pc, #440]	@ (800723c <HAL_RCC_OscConfig+0x26c>)
 8007084:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007088:	6013      	str	r3, [r2, #0]
 800708a:	e00b      	b.n	80070a4 <HAL_RCC_OscConfig+0xd4>
 800708c:	4b6b      	ldr	r3, [pc, #428]	@ (800723c <HAL_RCC_OscConfig+0x26c>)
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	4a6a      	ldr	r2, [pc, #424]	@ (800723c <HAL_RCC_OscConfig+0x26c>)
 8007092:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007096:	6013      	str	r3, [r2, #0]
 8007098:	4b68      	ldr	r3, [pc, #416]	@ (800723c <HAL_RCC_OscConfig+0x26c>)
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	4a67      	ldr	r2, [pc, #412]	@ (800723c <HAL_RCC_OscConfig+0x26c>)
 800709e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80070a2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	685b      	ldr	r3, [r3, #4]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d013      	beq.n	80070d4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80070ac:	f7fc f814 	bl	80030d8 <HAL_GetTick>
 80070b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80070b2:	e008      	b.n	80070c6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80070b4:	f7fc f810 	bl	80030d8 <HAL_GetTick>
 80070b8:	4602      	mov	r2, r0
 80070ba:	693b      	ldr	r3, [r7, #16]
 80070bc:	1ad3      	subs	r3, r2, r3
 80070be:	2b64      	cmp	r3, #100	@ 0x64
 80070c0:	d901      	bls.n	80070c6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80070c2:	2303      	movs	r3, #3
 80070c4:	e200      	b.n	80074c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80070c6:	4b5d      	ldr	r3, [pc, #372]	@ (800723c <HAL_RCC_OscConfig+0x26c>)
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d0f0      	beq.n	80070b4 <HAL_RCC_OscConfig+0xe4>
 80070d2:	e014      	b.n	80070fe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80070d4:	f7fc f800 	bl	80030d8 <HAL_GetTick>
 80070d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80070da:	e008      	b.n	80070ee <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80070dc:	f7fb fffc 	bl	80030d8 <HAL_GetTick>
 80070e0:	4602      	mov	r2, r0
 80070e2:	693b      	ldr	r3, [r7, #16]
 80070e4:	1ad3      	subs	r3, r2, r3
 80070e6:	2b64      	cmp	r3, #100	@ 0x64
 80070e8:	d901      	bls.n	80070ee <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80070ea:	2303      	movs	r3, #3
 80070ec:	e1ec      	b.n	80074c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80070ee:	4b53      	ldr	r3, [pc, #332]	@ (800723c <HAL_RCC_OscConfig+0x26c>)
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d1f0      	bne.n	80070dc <HAL_RCC_OscConfig+0x10c>
 80070fa:	e000      	b.n	80070fe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80070fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f003 0302 	and.w	r3, r3, #2
 8007106:	2b00      	cmp	r3, #0
 8007108:	d063      	beq.n	80071d2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800710a:	4b4c      	ldr	r3, [pc, #304]	@ (800723c <HAL_RCC_OscConfig+0x26c>)
 800710c:	685b      	ldr	r3, [r3, #4]
 800710e:	f003 030c 	and.w	r3, r3, #12
 8007112:	2b00      	cmp	r3, #0
 8007114:	d00b      	beq.n	800712e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8007116:	4b49      	ldr	r3, [pc, #292]	@ (800723c <HAL_RCC_OscConfig+0x26c>)
 8007118:	685b      	ldr	r3, [r3, #4]
 800711a:	f003 030c 	and.w	r3, r3, #12
 800711e:	2b08      	cmp	r3, #8
 8007120:	d11c      	bne.n	800715c <HAL_RCC_OscConfig+0x18c>
 8007122:	4b46      	ldr	r3, [pc, #280]	@ (800723c <HAL_RCC_OscConfig+0x26c>)
 8007124:	685b      	ldr	r3, [r3, #4]
 8007126:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800712a:	2b00      	cmp	r3, #0
 800712c:	d116      	bne.n	800715c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800712e:	4b43      	ldr	r3, [pc, #268]	@ (800723c <HAL_RCC_OscConfig+0x26c>)
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	f003 0302 	and.w	r3, r3, #2
 8007136:	2b00      	cmp	r3, #0
 8007138:	d005      	beq.n	8007146 <HAL_RCC_OscConfig+0x176>
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	691b      	ldr	r3, [r3, #16]
 800713e:	2b01      	cmp	r3, #1
 8007140:	d001      	beq.n	8007146 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8007142:	2301      	movs	r3, #1
 8007144:	e1c0      	b.n	80074c8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007146:	4b3d      	ldr	r3, [pc, #244]	@ (800723c <HAL_RCC_OscConfig+0x26c>)
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	695b      	ldr	r3, [r3, #20]
 8007152:	00db      	lsls	r3, r3, #3
 8007154:	4939      	ldr	r1, [pc, #228]	@ (800723c <HAL_RCC_OscConfig+0x26c>)
 8007156:	4313      	orrs	r3, r2
 8007158:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800715a:	e03a      	b.n	80071d2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	691b      	ldr	r3, [r3, #16]
 8007160:	2b00      	cmp	r3, #0
 8007162:	d020      	beq.n	80071a6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007164:	4b36      	ldr	r3, [pc, #216]	@ (8007240 <HAL_RCC_OscConfig+0x270>)
 8007166:	2201      	movs	r2, #1
 8007168:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800716a:	f7fb ffb5 	bl	80030d8 <HAL_GetTick>
 800716e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007170:	e008      	b.n	8007184 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007172:	f7fb ffb1 	bl	80030d8 <HAL_GetTick>
 8007176:	4602      	mov	r2, r0
 8007178:	693b      	ldr	r3, [r7, #16]
 800717a:	1ad3      	subs	r3, r2, r3
 800717c:	2b02      	cmp	r3, #2
 800717e:	d901      	bls.n	8007184 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8007180:	2303      	movs	r3, #3
 8007182:	e1a1      	b.n	80074c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007184:	4b2d      	ldr	r3, [pc, #180]	@ (800723c <HAL_RCC_OscConfig+0x26c>)
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f003 0302 	and.w	r3, r3, #2
 800718c:	2b00      	cmp	r3, #0
 800718e:	d0f0      	beq.n	8007172 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007190:	4b2a      	ldr	r3, [pc, #168]	@ (800723c <HAL_RCC_OscConfig+0x26c>)
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	695b      	ldr	r3, [r3, #20]
 800719c:	00db      	lsls	r3, r3, #3
 800719e:	4927      	ldr	r1, [pc, #156]	@ (800723c <HAL_RCC_OscConfig+0x26c>)
 80071a0:	4313      	orrs	r3, r2
 80071a2:	600b      	str	r3, [r1, #0]
 80071a4:	e015      	b.n	80071d2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80071a6:	4b26      	ldr	r3, [pc, #152]	@ (8007240 <HAL_RCC_OscConfig+0x270>)
 80071a8:	2200      	movs	r2, #0
 80071aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80071ac:	f7fb ff94 	bl	80030d8 <HAL_GetTick>
 80071b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80071b2:	e008      	b.n	80071c6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80071b4:	f7fb ff90 	bl	80030d8 <HAL_GetTick>
 80071b8:	4602      	mov	r2, r0
 80071ba:	693b      	ldr	r3, [r7, #16]
 80071bc:	1ad3      	subs	r3, r2, r3
 80071be:	2b02      	cmp	r3, #2
 80071c0:	d901      	bls.n	80071c6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80071c2:	2303      	movs	r3, #3
 80071c4:	e180      	b.n	80074c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80071c6:	4b1d      	ldr	r3, [pc, #116]	@ (800723c <HAL_RCC_OscConfig+0x26c>)
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	f003 0302 	and.w	r3, r3, #2
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d1f0      	bne.n	80071b4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	f003 0308 	and.w	r3, r3, #8
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d03a      	beq.n	8007254 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	699b      	ldr	r3, [r3, #24]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d019      	beq.n	800721a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80071e6:	4b17      	ldr	r3, [pc, #92]	@ (8007244 <HAL_RCC_OscConfig+0x274>)
 80071e8:	2201      	movs	r2, #1
 80071ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80071ec:	f7fb ff74 	bl	80030d8 <HAL_GetTick>
 80071f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80071f2:	e008      	b.n	8007206 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80071f4:	f7fb ff70 	bl	80030d8 <HAL_GetTick>
 80071f8:	4602      	mov	r2, r0
 80071fa:	693b      	ldr	r3, [r7, #16]
 80071fc:	1ad3      	subs	r3, r2, r3
 80071fe:	2b02      	cmp	r3, #2
 8007200:	d901      	bls.n	8007206 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8007202:	2303      	movs	r3, #3
 8007204:	e160      	b.n	80074c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007206:	4b0d      	ldr	r3, [pc, #52]	@ (800723c <HAL_RCC_OscConfig+0x26c>)
 8007208:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800720a:	f003 0302 	and.w	r3, r3, #2
 800720e:	2b00      	cmp	r3, #0
 8007210:	d0f0      	beq.n	80071f4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8007212:	2001      	movs	r0, #1
 8007214:	f000 face 	bl	80077b4 <RCC_Delay>
 8007218:	e01c      	b.n	8007254 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800721a:	4b0a      	ldr	r3, [pc, #40]	@ (8007244 <HAL_RCC_OscConfig+0x274>)
 800721c:	2200      	movs	r2, #0
 800721e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007220:	f7fb ff5a 	bl	80030d8 <HAL_GetTick>
 8007224:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007226:	e00f      	b.n	8007248 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007228:	f7fb ff56 	bl	80030d8 <HAL_GetTick>
 800722c:	4602      	mov	r2, r0
 800722e:	693b      	ldr	r3, [r7, #16]
 8007230:	1ad3      	subs	r3, r2, r3
 8007232:	2b02      	cmp	r3, #2
 8007234:	d908      	bls.n	8007248 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8007236:	2303      	movs	r3, #3
 8007238:	e146      	b.n	80074c8 <HAL_RCC_OscConfig+0x4f8>
 800723a:	bf00      	nop
 800723c:	40021000 	.word	0x40021000
 8007240:	42420000 	.word	0x42420000
 8007244:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007248:	4b92      	ldr	r3, [pc, #584]	@ (8007494 <HAL_RCC_OscConfig+0x4c4>)
 800724a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800724c:	f003 0302 	and.w	r3, r3, #2
 8007250:	2b00      	cmp	r3, #0
 8007252:	d1e9      	bne.n	8007228 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	f003 0304 	and.w	r3, r3, #4
 800725c:	2b00      	cmp	r3, #0
 800725e:	f000 80a6 	beq.w	80073ae <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007262:	2300      	movs	r3, #0
 8007264:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007266:	4b8b      	ldr	r3, [pc, #556]	@ (8007494 <HAL_RCC_OscConfig+0x4c4>)
 8007268:	69db      	ldr	r3, [r3, #28]
 800726a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800726e:	2b00      	cmp	r3, #0
 8007270:	d10d      	bne.n	800728e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007272:	4b88      	ldr	r3, [pc, #544]	@ (8007494 <HAL_RCC_OscConfig+0x4c4>)
 8007274:	69db      	ldr	r3, [r3, #28]
 8007276:	4a87      	ldr	r2, [pc, #540]	@ (8007494 <HAL_RCC_OscConfig+0x4c4>)
 8007278:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800727c:	61d3      	str	r3, [r2, #28]
 800727e:	4b85      	ldr	r3, [pc, #532]	@ (8007494 <HAL_RCC_OscConfig+0x4c4>)
 8007280:	69db      	ldr	r3, [r3, #28]
 8007282:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007286:	60bb      	str	r3, [r7, #8]
 8007288:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800728a:	2301      	movs	r3, #1
 800728c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800728e:	4b82      	ldr	r3, [pc, #520]	@ (8007498 <HAL_RCC_OscConfig+0x4c8>)
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007296:	2b00      	cmp	r3, #0
 8007298:	d118      	bne.n	80072cc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800729a:	4b7f      	ldr	r3, [pc, #508]	@ (8007498 <HAL_RCC_OscConfig+0x4c8>)
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	4a7e      	ldr	r2, [pc, #504]	@ (8007498 <HAL_RCC_OscConfig+0x4c8>)
 80072a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80072a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80072a6:	f7fb ff17 	bl	80030d8 <HAL_GetTick>
 80072aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80072ac:	e008      	b.n	80072c0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80072ae:	f7fb ff13 	bl	80030d8 <HAL_GetTick>
 80072b2:	4602      	mov	r2, r0
 80072b4:	693b      	ldr	r3, [r7, #16]
 80072b6:	1ad3      	subs	r3, r2, r3
 80072b8:	2b64      	cmp	r3, #100	@ 0x64
 80072ba:	d901      	bls.n	80072c0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80072bc:	2303      	movs	r3, #3
 80072be:	e103      	b.n	80074c8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80072c0:	4b75      	ldr	r3, [pc, #468]	@ (8007498 <HAL_RCC_OscConfig+0x4c8>)
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d0f0      	beq.n	80072ae <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	68db      	ldr	r3, [r3, #12]
 80072d0:	2b01      	cmp	r3, #1
 80072d2:	d106      	bne.n	80072e2 <HAL_RCC_OscConfig+0x312>
 80072d4:	4b6f      	ldr	r3, [pc, #444]	@ (8007494 <HAL_RCC_OscConfig+0x4c4>)
 80072d6:	6a1b      	ldr	r3, [r3, #32]
 80072d8:	4a6e      	ldr	r2, [pc, #440]	@ (8007494 <HAL_RCC_OscConfig+0x4c4>)
 80072da:	f043 0301 	orr.w	r3, r3, #1
 80072de:	6213      	str	r3, [r2, #32]
 80072e0:	e02d      	b.n	800733e <HAL_RCC_OscConfig+0x36e>
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	68db      	ldr	r3, [r3, #12]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d10c      	bne.n	8007304 <HAL_RCC_OscConfig+0x334>
 80072ea:	4b6a      	ldr	r3, [pc, #424]	@ (8007494 <HAL_RCC_OscConfig+0x4c4>)
 80072ec:	6a1b      	ldr	r3, [r3, #32]
 80072ee:	4a69      	ldr	r2, [pc, #420]	@ (8007494 <HAL_RCC_OscConfig+0x4c4>)
 80072f0:	f023 0301 	bic.w	r3, r3, #1
 80072f4:	6213      	str	r3, [r2, #32]
 80072f6:	4b67      	ldr	r3, [pc, #412]	@ (8007494 <HAL_RCC_OscConfig+0x4c4>)
 80072f8:	6a1b      	ldr	r3, [r3, #32]
 80072fa:	4a66      	ldr	r2, [pc, #408]	@ (8007494 <HAL_RCC_OscConfig+0x4c4>)
 80072fc:	f023 0304 	bic.w	r3, r3, #4
 8007300:	6213      	str	r3, [r2, #32]
 8007302:	e01c      	b.n	800733e <HAL_RCC_OscConfig+0x36e>
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	68db      	ldr	r3, [r3, #12]
 8007308:	2b05      	cmp	r3, #5
 800730a:	d10c      	bne.n	8007326 <HAL_RCC_OscConfig+0x356>
 800730c:	4b61      	ldr	r3, [pc, #388]	@ (8007494 <HAL_RCC_OscConfig+0x4c4>)
 800730e:	6a1b      	ldr	r3, [r3, #32]
 8007310:	4a60      	ldr	r2, [pc, #384]	@ (8007494 <HAL_RCC_OscConfig+0x4c4>)
 8007312:	f043 0304 	orr.w	r3, r3, #4
 8007316:	6213      	str	r3, [r2, #32]
 8007318:	4b5e      	ldr	r3, [pc, #376]	@ (8007494 <HAL_RCC_OscConfig+0x4c4>)
 800731a:	6a1b      	ldr	r3, [r3, #32]
 800731c:	4a5d      	ldr	r2, [pc, #372]	@ (8007494 <HAL_RCC_OscConfig+0x4c4>)
 800731e:	f043 0301 	orr.w	r3, r3, #1
 8007322:	6213      	str	r3, [r2, #32]
 8007324:	e00b      	b.n	800733e <HAL_RCC_OscConfig+0x36e>
 8007326:	4b5b      	ldr	r3, [pc, #364]	@ (8007494 <HAL_RCC_OscConfig+0x4c4>)
 8007328:	6a1b      	ldr	r3, [r3, #32]
 800732a:	4a5a      	ldr	r2, [pc, #360]	@ (8007494 <HAL_RCC_OscConfig+0x4c4>)
 800732c:	f023 0301 	bic.w	r3, r3, #1
 8007330:	6213      	str	r3, [r2, #32]
 8007332:	4b58      	ldr	r3, [pc, #352]	@ (8007494 <HAL_RCC_OscConfig+0x4c4>)
 8007334:	6a1b      	ldr	r3, [r3, #32]
 8007336:	4a57      	ldr	r2, [pc, #348]	@ (8007494 <HAL_RCC_OscConfig+0x4c4>)
 8007338:	f023 0304 	bic.w	r3, r3, #4
 800733c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	68db      	ldr	r3, [r3, #12]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d015      	beq.n	8007372 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007346:	f7fb fec7 	bl	80030d8 <HAL_GetTick>
 800734a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800734c:	e00a      	b.n	8007364 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800734e:	f7fb fec3 	bl	80030d8 <HAL_GetTick>
 8007352:	4602      	mov	r2, r0
 8007354:	693b      	ldr	r3, [r7, #16]
 8007356:	1ad3      	subs	r3, r2, r3
 8007358:	f241 3288 	movw	r2, #5000	@ 0x1388
 800735c:	4293      	cmp	r3, r2
 800735e:	d901      	bls.n	8007364 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8007360:	2303      	movs	r3, #3
 8007362:	e0b1      	b.n	80074c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007364:	4b4b      	ldr	r3, [pc, #300]	@ (8007494 <HAL_RCC_OscConfig+0x4c4>)
 8007366:	6a1b      	ldr	r3, [r3, #32]
 8007368:	f003 0302 	and.w	r3, r3, #2
 800736c:	2b00      	cmp	r3, #0
 800736e:	d0ee      	beq.n	800734e <HAL_RCC_OscConfig+0x37e>
 8007370:	e014      	b.n	800739c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007372:	f7fb feb1 	bl	80030d8 <HAL_GetTick>
 8007376:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007378:	e00a      	b.n	8007390 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800737a:	f7fb fead 	bl	80030d8 <HAL_GetTick>
 800737e:	4602      	mov	r2, r0
 8007380:	693b      	ldr	r3, [r7, #16]
 8007382:	1ad3      	subs	r3, r2, r3
 8007384:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007388:	4293      	cmp	r3, r2
 800738a:	d901      	bls.n	8007390 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800738c:	2303      	movs	r3, #3
 800738e:	e09b      	b.n	80074c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007390:	4b40      	ldr	r3, [pc, #256]	@ (8007494 <HAL_RCC_OscConfig+0x4c4>)
 8007392:	6a1b      	ldr	r3, [r3, #32]
 8007394:	f003 0302 	and.w	r3, r3, #2
 8007398:	2b00      	cmp	r3, #0
 800739a:	d1ee      	bne.n	800737a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800739c:	7dfb      	ldrb	r3, [r7, #23]
 800739e:	2b01      	cmp	r3, #1
 80073a0:	d105      	bne.n	80073ae <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80073a2:	4b3c      	ldr	r3, [pc, #240]	@ (8007494 <HAL_RCC_OscConfig+0x4c4>)
 80073a4:	69db      	ldr	r3, [r3, #28]
 80073a6:	4a3b      	ldr	r2, [pc, #236]	@ (8007494 <HAL_RCC_OscConfig+0x4c4>)
 80073a8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80073ac:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	69db      	ldr	r3, [r3, #28]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	f000 8087 	beq.w	80074c6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80073b8:	4b36      	ldr	r3, [pc, #216]	@ (8007494 <HAL_RCC_OscConfig+0x4c4>)
 80073ba:	685b      	ldr	r3, [r3, #4]
 80073bc:	f003 030c 	and.w	r3, r3, #12
 80073c0:	2b08      	cmp	r3, #8
 80073c2:	d061      	beq.n	8007488 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	69db      	ldr	r3, [r3, #28]
 80073c8:	2b02      	cmp	r3, #2
 80073ca:	d146      	bne.n	800745a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80073cc:	4b33      	ldr	r3, [pc, #204]	@ (800749c <HAL_RCC_OscConfig+0x4cc>)
 80073ce:	2200      	movs	r2, #0
 80073d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80073d2:	f7fb fe81 	bl	80030d8 <HAL_GetTick>
 80073d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80073d8:	e008      	b.n	80073ec <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80073da:	f7fb fe7d 	bl	80030d8 <HAL_GetTick>
 80073de:	4602      	mov	r2, r0
 80073e0:	693b      	ldr	r3, [r7, #16]
 80073e2:	1ad3      	subs	r3, r2, r3
 80073e4:	2b02      	cmp	r3, #2
 80073e6:	d901      	bls.n	80073ec <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80073e8:	2303      	movs	r3, #3
 80073ea:	e06d      	b.n	80074c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80073ec:	4b29      	ldr	r3, [pc, #164]	@ (8007494 <HAL_RCC_OscConfig+0x4c4>)
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d1f0      	bne.n	80073da <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	6a1b      	ldr	r3, [r3, #32]
 80073fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007400:	d108      	bne.n	8007414 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8007402:	4b24      	ldr	r3, [pc, #144]	@ (8007494 <HAL_RCC_OscConfig+0x4c4>)
 8007404:	685b      	ldr	r3, [r3, #4]
 8007406:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	689b      	ldr	r3, [r3, #8]
 800740e:	4921      	ldr	r1, [pc, #132]	@ (8007494 <HAL_RCC_OscConfig+0x4c4>)
 8007410:	4313      	orrs	r3, r2
 8007412:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007414:	4b1f      	ldr	r3, [pc, #124]	@ (8007494 <HAL_RCC_OscConfig+0x4c4>)
 8007416:	685b      	ldr	r3, [r3, #4]
 8007418:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	6a19      	ldr	r1, [r3, #32]
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007424:	430b      	orrs	r3, r1
 8007426:	491b      	ldr	r1, [pc, #108]	@ (8007494 <HAL_RCC_OscConfig+0x4c4>)
 8007428:	4313      	orrs	r3, r2
 800742a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800742c:	4b1b      	ldr	r3, [pc, #108]	@ (800749c <HAL_RCC_OscConfig+0x4cc>)
 800742e:	2201      	movs	r2, #1
 8007430:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007432:	f7fb fe51 	bl	80030d8 <HAL_GetTick>
 8007436:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007438:	e008      	b.n	800744c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800743a:	f7fb fe4d 	bl	80030d8 <HAL_GetTick>
 800743e:	4602      	mov	r2, r0
 8007440:	693b      	ldr	r3, [r7, #16]
 8007442:	1ad3      	subs	r3, r2, r3
 8007444:	2b02      	cmp	r3, #2
 8007446:	d901      	bls.n	800744c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8007448:	2303      	movs	r3, #3
 800744a:	e03d      	b.n	80074c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800744c:	4b11      	ldr	r3, [pc, #68]	@ (8007494 <HAL_RCC_OscConfig+0x4c4>)
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007454:	2b00      	cmp	r3, #0
 8007456:	d0f0      	beq.n	800743a <HAL_RCC_OscConfig+0x46a>
 8007458:	e035      	b.n	80074c6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800745a:	4b10      	ldr	r3, [pc, #64]	@ (800749c <HAL_RCC_OscConfig+0x4cc>)
 800745c:	2200      	movs	r2, #0
 800745e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007460:	f7fb fe3a 	bl	80030d8 <HAL_GetTick>
 8007464:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007466:	e008      	b.n	800747a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007468:	f7fb fe36 	bl	80030d8 <HAL_GetTick>
 800746c:	4602      	mov	r2, r0
 800746e:	693b      	ldr	r3, [r7, #16]
 8007470:	1ad3      	subs	r3, r2, r3
 8007472:	2b02      	cmp	r3, #2
 8007474:	d901      	bls.n	800747a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8007476:	2303      	movs	r3, #3
 8007478:	e026      	b.n	80074c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800747a:	4b06      	ldr	r3, [pc, #24]	@ (8007494 <HAL_RCC_OscConfig+0x4c4>)
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007482:	2b00      	cmp	r3, #0
 8007484:	d1f0      	bne.n	8007468 <HAL_RCC_OscConfig+0x498>
 8007486:	e01e      	b.n	80074c6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	69db      	ldr	r3, [r3, #28]
 800748c:	2b01      	cmp	r3, #1
 800748e:	d107      	bne.n	80074a0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8007490:	2301      	movs	r3, #1
 8007492:	e019      	b.n	80074c8 <HAL_RCC_OscConfig+0x4f8>
 8007494:	40021000 	.word	0x40021000
 8007498:	40007000 	.word	0x40007000
 800749c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80074a0:	4b0b      	ldr	r3, [pc, #44]	@ (80074d0 <HAL_RCC_OscConfig+0x500>)
 80074a2:	685b      	ldr	r3, [r3, #4]
 80074a4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	6a1b      	ldr	r3, [r3, #32]
 80074b0:	429a      	cmp	r2, r3
 80074b2:	d106      	bne.n	80074c2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80074be:	429a      	cmp	r2, r3
 80074c0:	d001      	beq.n	80074c6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80074c2:	2301      	movs	r3, #1
 80074c4:	e000      	b.n	80074c8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80074c6:	2300      	movs	r3, #0
}
 80074c8:	4618      	mov	r0, r3
 80074ca:	3718      	adds	r7, #24
 80074cc:	46bd      	mov	sp, r7
 80074ce:	bd80      	pop	{r7, pc}
 80074d0:	40021000 	.word	0x40021000

080074d4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80074d4:	b580      	push	{r7, lr}
 80074d6:	b084      	sub	sp, #16
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
 80074dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d101      	bne.n	80074e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80074e4:	2301      	movs	r3, #1
 80074e6:	e0d0      	b.n	800768a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80074e8:	4b6a      	ldr	r3, [pc, #424]	@ (8007694 <HAL_RCC_ClockConfig+0x1c0>)
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	f003 0307 	and.w	r3, r3, #7
 80074f0:	683a      	ldr	r2, [r7, #0]
 80074f2:	429a      	cmp	r2, r3
 80074f4:	d910      	bls.n	8007518 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80074f6:	4b67      	ldr	r3, [pc, #412]	@ (8007694 <HAL_RCC_ClockConfig+0x1c0>)
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	f023 0207 	bic.w	r2, r3, #7
 80074fe:	4965      	ldr	r1, [pc, #404]	@ (8007694 <HAL_RCC_ClockConfig+0x1c0>)
 8007500:	683b      	ldr	r3, [r7, #0]
 8007502:	4313      	orrs	r3, r2
 8007504:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007506:	4b63      	ldr	r3, [pc, #396]	@ (8007694 <HAL_RCC_ClockConfig+0x1c0>)
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	f003 0307 	and.w	r3, r3, #7
 800750e:	683a      	ldr	r2, [r7, #0]
 8007510:	429a      	cmp	r2, r3
 8007512:	d001      	beq.n	8007518 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8007514:	2301      	movs	r3, #1
 8007516:	e0b8      	b.n	800768a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	f003 0302 	and.w	r3, r3, #2
 8007520:	2b00      	cmp	r3, #0
 8007522:	d020      	beq.n	8007566 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	f003 0304 	and.w	r3, r3, #4
 800752c:	2b00      	cmp	r3, #0
 800752e:	d005      	beq.n	800753c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007530:	4b59      	ldr	r3, [pc, #356]	@ (8007698 <HAL_RCC_ClockConfig+0x1c4>)
 8007532:	685b      	ldr	r3, [r3, #4]
 8007534:	4a58      	ldr	r2, [pc, #352]	@ (8007698 <HAL_RCC_ClockConfig+0x1c4>)
 8007536:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800753a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f003 0308 	and.w	r3, r3, #8
 8007544:	2b00      	cmp	r3, #0
 8007546:	d005      	beq.n	8007554 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007548:	4b53      	ldr	r3, [pc, #332]	@ (8007698 <HAL_RCC_ClockConfig+0x1c4>)
 800754a:	685b      	ldr	r3, [r3, #4]
 800754c:	4a52      	ldr	r2, [pc, #328]	@ (8007698 <HAL_RCC_ClockConfig+0x1c4>)
 800754e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8007552:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007554:	4b50      	ldr	r3, [pc, #320]	@ (8007698 <HAL_RCC_ClockConfig+0x1c4>)
 8007556:	685b      	ldr	r3, [r3, #4]
 8007558:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	689b      	ldr	r3, [r3, #8]
 8007560:	494d      	ldr	r1, [pc, #308]	@ (8007698 <HAL_RCC_ClockConfig+0x1c4>)
 8007562:	4313      	orrs	r3, r2
 8007564:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	f003 0301 	and.w	r3, r3, #1
 800756e:	2b00      	cmp	r3, #0
 8007570:	d040      	beq.n	80075f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	685b      	ldr	r3, [r3, #4]
 8007576:	2b01      	cmp	r3, #1
 8007578:	d107      	bne.n	800758a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800757a:	4b47      	ldr	r3, [pc, #284]	@ (8007698 <HAL_RCC_ClockConfig+0x1c4>)
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007582:	2b00      	cmp	r3, #0
 8007584:	d115      	bne.n	80075b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007586:	2301      	movs	r3, #1
 8007588:	e07f      	b.n	800768a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	685b      	ldr	r3, [r3, #4]
 800758e:	2b02      	cmp	r3, #2
 8007590:	d107      	bne.n	80075a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007592:	4b41      	ldr	r3, [pc, #260]	@ (8007698 <HAL_RCC_ClockConfig+0x1c4>)
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800759a:	2b00      	cmp	r3, #0
 800759c:	d109      	bne.n	80075b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800759e:	2301      	movs	r3, #1
 80075a0:	e073      	b.n	800768a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80075a2:	4b3d      	ldr	r3, [pc, #244]	@ (8007698 <HAL_RCC_ClockConfig+0x1c4>)
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	f003 0302 	and.w	r3, r3, #2
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d101      	bne.n	80075b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80075ae:	2301      	movs	r3, #1
 80075b0:	e06b      	b.n	800768a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80075b2:	4b39      	ldr	r3, [pc, #228]	@ (8007698 <HAL_RCC_ClockConfig+0x1c4>)
 80075b4:	685b      	ldr	r3, [r3, #4]
 80075b6:	f023 0203 	bic.w	r2, r3, #3
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	685b      	ldr	r3, [r3, #4]
 80075be:	4936      	ldr	r1, [pc, #216]	@ (8007698 <HAL_RCC_ClockConfig+0x1c4>)
 80075c0:	4313      	orrs	r3, r2
 80075c2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80075c4:	f7fb fd88 	bl	80030d8 <HAL_GetTick>
 80075c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80075ca:	e00a      	b.n	80075e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80075cc:	f7fb fd84 	bl	80030d8 <HAL_GetTick>
 80075d0:	4602      	mov	r2, r0
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	1ad3      	subs	r3, r2, r3
 80075d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80075da:	4293      	cmp	r3, r2
 80075dc:	d901      	bls.n	80075e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80075de:	2303      	movs	r3, #3
 80075e0:	e053      	b.n	800768a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80075e2:	4b2d      	ldr	r3, [pc, #180]	@ (8007698 <HAL_RCC_ClockConfig+0x1c4>)
 80075e4:	685b      	ldr	r3, [r3, #4]
 80075e6:	f003 020c 	and.w	r2, r3, #12
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	685b      	ldr	r3, [r3, #4]
 80075ee:	009b      	lsls	r3, r3, #2
 80075f0:	429a      	cmp	r2, r3
 80075f2:	d1eb      	bne.n	80075cc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80075f4:	4b27      	ldr	r3, [pc, #156]	@ (8007694 <HAL_RCC_ClockConfig+0x1c0>)
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	f003 0307 	and.w	r3, r3, #7
 80075fc:	683a      	ldr	r2, [r7, #0]
 80075fe:	429a      	cmp	r2, r3
 8007600:	d210      	bcs.n	8007624 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007602:	4b24      	ldr	r3, [pc, #144]	@ (8007694 <HAL_RCC_ClockConfig+0x1c0>)
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	f023 0207 	bic.w	r2, r3, #7
 800760a:	4922      	ldr	r1, [pc, #136]	@ (8007694 <HAL_RCC_ClockConfig+0x1c0>)
 800760c:	683b      	ldr	r3, [r7, #0]
 800760e:	4313      	orrs	r3, r2
 8007610:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007612:	4b20      	ldr	r3, [pc, #128]	@ (8007694 <HAL_RCC_ClockConfig+0x1c0>)
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	f003 0307 	and.w	r3, r3, #7
 800761a:	683a      	ldr	r2, [r7, #0]
 800761c:	429a      	cmp	r2, r3
 800761e:	d001      	beq.n	8007624 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8007620:	2301      	movs	r3, #1
 8007622:	e032      	b.n	800768a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	f003 0304 	and.w	r3, r3, #4
 800762c:	2b00      	cmp	r3, #0
 800762e:	d008      	beq.n	8007642 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007630:	4b19      	ldr	r3, [pc, #100]	@ (8007698 <HAL_RCC_ClockConfig+0x1c4>)
 8007632:	685b      	ldr	r3, [r3, #4]
 8007634:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	68db      	ldr	r3, [r3, #12]
 800763c:	4916      	ldr	r1, [pc, #88]	@ (8007698 <HAL_RCC_ClockConfig+0x1c4>)
 800763e:	4313      	orrs	r3, r2
 8007640:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	f003 0308 	and.w	r3, r3, #8
 800764a:	2b00      	cmp	r3, #0
 800764c:	d009      	beq.n	8007662 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800764e:	4b12      	ldr	r3, [pc, #72]	@ (8007698 <HAL_RCC_ClockConfig+0x1c4>)
 8007650:	685b      	ldr	r3, [r3, #4]
 8007652:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	691b      	ldr	r3, [r3, #16]
 800765a:	00db      	lsls	r3, r3, #3
 800765c:	490e      	ldr	r1, [pc, #56]	@ (8007698 <HAL_RCC_ClockConfig+0x1c4>)
 800765e:	4313      	orrs	r3, r2
 8007660:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007662:	f000 f821 	bl	80076a8 <HAL_RCC_GetSysClockFreq>
 8007666:	4602      	mov	r2, r0
 8007668:	4b0b      	ldr	r3, [pc, #44]	@ (8007698 <HAL_RCC_ClockConfig+0x1c4>)
 800766a:	685b      	ldr	r3, [r3, #4]
 800766c:	091b      	lsrs	r3, r3, #4
 800766e:	f003 030f 	and.w	r3, r3, #15
 8007672:	490a      	ldr	r1, [pc, #40]	@ (800769c <HAL_RCC_ClockConfig+0x1c8>)
 8007674:	5ccb      	ldrb	r3, [r1, r3]
 8007676:	fa22 f303 	lsr.w	r3, r2, r3
 800767a:	4a09      	ldr	r2, [pc, #36]	@ (80076a0 <HAL_RCC_ClockConfig+0x1cc>)
 800767c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800767e:	4b09      	ldr	r3, [pc, #36]	@ (80076a4 <HAL_RCC_ClockConfig+0x1d0>)
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	4618      	mov	r0, r3
 8007684:	f7fb fce6 	bl	8003054 <HAL_InitTick>

  return HAL_OK;
 8007688:	2300      	movs	r3, #0
}
 800768a:	4618      	mov	r0, r3
 800768c:	3710      	adds	r7, #16
 800768e:	46bd      	mov	sp, r7
 8007690:	bd80      	pop	{r7, pc}
 8007692:	bf00      	nop
 8007694:	40022000 	.word	0x40022000
 8007698:	40021000 	.word	0x40021000
 800769c:	0800da0c 	.word	0x0800da0c
 80076a0:	20000018 	.word	0x20000018
 80076a4:	2000001c 	.word	0x2000001c

080076a8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80076a8:	b480      	push	{r7}
 80076aa:	b087      	sub	sp, #28
 80076ac:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80076ae:	2300      	movs	r3, #0
 80076b0:	60fb      	str	r3, [r7, #12]
 80076b2:	2300      	movs	r3, #0
 80076b4:	60bb      	str	r3, [r7, #8]
 80076b6:	2300      	movs	r3, #0
 80076b8:	617b      	str	r3, [r7, #20]
 80076ba:	2300      	movs	r3, #0
 80076bc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80076be:	2300      	movs	r3, #0
 80076c0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80076c2:	4b1e      	ldr	r3, [pc, #120]	@ (800773c <HAL_RCC_GetSysClockFreq+0x94>)
 80076c4:	685b      	ldr	r3, [r3, #4]
 80076c6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	f003 030c 	and.w	r3, r3, #12
 80076ce:	2b04      	cmp	r3, #4
 80076d0:	d002      	beq.n	80076d8 <HAL_RCC_GetSysClockFreq+0x30>
 80076d2:	2b08      	cmp	r3, #8
 80076d4:	d003      	beq.n	80076de <HAL_RCC_GetSysClockFreq+0x36>
 80076d6:	e027      	b.n	8007728 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80076d8:	4b19      	ldr	r3, [pc, #100]	@ (8007740 <HAL_RCC_GetSysClockFreq+0x98>)
 80076da:	613b      	str	r3, [r7, #16]
      break;
 80076dc:	e027      	b.n	800772e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	0c9b      	lsrs	r3, r3, #18
 80076e2:	f003 030f 	and.w	r3, r3, #15
 80076e6:	4a17      	ldr	r2, [pc, #92]	@ (8007744 <HAL_RCC_GetSysClockFreq+0x9c>)
 80076e8:	5cd3      	ldrb	r3, [r2, r3]
 80076ea:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d010      	beq.n	8007718 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80076f6:	4b11      	ldr	r3, [pc, #68]	@ (800773c <HAL_RCC_GetSysClockFreq+0x94>)
 80076f8:	685b      	ldr	r3, [r3, #4]
 80076fa:	0c5b      	lsrs	r3, r3, #17
 80076fc:	f003 0301 	and.w	r3, r3, #1
 8007700:	4a11      	ldr	r2, [pc, #68]	@ (8007748 <HAL_RCC_GetSysClockFreq+0xa0>)
 8007702:	5cd3      	ldrb	r3, [r2, r3]
 8007704:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	4a0d      	ldr	r2, [pc, #52]	@ (8007740 <HAL_RCC_GetSysClockFreq+0x98>)
 800770a:	fb03 f202 	mul.w	r2, r3, r2
 800770e:	68bb      	ldr	r3, [r7, #8]
 8007710:	fbb2 f3f3 	udiv	r3, r2, r3
 8007714:	617b      	str	r3, [r7, #20]
 8007716:	e004      	b.n	8007722 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	4a0c      	ldr	r2, [pc, #48]	@ (800774c <HAL_RCC_GetSysClockFreq+0xa4>)
 800771c:	fb02 f303 	mul.w	r3, r2, r3
 8007720:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8007722:	697b      	ldr	r3, [r7, #20]
 8007724:	613b      	str	r3, [r7, #16]
      break;
 8007726:	e002      	b.n	800772e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8007728:	4b05      	ldr	r3, [pc, #20]	@ (8007740 <HAL_RCC_GetSysClockFreq+0x98>)
 800772a:	613b      	str	r3, [r7, #16]
      break;
 800772c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800772e:	693b      	ldr	r3, [r7, #16]
}
 8007730:	4618      	mov	r0, r3
 8007732:	371c      	adds	r7, #28
 8007734:	46bd      	mov	sp, r7
 8007736:	bc80      	pop	{r7}
 8007738:	4770      	bx	lr
 800773a:	bf00      	nop
 800773c:	40021000 	.word	0x40021000
 8007740:	007a1200 	.word	0x007a1200
 8007744:	0800da24 	.word	0x0800da24
 8007748:	0800da34 	.word	0x0800da34
 800774c:	003d0900 	.word	0x003d0900

08007750 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007750:	b480      	push	{r7}
 8007752:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007754:	4b02      	ldr	r3, [pc, #8]	@ (8007760 <HAL_RCC_GetHCLKFreq+0x10>)
 8007756:	681b      	ldr	r3, [r3, #0]
}
 8007758:	4618      	mov	r0, r3
 800775a:	46bd      	mov	sp, r7
 800775c:	bc80      	pop	{r7}
 800775e:	4770      	bx	lr
 8007760:	20000018 	.word	0x20000018

08007764 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007764:	b580      	push	{r7, lr}
 8007766:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007768:	f7ff fff2 	bl	8007750 <HAL_RCC_GetHCLKFreq>
 800776c:	4602      	mov	r2, r0
 800776e:	4b05      	ldr	r3, [pc, #20]	@ (8007784 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007770:	685b      	ldr	r3, [r3, #4]
 8007772:	0a1b      	lsrs	r3, r3, #8
 8007774:	f003 0307 	and.w	r3, r3, #7
 8007778:	4903      	ldr	r1, [pc, #12]	@ (8007788 <HAL_RCC_GetPCLK1Freq+0x24>)
 800777a:	5ccb      	ldrb	r3, [r1, r3]
 800777c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007780:	4618      	mov	r0, r3
 8007782:	bd80      	pop	{r7, pc}
 8007784:	40021000 	.word	0x40021000
 8007788:	0800da1c 	.word	0x0800da1c

0800778c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800778c:	b580      	push	{r7, lr}
 800778e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007790:	f7ff ffde 	bl	8007750 <HAL_RCC_GetHCLKFreq>
 8007794:	4602      	mov	r2, r0
 8007796:	4b05      	ldr	r3, [pc, #20]	@ (80077ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8007798:	685b      	ldr	r3, [r3, #4]
 800779a:	0adb      	lsrs	r3, r3, #11
 800779c:	f003 0307 	and.w	r3, r3, #7
 80077a0:	4903      	ldr	r1, [pc, #12]	@ (80077b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80077a2:	5ccb      	ldrb	r3, [r1, r3]
 80077a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80077a8:	4618      	mov	r0, r3
 80077aa:	bd80      	pop	{r7, pc}
 80077ac:	40021000 	.word	0x40021000
 80077b0:	0800da1c 	.word	0x0800da1c

080077b4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80077b4:	b480      	push	{r7}
 80077b6:	b085      	sub	sp, #20
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80077bc:	4b0a      	ldr	r3, [pc, #40]	@ (80077e8 <RCC_Delay+0x34>)
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	4a0a      	ldr	r2, [pc, #40]	@ (80077ec <RCC_Delay+0x38>)
 80077c2:	fba2 2303 	umull	r2, r3, r2, r3
 80077c6:	0a5b      	lsrs	r3, r3, #9
 80077c8:	687a      	ldr	r2, [r7, #4]
 80077ca:	fb02 f303 	mul.w	r3, r2, r3
 80077ce:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80077d0:	bf00      	nop
  }
  while (Delay --);
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	1e5a      	subs	r2, r3, #1
 80077d6:	60fa      	str	r2, [r7, #12]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d1f9      	bne.n	80077d0 <RCC_Delay+0x1c>
}
 80077dc:	bf00      	nop
 80077de:	bf00      	nop
 80077e0:	3714      	adds	r7, #20
 80077e2:	46bd      	mov	sp, r7
 80077e4:	bc80      	pop	{r7}
 80077e6:	4770      	bx	lr
 80077e8:	20000018 	.word	0x20000018
 80077ec:	10624dd3 	.word	0x10624dd3

080077f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b086      	sub	sp, #24
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80077f8:	2300      	movs	r3, #0
 80077fa:	613b      	str	r3, [r7, #16]
 80077fc:	2300      	movs	r3, #0
 80077fe:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	f003 0301 	and.w	r3, r3, #1
 8007808:	2b00      	cmp	r3, #0
 800780a:	d07d      	beq.n	8007908 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800780c:	2300      	movs	r3, #0
 800780e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007810:	4b4f      	ldr	r3, [pc, #316]	@ (8007950 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007812:	69db      	ldr	r3, [r3, #28]
 8007814:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007818:	2b00      	cmp	r3, #0
 800781a:	d10d      	bne.n	8007838 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800781c:	4b4c      	ldr	r3, [pc, #304]	@ (8007950 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800781e:	69db      	ldr	r3, [r3, #28]
 8007820:	4a4b      	ldr	r2, [pc, #300]	@ (8007950 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007822:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007826:	61d3      	str	r3, [r2, #28]
 8007828:	4b49      	ldr	r3, [pc, #292]	@ (8007950 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800782a:	69db      	ldr	r3, [r3, #28]
 800782c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007830:	60bb      	str	r3, [r7, #8]
 8007832:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007834:	2301      	movs	r3, #1
 8007836:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007838:	4b46      	ldr	r3, [pc, #280]	@ (8007954 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007840:	2b00      	cmp	r3, #0
 8007842:	d118      	bne.n	8007876 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007844:	4b43      	ldr	r3, [pc, #268]	@ (8007954 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	4a42      	ldr	r2, [pc, #264]	@ (8007954 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800784a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800784e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007850:	f7fb fc42 	bl	80030d8 <HAL_GetTick>
 8007854:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007856:	e008      	b.n	800786a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007858:	f7fb fc3e 	bl	80030d8 <HAL_GetTick>
 800785c:	4602      	mov	r2, r0
 800785e:	693b      	ldr	r3, [r7, #16]
 8007860:	1ad3      	subs	r3, r2, r3
 8007862:	2b64      	cmp	r3, #100	@ 0x64
 8007864:	d901      	bls.n	800786a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8007866:	2303      	movs	r3, #3
 8007868:	e06d      	b.n	8007946 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800786a:	4b3a      	ldr	r3, [pc, #232]	@ (8007954 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007872:	2b00      	cmp	r3, #0
 8007874:	d0f0      	beq.n	8007858 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007876:	4b36      	ldr	r3, [pc, #216]	@ (8007950 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007878:	6a1b      	ldr	r3, [r3, #32]
 800787a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800787e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d02e      	beq.n	80078e4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	685b      	ldr	r3, [r3, #4]
 800788a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800788e:	68fa      	ldr	r2, [r7, #12]
 8007890:	429a      	cmp	r2, r3
 8007892:	d027      	beq.n	80078e4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007894:	4b2e      	ldr	r3, [pc, #184]	@ (8007950 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007896:	6a1b      	ldr	r3, [r3, #32]
 8007898:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800789c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800789e:	4b2e      	ldr	r3, [pc, #184]	@ (8007958 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80078a0:	2201      	movs	r2, #1
 80078a2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80078a4:	4b2c      	ldr	r3, [pc, #176]	@ (8007958 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80078a6:	2200      	movs	r2, #0
 80078a8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80078aa:	4a29      	ldr	r2, [pc, #164]	@ (8007950 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	f003 0301 	and.w	r3, r3, #1
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d014      	beq.n	80078e4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80078ba:	f7fb fc0d 	bl	80030d8 <HAL_GetTick>
 80078be:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80078c0:	e00a      	b.n	80078d8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80078c2:	f7fb fc09 	bl	80030d8 <HAL_GetTick>
 80078c6:	4602      	mov	r2, r0
 80078c8:	693b      	ldr	r3, [r7, #16]
 80078ca:	1ad3      	subs	r3, r2, r3
 80078cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80078d0:	4293      	cmp	r3, r2
 80078d2:	d901      	bls.n	80078d8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80078d4:	2303      	movs	r3, #3
 80078d6:	e036      	b.n	8007946 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80078d8:	4b1d      	ldr	r3, [pc, #116]	@ (8007950 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80078da:	6a1b      	ldr	r3, [r3, #32]
 80078dc:	f003 0302 	and.w	r3, r3, #2
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d0ee      	beq.n	80078c2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80078e4:	4b1a      	ldr	r3, [pc, #104]	@ (8007950 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80078e6:	6a1b      	ldr	r3, [r3, #32]
 80078e8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	685b      	ldr	r3, [r3, #4]
 80078f0:	4917      	ldr	r1, [pc, #92]	@ (8007950 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80078f2:	4313      	orrs	r3, r2
 80078f4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80078f6:	7dfb      	ldrb	r3, [r7, #23]
 80078f8:	2b01      	cmp	r3, #1
 80078fa:	d105      	bne.n	8007908 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80078fc:	4b14      	ldr	r3, [pc, #80]	@ (8007950 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80078fe:	69db      	ldr	r3, [r3, #28]
 8007900:	4a13      	ldr	r2, [pc, #76]	@ (8007950 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007902:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007906:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	f003 0302 	and.w	r3, r3, #2
 8007910:	2b00      	cmp	r3, #0
 8007912:	d008      	beq.n	8007926 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007914:	4b0e      	ldr	r3, [pc, #56]	@ (8007950 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007916:	685b      	ldr	r3, [r3, #4]
 8007918:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	689b      	ldr	r3, [r3, #8]
 8007920:	490b      	ldr	r1, [pc, #44]	@ (8007950 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007922:	4313      	orrs	r3, r2
 8007924:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	f003 0310 	and.w	r3, r3, #16
 800792e:	2b00      	cmp	r3, #0
 8007930:	d008      	beq.n	8007944 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007932:	4b07      	ldr	r3, [pc, #28]	@ (8007950 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007934:	685b      	ldr	r3, [r3, #4]
 8007936:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	68db      	ldr	r3, [r3, #12]
 800793e:	4904      	ldr	r1, [pc, #16]	@ (8007950 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007940:	4313      	orrs	r3, r2
 8007942:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8007944:	2300      	movs	r3, #0
}
 8007946:	4618      	mov	r0, r3
 8007948:	3718      	adds	r7, #24
 800794a:	46bd      	mov	sp, r7
 800794c:	bd80      	pop	{r7, pc}
 800794e:	bf00      	nop
 8007950:	40021000 	.word	0x40021000
 8007954:	40007000 	.word	0x40007000
 8007958:	42420440 	.word	0x42420440

0800795c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800795c:	b580      	push	{r7, lr}
 800795e:	b088      	sub	sp, #32
 8007960:	af00      	add	r7, sp, #0
 8007962:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8007964:	2300      	movs	r3, #0
 8007966:	617b      	str	r3, [r7, #20]
 8007968:	2300      	movs	r3, #0
 800796a:	61fb      	str	r3, [r7, #28]
 800796c:	2300      	movs	r3, #0
 800796e:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8007970:	2300      	movs	r3, #0
 8007972:	60fb      	str	r3, [r7, #12]
 8007974:	2300      	movs	r3, #0
 8007976:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	2b10      	cmp	r3, #16
 800797c:	d00a      	beq.n	8007994 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	2b10      	cmp	r3, #16
 8007982:	f200 808a 	bhi.w	8007a9a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	2b01      	cmp	r3, #1
 800798a:	d045      	beq.n	8007a18 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	2b02      	cmp	r3, #2
 8007990:	d075      	beq.n	8007a7e <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8007992:	e082      	b.n	8007a9a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8007994:	4b46      	ldr	r3, [pc, #280]	@ (8007ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8007996:	685b      	ldr	r3, [r3, #4]
 8007998:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800799a:	4b45      	ldr	r3, [pc, #276]	@ (8007ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d07b      	beq.n	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	0c9b      	lsrs	r3, r3, #18
 80079aa:	f003 030f 	and.w	r3, r3, #15
 80079ae:	4a41      	ldr	r2, [pc, #260]	@ (8007ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 80079b0:	5cd3      	ldrb	r3, [r2, r3]
 80079b2:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d015      	beq.n	80079ea <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80079be:	4b3c      	ldr	r3, [pc, #240]	@ (8007ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80079c0:	685b      	ldr	r3, [r3, #4]
 80079c2:	0c5b      	lsrs	r3, r3, #17
 80079c4:	f003 0301 	and.w	r3, r3, #1
 80079c8:	4a3b      	ldr	r2, [pc, #236]	@ (8007ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 80079ca:	5cd3      	ldrb	r3, [r2, r3]
 80079cc:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d00d      	beq.n	80079f4 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80079d8:	4a38      	ldr	r2, [pc, #224]	@ (8007abc <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80079da:	697b      	ldr	r3, [r7, #20]
 80079dc:	fbb2 f2f3 	udiv	r2, r2, r3
 80079e0:	693b      	ldr	r3, [r7, #16]
 80079e2:	fb02 f303 	mul.w	r3, r2, r3
 80079e6:	61fb      	str	r3, [r7, #28]
 80079e8:	e004      	b.n	80079f4 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80079ea:	693b      	ldr	r3, [r7, #16]
 80079ec:	4a34      	ldr	r2, [pc, #208]	@ (8007ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80079ee:	fb02 f303 	mul.w	r3, r2, r3
 80079f2:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80079f4:	4b2e      	ldr	r3, [pc, #184]	@ (8007ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80079f6:	685b      	ldr	r3, [r3, #4]
 80079f8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80079fc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007a00:	d102      	bne.n	8007a08 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8007a02:	69fb      	ldr	r3, [r7, #28]
 8007a04:	61bb      	str	r3, [r7, #24]
      break;
 8007a06:	e04a      	b.n	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8007a08:	69fb      	ldr	r3, [r7, #28]
 8007a0a:	005b      	lsls	r3, r3, #1
 8007a0c:	4a2d      	ldr	r2, [pc, #180]	@ (8007ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8007a0e:	fba2 2303 	umull	r2, r3, r2, r3
 8007a12:	085b      	lsrs	r3, r3, #1
 8007a14:	61bb      	str	r3, [r7, #24]
      break;
 8007a16:	e042      	b.n	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8007a18:	4b25      	ldr	r3, [pc, #148]	@ (8007ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8007a1a:	6a1b      	ldr	r3, [r3, #32]
 8007a1c:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007a24:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007a28:	d108      	bne.n	8007a3c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	f003 0302 	and.w	r3, r3, #2
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d003      	beq.n	8007a3c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8007a34:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007a38:	61bb      	str	r3, [r7, #24]
 8007a3a:	e01f      	b.n	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007a42:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007a46:	d109      	bne.n	8007a5c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8007a48:	4b19      	ldr	r3, [pc, #100]	@ (8007ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8007a4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a4c:	f003 0302 	and.w	r3, r3, #2
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d003      	beq.n	8007a5c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8007a54:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8007a58:	61bb      	str	r3, [r7, #24]
 8007a5a:	e00f      	b.n	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007a62:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007a66:	d11c      	bne.n	8007aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8007a68:	4b11      	ldr	r3, [pc, #68]	@ (8007ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d016      	beq.n	8007aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8007a74:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8007a78:	61bb      	str	r3, [r7, #24]
      break;
 8007a7a:	e012      	b.n	8007aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8007a7c:	e011      	b.n	8007aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8007a7e:	f7ff fe85 	bl	800778c <HAL_RCC_GetPCLK2Freq>
 8007a82:	4602      	mov	r2, r0
 8007a84:	4b0a      	ldr	r3, [pc, #40]	@ (8007ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8007a86:	685b      	ldr	r3, [r3, #4]
 8007a88:	0b9b      	lsrs	r3, r3, #14
 8007a8a:	f003 0303 	and.w	r3, r3, #3
 8007a8e:	3301      	adds	r3, #1
 8007a90:	005b      	lsls	r3, r3, #1
 8007a92:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a96:	61bb      	str	r3, [r7, #24]
      break;
 8007a98:	e004      	b.n	8007aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8007a9a:	bf00      	nop
 8007a9c:	e002      	b.n	8007aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8007a9e:	bf00      	nop
 8007aa0:	e000      	b.n	8007aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8007aa2:	bf00      	nop
    }
  }
  return (frequency);
 8007aa4:	69bb      	ldr	r3, [r7, #24]
}
 8007aa6:	4618      	mov	r0, r3
 8007aa8:	3720      	adds	r7, #32
 8007aaa:	46bd      	mov	sp, r7
 8007aac:	bd80      	pop	{r7, pc}
 8007aae:	bf00      	nop
 8007ab0:	40021000 	.word	0x40021000
 8007ab4:	0800da38 	.word	0x0800da38
 8007ab8:	0800da48 	.word	0x0800da48
 8007abc:	007a1200 	.word	0x007a1200
 8007ac0:	003d0900 	.word	0x003d0900
 8007ac4:	aaaaaaab 	.word	0xaaaaaaab

08007ac8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	b086      	sub	sp, #24
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
 8007ad0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d101      	bne.n	8007adc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007ad8:	2301      	movs	r3, #1
 8007ada:	e093      	b.n	8007c04 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007ae2:	b2db      	uxtb	r3, r3
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d106      	bne.n	8007af6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	2200      	movs	r2, #0
 8007aec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8007af0:	6878      	ldr	r0, [r7, #4]
 8007af2:	f7fb f9b9 	bl	8002e68 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	2202      	movs	r2, #2
 8007afa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	689b      	ldr	r3, [r3, #8]
 8007b04:	687a      	ldr	r2, [r7, #4]
 8007b06:	6812      	ldr	r2, [r2, #0]
 8007b08:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007b0c:	f023 0307 	bic.w	r3, r3, #7
 8007b10:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681a      	ldr	r2, [r3, #0]
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	3304      	adds	r3, #4
 8007b1a:	4619      	mov	r1, r3
 8007b1c:	4610      	mov	r0, r2
 8007b1e:	f000 fa37 	bl	8007f90 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	689b      	ldr	r3, [r3, #8]
 8007b28:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	699b      	ldr	r3, [r3, #24]
 8007b30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	6a1b      	ldr	r3, [r3, #32]
 8007b38:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007b3a:	683b      	ldr	r3, [r7, #0]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	697a      	ldr	r2, [r7, #20]
 8007b40:	4313      	orrs	r3, r2
 8007b42:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007b44:	693b      	ldr	r3, [r7, #16]
 8007b46:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007b4a:	f023 0303 	bic.w	r3, r3, #3
 8007b4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007b50:	683b      	ldr	r3, [r7, #0]
 8007b52:	689a      	ldr	r2, [r3, #8]
 8007b54:	683b      	ldr	r3, [r7, #0]
 8007b56:	699b      	ldr	r3, [r3, #24]
 8007b58:	021b      	lsls	r3, r3, #8
 8007b5a:	4313      	orrs	r3, r2
 8007b5c:	693a      	ldr	r2, [r7, #16]
 8007b5e:	4313      	orrs	r3, r2
 8007b60:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007b62:	693b      	ldr	r3, [r7, #16]
 8007b64:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8007b68:	f023 030c 	bic.w	r3, r3, #12
 8007b6c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007b6e:	693b      	ldr	r3, [r7, #16]
 8007b70:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007b74:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007b78:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007b7a:	683b      	ldr	r3, [r7, #0]
 8007b7c:	68da      	ldr	r2, [r3, #12]
 8007b7e:	683b      	ldr	r3, [r7, #0]
 8007b80:	69db      	ldr	r3, [r3, #28]
 8007b82:	021b      	lsls	r3, r3, #8
 8007b84:	4313      	orrs	r3, r2
 8007b86:	693a      	ldr	r2, [r7, #16]
 8007b88:	4313      	orrs	r3, r2
 8007b8a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007b8c:	683b      	ldr	r3, [r7, #0]
 8007b8e:	691b      	ldr	r3, [r3, #16]
 8007b90:	011a      	lsls	r2, r3, #4
 8007b92:	683b      	ldr	r3, [r7, #0]
 8007b94:	6a1b      	ldr	r3, [r3, #32]
 8007b96:	031b      	lsls	r3, r3, #12
 8007b98:	4313      	orrs	r3, r2
 8007b9a:	693a      	ldr	r2, [r7, #16]
 8007b9c:	4313      	orrs	r3, r2
 8007b9e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8007ba6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007ba8:	683b      	ldr	r3, [r7, #0]
 8007baa:	685a      	ldr	r2, [r3, #4]
 8007bac:	683b      	ldr	r3, [r7, #0]
 8007bae:	695b      	ldr	r3, [r3, #20]
 8007bb0:	011b      	lsls	r3, r3, #4
 8007bb2:	4313      	orrs	r3, r2
 8007bb4:	68fa      	ldr	r2, [r7, #12]
 8007bb6:	4313      	orrs	r3, r2
 8007bb8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	697a      	ldr	r2, [r7, #20]
 8007bc0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	693a      	ldr	r2, [r7, #16]
 8007bc8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	68fa      	ldr	r2, [r7, #12]
 8007bd0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	2201      	movs	r2, #1
 8007bd6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	2201      	movs	r2, #1
 8007bde:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	2201      	movs	r2, #1
 8007be6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	2201      	movs	r2, #1
 8007bee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	2201      	movs	r2, #1
 8007bf6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	2201      	movs	r2, #1
 8007bfe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007c02:	2300      	movs	r3, #0
}
 8007c04:	4618      	mov	r0, r3
 8007c06:	3718      	adds	r7, #24
 8007c08:	46bd      	mov	sp, r7
 8007c0a:	bd80      	pop	{r7, pc}

08007c0c <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007c0c:	b580      	push	{r7, lr}
 8007c0e:	b084      	sub	sp, #16
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
 8007c14:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007c1c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007c24:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007c2c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007c34:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8007c36:	683b      	ldr	r3, [r7, #0]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d110      	bne.n	8007c5e <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007c3c:	7bfb      	ldrb	r3, [r7, #15]
 8007c3e:	2b01      	cmp	r3, #1
 8007c40:	d102      	bne.n	8007c48 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8007c42:	7b7b      	ldrb	r3, [r7, #13]
 8007c44:	2b01      	cmp	r3, #1
 8007c46:	d001      	beq.n	8007c4c <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8007c48:	2301      	movs	r3, #1
 8007c4a:	e089      	b.n	8007d60 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2202      	movs	r2, #2
 8007c50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	2202      	movs	r2, #2
 8007c58:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007c5c:	e031      	b.n	8007cc2 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8007c5e:	683b      	ldr	r3, [r7, #0]
 8007c60:	2b04      	cmp	r3, #4
 8007c62:	d110      	bne.n	8007c86 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007c64:	7bbb      	ldrb	r3, [r7, #14]
 8007c66:	2b01      	cmp	r3, #1
 8007c68:	d102      	bne.n	8007c70 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007c6a:	7b3b      	ldrb	r3, [r7, #12]
 8007c6c:	2b01      	cmp	r3, #1
 8007c6e:	d001      	beq.n	8007c74 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8007c70:	2301      	movs	r3, #1
 8007c72:	e075      	b.n	8007d60 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2202      	movs	r2, #2
 8007c78:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	2202      	movs	r2, #2
 8007c80:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007c84:	e01d      	b.n	8007cc2 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007c86:	7bfb      	ldrb	r3, [r7, #15]
 8007c88:	2b01      	cmp	r3, #1
 8007c8a:	d108      	bne.n	8007c9e <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007c8c:	7bbb      	ldrb	r3, [r7, #14]
 8007c8e:	2b01      	cmp	r3, #1
 8007c90:	d105      	bne.n	8007c9e <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007c92:	7b7b      	ldrb	r3, [r7, #13]
 8007c94:	2b01      	cmp	r3, #1
 8007c96:	d102      	bne.n	8007c9e <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007c98:	7b3b      	ldrb	r3, [r7, #12]
 8007c9a:	2b01      	cmp	r3, #1
 8007c9c:	d001      	beq.n	8007ca2 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8007c9e:	2301      	movs	r3, #1
 8007ca0:	e05e      	b.n	8007d60 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	2202      	movs	r2, #2
 8007ca6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	2202      	movs	r2, #2
 8007cae:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	2202      	movs	r2, #2
 8007cb6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	2202      	movs	r2, #2
 8007cbe:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8007cc2:	683b      	ldr	r3, [r7, #0]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d003      	beq.n	8007cd0 <HAL_TIM_Encoder_Start_IT+0xc4>
 8007cc8:	683b      	ldr	r3, [r7, #0]
 8007cca:	2b04      	cmp	r3, #4
 8007ccc:	d010      	beq.n	8007cf0 <HAL_TIM_Encoder_Start_IT+0xe4>
 8007cce:	e01f      	b.n	8007d10 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	2201      	movs	r2, #1
 8007cd6:	2100      	movs	r1, #0
 8007cd8:	4618      	mov	r0, r3
 8007cda:	f000 f9c7 	bl	800806c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	68da      	ldr	r2, [r3, #12]
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	f042 0202 	orr.w	r2, r2, #2
 8007cec:	60da      	str	r2, [r3, #12]
      break;
 8007cee:	e02e      	b.n	8007d4e <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	2201      	movs	r2, #1
 8007cf6:	2104      	movs	r1, #4
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	f000 f9b7 	bl	800806c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	68da      	ldr	r2, [r3, #12]
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	f042 0204 	orr.w	r2, r2, #4
 8007d0c:	60da      	str	r2, [r3, #12]
      break;
 8007d0e:	e01e      	b.n	8007d4e <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	2201      	movs	r2, #1
 8007d16:	2100      	movs	r1, #0
 8007d18:	4618      	mov	r0, r3
 8007d1a:	f000 f9a7 	bl	800806c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	2201      	movs	r2, #1
 8007d24:	2104      	movs	r1, #4
 8007d26:	4618      	mov	r0, r3
 8007d28:	f000 f9a0 	bl	800806c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	68da      	ldr	r2, [r3, #12]
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	f042 0202 	orr.w	r2, r2, #2
 8007d3a:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	68da      	ldr	r2, [r3, #12]
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	f042 0204 	orr.w	r2, r2, #4
 8007d4a:	60da      	str	r2, [r3, #12]
      break;
 8007d4c:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	681a      	ldr	r2, [r3, #0]
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	f042 0201 	orr.w	r2, r2, #1
 8007d5c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007d5e:	2300      	movs	r3, #0
}
 8007d60:	4618      	mov	r0, r3
 8007d62:	3710      	adds	r7, #16
 8007d64:	46bd      	mov	sp, r7
 8007d66:	bd80      	pop	{r7, pc}

08007d68 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007d68:	b580      	push	{r7, lr}
 8007d6a:	b084      	sub	sp, #16
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	68db      	ldr	r3, [r3, #12]
 8007d76:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	691b      	ldr	r3, [r3, #16]
 8007d7e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007d80:	68bb      	ldr	r3, [r7, #8]
 8007d82:	f003 0302 	and.w	r3, r3, #2
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d020      	beq.n	8007dcc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	f003 0302 	and.w	r3, r3, #2
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d01b      	beq.n	8007dcc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	f06f 0202 	mvn.w	r2, #2
 8007d9c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	2201      	movs	r2, #1
 8007da2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	699b      	ldr	r3, [r3, #24]
 8007daa:	f003 0303 	and.w	r3, r3, #3
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d003      	beq.n	8007dba <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007db2:	6878      	ldr	r0, [r7, #4]
 8007db4:	f7f9 fe0a 	bl	80019cc <HAL_TIM_IC_CaptureCallback>
 8007db8:	e005      	b.n	8007dc6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007dba:	6878      	ldr	r0, [r7, #4]
 8007dbc:	f000 f8cd 	bl	8007f5a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007dc0:	6878      	ldr	r0, [r7, #4]
 8007dc2:	f000 f8d3 	bl	8007f6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	2200      	movs	r2, #0
 8007dca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007dcc:	68bb      	ldr	r3, [r7, #8]
 8007dce:	f003 0304 	and.w	r3, r3, #4
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d020      	beq.n	8007e18 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	f003 0304 	and.w	r3, r3, #4
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d01b      	beq.n	8007e18 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	f06f 0204 	mvn.w	r2, #4
 8007de8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	2202      	movs	r2, #2
 8007dee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	699b      	ldr	r3, [r3, #24]
 8007df6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d003      	beq.n	8007e06 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007dfe:	6878      	ldr	r0, [r7, #4]
 8007e00:	f7f9 fde4 	bl	80019cc <HAL_TIM_IC_CaptureCallback>
 8007e04:	e005      	b.n	8007e12 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e06:	6878      	ldr	r0, [r7, #4]
 8007e08:	f000 f8a7 	bl	8007f5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e0c:	6878      	ldr	r0, [r7, #4]
 8007e0e:	f000 f8ad 	bl	8007f6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	2200      	movs	r2, #0
 8007e16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007e18:	68bb      	ldr	r3, [r7, #8]
 8007e1a:	f003 0308 	and.w	r3, r3, #8
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d020      	beq.n	8007e64 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	f003 0308 	and.w	r3, r3, #8
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d01b      	beq.n	8007e64 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	f06f 0208 	mvn.w	r2, #8
 8007e34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	2204      	movs	r2, #4
 8007e3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	69db      	ldr	r3, [r3, #28]
 8007e42:	f003 0303 	and.w	r3, r3, #3
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d003      	beq.n	8007e52 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007e4a:	6878      	ldr	r0, [r7, #4]
 8007e4c:	f7f9 fdbe 	bl	80019cc <HAL_TIM_IC_CaptureCallback>
 8007e50:	e005      	b.n	8007e5e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e52:	6878      	ldr	r0, [r7, #4]
 8007e54:	f000 f881 	bl	8007f5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e58:	6878      	ldr	r0, [r7, #4]
 8007e5a:	f000 f887 	bl	8007f6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	2200      	movs	r2, #0
 8007e62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007e64:	68bb      	ldr	r3, [r7, #8]
 8007e66:	f003 0310 	and.w	r3, r3, #16
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d020      	beq.n	8007eb0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	f003 0310 	and.w	r3, r3, #16
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d01b      	beq.n	8007eb0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	f06f 0210 	mvn.w	r2, #16
 8007e80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	2208      	movs	r2, #8
 8007e86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	69db      	ldr	r3, [r3, #28]
 8007e8e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d003      	beq.n	8007e9e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007e96:	6878      	ldr	r0, [r7, #4]
 8007e98:	f7f9 fd98 	bl	80019cc <HAL_TIM_IC_CaptureCallback>
 8007e9c:	e005      	b.n	8007eaa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e9e:	6878      	ldr	r0, [r7, #4]
 8007ea0:	f000 f85b 	bl	8007f5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ea4:	6878      	ldr	r0, [r7, #4]
 8007ea6:	f000 f861 	bl	8007f6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	2200      	movs	r2, #0
 8007eae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007eb0:	68bb      	ldr	r3, [r7, #8]
 8007eb2:	f003 0301 	and.w	r3, r3, #1
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d00c      	beq.n	8007ed4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	f003 0301 	and.w	r3, r3, #1
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d007      	beq.n	8007ed4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	f06f 0201 	mvn.w	r2, #1
 8007ecc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007ece:	6878      	ldr	r0, [r7, #4]
 8007ed0:	f000 f83a 	bl	8007f48 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8007ed4:	68bb      	ldr	r3, [r7, #8]
 8007ed6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d00c      	beq.n	8007ef8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d007      	beq.n	8007ef8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8007ef0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007ef2:	6878      	ldr	r0, [r7, #4]
 8007ef4:	f000 f945 	bl	8008182 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007ef8:	68bb      	ldr	r3, [r7, #8]
 8007efa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d00c      	beq.n	8007f1c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d007      	beq.n	8007f1c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007f14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007f16:	6878      	ldr	r0, [r7, #4]
 8007f18:	f000 f831 	bl	8007f7e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007f1c:	68bb      	ldr	r3, [r7, #8]
 8007f1e:	f003 0320 	and.w	r3, r3, #32
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d00c      	beq.n	8007f40 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	f003 0320 	and.w	r3, r3, #32
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d007      	beq.n	8007f40 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	f06f 0220 	mvn.w	r2, #32
 8007f38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007f3a:	6878      	ldr	r0, [r7, #4]
 8007f3c:	f000 f918 	bl	8008170 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007f40:	bf00      	nop
 8007f42:	3710      	adds	r7, #16
 8007f44:	46bd      	mov	sp, r7
 8007f46:	bd80      	pop	{r7, pc}

08007f48 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007f48:	b480      	push	{r7}
 8007f4a:	b083      	sub	sp, #12
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007f50:	bf00      	nop
 8007f52:	370c      	adds	r7, #12
 8007f54:	46bd      	mov	sp, r7
 8007f56:	bc80      	pop	{r7}
 8007f58:	4770      	bx	lr

08007f5a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007f5a:	b480      	push	{r7}
 8007f5c:	b083      	sub	sp, #12
 8007f5e:	af00      	add	r7, sp, #0
 8007f60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007f62:	bf00      	nop
 8007f64:	370c      	adds	r7, #12
 8007f66:	46bd      	mov	sp, r7
 8007f68:	bc80      	pop	{r7}
 8007f6a:	4770      	bx	lr

08007f6c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007f6c:	b480      	push	{r7}
 8007f6e:	b083      	sub	sp, #12
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007f74:	bf00      	nop
 8007f76:	370c      	adds	r7, #12
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	bc80      	pop	{r7}
 8007f7c:	4770      	bx	lr

08007f7e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007f7e:	b480      	push	{r7}
 8007f80:	b083      	sub	sp, #12
 8007f82:	af00      	add	r7, sp, #0
 8007f84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007f86:	bf00      	nop
 8007f88:	370c      	adds	r7, #12
 8007f8a:	46bd      	mov	sp, r7
 8007f8c:	bc80      	pop	{r7}
 8007f8e:	4770      	bx	lr

08007f90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007f90:	b480      	push	{r7}
 8007f92:	b085      	sub	sp, #20
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
 8007f98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	4a2f      	ldr	r2, [pc, #188]	@ (8008060 <TIM_Base_SetConfig+0xd0>)
 8007fa4:	4293      	cmp	r3, r2
 8007fa6:	d00b      	beq.n	8007fc0 <TIM_Base_SetConfig+0x30>
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007fae:	d007      	beq.n	8007fc0 <TIM_Base_SetConfig+0x30>
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	4a2c      	ldr	r2, [pc, #176]	@ (8008064 <TIM_Base_SetConfig+0xd4>)
 8007fb4:	4293      	cmp	r3, r2
 8007fb6:	d003      	beq.n	8007fc0 <TIM_Base_SetConfig+0x30>
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	4a2b      	ldr	r2, [pc, #172]	@ (8008068 <TIM_Base_SetConfig+0xd8>)
 8007fbc:	4293      	cmp	r3, r2
 8007fbe:	d108      	bne.n	8007fd2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007fc6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007fc8:	683b      	ldr	r3, [r7, #0]
 8007fca:	685b      	ldr	r3, [r3, #4]
 8007fcc:	68fa      	ldr	r2, [r7, #12]
 8007fce:	4313      	orrs	r3, r2
 8007fd0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	4a22      	ldr	r2, [pc, #136]	@ (8008060 <TIM_Base_SetConfig+0xd0>)
 8007fd6:	4293      	cmp	r3, r2
 8007fd8:	d00b      	beq.n	8007ff2 <TIM_Base_SetConfig+0x62>
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007fe0:	d007      	beq.n	8007ff2 <TIM_Base_SetConfig+0x62>
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	4a1f      	ldr	r2, [pc, #124]	@ (8008064 <TIM_Base_SetConfig+0xd4>)
 8007fe6:	4293      	cmp	r3, r2
 8007fe8:	d003      	beq.n	8007ff2 <TIM_Base_SetConfig+0x62>
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	4a1e      	ldr	r2, [pc, #120]	@ (8008068 <TIM_Base_SetConfig+0xd8>)
 8007fee:	4293      	cmp	r3, r2
 8007ff0:	d108      	bne.n	8008004 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007ff8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007ffa:	683b      	ldr	r3, [r7, #0]
 8007ffc:	68db      	ldr	r3, [r3, #12]
 8007ffe:	68fa      	ldr	r2, [r7, #12]
 8008000:	4313      	orrs	r3, r2
 8008002:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800800a:	683b      	ldr	r3, [r7, #0]
 800800c:	695b      	ldr	r3, [r3, #20]
 800800e:	4313      	orrs	r3, r2
 8008010:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	68fa      	ldr	r2, [r7, #12]
 8008016:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008018:	683b      	ldr	r3, [r7, #0]
 800801a:	689a      	ldr	r2, [r3, #8]
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008020:	683b      	ldr	r3, [r7, #0]
 8008022:	681a      	ldr	r2, [r3, #0]
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	4a0d      	ldr	r2, [pc, #52]	@ (8008060 <TIM_Base_SetConfig+0xd0>)
 800802c:	4293      	cmp	r3, r2
 800802e:	d103      	bne.n	8008038 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008030:	683b      	ldr	r3, [r7, #0]
 8008032:	691a      	ldr	r2, [r3, #16]
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	2201      	movs	r2, #1
 800803c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	691b      	ldr	r3, [r3, #16]
 8008042:	f003 0301 	and.w	r3, r3, #1
 8008046:	2b00      	cmp	r3, #0
 8008048:	d005      	beq.n	8008056 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	691b      	ldr	r3, [r3, #16]
 800804e:	f023 0201 	bic.w	r2, r3, #1
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	611a      	str	r2, [r3, #16]
  }
}
 8008056:	bf00      	nop
 8008058:	3714      	adds	r7, #20
 800805a:	46bd      	mov	sp, r7
 800805c:	bc80      	pop	{r7}
 800805e:	4770      	bx	lr
 8008060:	40012c00 	.word	0x40012c00
 8008064:	40000400 	.word	0x40000400
 8008068:	40000800 	.word	0x40000800

0800806c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800806c:	b480      	push	{r7}
 800806e:	b087      	sub	sp, #28
 8008070:	af00      	add	r7, sp, #0
 8008072:	60f8      	str	r0, [r7, #12]
 8008074:	60b9      	str	r1, [r7, #8]
 8008076:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008078:	68bb      	ldr	r3, [r7, #8]
 800807a:	f003 031f 	and.w	r3, r3, #31
 800807e:	2201      	movs	r2, #1
 8008080:	fa02 f303 	lsl.w	r3, r2, r3
 8008084:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	6a1a      	ldr	r2, [r3, #32]
 800808a:	697b      	ldr	r3, [r7, #20]
 800808c:	43db      	mvns	r3, r3
 800808e:	401a      	ands	r2, r3
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	6a1a      	ldr	r2, [r3, #32]
 8008098:	68bb      	ldr	r3, [r7, #8]
 800809a:	f003 031f 	and.w	r3, r3, #31
 800809e:	6879      	ldr	r1, [r7, #4]
 80080a0:	fa01 f303 	lsl.w	r3, r1, r3
 80080a4:	431a      	orrs	r2, r3
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	621a      	str	r2, [r3, #32]
}
 80080aa:	bf00      	nop
 80080ac:	371c      	adds	r7, #28
 80080ae:	46bd      	mov	sp, r7
 80080b0:	bc80      	pop	{r7}
 80080b2:	4770      	bx	lr

080080b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80080b4:	b480      	push	{r7}
 80080b6:	b085      	sub	sp, #20
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	6078      	str	r0, [r7, #4]
 80080bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80080c4:	2b01      	cmp	r3, #1
 80080c6:	d101      	bne.n	80080cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80080c8:	2302      	movs	r3, #2
 80080ca:	e046      	b.n	800815a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	2201      	movs	r2, #1
 80080d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	2202      	movs	r2, #2
 80080d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	685b      	ldr	r3, [r3, #4]
 80080e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	689b      	ldr	r3, [r3, #8]
 80080ea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80080f2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80080f4:	683b      	ldr	r3, [r7, #0]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	68fa      	ldr	r2, [r7, #12]
 80080fa:	4313      	orrs	r3, r2
 80080fc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	68fa      	ldr	r2, [r7, #12]
 8008104:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	4a16      	ldr	r2, [pc, #88]	@ (8008164 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800810c:	4293      	cmp	r3, r2
 800810e:	d00e      	beq.n	800812e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008118:	d009      	beq.n	800812e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	4a12      	ldr	r2, [pc, #72]	@ (8008168 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8008120:	4293      	cmp	r3, r2
 8008122:	d004      	beq.n	800812e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	4a10      	ldr	r2, [pc, #64]	@ (800816c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800812a:	4293      	cmp	r3, r2
 800812c:	d10c      	bne.n	8008148 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800812e:	68bb      	ldr	r3, [r7, #8]
 8008130:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008134:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008136:	683b      	ldr	r3, [r7, #0]
 8008138:	685b      	ldr	r3, [r3, #4]
 800813a:	68ba      	ldr	r2, [r7, #8]
 800813c:	4313      	orrs	r3, r2
 800813e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	68ba      	ldr	r2, [r7, #8]
 8008146:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	2201      	movs	r2, #1
 800814c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	2200      	movs	r2, #0
 8008154:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008158:	2300      	movs	r3, #0
}
 800815a:	4618      	mov	r0, r3
 800815c:	3714      	adds	r7, #20
 800815e:	46bd      	mov	sp, r7
 8008160:	bc80      	pop	{r7}
 8008162:	4770      	bx	lr
 8008164:	40012c00 	.word	0x40012c00
 8008168:	40000400 	.word	0x40000400
 800816c:	40000800 	.word	0x40000800

08008170 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008170:	b480      	push	{r7}
 8008172:	b083      	sub	sp, #12
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008178:	bf00      	nop
 800817a:	370c      	adds	r7, #12
 800817c:	46bd      	mov	sp, r7
 800817e:	bc80      	pop	{r7}
 8008180:	4770      	bx	lr

08008182 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008182:	b480      	push	{r7}
 8008184:	b083      	sub	sp, #12
 8008186:	af00      	add	r7, sp, #0
 8008188:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800818a:	bf00      	nop
 800818c:	370c      	adds	r7, #12
 800818e:	46bd      	mov	sp, r7
 8008190:	bc80      	pop	{r7}
 8008192:	4770      	bx	lr

08008194 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008194:	b580      	push	{r7, lr}
 8008196:	b082      	sub	sp, #8
 8008198:	af00      	add	r7, sp, #0
 800819a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d101      	bne.n	80081a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80081a2:	2301      	movs	r3, #1
 80081a4:	e042      	b.n	800822c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80081ac:	b2db      	uxtb	r3, r3
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d106      	bne.n	80081c0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	2200      	movs	r2, #0
 80081b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80081ba:	6878      	ldr	r0, [r7, #4]
 80081bc:	f7fa fec4 	bl	8002f48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	2224      	movs	r2, #36	@ 0x24
 80081c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	68da      	ldr	r2, [r3, #12]
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80081d6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80081d8:	6878      	ldr	r0, [r7, #4]
 80081da:	f000 f971 	bl	80084c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	691a      	ldr	r2, [r3, #16]
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80081ec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	695a      	ldr	r2, [r3, #20]
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80081fc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	68da      	ldr	r2, [r3, #12]
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800820c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	2200      	movs	r2, #0
 8008212:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	2220      	movs	r2, #32
 8008218:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	2220      	movs	r2, #32
 8008220:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	2200      	movs	r2, #0
 8008228:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800822a:	2300      	movs	r3, #0
}
 800822c:	4618      	mov	r0, r3
 800822e:	3708      	adds	r7, #8
 8008230:	46bd      	mov	sp, r7
 8008232:	bd80      	pop	{r7, pc}

08008234 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008234:	b580      	push	{r7, lr}
 8008236:	b08a      	sub	sp, #40	@ 0x28
 8008238:	af02      	add	r7, sp, #8
 800823a:	60f8      	str	r0, [r7, #12]
 800823c:	60b9      	str	r1, [r7, #8]
 800823e:	603b      	str	r3, [r7, #0]
 8008240:	4613      	mov	r3, r2
 8008242:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008244:	2300      	movs	r3, #0
 8008246:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800824e:	b2db      	uxtb	r3, r3
 8008250:	2b20      	cmp	r3, #32
 8008252:	d175      	bne.n	8008340 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008254:	68bb      	ldr	r3, [r7, #8]
 8008256:	2b00      	cmp	r3, #0
 8008258:	d002      	beq.n	8008260 <HAL_UART_Transmit+0x2c>
 800825a:	88fb      	ldrh	r3, [r7, #6]
 800825c:	2b00      	cmp	r3, #0
 800825e:	d101      	bne.n	8008264 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008260:	2301      	movs	r3, #1
 8008262:	e06e      	b.n	8008342 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	2200      	movs	r2, #0
 8008268:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	2221      	movs	r2, #33	@ 0x21
 800826e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008272:	f7fa ff31 	bl	80030d8 <HAL_GetTick>
 8008276:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	88fa      	ldrh	r2, [r7, #6]
 800827c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	88fa      	ldrh	r2, [r7, #6]
 8008282:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	689b      	ldr	r3, [r3, #8]
 8008288:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800828c:	d108      	bne.n	80082a0 <HAL_UART_Transmit+0x6c>
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	691b      	ldr	r3, [r3, #16]
 8008292:	2b00      	cmp	r3, #0
 8008294:	d104      	bne.n	80082a0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008296:	2300      	movs	r3, #0
 8008298:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800829a:	68bb      	ldr	r3, [r7, #8]
 800829c:	61bb      	str	r3, [r7, #24]
 800829e:	e003      	b.n	80082a8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80082a0:	68bb      	ldr	r3, [r7, #8]
 80082a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80082a4:	2300      	movs	r3, #0
 80082a6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80082a8:	e02e      	b.n	8008308 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80082aa:	683b      	ldr	r3, [r7, #0]
 80082ac:	9300      	str	r3, [sp, #0]
 80082ae:	697b      	ldr	r3, [r7, #20]
 80082b0:	2200      	movs	r2, #0
 80082b2:	2180      	movs	r1, #128	@ 0x80
 80082b4:	68f8      	ldr	r0, [r7, #12]
 80082b6:	f000 f848 	bl	800834a <UART_WaitOnFlagUntilTimeout>
 80082ba:	4603      	mov	r3, r0
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d005      	beq.n	80082cc <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	2220      	movs	r2, #32
 80082c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80082c8:	2303      	movs	r3, #3
 80082ca:	e03a      	b.n	8008342 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80082cc:	69fb      	ldr	r3, [r7, #28]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d10b      	bne.n	80082ea <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80082d2:	69bb      	ldr	r3, [r7, #24]
 80082d4:	881b      	ldrh	r3, [r3, #0]
 80082d6:	461a      	mov	r2, r3
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80082e0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80082e2:	69bb      	ldr	r3, [r7, #24]
 80082e4:	3302      	adds	r3, #2
 80082e6:	61bb      	str	r3, [r7, #24]
 80082e8:	e007      	b.n	80082fa <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80082ea:	69fb      	ldr	r3, [r7, #28]
 80082ec:	781a      	ldrb	r2, [r3, #0]
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80082f4:	69fb      	ldr	r3, [r7, #28]
 80082f6:	3301      	adds	r3, #1
 80082f8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80082fe:	b29b      	uxth	r3, r3
 8008300:	3b01      	subs	r3, #1
 8008302:	b29a      	uxth	r2, r3
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800830c:	b29b      	uxth	r3, r3
 800830e:	2b00      	cmp	r3, #0
 8008310:	d1cb      	bne.n	80082aa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008312:	683b      	ldr	r3, [r7, #0]
 8008314:	9300      	str	r3, [sp, #0]
 8008316:	697b      	ldr	r3, [r7, #20]
 8008318:	2200      	movs	r2, #0
 800831a:	2140      	movs	r1, #64	@ 0x40
 800831c:	68f8      	ldr	r0, [r7, #12]
 800831e:	f000 f814 	bl	800834a <UART_WaitOnFlagUntilTimeout>
 8008322:	4603      	mov	r3, r0
 8008324:	2b00      	cmp	r3, #0
 8008326:	d005      	beq.n	8008334 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	2220      	movs	r2, #32
 800832c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8008330:	2303      	movs	r3, #3
 8008332:	e006      	b.n	8008342 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	2220      	movs	r2, #32
 8008338:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800833c:	2300      	movs	r3, #0
 800833e:	e000      	b.n	8008342 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8008340:	2302      	movs	r3, #2
  }
}
 8008342:	4618      	mov	r0, r3
 8008344:	3720      	adds	r7, #32
 8008346:	46bd      	mov	sp, r7
 8008348:	bd80      	pop	{r7, pc}

0800834a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800834a:	b580      	push	{r7, lr}
 800834c:	b086      	sub	sp, #24
 800834e:	af00      	add	r7, sp, #0
 8008350:	60f8      	str	r0, [r7, #12]
 8008352:	60b9      	str	r1, [r7, #8]
 8008354:	603b      	str	r3, [r7, #0]
 8008356:	4613      	mov	r3, r2
 8008358:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800835a:	e03b      	b.n	80083d4 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800835c:	6a3b      	ldr	r3, [r7, #32]
 800835e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008362:	d037      	beq.n	80083d4 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008364:	f7fa feb8 	bl	80030d8 <HAL_GetTick>
 8008368:	4602      	mov	r2, r0
 800836a:	683b      	ldr	r3, [r7, #0]
 800836c:	1ad3      	subs	r3, r2, r3
 800836e:	6a3a      	ldr	r2, [r7, #32]
 8008370:	429a      	cmp	r2, r3
 8008372:	d302      	bcc.n	800837a <UART_WaitOnFlagUntilTimeout+0x30>
 8008374:	6a3b      	ldr	r3, [r7, #32]
 8008376:	2b00      	cmp	r3, #0
 8008378:	d101      	bne.n	800837e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800837a:	2303      	movs	r3, #3
 800837c:	e03a      	b.n	80083f4 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	68db      	ldr	r3, [r3, #12]
 8008384:	f003 0304 	and.w	r3, r3, #4
 8008388:	2b00      	cmp	r3, #0
 800838a:	d023      	beq.n	80083d4 <UART_WaitOnFlagUntilTimeout+0x8a>
 800838c:	68bb      	ldr	r3, [r7, #8]
 800838e:	2b80      	cmp	r3, #128	@ 0x80
 8008390:	d020      	beq.n	80083d4 <UART_WaitOnFlagUntilTimeout+0x8a>
 8008392:	68bb      	ldr	r3, [r7, #8]
 8008394:	2b40      	cmp	r3, #64	@ 0x40
 8008396:	d01d      	beq.n	80083d4 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	f003 0308 	and.w	r3, r3, #8
 80083a2:	2b08      	cmp	r3, #8
 80083a4:	d116      	bne.n	80083d4 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80083a6:	2300      	movs	r3, #0
 80083a8:	617b      	str	r3, [r7, #20]
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	617b      	str	r3, [r7, #20]
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	685b      	ldr	r3, [r3, #4]
 80083b8:	617b      	str	r3, [r7, #20]
 80083ba:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80083bc:	68f8      	ldr	r0, [r7, #12]
 80083be:	f000 f81d 	bl	80083fc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	2208      	movs	r2, #8
 80083c6:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	2200      	movs	r2, #0
 80083cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80083d0:	2301      	movs	r3, #1
 80083d2:	e00f      	b.n	80083f4 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	681a      	ldr	r2, [r3, #0]
 80083da:	68bb      	ldr	r3, [r7, #8]
 80083dc:	4013      	ands	r3, r2
 80083de:	68ba      	ldr	r2, [r7, #8]
 80083e0:	429a      	cmp	r2, r3
 80083e2:	bf0c      	ite	eq
 80083e4:	2301      	moveq	r3, #1
 80083e6:	2300      	movne	r3, #0
 80083e8:	b2db      	uxtb	r3, r3
 80083ea:	461a      	mov	r2, r3
 80083ec:	79fb      	ldrb	r3, [r7, #7]
 80083ee:	429a      	cmp	r2, r3
 80083f0:	d0b4      	beq.n	800835c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80083f2:	2300      	movs	r3, #0
}
 80083f4:	4618      	mov	r0, r3
 80083f6:	3718      	adds	r7, #24
 80083f8:	46bd      	mov	sp, r7
 80083fa:	bd80      	pop	{r7, pc}

080083fc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80083fc:	b480      	push	{r7}
 80083fe:	b095      	sub	sp, #84	@ 0x54
 8008400:	af00      	add	r7, sp, #0
 8008402:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	330c      	adds	r3, #12
 800840a:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800840c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800840e:	e853 3f00 	ldrex	r3, [r3]
 8008412:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008414:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008416:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800841a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	330c      	adds	r3, #12
 8008422:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008424:	643a      	str	r2, [r7, #64]	@ 0x40
 8008426:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008428:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800842a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800842c:	e841 2300 	strex	r3, r2, [r1]
 8008430:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008432:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008434:	2b00      	cmp	r3, #0
 8008436:	d1e5      	bne.n	8008404 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	3314      	adds	r3, #20
 800843e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008440:	6a3b      	ldr	r3, [r7, #32]
 8008442:	e853 3f00 	ldrex	r3, [r3]
 8008446:	61fb      	str	r3, [r7, #28]
   return(result);
 8008448:	69fb      	ldr	r3, [r7, #28]
 800844a:	f023 0301 	bic.w	r3, r3, #1
 800844e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	3314      	adds	r3, #20
 8008456:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008458:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800845a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800845c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800845e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008460:	e841 2300 	strex	r3, r2, [r1]
 8008464:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008468:	2b00      	cmp	r3, #0
 800846a:	d1e5      	bne.n	8008438 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008470:	2b01      	cmp	r3, #1
 8008472:	d119      	bne.n	80084a8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	330c      	adds	r3, #12
 800847a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	e853 3f00 	ldrex	r3, [r3]
 8008482:	60bb      	str	r3, [r7, #8]
   return(result);
 8008484:	68bb      	ldr	r3, [r7, #8]
 8008486:	f023 0310 	bic.w	r3, r3, #16
 800848a:	647b      	str	r3, [r7, #68]	@ 0x44
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	330c      	adds	r3, #12
 8008492:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008494:	61ba      	str	r2, [r7, #24]
 8008496:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008498:	6979      	ldr	r1, [r7, #20]
 800849a:	69ba      	ldr	r2, [r7, #24]
 800849c:	e841 2300 	strex	r3, r2, [r1]
 80084a0:	613b      	str	r3, [r7, #16]
   return(result);
 80084a2:	693b      	ldr	r3, [r7, #16]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d1e5      	bne.n	8008474 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	2220      	movs	r2, #32
 80084ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	2200      	movs	r2, #0
 80084b4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80084b6:	bf00      	nop
 80084b8:	3754      	adds	r7, #84	@ 0x54
 80084ba:	46bd      	mov	sp, r7
 80084bc:	bc80      	pop	{r7}
 80084be:	4770      	bx	lr

080084c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80084c0:	b580      	push	{r7, lr}
 80084c2:	b084      	sub	sp, #16
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	691b      	ldr	r3, [r3, #16]
 80084ce:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	68da      	ldr	r2, [r3, #12]
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	430a      	orrs	r2, r1
 80084dc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	689a      	ldr	r2, [r3, #8]
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	691b      	ldr	r3, [r3, #16]
 80084e6:	431a      	orrs	r2, r3
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	695b      	ldr	r3, [r3, #20]
 80084ec:	4313      	orrs	r3, r2
 80084ee:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	68db      	ldr	r3, [r3, #12]
 80084f6:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80084fa:	f023 030c 	bic.w	r3, r3, #12
 80084fe:	687a      	ldr	r2, [r7, #4]
 8008500:	6812      	ldr	r2, [r2, #0]
 8008502:	68b9      	ldr	r1, [r7, #8]
 8008504:	430b      	orrs	r3, r1
 8008506:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	695b      	ldr	r3, [r3, #20]
 800850e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	699a      	ldr	r2, [r3, #24]
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	430a      	orrs	r2, r1
 800851c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	4a2c      	ldr	r2, [pc, #176]	@ (80085d4 <UART_SetConfig+0x114>)
 8008524:	4293      	cmp	r3, r2
 8008526:	d103      	bne.n	8008530 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8008528:	f7ff f930 	bl	800778c <HAL_RCC_GetPCLK2Freq>
 800852c:	60f8      	str	r0, [r7, #12]
 800852e:	e002      	b.n	8008536 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8008530:	f7ff f918 	bl	8007764 <HAL_RCC_GetPCLK1Freq>
 8008534:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008536:	68fa      	ldr	r2, [r7, #12]
 8008538:	4613      	mov	r3, r2
 800853a:	009b      	lsls	r3, r3, #2
 800853c:	4413      	add	r3, r2
 800853e:	009a      	lsls	r2, r3, #2
 8008540:	441a      	add	r2, r3
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	685b      	ldr	r3, [r3, #4]
 8008546:	009b      	lsls	r3, r3, #2
 8008548:	fbb2 f3f3 	udiv	r3, r2, r3
 800854c:	4a22      	ldr	r2, [pc, #136]	@ (80085d8 <UART_SetConfig+0x118>)
 800854e:	fba2 2303 	umull	r2, r3, r2, r3
 8008552:	095b      	lsrs	r3, r3, #5
 8008554:	0119      	lsls	r1, r3, #4
 8008556:	68fa      	ldr	r2, [r7, #12]
 8008558:	4613      	mov	r3, r2
 800855a:	009b      	lsls	r3, r3, #2
 800855c:	4413      	add	r3, r2
 800855e:	009a      	lsls	r2, r3, #2
 8008560:	441a      	add	r2, r3
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	685b      	ldr	r3, [r3, #4]
 8008566:	009b      	lsls	r3, r3, #2
 8008568:	fbb2 f2f3 	udiv	r2, r2, r3
 800856c:	4b1a      	ldr	r3, [pc, #104]	@ (80085d8 <UART_SetConfig+0x118>)
 800856e:	fba3 0302 	umull	r0, r3, r3, r2
 8008572:	095b      	lsrs	r3, r3, #5
 8008574:	2064      	movs	r0, #100	@ 0x64
 8008576:	fb00 f303 	mul.w	r3, r0, r3
 800857a:	1ad3      	subs	r3, r2, r3
 800857c:	011b      	lsls	r3, r3, #4
 800857e:	3332      	adds	r3, #50	@ 0x32
 8008580:	4a15      	ldr	r2, [pc, #84]	@ (80085d8 <UART_SetConfig+0x118>)
 8008582:	fba2 2303 	umull	r2, r3, r2, r3
 8008586:	095b      	lsrs	r3, r3, #5
 8008588:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800858c:	4419      	add	r1, r3
 800858e:	68fa      	ldr	r2, [r7, #12]
 8008590:	4613      	mov	r3, r2
 8008592:	009b      	lsls	r3, r3, #2
 8008594:	4413      	add	r3, r2
 8008596:	009a      	lsls	r2, r3, #2
 8008598:	441a      	add	r2, r3
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	685b      	ldr	r3, [r3, #4]
 800859e:	009b      	lsls	r3, r3, #2
 80085a0:	fbb2 f2f3 	udiv	r2, r2, r3
 80085a4:	4b0c      	ldr	r3, [pc, #48]	@ (80085d8 <UART_SetConfig+0x118>)
 80085a6:	fba3 0302 	umull	r0, r3, r3, r2
 80085aa:	095b      	lsrs	r3, r3, #5
 80085ac:	2064      	movs	r0, #100	@ 0x64
 80085ae:	fb00 f303 	mul.w	r3, r0, r3
 80085b2:	1ad3      	subs	r3, r2, r3
 80085b4:	011b      	lsls	r3, r3, #4
 80085b6:	3332      	adds	r3, #50	@ 0x32
 80085b8:	4a07      	ldr	r2, [pc, #28]	@ (80085d8 <UART_SetConfig+0x118>)
 80085ba:	fba2 2303 	umull	r2, r3, r2, r3
 80085be:	095b      	lsrs	r3, r3, #5
 80085c0:	f003 020f 	and.w	r2, r3, #15
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	440a      	add	r2, r1
 80085ca:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80085cc:	bf00      	nop
 80085ce:	3710      	adds	r7, #16
 80085d0:	46bd      	mov	sp, r7
 80085d2:	bd80      	pop	{r7, pc}
 80085d4:	40013800 	.word	0x40013800
 80085d8:	51eb851f 	.word	0x51eb851f

080085dc <AD5693_Reset>:
 *      reference https://github.com/adafruit/Adafruit_AD569x
 */

#include "ad5693.h"

HAL_StatusTypeDef AD5693_Reset(void){
 80085dc:	b580      	push	{r7, lr}
 80085de:	b084      	sub	sp, #16
 80085e0:	af02      	add	r7, sp, #8
	uint8_t command = WRITE_CONTROL_REG;		// Command Byte
 80085e2:	2340      	movs	r3, #64	@ 0x40
 80085e4:	71fb      	strb	r3, [r7, #7]
	uint8_t highByte = 0b10000000;				// Data High, Reset bit High
 80085e6:	2380      	movs	r3, #128	@ 0x80
 80085e8:	71bb      	strb	r3, [r7, #6]
	uint8_t lowByte = 0b00000000;				// Data Low
 80085ea:	2300      	movs	r3, #0
 80085ec:	717b      	strb	r3, [r7, #5]

	// Combine the command and data into a single 3-byte buffer
	uint8_t buffer[3] = {command, highByte, lowByte};
 80085ee:	79fb      	ldrb	r3, [r7, #7]
 80085f0:	703b      	strb	r3, [r7, #0]
 80085f2:	79bb      	ldrb	r3, [r7, #6]
 80085f4:	707b      	strb	r3, [r7, #1]
 80085f6:	797b      	ldrb	r3, [r7, #5]
 80085f8:	70bb      	strb	r3, [r7, #2]
	uint8_t status = HAL_I2C_Master_Transmit(I2C_HANDLE,
 80085fa:	463a      	mov	r2, r7
 80085fc:	230a      	movs	r3, #10
 80085fe:	9300      	str	r3, [sp, #0]
 8008600:	2303      	movs	r3, #3
 8008602:	2198      	movs	r1, #152	@ 0x98
 8008604:	4804      	ldr	r0, [pc, #16]	@ (8008618 <AD5693_Reset+0x3c>)
 8008606:	f7fc f889 	bl	800471c <HAL_I2C_Master_Transmit>
 800860a:	4603      	mov	r3, r0
 800860c:	713b      	strb	r3, [r7, #4]
			AD5693_ADDRESS, buffer, 3, 10);
	return status;
 800860e:	793b      	ldrb	r3, [r7, #4]
}
 8008610:	4618      	mov	r0, r3
 8008612:	3708      	adds	r7, #8
 8008614:	46bd      	mov	sp, r7
 8008616:	bd80      	pop	{r7, pc}
 8008618:	20000248 	.word	0x20000248

0800861c <AD5693_Init>:

HAL_StatusTypeDef AD5693_Init(ad5693_configuration_t ad5693){
 800861c:	b580      	push	{r7, lr}
 800861e:	b088      	sub	sp, #32
 8008620:	af02      	add	r7, sp, #8
 8008622:	6078      	str	r0, [r7, #4]
	// Prepare the command byte
	uint8_t command = WRITE_CONTROL_REG;
 8008624:	2340      	movs	r3, #64	@ 0x40
 8008626:	75fb      	strb	r3, [r7, #23]

	// Prepare the high and low data bytes
	uint16_t data = 0x0000;
 8008628:	2300      	movs	r3, #0
 800862a:	82bb      	strh	r3, [r7, #20]
	data |= ((uint16_t)ad5693.mode << 13); // Set D14 and D13 for the operating mode
 800862c:	79bb      	ldrb	r3, [r7, #6]
 800862e:	035b      	lsls	r3, r3, #13
 8008630:	b21a      	sxth	r2, r3
 8008632:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8008636:	4313      	orrs	r3, r2
 8008638:	b21b      	sxth	r3, r3
 800863a:	82bb      	strh	r3, [r7, #20]
	data |= ((uint16_t)ad5693.ref_disable << 12); // Set D12 for enable_ref
 800863c:	793b      	ldrb	r3, [r7, #4]
 800863e:	031b      	lsls	r3, r3, #12
 8008640:	b21a      	sxth	r2, r3
 8008642:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8008646:	4313      	orrs	r3, r2
 8008648:	b21b      	sxth	r3, r3
 800864a:	82bb      	strh	r3, [r7, #20]
	data |= ((uint16_t)ad5693.gain_x2 << 11);      // Set D11 for the gain
 800864c:	797b      	ldrb	r3, [r7, #5]
 800864e:	02db      	lsls	r3, r3, #11
 8008650:	b21a      	sxth	r2, r3
 8008652:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8008656:	4313      	orrs	r3, r2
 8008658:	b21b      	sxth	r3, r3
 800865a:	82bb      	strh	r3, [r7, #20]

	uint8_t highByte = (data >> 8) & 0xFF;
 800865c:	8abb      	ldrh	r3, [r7, #20]
 800865e:	0a1b      	lsrs	r3, r3, #8
 8008660:	b29b      	uxth	r3, r3
 8008662:	74fb      	strb	r3, [r7, #19]
	uint8_t lowByte = data & 0xFF;
 8008664:	8abb      	ldrh	r3, [r7, #20]
 8008666:	74bb      	strb	r3, [r7, #18]

	// Combine the command and data into a single 3-byte buffer
	uint8_t buffer[3] = {command, highByte, lowByte};
 8008668:	7dfb      	ldrb	r3, [r7, #23]
 800866a:	733b      	strb	r3, [r7, #12]
 800866c:	7cfb      	ldrb	r3, [r7, #19]
 800866e:	737b      	strb	r3, [r7, #13]
 8008670:	7cbb      	ldrb	r3, [r7, #18]
 8008672:	73bb      	strb	r3, [r7, #14]
	uint8_t status = HAL_I2C_Master_Transmit(I2C_HANDLE,
 8008674:	f107 020c 	add.w	r2, r7, #12
 8008678:	230a      	movs	r3, #10
 800867a:	9300      	str	r3, [sp, #0]
 800867c:	2303      	movs	r3, #3
 800867e:	2198      	movs	r1, #152	@ 0x98
 8008680:	4804      	ldr	r0, [pc, #16]	@ (8008694 <AD5693_Init+0x78>)
 8008682:	f7fc f84b 	bl	800471c <HAL_I2C_Master_Transmit>
 8008686:	4603      	mov	r3, r0
 8008688:	747b      	strb	r3, [r7, #17]
					AD5693_ADDRESS, buffer, 3, 10);
	return status;
 800868a:	7c7b      	ldrb	r3, [r7, #17]
}
 800868c:	4618      	mov	r0, r3
 800868e:	3718      	adds	r7, #24
 8008690:	46bd      	mov	sp, r7
 8008692:	bd80      	pop	{r7, pc}
 8008694:	20000248 	.word	0x20000248

08008698 <MovingAvg_Init>:
    uint16_t position;     // Current position in buffer
    bool     initialized;  // Initialization status
} MovingAvgFilter_t;

// Initialize the moving average filter
bool MovingAvg_Init(MovingAvgFilter_t* filter, int32_t* buffer, uint16_t bufferSize) {
 8008698:	b480      	push	{r7}
 800869a:	b087      	sub	sp, #28
 800869c:	af00      	add	r7, sp, #0
 800869e:	60f8      	str	r0, [r7, #12]
 80086a0:	60b9      	str	r1, [r7, #8]
 80086a2:	4613      	mov	r3, r2
 80086a4:	80fb      	strh	r3, [r7, #6]
    if (!filter || !buffer || bufferSize == 0) {
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d005      	beq.n	80086b8 <MovingAvg_Init+0x20>
 80086ac:	68bb      	ldr	r3, [r7, #8]
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d002      	beq.n	80086b8 <MovingAvg_Init+0x20>
 80086b2:	88fb      	ldrh	r3, [r7, #6]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d101      	bne.n	80086bc <MovingAvg_Init+0x24>
        return false;
 80086b8:	2300      	movs	r3, #0
 80086ba:	e022      	b.n	8008702 <MovingAvg_Init+0x6a>
    }

    filter->buffer = buffer;
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	68ba      	ldr	r2, [r7, #8]
 80086c0:	601a      	str	r2, [r3, #0]
    filter->bufferSize = bufferSize;
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	88fa      	ldrh	r2, [r7, #6]
 80086c6:	811a      	strh	r2, [r3, #8]
    filter->sum = 0;
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	2200      	movs	r2, #0
 80086cc:	605a      	str	r2, [r3, #4]
    filter->count = 0;
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	2200      	movs	r2, #0
 80086d2:	815a      	strh	r2, [r3, #10]
    filter->position = 0;
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	2200      	movs	r2, #0
 80086d8:	819a      	strh	r2, [r3, #12]
    filter->initialized = true;
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	2201      	movs	r2, #1
 80086de:	739a      	strb	r2, [r3, #14]

    // Zero out the buffer
    for (uint16_t i = 0; i < bufferSize; i++) {
 80086e0:	2300      	movs	r3, #0
 80086e2:	82fb      	strh	r3, [r7, #22]
 80086e4:	e008      	b.n	80086f8 <MovingAvg_Init+0x60>
        buffer[i] = 0;
 80086e6:	8afb      	ldrh	r3, [r7, #22]
 80086e8:	009b      	lsls	r3, r3, #2
 80086ea:	68ba      	ldr	r2, [r7, #8]
 80086ec:	4413      	add	r3, r2
 80086ee:	2200      	movs	r2, #0
 80086f0:	601a      	str	r2, [r3, #0]
    for (uint16_t i = 0; i < bufferSize; i++) {
 80086f2:	8afb      	ldrh	r3, [r7, #22]
 80086f4:	3301      	adds	r3, #1
 80086f6:	82fb      	strh	r3, [r7, #22]
 80086f8:	8afa      	ldrh	r2, [r7, #22]
 80086fa:	88fb      	ldrh	r3, [r7, #6]
 80086fc:	429a      	cmp	r2, r3
 80086fe:	d3f2      	bcc.n	80086e6 <MovingAvg_Init+0x4e>
    }

    return true;
 8008700:	2301      	movs	r3, #1
}
 8008702:	4618      	mov	r0, r3
 8008704:	371c      	adds	r7, #28
 8008706:	46bd      	mov	sp, r7
 8008708:	bc80      	pop	{r7}
 800870a:	4770      	bx	lr

0800870c <MovingAvg_Process>:

// Process new sample and return filtered value
int32_t MovingAvg_Process(MovingAvgFilter_t* filter, int32_t newSample) {
 800870c:	b480      	push	{r7}
 800870e:	b083      	sub	sp, #12
 8008710:	af00      	add	r7, sp, #0
 8008712:	6078      	str	r0, [r7, #4]
 8008714:	6039      	str	r1, [r7, #0]
    // Check for valid initialization
    if (!filter || !filter->initialized) {
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	2b00      	cmp	r3, #0
 800871a:	d006      	beq.n	800872a <MovingAvg_Process+0x1e>
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	7b9b      	ldrb	r3, [r3, #14]
 8008720:	f083 0301 	eor.w	r3, r3, #1
 8008724:	b2db      	uxtb	r3, r3
 8008726:	2b00      	cmp	r3, #0
 8008728:	d001      	beq.n	800872e <MovingAvg_Process+0x22>
        return newSample;  // Return raw value if filter is invalid
 800872a:	683b      	ldr	r3, [r7, #0]
 800872c:	e040      	b.n	80087b0 <MovingAvg_Process+0xa4>
    }

    // Protect against integer overflow in sum calculation
    filter->sum -= filter->buffer[filter->position];
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	685a      	ldr	r2, [r3, #4]
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	6819      	ldr	r1, [r3, #0]
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	899b      	ldrh	r3, [r3, #12]
 800873a:	009b      	lsls	r3, r3, #2
 800873c:	440b      	add	r3, r1
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	1ad2      	subs	r2, r2, r3
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	605a      	str	r2, [r3, #4]
    filter->sum += newSample;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	685a      	ldr	r2, [r3, #4]
 800874a:	683b      	ldr	r3, [r7, #0]
 800874c:	441a      	add	r2, r3
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	605a      	str	r2, [r3, #4]

    // Store new sample
    filter->buffer[filter->position] = newSample;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681a      	ldr	r2, [r3, #0]
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	899b      	ldrh	r3, [r3, #12]
 800875a:	009b      	lsls	r3, r3, #2
 800875c:	4413      	add	r3, r2
 800875e:	683a      	ldr	r2, [r7, #0]
 8008760:	601a      	str	r2, [r3, #0]

    // Update position
    filter->position++;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	899b      	ldrh	r3, [r3, #12]
 8008766:	3301      	adds	r3, #1
 8008768:	b29a      	uxth	r2, r3
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	819a      	strh	r2, [r3, #12]
    if (filter->position >= filter->bufferSize) {
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	899a      	ldrh	r2, [r3, #12]
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	891b      	ldrh	r3, [r3, #8]
 8008776:	429a      	cmp	r2, r3
 8008778:	d302      	bcc.n	8008780 <MovingAvg_Process+0x74>
        filter->position = 0;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	2200      	movs	r2, #0
 800877e:	819a      	strh	r2, [r3, #12]
    }

    // Update count of samples
    if (filter->count < filter->bufferSize) {
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	895a      	ldrh	r2, [r3, #10]
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	891b      	ldrh	r3, [r3, #8]
 8008788:	429a      	cmp	r2, r3
 800878a:	d205      	bcs.n	8008798 <MovingAvg_Process+0x8c>
        filter->count++;
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	895b      	ldrh	r3, [r3, #10]
 8008790:	3301      	adds	r3, #1
 8008792:	b29a      	uxth	r2, r3
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	815a      	strh	r2, [r3, #10]
    }

    // Calculate average, avoiding division by zero
    return (filter->count > 0) ? (filter->sum / filter->count) : newSample;
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	895b      	ldrh	r3, [r3, #10]
 800879c:	2b00      	cmp	r3, #0
 800879e:	d006      	beq.n	80087ae <MovingAvg_Process+0xa2>
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	685b      	ldr	r3, [r3, #4]
 80087a4:	687a      	ldr	r2, [r7, #4]
 80087a6:	8952      	ldrh	r2, [r2, #10]
 80087a8:	fb93 f3f2 	sdiv	r3, r3, r2
 80087ac:	e000      	b.n	80087b0 <MovingAvg_Process+0xa4>
 80087ae:	683b      	ldr	r3, [r7, #0]
}
 80087b0:	4618      	mov	r0, r3
 80087b2:	370c      	adds	r7, #12
 80087b4:	46bd      	mov	sp, r7
 80087b6:	bc80      	pop	{r7}
 80087b8:	4770      	bx	lr
	...

080087bc <Get_Current_Filtered>:

// Example usage with the existing Get_Current_Filtered function
#define FILTER_SIZE 20

int32_t Get_Current_Filtered(int32_t currentReading) {
 80087bc:	b580      	push	{r7, lr}
 80087be:	b082      	sub	sp, #8
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	6078      	str	r0, [r7, #4]
    static int32_t filterBuffer[FILTER_SIZE] = {0};
    static MovingAvgFilter_t filter = {0};
    static bool isInitialized = false;

    // One-time initialization
    if (!isInitialized) {
 80087c4:	4b10      	ldr	r3, [pc, #64]	@ (8008808 <Get_Current_Filtered+0x4c>)
 80087c6:	781b      	ldrb	r3, [r3, #0]
 80087c8:	f083 0301 	eor.w	r3, r3, #1
 80087cc:	b2db      	uxtb	r3, r3
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d011      	beq.n	80087f6 <Get_Current_Filtered+0x3a>
        isInitialized = MovingAvg_Init(&filter, filterBuffer, FILTER_SIZE);
 80087d2:	2214      	movs	r2, #20
 80087d4:	490d      	ldr	r1, [pc, #52]	@ (800880c <Get_Current_Filtered+0x50>)
 80087d6:	480e      	ldr	r0, [pc, #56]	@ (8008810 <Get_Current_Filtered+0x54>)
 80087d8:	f7ff ff5e 	bl	8008698 <MovingAvg_Init>
 80087dc:	4603      	mov	r3, r0
 80087de:	461a      	mov	r2, r3
 80087e0:	4b09      	ldr	r3, [pc, #36]	@ (8008808 <Get_Current_Filtered+0x4c>)
 80087e2:	701a      	strb	r2, [r3, #0]
        if (!isInitialized) {
 80087e4:	4b08      	ldr	r3, [pc, #32]	@ (8008808 <Get_Current_Filtered+0x4c>)
 80087e6:	781b      	ldrb	r3, [r3, #0]
 80087e8:	f083 0301 	eor.w	r3, r3, #1
 80087ec:	b2db      	uxtb	r3, r3
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d001      	beq.n	80087f6 <Get_Current_Filtered+0x3a>
            return currentReading;  // Return raw value if initialization fails
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	e004      	b.n	8008800 <Get_Current_Filtered+0x44>
        }
    }

    return MovingAvg_Process(&filter, currentReading);
 80087f6:	6879      	ldr	r1, [r7, #4]
 80087f8:	4805      	ldr	r0, [pc, #20]	@ (8008810 <Get_Current_Filtered+0x54>)
 80087fa:	f7ff ff87 	bl	800870c <MovingAvg_Process>
 80087fe:	4603      	mov	r3, r0
}
 8008800:	4618      	mov	r0, r3
 8008802:	3708      	adds	r7, #8
 8008804:	46bd      	mov	sp, r7
 8008806:	bd80      	pop	{r7, pc}
 8008808:	20000468 	.word	0x20000468
 800880c:	2000047c 	.word	0x2000047c
 8008810:	2000046c 	.word	0x2000046c

08008814 <Write_Reg>:
 * @param  reg    The register address to write to.
 * @param  value  The value to write to the register.
 *
 * @retval HAL_StatusTypeDef  Returns HAL_OK on success, or HAL_ERROR if the write operation fails.
 */
static HAL_StatusTypeDef Write_Reg(uint8_t reg, uint8_t value) {
 8008814:	b580      	push	{r7, lr}
 8008816:	b088      	sub	sp, #32
 8008818:	af04      	add	r7, sp, #16
 800881a:	4603      	mov	r3, r0
 800881c:	460a      	mov	r2, r1
 800881e:	71fb      	strb	r3, [r7, #7]
 8008820:	4613      	mov	r3, r2
 8008822:	71bb      	strb	r3, [r7, #6]
	uint8_t buf[1] = {value}, status;
 8008824:	79bb      	ldrb	r3, [r7, #6]
 8008826:	733b      	strb	r3, [r7, #12]

	status = HAL_I2C_Mem_Write(&LTC2959_I2C_PORT, LTC2959_I2C_ADDR, reg, 1, &buf[0], 1, 100);
 8008828:	79fb      	ldrb	r3, [r7, #7]
 800882a:	b29a      	uxth	r2, r3
 800882c:	2364      	movs	r3, #100	@ 0x64
 800882e:	9302      	str	r3, [sp, #8]
 8008830:	2301      	movs	r3, #1
 8008832:	9301      	str	r3, [sp, #4]
 8008834:	f107 030c 	add.w	r3, r7, #12
 8008838:	9300      	str	r3, [sp, #0]
 800883a:	2301      	movs	r3, #1
 800883c:	21c6      	movs	r1, #198	@ 0xc6
 800883e:	4805      	ldr	r0, [pc, #20]	@ (8008854 <Write_Reg+0x40>)
 8008840:	f7fc f86a 	bl	8004918 <HAL_I2C_Mem_Write>
 8008844:	4603      	mov	r3, r0
 8008846:	73fb      	strb	r3, [r7, #15]
	return status;
 8008848:	7bfb      	ldrb	r3, [r7, #15]
}
 800884a:	4618      	mov	r0, r3
 800884c:	3710      	adds	r7, #16
 800884e:	46bd      	mov	sp, r7
 8008850:	bd80      	pop	{r7, pc}
 8008852:	bf00      	nop
 8008854:	2000029c 	.word	0x2000029c

08008858 <Read_Reg>:
 *
 * @param  reg  The register address to read from.
 *
 * @retval uint8_t  Returns the value read from the register.
 */
static uint8_t Read_Reg(uint8_t reg){
 8008858:	b580      	push	{r7, lr}
 800885a:	b088      	sub	sp, #32
 800885c:	af04      	add	r7, sp, #16
 800885e:	4603      	mov	r3, r0
 8008860:	71fb      	strb	r3, [r7, #7]
	uint8_t value;
	HAL_I2C_Mem_Read(&LTC2959_I2C_PORT, LTC2959_I2C_ADDR, reg, 1, &value, 1, 100);
 8008862:	79fb      	ldrb	r3, [r7, #7]
 8008864:	b29a      	uxth	r2, r3
 8008866:	2364      	movs	r3, #100	@ 0x64
 8008868:	9302      	str	r3, [sp, #8]
 800886a:	2301      	movs	r3, #1
 800886c:	9301      	str	r3, [sp, #4]
 800886e:	f107 030f 	add.w	r3, r7, #15
 8008872:	9300      	str	r3, [sp, #0]
 8008874:	2301      	movs	r3, #1
 8008876:	21c6      	movs	r1, #198	@ 0xc6
 8008878:	4803      	ldr	r0, [pc, #12]	@ (8008888 <Read_Reg+0x30>)
 800887a:	f7fc f947 	bl	8004b0c <HAL_I2C_Mem_Read>
	return value;
 800887e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008880:	4618      	mov	r0, r3
 8008882:	3710      	adds	r7, #16
 8008884:	46bd      	mov	sp, r7
 8008886:	bd80      	pop	{r7, pc}
 8008888:	2000029c 	.word	0x2000029c

0800888c <Set_ADC_Mode>:
 * This function writes the specified ADC mode to the ADC control register.
 *
 * @param  mode  This parameter can be a value of @ref ADC_MODE.
 * Specifies the ADC mode to be set.
 */
static HAL_StatusTypeDef Set_ADC_Mode(uint8_t mode){
 800888c:	b580      	push	{r7, lr}
 800888e:	b084      	sub	sp, #16
 8008890:	af00      	add	r7, sp, #0
 8008892:	4603      	mov	r3, r0
 8008894:	71fb      	strb	r3, [r7, #7]
    uint8_t value = Read_Reg(REG_ADC_CONTROL);
 8008896:	2001      	movs	r0, #1
 8008898:	f7ff ffde 	bl	8008858 <Read_Reg>
 800889c:	4603      	mov	r3, r0
 800889e:	73fb      	strb	r3, [r7, #15]
    MODIFY_REG(value, CTRL_ADC_MODE_MASK, mode);
 80088a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80088a4:	f003 031f 	and.w	r3, r3, #31
 80088a8:	b25a      	sxtb	r2, r3
 80088aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80088ae:	4313      	orrs	r3, r2
 80088b0:	b25b      	sxtb	r3, r3
 80088b2:	73fb      	strb	r3, [r7, #15]
    return Write_Reg(REG_ADC_CONTROL, value);
 80088b4:	7bfb      	ldrb	r3, [r7, #15]
 80088b6:	4619      	mov	r1, r3
 80088b8:	2001      	movs	r0, #1
 80088ba:	f7ff ffab 	bl	8008814 <Write_Reg>
 80088be:	4603      	mov	r3, r0
}
 80088c0:	4618      	mov	r0, r3
 80088c2:	3710      	adds	r7, #16
 80088c4:	46bd      	mov	sp, r7
 80088c6:	bd80      	pop	{r7, pc}

080088c8 <Set_GPIO_Configure>:
 * This function configures the GPIO pin to the specified mode.
 *
 * @param  config  This parameter can be a value of @ref GPIO_CONFIG.
 * Specifies the GPIO mode to be set.
 */
static HAL_StatusTypeDef Set_GPIO_Configure(uint8_t config) {
 80088c8:	b580      	push	{r7, lr}
 80088ca:	b084      	sub	sp, #16
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	4603      	mov	r3, r0
 80088d0:	71fb      	strb	r3, [r7, #7]
    uint8_t value = Read_Reg(REG_ADC_CONTROL);
 80088d2:	2001      	movs	r0, #1
 80088d4:	f7ff ffc0 	bl	8008858 <Read_Reg>
 80088d8:	4603      	mov	r3, r0
 80088da:	73fb      	strb	r3, [r7, #15]
    MODIFY_REG(value, CTRL_GPIO_CONFIG_MASK, config);
 80088dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80088e0:	f023 0318 	bic.w	r3, r3, #24
 80088e4:	b25a      	sxtb	r2, r3
 80088e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80088ea:	4313      	orrs	r3, r2
 80088ec:	b25b      	sxtb	r3, r3
 80088ee:	73fb      	strb	r3, [r7, #15]
    return Write_Reg(REG_ADC_CONTROL, value);
 80088f0:	7bfb      	ldrb	r3, [r7, #15]
 80088f2:	4619      	mov	r1, r3
 80088f4:	2001      	movs	r0, #1
 80088f6:	f7ff ff8d 	bl	8008814 <Write_Reg>
 80088fa:	4603      	mov	r3, r0
}
 80088fc:	4618      	mov	r0, r3
 80088fe:	3710      	adds	r7, #16
 8008900:	46bd      	mov	sp, r7
 8008902:	bd80      	pop	{r7, pc}

08008904 <Set_Voltage_Input>:
 * VDD and SENSEN based on the input parameter.
 *
 * @param  input  This parameter can be a value of @ref VOLTAGE_INPUT.
 * Specifies the voltage input pin (VDD or SENSEN).
 */
static HAL_StatusTypeDef Set_Voltage_Input(uint8_t input) {
 8008904:	b580      	push	{r7, lr}
 8008906:	b084      	sub	sp, #16
 8008908:	af00      	add	r7, sp, #0
 800890a:	4603      	mov	r3, r0
 800890c:	71fb      	strb	r3, [r7, #7]
    uint8_t value = Read_Reg(REG_ADC_CONTROL);
 800890e:	2001      	movs	r0, #1
 8008910:	f7ff ffa2 	bl	8008858 <Read_Reg>
 8008914:	4603      	mov	r3, r0
 8008916:	73fb      	strb	r3, [r7, #15]
    MODIFY_REG(value, CTRL_CONFIG_VOLTAGE_INPUT_MASK, input);
 8008918:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800891c:	f023 0304 	bic.w	r3, r3, #4
 8008920:	b25a      	sxtb	r2, r3
 8008922:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008926:	4313      	orrs	r3, r2
 8008928:	b25b      	sxtb	r3, r3
 800892a:	73fb      	strb	r3, [r7, #15]
    return Write_Reg(REG_ADC_CONTROL, value);
 800892c:	7bfb      	ldrb	r3, [r7, #15]
 800892e:	4619      	mov	r1, r3
 8008930:	2001      	movs	r0, #1
 8008932:	f7ff ff6f 	bl	8008814 <Write_Reg>
 8008936:	4603      	mov	r3, r0
}
 8008938:	4618      	mov	r0, r3
 800893a:	3710      	adds	r7, #16
 800893c:	46bd      	mov	sp, r7
 800893e:	bd80      	pop	{r7, pc}

08008940 <Set_Coulomb_Counter_Deadband>:
 * This function sets the deadband for the Coulomb Counter.
 *
 * @param  deadband  This parameter can be a value of @ref COULOMB_COUNTER_DEADBAND.
 * Specifies the deadband value for the Coulomb Counter.
 */
static HAL_StatusTypeDef Set_Coulomb_Counter_Deadband(uint8_t deadband){
 8008940:	b580      	push	{r7, lr}
 8008942:	b084      	sub	sp, #16
 8008944:	af00      	add	r7, sp, #0
 8008946:	4603      	mov	r3, r0
 8008948:	71fb      	strb	r3, [r7, #7]
	uint8_t value = Read_Reg(REG_COULOMB_COUNTER_CONTROL);
 800894a:	2002      	movs	r0, #2
 800894c:	f7ff ff84 	bl	8008858 <Read_Reg>
 8008950:	4603      	mov	r3, r0
 8008952:	73fb      	strb	r3, [r7, #15]
    // Set the deadband
	MODIFY_REG(value, CC_CONFIG_DEADBAND_MASK, deadband);
 8008954:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008958:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800895c:	b25a      	sxtb	r2, r3
 800895e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008962:	4313      	orrs	r3, r2
 8008964:	b25b      	sxtb	r3, r3
 8008966:	73fb      	strb	r3, [r7, #15]
	// Ensure reserved bits are set to their default values
	MODIFY_REG(value, CC_CONFIG_RESERVED_54_MASK, CC_CONFIG_RESERVED_54_DEFAULT);
 8008968:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800896c:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8008970:	b25b      	sxtb	r3, r3
 8008972:	f043 0310 	orr.w	r3, r3, #16
 8008976:	b25b      	sxtb	r3, r3
 8008978:	73fb      	strb	r3, [r7, #15]
	MODIFY_REG(value, CC_CONFIG_RESERVED_20_MASK, CC_CONFIG_RESERVED_20_DEFAULT);
 800897a:	7bfb      	ldrb	r3, [r7, #15]
 800897c:	f023 0307 	bic.w	r3, r3, #7
 8008980:	73fb      	strb	r3, [r7, #15]
	return Write_Reg(REG_COULOMB_COUNTER_CONTROL, value);
 8008982:	7bfb      	ldrb	r3, [r7, #15]
 8008984:	4619      	mov	r1, r3
 8008986:	2002      	movs	r0, #2
 8008988:	f7ff ff44 	bl	8008814 <Write_Reg>
 800898c:	4603      	mov	r3, r0
}
 800898e:	4618      	mov	r0, r3
 8008990:	3710      	adds	r7, #16
 8008992:	46bd      	mov	sp, r7
 8008994:	bd80      	pop	{r7, pc}

08008996 <LTC2959_Init>:
 * structure provided.
 *
 * @param  config_t  Pointer to a structure of type @ref LTC2959_Config_t containing
 * the initialization parameters for the LTC2959.
 */
void LTC2959_Init(LTC2959_Config_t *config_t){
 8008996:	b580      	push	{r7, lr}
 8008998:	b082      	sub	sp, #8
 800899a:	af00      	add	r7, sp, #0
 800899c:	6078      	str	r0, [r7, #4]
#ifndef _DEBUG
	Set_ADC_Mode(config_t->ADC_mode);
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	781b      	ldrb	r3, [r3, #0]
 80089a2:	4618      	mov	r0, r3
 80089a4:	f7ff ff72 	bl	800888c <Set_ADC_Mode>
	HAL_Delay(10);
 80089a8:	200a      	movs	r0, #10
 80089aa:	f7fa fb9f 	bl	80030ec <HAL_Delay>
	Set_GPIO_Configure(config_t->GPIO_config);
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	785b      	ldrb	r3, [r3, #1]
 80089b2:	4618      	mov	r0, r3
 80089b4:	f7ff ff88 	bl	80088c8 <Set_GPIO_Configure>
	HAL_Delay(10);
 80089b8:	200a      	movs	r0, #10
 80089ba:	f7fa fb97 	bl	80030ec <HAL_Delay>
	Set_Voltage_Input(config_t->voltage_input);
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	789b      	ldrb	r3, [r3, #2]
 80089c2:	4618      	mov	r0, r3
 80089c4:	f7ff ff9e 	bl	8008904 <Set_Voltage_Input>
	HAL_Delay(10);
 80089c8:	200a      	movs	r0, #10
 80089ca:	f7fa fb8f 	bl	80030ec <HAL_Delay>
	Set_Coulomb_Counter_Deadband(config_t->CC_deadband);
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	78db      	ldrb	r3, [r3, #3]
 80089d2:	4618      	mov	r0, r3
 80089d4:	f7ff ffb4 	bl	8008940 <Set_Coulomb_Counter_Deadband>
	HAL_Delay(10);
 80089d8:	200a      	movs	r0, #10
 80089da:	f7fa fb87 	bl	80030ec <HAL_Delay>
	status = Set_Coulomb_Counter_Deadband(config_t->CC_deadband);
	printf("Set_Coulomb_Counter_Deadband = %d\n\r", status);
	HAL_Delay(10);
#endif

}
 80089de:	bf00      	nop
 80089e0:	3708      	adds	r7, #8
 80089e2:	46bd      	mov	sp, r7
 80089e4:	bd80      	pop	{r7, pc}
	...

080089e8 <LTC2959_Get_Current>:
 * This function reads the current register and calculates the
 * current using the sense resistor value.
 *
 * @return Current in milli-amperes.
 */
int32_t LTC2959_Get_Current(){
 80089e8:	b580      	push	{r7, lr}
 80089ea:	b084      	sub	sp, #16
 80089ec:	af00      	add	r7, sp, #0
	uint8_t buf[2];
	int16_t value;

	// Read the MSB and LSB of the current register
	buf[0] = Read_Reg(REG_CURRENT_MSB);
 80089ee:	2019      	movs	r0, #25
 80089f0:	f7ff ff32 	bl	8008858 <Read_Reg>
 80089f4:	4603      	mov	r3, r0
 80089f6:	713b      	strb	r3, [r7, #4]
	buf[1] = Read_Reg(REG_CURRENT_LSB);
 80089f8:	201a      	movs	r0, #26
 80089fa:	f7ff ff2d 	bl	8008858 <Read_Reg>
 80089fe:	4603      	mov	r3, r0
 8008a00:	717b      	strb	r3, [r7, #5]

	// Combine MSB and LSB into 16-bit signed value
	value = (int16_t)((buf[0] << 8) | buf[1]);
 8008a02:	793b      	ldrb	r3, [r7, #4]
 8008a04:	021b      	lsls	r3, r3, #8
 8008a06:	b21a      	sxth	r2, r3
 8008a08:	797b      	ldrb	r3, [r7, #5]
 8008a0a:	b21b      	sxth	r3, r3
 8008a0c:	4313      	orrs	r3, r2
 8008a0e:	81fb      	strh	r3, [r7, #14]

	int32_t current_mA = value * CURRENT_MULTIPLIER / 1000;
 8008a10:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8008a14:	4618      	mov	r0, r3
 8008a16:	f7f7 fcf5 	bl	8000404 <__aeabi_i2d>
 8008a1a:	a30f      	add	r3, pc, #60	@ (adr r3, 8008a58 <LTC2959_Get_Current+0x70>)
 8008a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a20:	f7f7 fd5a 	bl	80004d8 <__aeabi_dmul>
 8008a24:	4602      	mov	r2, r0
 8008a26:	460b      	mov	r3, r1
 8008a28:	4610      	mov	r0, r2
 8008a2a:	4619      	mov	r1, r3
 8008a2c:	f04f 0200 	mov.w	r2, #0
 8008a30:	4b0b      	ldr	r3, [pc, #44]	@ (8008a60 <LTC2959_Get_Current+0x78>)
 8008a32:	f7f7 fe7b 	bl	800072c <__aeabi_ddiv>
 8008a36:	4602      	mov	r2, r0
 8008a38:	460b      	mov	r3, r1
 8008a3a:	4610      	mov	r0, r2
 8008a3c:	4619      	mov	r1, r3
 8008a3e:	f7f7 fffb 	bl	8000a38 <__aeabi_d2iz>
 8008a42:	4603      	mov	r3, r0
 8008a44:	60bb      	str	r3, [r7, #8]

	return current_mA + 5;
 8008a46:	68bb      	ldr	r3, [r7, #8]
 8008a48:	3305      	adds	r3, #5
}
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	3710      	adds	r7, #16
 8008a4e:	46bd      	mov	sp, r7
 8008a50:	bd80      	pop	{r7, pc}
 8008a52:	bf00      	nop
 8008a54:	f3af 8000 	nop.w
 8008a58:	00000000 	.word	0x00000000
 8008a5c:	408efe92 	.word	0x408efe92
 8008a60:	408f4000 	.word	0x408f4000

08008a64 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8008a64:	b480      	push	{r7}
 8008a66:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8008a68:	bf00      	nop
 8008a6a:	46bd      	mov	sp, r7
 8008a6c:	bc80      	pop	{r7}
 8008a6e:	4770      	bx	lr

08008a70 <ssd1306_WriteCommand>:
/*
 * DMA settings
 * ADD I2Cx_TX in normal mode. Byte | Byte
 * In NVIC Settings, Enable "I2Cx event interrupt"
 */
void ssd1306_WriteCommand(uint8_t byte) {
 8008a70:	b580      	push	{r7, lr}
 8008a72:	b086      	sub	sp, #24
 8008a74:	af04      	add	r7, sp, #16
 8008a76:	4603      	mov	r3, r0
 8008a78:	71fb      	strb	r3, [r7, #7]
#ifdef USE_DMA
	while(HAL_I2C_GetState(&SSD1306_I2C_PORT) != HAL_I2C_STATE_READY);
	HAL_I2C_Mem_Write_DMA(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1);
#else
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8008a7a:	f04f 33ff 	mov.w	r3, #4294967295
 8008a7e:	9302      	str	r3, [sp, #8]
 8008a80:	2301      	movs	r3, #1
 8008a82:	9301      	str	r3, [sp, #4]
 8008a84:	1dfb      	adds	r3, r7, #7
 8008a86:	9300      	str	r3, [sp, #0]
 8008a88:	2301      	movs	r3, #1
 8008a8a:	2200      	movs	r2, #0
 8008a8c:	2178      	movs	r1, #120	@ 0x78
 8008a8e:	4803      	ldr	r0, [pc, #12]	@ (8008a9c <ssd1306_WriteCommand+0x2c>)
 8008a90:	f7fb ff42 	bl	8004918 <HAL_I2C_Mem_Write>
#endif
}
 8008a94:	bf00      	nop
 8008a96:	3708      	adds	r7, #8
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	bd80      	pop	{r7, pc}
 8008a9c:	20000248 	.word	0x20000248

08008aa0 <ssd1306_WriteData>:


void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8008aa0:	b580      	push	{r7, lr}
 8008aa2:	b086      	sub	sp, #24
 8008aa4:	af04      	add	r7, sp, #16
 8008aa6:	6078      	str	r0, [r7, #4]
 8008aa8:	6039      	str	r1, [r7, #0]
#ifdef USE_DMA
	while(HAL_I2C_GetState(&SSD1306_I2C_PORT) != HAL_I2C_STATE_READY);
	HAL_I2C_Mem_Write_DMA(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size);
#else
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8008aaa:	683b      	ldr	r3, [r7, #0]
 8008aac:	b29b      	uxth	r3, r3
 8008aae:	f04f 32ff 	mov.w	r2, #4294967295
 8008ab2:	9202      	str	r2, [sp, #8]
 8008ab4:	9301      	str	r3, [sp, #4]
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	9300      	str	r3, [sp, #0]
 8008aba:	2301      	movs	r3, #1
 8008abc:	2240      	movs	r2, #64	@ 0x40
 8008abe:	2178      	movs	r1, #120	@ 0x78
 8008ac0:	4803      	ldr	r0, [pc, #12]	@ (8008ad0 <ssd1306_WriteData+0x30>)
 8008ac2:	f7fb ff29 	bl	8004918 <HAL_I2C_Mem_Write>
#endif
}
 8008ac6:	bf00      	nop
 8008ac8:	3708      	adds	r7, #8
 8008aca:	46bd      	mov	sp, r7
 8008acc:	bd80      	pop	{r7, pc}
 8008ace:	bf00      	nop
 8008ad0:	20000248 	.word	0x20000248

08008ad4 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8008ad4:	b580      	push	{r7, lr}
 8008ad6:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8008ad8:	f7ff ffc4 	bl	8008a64 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8008adc:	2064      	movs	r0, #100	@ 0x64
 8008ade:	f7fa fb05 	bl	80030ec <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8008ae2:	2000      	movs	r0, #0
 8008ae4:	f000 fa9c 	bl	8009020 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8008ae8:	2020      	movs	r0, #32
 8008aea:	f7ff ffc1 	bl	8008a70 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8008aee:	2000      	movs	r0, #0
 8008af0:	f7ff ffbe 	bl	8008a70 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8008af4:	20b0      	movs	r0, #176	@ 0xb0
 8008af6:	f7ff ffbb 	bl	8008a70 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8008afa:	20c8      	movs	r0, #200	@ 0xc8
 8008afc:	f7ff ffb8 	bl	8008a70 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8008b00:	2000      	movs	r0, #0
 8008b02:	f7ff ffb5 	bl	8008a70 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8008b06:	2010      	movs	r0, #16
 8008b08:	f7ff ffb2 	bl	8008a70 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8008b0c:	2040      	movs	r0, #64	@ 0x40
 8008b0e:	f7ff ffaf 	bl	8008a70 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8008b12:	20ff      	movs	r0, #255	@ 0xff
 8008b14:	f000 fa71 	bl	8008ffa <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8008b18:	20a1      	movs	r0, #161	@ 0xa1
 8008b1a:	f7ff ffa9 	bl	8008a70 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8008b1e:	20a6      	movs	r0, #166	@ 0xa6
 8008b20:	f7ff ffa6 	bl	8008a70 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8008b24:	20a8      	movs	r0, #168	@ 0xa8
 8008b26:	f7ff ffa3 	bl	8008a70 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8008b2a:	203f      	movs	r0, #63	@ 0x3f
 8008b2c:	f7ff ffa0 	bl	8008a70 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8008b30:	20a4      	movs	r0, #164	@ 0xa4
 8008b32:	f7ff ff9d 	bl	8008a70 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8008b36:	20d3      	movs	r0, #211	@ 0xd3
 8008b38:	f7ff ff9a 	bl	8008a70 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8008b3c:	2000      	movs	r0, #0
 8008b3e:	f7ff ff97 	bl	8008a70 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8008b42:	20d5      	movs	r0, #213	@ 0xd5
 8008b44:	f7ff ff94 	bl	8008a70 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8008b48:	20f0      	movs	r0, #240	@ 0xf0
 8008b4a:	f7ff ff91 	bl	8008a70 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8008b4e:	20d9      	movs	r0, #217	@ 0xd9
 8008b50:	f7ff ff8e 	bl	8008a70 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8008b54:	2022      	movs	r0, #34	@ 0x22
 8008b56:	f7ff ff8b 	bl	8008a70 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8008b5a:	20da      	movs	r0, #218	@ 0xda
 8008b5c:	f7ff ff88 	bl	8008a70 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8008b60:	2012      	movs	r0, #18
 8008b62:	f7ff ff85 	bl	8008a70 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8008b66:	20db      	movs	r0, #219	@ 0xdb
 8008b68:	f7ff ff82 	bl	8008a70 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8008b6c:	2020      	movs	r0, #32
 8008b6e:	f7ff ff7f 	bl	8008a70 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8008b72:	208d      	movs	r0, #141	@ 0x8d
 8008b74:	f7ff ff7c 	bl	8008a70 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8008b78:	2014      	movs	r0, #20
 8008b7a:	f7ff ff79 	bl	8008a70 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8008b7e:	2001      	movs	r0, #1
 8008b80:	f000 fa4e 	bl	8009020 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8008b84:	2000      	movs	r0, #0
 8008b86:	f000 f80f 	bl	8008ba8 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8008b8a:	f000 f82f 	bl	8008bec <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8008b8e:	4b05      	ldr	r3, [pc, #20]	@ (8008ba4 <ssd1306_Init+0xd0>)
 8008b90:	2200      	movs	r2, #0
 8008b92:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8008b94:	4b03      	ldr	r3, [pc, #12]	@ (8008ba4 <ssd1306_Init+0xd0>)
 8008b96:	2200      	movs	r2, #0
 8008b98:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8008b9a:	4b02      	ldr	r3, [pc, #8]	@ (8008ba4 <ssd1306_Init+0xd0>)
 8008b9c:	2201      	movs	r2, #1
 8008b9e:	711a      	strb	r2, [r3, #4]
}
 8008ba0:	bf00      	nop
 8008ba2:	bd80      	pop	{r7, pc}
 8008ba4:	200008cc 	.word	0x200008cc

08008ba8 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8008ba8:	b480      	push	{r7}
 8008baa:	b085      	sub	sp, #20
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	4603      	mov	r3, r0
 8008bb0:	71fb      	strb	r3, [r7, #7]
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8008bb2:	2300      	movs	r3, #0
 8008bb4:	60fb      	str	r3, [r7, #12]
 8008bb6:	e00d      	b.n	8008bd4 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8008bb8:	79fb      	ldrb	r3, [r7, #7]
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d101      	bne.n	8008bc2 <ssd1306_Fill+0x1a>
 8008bbe:	2100      	movs	r1, #0
 8008bc0:	e000      	b.n	8008bc4 <ssd1306_Fill+0x1c>
 8008bc2:	21ff      	movs	r1, #255	@ 0xff
 8008bc4:	4a08      	ldr	r2, [pc, #32]	@ (8008be8 <ssd1306_Fill+0x40>)
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	4413      	add	r3, r2
 8008bca:	460a      	mov	r2, r1
 8008bcc:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	3301      	adds	r3, #1
 8008bd2:	60fb      	str	r3, [r7, #12]
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008bda:	d3ed      	bcc.n	8008bb8 <ssd1306_Fill+0x10>
    }
}
 8008bdc:	bf00      	nop
 8008bde:	bf00      	nop
 8008be0:	3714      	adds	r7, #20
 8008be2:	46bd      	mov	sp, r7
 8008be4:	bc80      	pop	{r7}
 8008be6:	4770      	bx	lr
 8008be8:	200004cc 	.word	0x200004cc

08008bec <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8008bec:	b580      	push	{r7, lr}
 8008bee:	b082      	sub	sp, #8
 8008bf0:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	71fb      	strb	r3, [r7, #7]
 8008bf6:	e016      	b.n	8008c26 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8008bf8:	79fb      	ldrb	r3, [r7, #7]
 8008bfa:	3b50      	subs	r3, #80	@ 0x50
 8008bfc:	b2db      	uxtb	r3, r3
 8008bfe:	4618      	mov	r0, r3
 8008c00:	f7ff ff36 	bl	8008a70 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8008c04:	2001      	movs	r0, #1
 8008c06:	f7ff ff33 	bl	8008a70 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8008c0a:	2010      	movs	r0, #16
 8008c0c:	f7ff ff30 	bl	8008a70 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8008c10:	79fb      	ldrb	r3, [r7, #7]
 8008c12:	01db      	lsls	r3, r3, #7
 8008c14:	4a08      	ldr	r2, [pc, #32]	@ (8008c38 <ssd1306_UpdateScreen+0x4c>)
 8008c16:	4413      	add	r3, r2
 8008c18:	2180      	movs	r1, #128	@ 0x80
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	f7ff ff40 	bl	8008aa0 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8008c20:	79fb      	ldrb	r3, [r7, #7]
 8008c22:	3301      	adds	r3, #1
 8008c24:	71fb      	strb	r3, [r7, #7]
 8008c26:	79fb      	ldrb	r3, [r7, #7]
 8008c28:	2b07      	cmp	r3, #7
 8008c2a:	d9e5      	bls.n	8008bf8 <ssd1306_UpdateScreen+0xc>
    }
}
 8008c2c:	bf00      	nop
 8008c2e:	bf00      	nop
 8008c30:	3708      	adds	r7, #8
 8008c32:	46bd      	mov	sp, r7
 8008c34:	bd80      	pop	{r7, pc}
 8008c36:	bf00      	nop
 8008c38:	200004cc 	.word	0x200004cc

08008c3c <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8008c3c:	b480      	push	{r7}
 8008c3e:	b083      	sub	sp, #12
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	4603      	mov	r3, r0
 8008c44:	71fb      	strb	r3, [r7, #7]
 8008c46:	460b      	mov	r3, r1
 8008c48:	71bb      	strb	r3, [r7, #6]
 8008c4a:	4613      	mov	r3, r2
 8008c4c:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8008c4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	db3d      	blt.n	8008cd2 <ssd1306_DrawPixel+0x96>
 8008c56:	79bb      	ldrb	r3, [r7, #6]
 8008c58:	2b3f      	cmp	r3, #63	@ 0x3f
 8008c5a:	d83a      	bhi.n	8008cd2 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8008c5c:	797b      	ldrb	r3, [r7, #5]
 8008c5e:	2b01      	cmp	r3, #1
 8008c60:	d11a      	bne.n	8008c98 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8008c62:	79fa      	ldrb	r2, [r7, #7]
 8008c64:	79bb      	ldrb	r3, [r7, #6]
 8008c66:	08db      	lsrs	r3, r3, #3
 8008c68:	b2d8      	uxtb	r0, r3
 8008c6a:	4603      	mov	r3, r0
 8008c6c:	01db      	lsls	r3, r3, #7
 8008c6e:	4413      	add	r3, r2
 8008c70:	4a1a      	ldr	r2, [pc, #104]	@ (8008cdc <ssd1306_DrawPixel+0xa0>)
 8008c72:	5cd3      	ldrb	r3, [r2, r3]
 8008c74:	b25a      	sxtb	r2, r3
 8008c76:	79bb      	ldrb	r3, [r7, #6]
 8008c78:	f003 0307 	and.w	r3, r3, #7
 8008c7c:	2101      	movs	r1, #1
 8008c7e:	fa01 f303 	lsl.w	r3, r1, r3
 8008c82:	b25b      	sxtb	r3, r3
 8008c84:	4313      	orrs	r3, r2
 8008c86:	b259      	sxtb	r1, r3
 8008c88:	79fa      	ldrb	r2, [r7, #7]
 8008c8a:	4603      	mov	r3, r0
 8008c8c:	01db      	lsls	r3, r3, #7
 8008c8e:	4413      	add	r3, r2
 8008c90:	b2c9      	uxtb	r1, r1
 8008c92:	4a12      	ldr	r2, [pc, #72]	@ (8008cdc <ssd1306_DrawPixel+0xa0>)
 8008c94:	54d1      	strb	r1, [r2, r3]
 8008c96:	e01d      	b.n	8008cd4 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8008c98:	79fa      	ldrb	r2, [r7, #7]
 8008c9a:	79bb      	ldrb	r3, [r7, #6]
 8008c9c:	08db      	lsrs	r3, r3, #3
 8008c9e:	b2d8      	uxtb	r0, r3
 8008ca0:	4603      	mov	r3, r0
 8008ca2:	01db      	lsls	r3, r3, #7
 8008ca4:	4413      	add	r3, r2
 8008ca6:	4a0d      	ldr	r2, [pc, #52]	@ (8008cdc <ssd1306_DrawPixel+0xa0>)
 8008ca8:	5cd3      	ldrb	r3, [r2, r3]
 8008caa:	b25a      	sxtb	r2, r3
 8008cac:	79bb      	ldrb	r3, [r7, #6]
 8008cae:	f003 0307 	and.w	r3, r3, #7
 8008cb2:	2101      	movs	r1, #1
 8008cb4:	fa01 f303 	lsl.w	r3, r1, r3
 8008cb8:	b25b      	sxtb	r3, r3
 8008cba:	43db      	mvns	r3, r3
 8008cbc:	b25b      	sxtb	r3, r3
 8008cbe:	4013      	ands	r3, r2
 8008cc0:	b259      	sxtb	r1, r3
 8008cc2:	79fa      	ldrb	r2, [r7, #7]
 8008cc4:	4603      	mov	r3, r0
 8008cc6:	01db      	lsls	r3, r3, #7
 8008cc8:	4413      	add	r3, r2
 8008cca:	b2c9      	uxtb	r1, r1
 8008ccc:	4a03      	ldr	r2, [pc, #12]	@ (8008cdc <ssd1306_DrawPixel+0xa0>)
 8008cce:	54d1      	strb	r1, [r2, r3]
 8008cd0:	e000      	b.n	8008cd4 <ssd1306_DrawPixel+0x98>
        return;
 8008cd2:	bf00      	nop
    }
}
 8008cd4:	370c      	adds	r7, #12
 8008cd6:	46bd      	mov	sp, r7
 8008cd8:	bc80      	pop	{r7}
 8008cda:	4770      	bx	lr
 8008cdc:	200004cc 	.word	0x200004cc

08008ce0 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8008ce0:	b590      	push	{r4, r7, lr}
 8008ce2:	b089      	sub	sp, #36	@ 0x24
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	4604      	mov	r4, r0
 8008ce8:	1d38      	adds	r0, r7, #4
 8008cea:	e880 0006 	stmia.w	r0, {r1, r2}
 8008cee:	461a      	mov	r2, r3
 8008cf0:	4623      	mov	r3, r4
 8008cf2:	73fb      	strb	r3, [r7, #15]
 8008cf4:	4613      	mov	r3, r2
 8008cf6:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8008cf8:	7bfb      	ldrb	r3, [r7, #15]
 8008cfa:	2b1f      	cmp	r3, #31
 8008cfc:	d902      	bls.n	8008d04 <ssd1306_WriteChar+0x24>
 8008cfe:	7bfb      	ldrb	r3, [r7, #15]
 8008d00:	2b7e      	cmp	r3, #126	@ 0x7e
 8008d02:	d901      	bls.n	8008d08 <ssd1306_WriteChar+0x28>
        return 0;
 8008d04:	2300      	movs	r3, #0
 8008d06:	e06c      	b.n	8008de2 <ssd1306_WriteChar+0x102>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8008d08:	4b38      	ldr	r3, [pc, #224]	@ (8008dec <ssd1306_WriteChar+0x10c>)
 8008d0a:	881b      	ldrh	r3, [r3, #0]
 8008d0c:	461a      	mov	r2, r3
 8008d0e:	793b      	ldrb	r3, [r7, #4]
 8008d10:	4413      	add	r3, r2
 8008d12:	2b80      	cmp	r3, #128	@ 0x80
 8008d14:	dc06      	bgt.n	8008d24 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8008d16:	4b35      	ldr	r3, [pc, #212]	@ (8008dec <ssd1306_WriteChar+0x10c>)
 8008d18:	885b      	ldrh	r3, [r3, #2]
 8008d1a:	461a      	mov	r2, r3
 8008d1c:	797b      	ldrb	r3, [r7, #5]
 8008d1e:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8008d20:	2b40      	cmp	r3, #64	@ 0x40
 8008d22:	dd01      	ble.n	8008d28 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8008d24:	2300      	movs	r3, #0
 8008d26:	e05c      	b.n	8008de2 <ssd1306_WriteChar+0x102>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8008d28:	2300      	movs	r3, #0
 8008d2a:	61fb      	str	r3, [r7, #28]
 8008d2c:	e04c      	b.n	8008dc8 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8008d2e:	68ba      	ldr	r2, [r7, #8]
 8008d30:	7bfb      	ldrb	r3, [r7, #15]
 8008d32:	3b20      	subs	r3, #32
 8008d34:	7979      	ldrb	r1, [r7, #5]
 8008d36:	fb01 f303 	mul.w	r3, r1, r3
 8008d3a:	4619      	mov	r1, r3
 8008d3c:	69fb      	ldr	r3, [r7, #28]
 8008d3e:	440b      	add	r3, r1
 8008d40:	005b      	lsls	r3, r3, #1
 8008d42:	4413      	add	r3, r2
 8008d44:	881b      	ldrh	r3, [r3, #0]
 8008d46:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8008d48:	2300      	movs	r3, #0
 8008d4a:	61bb      	str	r3, [r7, #24]
 8008d4c:	e034      	b.n	8008db8 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8008d4e:	697a      	ldr	r2, [r7, #20]
 8008d50:	69bb      	ldr	r3, [r7, #24]
 8008d52:	fa02 f303 	lsl.w	r3, r2, r3
 8008d56:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d012      	beq.n	8008d84 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8008d5e:	4b23      	ldr	r3, [pc, #140]	@ (8008dec <ssd1306_WriteChar+0x10c>)
 8008d60:	881b      	ldrh	r3, [r3, #0]
 8008d62:	b2da      	uxtb	r2, r3
 8008d64:	69bb      	ldr	r3, [r7, #24]
 8008d66:	b2db      	uxtb	r3, r3
 8008d68:	4413      	add	r3, r2
 8008d6a:	b2d8      	uxtb	r0, r3
 8008d6c:	4b1f      	ldr	r3, [pc, #124]	@ (8008dec <ssd1306_WriteChar+0x10c>)
 8008d6e:	885b      	ldrh	r3, [r3, #2]
 8008d70:	b2da      	uxtb	r2, r3
 8008d72:	69fb      	ldr	r3, [r7, #28]
 8008d74:	b2db      	uxtb	r3, r3
 8008d76:	4413      	add	r3, r2
 8008d78:	b2db      	uxtb	r3, r3
 8008d7a:	7bba      	ldrb	r2, [r7, #14]
 8008d7c:	4619      	mov	r1, r3
 8008d7e:	f7ff ff5d 	bl	8008c3c <ssd1306_DrawPixel>
 8008d82:	e016      	b.n	8008db2 <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8008d84:	4b19      	ldr	r3, [pc, #100]	@ (8008dec <ssd1306_WriteChar+0x10c>)
 8008d86:	881b      	ldrh	r3, [r3, #0]
 8008d88:	b2da      	uxtb	r2, r3
 8008d8a:	69bb      	ldr	r3, [r7, #24]
 8008d8c:	b2db      	uxtb	r3, r3
 8008d8e:	4413      	add	r3, r2
 8008d90:	b2d8      	uxtb	r0, r3
 8008d92:	4b16      	ldr	r3, [pc, #88]	@ (8008dec <ssd1306_WriteChar+0x10c>)
 8008d94:	885b      	ldrh	r3, [r3, #2]
 8008d96:	b2da      	uxtb	r2, r3
 8008d98:	69fb      	ldr	r3, [r7, #28]
 8008d9a:	b2db      	uxtb	r3, r3
 8008d9c:	4413      	add	r3, r2
 8008d9e:	b2d9      	uxtb	r1, r3
 8008da0:	7bbb      	ldrb	r3, [r7, #14]
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	bf0c      	ite	eq
 8008da6:	2301      	moveq	r3, #1
 8008da8:	2300      	movne	r3, #0
 8008daa:	b2db      	uxtb	r3, r3
 8008dac:	461a      	mov	r2, r3
 8008dae:	f7ff ff45 	bl	8008c3c <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8008db2:	69bb      	ldr	r3, [r7, #24]
 8008db4:	3301      	adds	r3, #1
 8008db6:	61bb      	str	r3, [r7, #24]
 8008db8:	793b      	ldrb	r3, [r7, #4]
 8008dba:	461a      	mov	r2, r3
 8008dbc:	69bb      	ldr	r3, [r7, #24]
 8008dbe:	4293      	cmp	r3, r2
 8008dc0:	d3c5      	bcc.n	8008d4e <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8008dc2:	69fb      	ldr	r3, [r7, #28]
 8008dc4:	3301      	adds	r3, #1
 8008dc6:	61fb      	str	r3, [r7, #28]
 8008dc8:	797b      	ldrb	r3, [r7, #5]
 8008dca:	461a      	mov	r2, r3
 8008dcc:	69fb      	ldr	r3, [r7, #28]
 8008dce:	4293      	cmp	r3, r2
 8008dd0:	d3ad      	bcc.n	8008d2e <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8008dd2:	4b06      	ldr	r3, [pc, #24]	@ (8008dec <ssd1306_WriteChar+0x10c>)
 8008dd4:	881b      	ldrh	r3, [r3, #0]
 8008dd6:	793a      	ldrb	r2, [r7, #4]
 8008dd8:	4413      	add	r3, r2
 8008dda:	b29a      	uxth	r2, r3
 8008ddc:	4b03      	ldr	r3, [pc, #12]	@ (8008dec <ssd1306_WriteChar+0x10c>)
 8008dde:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8008de0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008de2:	4618      	mov	r0, r3
 8008de4:	3724      	adds	r7, #36	@ 0x24
 8008de6:	46bd      	mov	sp, r7
 8008de8:	bd90      	pop	{r4, r7, pc}
 8008dea:	bf00      	nop
 8008dec:	200008cc 	.word	0x200008cc

08008df0 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8008df0:	b580      	push	{r7, lr}
 8008df2:	b084      	sub	sp, #16
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	60f8      	str	r0, [r7, #12]
 8008df8:	1d38      	adds	r0, r7, #4
 8008dfa:	e880 0006 	stmia.w	r0, {r1, r2}
 8008dfe:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 8008e00:	e012      	b.n	8008e28 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	7818      	ldrb	r0, [r3, #0]
 8008e06:	78fb      	ldrb	r3, [r7, #3]
 8008e08:	1d3a      	adds	r2, r7, #4
 8008e0a:	ca06      	ldmia	r2, {r1, r2}
 8008e0c:	f7ff ff68 	bl	8008ce0 <ssd1306_WriteChar>
 8008e10:	4603      	mov	r3, r0
 8008e12:	461a      	mov	r2, r3
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	781b      	ldrb	r3, [r3, #0]
 8008e18:	429a      	cmp	r2, r3
 8008e1a:	d002      	beq.n	8008e22 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	781b      	ldrb	r3, [r3, #0]
 8008e20:	e008      	b.n	8008e34 <ssd1306_WriteString+0x44>
        }
        str++;
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	3301      	adds	r3, #1
 8008e26:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	781b      	ldrb	r3, [r3, #0]
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d1e8      	bne.n	8008e02 <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	781b      	ldrb	r3, [r3, #0]
}
 8008e34:	4618      	mov	r0, r3
 8008e36:	3710      	adds	r7, #16
 8008e38:	46bd      	mov	sp, r7
 8008e3a:	bd80      	pop	{r7, pc}

08008e3c <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8008e3c:	b480      	push	{r7}
 8008e3e:	b083      	sub	sp, #12
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	4603      	mov	r3, r0
 8008e44:	460a      	mov	r2, r1
 8008e46:	71fb      	strb	r3, [r7, #7]
 8008e48:	4613      	mov	r3, r2
 8008e4a:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8008e4c:	79fb      	ldrb	r3, [r7, #7]
 8008e4e:	b29a      	uxth	r2, r3
 8008e50:	4b05      	ldr	r3, [pc, #20]	@ (8008e68 <ssd1306_SetCursor+0x2c>)
 8008e52:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8008e54:	79bb      	ldrb	r3, [r7, #6]
 8008e56:	b29a      	uxth	r2, r3
 8008e58:	4b03      	ldr	r3, [pc, #12]	@ (8008e68 <ssd1306_SetCursor+0x2c>)
 8008e5a:	805a      	strh	r2, [r3, #2]
}
 8008e5c:	bf00      	nop
 8008e5e:	370c      	adds	r7, #12
 8008e60:	46bd      	mov	sp, r7
 8008e62:	bc80      	pop	{r7}
 8008e64:	4770      	bx	lr
 8008e66:	bf00      	nop
 8008e68:	200008cc 	.word	0x200008cc

08008e6c <ssd1306_Line>:

/* Draw line by Bresenhem's algorithm */
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8008e6c:	b590      	push	{r4, r7, lr}
 8008e6e:	b089      	sub	sp, #36	@ 0x24
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	4604      	mov	r4, r0
 8008e74:	4608      	mov	r0, r1
 8008e76:	4611      	mov	r1, r2
 8008e78:	461a      	mov	r2, r3
 8008e7a:	4623      	mov	r3, r4
 8008e7c:	71fb      	strb	r3, [r7, #7]
 8008e7e:	4603      	mov	r3, r0
 8008e80:	71bb      	strb	r3, [r7, #6]
 8008e82:	460b      	mov	r3, r1
 8008e84:	717b      	strb	r3, [r7, #5]
 8008e86:	4613      	mov	r3, r2
 8008e88:	713b      	strb	r3, [r7, #4]
    int32_t deltaX = abs(x2 - x1);
 8008e8a:	797a      	ldrb	r2, [r7, #5]
 8008e8c:	79fb      	ldrb	r3, [r7, #7]
 8008e8e:	1ad3      	subs	r3, r2, r3
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	bfb8      	it	lt
 8008e94:	425b      	neglt	r3, r3
 8008e96:	61bb      	str	r3, [r7, #24]
    int32_t deltaY = abs(y2 - y1);
 8008e98:	793a      	ldrb	r2, [r7, #4]
 8008e9a:	79bb      	ldrb	r3, [r7, #6]
 8008e9c:	1ad3      	subs	r3, r2, r3
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	bfb8      	it	lt
 8008ea2:	425b      	neglt	r3, r3
 8008ea4:	617b      	str	r3, [r7, #20]
    int32_t signX = ((x1 < x2) ? 1 : -1);
 8008ea6:	79fa      	ldrb	r2, [r7, #7]
 8008ea8:	797b      	ldrb	r3, [r7, #5]
 8008eaa:	429a      	cmp	r2, r3
 8008eac:	d201      	bcs.n	8008eb2 <ssd1306_Line+0x46>
 8008eae:	2301      	movs	r3, #1
 8008eb0:	e001      	b.n	8008eb6 <ssd1306_Line+0x4a>
 8008eb2:	f04f 33ff 	mov.w	r3, #4294967295
 8008eb6:	613b      	str	r3, [r7, #16]
    int32_t signY = ((y1 < y2) ? 1 : -1);
 8008eb8:	79ba      	ldrb	r2, [r7, #6]
 8008eba:	793b      	ldrb	r3, [r7, #4]
 8008ebc:	429a      	cmp	r2, r3
 8008ebe:	d201      	bcs.n	8008ec4 <ssd1306_Line+0x58>
 8008ec0:	2301      	movs	r3, #1
 8008ec2:	e001      	b.n	8008ec8 <ssd1306_Line+0x5c>
 8008ec4:	f04f 33ff 	mov.w	r3, #4294967295
 8008ec8:	60fb      	str	r3, [r7, #12]
    int32_t error = deltaX - deltaY;
 8008eca:	69ba      	ldr	r2, [r7, #24]
 8008ecc:	697b      	ldr	r3, [r7, #20]
 8008ece:	1ad3      	subs	r3, r2, r3
 8008ed0:	61fb      	str	r3, [r7, #28]
    int32_t error2;
    
    ssd1306_DrawPixel(x2, y2, color);
 8008ed2:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8008ed6:	7939      	ldrb	r1, [r7, #4]
 8008ed8:	797b      	ldrb	r3, [r7, #5]
 8008eda:	4618      	mov	r0, r3
 8008edc:	f7ff feae 	bl	8008c3c <ssd1306_DrawPixel>

    while((x1 != x2) || (y1 != y2)) {
 8008ee0:	e024      	b.n	8008f2c <ssd1306_Line+0xc0>
        ssd1306_DrawPixel(x1, y1, color);
 8008ee2:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8008ee6:	79b9      	ldrb	r1, [r7, #6]
 8008ee8:	79fb      	ldrb	r3, [r7, #7]
 8008eea:	4618      	mov	r0, r3
 8008eec:	f7ff fea6 	bl	8008c3c <ssd1306_DrawPixel>
        error2 = error * 2;
 8008ef0:	69fb      	ldr	r3, [r7, #28]
 8008ef2:	005b      	lsls	r3, r3, #1
 8008ef4:	60bb      	str	r3, [r7, #8]
        if(error2 > -deltaY) {
 8008ef6:	697b      	ldr	r3, [r7, #20]
 8008ef8:	425b      	negs	r3, r3
 8008efa:	68ba      	ldr	r2, [r7, #8]
 8008efc:	429a      	cmp	r2, r3
 8008efe:	dd08      	ble.n	8008f12 <ssd1306_Line+0xa6>
            error -= deltaY;
 8008f00:	69fa      	ldr	r2, [r7, #28]
 8008f02:	697b      	ldr	r3, [r7, #20]
 8008f04:	1ad3      	subs	r3, r2, r3
 8008f06:	61fb      	str	r3, [r7, #28]
            x1 += signX;
 8008f08:	693b      	ldr	r3, [r7, #16]
 8008f0a:	b2da      	uxtb	r2, r3
 8008f0c:	79fb      	ldrb	r3, [r7, #7]
 8008f0e:	4413      	add	r3, r2
 8008f10:	71fb      	strb	r3, [r7, #7]
        }
        
        if(error2 < deltaX) {
 8008f12:	68ba      	ldr	r2, [r7, #8]
 8008f14:	69bb      	ldr	r3, [r7, #24]
 8008f16:	429a      	cmp	r2, r3
 8008f18:	da08      	bge.n	8008f2c <ssd1306_Line+0xc0>
            error += deltaX;
 8008f1a:	69fa      	ldr	r2, [r7, #28]
 8008f1c:	69bb      	ldr	r3, [r7, #24]
 8008f1e:	4413      	add	r3, r2
 8008f20:	61fb      	str	r3, [r7, #28]
            y1 += signY;
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	b2da      	uxtb	r2, r3
 8008f26:	79bb      	ldrb	r3, [r7, #6]
 8008f28:	4413      	add	r3, r2
 8008f2a:	71bb      	strb	r3, [r7, #6]
    while((x1 != x2) || (y1 != y2)) {
 8008f2c:	79fa      	ldrb	r2, [r7, #7]
 8008f2e:	797b      	ldrb	r3, [r7, #5]
 8008f30:	429a      	cmp	r2, r3
 8008f32:	d1d6      	bne.n	8008ee2 <ssd1306_Line+0x76>
 8008f34:	79ba      	ldrb	r2, [r7, #6]
 8008f36:	793b      	ldrb	r3, [r7, #4]
 8008f38:	429a      	cmp	r2, r3
 8008f3a:	d1d2      	bne.n	8008ee2 <ssd1306_Line+0x76>
        }
    }
    return;
 8008f3c:	bf00      	nop
}
 8008f3e:	3724      	adds	r7, #36	@ 0x24
 8008f40:	46bd      	mov	sp, r7
 8008f42:	bd90      	pop	{r4, r7, pc}

08008f44 <ssd1306_DrawBitmap>:
    }
    return;
}

/* Draw a bitmap */
void ssd1306_DrawBitmap(uint8_t x, uint8_t y, const unsigned char* bitmap, uint8_t w, uint8_t h, SSD1306_COLOR color) {
 8008f44:	b580      	push	{r7, lr}
 8008f46:	b084      	sub	sp, #16
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	603a      	str	r2, [r7, #0]
 8008f4c:	461a      	mov	r2, r3
 8008f4e:	4603      	mov	r3, r0
 8008f50:	71fb      	strb	r3, [r7, #7]
 8008f52:	460b      	mov	r3, r1
 8008f54:	71bb      	strb	r3, [r7, #6]
 8008f56:	4613      	mov	r3, r2
 8008f58:	717b      	strb	r3, [r7, #5]
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8008f5a:	797b      	ldrb	r3, [r7, #5]
 8008f5c:	3307      	adds	r3, #7
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	da00      	bge.n	8008f64 <ssd1306_DrawBitmap+0x20>
 8008f62:	3307      	adds	r3, #7
 8008f64:	10db      	asrs	r3, r3, #3
 8008f66:	817b      	strh	r3, [r7, #10]
    uint8_t byte = 0;
 8008f68:	2300      	movs	r3, #0
 8008f6a:	73fb      	strb	r3, [r7, #15]

    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8008f6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	db3e      	blt.n	8008ff2 <ssd1306_DrawBitmap+0xae>
 8008f74:	79bb      	ldrb	r3, [r7, #6]
 8008f76:	2b3f      	cmp	r3, #63	@ 0x3f
 8008f78:	d83b      	bhi.n	8008ff2 <ssd1306_DrawBitmap+0xae>
        return;
    }

    for (uint8_t j = 0; j < h; j++, y++) {
 8008f7a:	2300      	movs	r3, #0
 8008f7c:	73bb      	strb	r3, [r7, #14]
 8008f7e:	e033      	b.n	8008fe8 <ssd1306_DrawBitmap+0xa4>
        for (uint8_t i = 0; i < w; i++) {
 8008f80:	2300      	movs	r3, #0
 8008f82:	737b      	strb	r3, [r7, #13]
 8008f84:	e026      	b.n	8008fd4 <ssd1306_DrawBitmap+0x90>
            if (i & 7) {
 8008f86:	7b7b      	ldrb	r3, [r7, #13]
 8008f88:	f003 0307 	and.w	r3, r3, #7
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d003      	beq.n	8008f98 <ssd1306_DrawBitmap+0x54>
                byte <<= 1;
 8008f90:	7bfb      	ldrb	r3, [r7, #15]
 8008f92:	005b      	lsls	r3, r3, #1
 8008f94:	73fb      	strb	r3, [r7, #15]
 8008f96:	e00d      	b.n	8008fb4 <ssd1306_DrawBitmap+0x70>
            } else {
                byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8008f98:	7bbb      	ldrb	r3, [r7, #14]
 8008f9a:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8008f9e:	fb02 f303 	mul.w	r3, r2, r3
 8008fa2:	7b7a      	ldrb	r2, [r7, #13]
 8008fa4:	08d2      	lsrs	r2, r2, #3
 8008fa6:	b2d2      	uxtb	r2, r2
 8008fa8:	4413      	add	r3, r2
 8008faa:	461a      	mov	r2, r3
 8008fac:	683b      	ldr	r3, [r7, #0]
 8008fae:	4413      	add	r3, r2
 8008fb0:	781b      	ldrb	r3, [r3, #0]
 8008fb2:	73fb      	strb	r3, [r7, #15]
            }

            if (byte & 0x80) {
 8008fb4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	da08      	bge.n	8008fce <ssd1306_DrawBitmap+0x8a>
                ssd1306_DrawPixel(x + i, y, color);
 8008fbc:	79fa      	ldrb	r2, [r7, #7]
 8008fbe:	7b7b      	ldrb	r3, [r7, #13]
 8008fc0:	4413      	add	r3, r2
 8008fc2:	b2db      	uxtb	r3, r3
 8008fc4:	7f3a      	ldrb	r2, [r7, #28]
 8008fc6:	79b9      	ldrb	r1, [r7, #6]
 8008fc8:	4618      	mov	r0, r3
 8008fca:	f7ff fe37 	bl	8008c3c <ssd1306_DrawPixel>
        for (uint8_t i = 0; i < w; i++) {
 8008fce:	7b7b      	ldrb	r3, [r7, #13]
 8008fd0:	3301      	adds	r3, #1
 8008fd2:	737b      	strb	r3, [r7, #13]
 8008fd4:	7b7a      	ldrb	r2, [r7, #13]
 8008fd6:	797b      	ldrb	r3, [r7, #5]
 8008fd8:	429a      	cmp	r2, r3
 8008fda:	d3d4      	bcc.n	8008f86 <ssd1306_DrawBitmap+0x42>
    for (uint8_t j = 0; j < h; j++, y++) {
 8008fdc:	7bbb      	ldrb	r3, [r7, #14]
 8008fde:	3301      	adds	r3, #1
 8008fe0:	73bb      	strb	r3, [r7, #14]
 8008fe2:	79bb      	ldrb	r3, [r7, #6]
 8008fe4:	3301      	adds	r3, #1
 8008fe6:	71bb      	strb	r3, [r7, #6]
 8008fe8:	7bba      	ldrb	r2, [r7, #14]
 8008fea:	7e3b      	ldrb	r3, [r7, #24]
 8008fec:	429a      	cmp	r2, r3
 8008fee:	d3c7      	bcc.n	8008f80 <ssd1306_DrawBitmap+0x3c>
            }
        }
    }
    return;
 8008ff0:	e000      	b.n	8008ff4 <ssd1306_DrawBitmap+0xb0>
        return;
 8008ff2:	bf00      	nop
}
 8008ff4:	3710      	adds	r7, #16
 8008ff6:	46bd      	mov	sp, r7
 8008ff8:	bd80      	pop	{r7, pc}

08008ffa <ssd1306_SetContrast>:

void ssd1306_SetContrast(const uint8_t value) {
 8008ffa:	b580      	push	{r7, lr}
 8008ffc:	b084      	sub	sp, #16
 8008ffe:	af00      	add	r7, sp, #0
 8009000:	4603      	mov	r3, r0
 8009002:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8009004:	2381      	movs	r3, #129	@ 0x81
 8009006:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8009008:	7bfb      	ldrb	r3, [r7, #15]
 800900a:	4618      	mov	r0, r3
 800900c:	f7ff fd30 	bl	8008a70 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8009010:	79fb      	ldrb	r3, [r7, #7]
 8009012:	4618      	mov	r0, r3
 8009014:	f7ff fd2c 	bl	8008a70 <ssd1306_WriteCommand>
}
 8009018:	bf00      	nop
 800901a:	3710      	adds	r7, #16
 800901c:	46bd      	mov	sp, r7
 800901e:	bd80      	pop	{r7, pc}

08009020 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8009020:	b580      	push	{r7, lr}
 8009022:	b084      	sub	sp, #16
 8009024:	af00      	add	r7, sp, #0
 8009026:	4603      	mov	r3, r0
 8009028:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 800902a:	79fb      	ldrb	r3, [r7, #7]
 800902c:	2b00      	cmp	r3, #0
 800902e:	d005      	beq.n	800903c <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8009030:	23af      	movs	r3, #175	@ 0xaf
 8009032:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8009034:	4b08      	ldr	r3, [pc, #32]	@ (8009058 <ssd1306_SetDisplayOn+0x38>)
 8009036:	2201      	movs	r2, #1
 8009038:	715a      	strb	r2, [r3, #5]
 800903a:	e004      	b.n	8009046 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 800903c:	23ae      	movs	r3, #174	@ 0xae
 800903e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8009040:	4b05      	ldr	r3, [pc, #20]	@ (8009058 <ssd1306_SetDisplayOn+0x38>)
 8009042:	2200      	movs	r2, #0
 8009044:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8009046:	7bfb      	ldrb	r3, [r7, #15]
 8009048:	4618      	mov	r0, r3
 800904a:	f7ff fd11 	bl	8008a70 <ssd1306_WriteCommand>
}
 800904e:	bf00      	nop
 8009050:	3710      	adds	r7, #16
 8009052:	46bd      	mov	sp, r7
 8009054:	bd80      	pop	{r7, pc}
 8009056:	bf00      	nop
 8009058:	200008cc 	.word	0x200008cc

0800905c <__cvt>:
 800905c:	2b00      	cmp	r3, #0
 800905e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009062:	461d      	mov	r5, r3
 8009064:	bfbb      	ittet	lt
 8009066:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 800906a:	461d      	movlt	r5, r3
 800906c:	2300      	movge	r3, #0
 800906e:	232d      	movlt	r3, #45	@ 0x2d
 8009070:	b088      	sub	sp, #32
 8009072:	4614      	mov	r4, r2
 8009074:	bfb8      	it	lt
 8009076:	4614      	movlt	r4, r2
 8009078:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800907a:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 800907c:	7013      	strb	r3, [r2, #0]
 800907e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009080:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8009084:	f023 0820 	bic.w	r8, r3, #32
 8009088:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800908c:	d005      	beq.n	800909a <__cvt+0x3e>
 800908e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8009092:	d100      	bne.n	8009096 <__cvt+0x3a>
 8009094:	3601      	adds	r6, #1
 8009096:	2302      	movs	r3, #2
 8009098:	e000      	b.n	800909c <__cvt+0x40>
 800909a:	2303      	movs	r3, #3
 800909c:	aa07      	add	r2, sp, #28
 800909e:	9204      	str	r2, [sp, #16]
 80090a0:	aa06      	add	r2, sp, #24
 80090a2:	e9cd a202 	strd	sl, r2, [sp, #8]
 80090a6:	e9cd 3600 	strd	r3, r6, [sp]
 80090aa:	4622      	mov	r2, r4
 80090ac:	462b      	mov	r3, r5
 80090ae:	f001 f9af 	bl	800a410 <_dtoa_r>
 80090b2:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80090b6:	4607      	mov	r7, r0
 80090b8:	d119      	bne.n	80090ee <__cvt+0x92>
 80090ba:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80090bc:	07db      	lsls	r3, r3, #31
 80090be:	d50e      	bpl.n	80090de <__cvt+0x82>
 80090c0:	eb00 0906 	add.w	r9, r0, r6
 80090c4:	2200      	movs	r2, #0
 80090c6:	2300      	movs	r3, #0
 80090c8:	4620      	mov	r0, r4
 80090ca:	4629      	mov	r1, r5
 80090cc:	f7f7 fc6c 	bl	80009a8 <__aeabi_dcmpeq>
 80090d0:	b108      	cbz	r0, 80090d6 <__cvt+0x7a>
 80090d2:	f8cd 901c 	str.w	r9, [sp, #28]
 80090d6:	2230      	movs	r2, #48	@ 0x30
 80090d8:	9b07      	ldr	r3, [sp, #28]
 80090da:	454b      	cmp	r3, r9
 80090dc:	d31e      	bcc.n	800911c <__cvt+0xc0>
 80090de:	4638      	mov	r0, r7
 80090e0:	9b07      	ldr	r3, [sp, #28]
 80090e2:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80090e4:	1bdb      	subs	r3, r3, r7
 80090e6:	6013      	str	r3, [r2, #0]
 80090e8:	b008      	add	sp, #32
 80090ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090ee:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80090f2:	eb00 0906 	add.w	r9, r0, r6
 80090f6:	d1e5      	bne.n	80090c4 <__cvt+0x68>
 80090f8:	7803      	ldrb	r3, [r0, #0]
 80090fa:	2b30      	cmp	r3, #48	@ 0x30
 80090fc:	d10a      	bne.n	8009114 <__cvt+0xb8>
 80090fe:	2200      	movs	r2, #0
 8009100:	2300      	movs	r3, #0
 8009102:	4620      	mov	r0, r4
 8009104:	4629      	mov	r1, r5
 8009106:	f7f7 fc4f 	bl	80009a8 <__aeabi_dcmpeq>
 800910a:	b918      	cbnz	r0, 8009114 <__cvt+0xb8>
 800910c:	f1c6 0601 	rsb	r6, r6, #1
 8009110:	f8ca 6000 	str.w	r6, [sl]
 8009114:	f8da 3000 	ldr.w	r3, [sl]
 8009118:	4499      	add	r9, r3
 800911a:	e7d3      	b.n	80090c4 <__cvt+0x68>
 800911c:	1c59      	adds	r1, r3, #1
 800911e:	9107      	str	r1, [sp, #28]
 8009120:	701a      	strb	r2, [r3, #0]
 8009122:	e7d9      	b.n	80090d8 <__cvt+0x7c>

08009124 <__exponent>:
 8009124:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009126:	2900      	cmp	r1, #0
 8009128:	bfb6      	itet	lt
 800912a:	232d      	movlt	r3, #45	@ 0x2d
 800912c:	232b      	movge	r3, #43	@ 0x2b
 800912e:	4249      	neglt	r1, r1
 8009130:	2909      	cmp	r1, #9
 8009132:	7002      	strb	r2, [r0, #0]
 8009134:	7043      	strb	r3, [r0, #1]
 8009136:	dd29      	ble.n	800918c <__exponent+0x68>
 8009138:	f10d 0307 	add.w	r3, sp, #7
 800913c:	461d      	mov	r5, r3
 800913e:	270a      	movs	r7, #10
 8009140:	fbb1 f6f7 	udiv	r6, r1, r7
 8009144:	461a      	mov	r2, r3
 8009146:	fb07 1416 	mls	r4, r7, r6, r1
 800914a:	3430      	adds	r4, #48	@ 0x30
 800914c:	f802 4c01 	strb.w	r4, [r2, #-1]
 8009150:	460c      	mov	r4, r1
 8009152:	2c63      	cmp	r4, #99	@ 0x63
 8009154:	4631      	mov	r1, r6
 8009156:	f103 33ff 	add.w	r3, r3, #4294967295
 800915a:	dcf1      	bgt.n	8009140 <__exponent+0x1c>
 800915c:	3130      	adds	r1, #48	@ 0x30
 800915e:	1e94      	subs	r4, r2, #2
 8009160:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009164:	4623      	mov	r3, r4
 8009166:	1c41      	adds	r1, r0, #1
 8009168:	42ab      	cmp	r3, r5
 800916a:	d30a      	bcc.n	8009182 <__exponent+0x5e>
 800916c:	f10d 0309 	add.w	r3, sp, #9
 8009170:	1a9b      	subs	r3, r3, r2
 8009172:	42ac      	cmp	r4, r5
 8009174:	bf88      	it	hi
 8009176:	2300      	movhi	r3, #0
 8009178:	3302      	adds	r3, #2
 800917a:	4403      	add	r3, r0
 800917c:	1a18      	subs	r0, r3, r0
 800917e:	b003      	add	sp, #12
 8009180:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009182:	f813 6b01 	ldrb.w	r6, [r3], #1
 8009186:	f801 6f01 	strb.w	r6, [r1, #1]!
 800918a:	e7ed      	b.n	8009168 <__exponent+0x44>
 800918c:	2330      	movs	r3, #48	@ 0x30
 800918e:	3130      	adds	r1, #48	@ 0x30
 8009190:	7083      	strb	r3, [r0, #2]
 8009192:	70c1      	strb	r1, [r0, #3]
 8009194:	1d03      	adds	r3, r0, #4
 8009196:	e7f1      	b.n	800917c <__exponent+0x58>

08009198 <_printf_float>:
 8009198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800919c:	b091      	sub	sp, #68	@ 0x44
 800919e:	460c      	mov	r4, r1
 80091a0:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 80091a4:	4616      	mov	r6, r2
 80091a6:	461f      	mov	r7, r3
 80091a8:	4605      	mov	r5, r0
 80091aa:	f001 f80f 	bl	800a1cc <_localeconv_r>
 80091ae:	6803      	ldr	r3, [r0, #0]
 80091b0:	4618      	mov	r0, r3
 80091b2:	9308      	str	r3, [sp, #32]
 80091b4:	f7f6 ffcc 	bl	8000150 <strlen>
 80091b8:	2300      	movs	r3, #0
 80091ba:	930e      	str	r3, [sp, #56]	@ 0x38
 80091bc:	f8d8 3000 	ldr.w	r3, [r8]
 80091c0:	9009      	str	r0, [sp, #36]	@ 0x24
 80091c2:	3307      	adds	r3, #7
 80091c4:	f023 0307 	bic.w	r3, r3, #7
 80091c8:	f103 0208 	add.w	r2, r3, #8
 80091cc:	f894 a018 	ldrb.w	sl, [r4, #24]
 80091d0:	f8d4 b000 	ldr.w	fp, [r4]
 80091d4:	f8c8 2000 	str.w	r2, [r8]
 80091d8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80091dc:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80091e0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80091e2:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80091e6:	f04f 32ff 	mov.w	r2, #4294967295
 80091ea:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80091ee:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80091f2:	4b9c      	ldr	r3, [pc, #624]	@ (8009464 <_printf_float+0x2cc>)
 80091f4:	f7f7 fc0a 	bl	8000a0c <__aeabi_dcmpun>
 80091f8:	bb70      	cbnz	r0, 8009258 <_printf_float+0xc0>
 80091fa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80091fe:	f04f 32ff 	mov.w	r2, #4294967295
 8009202:	4b98      	ldr	r3, [pc, #608]	@ (8009464 <_printf_float+0x2cc>)
 8009204:	f7f7 fbe4 	bl	80009d0 <__aeabi_dcmple>
 8009208:	bb30      	cbnz	r0, 8009258 <_printf_float+0xc0>
 800920a:	2200      	movs	r2, #0
 800920c:	2300      	movs	r3, #0
 800920e:	4640      	mov	r0, r8
 8009210:	4649      	mov	r1, r9
 8009212:	f7f7 fbd3 	bl	80009bc <__aeabi_dcmplt>
 8009216:	b110      	cbz	r0, 800921e <_printf_float+0x86>
 8009218:	232d      	movs	r3, #45	@ 0x2d
 800921a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800921e:	4a92      	ldr	r2, [pc, #584]	@ (8009468 <_printf_float+0x2d0>)
 8009220:	4b92      	ldr	r3, [pc, #584]	@ (800946c <_printf_float+0x2d4>)
 8009222:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8009226:	bf94      	ite	ls
 8009228:	4690      	movls	r8, r2
 800922a:	4698      	movhi	r8, r3
 800922c:	2303      	movs	r3, #3
 800922e:	f04f 0900 	mov.w	r9, #0
 8009232:	6123      	str	r3, [r4, #16]
 8009234:	f02b 0304 	bic.w	r3, fp, #4
 8009238:	6023      	str	r3, [r4, #0]
 800923a:	4633      	mov	r3, r6
 800923c:	4621      	mov	r1, r4
 800923e:	4628      	mov	r0, r5
 8009240:	9700      	str	r7, [sp, #0]
 8009242:	aa0f      	add	r2, sp, #60	@ 0x3c
 8009244:	f000 f9d4 	bl	80095f0 <_printf_common>
 8009248:	3001      	adds	r0, #1
 800924a:	f040 8090 	bne.w	800936e <_printf_float+0x1d6>
 800924e:	f04f 30ff 	mov.w	r0, #4294967295
 8009252:	b011      	add	sp, #68	@ 0x44
 8009254:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009258:	4642      	mov	r2, r8
 800925a:	464b      	mov	r3, r9
 800925c:	4640      	mov	r0, r8
 800925e:	4649      	mov	r1, r9
 8009260:	f7f7 fbd4 	bl	8000a0c <__aeabi_dcmpun>
 8009264:	b148      	cbz	r0, 800927a <_printf_float+0xe2>
 8009266:	464b      	mov	r3, r9
 8009268:	2b00      	cmp	r3, #0
 800926a:	bfb8      	it	lt
 800926c:	232d      	movlt	r3, #45	@ 0x2d
 800926e:	4a80      	ldr	r2, [pc, #512]	@ (8009470 <_printf_float+0x2d8>)
 8009270:	bfb8      	it	lt
 8009272:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8009276:	4b7f      	ldr	r3, [pc, #508]	@ (8009474 <_printf_float+0x2dc>)
 8009278:	e7d3      	b.n	8009222 <_printf_float+0x8a>
 800927a:	6863      	ldr	r3, [r4, #4]
 800927c:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8009280:	1c5a      	adds	r2, r3, #1
 8009282:	d13f      	bne.n	8009304 <_printf_float+0x16c>
 8009284:	2306      	movs	r3, #6
 8009286:	6063      	str	r3, [r4, #4]
 8009288:	2200      	movs	r2, #0
 800928a:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 800928e:	6023      	str	r3, [r4, #0]
 8009290:	9206      	str	r2, [sp, #24]
 8009292:	aa0e      	add	r2, sp, #56	@ 0x38
 8009294:	e9cd a204 	strd	sl, r2, [sp, #16]
 8009298:	aa0d      	add	r2, sp, #52	@ 0x34
 800929a:	9203      	str	r2, [sp, #12]
 800929c:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 80092a0:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80092a4:	6863      	ldr	r3, [r4, #4]
 80092a6:	4642      	mov	r2, r8
 80092a8:	9300      	str	r3, [sp, #0]
 80092aa:	4628      	mov	r0, r5
 80092ac:	464b      	mov	r3, r9
 80092ae:	910a      	str	r1, [sp, #40]	@ 0x28
 80092b0:	f7ff fed4 	bl	800905c <__cvt>
 80092b4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80092b6:	4680      	mov	r8, r0
 80092b8:	2947      	cmp	r1, #71	@ 0x47
 80092ba:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80092bc:	d128      	bne.n	8009310 <_printf_float+0x178>
 80092be:	1cc8      	adds	r0, r1, #3
 80092c0:	db02      	blt.n	80092c8 <_printf_float+0x130>
 80092c2:	6863      	ldr	r3, [r4, #4]
 80092c4:	4299      	cmp	r1, r3
 80092c6:	dd40      	ble.n	800934a <_printf_float+0x1b2>
 80092c8:	f1aa 0a02 	sub.w	sl, sl, #2
 80092cc:	fa5f fa8a 	uxtb.w	sl, sl
 80092d0:	4652      	mov	r2, sl
 80092d2:	3901      	subs	r1, #1
 80092d4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80092d8:	910d      	str	r1, [sp, #52]	@ 0x34
 80092da:	f7ff ff23 	bl	8009124 <__exponent>
 80092de:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80092e0:	4681      	mov	r9, r0
 80092e2:	1813      	adds	r3, r2, r0
 80092e4:	2a01      	cmp	r2, #1
 80092e6:	6123      	str	r3, [r4, #16]
 80092e8:	dc02      	bgt.n	80092f0 <_printf_float+0x158>
 80092ea:	6822      	ldr	r2, [r4, #0]
 80092ec:	07d2      	lsls	r2, r2, #31
 80092ee:	d501      	bpl.n	80092f4 <_printf_float+0x15c>
 80092f0:	3301      	adds	r3, #1
 80092f2:	6123      	str	r3, [r4, #16]
 80092f4:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d09e      	beq.n	800923a <_printf_float+0xa2>
 80092fc:	232d      	movs	r3, #45	@ 0x2d
 80092fe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009302:	e79a      	b.n	800923a <_printf_float+0xa2>
 8009304:	2947      	cmp	r1, #71	@ 0x47
 8009306:	d1bf      	bne.n	8009288 <_printf_float+0xf0>
 8009308:	2b00      	cmp	r3, #0
 800930a:	d1bd      	bne.n	8009288 <_printf_float+0xf0>
 800930c:	2301      	movs	r3, #1
 800930e:	e7ba      	b.n	8009286 <_printf_float+0xee>
 8009310:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009314:	d9dc      	bls.n	80092d0 <_printf_float+0x138>
 8009316:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800931a:	d118      	bne.n	800934e <_printf_float+0x1b6>
 800931c:	2900      	cmp	r1, #0
 800931e:	6863      	ldr	r3, [r4, #4]
 8009320:	dd0b      	ble.n	800933a <_printf_float+0x1a2>
 8009322:	6121      	str	r1, [r4, #16]
 8009324:	b913      	cbnz	r3, 800932c <_printf_float+0x194>
 8009326:	6822      	ldr	r2, [r4, #0]
 8009328:	07d0      	lsls	r0, r2, #31
 800932a:	d502      	bpl.n	8009332 <_printf_float+0x19a>
 800932c:	3301      	adds	r3, #1
 800932e:	440b      	add	r3, r1
 8009330:	6123      	str	r3, [r4, #16]
 8009332:	f04f 0900 	mov.w	r9, #0
 8009336:	65a1      	str	r1, [r4, #88]	@ 0x58
 8009338:	e7dc      	b.n	80092f4 <_printf_float+0x15c>
 800933a:	b913      	cbnz	r3, 8009342 <_printf_float+0x1aa>
 800933c:	6822      	ldr	r2, [r4, #0]
 800933e:	07d2      	lsls	r2, r2, #31
 8009340:	d501      	bpl.n	8009346 <_printf_float+0x1ae>
 8009342:	3302      	adds	r3, #2
 8009344:	e7f4      	b.n	8009330 <_printf_float+0x198>
 8009346:	2301      	movs	r3, #1
 8009348:	e7f2      	b.n	8009330 <_printf_float+0x198>
 800934a:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800934e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009350:	4299      	cmp	r1, r3
 8009352:	db05      	blt.n	8009360 <_printf_float+0x1c8>
 8009354:	6823      	ldr	r3, [r4, #0]
 8009356:	6121      	str	r1, [r4, #16]
 8009358:	07d8      	lsls	r0, r3, #31
 800935a:	d5ea      	bpl.n	8009332 <_printf_float+0x19a>
 800935c:	1c4b      	adds	r3, r1, #1
 800935e:	e7e7      	b.n	8009330 <_printf_float+0x198>
 8009360:	2900      	cmp	r1, #0
 8009362:	bfcc      	ite	gt
 8009364:	2201      	movgt	r2, #1
 8009366:	f1c1 0202 	rsble	r2, r1, #2
 800936a:	4413      	add	r3, r2
 800936c:	e7e0      	b.n	8009330 <_printf_float+0x198>
 800936e:	6823      	ldr	r3, [r4, #0]
 8009370:	055a      	lsls	r2, r3, #21
 8009372:	d407      	bmi.n	8009384 <_printf_float+0x1ec>
 8009374:	6923      	ldr	r3, [r4, #16]
 8009376:	4642      	mov	r2, r8
 8009378:	4631      	mov	r1, r6
 800937a:	4628      	mov	r0, r5
 800937c:	47b8      	blx	r7
 800937e:	3001      	adds	r0, #1
 8009380:	d12b      	bne.n	80093da <_printf_float+0x242>
 8009382:	e764      	b.n	800924e <_printf_float+0xb6>
 8009384:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009388:	f240 80dc 	bls.w	8009544 <_printf_float+0x3ac>
 800938c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009390:	2200      	movs	r2, #0
 8009392:	2300      	movs	r3, #0
 8009394:	f7f7 fb08 	bl	80009a8 <__aeabi_dcmpeq>
 8009398:	2800      	cmp	r0, #0
 800939a:	d033      	beq.n	8009404 <_printf_float+0x26c>
 800939c:	2301      	movs	r3, #1
 800939e:	4631      	mov	r1, r6
 80093a0:	4628      	mov	r0, r5
 80093a2:	4a35      	ldr	r2, [pc, #212]	@ (8009478 <_printf_float+0x2e0>)
 80093a4:	47b8      	blx	r7
 80093a6:	3001      	adds	r0, #1
 80093a8:	f43f af51 	beq.w	800924e <_printf_float+0xb6>
 80093ac:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 80093b0:	4543      	cmp	r3, r8
 80093b2:	db02      	blt.n	80093ba <_printf_float+0x222>
 80093b4:	6823      	ldr	r3, [r4, #0]
 80093b6:	07d8      	lsls	r0, r3, #31
 80093b8:	d50f      	bpl.n	80093da <_printf_float+0x242>
 80093ba:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80093be:	4631      	mov	r1, r6
 80093c0:	4628      	mov	r0, r5
 80093c2:	47b8      	blx	r7
 80093c4:	3001      	adds	r0, #1
 80093c6:	f43f af42 	beq.w	800924e <_printf_float+0xb6>
 80093ca:	f04f 0900 	mov.w	r9, #0
 80093ce:	f108 38ff 	add.w	r8, r8, #4294967295
 80093d2:	f104 0a1a 	add.w	sl, r4, #26
 80093d6:	45c8      	cmp	r8, r9
 80093d8:	dc09      	bgt.n	80093ee <_printf_float+0x256>
 80093da:	6823      	ldr	r3, [r4, #0]
 80093dc:	079b      	lsls	r3, r3, #30
 80093de:	f100 8102 	bmi.w	80095e6 <_printf_float+0x44e>
 80093e2:	68e0      	ldr	r0, [r4, #12]
 80093e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80093e6:	4298      	cmp	r0, r3
 80093e8:	bfb8      	it	lt
 80093ea:	4618      	movlt	r0, r3
 80093ec:	e731      	b.n	8009252 <_printf_float+0xba>
 80093ee:	2301      	movs	r3, #1
 80093f0:	4652      	mov	r2, sl
 80093f2:	4631      	mov	r1, r6
 80093f4:	4628      	mov	r0, r5
 80093f6:	47b8      	blx	r7
 80093f8:	3001      	adds	r0, #1
 80093fa:	f43f af28 	beq.w	800924e <_printf_float+0xb6>
 80093fe:	f109 0901 	add.w	r9, r9, #1
 8009402:	e7e8      	b.n	80093d6 <_printf_float+0x23e>
 8009404:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009406:	2b00      	cmp	r3, #0
 8009408:	dc38      	bgt.n	800947c <_printf_float+0x2e4>
 800940a:	2301      	movs	r3, #1
 800940c:	4631      	mov	r1, r6
 800940e:	4628      	mov	r0, r5
 8009410:	4a19      	ldr	r2, [pc, #100]	@ (8009478 <_printf_float+0x2e0>)
 8009412:	47b8      	blx	r7
 8009414:	3001      	adds	r0, #1
 8009416:	f43f af1a 	beq.w	800924e <_printf_float+0xb6>
 800941a:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800941e:	ea59 0303 	orrs.w	r3, r9, r3
 8009422:	d102      	bne.n	800942a <_printf_float+0x292>
 8009424:	6823      	ldr	r3, [r4, #0]
 8009426:	07d9      	lsls	r1, r3, #31
 8009428:	d5d7      	bpl.n	80093da <_printf_float+0x242>
 800942a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800942e:	4631      	mov	r1, r6
 8009430:	4628      	mov	r0, r5
 8009432:	47b8      	blx	r7
 8009434:	3001      	adds	r0, #1
 8009436:	f43f af0a 	beq.w	800924e <_printf_float+0xb6>
 800943a:	f04f 0a00 	mov.w	sl, #0
 800943e:	f104 0b1a 	add.w	fp, r4, #26
 8009442:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009444:	425b      	negs	r3, r3
 8009446:	4553      	cmp	r3, sl
 8009448:	dc01      	bgt.n	800944e <_printf_float+0x2b6>
 800944a:	464b      	mov	r3, r9
 800944c:	e793      	b.n	8009376 <_printf_float+0x1de>
 800944e:	2301      	movs	r3, #1
 8009450:	465a      	mov	r2, fp
 8009452:	4631      	mov	r1, r6
 8009454:	4628      	mov	r0, r5
 8009456:	47b8      	blx	r7
 8009458:	3001      	adds	r0, #1
 800945a:	f43f aef8 	beq.w	800924e <_printf_float+0xb6>
 800945e:	f10a 0a01 	add.w	sl, sl, #1
 8009462:	e7ee      	b.n	8009442 <_printf_float+0x2aa>
 8009464:	7fefffff 	.word	0x7fefffff
 8009468:	0800ef14 	.word	0x0800ef14
 800946c:	0800ef18 	.word	0x0800ef18
 8009470:	0800ef1c 	.word	0x0800ef1c
 8009474:	0800ef20 	.word	0x0800ef20
 8009478:	0800ef24 	.word	0x0800ef24
 800947c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800947e:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8009482:	4553      	cmp	r3, sl
 8009484:	bfa8      	it	ge
 8009486:	4653      	movge	r3, sl
 8009488:	2b00      	cmp	r3, #0
 800948a:	4699      	mov	r9, r3
 800948c:	dc36      	bgt.n	80094fc <_printf_float+0x364>
 800948e:	f04f 0b00 	mov.w	fp, #0
 8009492:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009496:	f104 021a 	add.w	r2, r4, #26
 800949a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800949c:	930a      	str	r3, [sp, #40]	@ 0x28
 800949e:	eba3 0309 	sub.w	r3, r3, r9
 80094a2:	455b      	cmp	r3, fp
 80094a4:	dc31      	bgt.n	800950a <_printf_float+0x372>
 80094a6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80094a8:	459a      	cmp	sl, r3
 80094aa:	dc3a      	bgt.n	8009522 <_printf_float+0x38a>
 80094ac:	6823      	ldr	r3, [r4, #0]
 80094ae:	07da      	lsls	r2, r3, #31
 80094b0:	d437      	bmi.n	8009522 <_printf_float+0x38a>
 80094b2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80094b4:	ebaa 0903 	sub.w	r9, sl, r3
 80094b8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80094ba:	ebaa 0303 	sub.w	r3, sl, r3
 80094be:	4599      	cmp	r9, r3
 80094c0:	bfa8      	it	ge
 80094c2:	4699      	movge	r9, r3
 80094c4:	f1b9 0f00 	cmp.w	r9, #0
 80094c8:	dc33      	bgt.n	8009532 <_printf_float+0x39a>
 80094ca:	f04f 0800 	mov.w	r8, #0
 80094ce:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80094d2:	f104 0b1a 	add.w	fp, r4, #26
 80094d6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80094d8:	ebaa 0303 	sub.w	r3, sl, r3
 80094dc:	eba3 0309 	sub.w	r3, r3, r9
 80094e0:	4543      	cmp	r3, r8
 80094e2:	f77f af7a 	ble.w	80093da <_printf_float+0x242>
 80094e6:	2301      	movs	r3, #1
 80094e8:	465a      	mov	r2, fp
 80094ea:	4631      	mov	r1, r6
 80094ec:	4628      	mov	r0, r5
 80094ee:	47b8      	blx	r7
 80094f0:	3001      	adds	r0, #1
 80094f2:	f43f aeac 	beq.w	800924e <_printf_float+0xb6>
 80094f6:	f108 0801 	add.w	r8, r8, #1
 80094fa:	e7ec      	b.n	80094d6 <_printf_float+0x33e>
 80094fc:	4642      	mov	r2, r8
 80094fe:	4631      	mov	r1, r6
 8009500:	4628      	mov	r0, r5
 8009502:	47b8      	blx	r7
 8009504:	3001      	adds	r0, #1
 8009506:	d1c2      	bne.n	800948e <_printf_float+0x2f6>
 8009508:	e6a1      	b.n	800924e <_printf_float+0xb6>
 800950a:	2301      	movs	r3, #1
 800950c:	4631      	mov	r1, r6
 800950e:	4628      	mov	r0, r5
 8009510:	920a      	str	r2, [sp, #40]	@ 0x28
 8009512:	47b8      	blx	r7
 8009514:	3001      	adds	r0, #1
 8009516:	f43f ae9a 	beq.w	800924e <_printf_float+0xb6>
 800951a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800951c:	f10b 0b01 	add.w	fp, fp, #1
 8009520:	e7bb      	b.n	800949a <_printf_float+0x302>
 8009522:	4631      	mov	r1, r6
 8009524:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009528:	4628      	mov	r0, r5
 800952a:	47b8      	blx	r7
 800952c:	3001      	adds	r0, #1
 800952e:	d1c0      	bne.n	80094b2 <_printf_float+0x31a>
 8009530:	e68d      	b.n	800924e <_printf_float+0xb6>
 8009532:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009534:	464b      	mov	r3, r9
 8009536:	4631      	mov	r1, r6
 8009538:	4628      	mov	r0, r5
 800953a:	4442      	add	r2, r8
 800953c:	47b8      	blx	r7
 800953e:	3001      	adds	r0, #1
 8009540:	d1c3      	bne.n	80094ca <_printf_float+0x332>
 8009542:	e684      	b.n	800924e <_printf_float+0xb6>
 8009544:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8009548:	f1ba 0f01 	cmp.w	sl, #1
 800954c:	dc01      	bgt.n	8009552 <_printf_float+0x3ba>
 800954e:	07db      	lsls	r3, r3, #31
 8009550:	d536      	bpl.n	80095c0 <_printf_float+0x428>
 8009552:	2301      	movs	r3, #1
 8009554:	4642      	mov	r2, r8
 8009556:	4631      	mov	r1, r6
 8009558:	4628      	mov	r0, r5
 800955a:	47b8      	blx	r7
 800955c:	3001      	adds	r0, #1
 800955e:	f43f ae76 	beq.w	800924e <_printf_float+0xb6>
 8009562:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009566:	4631      	mov	r1, r6
 8009568:	4628      	mov	r0, r5
 800956a:	47b8      	blx	r7
 800956c:	3001      	adds	r0, #1
 800956e:	f43f ae6e 	beq.w	800924e <_printf_float+0xb6>
 8009572:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009576:	2200      	movs	r2, #0
 8009578:	2300      	movs	r3, #0
 800957a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800957e:	f7f7 fa13 	bl	80009a8 <__aeabi_dcmpeq>
 8009582:	b9c0      	cbnz	r0, 80095b6 <_printf_float+0x41e>
 8009584:	4653      	mov	r3, sl
 8009586:	f108 0201 	add.w	r2, r8, #1
 800958a:	4631      	mov	r1, r6
 800958c:	4628      	mov	r0, r5
 800958e:	47b8      	blx	r7
 8009590:	3001      	adds	r0, #1
 8009592:	d10c      	bne.n	80095ae <_printf_float+0x416>
 8009594:	e65b      	b.n	800924e <_printf_float+0xb6>
 8009596:	2301      	movs	r3, #1
 8009598:	465a      	mov	r2, fp
 800959a:	4631      	mov	r1, r6
 800959c:	4628      	mov	r0, r5
 800959e:	47b8      	blx	r7
 80095a0:	3001      	adds	r0, #1
 80095a2:	f43f ae54 	beq.w	800924e <_printf_float+0xb6>
 80095a6:	f108 0801 	add.w	r8, r8, #1
 80095aa:	45d0      	cmp	r8, sl
 80095ac:	dbf3      	blt.n	8009596 <_printf_float+0x3fe>
 80095ae:	464b      	mov	r3, r9
 80095b0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80095b4:	e6e0      	b.n	8009378 <_printf_float+0x1e0>
 80095b6:	f04f 0800 	mov.w	r8, #0
 80095ba:	f104 0b1a 	add.w	fp, r4, #26
 80095be:	e7f4      	b.n	80095aa <_printf_float+0x412>
 80095c0:	2301      	movs	r3, #1
 80095c2:	4642      	mov	r2, r8
 80095c4:	e7e1      	b.n	800958a <_printf_float+0x3f2>
 80095c6:	2301      	movs	r3, #1
 80095c8:	464a      	mov	r2, r9
 80095ca:	4631      	mov	r1, r6
 80095cc:	4628      	mov	r0, r5
 80095ce:	47b8      	blx	r7
 80095d0:	3001      	adds	r0, #1
 80095d2:	f43f ae3c 	beq.w	800924e <_printf_float+0xb6>
 80095d6:	f108 0801 	add.w	r8, r8, #1
 80095da:	68e3      	ldr	r3, [r4, #12]
 80095dc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80095de:	1a5b      	subs	r3, r3, r1
 80095e0:	4543      	cmp	r3, r8
 80095e2:	dcf0      	bgt.n	80095c6 <_printf_float+0x42e>
 80095e4:	e6fd      	b.n	80093e2 <_printf_float+0x24a>
 80095e6:	f04f 0800 	mov.w	r8, #0
 80095ea:	f104 0919 	add.w	r9, r4, #25
 80095ee:	e7f4      	b.n	80095da <_printf_float+0x442>

080095f0 <_printf_common>:
 80095f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80095f4:	4616      	mov	r6, r2
 80095f6:	4698      	mov	r8, r3
 80095f8:	688a      	ldr	r2, [r1, #8]
 80095fa:	690b      	ldr	r3, [r1, #16]
 80095fc:	4607      	mov	r7, r0
 80095fe:	4293      	cmp	r3, r2
 8009600:	bfb8      	it	lt
 8009602:	4613      	movlt	r3, r2
 8009604:	6033      	str	r3, [r6, #0]
 8009606:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800960a:	460c      	mov	r4, r1
 800960c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009610:	b10a      	cbz	r2, 8009616 <_printf_common+0x26>
 8009612:	3301      	adds	r3, #1
 8009614:	6033      	str	r3, [r6, #0]
 8009616:	6823      	ldr	r3, [r4, #0]
 8009618:	0699      	lsls	r1, r3, #26
 800961a:	bf42      	ittt	mi
 800961c:	6833      	ldrmi	r3, [r6, #0]
 800961e:	3302      	addmi	r3, #2
 8009620:	6033      	strmi	r3, [r6, #0]
 8009622:	6825      	ldr	r5, [r4, #0]
 8009624:	f015 0506 	ands.w	r5, r5, #6
 8009628:	d106      	bne.n	8009638 <_printf_common+0x48>
 800962a:	f104 0a19 	add.w	sl, r4, #25
 800962e:	68e3      	ldr	r3, [r4, #12]
 8009630:	6832      	ldr	r2, [r6, #0]
 8009632:	1a9b      	subs	r3, r3, r2
 8009634:	42ab      	cmp	r3, r5
 8009636:	dc2b      	bgt.n	8009690 <_printf_common+0xa0>
 8009638:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800963c:	6822      	ldr	r2, [r4, #0]
 800963e:	3b00      	subs	r3, #0
 8009640:	bf18      	it	ne
 8009642:	2301      	movne	r3, #1
 8009644:	0692      	lsls	r2, r2, #26
 8009646:	d430      	bmi.n	80096aa <_printf_common+0xba>
 8009648:	4641      	mov	r1, r8
 800964a:	4638      	mov	r0, r7
 800964c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009650:	47c8      	blx	r9
 8009652:	3001      	adds	r0, #1
 8009654:	d023      	beq.n	800969e <_printf_common+0xae>
 8009656:	6823      	ldr	r3, [r4, #0]
 8009658:	6922      	ldr	r2, [r4, #16]
 800965a:	f003 0306 	and.w	r3, r3, #6
 800965e:	2b04      	cmp	r3, #4
 8009660:	bf14      	ite	ne
 8009662:	2500      	movne	r5, #0
 8009664:	6833      	ldreq	r3, [r6, #0]
 8009666:	f04f 0600 	mov.w	r6, #0
 800966a:	bf08      	it	eq
 800966c:	68e5      	ldreq	r5, [r4, #12]
 800966e:	f104 041a 	add.w	r4, r4, #26
 8009672:	bf08      	it	eq
 8009674:	1aed      	subeq	r5, r5, r3
 8009676:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800967a:	bf08      	it	eq
 800967c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009680:	4293      	cmp	r3, r2
 8009682:	bfc4      	itt	gt
 8009684:	1a9b      	subgt	r3, r3, r2
 8009686:	18ed      	addgt	r5, r5, r3
 8009688:	42b5      	cmp	r5, r6
 800968a:	d11a      	bne.n	80096c2 <_printf_common+0xd2>
 800968c:	2000      	movs	r0, #0
 800968e:	e008      	b.n	80096a2 <_printf_common+0xb2>
 8009690:	2301      	movs	r3, #1
 8009692:	4652      	mov	r2, sl
 8009694:	4641      	mov	r1, r8
 8009696:	4638      	mov	r0, r7
 8009698:	47c8      	blx	r9
 800969a:	3001      	adds	r0, #1
 800969c:	d103      	bne.n	80096a6 <_printf_common+0xb6>
 800969e:	f04f 30ff 	mov.w	r0, #4294967295
 80096a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096a6:	3501      	adds	r5, #1
 80096a8:	e7c1      	b.n	800962e <_printf_common+0x3e>
 80096aa:	2030      	movs	r0, #48	@ 0x30
 80096ac:	18e1      	adds	r1, r4, r3
 80096ae:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80096b2:	1c5a      	adds	r2, r3, #1
 80096b4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80096b8:	4422      	add	r2, r4
 80096ba:	3302      	adds	r3, #2
 80096bc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80096c0:	e7c2      	b.n	8009648 <_printf_common+0x58>
 80096c2:	2301      	movs	r3, #1
 80096c4:	4622      	mov	r2, r4
 80096c6:	4641      	mov	r1, r8
 80096c8:	4638      	mov	r0, r7
 80096ca:	47c8      	blx	r9
 80096cc:	3001      	adds	r0, #1
 80096ce:	d0e6      	beq.n	800969e <_printf_common+0xae>
 80096d0:	3601      	adds	r6, #1
 80096d2:	e7d9      	b.n	8009688 <_printf_common+0x98>

080096d4 <_printf_i>:
 80096d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80096d8:	7e0f      	ldrb	r7, [r1, #24]
 80096da:	4691      	mov	r9, r2
 80096dc:	2f78      	cmp	r7, #120	@ 0x78
 80096de:	4680      	mov	r8, r0
 80096e0:	460c      	mov	r4, r1
 80096e2:	469a      	mov	sl, r3
 80096e4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80096e6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80096ea:	d807      	bhi.n	80096fc <_printf_i+0x28>
 80096ec:	2f62      	cmp	r7, #98	@ 0x62
 80096ee:	d80a      	bhi.n	8009706 <_printf_i+0x32>
 80096f0:	2f00      	cmp	r7, #0
 80096f2:	f000 80d3 	beq.w	800989c <_printf_i+0x1c8>
 80096f6:	2f58      	cmp	r7, #88	@ 0x58
 80096f8:	f000 80ba 	beq.w	8009870 <_printf_i+0x19c>
 80096fc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009700:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009704:	e03a      	b.n	800977c <_printf_i+0xa8>
 8009706:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800970a:	2b15      	cmp	r3, #21
 800970c:	d8f6      	bhi.n	80096fc <_printf_i+0x28>
 800970e:	a101      	add	r1, pc, #4	@ (adr r1, 8009714 <_printf_i+0x40>)
 8009710:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009714:	0800976d 	.word	0x0800976d
 8009718:	08009781 	.word	0x08009781
 800971c:	080096fd 	.word	0x080096fd
 8009720:	080096fd 	.word	0x080096fd
 8009724:	080096fd 	.word	0x080096fd
 8009728:	080096fd 	.word	0x080096fd
 800972c:	08009781 	.word	0x08009781
 8009730:	080096fd 	.word	0x080096fd
 8009734:	080096fd 	.word	0x080096fd
 8009738:	080096fd 	.word	0x080096fd
 800973c:	080096fd 	.word	0x080096fd
 8009740:	08009883 	.word	0x08009883
 8009744:	080097ab 	.word	0x080097ab
 8009748:	0800983d 	.word	0x0800983d
 800974c:	080096fd 	.word	0x080096fd
 8009750:	080096fd 	.word	0x080096fd
 8009754:	080098a5 	.word	0x080098a5
 8009758:	080096fd 	.word	0x080096fd
 800975c:	080097ab 	.word	0x080097ab
 8009760:	080096fd 	.word	0x080096fd
 8009764:	080096fd 	.word	0x080096fd
 8009768:	08009845 	.word	0x08009845
 800976c:	6833      	ldr	r3, [r6, #0]
 800976e:	1d1a      	adds	r2, r3, #4
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	6032      	str	r2, [r6, #0]
 8009774:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009778:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800977c:	2301      	movs	r3, #1
 800977e:	e09e      	b.n	80098be <_printf_i+0x1ea>
 8009780:	6833      	ldr	r3, [r6, #0]
 8009782:	6820      	ldr	r0, [r4, #0]
 8009784:	1d19      	adds	r1, r3, #4
 8009786:	6031      	str	r1, [r6, #0]
 8009788:	0606      	lsls	r6, r0, #24
 800978a:	d501      	bpl.n	8009790 <_printf_i+0xbc>
 800978c:	681d      	ldr	r5, [r3, #0]
 800978e:	e003      	b.n	8009798 <_printf_i+0xc4>
 8009790:	0645      	lsls	r5, r0, #25
 8009792:	d5fb      	bpl.n	800978c <_printf_i+0xb8>
 8009794:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009798:	2d00      	cmp	r5, #0
 800979a:	da03      	bge.n	80097a4 <_printf_i+0xd0>
 800979c:	232d      	movs	r3, #45	@ 0x2d
 800979e:	426d      	negs	r5, r5
 80097a0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80097a4:	230a      	movs	r3, #10
 80097a6:	4859      	ldr	r0, [pc, #356]	@ (800990c <_printf_i+0x238>)
 80097a8:	e011      	b.n	80097ce <_printf_i+0xfa>
 80097aa:	6821      	ldr	r1, [r4, #0]
 80097ac:	6833      	ldr	r3, [r6, #0]
 80097ae:	0608      	lsls	r0, r1, #24
 80097b0:	f853 5b04 	ldr.w	r5, [r3], #4
 80097b4:	d402      	bmi.n	80097bc <_printf_i+0xe8>
 80097b6:	0649      	lsls	r1, r1, #25
 80097b8:	bf48      	it	mi
 80097ba:	b2ad      	uxthmi	r5, r5
 80097bc:	2f6f      	cmp	r7, #111	@ 0x6f
 80097be:	6033      	str	r3, [r6, #0]
 80097c0:	bf14      	ite	ne
 80097c2:	230a      	movne	r3, #10
 80097c4:	2308      	moveq	r3, #8
 80097c6:	4851      	ldr	r0, [pc, #324]	@ (800990c <_printf_i+0x238>)
 80097c8:	2100      	movs	r1, #0
 80097ca:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80097ce:	6866      	ldr	r6, [r4, #4]
 80097d0:	2e00      	cmp	r6, #0
 80097d2:	bfa8      	it	ge
 80097d4:	6821      	ldrge	r1, [r4, #0]
 80097d6:	60a6      	str	r6, [r4, #8]
 80097d8:	bfa4      	itt	ge
 80097da:	f021 0104 	bicge.w	r1, r1, #4
 80097de:	6021      	strge	r1, [r4, #0]
 80097e0:	b90d      	cbnz	r5, 80097e6 <_printf_i+0x112>
 80097e2:	2e00      	cmp	r6, #0
 80097e4:	d04b      	beq.n	800987e <_printf_i+0x1aa>
 80097e6:	4616      	mov	r6, r2
 80097e8:	fbb5 f1f3 	udiv	r1, r5, r3
 80097ec:	fb03 5711 	mls	r7, r3, r1, r5
 80097f0:	5dc7      	ldrb	r7, [r0, r7]
 80097f2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80097f6:	462f      	mov	r7, r5
 80097f8:	42bb      	cmp	r3, r7
 80097fa:	460d      	mov	r5, r1
 80097fc:	d9f4      	bls.n	80097e8 <_printf_i+0x114>
 80097fe:	2b08      	cmp	r3, #8
 8009800:	d10b      	bne.n	800981a <_printf_i+0x146>
 8009802:	6823      	ldr	r3, [r4, #0]
 8009804:	07df      	lsls	r7, r3, #31
 8009806:	d508      	bpl.n	800981a <_printf_i+0x146>
 8009808:	6923      	ldr	r3, [r4, #16]
 800980a:	6861      	ldr	r1, [r4, #4]
 800980c:	4299      	cmp	r1, r3
 800980e:	bfde      	ittt	le
 8009810:	2330      	movle	r3, #48	@ 0x30
 8009812:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009816:	f106 36ff 	addle.w	r6, r6, #4294967295
 800981a:	1b92      	subs	r2, r2, r6
 800981c:	6122      	str	r2, [r4, #16]
 800981e:	464b      	mov	r3, r9
 8009820:	4621      	mov	r1, r4
 8009822:	4640      	mov	r0, r8
 8009824:	f8cd a000 	str.w	sl, [sp]
 8009828:	aa03      	add	r2, sp, #12
 800982a:	f7ff fee1 	bl	80095f0 <_printf_common>
 800982e:	3001      	adds	r0, #1
 8009830:	d14a      	bne.n	80098c8 <_printf_i+0x1f4>
 8009832:	f04f 30ff 	mov.w	r0, #4294967295
 8009836:	b004      	add	sp, #16
 8009838:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800983c:	6823      	ldr	r3, [r4, #0]
 800983e:	f043 0320 	orr.w	r3, r3, #32
 8009842:	6023      	str	r3, [r4, #0]
 8009844:	2778      	movs	r7, #120	@ 0x78
 8009846:	4832      	ldr	r0, [pc, #200]	@ (8009910 <_printf_i+0x23c>)
 8009848:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800984c:	6823      	ldr	r3, [r4, #0]
 800984e:	6831      	ldr	r1, [r6, #0]
 8009850:	061f      	lsls	r7, r3, #24
 8009852:	f851 5b04 	ldr.w	r5, [r1], #4
 8009856:	d402      	bmi.n	800985e <_printf_i+0x18a>
 8009858:	065f      	lsls	r7, r3, #25
 800985a:	bf48      	it	mi
 800985c:	b2ad      	uxthmi	r5, r5
 800985e:	6031      	str	r1, [r6, #0]
 8009860:	07d9      	lsls	r1, r3, #31
 8009862:	bf44      	itt	mi
 8009864:	f043 0320 	orrmi.w	r3, r3, #32
 8009868:	6023      	strmi	r3, [r4, #0]
 800986a:	b11d      	cbz	r5, 8009874 <_printf_i+0x1a0>
 800986c:	2310      	movs	r3, #16
 800986e:	e7ab      	b.n	80097c8 <_printf_i+0xf4>
 8009870:	4826      	ldr	r0, [pc, #152]	@ (800990c <_printf_i+0x238>)
 8009872:	e7e9      	b.n	8009848 <_printf_i+0x174>
 8009874:	6823      	ldr	r3, [r4, #0]
 8009876:	f023 0320 	bic.w	r3, r3, #32
 800987a:	6023      	str	r3, [r4, #0]
 800987c:	e7f6      	b.n	800986c <_printf_i+0x198>
 800987e:	4616      	mov	r6, r2
 8009880:	e7bd      	b.n	80097fe <_printf_i+0x12a>
 8009882:	6833      	ldr	r3, [r6, #0]
 8009884:	6825      	ldr	r5, [r4, #0]
 8009886:	1d18      	adds	r0, r3, #4
 8009888:	6961      	ldr	r1, [r4, #20]
 800988a:	6030      	str	r0, [r6, #0]
 800988c:	062e      	lsls	r6, r5, #24
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	d501      	bpl.n	8009896 <_printf_i+0x1c2>
 8009892:	6019      	str	r1, [r3, #0]
 8009894:	e002      	b.n	800989c <_printf_i+0x1c8>
 8009896:	0668      	lsls	r0, r5, #25
 8009898:	d5fb      	bpl.n	8009892 <_printf_i+0x1be>
 800989a:	8019      	strh	r1, [r3, #0]
 800989c:	2300      	movs	r3, #0
 800989e:	4616      	mov	r6, r2
 80098a0:	6123      	str	r3, [r4, #16]
 80098a2:	e7bc      	b.n	800981e <_printf_i+0x14a>
 80098a4:	6833      	ldr	r3, [r6, #0]
 80098a6:	2100      	movs	r1, #0
 80098a8:	1d1a      	adds	r2, r3, #4
 80098aa:	6032      	str	r2, [r6, #0]
 80098ac:	681e      	ldr	r6, [r3, #0]
 80098ae:	6862      	ldr	r2, [r4, #4]
 80098b0:	4630      	mov	r0, r6
 80098b2:	f000 fd02 	bl	800a2ba <memchr>
 80098b6:	b108      	cbz	r0, 80098bc <_printf_i+0x1e8>
 80098b8:	1b80      	subs	r0, r0, r6
 80098ba:	6060      	str	r0, [r4, #4]
 80098bc:	6863      	ldr	r3, [r4, #4]
 80098be:	6123      	str	r3, [r4, #16]
 80098c0:	2300      	movs	r3, #0
 80098c2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80098c6:	e7aa      	b.n	800981e <_printf_i+0x14a>
 80098c8:	4632      	mov	r2, r6
 80098ca:	4649      	mov	r1, r9
 80098cc:	4640      	mov	r0, r8
 80098ce:	6923      	ldr	r3, [r4, #16]
 80098d0:	47d0      	blx	sl
 80098d2:	3001      	adds	r0, #1
 80098d4:	d0ad      	beq.n	8009832 <_printf_i+0x15e>
 80098d6:	6823      	ldr	r3, [r4, #0]
 80098d8:	079b      	lsls	r3, r3, #30
 80098da:	d413      	bmi.n	8009904 <_printf_i+0x230>
 80098dc:	68e0      	ldr	r0, [r4, #12]
 80098de:	9b03      	ldr	r3, [sp, #12]
 80098e0:	4298      	cmp	r0, r3
 80098e2:	bfb8      	it	lt
 80098e4:	4618      	movlt	r0, r3
 80098e6:	e7a6      	b.n	8009836 <_printf_i+0x162>
 80098e8:	2301      	movs	r3, #1
 80098ea:	4632      	mov	r2, r6
 80098ec:	4649      	mov	r1, r9
 80098ee:	4640      	mov	r0, r8
 80098f0:	47d0      	blx	sl
 80098f2:	3001      	adds	r0, #1
 80098f4:	d09d      	beq.n	8009832 <_printf_i+0x15e>
 80098f6:	3501      	adds	r5, #1
 80098f8:	68e3      	ldr	r3, [r4, #12]
 80098fa:	9903      	ldr	r1, [sp, #12]
 80098fc:	1a5b      	subs	r3, r3, r1
 80098fe:	42ab      	cmp	r3, r5
 8009900:	dcf2      	bgt.n	80098e8 <_printf_i+0x214>
 8009902:	e7eb      	b.n	80098dc <_printf_i+0x208>
 8009904:	2500      	movs	r5, #0
 8009906:	f104 0619 	add.w	r6, r4, #25
 800990a:	e7f5      	b.n	80098f8 <_printf_i+0x224>
 800990c:	0800ef26 	.word	0x0800ef26
 8009910:	0800ef37 	.word	0x0800ef37

08009914 <_scanf_float>:
 8009914:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009918:	b087      	sub	sp, #28
 800991a:	9303      	str	r3, [sp, #12]
 800991c:	688b      	ldr	r3, [r1, #8]
 800991e:	4617      	mov	r7, r2
 8009920:	1e5a      	subs	r2, r3, #1
 8009922:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8009926:	bf82      	ittt	hi
 8009928:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800992c:	eb03 0b05 	addhi.w	fp, r3, r5
 8009930:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8009934:	460a      	mov	r2, r1
 8009936:	f04f 0500 	mov.w	r5, #0
 800993a:	bf88      	it	hi
 800993c:	608b      	strhi	r3, [r1, #8]
 800993e:	680b      	ldr	r3, [r1, #0]
 8009940:	4680      	mov	r8, r0
 8009942:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8009946:	f842 3b1c 	str.w	r3, [r2], #28
 800994a:	460c      	mov	r4, r1
 800994c:	bf98      	it	ls
 800994e:	f04f 0b00 	movls.w	fp, #0
 8009952:	4616      	mov	r6, r2
 8009954:	46aa      	mov	sl, r5
 8009956:	46a9      	mov	r9, r5
 8009958:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800995c:	9201      	str	r2, [sp, #4]
 800995e:	9502      	str	r5, [sp, #8]
 8009960:	68a2      	ldr	r2, [r4, #8]
 8009962:	b152      	cbz	r2, 800997a <_scanf_float+0x66>
 8009964:	683b      	ldr	r3, [r7, #0]
 8009966:	781b      	ldrb	r3, [r3, #0]
 8009968:	2b4e      	cmp	r3, #78	@ 0x4e
 800996a:	d865      	bhi.n	8009a38 <_scanf_float+0x124>
 800996c:	2b40      	cmp	r3, #64	@ 0x40
 800996e:	d83d      	bhi.n	80099ec <_scanf_float+0xd8>
 8009970:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8009974:	b2c8      	uxtb	r0, r1
 8009976:	280e      	cmp	r0, #14
 8009978:	d93b      	bls.n	80099f2 <_scanf_float+0xde>
 800997a:	f1b9 0f00 	cmp.w	r9, #0
 800997e:	d003      	beq.n	8009988 <_scanf_float+0x74>
 8009980:	6823      	ldr	r3, [r4, #0]
 8009982:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009986:	6023      	str	r3, [r4, #0]
 8009988:	f10a 3aff 	add.w	sl, sl, #4294967295
 800998c:	f1ba 0f01 	cmp.w	sl, #1
 8009990:	f200 8118 	bhi.w	8009bc4 <_scanf_float+0x2b0>
 8009994:	9b01      	ldr	r3, [sp, #4]
 8009996:	429e      	cmp	r6, r3
 8009998:	f200 8109 	bhi.w	8009bae <_scanf_float+0x29a>
 800999c:	2001      	movs	r0, #1
 800999e:	b007      	add	sp, #28
 80099a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099a4:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 80099a8:	2a0d      	cmp	r2, #13
 80099aa:	d8e6      	bhi.n	800997a <_scanf_float+0x66>
 80099ac:	a101      	add	r1, pc, #4	@ (adr r1, 80099b4 <_scanf_float+0xa0>)
 80099ae:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80099b2:	bf00      	nop
 80099b4:	08009afb 	.word	0x08009afb
 80099b8:	0800997b 	.word	0x0800997b
 80099bc:	0800997b 	.word	0x0800997b
 80099c0:	0800997b 	.word	0x0800997b
 80099c4:	08009b5b 	.word	0x08009b5b
 80099c8:	08009b33 	.word	0x08009b33
 80099cc:	0800997b 	.word	0x0800997b
 80099d0:	0800997b 	.word	0x0800997b
 80099d4:	08009b09 	.word	0x08009b09
 80099d8:	0800997b 	.word	0x0800997b
 80099dc:	0800997b 	.word	0x0800997b
 80099e0:	0800997b 	.word	0x0800997b
 80099e4:	0800997b 	.word	0x0800997b
 80099e8:	08009ac1 	.word	0x08009ac1
 80099ec:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80099f0:	e7da      	b.n	80099a8 <_scanf_float+0x94>
 80099f2:	290e      	cmp	r1, #14
 80099f4:	d8c1      	bhi.n	800997a <_scanf_float+0x66>
 80099f6:	a001      	add	r0, pc, #4	@ (adr r0, 80099fc <_scanf_float+0xe8>)
 80099f8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80099fc:	08009ab1 	.word	0x08009ab1
 8009a00:	0800997b 	.word	0x0800997b
 8009a04:	08009ab1 	.word	0x08009ab1
 8009a08:	08009b47 	.word	0x08009b47
 8009a0c:	0800997b 	.word	0x0800997b
 8009a10:	08009a59 	.word	0x08009a59
 8009a14:	08009a97 	.word	0x08009a97
 8009a18:	08009a97 	.word	0x08009a97
 8009a1c:	08009a97 	.word	0x08009a97
 8009a20:	08009a97 	.word	0x08009a97
 8009a24:	08009a97 	.word	0x08009a97
 8009a28:	08009a97 	.word	0x08009a97
 8009a2c:	08009a97 	.word	0x08009a97
 8009a30:	08009a97 	.word	0x08009a97
 8009a34:	08009a97 	.word	0x08009a97
 8009a38:	2b6e      	cmp	r3, #110	@ 0x6e
 8009a3a:	d809      	bhi.n	8009a50 <_scanf_float+0x13c>
 8009a3c:	2b60      	cmp	r3, #96	@ 0x60
 8009a3e:	d8b1      	bhi.n	80099a4 <_scanf_float+0x90>
 8009a40:	2b54      	cmp	r3, #84	@ 0x54
 8009a42:	d07b      	beq.n	8009b3c <_scanf_float+0x228>
 8009a44:	2b59      	cmp	r3, #89	@ 0x59
 8009a46:	d198      	bne.n	800997a <_scanf_float+0x66>
 8009a48:	2d07      	cmp	r5, #7
 8009a4a:	d196      	bne.n	800997a <_scanf_float+0x66>
 8009a4c:	2508      	movs	r5, #8
 8009a4e:	e02c      	b.n	8009aaa <_scanf_float+0x196>
 8009a50:	2b74      	cmp	r3, #116	@ 0x74
 8009a52:	d073      	beq.n	8009b3c <_scanf_float+0x228>
 8009a54:	2b79      	cmp	r3, #121	@ 0x79
 8009a56:	e7f6      	b.n	8009a46 <_scanf_float+0x132>
 8009a58:	6821      	ldr	r1, [r4, #0]
 8009a5a:	05c8      	lsls	r0, r1, #23
 8009a5c:	d51b      	bpl.n	8009a96 <_scanf_float+0x182>
 8009a5e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8009a62:	6021      	str	r1, [r4, #0]
 8009a64:	f109 0901 	add.w	r9, r9, #1
 8009a68:	f1bb 0f00 	cmp.w	fp, #0
 8009a6c:	d003      	beq.n	8009a76 <_scanf_float+0x162>
 8009a6e:	3201      	adds	r2, #1
 8009a70:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009a74:	60a2      	str	r2, [r4, #8]
 8009a76:	68a3      	ldr	r3, [r4, #8]
 8009a78:	3b01      	subs	r3, #1
 8009a7a:	60a3      	str	r3, [r4, #8]
 8009a7c:	6923      	ldr	r3, [r4, #16]
 8009a7e:	3301      	adds	r3, #1
 8009a80:	6123      	str	r3, [r4, #16]
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	3b01      	subs	r3, #1
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	607b      	str	r3, [r7, #4]
 8009a8a:	f340 8087 	ble.w	8009b9c <_scanf_float+0x288>
 8009a8e:	683b      	ldr	r3, [r7, #0]
 8009a90:	3301      	adds	r3, #1
 8009a92:	603b      	str	r3, [r7, #0]
 8009a94:	e764      	b.n	8009960 <_scanf_float+0x4c>
 8009a96:	eb1a 0105 	adds.w	r1, sl, r5
 8009a9a:	f47f af6e 	bne.w	800997a <_scanf_float+0x66>
 8009a9e:	460d      	mov	r5, r1
 8009aa0:	468a      	mov	sl, r1
 8009aa2:	6822      	ldr	r2, [r4, #0]
 8009aa4:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8009aa8:	6022      	str	r2, [r4, #0]
 8009aaa:	f806 3b01 	strb.w	r3, [r6], #1
 8009aae:	e7e2      	b.n	8009a76 <_scanf_float+0x162>
 8009ab0:	6822      	ldr	r2, [r4, #0]
 8009ab2:	0610      	lsls	r0, r2, #24
 8009ab4:	f57f af61 	bpl.w	800997a <_scanf_float+0x66>
 8009ab8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009abc:	6022      	str	r2, [r4, #0]
 8009abe:	e7f4      	b.n	8009aaa <_scanf_float+0x196>
 8009ac0:	f1ba 0f00 	cmp.w	sl, #0
 8009ac4:	d10e      	bne.n	8009ae4 <_scanf_float+0x1d0>
 8009ac6:	f1b9 0f00 	cmp.w	r9, #0
 8009aca:	d10e      	bne.n	8009aea <_scanf_float+0x1d6>
 8009acc:	6822      	ldr	r2, [r4, #0]
 8009ace:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8009ad2:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8009ad6:	d108      	bne.n	8009aea <_scanf_float+0x1d6>
 8009ad8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8009adc:	f04f 0a01 	mov.w	sl, #1
 8009ae0:	6022      	str	r2, [r4, #0]
 8009ae2:	e7e2      	b.n	8009aaa <_scanf_float+0x196>
 8009ae4:	f1ba 0f02 	cmp.w	sl, #2
 8009ae8:	d055      	beq.n	8009b96 <_scanf_float+0x282>
 8009aea:	2d01      	cmp	r5, #1
 8009aec:	d002      	beq.n	8009af4 <_scanf_float+0x1e0>
 8009aee:	2d04      	cmp	r5, #4
 8009af0:	f47f af43 	bne.w	800997a <_scanf_float+0x66>
 8009af4:	3501      	adds	r5, #1
 8009af6:	b2ed      	uxtb	r5, r5
 8009af8:	e7d7      	b.n	8009aaa <_scanf_float+0x196>
 8009afa:	f1ba 0f01 	cmp.w	sl, #1
 8009afe:	f47f af3c 	bne.w	800997a <_scanf_float+0x66>
 8009b02:	f04f 0a02 	mov.w	sl, #2
 8009b06:	e7d0      	b.n	8009aaa <_scanf_float+0x196>
 8009b08:	b97d      	cbnz	r5, 8009b2a <_scanf_float+0x216>
 8009b0a:	f1b9 0f00 	cmp.w	r9, #0
 8009b0e:	f47f af37 	bne.w	8009980 <_scanf_float+0x6c>
 8009b12:	6822      	ldr	r2, [r4, #0]
 8009b14:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8009b18:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8009b1c:	f040 8103 	bne.w	8009d26 <_scanf_float+0x412>
 8009b20:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8009b24:	2501      	movs	r5, #1
 8009b26:	6022      	str	r2, [r4, #0]
 8009b28:	e7bf      	b.n	8009aaa <_scanf_float+0x196>
 8009b2a:	2d03      	cmp	r5, #3
 8009b2c:	d0e2      	beq.n	8009af4 <_scanf_float+0x1e0>
 8009b2e:	2d05      	cmp	r5, #5
 8009b30:	e7de      	b.n	8009af0 <_scanf_float+0x1dc>
 8009b32:	2d02      	cmp	r5, #2
 8009b34:	f47f af21 	bne.w	800997a <_scanf_float+0x66>
 8009b38:	2503      	movs	r5, #3
 8009b3a:	e7b6      	b.n	8009aaa <_scanf_float+0x196>
 8009b3c:	2d06      	cmp	r5, #6
 8009b3e:	f47f af1c 	bne.w	800997a <_scanf_float+0x66>
 8009b42:	2507      	movs	r5, #7
 8009b44:	e7b1      	b.n	8009aaa <_scanf_float+0x196>
 8009b46:	6822      	ldr	r2, [r4, #0]
 8009b48:	0591      	lsls	r1, r2, #22
 8009b4a:	f57f af16 	bpl.w	800997a <_scanf_float+0x66>
 8009b4e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8009b52:	6022      	str	r2, [r4, #0]
 8009b54:	f8cd 9008 	str.w	r9, [sp, #8]
 8009b58:	e7a7      	b.n	8009aaa <_scanf_float+0x196>
 8009b5a:	6822      	ldr	r2, [r4, #0]
 8009b5c:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8009b60:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8009b64:	d006      	beq.n	8009b74 <_scanf_float+0x260>
 8009b66:	0550      	lsls	r0, r2, #21
 8009b68:	f57f af07 	bpl.w	800997a <_scanf_float+0x66>
 8009b6c:	f1b9 0f00 	cmp.w	r9, #0
 8009b70:	f000 80d9 	beq.w	8009d26 <_scanf_float+0x412>
 8009b74:	0591      	lsls	r1, r2, #22
 8009b76:	bf58      	it	pl
 8009b78:	9902      	ldrpl	r1, [sp, #8]
 8009b7a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8009b7e:	bf58      	it	pl
 8009b80:	eba9 0101 	subpl.w	r1, r9, r1
 8009b84:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8009b88:	f04f 0900 	mov.w	r9, #0
 8009b8c:	bf58      	it	pl
 8009b8e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8009b92:	6022      	str	r2, [r4, #0]
 8009b94:	e789      	b.n	8009aaa <_scanf_float+0x196>
 8009b96:	f04f 0a03 	mov.w	sl, #3
 8009b9a:	e786      	b.n	8009aaa <_scanf_float+0x196>
 8009b9c:	4639      	mov	r1, r7
 8009b9e:	4640      	mov	r0, r8
 8009ba0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8009ba4:	4798      	blx	r3
 8009ba6:	2800      	cmp	r0, #0
 8009ba8:	f43f aeda 	beq.w	8009960 <_scanf_float+0x4c>
 8009bac:	e6e5      	b.n	800997a <_scanf_float+0x66>
 8009bae:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009bb2:	463a      	mov	r2, r7
 8009bb4:	4640      	mov	r0, r8
 8009bb6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009bba:	4798      	blx	r3
 8009bbc:	6923      	ldr	r3, [r4, #16]
 8009bbe:	3b01      	subs	r3, #1
 8009bc0:	6123      	str	r3, [r4, #16]
 8009bc2:	e6e7      	b.n	8009994 <_scanf_float+0x80>
 8009bc4:	1e6b      	subs	r3, r5, #1
 8009bc6:	2b06      	cmp	r3, #6
 8009bc8:	d824      	bhi.n	8009c14 <_scanf_float+0x300>
 8009bca:	2d02      	cmp	r5, #2
 8009bcc:	d836      	bhi.n	8009c3c <_scanf_float+0x328>
 8009bce:	9b01      	ldr	r3, [sp, #4]
 8009bd0:	429e      	cmp	r6, r3
 8009bd2:	f67f aee3 	bls.w	800999c <_scanf_float+0x88>
 8009bd6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009bda:	463a      	mov	r2, r7
 8009bdc:	4640      	mov	r0, r8
 8009bde:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009be2:	4798      	blx	r3
 8009be4:	6923      	ldr	r3, [r4, #16]
 8009be6:	3b01      	subs	r3, #1
 8009be8:	6123      	str	r3, [r4, #16]
 8009bea:	e7f0      	b.n	8009bce <_scanf_float+0x2ba>
 8009bec:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009bf0:	463a      	mov	r2, r7
 8009bf2:	4640      	mov	r0, r8
 8009bf4:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8009bf8:	4798      	blx	r3
 8009bfa:	6923      	ldr	r3, [r4, #16]
 8009bfc:	3b01      	subs	r3, #1
 8009bfe:	6123      	str	r3, [r4, #16]
 8009c00:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009c04:	fa5f fa8a 	uxtb.w	sl, sl
 8009c08:	f1ba 0f02 	cmp.w	sl, #2
 8009c0c:	d1ee      	bne.n	8009bec <_scanf_float+0x2d8>
 8009c0e:	3d03      	subs	r5, #3
 8009c10:	b2ed      	uxtb	r5, r5
 8009c12:	1b76      	subs	r6, r6, r5
 8009c14:	6823      	ldr	r3, [r4, #0]
 8009c16:	05da      	lsls	r2, r3, #23
 8009c18:	d530      	bpl.n	8009c7c <_scanf_float+0x368>
 8009c1a:	055b      	lsls	r3, r3, #21
 8009c1c:	d511      	bpl.n	8009c42 <_scanf_float+0x32e>
 8009c1e:	9b01      	ldr	r3, [sp, #4]
 8009c20:	429e      	cmp	r6, r3
 8009c22:	f67f aebb 	bls.w	800999c <_scanf_float+0x88>
 8009c26:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009c2a:	463a      	mov	r2, r7
 8009c2c:	4640      	mov	r0, r8
 8009c2e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009c32:	4798      	blx	r3
 8009c34:	6923      	ldr	r3, [r4, #16]
 8009c36:	3b01      	subs	r3, #1
 8009c38:	6123      	str	r3, [r4, #16]
 8009c3a:	e7f0      	b.n	8009c1e <_scanf_float+0x30a>
 8009c3c:	46aa      	mov	sl, r5
 8009c3e:	46b3      	mov	fp, r6
 8009c40:	e7de      	b.n	8009c00 <_scanf_float+0x2ec>
 8009c42:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8009c46:	6923      	ldr	r3, [r4, #16]
 8009c48:	2965      	cmp	r1, #101	@ 0x65
 8009c4a:	f103 33ff 	add.w	r3, r3, #4294967295
 8009c4e:	f106 35ff 	add.w	r5, r6, #4294967295
 8009c52:	6123      	str	r3, [r4, #16]
 8009c54:	d00c      	beq.n	8009c70 <_scanf_float+0x35c>
 8009c56:	2945      	cmp	r1, #69	@ 0x45
 8009c58:	d00a      	beq.n	8009c70 <_scanf_float+0x35c>
 8009c5a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009c5e:	463a      	mov	r2, r7
 8009c60:	4640      	mov	r0, r8
 8009c62:	4798      	blx	r3
 8009c64:	6923      	ldr	r3, [r4, #16]
 8009c66:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8009c6a:	3b01      	subs	r3, #1
 8009c6c:	1eb5      	subs	r5, r6, #2
 8009c6e:	6123      	str	r3, [r4, #16]
 8009c70:	463a      	mov	r2, r7
 8009c72:	4640      	mov	r0, r8
 8009c74:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009c78:	4798      	blx	r3
 8009c7a:	462e      	mov	r6, r5
 8009c7c:	6822      	ldr	r2, [r4, #0]
 8009c7e:	f012 0210 	ands.w	r2, r2, #16
 8009c82:	d001      	beq.n	8009c88 <_scanf_float+0x374>
 8009c84:	2000      	movs	r0, #0
 8009c86:	e68a      	b.n	800999e <_scanf_float+0x8a>
 8009c88:	7032      	strb	r2, [r6, #0]
 8009c8a:	6823      	ldr	r3, [r4, #0]
 8009c8c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8009c90:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009c94:	d11c      	bne.n	8009cd0 <_scanf_float+0x3bc>
 8009c96:	9b02      	ldr	r3, [sp, #8]
 8009c98:	454b      	cmp	r3, r9
 8009c9a:	eba3 0209 	sub.w	r2, r3, r9
 8009c9e:	d123      	bne.n	8009ce8 <_scanf_float+0x3d4>
 8009ca0:	2200      	movs	r2, #0
 8009ca2:	4640      	mov	r0, r8
 8009ca4:	9901      	ldr	r1, [sp, #4]
 8009ca6:	f002 fd1b 	bl	800c6e0 <_strtod_r>
 8009caa:	9b03      	ldr	r3, [sp, #12]
 8009cac:	6825      	ldr	r5, [r4, #0]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	f015 0f02 	tst.w	r5, #2
 8009cb4:	4606      	mov	r6, r0
 8009cb6:	460f      	mov	r7, r1
 8009cb8:	f103 0204 	add.w	r2, r3, #4
 8009cbc:	d01f      	beq.n	8009cfe <_scanf_float+0x3ea>
 8009cbe:	9903      	ldr	r1, [sp, #12]
 8009cc0:	600a      	str	r2, [r1, #0]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	e9c3 6700 	strd	r6, r7, [r3]
 8009cc8:	68e3      	ldr	r3, [r4, #12]
 8009cca:	3301      	adds	r3, #1
 8009ccc:	60e3      	str	r3, [r4, #12]
 8009cce:	e7d9      	b.n	8009c84 <_scanf_float+0x370>
 8009cd0:	9b04      	ldr	r3, [sp, #16]
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d0e4      	beq.n	8009ca0 <_scanf_float+0x38c>
 8009cd6:	9905      	ldr	r1, [sp, #20]
 8009cd8:	230a      	movs	r3, #10
 8009cda:	4640      	mov	r0, r8
 8009cdc:	3101      	adds	r1, #1
 8009cde:	f002 fd7f 	bl	800c7e0 <_strtol_r>
 8009ce2:	9b04      	ldr	r3, [sp, #16]
 8009ce4:	9e05      	ldr	r6, [sp, #20]
 8009ce6:	1ac2      	subs	r2, r0, r3
 8009ce8:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8009cec:	429e      	cmp	r6, r3
 8009cee:	bf28      	it	cs
 8009cf0:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8009cf4:	4630      	mov	r0, r6
 8009cf6:	490d      	ldr	r1, [pc, #52]	@ (8009d2c <_scanf_float+0x418>)
 8009cf8:	f000 f94e 	bl	8009f98 <siprintf>
 8009cfc:	e7d0      	b.n	8009ca0 <_scanf_float+0x38c>
 8009cfe:	076d      	lsls	r5, r5, #29
 8009d00:	d4dd      	bmi.n	8009cbe <_scanf_float+0x3aa>
 8009d02:	9d03      	ldr	r5, [sp, #12]
 8009d04:	602a      	str	r2, [r5, #0]
 8009d06:	681d      	ldr	r5, [r3, #0]
 8009d08:	4602      	mov	r2, r0
 8009d0a:	460b      	mov	r3, r1
 8009d0c:	f7f6 fe7e 	bl	8000a0c <__aeabi_dcmpun>
 8009d10:	b120      	cbz	r0, 8009d1c <_scanf_float+0x408>
 8009d12:	4807      	ldr	r0, [pc, #28]	@ (8009d30 <_scanf_float+0x41c>)
 8009d14:	f000 faee 	bl	800a2f4 <nanf>
 8009d18:	6028      	str	r0, [r5, #0]
 8009d1a:	e7d5      	b.n	8009cc8 <_scanf_float+0x3b4>
 8009d1c:	4630      	mov	r0, r6
 8009d1e:	4639      	mov	r1, r7
 8009d20:	f7f6 fed2 	bl	8000ac8 <__aeabi_d2f>
 8009d24:	e7f8      	b.n	8009d18 <_scanf_float+0x404>
 8009d26:	f04f 0900 	mov.w	r9, #0
 8009d2a:	e62d      	b.n	8009988 <_scanf_float+0x74>
 8009d2c:	0800ef48 	.word	0x0800ef48
 8009d30:	0800f2dd 	.word	0x0800f2dd

08009d34 <std>:
 8009d34:	2300      	movs	r3, #0
 8009d36:	b510      	push	{r4, lr}
 8009d38:	4604      	mov	r4, r0
 8009d3a:	e9c0 3300 	strd	r3, r3, [r0]
 8009d3e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009d42:	6083      	str	r3, [r0, #8]
 8009d44:	8181      	strh	r1, [r0, #12]
 8009d46:	6643      	str	r3, [r0, #100]	@ 0x64
 8009d48:	81c2      	strh	r2, [r0, #14]
 8009d4a:	6183      	str	r3, [r0, #24]
 8009d4c:	4619      	mov	r1, r3
 8009d4e:	2208      	movs	r2, #8
 8009d50:	305c      	adds	r0, #92	@ 0x5c
 8009d52:	f000 fa33 	bl	800a1bc <memset>
 8009d56:	4b0d      	ldr	r3, [pc, #52]	@ (8009d8c <std+0x58>)
 8009d58:	6224      	str	r4, [r4, #32]
 8009d5a:	6263      	str	r3, [r4, #36]	@ 0x24
 8009d5c:	4b0c      	ldr	r3, [pc, #48]	@ (8009d90 <std+0x5c>)
 8009d5e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009d60:	4b0c      	ldr	r3, [pc, #48]	@ (8009d94 <std+0x60>)
 8009d62:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009d64:	4b0c      	ldr	r3, [pc, #48]	@ (8009d98 <std+0x64>)
 8009d66:	6323      	str	r3, [r4, #48]	@ 0x30
 8009d68:	4b0c      	ldr	r3, [pc, #48]	@ (8009d9c <std+0x68>)
 8009d6a:	429c      	cmp	r4, r3
 8009d6c:	d006      	beq.n	8009d7c <std+0x48>
 8009d6e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009d72:	4294      	cmp	r4, r2
 8009d74:	d002      	beq.n	8009d7c <std+0x48>
 8009d76:	33d0      	adds	r3, #208	@ 0xd0
 8009d78:	429c      	cmp	r4, r3
 8009d7a:	d105      	bne.n	8009d88 <std+0x54>
 8009d7c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009d80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009d84:	f000 ba96 	b.w	800a2b4 <__retarget_lock_init_recursive>
 8009d88:	bd10      	pop	{r4, pc}
 8009d8a:	bf00      	nop
 8009d8c:	08009fd9 	.word	0x08009fd9
 8009d90:	08009ffb 	.word	0x08009ffb
 8009d94:	0800a033 	.word	0x0800a033
 8009d98:	0800a057 	.word	0x0800a057
 8009d9c:	200008d4 	.word	0x200008d4

08009da0 <stdio_exit_handler>:
 8009da0:	4a02      	ldr	r2, [pc, #8]	@ (8009dac <stdio_exit_handler+0xc>)
 8009da2:	4903      	ldr	r1, [pc, #12]	@ (8009db0 <stdio_exit_handler+0x10>)
 8009da4:	4803      	ldr	r0, [pc, #12]	@ (8009db4 <stdio_exit_handler+0x14>)
 8009da6:	f000 b869 	b.w	8009e7c <_fwalk_sglue>
 8009daa:	bf00      	nop
 8009dac:	20000034 	.word	0x20000034
 8009db0:	0800ce15 	.word	0x0800ce15
 8009db4:	20000044 	.word	0x20000044

08009db8 <cleanup_stdio>:
 8009db8:	6841      	ldr	r1, [r0, #4]
 8009dba:	4b0c      	ldr	r3, [pc, #48]	@ (8009dec <cleanup_stdio+0x34>)
 8009dbc:	b510      	push	{r4, lr}
 8009dbe:	4299      	cmp	r1, r3
 8009dc0:	4604      	mov	r4, r0
 8009dc2:	d001      	beq.n	8009dc8 <cleanup_stdio+0x10>
 8009dc4:	f003 f826 	bl	800ce14 <_fflush_r>
 8009dc8:	68a1      	ldr	r1, [r4, #8]
 8009dca:	4b09      	ldr	r3, [pc, #36]	@ (8009df0 <cleanup_stdio+0x38>)
 8009dcc:	4299      	cmp	r1, r3
 8009dce:	d002      	beq.n	8009dd6 <cleanup_stdio+0x1e>
 8009dd0:	4620      	mov	r0, r4
 8009dd2:	f003 f81f 	bl	800ce14 <_fflush_r>
 8009dd6:	68e1      	ldr	r1, [r4, #12]
 8009dd8:	4b06      	ldr	r3, [pc, #24]	@ (8009df4 <cleanup_stdio+0x3c>)
 8009dda:	4299      	cmp	r1, r3
 8009ddc:	d004      	beq.n	8009de8 <cleanup_stdio+0x30>
 8009dde:	4620      	mov	r0, r4
 8009de0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009de4:	f003 b816 	b.w	800ce14 <_fflush_r>
 8009de8:	bd10      	pop	{r4, pc}
 8009dea:	bf00      	nop
 8009dec:	200008d4 	.word	0x200008d4
 8009df0:	2000093c 	.word	0x2000093c
 8009df4:	200009a4 	.word	0x200009a4

08009df8 <global_stdio_init.part.0>:
 8009df8:	b510      	push	{r4, lr}
 8009dfa:	4b0b      	ldr	r3, [pc, #44]	@ (8009e28 <global_stdio_init.part.0+0x30>)
 8009dfc:	4c0b      	ldr	r4, [pc, #44]	@ (8009e2c <global_stdio_init.part.0+0x34>)
 8009dfe:	4a0c      	ldr	r2, [pc, #48]	@ (8009e30 <global_stdio_init.part.0+0x38>)
 8009e00:	4620      	mov	r0, r4
 8009e02:	601a      	str	r2, [r3, #0]
 8009e04:	2104      	movs	r1, #4
 8009e06:	2200      	movs	r2, #0
 8009e08:	f7ff ff94 	bl	8009d34 <std>
 8009e0c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009e10:	2201      	movs	r2, #1
 8009e12:	2109      	movs	r1, #9
 8009e14:	f7ff ff8e 	bl	8009d34 <std>
 8009e18:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009e1c:	2202      	movs	r2, #2
 8009e1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009e22:	2112      	movs	r1, #18
 8009e24:	f7ff bf86 	b.w	8009d34 <std>
 8009e28:	20000a0c 	.word	0x20000a0c
 8009e2c:	200008d4 	.word	0x200008d4
 8009e30:	08009da1 	.word	0x08009da1

08009e34 <__sfp_lock_acquire>:
 8009e34:	4801      	ldr	r0, [pc, #4]	@ (8009e3c <__sfp_lock_acquire+0x8>)
 8009e36:	f000 ba3e 	b.w	800a2b6 <__retarget_lock_acquire_recursive>
 8009e3a:	bf00      	nop
 8009e3c:	20000a15 	.word	0x20000a15

08009e40 <__sfp_lock_release>:
 8009e40:	4801      	ldr	r0, [pc, #4]	@ (8009e48 <__sfp_lock_release+0x8>)
 8009e42:	f000 ba39 	b.w	800a2b8 <__retarget_lock_release_recursive>
 8009e46:	bf00      	nop
 8009e48:	20000a15 	.word	0x20000a15

08009e4c <__sinit>:
 8009e4c:	b510      	push	{r4, lr}
 8009e4e:	4604      	mov	r4, r0
 8009e50:	f7ff fff0 	bl	8009e34 <__sfp_lock_acquire>
 8009e54:	6a23      	ldr	r3, [r4, #32]
 8009e56:	b11b      	cbz	r3, 8009e60 <__sinit+0x14>
 8009e58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009e5c:	f7ff bff0 	b.w	8009e40 <__sfp_lock_release>
 8009e60:	4b04      	ldr	r3, [pc, #16]	@ (8009e74 <__sinit+0x28>)
 8009e62:	6223      	str	r3, [r4, #32]
 8009e64:	4b04      	ldr	r3, [pc, #16]	@ (8009e78 <__sinit+0x2c>)
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d1f5      	bne.n	8009e58 <__sinit+0xc>
 8009e6c:	f7ff ffc4 	bl	8009df8 <global_stdio_init.part.0>
 8009e70:	e7f2      	b.n	8009e58 <__sinit+0xc>
 8009e72:	bf00      	nop
 8009e74:	08009db9 	.word	0x08009db9
 8009e78:	20000a0c 	.word	0x20000a0c

08009e7c <_fwalk_sglue>:
 8009e7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009e80:	4607      	mov	r7, r0
 8009e82:	4688      	mov	r8, r1
 8009e84:	4614      	mov	r4, r2
 8009e86:	2600      	movs	r6, #0
 8009e88:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009e8c:	f1b9 0901 	subs.w	r9, r9, #1
 8009e90:	d505      	bpl.n	8009e9e <_fwalk_sglue+0x22>
 8009e92:	6824      	ldr	r4, [r4, #0]
 8009e94:	2c00      	cmp	r4, #0
 8009e96:	d1f7      	bne.n	8009e88 <_fwalk_sglue+0xc>
 8009e98:	4630      	mov	r0, r6
 8009e9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009e9e:	89ab      	ldrh	r3, [r5, #12]
 8009ea0:	2b01      	cmp	r3, #1
 8009ea2:	d907      	bls.n	8009eb4 <_fwalk_sglue+0x38>
 8009ea4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009ea8:	3301      	adds	r3, #1
 8009eaa:	d003      	beq.n	8009eb4 <_fwalk_sglue+0x38>
 8009eac:	4629      	mov	r1, r5
 8009eae:	4638      	mov	r0, r7
 8009eb0:	47c0      	blx	r8
 8009eb2:	4306      	orrs	r6, r0
 8009eb4:	3568      	adds	r5, #104	@ 0x68
 8009eb6:	e7e9      	b.n	8009e8c <_fwalk_sglue+0x10>

08009eb8 <iprintf>:
 8009eb8:	b40f      	push	{r0, r1, r2, r3}
 8009eba:	b507      	push	{r0, r1, r2, lr}
 8009ebc:	4906      	ldr	r1, [pc, #24]	@ (8009ed8 <iprintf+0x20>)
 8009ebe:	ab04      	add	r3, sp, #16
 8009ec0:	6808      	ldr	r0, [r1, #0]
 8009ec2:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ec6:	6881      	ldr	r1, [r0, #8]
 8009ec8:	9301      	str	r3, [sp, #4]
 8009eca:	f002 fe0b 	bl	800cae4 <_vfiprintf_r>
 8009ece:	b003      	add	sp, #12
 8009ed0:	f85d eb04 	ldr.w	lr, [sp], #4
 8009ed4:	b004      	add	sp, #16
 8009ed6:	4770      	bx	lr
 8009ed8:	20000040 	.word	0x20000040

08009edc <_puts_r>:
 8009edc:	6a03      	ldr	r3, [r0, #32]
 8009ede:	b570      	push	{r4, r5, r6, lr}
 8009ee0:	4605      	mov	r5, r0
 8009ee2:	460e      	mov	r6, r1
 8009ee4:	6884      	ldr	r4, [r0, #8]
 8009ee6:	b90b      	cbnz	r3, 8009eec <_puts_r+0x10>
 8009ee8:	f7ff ffb0 	bl	8009e4c <__sinit>
 8009eec:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009eee:	07db      	lsls	r3, r3, #31
 8009ef0:	d405      	bmi.n	8009efe <_puts_r+0x22>
 8009ef2:	89a3      	ldrh	r3, [r4, #12]
 8009ef4:	0598      	lsls	r0, r3, #22
 8009ef6:	d402      	bmi.n	8009efe <_puts_r+0x22>
 8009ef8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009efa:	f000 f9dc 	bl	800a2b6 <__retarget_lock_acquire_recursive>
 8009efe:	89a3      	ldrh	r3, [r4, #12]
 8009f00:	0719      	lsls	r1, r3, #28
 8009f02:	d502      	bpl.n	8009f0a <_puts_r+0x2e>
 8009f04:	6923      	ldr	r3, [r4, #16]
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d135      	bne.n	8009f76 <_puts_r+0x9a>
 8009f0a:	4621      	mov	r1, r4
 8009f0c:	4628      	mov	r0, r5
 8009f0e:	f000 f8e5 	bl	800a0dc <__swsetup_r>
 8009f12:	b380      	cbz	r0, 8009f76 <_puts_r+0x9a>
 8009f14:	f04f 35ff 	mov.w	r5, #4294967295
 8009f18:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009f1a:	07da      	lsls	r2, r3, #31
 8009f1c:	d405      	bmi.n	8009f2a <_puts_r+0x4e>
 8009f1e:	89a3      	ldrh	r3, [r4, #12]
 8009f20:	059b      	lsls	r3, r3, #22
 8009f22:	d402      	bmi.n	8009f2a <_puts_r+0x4e>
 8009f24:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009f26:	f000 f9c7 	bl	800a2b8 <__retarget_lock_release_recursive>
 8009f2a:	4628      	mov	r0, r5
 8009f2c:	bd70      	pop	{r4, r5, r6, pc}
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	da04      	bge.n	8009f3c <_puts_r+0x60>
 8009f32:	69a2      	ldr	r2, [r4, #24]
 8009f34:	429a      	cmp	r2, r3
 8009f36:	dc17      	bgt.n	8009f68 <_puts_r+0x8c>
 8009f38:	290a      	cmp	r1, #10
 8009f3a:	d015      	beq.n	8009f68 <_puts_r+0x8c>
 8009f3c:	6823      	ldr	r3, [r4, #0]
 8009f3e:	1c5a      	adds	r2, r3, #1
 8009f40:	6022      	str	r2, [r4, #0]
 8009f42:	7019      	strb	r1, [r3, #0]
 8009f44:	68a3      	ldr	r3, [r4, #8]
 8009f46:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009f4a:	3b01      	subs	r3, #1
 8009f4c:	60a3      	str	r3, [r4, #8]
 8009f4e:	2900      	cmp	r1, #0
 8009f50:	d1ed      	bne.n	8009f2e <_puts_r+0x52>
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	da11      	bge.n	8009f7a <_puts_r+0x9e>
 8009f56:	4622      	mov	r2, r4
 8009f58:	210a      	movs	r1, #10
 8009f5a:	4628      	mov	r0, r5
 8009f5c:	f000 f87f 	bl	800a05e <__swbuf_r>
 8009f60:	3001      	adds	r0, #1
 8009f62:	d0d7      	beq.n	8009f14 <_puts_r+0x38>
 8009f64:	250a      	movs	r5, #10
 8009f66:	e7d7      	b.n	8009f18 <_puts_r+0x3c>
 8009f68:	4622      	mov	r2, r4
 8009f6a:	4628      	mov	r0, r5
 8009f6c:	f000 f877 	bl	800a05e <__swbuf_r>
 8009f70:	3001      	adds	r0, #1
 8009f72:	d1e7      	bne.n	8009f44 <_puts_r+0x68>
 8009f74:	e7ce      	b.n	8009f14 <_puts_r+0x38>
 8009f76:	3e01      	subs	r6, #1
 8009f78:	e7e4      	b.n	8009f44 <_puts_r+0x68>
 8009f7a:	6823      	ldr	r3, [r4, #0]
 8009f7c:	1c5a      	adds	r2, r3, #1
 8009f7e:	6022      	str	r2, [r4, #0]
 8009f80:	220a      	movs	r2, #10
 8009f82:	701a      	strb	r2, [r3, #0]
 8009f84:	e7ee      	b.n	8009f64 <_puts_r+0x88>
	...

08009f88 <puts>:
 8009f88:	4b02      	ldr	r3, [pc, #8]	@ (8009f94 <puts+0xc>)
 8009f8a:	4601      	mov	r1, r0
 8009f8c:	6818      	ldr	r0, [r3, #0]
 8009f8e:	f7ff bfa5 	b.w	8009edc <_puts_r>
 8009f92:	bf00      	nop
 8009f94:	20000040 	.word	0x20000040

08009f98 <siprintf>:
 8009f98:	b40e      	push	{r1, r2, r3}
 8009f9a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009f9e:	b500      	push	{lr}
 8009fa0:	b09c      	sub	sp, #112	@ 0x70
 8009fa2:	ab1d      	add	r3, sp, #116	@ 0x74
 8009fa4:	9002      	str	r0, [sp, #8]
 8009fa6:	9006      	str	r0, [sp, #24]
 8009fa8:	9107      	str	r1, [sp, #28]
 8009faa:	9104      	str	r1, [sp, #16]
 8009fac:	4808      	ldr	r0, [pc, #32]	@ (8009fd0 <siprintf+0x38>)
 8009fae:	4909      	ldr	r1, [pc, #36]	@ (8009fd4 <siprintf+0x3c>)
 8009fb0:	f853 2b04 	ldr.w	r2, [r3], #4
 8009fb4:	9105      	str	r1, [sp, #20]
 8009fb6:	6800      	ldr	r0, [r0, #0]
 8009fb8:	a902      	add	r1, sp, #8
 8009fba:	9301      	str	r3, [sp, #4]
 8009fbc:	f002 fc6e 	bl	800c89c <_svfiprintf_r>
 8009fc0:	2200      	movs	r2, #0
 8009fc2:	9b02      	ldr	r3, [sp, #8]
 8009fc4:	701a      	strb	r2, [r3, #0]
 8009fc6:	b01c      	add	sp, #112	@ 0x70
 8009fc8:	f85d eb04 	ldr.w	lr, [sp], #4
 8009fcc:	b003      	add	sp, #12
 8009fce:	4770      	bx	lr
 8009fd0:	20000040 	.word	0x20000040
 8009fd4:	ffff0208 	.word	0xffff0208

08009fd8 <__sread>:
 8009fd8:	b510      	push	{r4, lr}
 8009fda:	460c      	mov	r4, r1
 8009fdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009fe0:	f000 f91a 	bl	800a218 <_read_r>
 8009fe4:	2800      	cmp	r0, #0
 8009fe6:	bfab      	itete	ge
 8009fe8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009fea:	89a3      	ldrhlt	r3, [r4, #12]
 8009fec:	181b      	addge	r3, r3, r0
 8009fee:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009ff2:	bfac      	ite	ge
 8009ff4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009ff6:	81a3      	strhlt	r3, [r4, #12]
 8009ff8:	bd10      	pop	{r4, pc}

08009ffa <__swrite>:
 8009ffa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ffe:	461f      	mov	r7, r3
 800a000:	898b      	ldrh	r3, [r1, #12]
 800a002:	4605      	mov	r5, r0
 800a004:	05db      	lsls	r3, r3, #23
 800a006:	460c      	mov	r4, r1
 800a008:	4616      	mov	r6, r2
 800a00a:	d505      	bpl.n	800a018 <__swrite+0x1e>
 800a00c:	2302      	movs	r3, #2
 800a00e:	2200      	movs	r2, #0
 800a010:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a014:	f000 f8ee 	bl	800a1f4 <_lseek_r>
 800a018:	89a3      	ldrh	r3, [r4, #12]
 800a01a:	4632      	mov	r2, r6
 800a01c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a020:	81a3      	strh	r3, [r4, #12]
 800a022:	4628      	mov	r0, r5
 800a024:	463b      	mov	r3, r7
 800a026:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a02a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a02e:	f000 b905 	b.w	800a23c <_write_r>

0800a032 <__sseek>:
 800a032:	b510      	push	{r4, lr}
 800a034:	460c      	mov	r4, r1
 800a036:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a03a:	f000 f8db 	bl	800a1f4 <_lseek_r>
 800a03e:	1c43      	adds	r3, r0, #1
 800a040:	89a3      	ldrh	r3, [r4, #12]
 800a042:	bf15      	itete	ne
 800a044:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a046:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a04a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a04e:	81a3      	strheq	r3, [r4, #12]
 800a050:	bf18      	it	ne
 800a052:	81a3      	strhne	r3, [r4, #12]
 800a054:	bd10      	pop	{r4, pc}

0800a056 <__sclose>:
 800a056:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a05a:	f000 b8bb 	b.w	800a1d4 <_close_r>

0800a05e <__swbuf_r>:
 800a05e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a060:	460e      	mov	r6, r1
 800a062:	4614      	mov	r4, r2
 800a064:	4605      	mov	r5, r0
 800a066:	b118      	cbz	r0, 800a070 <__swbuf_r+0x12>
 800a068:	6a03      	ldr	r3, [r0, #32]
 800a06a:	b90b      	cbnz	r3, 800a070 <__swbuf_r+0x12>
 800a06c:	f7ff feee 	bl	8009e4c <__sinit>
 800a070:	69a3      	ldr	r3, [r4, #24]
 800a072:	60a3      	str	r3, [r4, #8]
 800a074:	89a3      	ldrh	r3, [r4, #12]
 800a076:	071a      	lsls	r2, r3, #28
 800a078:	d501      	bpl.n	800a07e <__swbuf_r+0x20>
 800a07a:	6923      	ldr	r3, [r4, #16]
 800a07c:	b943      	cbnz	r3, 800a090 <__swbuf_r+0x32>
 800a07e:	4621      	mov	r1, r4
 800a080:	4628      	mov	r0, r5
 800a082:	f000 f82b 	bl	800a0dc <__swsetup_r>
 800a086:	b118      	cbz	r0, 800a090 <__swbuf_r+0x32>
 800a088:	f04f 37ff 	mov.w	r7, #4294967295
 800a08c:	4638      	mov	r0, r7
 800a08e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a090:	6823      	ldr	r3, [r4, #0]
 800a092:	6922      	ldr	r2, [r4, #16]
 800a094:	b2f6      	uxtb	r6, r6
 800a096:	1a98      	subs	r0, r3, r2
 800a098:	6963      	ldr	r3, [r4, #20]
 800a09a:	4637      	mov	r7, r6
 800a09c:	4283      	cmp	r3, r0
 800a09e:	dc05      	bgt.n	800a0ac <__swbuf_r+0x4e>
 800a0a0:	4621      	mov	r1, r4
 800a0a2:	4628      	mov	r0, r5
 800a0a4:	f002 feb6 	bl	800ce14 <_fflush_r>
 800a0a8:	2800      	cmp	r0, #0
 800a0aa:	d1ed      	bne.n	800a088 <__swbuf_r+0x2a>
 800a0ac:	68a3      	ldr	r3, [r4, #8]
 800a0ae:	3b01      	subs	r3, #1
 800a0b0:	60a3      	str	r3, [r4, #8]
 800a0b2:	6823      	ldr	r3, [r4, #0]
 800a0b4:	1c5a      	adds	r2, r3, #1
 800a0b6:	6022      	str	r2, [r4, #0]
 800a0b8:	701e      	strb	r6, [r3, #0]
 800a0ba:	6962      	ldr	r2, [r4, #20]
 800a0bc:	1c43      	adds	r3, r0, #1
 800a0be:	429a      	cmp	r2, r3
 800a0c0:	d004      	beq.n	800a0cc <__swbuf_r+0x6e>
 800a0c2:	89a3      	ldrh	r3, [r4, #12]
 800a0c4:	07db      	lsls	r3, r3, #31
 800a0c6:	d5e1      	bpl.n	800a08c <__swbuf_r+0x2e>
 800a0c8:	2e0a      	cmp	r6, #10
 800a0ca:	d1df      	bne.n	800a08c <__swbuf_r+0x2e>
 800a0cc:	4621      	mov	r1, r4
 800a0ce:	4628      	mov	r0, r5
 800a0d0:	f002 fea0 	bl	800ce14 <_fflush_r>
 800a0d4:	2800      	cmp	r0, #0
 800a0d6:	d0d9      	beq.n	800a08c <__swbuf_r+0x2e>
 800a0d8:	e7d6      	b.n	800a088 <__swbuf_r+0x2a>
	...

0800a0dc <__swsetup_r>:
 800a0dc:	b538      	push	{r3, r4, r5, lr}
 800a0de:	4b29      	ldr	r3, [pc, #164]	@ (800a184 <__swsetup_r+0xa8>)
 800a0e0:	4605      	mov	r5, r0
 800a0e2:	6818      	ldr	r0, [r3, #0]
 800a0e4:	460c      	mov	r4, r1
 800a0e6:	b118      	cbz	r0, 800a0f0 <__swsetup_r+0x14>
 800a0e8:	6a03      	ldr	r3, [r0, #32]
 800a0ea:	b90b      	cbnz	r3, 800a0f0 <__swsetup_r+0x14>
 800a0ec:	f7ff feae 	bl	8009e4c <__sinit>
 800a0f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a0f4:	0719      	lsls	r1, r3, #28
 800a0f6:	d422      	bmi.n	800a13e <__swsetup_r+0x62>
 800a0f8:	06da      	lsls	r2, r3, #27
 800a0fa:	d407      	bmi.n	800a10c <__swsetup_r+0x30>
 800a0fc:	2209      	movs	r2, #9
 800a0fe:	602a      	str	r2, [r5, #0]
 800a100:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a104:	f04f 30ff 	mov.w	r0, #4294967295
 800a108:	81a3      	strh	r3, [r4, #12]
 800a10a:	e033      	b.n	800a174 <__swsetup_r+0x98>
 800a10c:	0758      	lsls	r0, r3, #29
 800a10e:	d512      	bpl.n	800a136 <__swsetup_r+0x5a>
 800a110:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a112:	b141      	cbz	r1, 800a126 <__swsetup_r+0x4a>
 800a114:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a118:	4299      	cmp	r1, r3
 800a11a:	d002      	beq.n	800a122 <__swsetup_r+0x46>
 800a11c:	4628      	mov	r0, r5
 800a11e:	f000 ff3f 	bl	800afa0 <_free_r>
 800a122:	2300      	movs	r3, #0
 800a124:	6363      	str	r3, [r4, #52]	@ 0x34
 800a126:	89a3      	ldrh	r3, [r4, #12]
 800a128:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a12c:	81a3      	strh	r3, [r4, #12]
 800a12e:	2300      	movs	r3, #0
 800a130:	6063      	str	r3, [r4, #4]
 800a132:	6923      	ldr	r3, [r4, #16]
 800a134:	6023      	str	r3, [r4, #0]
 800a136:	89a3      	ldrh	r3, [r4, #12]
 800a138:	f043 0308 	orr.w	r3, r3, #8
 800a13c:	81a3      	strh	r3, [r4, #12]
 800a13e:	6923      	ldr	r3, [r4, #16]
 800a140:	b94b      	cbnz	r3, 800a156 <__swsetup_r+0x7a>
 800a142:	89a3      	ldrh	r3, [r4, #12]
 800a144:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a148:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a14c:	d003      	beq.n	800a156 <__swsetup_r+0x7a>
 800a14e:	4621      	mov	r1, r4
 800a150:	4628      	mov	r0, r5
 800a152:	f002 feac 	bl	800ceae <__smakebuf_r>
 800a156:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a15a:	f013 0201 	ands.w	r2, r3, #1
 800a15e:	d00a      	beq.n	800a176 <__swsetup_r+0x9a>
 800a160:	2200      	movs	r2, #0
 800a162:	60a2      	str	r2, [r4, #8]
 800a164:	6962      	ldr	r2, [r4, #20]
 800a166:	4252      	negs	r2, r2
 800a168:	61a2      	str	r2, [r4, #24]
 800a16a:	6922      	ldr	r2, [r4, #16]
 800a16c:	b942      	cbnz	r2, 800a180 <__swsetup_r+0xa4>
 800a16e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a172:	d1c5      	bne.n	800a100 <__swsetup_r+0x24>
 800a174:	bd38      	pop	{r3, r4, r5, pc}
 800a176:	0799      	lsls	r1, r3, #30
 800a178:	bf58      	it	pl
 800a17a:	6962      	ldrpl	r2, [r4, #20]
 800a17c:	60a2      	str	r2, [r4, #8]
 800a17e:	e7f4      	b.n	800a16a <__swsetup_r+0x8e>
 800a180:	2000      	movs	r0, #0
 800a182:	e7f7      	b.n	800a174 <__swsetup_r+0x98>
 800a184:	20000040 	.word	0x20000040

0800a188 <memmove>:
 800a188:	4288      	cmp	r0, r1
 800a18a:	b510      	push	{r4, lr}
 800a18c:	eb01 0402 	add.w	r4, r1, r2
 800a190:	d902      	bls.n	800a198 <memmove+0x10>
 800a192:	4284      	cmp	r4, r0
 800a194:	4623      	mov	r3, r4
 800a196:	d807      	bhi.n	800a1a8 <memmove+0x20>
 800a198:	1e43      	subs	r3, r0, #1
 800a19a:	42a1      	cmp	r1, r4
 800a19c:	d008      	beq.n	800a1b0 <memmove+0x28>
 800a19e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a1a2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a1a6:	e7f8      	b.n	800a19a <memmove+0x12>
 800a1a8:	4601      	mov	r1, r0
 800a1aa:	4402      	add	r2, r0
 800a1ac:	428a      	cmp	r2, r1
 800a1ae:	d100      	bne.n	800a1b2 <memmove+0x2a>
 800a1b0:	bd10      	pop	{r4, pc}
 800a1b2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a1b6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a1ba:	e7f7      	b.n	800a1ac <memmove+0x24>

0800a1bc <memset>:
 800a1bc:	4603      	mov	r3, r0
 800a1be:	4402      	add	r2, r0
 800a1c0:	4293      	cmp	r3, r2
 800a1c2:	d100      	bne.n	800a1c6 <memset+0xa>
 800a1c4:	4770      	bx	lr
 800a1c6:	f803 1b01 	strb.w	r1, [r3], #1
 800a1ca:	e7f9      	b.n	800a1c0 <memset+0x4>

0800a1cc <_localeconv_r>:
 800a1cc:	4800      	ldr	r0, [pc, #0]	@ (800a1d0 <_localeconv_r+0x4>)
 800a1ce:	4770      	bx	lr
 800a1d0:	20000180 	.word	0x20000180

0800a1d4 <_close_r>:
 800a1d4:	b538      	push	{r3, r4, r5, lr}
 800a1d6:	2300      	movs	r3, #0
 800a1d8:	4d05      	ldr	r5, [pc, #20]	@ (800a1f0 <_close_r+0x1c>)
 800a1da:	4604      	mov	r4, r0
 800a1dc:	4608      	mov	r0, r1
 800a1de:	602b      	str	r3, [r5, #0]
 800a1e0:	f7f8 fd81 	bl	8002ce6 <_close>
 800a1e4:	1c43      	adds	r3, r0, #1
 800a1e6:	d102      	bne.n	800a1ee <_close_r+0x1a>
 800a1e8:	682b      	ldr	r3, [r5, #0]
 800a1ea:	b103      	cbz	r3, 800a1ee <_close_r+0x1a>
 800a1ec:	6023      	str	r3, [r4, #0]
 800a1ee:	bd38      	pop	{r3, r4, r5, pc}
 800a1f0:	20000a10 	.word	0x20000a10

0800a1f4 <_lseek_r>:
 800a1f4:	b538      	push	{r3, r4, r5, lr}
 800a1f6:	4604      	mov	r4, r0
 800a1f8:	4608      	mov	r0, r1
 800a1fa:	4611      	mov	r1, r2
 800a1fc:	2200      	movs	r2, #0
 800a1fe:	4d05      	ldr	r5, [pc, #20]	@ (800a214 <_lseek_r+0x20>)
 800a200:	602a      	str	r2, [r5, #0]
 800a202:	461a      	mov	r2, r3
 800a204:	f7f8 fd93 	bl	8002d2e <_lseek>
 800a208:	1c43      	adds	r3, r0, #1
 800a20a:	d102      	bne.n	800a212 <_lseek_r+0x1e>
 800a20c:	682b      	ldr	r3, [r5, #0]
 800a20e:	b103      	cbz	r3, 800a212 <_lseek_r+0x1e>
 800a210:	6023      	str	r3, [r4, #0]
 800a212:	bd38      	pop	{r3, r4, r5, pc}
 800a214:	20000a10 	.word	0x20000a10

0800a218 <_read_r>:
 800a218:	b538      	push	{r3, r4, r5, lr}
 800a21a:	4604      	mov	r4, r0
 800a21c:	4608      	mov	r0, r1
 800a21e:	4611      	mov	r1, r2
 800a220:	2200      	movs	r2, #0
 800a222:	4d05      	ldr	r5, [pc, #20]	@ (800a238 <_read_r+0x20>)
 800a224:	602a      	str	r2, [r5, #0]
 800a226:	461a      	mov	r2, r3
 800a228:	f7f8 fd24 	bl	8002c74 <_read>
 800a22c:	1c43      	adds	r3, r0, #1
 800a22e:	d102      	bne.n	800a236 <_read_r+0x1e>
 800a230:	682b      	ldr	r3, [r5, #0]
 800a232:	b103      	cbz	r3, 800a236 <_read_r+0x1e>
 800a234:	6023      	str	r3, [r4, #0]
 800a236:	bd38      	pop	{r3, r4, r5, pc}
 800a238:	20000a10 	.word	0x20000a10

0800a23c <_write_r>:
 800a23c:	b538      	push	{r3, r4, r5, lr}
 800a23e:	4604      	mov	r4, r0
 800a240:	4608      	mov	r0, r1
 800a242:	4611      	mov	r1, r2
 800a244:	2200      	movs	r2, #0
 800a246:	4d05      	ldr	r5, [pc, #20]	@ (800a25c <_write_r+0x20>)
 800a248:	602a      	str	r2, [r5, #0]
 800a24a:	461a      	mov	r2, r3
 800a24c:	f7f8 fd2f 	bl	8002cae <_write>
 800a250:	1c43      	adds	r3, r0, #1
 800a252:	d102      	bne.n	800a25a <_write_r+0x1e>
 800a254:	682b      	ldr	r3, [r5, #0]
 800a256:	b103      	cbz	r3, 800a25a <_write_r+0x1e>
 800a258:	6023      	str	r3, [r4, #0]
 800a25a:	bd38      	pop	{r3, r4, r5, pc}
 800a25c:	20000a10 	.word	0x20000a10

0800a260 <__errno>:
 800a260:	4b01      	ldr	r3, [pc, #4]	@ (800a268 <__errno+0x8>)
 800a262:	6818      	ldr	r0, [r3, #0]
 800a264:	4770      	bx	lr
 800a266:	bf00      	nop
 800a268:	20000040 	.word	0x20000040

0800a26c <__libc_init_array>:
 800a26c:	b570      	push	{r4, r5, r6, lr}
 800a26e:	2600      	movs	r6, #0
 800a270:	4d0c      	ldr	r5, [pc, #48]	@ (800a2a4 <__libc_init_array+0x38>)
 800a272:	4c0d      	ldr	r4, [pc, #52]	@ (800a2a8 <__libc_init_array+0x3c>)
 800a274:	1b64      	subs	r4, r4, r5
 800a276:	10a4      	asrs	r4, r4, #2
 800a278:	42a6      	cmp	r6, r4
 800a27a:	d109      	bne.n	800a290 <__libc_init_array+0x24>
 800a27c:	f003 fabc 	bl	800d7f8 <_init>
 800a280:	2600      	movs	r6, #0
 800a282:	4d0a      	ldr	r5, [pc, #40]	@ (800a2ac <__libc_init_array+0x40>)
 800a284:	4c0a      	ldr	r4, [pc, #40]	@ (800a2b0 <__libc_init_array+0x44>)
 800a286:	1b64      	subs	r4, r4, r5
 800a288:	10a4      	asrs	r4, r4, #2
 800a28a:	42a6      	cmp	r6, r4
 800a28c:	d105      	bne.n	800a29a <__libc_init_array+0x2e>
 800a28e:	bd70      	pop	{r4, r5, r6, pc}
 800a290:	f855 3b04 	ldr.w	r3, [r5], #4
 800a294:	4798      	blx	r3
 800a296:	3601      	adds	r6, #1
 800a298:	e7ee      	b.n	800a278 <__libc_init_array+0xc>
 800a29a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a29e:	4798      	blx	r3
 800a2a0:	3601      	adds	r6, #1
 800a2a2:	e7f2      	b.n	800a28a <__libc_init_array+0x1e>
 800a2a4:	0800f348 	.word	0x0800f348
 800a2a8:	0800f348 	.word	0x0800f348
 800a2ac:	0800f348 	.word	0x0800f348
 800a2b0:	0800f34c 	.word	0x0800f34c

0800a2b4 <__retarget_lock_init_recursive>:
 800a2b4:	4770      	bx	lr

0800a2b6 <__retarget_lock_acquire_recursive>:
 800a2b6:	4770      	bx	lr

0800a2b8 <__retarget_lock_release_recursive>:
 800a2b8:	4770      	bx	lr

0800a2ba <memchr>:
 800a2ba:	4603      	mov	r3, r0
 800a2bc:	b510      	push	{r4, lr}
 800a2be:	b2c9      	uxtb	r1, r1
 800a2c0:	4402      	add	r2, r0
 800a2c2:	4293      	cmp	r3, r2
 800a2c4:	4618      	mov	r0, r3
 800a2c6:	d101      	bne.n	800a2cc <memchr+0x12>
 800a2c8:	2000      	movs	r0, #0
 800a2ca:	e003      	b.n	800a2d4 <memchr+0x1a>
 800a2cc:	7804      	ldrb	r4, [r0, #0]
 800a2ce:	3301      	adds	r3, #1
 800a2d0:	428c      	cmp	r4, r1
 800a2d2:	d1f6      	bne.n	800a2c2 <memchr+0x8>
 800a2d4:	bd10      	pop	{r4, pc}

0800a2d6 <memcpy>:
 800a2d6:	440a      	add	r2, r1
 800a2d8:	4291      	cmp	r1, r2
 800a2da:	f100 33ff 	add.w	r3, r0, #4294967295
 800a2de:	d100      	bne.n	800a2e2 <memcpy+0xc>
 800a2e0:	4770      	bx	lr
 800a2e2:	b510      	push	{r4, lr}
 800a2e4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a2e8:	4291      	cmp	r1, r2
 800a2ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a2ee:	d1f9      	bne.n	800a2e4 <memcpy+0xe>
 800a2f0:	bd10      	pop	{r4, pc}
	...

0800a2f4 <nanf>:
 800a2f4:	4800      	ldr	r0, [pc, #0]	@ (800a2f8 <nanf+0x4>)
 800a2f6:	4770      	bx	lr
 800a2f8:	7fc00000 	.word	0x7fc00000

0800a2fc <quorem>:
 800a2fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a300:	6903      	ldr	r3, [r0, #16]
 800a302:	690c      	ldr	r4, [r1, #16]
 800a304:	4607      	mov	r7, r0
 800a306:	42a3      	cmp	r3, r4
 800a308:	db7e      	blt.n	800a408 <quorem+0x10c>
 800a30a:	3c01      	subs	r4, #1
 800a30c:	00a3      	lsls	r3, r4, #2
 800a30e:	f100 0514 	add.w	r5, r0, #20
 800a312:	f101 0814 	add.w	r8, r1, #20
 800a316:	9300      	str	r3, [sp, #0]
 800a318:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a31c:	9301      	str	r3, [sp, #4]
 800a31e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a322:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a326:	3301      	adds	r3, #1
 800a328:	429a      	cmp	r2, r3
 800a32a:	fbb2 f6f3 	udiv	r6, r2, r3
 800a32e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a332:	d32e      	bcc.n	800a392 <quorem+0x96>
 800a334:	f04f 0a00 	mov.w	sl, #0
 800a338:	46c4      	mov	ip, r8
 800a33a:	46ae      	mov	lr, r5
 800a33c:	46d3      	mov	fp, sl
 800a33e:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a342:	b298      	uxth	r0, r3
 800a344:	fb06 a000 	mla	r0, r6, r0, sl
 800a348:	0c1b      	lsrs	r3, r3, #16
 800a34a:	0c02      	lsrs	r2, r0, #16
 800a34c:	fb06 2303 	mla	r3, r6, r3, r2
 800a350:	f8de 2000 	ldr.w	r2, [lr]
 800a354:	b280      	uxth	r0, r0
 800a356:	b292      	uxth	r2, r2
 800a358:	1a12      	subs	r2, r2, r0
 800a35a:	445a      	add	r2, fp
 800a35c:	f8de 0000 	ldr.w	r0, [lr]
 800a360:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a364:	b29b      	uxth	r3, r3
 800a366:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800a36a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800a36e:	b292      	uxth	r2, r2
 800a370:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800a374:	45e1      	cmp	r9, ip
 800a376:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800a37a:	f84e 2b04 	str.w	r2, [lr], #4
 800a37e:	d2de      	bcs.n	800a33e <quorem+0x42>
 800a380:	9b00      	ldr	r3, [sp, #0]
 800a382:	58eb      	ldr	r3, [r5, r3]
 800a384:	b92b      	cbnz	r3, 800a392 <quorem+0x96>
 800a386:	9b01      	ldr	r3, [sp, #4]
 800a388:	3b04      	subs	r3, #4
 800a38a:	429d      	cmp	r5, r3
 800a38c:	461a      	mov	r2, r3
 800a38e:	d32f      	bcc.n	800a3f0 <quorem+0xf4>
 800a390:	613c      	str	r4, [r7, #16]
 800a392:	4638      	mov	r0, r7
 800a394:	f001 f9c4 	bl	800b720 <__mcmp>
 800a398:	2800      	cmp	r0, #0
 800a39a:	db25      	blt.n	800a3e8 <quorem+0xec>
 800a39c:	4629      	mov	r1, r5
 800a39e:	2000      	movs	r0, #0
 800a3a0:	f858 2b04 	ldr.w	r2, [r8], #4
 800a3a4:	f8d1 c000 	ldr.w	ip, [r1]
 800a3a8:	fa1f fe82 	uxth.w	lr, r2
 800a3ac:	fa1f f38c 	uxth.w	r3, ip
 800a3b0:	eba3 030e 	sub.w	r3, r3, lr
 800a3b4:	4403      	add	r3, r0
 800a3b6:	0c12      	lsrs	r2, r2, #16
 800a3b8:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800a3bc:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800a3c0:	b29b      	uxth	r3, r3
 800a3c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a3c6:	45c1      	cmp	r9, r8
 800a3c8:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a3cc:	f841 3b04 	str.w	r3, [r1], #4
 800a3d0:	d2e6      	bcs.n	800a3a0 <quorem+0xa4>
 800a3d2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a3d6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a3da:	b922      	cbnz	r2, 800a3e6 <quorem+0xea>
 800a3dc:	3b04      	subs	r3, #4
 800a3de:	429d      	cmp	r5, r3
 800a3e0:	461a      	mov	r2, r3
 800a3e2:	d30b      	bcc.n	800a3fc <quorem+0x100>
 800a3e4:	613c      	str	r4, [r7, #16]
 800a3e6:	3601      	adds	r6, #1
 800a3e8:	4630      	mov	r0, r6
 800a3ea:	b003      	add	sp, #12
 800a3ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3f0:	6812      	ldr	r2, [r2, #0]
 800a3f2:	3b04      	subs	r3, #4
 800a3f4:	2a00      	cmp	r2, #0
 800a3f6:	d1cb      	bne.n	800a390 <quorem+0x94>
 800a3f8:	3c01      	subs	r4, #1
 800a3fa:	e7c6      	b.n	800a38a <quorem+0x8e>
 800a3fc:	6812      	ldr	r2, [r2, #0]
 800a3fe:	3b04      	subs	r3, #4
 800a400:	2a00      	cmp	r2, #0
 800a402:	d1ef      	bne.n	800a3e4 <quorem+0xe8>
 800a404:	3c01      	subs	r4, #1
 800a406:	e7ea      	b.n	800a3de <quorem+0xe2>
 800a408:	2000      	movs	r0, #0
 800a40a:	e7ee      	b.n	800a3ea <quorem+0xee>
 800a40c:	0000      	movs	r0, r0
	...

0800a410 <_dtoa_r>:
 800a410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a414:	4614      	mov	r4, r2
 800a416:	461d      	mov	r5, r3
 800a418:	69c7      	ldr	r7, [r0, #28]
 800a41a:	b097      	sub	sp, #92	@ 0x5c
 800a41c:	4683      	mov	fp, r0
 800a41e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800a422:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800a424:	b97f      	cbnz	r7, 800a446 <_dtoa_r+0x36>
 800a426:	2010      	movs	r0, #16
 800a428:	f000 fe02 	bl	800b030 <malloc>
 800a42c:	4602      	mov	r2, r0
 800a42e:	f8cb 001c 	str.w	r0, [fp, #28]
 800a432:	b920      	cbnz	r0, 800a43e <_dtoa_r+0x2e>
 800a434:	21ef      	movs	r1, #239	@ 0xef
 800a436:	4ba8      	ldr	r3, [pc, #672]	@ (800a6d8 <_dtoa_r+0x2c8>)
 800a438:	48a8      	ldr	r0, [pc, #672]	@ (800a6dc <_dtoa_r+0x2cc>)
 800a43a:	f002 fdbf 	bl	800cfbc <__assert_func>
 800a43e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800a442:	6007      	str	r7, [r0, #0]
 800a444:	60c7      	str	r7, [r0, #12]
 800a446:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a44a:	6819      	ldr	r1, [r3, #0]
 800a44c:	b159      	cbz	r1, 800a466 <_dtoa_r+0x56>
 800a44e:	685a      	ldr	r2, [r3, #4]
 800a450:	2301      	movs	r3, #1
 800a452:	4093      	lsls	r3, r2
 800a454:	604a      	str	r2, [r1, #4]
 800a456:	608b      	str	r3, [r1, #8]
 800a458:	4658      	mov	r0, fp
 800a45a:	f000 fedf 	bl	800b21c <_Bfree>
 800a45e:	2200      	movs	r2, #0
 800a460:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a464:	601a      	str	r2, [r3, #0]
 800a466:	1e2b      	subs	r3, r5, #0
 800a468:	bfaf      	iteee	ge
 800a46a:	2300      	movge	r3, #0
 800a46c:	2201      	movlt	r2, #1
 800a46e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800a472:	9303      	strlt	r3, [sp, #12]
 800a474:	bfa8      	it	ge
 800a476:	6033      	strge	r3, [r6, #0]
 800a478:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800a47c:	4b98      	ldr	r3, [pc, #608]	@ (800a6e0 <_dtoa_r+0x2d0>)
 800a47e:	bfb8      	it	lt
 800a480:	6032      	strlt	r2, [r6, #0]
 800a482:	ea33 0308 	bics.w	r3, r3, r8
 800a486:	d112      	bne.n	800a4ae <_dtoa_r+0x9e>
 800a488:	f242 730f 	movw	r3, #9999	@ 0x270f
 800a48c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800a48e:	6013      	str	r3, [r2, #0]
 800a490:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800a494:	4323      	orrs	r3, r4
 800a496:	f000 8550 	beq.w	800af3a <_dtoa_r+0xb2a>
 800a49a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800a49c:	f8df a244 	ldr.w	sl, [pc, #580]	@ 800a6e4 <_dtoa_r+0x2d4>
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	f000 8552 	beq.w	800af4a <_dtoa_r+0xb3a>
 800a4a6:	f10a 0303 	add.w	r3, sl, #3
 800a4aa:	f000 bd4c 	b.w	800af46 <_dtoa_r+0xb36>
 800a4ae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a4b2:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800a4b6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a4ba:	2200      	movs	r2, #0
 800a4bc:	2300      	movs	r3, #0
 800a4be:	f7f6 fa73 	bl	80009a8 <__aeabi_dcmpeq>
 800a4c2:	4607      	mov	r7, r0
 800a4c4:	b158      	cbz	r0, 800a4de <_dtoa_r+0xce>
 800a4c6:	2301      	movs	r3, #1
 800a4c8:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800a4ca:	6013      	str	r3, [r2, #0]
 800a4cc:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800a4ce:	b113      	cbz	r3, 800a4d6 <_dtoa_r+0xc6>
 800a4d0:	4b85      	ldr	r3, [pc, #532]	@ (800a6e8 <_dtoa_r+0x2d8>)
 800a4d2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800a4d4:	6013      	str	r3, [r2, #0]
 800a4d6:	f8df a214 	ldr.w	sl, [pc, #532]	@ 800a6ec <_dtoa_r+0x2dc>
 800a4da:	f000 bd36 	b.w	800af4a <_dtoa_r+0xb3a>
 800a4de:	ab14      	add	r3, sp, #80	@ 0x50
 800a4e0:	9301      	str	r3, [sp, #4]
 800a4e2:	ab15      	add	r3, sp, #84	@ 0x54
 800a4e4:	9300      	str	r3, [sp, #0]
 800a4e6:	4658      	mov	r0, fp
 800a4e8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800a4ec:	f001 fa30 	bl	800b950 <__d2b>
 800a4f0:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800a4f4:	4681      	mov	r9, r0
 800a4f6:	2e00      	cmp	r6, #0
 800a4f8:	d077      	beq.n	800a5ea <_dtoa_r+0x1da>
 800a4fa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a4fe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a500:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800a504:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a508:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800a50c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800a510:	9712      	str	r7, [sp, #72]	@ 0x48
 800a512:	4619      	mov	r1, r3
 800a514:	2200      	movs	r2, #0
 800a516:	4b76      	ldr	r3, [pc, #472]	@ (800a6f0 <_dtoa_r+0x2e0>)
 800a518:	f7f5 fe26 	bl	8000168 <__aeabi_dsub>
 800a51c:	a368      	add	r3, pc, #416	@ (adr r3, 800a6c0 <_dtoa_r+0x2b0>)
 800a51e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a522:	f7f5 ffd9 	bl	80004d8 <__aeabi_dmul>
 800a526:	a368      	add	r3, pc, #416	@ (adr r3, 800a6c8 <_dtoa_r+0x2b8>)
 800a528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a52c:	f7f5 fe1e 	bl	800016c <__adddf3>
 800a530:	4604      	mov	r4, r0
 800a532:	4630      	mov	r0, r6
 800a534:	460d      	mov	r5, r1
 800a536:	f7f5 ff65 	bl	8000404 <__aeabi_i2d>
 800a53a:	a365      	add	r3, pc, #404	@ (adr r3, 800a6d0 <_dtoa_r+0x2c0>)
 800a53c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a540:	f7f5 ffca 	bl	80004d8 <__aeabi_dmul>
 800a544:	4602      	mov	r2, r0
 800a546:	460b      	mov	r3, r1
 800a548:	4620      	mov	r0, r4
 800a54a:	4629      	mov	r1, r5
 800a54c:	f7f5 fe0e 	bl	800016c <__adddf3>
 800a550:	4604      	mov	r4, r0
 800a552:	460d      	mov	r5, r1
 800a554:	f7f6 fa70 	bl	8000a38 <__aeabi_d2iz>
 800a558:	2200      	movs	r2, #0
 800a55a:	4607      	mov	r7, r0
 800a55c:	2300      	movs	r3, #0
 800a55e:	4620      	mov	r0, r4
 800a560:	4629      	mov	r1, r5
 800a562:	f7f6 fa2b 	bl	80009bc <__aeabi_dcmplt>
 800a566:	b140      	cbz	r0, 800a57a <_dtoa_r+0x16a>
 800a568:	4638      	mov	r0, r7
 800a56a:	f7f5 ff4b 	bl	8000404 <__aeabi_i2d>
 800a56e:	4622      	mov	r2, r4
 800a570:	462b      	mov	r3, r5
 800a572:	f7f6 fa19 	bl	80009a8 <__aeabi_dcmpeq>
 800a576:	b900      	cbnz	r0, 800a57a <_dtoa_r+0x16a>
 800a578:	3f01      	subs	r7, #1
 800a57a:	2f16      	cmp	r7, #22
 800a57c:	d853      	bhi.n	800a626 <_dtoa_r+0x216>
 800a57e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a582:	4b5c      	ldr	r3, [pc, #368]	@ (800a6f4 <_dtoa_r+0x2e4>)
 800a584:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a58c:	f7f6 fa16 	bl	80009bc <__aeabi_dcmplt>
 800a590:	2800      	cmp	r0, #0
 800a592:	d04a      	beq.n	800a62a <_dtoa_r+0x21a>
 800a594:	2300      	movs	r3, #0
 800a596:	3f01      	subs	r7, #1
 800a598:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a59a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800a59c:	1b9b      	subs	r3, r3, r6
 800a59e:	1e5a      	subs	r2, r3, #1
 800a5a0:	bf46      	itte	mi
 800a5a2:	f1c3 0801 	rsbmi	r8, r3, #1
 800a5a6:	2300      	movmi	r3, #0
 800a5a8:	f04f 0800 	movpl.w	r8, #0
 800a5ac:	9209      	str	r2, [sp, #36]	@ 0x24
 800a5ae:	bf48      	it	mi
 800a5b0:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800a5b2:	2f00      	cmp	r7, #0
 800a5b4:	db3b      	blt.n	800a62e <_dtoa_r+0x21e>
 800a5b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a5b8:	970e      	str	r7, [sp, #56]	@ 0x38
 800a5ba:	443b      	add	r3, r7
 800a5bc:	9309      	str	r3, [sp, #36]	@ 0x24
 800a5be:	2300      	movs	r3, #0
 800a5c0:	930a      	str	r3, [sp, #40]	@ 0x28
 800a5c2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800a5c4:	2b09      	cmp	r3, #9
 800a5c6:	d866      	bhi.n	800a696 <_dtoa_r+0x286>
 800a5c8:	2b05      	cmp	r3, #5
 800a5ca:	bfc4      	itt	gt
 800a5cc:	3b04      	subgt	r3, #4
 800a5ce:	9320      	strgt	r3, [sp, #128]	@ 0x80
 800a5d0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800a5d2:	bfc8      	it	gt
 800a5d4:	2400      	movgt	r4, #0
 800a5d6:	f1a3 0302 	sub.w	r3, r3, #2
 800a5da:	bfd8      	it	le
 800a5dc:	2401      	movle	r4, #1
 800a5de:	2b03      	cmp	r3, #3
 800a5e0:	d864      	bhi.n	800a6ac <_dtoa_r+0x29c>
 800a5e2:	e8df f003 	tbb	[pc, r3]
 800a5e6:	382b      	.short	0x382b
 800a5e8:	5636      	.short	0x5636
 800a5ea:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800a5ee:	441e      	add	r6, r3
 800a5f0:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800a5f4:	2b20      	cmp	r3, #32
 800a5f6:	bfc1      	itttt	gt
 800a5f8:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800a5fc:	fa08 f803 	lslgt.w	r8, r8, r3
 800a600:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800a604:	fa24 f303 	lsrgt.w	r3, r4, r3
 800a608:	bfd6      	itet	le
 800a60a:	f1c3 0320 	rsble	r3, r3, #32
 800a60e:	ea48 0003 	orrgt.w	r0, r8, r3
 800a612:	fa04 f003 	lslle.w	r0, r4, r3
 800a616:	f7f5 fee5 	bl	80003e4 <__aeabi_ui2d>
 800a61a:	2201      	movs	r2, #1
 800a61c:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800a620:	3e01      	subs	r6, #1
 800a622:	9212      	str	r2, [sp, #72]	@ 0x48
 800a624:	e775      	b.n	800a512 <_dtoa_r+0x102>
 800a626:	2301      	movs	r3, #1
 800a628:	e7b6      	b.n	800a598 <_dtoa_r+0x188>
 800a62a:	900f      	str	r0, [sp, #60]	@ 0x3c
 800a62c:	e7b5      	b.n	800a59a <_dtoa_r+0x18a>
 800a62e:	427b      	negs	r3, r7
 800a630:	930a      	str	r3, [sp, #40]	@ 0x28
 800a632:	2300      	movs	r3, #0
 800a634:	eba8 0807 	sub.w	r8, r8, r7
 800a638:	930e      	str	r3, [sp, #56]	@ 0x38
 800a63a:	e7c2      	b.n	800a5c2 <_dtoa_r+0x1b2>
 800a63c:	2300      	movs	r3, #0
 800a63e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a640:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a642:	2b00      	cmp	r3, #0
 800a644:	dc35      	bgt.n	800a6b2 <_dtoa_r+0x2a2>
 800a646:	2301      	movs	r3, #1
 800a648:	461a      	mov	r2, r3
 800a64a:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800a64e:	9221      	str	r2, [sp, #132]	@ 0x84
 800a650:	e00b      	b.n	800a66a <_dtoa_r+0x25a>
 800a652:	2301      	movs	r3, #1
 800a654:	e7f3      	b.n	800a63e <_dtoa_r+0x22e>
 800a656:	2300      	movs	r3, #0
 800a658:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a65a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a65c:	18fb      	adds	r3, r7, r3
 800a65e:	9308      	str	r3, [sp, #32]
 800a660:	3301      	adds	r3, #1
 800a662:	2b01      	cmp	r3, #1
 800a664:	9307      	str	r3, [sp, #28]
 800a666:	bfb8      	it	lt
 800a668:	2301      	movlt	r3, #1
 800a66a:	2100      	movs	r1, #0
 800a66c:	2204      	movs	r2, #4
 800a66e:	f8db 001c 	ldr.w	r0, [fp, #28]
 800a672:	f102 0514 	add.w	r5, r2, #20
 800a676:	429d      	cmp	r5, r3
 800a678:	d91f      	bls.n	800a6ba <_dtoa_r+0x2aa>
 800a67a:	6041      	str	r1, [r0, #4]
 800a67c:	4658      	mov	r0, fp
 800a67e:	f000 fd8d 	bl	800b19c <_Balloc>
 800a682:	4682      	mov	sl, r0
 800a684:	2800      	cmp	r0, #0
 800a686:	d139      	bne.n	800a6fc <_dtoa_r+0x2ec>
 800a688:	4602      	mov	r2, r0
 800a68a:	f240 11af 	movw	r1, #431	@ 0x1af
 800a68e:	4b1a      	ldr	r3, [pc, #104]	@ (800a6f8 <_dtoa_r+0x2e8>)
 800a690:	e6d2      	b.n	800a438 <_dtoa_r+0x28>
 800a692:	2301      	movs	r3, #1
 800a694:	e7e0      	b.n	800a658 <_dtoa_r+0x248>
 800a696:	2401      	movs	r4, #1
 800a698:	2300      	movs	r3, #0
 800a69a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800a69c:	9320      	str	r3, [sp, #128]	@ 0x80
 800a69e:	f04f 33ff 	mov.w	r3, #4294967295
 800a6a2:	2200      	movs	r2, #0
 800a6a4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800a6a8:	2312      	movs	r3, #18
 800a6aa:	e7d0      	b.n	800a64e <_dtoa_r+0x23e>
 800a6ac:	2301      	movs	r3, #1
 800a6ae:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a6b0:	e7f5      	b.n	800a69e <_dtoa_r+0x28e>
 800a6b2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a6b4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800a6b8:	e7d7      	b.n	800a66a <_dtoa_r+0x25a>
 800a6ba:	3101      	adds	r1, #1
 800a6bc:	0052      	lsls	r2, r2, #1
 800a6be:	e7d8      	b.n	800a672 <_dtoa_r+0x262>
 800a6c0:	636f4361 	.word	0x636f4361
 800a6c4:	3fd287a7 	.word	0x3fd287a7
 800a6c8:	8b60c8b3 	.word	0x8b60c8b3
 800a6cc:	3fc68a28 	.word	0x3fc68a28
 800a6d0:	509f79fb 	.word	0x509f79fb
 800a6d4:	3fd34413 	.word	0x3fd34413
 800a6d8:	0800ef5a 	.word	0x0800ef5a
 800a6dc:	0800ef71 	.word	0x0800ef71
 800a6e0:	7ff00000 	.word	0x7ff00000
 800a6e4:	0800ef56 	.word	0x0800ef56
 800a6e8:	0800ef25 	.word	0x0800ef25
 800a6ec:	0800ef24 	.word	0x0800ef24
 800a6f0:	3ff80000 	.word	0x3ff80000
 800a6f4:	0800f068 	.word	0x0800f068
 800a6f8:	0800efc9 	.word	0x0800efc9
 800a6fc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a700:	6018      	str	r0, [r3, #0]
 800a702:	9b07      	ldr	r3, [sp, #28]
 800a704:	2b0e      	cmp	r3, #14
 800a706:	f200 80a4 	bhi.w	800a852 <_dtoa_r+0x442>
 800a70a:	2c00      	cmp	r4, #0
 800a70c:	f000 80a1 	beq.w	800a852 <_dtoa_r+0x442>
 800a710:	2f00      	cmp	r7, #0
 800a712:	dd33      	ble.n	800a77c <_dtoa_r+0x36c>
 800a714:	4b86      	ldr	r3, [pc, #536]	@ (800a930 <_dtoa_r+0x520>)
 800a716:	f007 020f 	and.w	r2, r7, #15
 800a71a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a71e:	05f8      	lsls	r0, r7, #23
 800a720:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a724:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800a728:	ea4f 1427 	mov.w	r4, r7, asr #4
 800a72c:	d516      	bpl.n	800a75c <_dtoa_r+0x34c>
 800a72e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a732:	4b80      	ldr	r3, [pc, #512]	@ (800a934 <_dtoa_r+0x524>)
 800a734:	2603      	movs	r6, #3
 800a736:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a73a:	f7f5 fff7 	bl	800072c <__aeabi_ddiv>
 800a73e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a742:	f004 040f 	and.w	r4, r4, #15
 800a746:	4d7b      	ldr	r5, [pc, #492]	@ (800a934 <_dtoa_r+0x524>)
 800a748:	b954      	cbnz	r4, 800a760 <_dtoa_r+0x350>
 800a74a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a74e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a752:	f7f5 ffeb 	bl	800072c <__aeabi_ddiv>
 800a756:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a75a:	e028      	b.n	800a7ae <_dtoa_r+0x39e>
 800a75c:	2602      	movs	r6, #2
 800a75e:	e7f2      	b.n	800a746 <_dtoa_r+0x336>
 800a760:	07e1      	lsls	r1, r4, #31
 800a762:	d508      	bpl.n	800a776 <_dtoa_r+0x366>
 800a764:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a768:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a76c:	f7f5 feb4 	bl	80004d8 <__aeabi_dmul>
 800a770:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a774:	3601      	adds	r6, #1
 800a776:	1064      	asrs	r4, r4, #1
 800a778:	3508      	adds	r5, #8
 800a77a:	e7e5      	b.n	800a748 <_dtoa_r+0x338>
 800a77c:	f000 80d2 	beq.w	800a924 <_dtoa_r+0x514>
 800a780:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a784:	427c      	negs	r4, r7
 800a786:	4b6a      	ldr	r3, [pc, #424]	@ (800a930 <_dtoa_r+0x520>)
 800a788:	f004 020f 	and.w	r2, r4, #15
 800a78c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a790:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a794:	f7f5 fea0 	bl	80004d8 <__aeabi_dmul>
 800a798:	2602      	movs	r6, #2
 800a79a:	2300      	movs	r3, #0
 800a79c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a7a0:	4d64      	ldr	r5, [pc, #400]	@ (800a934 <_dtoa_r+0x524>)
 800a7a2:	1124      	asrs	r4, r4, #4
 800a7a4:	2c00      	cmp	r4, #0
 800a7a6:	f040 80b2 	bne.w	800a90e <_dtoa_r+0x4fe>
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d1d3      	bne.n	800a756 <_dtoa_r+0x346>
 800a7ae:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a7b2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	f000 80b7 	beq.w	800a928 <_dtoa_r+0x518>
 800a7ba:	2200      	movs	r2, #0
 800a7bc:	4620      	mov	r0, r4
 800a7be:	4629      	mov	r1, r5
 800a7c0:	4b5d      	ldr	r3, [pc, #372]	@ (800a938 <_dtoa_r+0x528>)
 800a7c2:	f7f6 f8fb 	bl	80009bc <__aeabi_dcmplt>
 800a7c6:	2800      	cmp	r0, #0
 800a7c8:	f000 80ae 	beq.w	800a928 <_dtoa_r+0x518>
 800a7cc:	9b07      	ldr	r3, [sp, #28]
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	f000 80aa 	beq.w	800a928 <_dtoa_r+0x518>
 800a7d4:	9b08      	ldr	r3, [sp, #32]
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	dd37      	ble.n	800a84a <_dtoa_r+0x43a>
 800a7da:	1e7b      	subs	r3, r7, #1
 800a7dc:	4620      	mov	r0, r4
 800a7de:	9304      	str	r3, [sp, #16]
 800a7e0:	2200      	movs	r2, #0
 800a7e2:	4629      	mov	r1, r5
 800a7e4:	4b55      	ldr	r3, [pc, #340]	@ (800a93c <_dtoa_r+0x52c>)
 800a7e6:	f7f5 fe77 	bl	80004d8 <__aeabi_dmul>
 800a7ea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a7ee:	9c08      	ldr	r4, [sp, #32]
 800a7f0:	3601      	adds	r6, #1
 800a7f2:	4630      	mov	r0, r6
 800a7f4:	f7f5 fe06 	bl	8000404 <__aeabi_i2d>
 800a7f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a7fc:	f7f5 fe6c 	bl	80004d8 <__aeabi_dmul>
 800a800:	2200      	movs	r2, #0
 800a802:	4b4f      	ldr	r3, [pc, #316]	@ (800a940 <_dtoa_r+0x530>)
 800a804:	f7f5 fcb2 	bl	800016c <__adddf3>
 800a808:	4605      	mov	r5, r0
 800a80a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800a80e:	2c00      	cmp	r4, #0
 800a810:	f040 809a 	bne.w	800a948 <_dtoa_r+0x538>
 800a814:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a818:	2200      	movs	r2, #0
 800a81a:	4b4a      	ldr	r3, [pc, #296]	@ (800a944 <_dtoa_r+0x534>)
 800a81c:	f7f5 fca4 	bl	8000168 <__aeabi_dsub>
 800a820:	4602      	mov	r2, r0
 800a822:	460b      	mov	r3, r1
 800a824:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a828:	462a      	mov	r2, r5
 800a82a:	4633      	mov	r3, r6
 800a82c:	f7f6 f8e4 	bl	80009f8 <__aeabi_dcmpgt>
 800a830:	2800      	cmp	r0, #0
 800a832:	f040 828e 	bne.w	800ad52 <_dtoa_r+0x942>
 800a836:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a83a:	462a      	mov	r2, r5
 800a83c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800a840:	f7f6 f8bc 	bl	80009bc <__aeabi_dcmplt>
 800a844:	2800      	cmp	r0, #0
 800a846:	f040 8127 	bne.w	800aa98 <_dtoa_r+0x688>
 800a84a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800a84e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800a852:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800a854:	2b00      	cmp	r3, #0
 800a856:	f2c0 8163 	blt.w	800ab20 <_dtoa_r+0x710>
 800a85a:	2f0e      	cmp	r7, #14
 800a85c:	f300 8160 	bgt.w	800ab20 <_dtoa_r+0x710>
 800a860:	4b33      	ldr	r3, [pc, #204]	@ (800a930 <_dtoa_r+0x520>)
 800a862:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a866:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a86a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800a86e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a870:	2b00      	cmp	r3, #0
 800a872:	da03      	bge.n	800a87c <_dtoa_r+0x46c>
 800a874:	9b07      	ldr	r3, [sp, #28]
 800a876:	2b00      	cmp	r3, #0
 800a878:	f340 8100 	ble.w	800aa7c <_dtoa_r+0x66c>
 800a87c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a880:	4656      	mov	r6, sl
 800a882:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a886:	4620      	mov	r0, r4
 800a888:	4629      	mov	r1, r5
 800a88a:	f7f5 ff4f 	bl	800072c <__aeabi_ddiv>
 800a88e:	f7f6 f8d3 	bl	8000a38 <__aeabi_d2iz>
 800a892:	4680      	mov	r8, r0
 800a894:	f7f5 fdb6 	bl	8000404 <__aeabi_i2d>
 800a898:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a89c:	f7f5 fe1c 	bl	80004d8 <__aeabi_dmul>
 800a8a0:	4602      	mov	r2, r0
 800a8a2:	460b      	mov	r3, r1
 800a8a4:	4620      	mov	r0, r4
 800a8a6:	4629      	mov	r1, r5
 800a8a8:	f7f5 fc5e 	bl	8000168 <__aeabi_dsub>
 800a8ac:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800a8b0:	9d07      	ldr	r5, [sp, #28]
 800a8b2:	f806 4b01 	strb.w	r4, [r6], #1
 800a8b6:	eba6 040a 	sub.w	r4, r6, sl
 800a8ba:	42a5      	cmp	r5, r4
 800a8bc:	4602      	mov	r2, r0
 800a8be:	460b      	mov	r3, r1
 800a8c0:	f040 8116 	bne.w	800aaf0 <_dtoa_r+0x6e0>
 800a8c4:	f7f5 fc52 	bl	800016c <__adddf3>
 800a8c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a8cc:	4604      	mov	r4, r0
 800a8ce:	460d      	mov	r5, r1
 800a8d0:	f7f6 f892 	bl	80009f8 <__aeabi_dcmpgt>
 800a8d4:	2800      	cmp	r0, #0
 800a8d6:	f040 80f8 	bne.w	800aaca <_dtoa_r+0x6ba>
 800a8da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a8de:	4620      	mov	r0, r4
 800a8e0:	4629      	mov	r1, r5
 800a8e2:	f7f6 f861 	bl	80009a8 <__aeabi_dcmpeq>
 800a8e6:	b118      	cbz	r0, 800a8f0 <_dtoa_r+0x4e0>
 800a8e8:	f018 0f01 	tst.w	r8, #1
 800a8ec:	f040 80ed 	bne.w	800aaca <_dtoa_r+0x6ba>
 800a8f0:	4649      	mov	r1, r9
 800a8f2:	4658      	mov	r0, fp
 800a8f4:	f000 fc92 	bl	800b21c <_Bfree>
 800a8f8:	2300      	movs	r3, #0
 800a8fa:	7033      	strb	r3, [r6, #0]
 800a8fc:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800a8fe:	3701      	adds	r7, #1
 800a900:	601f      	str	r7, [r3, #0]
 800a902:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800a904:	2b00      	cmp	r3, #0
 800a906:	f000 8320 	beq.w	800af4a <_dtoa_r+0xb3a>
 800a90a:	601e      	str	r6, [r3, #0]
 800a90c:	e31d      	b.n	800af4a <_dtoa_r+0xb3a>
 800a90e:	07e2      	lsls	r2, r4, #31
 800a910:	d505      	bpl.n	800a91e <_dtoa_r+0x50e>
 800a912:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a916:	f7f5 fddf 	bl	80004d8 <__aeabi_dmul>
 800a91a:	2301      	movs	r3, #1
 800a91c:	3601      	adds	r6, #1
 800a91e:	1064      	asrs	r4, r4, #1
 800a920:	3508      	adds	r5, #8
 800a922:	e73f      	b.n	800a7a4 <_dtoa_r+0x394>
 800a924:	2602      	movs	r6, #2
 800a926:	e742      	b.n	800a7ae <_dtoa_r+0x39e>
 800a928:	9c07      	ldr	r4, [sp, #28]
 800a92a:	9704      	str	r7, [sp, #16]
 800a92c:	e761      	b.n	800a7f2 <_dtoa_r+0x3e2>
 800a92e:	bf00      	nop
 800a930:	0800f068 	.word	0x0800f068
 800a934:	0800f040 	.word	0x0800f040
 800a938:	3ff00000 	.word	0x3ff00000
 800a93c:	40240000 	.word	0x40240000
 800a940:	401c0000 	.word	0x401c0000
 800a944:	40140000 	.word	0x40140000
 800a948:	4b70      	ldr	r3, [pc, #448]	@ (800ab0c <_dtoa_r+0x6fc>)
 800a94a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a94c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a950:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a954:	4454      	add	r4, sl
 800a956:	2900      	cmp	r1, #0
 800a958:	d045      	beq.n	800a9e6 <_dtoa_r+0x5d6>
 800a95a:	2000      	movs	r0, #0
 800a95c:	496c      	ldr	r1, [pc, #432]	@ (800ab10 <_dtoa_r+0x700>)
 800a95e:	f7f5 fee5 	bl	800072c <__aeabi_ddiv>
 800a962:	4633      	mov	r3, r6
 800a964:	462a      	mov	r2, r5
 800a966:	f7f5 fbff 	bl	8000168 <__aeabi_dsub>
 800a96a:	4656      	mov	r6, sl
 800a96c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a970:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a974:	f7f6 f860 	bl	8000a38 <__aeabi_d2iz>
 800a978:	4605      	mov	r5, r0
 800a97a:	f7f5 fd43 	bl	8000404 <__aeabi_i2d>
 800a97e:	4602      	mov	r2, r0
 800a980:	460b      	mov	r3, r1
 800a982:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a986:	f7f5 fbef 	bl	8000168 <__aeabi_dsub>
 800a98a:	4602      	mov	r2, r0
 800a98c:	460b      	mov	r3, r1
 800a98e:	3530      	adds	r5, #48	@ 0x30
 800a990:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a994:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a998:	f806 5b01 	strb.w	r5, [r6], #1
 800a99c:	f7f6 f80e 	bl	80009bc <__aeabi_dcmplt>
 800a9a0:	2800      	cmp	r0, #0
 800a9a2:	d163      	bne.n	800aa6c <_dtoa_r+0x65c>
 800a9a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a9a8:	2000      	movs	r0, #0
 800a9aa:	495a      	ldr	r1, [pc, #360]	@ (800ab14 <_dtoa_r+0x704>)
 800a9ac:	f7f5 fbdc 	bl	8000168 <__aeabi_dsub>
 800a9b0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a9b4:	f7f6 f802 	bl	80009bc <__aeabi_dcmplt>
 800a9b8:	2800      	cmp	r0, #0
 800a9ba:	f040 8087 	bne.w	800aacc <_dtoa_r+0x6bc>
 800a9be:	42a6      	cmp	r6, r4
 800a9c0:	f43f af43 	beq.w	800a84a <_dtoa_r+0x43a>
 800a9c4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a9c8:	2200      	movs	r2, #0
 800a9ca:	4b53      	ldr	r3, [pc, #332]	@ (800ab18 <_dtoa_r+0x708>)
 800a9cc:	f7f5 fd84 	bl	80004d8 <__aeabi_dmul>
 800a9d0:	2200      	movs	r2, #0
 800a9d2:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a9d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a9da:	4b4f      	ldr	r3, [pc, #316]	@ (800ab18 <_dtoa_r+0x708>)
 800a9dc:	f7f5 fd7c 	bl	80004d8 <__aeabi_dmul>
 800a9e0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a9e4:	e7c4      	b.n	800a970 <_dtoa_r+0x560>
 800a9e6:	4631      	mov	r1, r6
 800a9e8:	4628      	mov	r0, r5
 800a9ea:	f7f5 fd75 	bl	80004d8 <__aeabi_dmul>
 800a9ee:	4656      	mov	r6, sl
 800a9f0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a9f4:	9413      	str	r4, [sp, #76]	@ 0x4c
 800a9f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a9fa:	f7f6 f81d 	bl	8000a38 <__aeabi_d2iz>
 800a9fe:	4605      	mov	r5, r0
 800aa00:	f7f5 fd00 	bl	8000404 <__aeabi_i2d>
 800aa04:	4602      	mov	r2, r0
 800aa06:	460b      	mov	r3, r1
 800aa08:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aa0c:	f7f5 fbac 	bl	8000168 <__aeabi_dsub>
 800aa10:	4602      	mov	r2, r0
 800aa12:	460b      	mov	r3, r1
 800aa14:	3530      	adds	r5, #48	@ 0x30
 800aa16:	f806 5b01 	strb.w	r5, [r6], #1
 800aa1a:	42a6      	cmp	r6, r4
 800aa1c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800aa20:	f04f 0200 	mov.w	r2, #0
 800aa24:	d124      	bne.n	800aa70 <_dtoa_r+0x660>
 800aa26:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800aa2a:	4b39      	ldr	r3, [pc, #228]	@ (800ab10 <_dtoa_r+0x700>)
 800aa2c:	f7f5 fb9e 	bl	800016c <__adddf3>
 800aa30:	4602      	mov	r2, r0
 800aa32:	460b      	mov	r3, r1
 800aa34:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aa38:	f7f5 ffde 	bl	80009f8 <__aeabi_dcmpgt>
 800aa3c:	2800      	cmp	r0, #0
 800aa3e:	d145      	bne.n	800aacc <_dtoa_r+0x6bc>
 800aa40:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800aa44:	2000      	movs	r0, #0
 800aa46:	4932      	ldr	r1, [pc, #200]	@ (800ab10 <_dtoa_r+0x700>)
 800aa48:	f7f5 fb8e 	bl	8000168 <__aeabi_dsub>
 800aa4c:	4602      	mov	r2, r0
 800aa4e:	460b      	mov	r3, r1
 800aa50:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aa54:	f7f5 ffb2 	bl	80009bc <__aeabi_dcmplt>
 800aa58:	2800      	cmp	r0, #0
 800aa5a:	f43f aef6 	beq.w	800a84a <_dtoa_r+0x43a>
 800aa5e:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800aa60:	1e73      	subs	r3, r6, #1
 800aa62:	9313      	str	r3, [sp, #76]	@ 0x4c
 800aa64:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800aa68:	2b30      	cmp	r3, #48	@ 0x30
 800aa6a:	d0f8      	beq.n	800aa5e <_dtoa_r+0x64e>
 800aa6c:	9f04      	ldr	r7, [sp, #16]
 800aa6e:	e73f      	b.n	800a8f0 <_dtoa_r+0x4e0>
 800aa70:	4b29      	ldr	r3, [pc, #164]	@ (800ab18 <_dtoa_r+0x708>)
 800aa72:	f7f5 fd31 	bl	80004d8 <__aeabi_dmul>
 800aa76:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aa7a:	e7bc      	b.n	800a9f6 <_dtoa_r+0x5e6>
 800aa7c:	d10c      	bne.n	800aa98 <_dtoa_r+0x688>
 800aa7e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800aa82:	2200      	movs	r2, #0
 800aa84:	4b25      	ldr	r3, [pc, #148]	@ (800ab1c <_dtoa_r+0x70c>)
 800aa86:	f7f5 fd27 	bl	80004d8 <__aeabi_dmul>
 800aa8a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800aa8e:	f7f5 ffa9 	bl	80009e4 <__aeabi_dcmpge>
 800aa92:	2800      	cmp	r0, #0
 800aa94:	f000 815b 	beq.w	800ad4e <_dtoa_r+0x93e>
 800aa98:	2400      	movs	r4, #0
 800aa9a:	4625      	mov	r5, r4
 800aa9c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800aa9e:	4656      	mov	r6, sl
 800aaa0:	43db      	mvns	r3, r3
 800aaa2:	9304      	str	r3, [sp, #16]
 800aaa4:	2700      	movs	r7, #0
 800aaa6:	4621      	mov	r1, r4
 800aaa8:	4658      	mov	r0, fp
 800aaaa:	f000 fbb7 	bl	800b21c <_Bfree>
 800aaae:	2d00      	cmp	r5, #0
 800aab0:	d0dc      	beq.n	800aa6c <_dtoa_r+0x65c>
 800aab2:	b12f      	cbz	r7, 800aac0 <_dtoa_r+0x6b0>
 800aab4:	42af      	cmp	r7, r5
 800aab6:	d003      	beq.n	800aac0 <_dtoa_r+0x6b0>
 800aab8:	4639      	mov	r1, r7
 800aaba:	4658      	mov	r0, fp
 800aabc:	f000 fbae 	bl	800b21c <_Bfree>
 800aac0:	4629      	mov	r1, r5
 800aac2:	4658      	mov	r0, fp
 800aac4:	f000 fbaa 	bl	800b21c <_Bfree>
 800aac8:	e7d0      	b.n	800aa6c <_dtoa_r+0x65c>
 800aaca:	9704      	str	r7, [sp, #16]
 800aacc:	4633      	mov	r3, r6
 800aace:	461e      	mov	r6, r3
 800aad0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800aad4:	2a39      	cmp	r2, #57	@ 0x39
 800aad6:	d107      	bne.n	800aae8 <_dtoa_r+0x6d8>
 800aad8:	459a      	cmp	sl, r3
 800aada:	d1f8      	bne.n	800aace <_dtoa_r+0x6be>
 800aadc:	9a04      	ldr	r2, [sp, #16]
 800aade:	3201      	adds	r2, #1
 800aae0:	9204      	str	r2, [sp, #16]
 800aae2:	2230      	movs	r2, #48	@ 0x30
 800aae4:	f88a 2000 	strb.w	r2, [sl]
 800aae8:	781a      	ldrb	r2, [r3, #0]
 800aaea:	3201      	adds	r2, #1
 800aaec:	701a      	strb	r2, [r3, #0]
 800aaee:	e7bd      	b.n	800aa6c <_dtoa_r+0x65c>
 800aaf0:	2200      	movs	r2, #0
 800aaf2:	4b09      	ldr	r3, [pc, #36]	@ (800ab18 <_dtoa_r+0x708>)
 800aaf4:	f7f5 fcf0 	bl	80004d8 <__aeabi_dmul>
 800aaf8:	2200      	movs	r2, #0
 800aafa:	2300      	movs	r3, #0
 800aafc:	4604      	mov	r4, r0
 800aafe:	460d      	mov	r5, r1
 800ab00:	f7f5 ff52 	bl	80009a8 <__aeabi_dcmpeq>
 800ab04:	2800      	cmp	r0, #0
 800ab06:	f43f aebc 	beq.w	800a882 <_dtoa_r+0x472>
 800ab0a:	e6f1      	b.n	800a8f0 <_dtoa_r+0x4e0>
 800ab0c:	0800f068 	.word	0x0800f068
 800ab10:	3fe00000 	.word	0x3fe00000
 800ab14:	3ff00000 	.word	0x3ff00000
 800ab18:	40240000 	.word	0x40240000
 800ab1c:	40140000 	.word	0x40140000
 800ab20:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800ab22:	2a00      	cmp	r2, #0
 800ab24:	f000 80db 	beq.w	800acde <_dtoa_r+0x8ce>
 800ab28:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800ab2a:	2a01      	cmp	r2, #1
 800ab2c:	f300 80bf 	bgt.w	800acae <_dtoa_r+0x89e>
 800ab30:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800ab32:	2a00      	cmp	r2, #0
 800ab34:	f000 80b7 	beq.w	800aca6 <_dtoa_r+0x896>
 800ab38:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800ab3c:	4646      	mov	r6, r8
 800ab3e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800ab40:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ab42:	2101      	movs	r1, #1
 800ab44:	441a      	add	r2, r3
 800ab46:	4658      	mov	r0, fp
 800ab48:	4498      	add	r8, r3
 800ab4a:	9209      	str	r2, [sp, #36]	@ 0x24
 800ab4c:	f000 fc64 	bl	800b418 <__i2b>
 800ab50:	4605      	mov	r5, r0
 800ab52:	b15e      	cbz	r6, 800ab6c <_dtoa_r+0x75c>
 800ab54:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	dd08      	ble.n	800ab6c <_dtoa_r+0x75c>
 800ab5a:	42b3      	cmp	r3, r6
 800ab5c:	bfa8      	it	ge
 800ab5e:	4633      	movge	r3, r6
 800ab60:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ab62:	eba8 0803 	sub.w	r8, r8, r3
 800ab66:	1af6      	subs	r6, r6, r3
 800ab68:	1ad3      	subs	r3, r2, r3
 800ab6a:	9309      	str	r3, [sp, #36]	@ 0x24
 800ab6c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ab6e:	b1f3      	cbz	r3, 800abae <_dtoa_r+0x79e>
 800ab70:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	f000 80b7 	beq.w	800ace6 <_dtoa_r+0x8d6>
 800ab78:	b18c      	cbz	r4, 800ab9e <_dtoa_r+0x78e>
 800ab7a:	4629      	mov	r1, r5
 800ab7c:	4622      	mov	r2, r4
 800ab7e:	4658      	mov	r0, fp
 800ab80:	f000 fd08 	bl	800b594 <__pow5mult>
 800ab84:	464a      	mov	r2, r9
 800ab86:	4601      	mov	r1, r0
 800ab88:	4605      	mov	r5, r0
 800ab8a:	4658      	mov	r0, fp
 800ab8c:	f000 fc5a 	bl	800b444 <__multiply>
 800ab90:	4649      	mov	r1, r9
 800ab92:	9004      	str	r0, [sp, #16]
 800ab94:	4658      	mov	r0, fp
 800ab96:	f000 fb41 	bl	800b21c <_Bfree>
 800ab9a:	9b04      	ldr	r3, [sp, #16]
 800ab9c:	4699      	mov	r9, r3
 800ab9e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aba0:	1b1a      	subs	r2, r3, r4
 800aba2:	d004      	beq.n	800abae <_dtoa_r+0x79e>
 800aba4:	4649      	mov	r1, r9
 800aba6:	4658      	mov	r0, fp
 800aba8:	f000 fcf4 	bl	800b594 <__pow5mult>
 800abac:	4681      	mov	r9, r0
 800abae:	2101      	movs	r1, #1
 800abb0:	4658      	mov	r0, fp
 800abb2:	f000 fc31 	bl	800b418 <__i2b>
 800abb6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800abb8:	4604      	mov	r4, r0
 800abba:	2b00      	cmp	r3, #0
 800abbc:	f000 81c9 	beq.w	800af52 <_dtoa_r+0xb42>
 800abc0:	461a      	mov	r2, r3
 800abc2:	4601      	mov	r1, r0
 800abc4:	4658      	mov	r0, fp
 800abc6:	f000 fce5 	bl	800b594 <__pow5mult>
 800abca:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800abcc:	4604      	mov	r4, r0
 800abce:	2b01      	cmp	r3, #1
 800abd0:	f300 808f 	bgt.w	800acf2 <_dtoa_r+0x8e2>
 800abd4:	9b02      	ldr	r3, [sp, #8]
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	f040 8087 	bne.w	800acea <_dtoa_r+0x8da>
 800abdc:	9b03      	ldr	r3, [sp, #12]
 800abde:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	f040 8083 	bne.w	800acee <_dtoa_r+0x8de>
 800abe8:	9b03      	ldr	r3, [sp, #12]
 800abea:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800abee:	0d1b      	lsrs	r3, r3, #20
 800abf0:	051b      	lsls	r3, r3, #20
 800abf2:	b12b      	cbz	r3, 800ac00 <_dtoa_r+0x7f0>
 800abf4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800abf6:	f108 0801 	add.w	r8, r8, #1
 800abfa:	3301      	adds	r3, #1
 800abfc:	9309      	str	r3, [sp, #36]	@ 0x24
 800abfe:	2301      	movs	r3, #1
 800ac00:	930a      	str	r3, [sp, #40]	@ 0x28
 800ac02:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	f000 81aa 	beq.w	800af5e <_dtoa_r+0xb4e>
 800ac0a:	6923      	ldr	r3, [r4, #16]
 800ac0c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ac10:	6918      	ldr	r0, [r3, #16]
 800ac12:	f000 fbb5 	bl	800b380 <__hi0bits>
 800ac16:	f1c0 0020 	rsb	r0, r0, #32
 800ac1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ac1c:	4418      	add	r0, r3
 800ac1e:	f010 001f 	ands.w	r0, r0, #31
 800ac22:	d071      	beq.n	800ad08 <_dtoa_r+0x8f8>
 800ac24:	f1c0 0320 	rsb	r3, r0, #32
 800ac28:	2b04      	cmp	r3, #4
 800ac2a:	dd65      	ble.n	800acf8 <_dtoa_r+0x8e8>
 800ac2c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ac2e:	f1c0 001c 	rsb	r0, r0, #28
 800ac32:	4403      	add	r3, r0
 800ac34:	4480      	add	r8, r0
 800ac36:	4406      	add	r6, r0
 800ac38:	9309      	str	r3, [sp, #36]	@ 0x24
 800ac3a:	f1b8 0f00 	cmp.w	r8, #0
 800ac3e:	dd05      	ble.n	800ac4c <_dtoa_r+0x83c>
 800ac40:	4649      	mov	r1, r9
 800ac42:	4642      	mov	r2, r8
 800ac44:	4658      	mov	r0, fp
 800ac46:	f000 fcff 	bl	800b648 <__lshift>
 800ac4a:	4681      	mov	r9, r0
 800ac4c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	dd05      	ble.n	800ac5e <_dtoa_r+0x84e>
 800ac52:	4621      	mov	r1, r4
 800ac54:	461a      	mov	r2, r3
 800ac56:	4658      	mov	r0, fp
 800ac58:	f000 fcf6 	bl	800b648 <__lshift>
 800ac5c:	4604      	mov	r4, r0
 800ac5e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d053      	beq.n	800ad0c <_dtoa_r+0x8fc>
 800ac64:	4621      	mov	r1, r4
 800ac66:	4648      	mov	r0, r9
 800ac68:	f000 fd5a 	bl	800b720 <__mcmp>
 800ac6c:	2800      	cmp	r0, #0
 800ac6e:	da4d      	bge.n	800ad0c <_dtoa_r+0x8fc>
 800ac70:	1e7b      	subs	r3, r7, #1
 800ac72:	4649      	mov	r1, r9
 800ac74:	9304      	str	r3, [sp, #16]
 800ac76:	220a      	movs	r2, #10
 800ac78:	2300      	movs	r3, #0
 800ac7a:	4658      	mov	r0, fp
 800ac7c:	f000 faf0 	bl	800b260 <__multadd>
 800ac80:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ac82:	4681      	mov	r9, r0
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	f000 816c 	beq.w	800af62 <_dtoa_r+0xb52>
 800ac8a:	2300      	movs	r3, #0
 800ac8c:	4629      	mov	r1, r5
 800ac8e:	220a      	movs	r2, #10
 800ac90:	4658      	mov	r0, fp
 800ac92:	f000 fae5 	bl	800b260 <__multadd>
 800ac96:	9b08      	ldr	r3, [sp, #32]
 800ac98:	4605      	mov	r5, r0
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	dc61      	bgt.n	800ad62 <_dtoa_r+0x952>
 800ac9e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800aca0:	2b02      	cmp	r3, #2
 800aca2:	dc3b      	bgt.n	800ad1c <_dtoa_r+0x90c>
 800aca4:	e05d      	b.n	800ad62 <_dtoa_r+0x952>
 800aca6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800aca8:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800acac:	e746      	b.n	800ab3c <_dtoa_r+0x72c>
 800acae:	9b07      	ldr	r3, [sp, #28]
 800acb0:	1e5c      	subs	r4, r3, #1
 800acb2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800acb4:	42a3      	cmp	r3, r4
 800acb6:	bfbf      	itttt	lt
 800acb8:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800acba:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 800acbc:	1ae3      	sublt	r3, r4, r3
 800acbe:	18d2      	addlt	r2, r2, r3
 800acc0:	bfa8      	it	ge
 800acc2:	1b1c      	subge	r4, r3, r4
 800acc4:	9b07      	ldr	r3, [sp, #28]
 800acc6:	bfbe      	ittt	lt
 800acc8:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800acca:	920e      	strlt	r2, [sp, #56]	@ 0x38
 800accc:	2400      	movlt	r4, #0
 800acce:	2b00      	cmp	r3, #0
 800acd0:	bfb5      	itete	lt
 800acd2:	eba8 0603 	sublt.w	r6, r8, r3
 800acd6:	4646      	movge	r6, r8
 800acd8:	2300      	movlt	r3, #0
 800acda:	9b07      	ldrge	r3, [sp, #28]
 800acdc:	e730      	b.n	800ab40 <_dtoa_r+0x730>
 800acde:	4646      	mov	r6, r8
 800ace0:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800ace2:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800ace4:	e735      	b.n	800ab52 <_dtoa_r+0x742>
 800ace6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ace8:	e75c      	b.n	800aba4 <_dtoa_r+0x794>
 800acea:	2300      	movs	r3, #0
 800acec:	e788      	b.n	800ac00 <_dtoa_r+0x7f0>
 800acee:	9b02      	ldr	r3, [sp, #8]
 800acf0:	e786      	b.n	800ac00 <_dtoa_r+0x7f0>
 800acf2:	2300      	movs	r3, #0
 800acf4:	930a      	str	r3, [sp, #40]	@ 0x28
 800acf6:	e788      	b.n	800ac0a <_dtoa_r+0x7fa>
 800acf8:	d09f      	beq.n	800ac3a <_dtoa_r+0x82a>
 800acfa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800acfc:	331c      	adds	r3, #28
 800acfe:	441a      	add	r2, r3
 800ad00:	4498      	add	r8, r3
 800ad02:	441e      	add	r6, r3
 800ad04:	9209      	str	r2, [sp, #36]	@ 0x24
 800ad06:	e798      	b.n	800ac3a <_dtoa_r+0x82a>
 800ad08:	4603      	mov	r3, r0
 800ad0a:	e7f6      	b.n	800acfa <_dtoa_r+0x8ea>
 800ad0c:	9b07      	ldr	r3, [sp, #28]
 800ad0e:	9704      	str	r7, [sp, #16]
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	dc20      	bgt.n	800ad56 <_dtoa_r+0x946>
 800ad14:	9308      	str	r3, [sp, #32]
 800ad16:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800ad18:	2b02      	cmp	r3, #2
 800ad1a:	dd1e      	ble.n	800ad5a <_dtoa_r+0x94a>
 800ad1c:	9b08      	ldr	r3, [sp, #32]
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	f47f aebc 	bne.w	800aa9c <_dtoa_r+0x68c>
 800ad24:	4621      	mov	r1, r4
 800ad26:	2205      	movs	r2, #5
 800ad28:	4658      	mov	r0, fp
 800ad2a:	f000 fa99 	bl	800b260 <__multadd>
 800ad2e:	4601      	mov	r1, r0
 800ad30:	4604      	mov	r4, r0
 800ad32:	4648      	mov	r0, r9
 800ad34:	f000 fcf4 	bl	800b720 <__mcmp>
 800ad38:	2800      	cmp	r0, #0
 800ad3a:	f77f aeaf 	ble.w	800aa9c <_dtoa_r+0x68c>
 800ad3e:	2331      	movs	r3, #49	@ 0x31
 800ad40:	4656      	mov	r6, sl
 800ad42:	f806 3b01 	strb.w	r3, [r6], #1
 800ad46:	9b04      	ldr	r3, [sp, #16]
 800ad48:	3301      	adds	r3, #1
 800ad4a:	9304      	str	r3, [sp, #16]
 800ad4c:	e6aa      	b.n	800aaa4 <_dtoa_r+0x694>
 800ad4e:	9c07      	ldr	r4, [sp, #28]
 800ad50:	9704      	str	r7, [sp, #16]
 800ad52:	4625      	mov	r5, r4
 800ad54:	e7f3      	b.n	800ad3e <_dtoa_r+0x92e>
 800ad56:	9b07      	ldr	r3, [sp, #28]
 800ad58:	9308      	str	r3, [sp, #32]
 800ad5a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	f000 8104 	beq.w	800af6a <_dtoa_r+0xb5a>
 800ad62:	2e00      	cmp	r6, #0
 800ad64:	dd05      	ble.n	800ad72 <_dtoa_r+0x962>
 800ad66:	4629      	mov	r1, r5
 800ad68:	4632      	mov	r2, r6
 800ad6a:	4658      	mov	r0, fp
 800ad6c:	f000 fc6c 	bl	800b648 <__lshift>
 800ad70:	4605      	mov	r5, r0
 800ad72:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d05a      	beq.n	800ae2e <_dtoa_r+0xa1e>
 800ad78:	4658      	mov	r0, fp
 800ad7a:	6869      	ldr	r1, [r5, #4]
 800ad7c:	f000 fa0e 	bl	800b19c <_Balloc>
 800ad80:	4606      	mov	r6, r0
 800ad82:	b928      	cbnz	r0, 800ad90 <_dtoa_r+0x980>
 800ad84:	4602      	mov	r2, r0
 800ad86:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800ad8a:	4b83      	ldr	r3, [pc, #524]	@ (800af98 <_dtoa_r+0xb88>)
 800ad8c:	f7ff bb54 	b.w	800a438 <_dtoa_r+0x28>
 800ad90:	692a      	ldr	r2, [r5, #16]
 800ad92:	f105 010c 	add.w	r1, r5, #12
 800ad96:	3202      	adds	r2, #2
 800ad98:	0092      	lsls	r2, r2, #2
 800ad9a:	300c      	adds	r0, #12
 800ad9c:	f7ff fa9b 	bl	800a2d6 <memcpy>
 800ada0:	2201      	movs	r2, #1
 800ada2:	4631      	mov	r1, r6
 800ada4:	4658      	mov	r0, fp
 800ada6:	f000 fc4f 	bl	800b648 <__lshift>
 800adaa:	462f      	mov	r7, r5
 800adac:	4605      	mov	r5, r0
 800adae:	f10a 0301 	add.w	r3, sl, #1
 800adb2:	9307      	str	r3, [sp, #28]
 800adb4:	9b08      	ldr	r3, [sp, #32]
 800adb6:	4453      	add	r3, sl
 800adb8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800adba:	9b02      	ldr	r3, [sp, #8]
 800adbc:	f003 0301 	and.w	r3, r3, #1
 800adc0:	930a      	str	r3, [sp, #40]	@ 0x28
 800adc2:	9b07      	ldr	r3, [sp, #28]
 800adc4:	4621      	mov	r1, r4
 800adc6:	3b01      	subs	r3, #1
 800adc8:	4648      	mov	r0, r9
 800adca:	9302      	str	r3, [sp, #8]
 800adcc:	f7ff fa96 	bl	800a2fc <quorem>
 800add0:	4639      	mov	r1, r7
 800add2:	9008      	str	r0, [sp, #32]
 800add4:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800add8:	4648      	mov	r0, r9
 800adda:	f000 fca1 	bl	800b720 <__mcmp>
 800adde:	462a      	mov	r2, r5
 800ade0:	9009      	str	r0, [sp, #36]	@ 0x24
 800ade2:	4621      	mov	r1, r4
 800ade4:	4658      	mov	r0, fp
 800ade6:	f000 fcb7 	bl	800b758 <__mdiff>
 800adea:	68c2      	ldr	r2, [r0, #12]
 800adec:	4606      	mov	r6, r0
 800adee:	bb02      	cbnz	r2, 800ae32 <_dtoa_r+0xa22>
 800adf0:	4601      	mov	r1, r0
 800adf2:	4648      	mov	r0, r9
 800adf4:	f000 fc94 	bl	800b720 <__mcmp>
 800adf8:	4602      	mov	r2, r0
 800adfa:	4631      	mov	r1, r6
 800adfc:	4658      	mov	r0, fp
 800adfe:	920c      	str	r2, [sp, #48]	@ 0x30
 800ae00:	f000 fa0c 	bl	800b21c <_Bfree>
 800ae04:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800ae06:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800ae08:	9e07      	ldr	r6, [sp, #28]
 800ae0a:	ea43 0102 	orr.w	r1, r3, r2
 800ae0e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ae10:	4319      	orrs	r1, r3
 800ae12:	d110      	bne.n	800ae36 <_dtoa_r+0xa26>
 800ae14:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ae18:	d029      	beq.n	800ae6e <_dtoa_r+0xa5e>
 800ae1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	dd02      	ble.n	800ae26 <_dtoa_r+0xa16>
 800ae20:	9b08      	ldr	r3, [sp, #32]
 800ae22:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800ae26:	9b02      	ldr	r3, [sp, #8]
 800ae28:	f883 8000 	strb.w	r8, [r3]
 800ae2c:	e63b      	b.n	800aaa6 <_dtoa_r+0x696>
 800ae2e:	4628      	mov	r0, r5
 800ae30:	e7bb      	b.n	800adaa <_dtoa_r+0x99a>
 800ae32:	2201      	movs	r2, #1
 800ae34:	e7e1      	b.n	800adfa <_dtoa_r+0x9ea>
 800ae36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	db04      	blt.n	800ae46 <_dtoa_r+0xa36>
 800ae3c:	9920      	ldr	r1, [sp, #128]	@ 0x80
 800ae3e:	430b      	orrs	r3, r1
 800ae40:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ae42:	430b      	orrs	r3, r1
 800ae44:	d120      	bne.n	800ae88 <_dtoa_r+0xa78>
 800ae46:	2a00      	cmp	r2, #0
 800ae48:	dded      	ble.n	800ae26 <_dtoa_r+0xa16>
 800ae4a:	4649      	mov	r1, r9
 800ae4c:	2201      	movs	r2, #1
 800ae4e:	4658      	mov	r0, fp
 800ae50:	f000 fbfa 	bl	800b648 <__lshift>
 800ae54:	4621      	mov	r1, r4
 800ae56:	4681      	mov	r9, r0
 800ae58:	f000 fc62 	bl	800b720 <__mcmp>
 800ae5c:	2800      	cmp	r0, #0
 800ae5e:	dc03      	bgt.n	800ae68 <_dtoa_r+0xa58>
 800ae60:	d1e1      	bne.n	800ae26 <_dtoa_r+0xa16>
 800ae62:	f018 0f01 	tst.w	r8, #1
 800ae66:	d0de      	beq.n	800ae26 <_dtoa_r+0xa16>
 800ae68:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ae6c:	d1d8      	bne.n	800ae20 <_dtoa_r+0xa10>
 800ae6e:	2339      	movs	r3, #57	@ 0x39
 800ae70:	9a02      	ldr	r2, [sp, #8]
 800ae72:	7013      	strb	r3, [r2, #0]
 800ae74:	4633      	mov	r3, r6
 800ae76:	461e      	mov	r6, r3
 800ae78:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800ae7c:	3b01      	subs	r3, #1
 800ae7e:	2a39      	cmp	r2, #57	@ 0x39
 800ae80:	d052      	beq.n	800af28 <_dtoa_r+0xb18>
 800ae82:	3201      	adds	r2, #1
 800ae84:	701a      	strb	r2, [r3, #0]
 800ae86:	e60e      	b.n	800aaa6 <_dtoa_r+0x696>
 800ae88:	2a00      	cmp	r2, #0
 800ae8a:	dd07      	ble.n	800ae9c <_dtoa_r+0xa8c>
 800ae8c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ae90:	d0ed      	beq.n	800ae6e <_dtoa_r+0xa5e>
 800ae92:	9a02      	ldr	r2, [sp, #8]
 800ae94:	f108 0301 	add.w	r3, r8, #1
 800ae98:	7013      	strb	r3, [r2, #0]
 800ae9a:	e604      	b.n	800aaa6 <_dtoa_r+0x696>
 800ae9c:	9b07      	ldr	r3, [sp, #28]
 800ae9e:	9a07      	ldr	r2, [sp, #28]
 800aea0:	f803 8c01 	strb.w	r8, [r3, #-1]
 800aea4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800aea6:	4293      	cmp	r3, r2
 800aea8:	d028      	beq.n	800aefc <_dtoa_r+0xaec>
 800aeaa:	4649      	mov	r1, r9
 800aeac:	2300      	movs	r3, #0
 800aeae:	220a      	movs	r2, #10
 800aeb0:	4658      	mov	r0, fp
 800aeb2:	f000 f9d5 	bl	800b260 <__multadd>
 800aeb6:	42af      	cmp	r7, r5
 800aeb8:	4681      	mov	r9, r0
 800aeba:	f04f 0300 	mov.w	r3, #0
 800aebe:	f04f 020a 	mov.w	r2, #10
 800aec2:	4639      	mov	r1, r7
 800aec4:	4658      	mov	r0, fp
 800aec6:	d107      	bne.n	800aed8 <_dtoa_r+0xac8>
 800aec8:	f000 f9ca 	bl	800b260 <__multadd>
 800aecc:	4607      	mov	r7, r0
 800aece:	4605      	mov	r5, r0
 800aed0:	9b07      	ldr	r3, [sp, #28]
 800aed2:	3301      	adds	r3, #1
 800aed4:	9307      	str	r3, [sp, #28]
 800aed6:	e774      	b.n	800adc2 <_dtoa_r+0x9b2>
 800aed8:	f000 f9c2 	bl	800b260 <__multadd>
 800aedc:	4629      	mov	r1, r5
 800aede:	4607      	mov	r7, r0
 800aee0:	2300      	movs	r3, #0
 800aee2:	220a      	movs	r2, #10
 800aee4:	4658      	mov	r0, fp
 800aee6:	f000 f9bb 	bl	800b260 <__multadd>
 800aeea:	4605      	mov	r5, r0
 800aeec:	e7f0      	b.n	800aed0 <_dtoa_r+0xac0>
 800aeee:	9b08      	ldr	r3, [sp, #32]
 800aef0:	2700      	movs	r7, #0
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	bfcc      	ite	gt
 800aef6:	461e      	movgt	r6, r3
 800aef8:	2601      	movle	r6, #1
 800aefa:	4456      	add	r6, sl
 800aefc:	4649      	mov	r1, r9
 800aefe:	2201      	movs	r2, #1
 800af00:	4658      	mov	r0, fp
 800af02:	f000 fba1 	bl	800b648 <__lshift>
 800af06:	4621      	mov	r1, r4
 800af08:	4681      	mov	r9, r0
 800af0a:	f000 fc09 	bl	800b720 <__mcmp>
 800af0e:	2800      	cmp	r0, #0
 800af10:	dcb0      	bgt.n	800ae74 <_dtoa_r+0xa64>
 800af12:	d102      	bne.n	800af1a <_dtoa_r+0xb0a>
 800af14:	f018 0f01 	tst.w	r8, #1
 800af18:	d1ac      	bne.n	800ae74 <_dtoa_r+0xa64>
 800af1a:	4633      	mov	r3, r6
 800af1c:	461e      	mov	r6, r3
 800af1e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800af22:	2a30      	cmp	r2, #48	@ 0x30
 800af24:	d0fa      	beq.n	800af1c <_dtoa_r+0xb0c>
 800af26:	e5be      	b.n	800aaa6 <_dtoa_r+0x696>
 800af28:	459a      	cmp	sl, r3
 800af2a:	d1a4      	bne.n	800ae76 <_dtoa_r+0xa66>
 800af2c:	9b04      	ldr	r3, [sp, #16]
 800af2e:	3301      	adds	r3, #1
 800af30:	9304      	str	r3, [sp, #16]
 800af32:	2331      	movs	r3, #49	@ 0x31
 800af34:	f88a 3000 	strb.w	r3, [sl]
 800af38:	e5b5      	b.n	800aaa6 <_dtoa_r+0x696>
 800af3a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800af3c:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800af9c <_dtoa_r+0xb8c>
 800af40:	b11b      	cbz	r3, 800af4a <_dtoa_r+0xb3a>
 800af42:	f10a 0308 	add.w	r3, sl, #8
 800af46:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800af48:	6013      	str	r3, [r2, #0]
 800af4a:	4650      	mov	r0, sl
 800af4c:	b017      	add	sp, #92	@ 0x5c
 800af4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af52:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800af54:	2b01      	cmp	r3, #1
 800af56:	f77f ae3d 	ble.w	800abd4 <_dtoa_r+0x7c4>
 800af5a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800af5c:	930a      	str	r3, [sp, #40]	@ 0x28
 800af5e:	2001      	movs	r0, #1
 800af60:	e65b      	b.n	800ac1a <_dtoa_r+0x80a>
 800af62:	9b08      	ldr	r3, [sp, #32]
 800af64:	2b00      	cmp	r3, #0
 800af66:	f77f aed6 	ble.w	800ad16 <_dtoa_r+0x906>
 800af6a:	4656      	mov	r6, sl
 800af6c:	4621      	mov	r1, r4
 800af6e:	4648      	mov	r0, r9
 800af70:	f7ff f9c4 	bl	800a2fc <quorem>
 800af74:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800af78:	9b08      	ldr	r3, [sp, #32]
 800af7a:	f806 8b01 	strb.w	r8, [r6], #1
 800af7e:	eba6 020a 	sub.w	r2, r6, sl
 800af82:	4293      	cmp	r3, r2
 800af84:	ddb3      	ble.n	800aeee <_dtoa_r+0xade>
 800af86:	4649      	mov	r1, r9
 800af88:	2300      	movs	r3, #0
 800af8a:	220a      	movs	r2, #10
 800af8c:	4658      	mov	r0, fp
 800af8e:	f000 f967 	bl	800b260 <__multadd>
 800af92:	4681      	mov	r9, r0
 800af94:	e7ea      	b.n	800af6c <_dtoa_r+0xb5c>
 800af96:	bf00      	nop
 800af98:	0800efc9 	.word	0x0800efc9
 800af9c:	0800ef4d 	.word	0x0800ef4d

0800afa0 <_free_r>:
 800afa0:	b538      	push	{r3, r4, r5, lr}
 800afa2:	4605      	mov	r5, r0
 800afa4:	2900      	cmp	r1, #0
 800afa6:	d040      	beq.n	800b02a <_free_r+0x8a>
 800afa8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800afac:	1f0c      	subs	r4, r1, #4
 800afae:	2b00      	cmp	r3, #0
 800afb0:	bfb8      	it	lt
 800afb2:	18e4      	addlt	r4, r4, r3
 800afb4:	f000 f8e6 	bl	800b184 <__malloc_lock>
 800afb8:	4a1c      	ldr	r2, [pc, #112]	@ (800b02c <_free_r+0x8c>)
 800afba:	6813      	ldr	r3, [r2, #0]
 800afbc:	b933      	cbnz	r3, 800afcc <_free_r+0x2c>
 800afbe:	6063      	str	r3, [r4, #4]
 800afc0:	6014      	str	r4, [r2, #0]
 800afc2:	4628      	mov	r0, r5
 800afc4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800afc8:	f000 b8e2 	b.w	800b190 <__malloc_unlock>
 800afcc:	42a3      	cmp	r3, r4
 800afce:	d908      	bls.n	800afe2 <_free_r+0x42>
 800afd0:	6820      	ldr	r0, [r4, #0]
 800afd2:	1821      	adds	r1, r4, r0
 800afd4:	428b      	cmp	r3, r1
 800afd6:	bf01      	itttt	eq
 800afd8:	6819      	ldreq	r1, [r3, #0]
 800afda:	685b      	ldreq	r3, [r3, #4]
 800afdc:	1809      	addeq	r1, r1, r0
 800afde:	6021      	streq	r1, [r4, #0]
 800afe0:	e7ed      	b.n	800afbe <_free_r+0x1e>
 800afe2:	461a      	mov	r2, r3
 800afe4:	685b      	ldr	r3, [r3, #4]
 800afe6:	b10b      	cbz	r3, 800afec <_free_r+0x4c>
 800afe8:	42a3      	cmp	r3, r4
 800afea:	d9fa      	bls.n	800afe2 <_free_r+0x42>
 800afec:	6811      	ldr	r1, [r2, #0]
 800afee:	1850      	adds	r0, r2, r1
 800aff0:	42a0      	cmp	r0, r4
 800aff2:	d10b      	bne.n	800b00c <_free_r+0x6c>
 800aff4:	6820      	ldr	r0, [r4, #0]
 800aff6:	4401      	add	r1, r0
 800aff8:	1850      	adds	r0, r2, r1
 800affa:	4283      	cmp	r3, r0
 800affc:	6011      	str	r1, [r2, #0]
 800affe:	d1e0      	bne.n	800afc2 <_free_r+0x22>
 800b000:	6818      	ldr	r0, [r3, #0]
 800b002:	685b      	ldr	r3, [r3, #4]
 800b004:	4408      	add	r0, r1
 800b006:	6010      	str	r0, [r2, #0]
 800b008:	6053      	str	r3, [r2, #4]
 800b00a:	e7da      	b.n	800afc2 <_free_r+0x22>
 800b00c:	d902      	bls.n	800b014 <_free_r+0x74>
 800b00e:	230c      	movs	r3, #12
 800b010:	602b      	str	r3, [r5, #0]
 800b012:	e7d6      	b.n	800afc2 <_free_r+0x22>
 800b014:	6820      	ldr	r0, [r4, #0]
 800b016:	1821      	adds	r1, r4, r0
 800b018:	428b      	cmp	r3, r1
 800b01a:	bf01      	itttt	eq
 800b01c:	6819      	ldreq	r1, [r3, #0]
 800b01e:	685b      	ldreq	r3, [r3, #4]
 800b020:	1809      	addeq	r1, r1, r0
 800b022:	6021      	streq	r1, [r4, #0]
 800b024:	6063      	str	r3, [r4, #4]
 800b026:	6054      	str	r4, [r2, #4]
 800b028:	e7cb      	b.n	800afc2 <_free_r+0x22>
 800b02a:	bd38      	pop	{r3, r4, r5, pc}
 800b02c:	20000a1c 	.word	0x20000a1c

0800b030 <malloc>:
 800b030:	4b02      	ldr	r3, [pc, #8]	@ (800b03c <malloc+0xc>)
 800b032:	4601      	mov	r1, r0
 800b034:	6818      	ldr	r0, [r3, #0]
 800b036:	f000 b825 	b.w	800b084 <_malloc_r>
 800b03a:	bf00      	nop
 800b03c:	20000040 	.word	0x20000040

0800b040 <sbrk_aligned>:
 800b040:	b570      	push	{r4, r5, r6, lr}
 800b042:	4e0f      	ldr	r6, [pc, #60]	@ (800b080 <sbrk_aligned+0x40>)
 800b044:	460c      	mov	r4, r1
 800b046:	6831      	ldr	r1, [r6, #0]
 800b048:	4605      	mov	r5, r0
 800b04a:	b911      	cbnz	r1, 800b052 <sbrk_aligned+0x12>
 800b04c:	f001 ffa0 	bl	800cf90 <_sbrk_r>
 800b050:	6030      	str	r0, [r6, #0]
 800b052:	4621      	mov	r1, r4
 800b054:	4628      	mov	r0, r5
 800b056:	f001 ff9b 	bl	800cf90 <_sbrk_r>
 800b05a:	1c43      	adds	r3, r0, #1
 800b05c:	d103      	bne.n	800b066 <sbrk_aligned+0x26>
 800b05e:	f04f 34ff 	mov.w	r4, #4294967295
 800b062:	4620      	mov	r0, r4
 800b064:	bd70      	pop	{r4, r5, r6, pc}
 800b066:	1cc4      	adds	r4, r0, #3
 800b068:	f024 0403 	bic.w	r4, r4, #3
 800b06c:	42a0      	cmp	r0, r4
 800b06e:	d0f8      	beq.n	800b062 <sbrk_aligned+0x22>
 800b070:	1a21      	subs	r1, r4, r0
 800b072:	4628      	mov	r0, r5
 800b074:	f001 ff8c 	bl	800cf90 <_sbrk_r>
 800b078:	3001      	adds	r0, #1
 800b07a:	d1f2      	bne.n	800b062 <sbrk_aligned+0x22>
 800b07c:	e7ef      	b.n	800b05e <sbrk_aligned+0x1e>
 800b07e:	bf00      	nop
 800b080:	20000a18 	.word	0x20000a18

0800b084 <_malloc_r>:
 800b084:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b088:	1ccd      	adds	r5, r1, #3
 800b08a:	f025 0503 	bic.w	r5, r5, #3
 800b08e:	3508      	adds	r5, #8
 800b090:	2d0c      	cmp	r5, #12
 800b092:	bf38      	it	cc
 800b094:	250c      	movcc	r5, #12
 800b096:	2d00      	cmp	r5, #0
 800b098:	4606      	mov	r6, r0
 800b09a:	db01      	blt.n	800b0a0 <_malloc_r+0x1c>
 800b09c:	42a9      	cmp	r1, r5
 800b09e:	d904      	bls.n	800b0aa <_malloc_r+0x26>
 800b0a0:	230c      	movs	r3, #12
 800b0a2:	6033      	str	r3, [r6, #0]
 800b0a4:	2000      	movs	r0, #0
 800b0a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b0aa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b180 <_malloc_r+0xfc>
 800b0ae:	f000 f869 	bl	800b184 <__malloc_lock>
 800b0b2:	f8d8 3000 	ldr.w	r3, [r8]
 800b0b6:	461c      	mov	r4, r3
 800b0b8:	bb44      	cbnz	r4, 800b10c <_malloc_r+0x88>
 800b0ba:	4629      	mov	r1, r5
 800b0bc:	4630      	mov	r0, r6
 800b0be:	f7ff ffbf 	bl	800b040 <sbrk_aligned>
 800b0c2:	1c43      	adds	r3, r0, #1
 800b0c4:	4604      	mov	r4, r0
 800b0c6:	d158      	bne.n	800b17a <_malloc_r+0xf6>
 800b0c8:	f8d8 4000 	ldr.w	r4, [r8]
 800b0cc:	4627      	mov	r7, r4
 800b0ce:	2f00      	cmp	r7, #0
 800b0d0:	d143      	bne.n	800b15a <_malloc_r+0xd6>
 800b0d2:	2c00      	cmp	r4, #0
 800b0d4:	d04b      	beq.n	800b16e <_malloc_r+0xea>
 800b0d6:	6823      	ldr	r3, [r4, #0]
 800b0d8:	4639      	mov	r1, r7
 800b0da:	4630      	mov	r0, r6
 800b0dc:	eb04 0903 	add.w	r9, r4, r3
 800b0e0:	f001 ff56 	bl	800cf90 <_sbrk_r>
 800b0e4:	4581      	cmp	r9, r0
 800b0e6:	d142      	bne.n	800b16e <_malloc_r+0xea>
 800b0e8:	6821      	ldr	r1, [r4, #0]
 800b0ea:	4630      	mov	r0, r6
 800b0ec:	1a6d      	subs	r5, r5, r1
 800b0ee:	4629      	mov	r1, r5
 800b0f0:	f7ff ffa6 	bl	800b040 <sbrk_aligned>
 800b0f4:	3001      	adds	r0, #1
 800b0f6:	d03a      	beq.n	800b16e <_malloc_r+0xea>
 800b0f8:	6823      	ldr	r3, [r4, #0]
 800b0fa:	442b      	add	r3, r5
 800b0fc:	6023      	str	r3, [r4, #0]
 800b0fe:	f8d8 3000 	ldr.w	r3, [r8]
 800b102:	685a      	ldr	r2, [r3, #4]
 800b104:	bb62      	cbnz	r2, 800b160 <_malloc_r+0xdc>
 800b106:	f8c8 7000 	str.w	r7, [r8]
 800b10a:	e00f      	b.n	800b12c <_malloc_r+0xa8>
 800b10c:	6822      	ldr	r2, [r4, #0]
 800b10e:	1b52      	subs	r2, r2, r5
 800b110:	d420      	bmi.n	800b154 <_malloc_r+0xd0>
 800b112:	2a0b      	cmp	r2, #11
 800b114:	d917      	bls.n	800b146 <_malloc_r+0xc2>
 800b116:	1961      	adds	r1, r4, r5
 800b118:	42a3      	cmp	r3, r4
 800b11a:	6025      	str	r5, [r4, #0]
 800b11c:	bf18      	it	ne
 800b11e:	6059      	strne	r1, [r3, #4]
 800b120:	6863      	ldr	r3, [r4, #4]
 800b122:	bf08      	it	eq
 800b124:	f8c8 1000 	streq.w	r1, [r8]
 800b128:	5162      	str	r2, [r4, r5]
 800b12a:	604b      	str	r3, [r1, #4]
 800b12c:	4630      	mov	r0, r6
 800b12e:	f000 f82f 	bl	800b190 <__malloc_unlock>
 800b132:	f104 000b 	add.w	r0, r4, #11
 800b136:	1d23      	adds	r3, r4, #4
 800b138:	f020 0007 	bic.w	r0, r0, #7
 800b13c:	1ac2      	subs	r2, r0, r3
 800b13e:	bf1c      	itt	ne
 800b140:	1a1b      	subne	r3, r3, r0
 800b142:	50a3      	strne	r3, [r4, r2]
 800b144:	e7af      	b.n	800b0a6 <_malloc_r+0x22>
 800b146:	6862      	ldr	r2, [r4, #4]
 800b148:	42a3      	cmp	r3, r4
 800b14a:	bf0c      	ite	eq
 800b14c:	f8c8 2000 	streq.w	r2, [r8]
 800b150:	605a      	strne	r2, [r3, #4]
 800b152:	e7eb      	b.n	800b12c <_malloc_r+0xa8>
 800b154:	4623      	mov	r3, r4
 800b156:	6864      	ldr	r4, [r4, #4]
 800b158:	e7ae      	b.n	800b0b8 <_malloc_r+0x34>
 800b15a:	463c      	mov	r4, r7
 800b15c:	687f      	ldr	r7, [r7, #4]
 800b15e:	e7b6      	b.n	800b0ce <_malloc_r+0x4a>
 800b160:	461a      	mov	r2, r3
 800b162:	685b      	ldr	r3, [r3, #4]
 800b164:	42a3      	cmp	r3, r4
 800b166:	d1fb      	bne.n	800b160 <_malloc_r+0xdc>
 800b168:	2300      	movs	r3, #0
 800b16a:	6053      	str	r3, [r2, #4]
 800b16c:	e7de      	b.n	800b12c <_malloc_r+0xa8>
 800b16e:	230c      	movs	r3, #12
 800b170:	4630      	mov	r0, r6
 800b172:	6033      	str	r3, [r6, #0]
 800b174:	f000 f80c 	bl	800b190 <__malloc_unlock>
 800b178:	e794      	b.n	800b0a4 <_malloc_r+0x20>
 800b17a:	6005      	str	r5, [r0, #0]
 800b17c:	e7d6      	b.n	800b12c <_malloc_r+0xa8>
 800b17e:	bf00      	nop
 800b180:	20000a1c 	.word	0x20000a1c

0800b184 <__malloc_lock>:
 800b184:	4801      	ldr	r0, [pc, #4]	@ (800b18c <__malloc_lock+0x8>)
 800b186:	f7ff b896 	b.w	800a2b6 <__retarget_lock_acquire_recursive>
 800b18a:	bf00      	nop
 800b18c:	20000a14 	.word	0x20000a14

0800b190 <__malloc_unlock>:
 800b190:	4801      	ldr	r0, [pc, #4]	@ (800b198 <__malloc_unlock+0x8>)
 800b192:	f7ff b891 	b.w	800a2b8 <__retarget_lock_release_recursive>
 800b196:	bf00      	nop
 800b198:	20000a14 	.word	0x20000a14

0800b19c <_Balloc>:
 800b19c:	b570      	push	{r4, r5, r6, lr}
 800b19e:	69c6      	ldr	r6, [r0, #28]
 800b1a0:	4604      	mov	r4, r0
 800b1a2:	460d      	mov	r5, r1
 800b1a4:	b976      	cbnz	r6, 800b1c4 <_Balloc+0x28>
 800b1a6:	2010      	movs	r0, #16
 800b1a8:	f7ff ff42 	bl	800b030 <malloc>
 800b1ac:	4602      	mov	r2, r0
 800b1ae:	61e0      	str	r0, [r4, #28]
 800b1b0:	b920      	cbnz	r0, 800b1bc <_Balloc+0x20>
 800b1b2:	216b      	movs	r1, #107	@ 0x6b
 800b1b4:	4b17      	ldr	r3, [pc, #92]	@ (800b214 <_Balloc+0x78>)
 800b1b6:	4818      	ldr	r0, [pc, #96]	@ (800b218 <_Balloc+0x7c>)
 800b1b8:	f001 ff00 	bl	800cfbc <__assert_func>
 800b1bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b1c0:	6006      	str	r6, [r0, #0]
 800b1c2:	60c6      	str	r6, [r0, #12]
 800b1c4:	69e6      	ldr	r6, [r4, #28]
 800b1c6:	68f3      	ldr	r3, [r6, #12]
 800b1c8:	b183      	cbz	r3, 800b1ec <_Balloc+0x50>
 800b1ca:	69e3      	ldr	r3, [r4, #28]
 800b1cc:	68db      	ldr	r3, [r3, #12]
 800b1ce:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b1d2:	b9b8      	cbnz	r0, 800b204 <_Balloc+0x68>
 800b1d4:	2101      	movs	r1, #1
 800b1d6:	fa01 f605 	lsl.w	r6, r1, r5
 800b1da:	1d72      	adds	r2, r6, #5
 800b1dc:	4620      	mov	r0, r4
 800b1de:	0092      	lsls	r2, r2, #2
 800b1e0:	f001 ff0a 	bl	800cff8 <_calloc_r>
 800b1e4:	b160      	cbz	r0, 800b200 <_Balloc+0x64>
 800b1e6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b1ea:	e00e      	b.n	800b20a <_Balloc+0x6e>
 800b1ec:	2221      	movs	r2, #33	@ 0x21
 800b1ee:	2104      	movs	r1, #4
 800b1f0:	4620      	mov	r0, r4
 800b1f2:	f001 ff01 	bl	800cff8 <_calloc_r>
 800b1f6:	69e3      	ldr	r3, [r4, #28]
 800b1f8:	60f0      	str	r0, [r6, #12]
 800b1fa:	68db      	ldr	r3, [r3, #12]
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d1e4      	bne.n	800b1ca <_Balloc+0x2e>
 800b200:	2000      	movs	r0, #0
 800b202:	bd70      	pop	{r4, r5, r6, pc}
 800b204:	6802      	ldr	r2, [r0, #0]
 800b206:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b20a:	2300      	movs	r3, #0
 800b20c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b210:	e7f7      	b.n	800b202 <_Balloc+0x66>
 800b212:	bf00      	nop
 800b214:	0800ef5a 	.word	0x0800ef5a
 800b218:	0800efda 	.word	0x0800efda

0800b21c <_Bfree>:
 800b21c:	b570      	push	{r4, r5, r6, lr}
 800b21e:	69c6      	ldr	r6, [r0, #28]
 800b220:	4605      	mov	r5, r0
 800b222:	460c      	mov	r4, r1
 800b224:	b976      	cbnz	r6, 800b244 <_Bfree+0x28>
 800b226:	2010      	movs	r0, #16
 800b228:	f7ff ff02 	bl	800b030 <malloc>
 800b22c:	4602      	mov	r2, r0
 800b22e:	61e8      	str	r0, [r5, #28]
 800b230:	b920      	cbnz	r0, 800b23c <_Bfree+0x20>
 800b232:	218f      	movs	r1, #143	@ 0x8f
 800b234:	4b08      	ldr	r3, [pc, #32]	@ (800b258 <_Bfree+0x3c>)
 800b236:	4809      	ldr	r0, [pc, #36]	@ (800b25c <_Bfree+0x40>)
 800b238:	f001 fec0 	bl	800cfbc <__assert_func>
 800b23c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b240:	6006      	str	r6, [r0, #0]
 800b242:	60c6      	str	r6, [r0, #12]
 800b244:	b13c      	cbz	r4, 800b256 <_Bfree+0x3a>
 800b246:	69eb      	ldr	r3, [r5, #28]
 800b248:	6862      	ldr	r2, [r4, #4]
 800b24a:	68db      	ldr	r3, [r3, #12]
 800b24c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b250:	6021      	str	r1, [r4, #0]
 800b252:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b256:	bd70      	pop	{r4, r5, r6, pc}
 800b258:	0800ef5a 	.word	0x0800ef5a
 800b25c:	0800efda 	.word	0x0800efda

0800b260 <__multadd>:
 800b260:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b264:	4607      	mov	r7, r0
 800b266:	460c      	mov	r4, r1
 800b268:	461e      	mov	r6, r3
 800b26a:	2000      	movs	r0, #0
 800b26c:	690d      	ldr	r5, [r1, #16]
 800b26e:	f101 0c14 	add.w	ip, r1, #20
 800b272:	f8dc 3000 	ldr.w	r3, [ip]
 800b276:	3001      	adds	r0, #1
 800b278:	b299      	uxth	r1, r3
 800b27a:	fb02 6101 	mla	r1, r2, r1, r6
 800b27e:	0c1e      	lsrs	r6, r3, #16
 800b280:	0c0b      	lsrs	r3, r1, #16
 800b282:	fb02 3306 	mla	r3, r2, r6, r3
 800b286:	b289      	uxth	r1, r1
 800b288:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b28c:	4285      	cmp	r5, r0
 800b28e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b292:	f84c 1b04 	str.w	r1, [ip], #4
 800b296:	dcec      	bgt.n	800b272 <__multadd+0x12>
 800b298:	b30e      	cbz	r6, 800b2de <__multadd+0x7e>
 800b29a:	68a3      	ldr	r3, [r4, #8]
 800b29c:	42ab      	cmp	r3, r5
 800b29e:	dc19      	bgt.n	800b2d4 <__multadd+0x74>
 800b2a0:	6861      	ldr	r1, [r4, #4]
 800b2a2:	4638      	mov	r0, r7
 800b2a4:	3101      	adds	r1, #1
 800b2a6:	f7ff ff79 	bl	800b19c <_Balloc>
 800b2aa:	4680      	mov	r8, r0
 800b2ac:	b928      	cbnz	r0, 800b2ba <__multadd+0x5a>
 800b2ae:	4602      	mov	r2, r0
 800b2b0:	21ba      	movs	r1, #186	@ 0xba
 800b2b2:	4b0c      	ldr	r3, [pc, #48]	@ (800b2e4 <__multadd+0x84>)
 800b2b4:	480c      	ldr	r0, [pc, #48]	@ (800b2e8 <__multadd+0x88>)
 800b2b6:	f001 fe81 	bl	800cfbc <__assert_func>
 800b2ba:	6922      	ldr	r2, [r4, #16]
 800b2bc:	f104 010c 	add.w	r1, r4, #12
 800b2c0:	3202      	adds	r2, #2
 800b2c2:	0092      	lsls	r2, r2, #2
 800b2c4:	300c      	adds	r0, #12
 800b2c6:	f7ff f806 	bl	800a2d6 <memcpy>
 800b2ca:	4621      	mov	r1, r4
 800b2cc:	4638      	mov	r0, r7
 800b2ce:	f7ff ffa5 	bl	800b21c <_Bfree>
 800b2d2:	4644      	mov	r4, r8
 800b2d4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b2d8:	3501      	adds	r5, #1
 800b2da:	615e      	str	r6, [r3, #20]
 800b2dc:	6125      	str	r5, [r4, #16]
 800b2de:	4620      	mov	r0, r4
 800b2e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b2e4:	0800efc9 	.word	0x0800efc9
 800b2e8:	0800efda 	.word	0x0800efda

0800b2ec <__s2b>:
 800b2ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b2f0:	4615      	mov	r5, r2
 800b2f2:	2209      	movs	r2, #9
 800b2f4:	461f      	mov	r7, r3
 800b2f6:	3308      	adds	r3, #8
 800b2f8:	460c      	mov	r4, r1
 800b2fa:	fb93 f3f2 	sdiv	r3, r3, r2
 800b2fe:	4606      	mov	r6, r0
 800b300:	2201      	movs	r2, #1
 800b302:	2100      	movs	r1, #0
 800b304:	429a      	cmp	r2, r3
 800b306:	db09      	blt.n	800b31c <__s2b+0x30>
 800b308:	4630      	mov	r0, r6
 800b30a:	f7ff ff47 	bl	800b19c <_Balloc>
 800b30e:	b940      	cbnz	r0, 800b322 <__s2b+0x36>
 800b310:	4602      	mov	r2, r0
 800b312:	21d3      	movs	r1, #211	@ 0xd3
 800b314:	4b18      	ldr	r3, [pc, #96]	@ (800b378 <__s2b+0x8c>)
 800b316:	4819      	ldr	r0, [pc, #100]	@ (800b37c <__s2b+0x90>)
 800b318:	f001 fe50 	bl	800cfbc <__assert_func>
 800b31c:	0052      	lsls	r2, r2, #1
 800b31e:	3101      	adds	r1, #1
 800b320:	e7f0      	b.n	800b304 <__s2b+0x18>
 800b322:	9b08      	ldr	r3, [sp, #32]
 800b324:	2d09      	cmp	r5, #9
 800b326:	6143      	str	r3, [r0, #20]
 800b328:	f04f 0301 	mov.w	r3, #1
 800b32c:	6103      	str	r3, [r0, #16]
 800b32e:	dd16      	ble.n	800b35e <__s2b+0x72>
 800b330:	f104 0909 	add.w	r9, r4, #9
 800b334:	46c8      	mov	r8, r9
 800b336:	442c      	add	r4, r5
 800b338:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b33c:	4601      	mov	r1, r0
 800b33e:	220a      	movs	r2, #10
 800b340:	4630      	mov	r0, r6
 800b342:	3b30      	subs	r3, #48	@ 0x30
 800b344:	f7ff ff8c 	bl	800b260 <__multadd>
 800b348:	45a0      	cmp	r8, r4
 800b34a:	d1f5      	bne.n	800b338 <__s2b+0x4c>
 800b34c:	f1a5 0408 	sub.w	r4, r5, #8
 800b350:	444c      	add	r4, r9
 800b352:	1b2d      	subs	r5, r5, r4
 800b354:	1963      	adds	r3, r4, r5
 800b356:	42bb      	cmp	r3, r7
 800b358:	db04      	blt.n	800b364 <__s2b+0x78>
 800b35a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b35e:	2509      	movs	r5, #9
 800b360:	340a      	adds	r4, #10
 800b362:	e7f6      	b.n	800b352 <__s2b+0x66>
 800b364:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b368:	4601      	mov	r1, r0
 800b36a:	220a      	movs	r2, #10
 800b36c:	4630      	mov	r0, r6
 800b36e:	3b30      	subs	r3, #48	@ 0x30
 800b370:	f7ff ff76 	bl	800b260 <__multadd>
 800b374:	e7ee      	b.n	800b354 <__s2b+0x68>
 800b376:	bf00      	nop
 800b378:	0800efc9 	.word	0x0800efc9
 800b37c:	0800efda 	.word	0x0800efda

0800b380 <__hi0bits>:
 800b380:	4603      	mov	r3, r0
 800b382:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800b386:	bf3a      	itte	cc
 800b388:	0403      	lslcc	r3, r0, #16
 800b38a:	2010      	movcc	r0, #16
 800b38c:	2000      	movcs	r0, #0
 800b38e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b392:	bf3c      	itt	cc
 800b394:	021b      	lslcc	r3, r3, #8
 800b396:	3008      	addcc	r0, #8
 800b398:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b39c:	bf3c      	itt	cc
 800b39e:	011b      	lslcc	r3, r3, #4
 800b3a0:	3004      	addcc	r0, #4
 800b3a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b3a6:	bf3c      	itt	cc
 800b3a8:	009b      	lslcc	r3, r3, #2
 800b3aa:	3002      	addcc	r0, #2
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	db05      	blt.n	800b3bc <__hi0bits+0x3c>
 800b3b0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800b3b4:	f100 0001 	add.w	r0, r0, #1
 800b3b8:	bf08      	it	eq
 800b3ba:	2020      	moveq	r0, #32
 800b3bc:	4770      	bx	lr

0800b3be <__lo0bits>:
 800b3be:	6803      	ldr	r3, [r0, #0]
 800b3c0:	4602      	mov	r2, r0
 800b3c2:	f013 0007 	ands.w	r0, r3, #7
 800b3c6:	d00b      	beq.n	800b3e0 <__lo0bits+0x22>
 800b3c8:	07d9      	lsls	r1, r3, #31
 800b3ca:	d421      	bmi.n	800b410 <__lo0bits+0x52>
 800b3cc:	0798      	lsls	r0, r3, #30
 800b3ce:	bf49      	itett	mi
 800b3d0:	085b      	lsrmi	r3, r3, #1
 800b3d2:	089b      	lsrpl	r3, r3, #2
 800b3d4:	2001      	movmi	r0, #1
 800b3d6:	6013      	strmi	r3, [r2, #0]
 800b3d8:	bf5c      	itt	pl
 800b3da:	2002      	movpl	r0, #2
 800b3dc:	6013      	strpl	r3, [r2, #0]
 800b3de:	4770      	bx	lr
 800b3e0:	b299      	uxth	r1, r3
 800b3e2:	b909      	cbnz	r1, 800b3e8 <__lo0bits+0x2a>
 800b3e4:	2010      	movs	r0, #16
 800b3e6:	0c1b      	lsrs	r3, r3, #16
 800b3e8:	b2d9      	uxtb	r1, r3
 800b3ea:	b909      	cbnz	r1, 800b3f0 <__lo0bits+0x32>
 800b3ec:	3008      	adds	r0, #8
 800b3ee:	0a1b      	lsrs	r3, r3, #8
 800b3f0:	0719      	lsls	r1, r3, #28
 800b3f2:	bf04      	itt	eq
 800b3f4:	091b      	lsreq	r3, r3, #4
 800b3f6:	3004      	addeq	r0, #4
 800b3f8:	0799      	lsls	r1, r3, #30
 800b3fa:	bf04      	itt	eq
 800b3fc:	089b      	lsreq	r3, r3, #2
 800b3fe:	3002      	addeq	r0, #2
 800b400:	07d9      	lsls	r1, r3, #31
 800b402:	d403      	bmi.n	800b40c <__lo0bits+0x4e>
 800b404:	085b      	lsrs	r3, r3, #1
 800b406:	f100 0001 	add.w	r0, r0, #1
 800b40a:	d003      	beq.n	800b414 <__lo0bits+0x56>
 800b40c:	6013      	str	r3, [r2, #0]
 800b40e:	4770      	bx	lr
 800b410:	2000      	movs	r0, #0
 800b412:	4770      	bx	lr
 800b414:	2020      	movs	r0, #32
 800b416:	4770      	bx	lr

0800b418 <__i2b>:
 800b418:	b510      	push	{r4, lr}
 800b41a:	460c      	mov	r4, r1
 800b41c:	2101      	movs	r1, #1
 800b41e:	f7ff febd 	bl	800b19c <_Balloc>
 800b422:	4602      	mov	r2, r0
 800b424:	b928      	cbnz	r0, 800b432 <__i2b+0x1a>
 800b426:	f240 1145 	movw	r1, #325	@ 0x145
 800b42a:	4b04      	ldr	r3, [pc, #16]	@ (800b43c <__i2b+0x24>)
 800b42c:	4804      	ldr	r0, [pc, #16]	@ (800b440 <__i2b+0x28>)
 800b42e:	f001 fdc5 	bl	800cfbc <__assert_func>
 800b432:	2301      	movs	r3, #1
 800b434:	6144      	str	r4, [r0, #20]
 800b436:	6103      	str	r3, [r0, #16]
 800b438:	bd10      	pop	{r4, pc}
 800b43a:	bf00      	nop
 800b43c:	0800efc9 	.word	0x0800efc9
 800b440:	0800efda 	.word	0x0800efda

0800b444 <__multiply>:
 800b444:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b448:	4614      	mov	r4, r2
 800b44a:	690a      	ldr	r2, [r1, #16]
 800b44c:	6923      	ldr	r3, [r4, #16]
 800b44e:	460f      	mov	r7, r1
 800b450:	429a      	cmp	r2, r3
 800b452:	bfa2      	ittt	ge
 800b454:	4623      	movge	r3, r4
 800b456:	460c      	movge	r4, r1
 800b458:	461f      	movge	r7, r3
 800b45a:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800b45e:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800b462:	68a3      	ldr	r3, [r4, #8]
 800b464:	6861      	ldr	r1, [r4, #4]
 800b466:	eb0a 0609 	add.w	r6, sl, r9
 800b46a:	42b3      	cmp	r3, r6
 800b46c:	b085      	sub	sp, #20
 800b46e:	bfb8      	it	lt
 800b470:	3101      	addlt	r1, #1
 800b472:	f7ff fe93 	bl	800b19c <_Balloc>
 800b476:	b930      	cbnz	r0, 800b486 <__multiply+0x42>
 800b478:	4602      	mov	r2, r0
 800b47a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800b47e:	4b43      	ldr	r3, [pc, #268]	@ (800b58c <__multiply+0x148>)
 800b480:	4843      	ldr	r0, [pc, #268]	@ (800b590 <__multiply+0x14c>)
 800b482:	f001 fd9b 	bl	800cfbc <__assert_func>
 800b486:	f100 0514 	add.w	r5, r0, #20
 800b48a:	462b      	mov	r3, r5
 800b48c:	2200      	movs	r2, #0
 800b48e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b492:	4543      	cmp	r3, r8
 800b494:	d321      	bcc.n	800b4da <__multiply+0x96>
 800b496:	f107 0114 	add.w	r1, r7, #20
 800b49a:	f104 0214 	add.w	r2, r4, #20
 800b49e:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800b4a2:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800b4a6:	9302      	str	r3, [sp, #8]
 800b4a8:	1b13      	subs	r3, r2, r4
 800b4aa:	3b15      	subs	r3, #21
 800b4ac:	f023 0303 	bic.w	r3, r3, #3
 800b4b0:	3304      	adds	r3, #4
 800b4b2:	f104 0715 	add.w	r7, r4, #21
 800b4b6:	42ba      	cmp	r2, r7
 800b4b8:	bf38      	it	cc
 800b4ba:	2304      	movcc	r3, #4
 800b4bc:	9301      	str	r3, [sp, #4]
 800b4be:	9b02      	ldr	r3, [sp, #8]
 800b4c0:	9103      	str	r1, [sp, #12]
 800b4c2:	428b      	cmp	r3, r1
 800b4c4:	d80c      	bhi.n	800b4e0 <__multiply+0x9c>
 800b4c6:	2e00      	cmp	r6, #0
 800b4c8:	dd03      	ble.n	800b4d2 <__multiply+0x8e>
 800b4ca:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d05a      	beq.n	800b588 <__multiply+0x144>
 800b4d2:	6106      	str	r6, [r0, #16]
 800b4d4:	b005      	add	sp, #20
 800b4d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4da:	f843 2b04 	str.w	r2, [r3], #4
 800b4de:	e7d8      	b.n	800b492 <__multiply+0x4e>
 800b4e0:	f8b1 a000 	ldrh.w	sl, [r1]
 800b4e4:	f1ba 0f00 	cmp.w	sl, #0
 800b4e8:	d023      	beq.n	800b532 <__multiply+0xee>
 800b4ea:	46a9      	mov	r9, r5
 800b4ec:	f04f 0c00 	mov.w	ip, #0
 800b4f0:	f104 0e14 	add.w	lr, r4, #20
 800b4f4:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b4f8:	f8d9 3000 	ldr.w	r3, [r9]
 800b4fc:	fa1f fb87 	uxth.w	fp, r7
 800b500:	b29b      	uxth	r3, r3
 800b502:	fb0a 330b 	mla	r3, sl, fp, r3
 800b506:	4463      	add	r3, ip
 800b508:	f8d9 c000 	ldr.w	ip, [r9]
 800b50c:	0c3f      	lsrs	r7, r7, #16
 800b50e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800b512:	fb0a c707 	mla	r7, sl, r7, ip
 800b516:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800b51a:	b29b      	uxth	r3, r3
 800b51c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b520:	4572      	cmp	r2, lr
 800b522:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b526:	f849 3b04 	str.w	r3, [r9], #4
 800b52a:	d8e3      	bhi.n	800b4f4 <__multiply+0xb0>
 800b52c:	9b01      	ldr	r3, [sp, #4]
 800b52e:	f845 c003 	str.w	ip, [r5, r3]
 800b532:	9b03      	ldr	r3, [sp, #12]
 800b534:	3104      	adds	r1, #4
 800b536:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800b53a:	f1b9 0f00 	cmp.w	r9, #0
 800b53e:	d021      	beq.n	800b584 <__multiply+0x140>
 800b540:	46ae      	mov	lr, r5
 800b542:	f04f 0a00 	mov.w	sl, #0
 800b546:	682b      	ldr	r3, [r5, #0]
 800b548:	f104 0c14 	add.w	ip, r4, #20
 800b54c:	f8bc b000 	ldrh.w	fp, [ip]
 800b550:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800b554:	b29b      	uxth	r3, r3
 800b556:	fb09 770b 	mla	r7, r9, fp, r7
 800b55a:	4457      	add	r7, sl
 800b55c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b560:	f84e 3b04 	str.w	r3, [lr], #4
 800b564:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b568:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b56c:	f8be 3000 	ldrh.w	r3, [lr]
 800b570:	4562      	cmp	r2, ip
 800b572:	fb09 330a 	mla	r3, r9, sl, r3
 800b576:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800b57a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b57e:	d8e5      	bhi.n	800b54c <__multiply+0x108>
 800b580:	9f01      	ldr	r7, [sp, #4]
 800b582:	51eb      	str	r3, [r5, r7]
 800b584:	3504      	adds	r5, #4
 800b586:	e79a      	b.n	800b4be <__multiply+0x7a>
 800b588:	3e01      	subs	r6, #1
 800b58a:	e79c      	b.n	800b4c6 <__multiply+0x82>
 800b58c:	0800efc9 	.word	0x0800efc9
 800b590:	0800efda 	.word	0x0800efda

0800b594 <__pow5mult>:
 800b594:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b598:	4615      	mov	r5, r2
 800b59a:	f012 0203 	ands.w	r2, r2, #3
 800b59e:	4607      	mov	r7, r0
 800b5a0:	460e      	mov	r6, r1
 800b5a2:	d007      	beq.n	800b5b4 <__pow5mult+0x20>
 800b5a4:	4c25      	ldr	r4, [pc, #148]	@ (800b63c <__pow5mult+0xa8>)
 800b5a6:	3a01      	subs	r2, #1
 800b5a8:	2300      	movs	r3, #0
 800b5aa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b5ae:	f7ff fe57 	bl	800b260 <__multadd>
 800b5b2:	4606      	mov	r6, r0
 800b5b4:	10ad      	asrs	r5, r5, #2
 800b5b6:	d03d      	beq.n	800b634 <__pow5mult+0xa0>
 800b5b8:	69fc      	ldr	r4, [r7, #28]
 800b5ba:	b97c      	cbnz	r4, 800b5dc <__pow5mult+0x48>
 800b5bc:	2010      	movs	r0, #16
 800b5be:	f7ff fd37 	bl	800b030 <malloc>
 800b5c2:	4602      	mov	r2, r0
 800b5c4:	61f8      	str	r0, [r7, #28]
 800b5c6:	b928      	cbnz	r0, 800b5d4 <__pow5mult+0x40>
 800b5c8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800b5cc:	4b1c      	ldr	r3, [pc, #112]	@ (800b640 <__pow5mult+0xac>)
 800b5ce:	481d      	ldr	r0, [pc, #116]	@ (800b644 <__pow5mult+0xb0>)
 800b5d0:	f001 fcf4 	bl	800cfbc <__assert_func>
 800b5d4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b5d8:	6004      	str	r4, [r0, #0]
 800b5da:	60c4      	str	r4, [r0, #12]
 800b5dc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800b5e0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b5e4:	b94c      	cbnz	r4, 800b5fa <__pow5mult+0x66>
 800b5e6:	f240 2171 	movw	r1, #625	@ 0x271
 800b5ea:	4638      	mov	r0, r7
 800b5ec:	f7ff ff14 	bl	800b418 <__i2b>
 800b5f0:	2300      	movs	r3, #0
 800b5f2:	4604      	mov	r4, r0
 800b5f4:	f8c8 0008 	str.w	r0, [r8, #8]
 800b5f8:	6003      	str	r3, [r0, #0]
 800b5fa:	f04f 0900 	mov.w	r9, #0
 800b5fe:	07eb      	lsls	r3, r5, #31
 800b600:	d50a      	bpl.n	800b618 <__pow5mult+0x84>
 800b602:	4631      	mov	r1, r6
 800b604:	4622      	mov	r2, r4
 800b606:	4638      	mov	r0, r7
 800b608:	f7ff ff1c 	bl	800b444 <__multiply>
 800b60c:	4680      	mov	r8, r0
 800b60e:	4631      	mov	r1, r6
 800b610:	4638      	mov	r0, r7
 800b612:	f7ff fe03 	bl	800b21c <_Bfree>
 800b616:	4646      	mov	r6, r8
 800b618:	106d      	asrs	r5, r5, #1
 800b61a:	d00b      	beq.n	800b634 <__pow5mult+0xa0>
 800b61c:	6820      	ldr	r0, [r4, #0]
 800b61e:	b938      	cbnz	r0, 800b630 <__pow5mult+0x9c>
 800b620:	4622      	mov	r2, r4
 800b622:	4621      	mov	r1, r4
 800b624:	4638      	mov	r0, r7
 800b626:	f7ff ff0d 	bl	800b444 <__multiply>
 800b62a:	6020      	str	r0, [r4, #0]
 800b62c:	f8c0 9000 	str.w	r9, [r0]
 800b630:	4604      	mov	r4, r0
 800b632:	e7e4      	b.n	800b5fe <__pow5mult+0x6a>
 800b634:	4630      	mov	r0, r6
 800b636:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b63a:	bf00      	nop
 800b63c:	0800f034 	.word	0x0800f034
 800b640:	0800ef5a 	.word	0x0800ef5a
 800b644:	0800efda 	.word	0x0800efda

0800b648 <__lshift>:
 800b648:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b64c:	460c      	mov	r4, r1
 800b64e:	4607      	mov	r7, r0
 800b650:	4691      	mov	r9, r2
 800b652:	6923      	ldr	r3, [r4, #16]
 800b654:	6849      	ldr	r1, [r1, #4]
 800b656:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b65a:	68a3      	ldr	r3, [r4, #8]
 800b65c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b660:	f108 0601 	add.w	r6, r8, #1
 800b664:	42b3      	cmp	r3, r6
 800b666:	db0b      	blt.n	800b680 <__lshift+0x38>
 800b668:	4638      	mov	r0, r7
 800b66a:	f7ff fd97 	bl	800b19c <_Balloc>
 800b66e:	4605      	mov	r5, r0
 800b670:	b948      	cbnz	r0, 800b686 <__lshift+0x3e>
 800b672:	4602      	mov	r2, r0
 800b674:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800b678:	4b27      	ldr	r3, [pc, #156]	@ (800b718 <__lshift+0xd0>)
 800b67a:	4828      	ldr	r0, [pc, #160]	@ (800b71c <__lshift+0xd4>)
 800b67c:	f001 fc9e 	bl	800cfbc <__assert_func>
 800b680:	3101      	adds	r1, #1
 800b682:	005b      	lsls	r3, r3, #1
 800b684:	e7ee      	b.n	800b664 <__lshift+0x1c>
 800b686:	2300      	movs	r3, #0
 800b688:	f100 0114 	add.w	r1, r0, #20
 800b68c:	f100 0210 	add.w	r2, r0, #16
 800b690:	4618      	mov	r0, r3
 800b692:	4553      	cmp	r3, sl
 800b694:	db33      	blt.n	800b6fe <__lshift+0xb6>
 800b696:	6920      	ldr	r0, [r4, #16]
 800b698:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b69c:	f104 0314 	add.w	r3, r4, #20
 800b6a0:	f019 091f 	ands.w	r9, r9, #31
 800b6a4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b6a8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b6ac:	d02b      	beq.n	800b706 <__lshift+0xbe>
 800b6ae:	468a      	mov	sl, r1
 800b6b0:	2200      	movs	r2, #0
 800b6b2:	f1c9 0e20 	rsb	lr, r9, #32
 800b6b6:	6818      	ldr	r0, [r3, #0]
 800b6b8:	fa00 f009 	lsl.w	r0, r0, r9
 800b6bc:	4310      	orrs	r0, r2
 800b6be:	f84a 0b04 	str.w	r0, [sl], #4
 800b6c2:	f853 2b04 	ldr.w	r2, [r3], #4
 800b6c6:	459c      	cmp	ip, r3
 800b6c8:	fa22 f20e 	lsr.w	r2, r2, lr
 800b6cc:	d8f3      	bhi.n	800b6b6 <__lshift+0x6e>
 800b6ce:	ebac 0304 	sub.w	r3, ip, r4
 800b6d2:	3b15      	subs	r3, #21
 800b6d4:	f023 0303 	bic.w	r3, r3, #3
 800b6d8:	3304      	adds	r3, #4
 800b6da:	f104 0015 	add.w	r0, r4, #21
 800b6de:	4584      	cmp	ip, r0
 800b6e0:	bf38      	it	cc
 800b6e2:	2304      	movcc	r3, #4
 800b6e4:	50ca      	str	r2, [r1, r3]
 800b6e6:	b10a      	cbz	r2, 800b6ec <__lshift+0xa4>
 800b6e8:	f108 0602 	add.w	r6, r8, #2
 800b6ec:	3e01      	subs	r6, #1
 800b6ee:	4638      	mov	r0, r7
 800b6f0:	4621      	mov	r1, r4
 800b6f2:	612e      	str	r6, [r5, #16]
 800b6f4:	f7ff fd92 	bl	800b21c <_Bfree>
 800b6f8:	4628      	mov	r0, r5
 800b6fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b6fe:	f842 0f04 	str.w	r0, [r2, #4]!
 800b702:	3301      	adds	r3, #1
 800b704:	e7c5      	b.n	800b692 <__lshift+0x4a>
 800b706:	3904      	subs	r1, #4
 800b708:	f853 2b04 	ldr.w	r2, [r3], #4
 800b70c:	459c      	cmp	ip, r3
 800b70e:	f841 2f04 	str.w	r2, [r1, #4]!
 800b712:	d8f9      	bhi.n	800b708 <__lshift+0xc0>
 800b714:	e7ea      	b.n	800b6ec <__lshift+0xa4>
 800b716:	bf00      	nop
 800b718:	0800efc9 	.word	0x0800efc9
 800b71c:	0800efda 	.word	0x0800efda

0800b720 <__mcmp>:
 800b720:	4603      	mov	r3, r0
 800b722:	690a      	ldr	r2, [r1, #16]
 800b724:	6900      	ldr	r0, [r0, #16]
 800b726:	b530      	push	{r4, r5, lr}
 800b728:	1a80      	subs	r0, r0, r2
 800b72a:	d10e      	bne.n	800b74a <__mcmp+0x2a>
 800b72c:	3314      	adds	r3, #20
 800b72e:	3114      	adds	r1, #20
 800b730:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b734:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b738:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b73c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b740:	4295      	cmp	r5, r2
 800b742:	d003      	beq.n	800b74c <__mcmp+0x2c>
 800b744:	d205      	bcs.n	800b752 <__mcmp+0x32>
 800b746:	f04f 30ff 	mov.w	r0, #4294967295
 800b74a:	bd30      	pop	{r4, r5, pc}
 800b74c:	42a3      	cmp	r3, r4
 800b74e:	d3f3      	bcc.n	800b738 <__mcmp+0x18>
 800b750:	e7fb      	b.n	800b74a <__mcmp+0x2a>
 800b752:	2001      	movs	r0, #1
 800b754:	e7f9      	b.n	800b74a <__mcmp+0x2a>
	...

0800b758 <__mdiff>:
 800b758:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b75c:	4689      	mov	r9, r1
 800b75e:	4606      	mov	r6, r0
 800b760:	4611      	mov	r1, r2
 800b762:	4648      	mov	r0, r9
 800b764:	4614      	mov	r4, r2
 800b766:	f7ff ffdb 	bl	800b720 <__mcmp>
 800b76a:	1e05      	subs	r5, r0, #0
 800b76c:	d112      	bne.n	800b794 <__mdiff+0x3c>
 800b76e:	4629      	mov	r1, r5
 800b770:	4630      	mov	r0, r6
 800b772:	f7ff fd13 	bl	800b19c <_Balloc>
 800b776:	4602      	mov	r2, r0
 800b778:	b928      	cbnz	r0, 800b786 <__mdiff+0x2e>
 800b77a:	f240 2137 	movw	r1, #567	@ 0x237
 800b77e:	4b3e      	ldr	r3, [pc, #248]	@ (800b878 <__mdiff+0x120>)
 800b780:	483e      	ldr	r0, [pc, #248]	@ (800b87c <__mdiff+0x124>)
 800b782:	f001 fc1b 	bl	800cfbc <__assert_func>
 800b786:	2301      	movs	r3, #1
 800b788:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b78c:	4610      	mov	r0, r2
 800b78e:	b003      	add	sp, #12
 800b790:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b794:	bfbc      	itt	lt
 800b796:	464b      	movlt	r3, r9
 800b798:	46a1      	movlt	r9, r4
 800b79a:	4630      	mov	r0, r6
 800b79c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800b7a0:	bfba      	itte	lt
 800b7a2:	461c      	movlt	r4, r3
 800b7a4:	2501      	movlt	r5, #1
 800b7a6:	2500      	movge	r5, #0
 800b7a8:	f7ff fcf8 	bl	800b19c <_Balloc>
 800b7ac:	4602      	mov	r2, r0
 800b7ae:	b918      	cbnz	r0, 800b7b8 <__mdiff+0x60>
 800b7b0:	f240 2145 	movw	r1, #581	@ 0x245
 800b7b4:	4b30      	ldr	r3, [pc, #192]	@ (800b878 <__mdiff+0x120>)
 800b7b6:	e7e3      	b.n	800b780 <__mdiff+0x28>
 800b7b8:	f100 0b14 	add.w	fp, r0, #20
 800b7bc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800b7c0:	f109 0310 	add.w	r3, r9, #16
 800b7c4:	60c5      	str	r5, [r0, #12]
 800b7c6:	f04f 0c00 	mov.w	ip, #0
 800b7ca:	f109 0514 	add.w	r5, r9, #20
 800b7ce:	46d9      	mov	r9, fp
 800b7d0:	6926      	ldr	r6, [r4, #16]
 800b7d2:	f104 0e14 	add.w	lr, r4, #20
 800b7d6:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800b7da:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800b7de:	9301      	str	r3, [sp, #4]
 800b7e0:	9b01      	ldr	r3, [sp, #4]
 800b7e2:	f85e 0b04 	ldr.w	r0, [lr], #4
 800b7e6:	f853 af04 	ldr.w	sl, [r3, #4]!
 800b7ea:	b281      	uxth	r1, r0
 800b7ec:	9301      	str	r3, [sp, #4]
 800b7ee:	fa1f f38a 	uxth.w	r3, sl
 800b7f2:	1a5b      	subs	r3, r3, r1
 800b7f4:	0c00      	lsrs	r0, r0, #16
 800b7f6:	4463      	add	r3, ip
 800b7f8:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800b7fc:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800b800:	b29b      	uxth	r3, r3
 800b802:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800b806:	4576      	cmp	r6, lr
 800b808:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b80c:	f849 3b04 	str.w	r3, [r9], #4
 800b810:	d8e6      	bhi.n	800b7e0 <__mdiff+0x88>
 800b812:	1b33      	subs	r3, r6, r4
 800b814:	3b15      	subs	r3, #21
 800b816:	f023 0303 	bic.w	r3, r3, #3
 800b81a:	3415      	adds	r4, #21
 800b81c:	3304      	adds	r3, #4
 800b81e:	42a6      	cmp	r6, r4
 800b820:	bf38      	it	cc
 800b822:	2304      	movcc	r3, #4
 800b824:	441d      	add	r5, r3
 800b826:	445b      	add	r3, fp
 800b828:	461e      	mov	r6, r3
 800b82a:	462c      	mov	r4, r5
 800b82c:	4544      	cmp	r4, r8
 800b82e:	d30e      	bcc.n	800b84e <__mdiff+0xf6>
 800b830:	f108 0103 	add.w	r1, r8, #3
 800b834:	1b49      	subs	r1, r1, r5
 800b836:	f021 0103 	bic.w	r1, r1, #3
 800b83a:	3d03      	subs	r5, #3
 800b83c:	45a8      	cmp	r8, r5
 800b83e:	bf38      	it	cc
 800b840:	2100      	movcc	r1, #0
 800b842:	440b      	add	r3, r1
 800b844:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b848:	b199      	cbz	r1, 800b872 <__mdiff+0x11a>
 800b84a:	6117      	str	r7, [r2, #16]
 800b84c:	e79e      	b.n	800b78c <__mdiff+0x34>
 800b84e:	46e6      	mov	lr, ip
 800b850:	f854 1b04 	ldr.w	r1, [r4], #4
 800b854:	fa1f fc81 	uxth.w	ip, r1
 800b858:	44f4      	add	ip, lr
 800b85a:	0c08      	lsrs	r0, r1, #16
 800b85c:	4471      	add	r1, lr
 800b85e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800b862:	b289      	uxth	r1, r1
 800b864:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800b868:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b86c:	f846 1b04 	str.w	r1, [r6], #4
 800b870:	e7dc      	b.n	800b82c <__mdiff+0xd4>
 800b872:	3f01      	subs	r7, #1
 800b874:	e7e6      	b.n	800b844 <__mdiff+0xec>
 800b876:	bf00      	nop
 800b878:	0800efc9 	.word	0x0800efc9
 800b87c:	0800efda 	.word	0x0800efda

0800b880 <__ulp>:
 800b880:	4b0e      	ldr	r3, [pc, #56]	@ (800b8bc <__ulp+0x3c>)
 800b882:	400b      	ands	r3, r1
 800b884:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800b888:	2b00      	cmp	r3, #0
 800b88a:	dc08      	bgt.n	800b89e <__ulp+0x1e>
 800b88c:	425b      	negs	r3, r3
 800b88e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800b892:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b896:	da04      	bge.n	800b8a2 <__ulp+0x22>
 800b898:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800b89c:	4113      	asrs	r3, r2
 800b89e:	2200      	movs	r2, #0
 800b8a0:	e008      	b.n	800b8b4 <__ulp+0x34>
 800b8a2:	f1a2 0314 	sub.w	r3, r2, #20
 800b8a6:	2b1e      	cmp	r3, #30
 800b8a8:	bfd6      	itet	le
 800b8aa:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800b8ae:	2201      	movgt	r2, #1
 800b8b0:	40da      	lsrle	r2, r3
 800b8b2:	2300      	movs	r3, #0
 800b8b4:	4619      	mov	r1, r3
 800b8b6:	4610      	mov	r0, r2
 800b8b8:	4770      	bx	lr
 800b8ba:	bf00      	nop
 800b8bc:	7ff00000 	.word	0x7ff00000

0800b8c0 <__b2d>:
 800b8c0:	6902      	ldr	r2, [r0, #16]
 800b8c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8c4:	f100 0614 	add.w	r6, r0, #20
 800b8c8:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 800b8cc:	f852 4c04 	ldr.w	r4, [r2, #-4]
 800b8d0:	4f1e      	ldr	r7, [pc, #120]	@ (800b94c <__b2d+0x8c>)
 800b8d2:	4620      	mov	r0, r4
 800b8d4:	f7ff fd54 	bl	800b380 <__hi0bits>
 800b8d8:	4603      	mov	r3, r0
 800b8da:	f1c0 0020 	rsb	r0, r0, #32
 800b8de:	2b0a      	cmp	r3, #10
 800b8e0:	f1a2 0504 	sub.w	r5, r2, #4
 800b8e4:	6008      	str	r0, [r1, #0]
 800b8e6:	dc12      	bgt.n	800b90e <__b2d+0x4e>
 800b8e8:	42ae      	cmp	r6, r5
 800b8ea:	bf2c      	ite	cs
 800b8ec:	2200      	movcs	r2, #0
 800b8ee:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800b8f2:	f1c3 0c0b 	rsb	ip, r3, #11
 800b8f6:	3315      	adds	r3, #21
 800b8f8:	fa24 fe0c 	lsr.w	lr, r4, ip
 800b8fc:	fa04 f303 	lsl.w	r3, r4, r3
 800b900:	fa22 f20c 	lsr.w	r2, r2, ip
 800b904:	ea4e 0107 	orr.w	r1, lr, r7
 800b908:	431a      	orrs	r2, r3
 800b90a:	4610      	mov	r0, r2
 800b90c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b90e:	42ae      	cmp	r6, r5
 800b910:	bf36      	itet	cc
 800b912:	f1a2 0508 	subcc.w	r5, r2, #8
 800b916:	2200      	movcs	r2, #0
 800b918:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800b91c:	3b0b      	subs	r3, #11
 800b91e:	d012      	beq.n	800b946 <__b2d+0x86>
 800b920:	f1c3 0720 	rsb	r7, r3, #32
 800b924:	fa22 f107 	lsr.w	r1, r2, r7
 800b928:	409c      	lsls	r4, r3
 800b92a:	430c      	orrs	r4, r1
 800b92c:	42b5      	cmp	r5, r6
 800b92e:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 800b932:	bf94      	ite	ls
 800b934:	2400      	movls	r4, #0
 800b936:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 800b93a:	409a      	lsls	r2, r3
 800b93c:	40fc      	lsrs	r4, r7
 800b93e:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800b942:	4322      	orrs	r2, r4
 800b944:	e7e1      	b.n	800b90a <__b2d+0x4a>
 800b946:	ea44 0107 	orr.w	r1, r4, r7
 800b94a:	e7de      	b.n	800b90a <__b2d+0x4a>
 800b94c:	3ff00000 	.word	0x3ff00000

0800b950 <__d2b>:
 800b950:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800b954:	2101      	movs	r1, #1
 800b956:	4690      	mov	r8, r2
 800b958:	4699      	mov	r9, r3
 800b95a:	9e08      	ldr	r6, [sp, #32]
 800b95c:	f7ff fc1e 	bl	800b19c <_Balloc>
 800b960:	4604      	mov	r4, r0
 800b962:	b930      	cbnz	r0, 800b972 <__d2b+0x22>
 800b964:	4602      	mov	r2, r0
 800b966:	f240 310f 	movw	r1, #783	@ 0x30f
 800b96a:	4b23      	ldr	r3, [pc, #140]	@ (800b9f8 <__d2b+0xa8>)
 800b96c:	4823      	ldr	r0, [pc, #140]	@ (800b9fc <__d2b+0xac>)
 800b96e:	f001 fb25 	bl	800cfbc <__assert_func>
 800b972:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b976:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b97a:	b10d      	cbz	r5, 800b980 <__d2b+0x30>
 800b97c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b980:	9301      	str	r3, [sp, #4]
 800b982:	f1b8 0300 	subs.w	r3, r8, #0
 800b986:	d024      	beq.n	800b9d2 <__d2b+0x82>
 800b988:	4668      	mov	r0, sp
 800b98a:	9300      	str	r3, [sp, #0]
 800b98c:	f7ff fd17 	bl	800b3be <__lo0bits>
 800b990:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b994:	b1d8      	cbz	r0, 800b9ce <__d2b+0x7e>
 800b996:	f1c0 0320 	rsb	r3, r0, #32
 800b99a:	fa02 f303 	lsl.w	r3, r2, r3
 800b99e:	430b      	orrs	r3, r1
 800b9a0:	40c2      	lsrs	r2, r0
 800b9a2:	6163      	str	r3, [r4, #20]
 800b9a4:	9201      	str	r2, [sp, #4]
 800b9a6:	9b01      	ldr	r3, [sp, #4]
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	bf0c      	ite	eq
 800b9ac:	2201      	moveq	r2, #1
 800b9ae:	2202      	movne	r2, #2
 800b9b0:	61a3      	str	r3, [r4, #24]
 800b9b2:	6122      	str	r2, [r4, #16]
 800b9b4:	b1ad      	cbz	r5, 800b9e2 <__d2b+0x92>
 800b9b6:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800b9ba:	4405      	add	r5, r0
 800b9bc:	6035      	str	r5, [r6, #0]
 800b9be:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800b9c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b9c4:	6018      	str	r0, [r3, #0]
 800b9c6:	4620      	mov	r0, r4
 800b9c8:	b002      	add	sp, #8
 800b9ca:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800b9ce:	6161      	str	r1, [r4, #20]
 800b9d0:	e7e9      	b.n	800b9a6 <__d2b+0x56>
 800b9d2:	a801      	add	r0, sp, #4
 800b9d4:	f7ff fcf3 	bl	800b3be <__lo0bits>
 800b9d8:	9b01      	ldr	r3, [sp, #4]
 800b9da:	2201      	movs	r2, #1
 800b9dc:	6163      	str	r3, [r4, #20]
 800b9de:	3020      	adds	r0, #32
 800b9e0:	e7e7      	b.n	800b9b2 <__d2b+0x62>
 800b9e2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800b9e6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b9ea:	6030      	str	r0, [r6, #0]
 800b9ec:	6918      	ldr	r0, [r3, #16]
 800b9ee:	f7ff fcc7 	bl	800b380 <__hi0bits>
 800b9f2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b9f6:	e7e4      	b.n	800b9c2 <__d2b+0x72>
 800b9f8:	0800efc9 	.word	0x0800efc9
 800b9fc:	0800efda 	.word	0x0800efda

0800ba00 <__ratio>:
 800ba00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba04:	b085      	sub	sp, #20
 800ba06:	e9cd 1000 	strd	r1, r0, [sp]
 800ba0a:	a902      	add	r1, sp, #8
 800ba0c:	f7ff ff58 	bl	800b8c0 <__b2d>
 800ba10:	468b      	mov	fp, r1
 800ba12:	4606      	mov	r6, r0
 800ba14:	460f      	mov	r7, r1
 800ba16:	9800      	ldr	r0, [sp, #0]
 800ba18:	a903      	add	r1, sp, #12
 800ba1a:	f7ff ff51 	bl	800b8c0 <__b2d>
 800ba1e:	460d      	mov	r5, r1
 800ba20:	9b01      	ldr	r3, [sp, #4]
 800ba22:	4689      	mov	r9, r1
 800ba24:	6919      	ldr	r1, [r3, #16]
 800ba26:	9b00      	ldr	r3, [sp, #0]
 800ba28:	4604      	mov	r4, r0
 800ba2a:	691b      	ldr	r3, [r3, #16]
 800ba2c:	4630      	mov	r0, r6
 800ba2e:	1ac9      	subs	r1, r1, r3
 800ba30:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800ba34:	1a9b      	subs	r3, r3, r2
 800ba36:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	bfcd      	iteet	gt
 800ba3e:	463a      	movgt	r2, r7
 800ba40:	462a      	movle	r2, r5
 800ba42:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800ba46:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800ba4a:	bfd8      	it	le
 800ba4c:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800ba50:	464b      	mov	r3, r9
 800ba52:	4622      	mov	r2, r4
 800ba54:	4659      	mov	r1, fp
 800ba56:	f7f4 fe69 	bl	800072c <__aeabi_ddiv>
 800ba5a:	b005      	add	sp, #20
 800ba5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ba60 <__copybits>:
 800ba60:	3901      	subs	r1, #1
 800ba62:	b570      	push	{r4, r5, r6, lr}
 800ba64:	1149      	asrs	r1, r1, #5
 800ba66:	6914      	ldr	r4, [r2, #16]
 800ba68:	3101      	adds	r1, #1
 800ba6a:	f102 0314 	add.w	r3, r2, #20
 800ba6e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ba72:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ba76:	1f05      	subs	r5, r0, #4
 800ba78:	42a3      	cmp	r3, r4
 800ba7a:	d30c      	bcc.n	800ba96 <__copybits+0x36>
 800ba7c:	1aa3      	subs	r3, r4, r2
 800ba7e:	3b11      	subs	r3, #17
 800ba80:	f023 0303 	bic.w	r3, r3, #3
 800ba84:	3211      	adds	r2, #17
 800ba86:	42a2      	cmp	r2, r4
 800ba88:	bf88      	it	hi
 800ba8a:	2300      	movhi	r3, #0
 800ba8c:	4418      	add	r0, r3
 800ba8e:	2300      	movs	r3, #0
 800ba90:	4288      	cmp	r0, r1
 800ba92:	d305      	bcc.n	800baa0 <__copybits+0x40>
 800ba94:	bd70      	pop	{r4, r5, r6, pc}
 800ba96:	f853 6b04 	ldr.w	r6, [r3], #4
 800ba9a:	f845 6f04 	str.w	r6, [r5, #4]!
 800ba9e:	e7eb      	b.n	800ba78 <__copybits+0x18>
 800baa0:	f840 3b04 	str.w	r3, [r0], #4
 800baa4:	e7f4      	b.n	800ba90 <__copybits+0x30>

0800baa6 <__any_on>:
 800baa6:	f100 0214 	add.w	r2, r0, #20
 800baaa:	6900      	ldr	r0, [r0, #16]
 800baac:	114b      	asrs	r3, r1, #5
 800baae:	4298      	cmp	r0, r3
 800bab0:	b510      	push	{r4, lr}
 800bab2:	db11      	blt.n	800bad8 <__any_on+0x32>
 800bab4:	dd0a      	ble.n	800bacc <__any_on+0x26>
 800bab6:	f011 011f 	ands.w	r1, r1, #31
 800baba:	d007      	beq.n	800bacc <__any_on+0x26>
 800babc:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800bac0:	fa24 f001 	lsr.w	r0, r4, r1
 800bac4:	fa00 f101 	lsl.w	r1, r0, r1
 800bac8:	428c      	cmp	r4, r1
 800baca:	d10b      	bne.n	800bae4 <__any_on+0x3e>
 800bacc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800bad0:	4293      	cmp	r3, r2
 800bad2:	d803      	bhi.n	800badc <__any_on+0x36>
 800bad4:	2000      	movs	r0, #0
 800bad6:	bd10      	pop	{r4, pc}
 800bad8:	4603      	mov	r3, r0
 800bada:	e7f7      	b.n	800bacc <__any_on+0x26>
 800badc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800bae0:	2900      	cmp	r1, #0
 800bae2:	d0f5      	beq.n	800bad0 <__any_on+0x2a>
 800bae4:	2001      	movs	r0, #1
 800bae6:	e7f6      	b.n	800bad6 <__any_on+0x30>

0800bae8 <sulp>:
 800bae8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800baec:	460f      	mov	r7, r1
 800baee:	4690      	mov	r8, r2
 800baf0:	f7ff fec6 	bl	800b880 <__ulp>
 800baf4:	4604      	mov	r4, r0
 800baf6:	460d      	mov	r5, r1
 800baf8:	f1b8 0f00 	cmp.w	r8, #0
 800bafc:	d011      	beq.n	800bb22 <sulp+0x3a>
 800bafe:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800bb02:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	dd0b      	ble.n	800bb22 <sulp+0x3a>
 800bb0a:	2400      	movs	r4, #0
 800bb0c:	051b      	lsls	r3, r3, #20
 800bb0e:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800bb12:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800bb16:	4622      	mov	r2, r4
 800bb18:	462b      	mov	r3, r5
 800bb1a:	f7f4 fcdd 	bl	80004d8 <__aeabi_dmul>
 800bb1e:	4604      	mov	r4, r0
 800bb20:	460d      	mov	r5, r1
 800bb22:	4620      	mov	r0, r4
 800bb24:	4629      	mov	r1, r5
 800bb26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb2a:	0000      	movs	r0, r0
 800bb2c:	0000      	movs	r0, r0
	...

0800bb30 <_strtod_l>:
 800bb30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb34:	b09f      	sub	sp, #124	@ 0x7c
 800bb36:	9217      	str	r2, [sp, #92]	@ 0x5c
 800bb38:	2200      	movs	r2, #0
 800bb3a:	460c      	mov	r4, r1
 800bb3c:	921a      	str	r2, [sp, #104]	@ 0x68
 800bb3e:	f04f 0a00 	mov.w	sl, #0
 800bb42:	f04f 0b00 	mov.w	fp, #0
 800bb46:	460a      	mov	r2, r1
 800bb48:	9005      	str	r0, [sp, #20]
 800bb4a:	9219      	str	r2, [sp, #100]	@ 0x64
 800bb4c:	7811      	ldrb	r1, [r2, #0]
 800bb4e:	292b      	cmp	r1, #43	@ 0x2b
 800bb50:	d048      	beq.n	800bbe4 <_strtod_l+0xb4>
 800bb52:	d836      	bhi.n	800bbc2 <_strtod_l+0x92>
 800bb54:	290d      	cmp	r1, #13
 800bb56:	d830      	bhi.n	800bbba <_strtod_l+0x8a>
 800bb58:	2908      	cmp	r1, #8
 800bb5a:	d830      	bhi.n	800bbbe <_strtod_l+0x8e>
 800bb5c:	2900      	cmp	r1, #0
 800bb5e:	d039      	beq.n	800bbd4 <_strtod_l+0xa4>
 800bb60:	2200      	movs	r2, #0
 800bb62:	920b      	str	r2, [sp, #44]	@ 0x2c
 800bb64:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800bb66:	782a      	ldrb	r2, [r5, #0]
 800bb68:	2a30      	cmp	r2, #48	@ 0x30
 800bb6a:	f040 80b1 	bne.w	800bcd0 <_strtod_l+0x1a0>
 800bb6e:	786a      	ldrb	r2, [r5, #1]
 800bb70:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800bb74:	2a58      	cmp	r2, #88	@ 0x58
 800bb76:	d16c      	bne.n	800bc52 <_strtod_l+0x122>
 800bb78:	9302      	str	r3, [sp, #8]
 800bb7a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bb7c:	4a8e      	ldr	r2, [pc, #568]	@ (800bdb8 <_strtod_l+0x288>)
 800bb7e:	9301      	str	r3, [sp, #4]
 800bb80:	ab1a      	add	r3, sp, #104	@ 0x68
 800bb82:	9300      	str	r3, [sp, #0]
 800bb84:	9805      	ldr	r0, [sp, #20]
 800bb86:	ab1b      	add	r3, sp, #108	@ 0x6c
 800bb88:	a919      	add	r1, sp, #100	@ 0x64
 800bb8a:	f001 fab1 	bl	800d0f0 <__gethex>
 800bb8e:	f010 060f 	ands.w	r6, r0, #15
 800bb92:	4604      	mov	r4, r0
 800bb94:	d005      	beq.n	800bba2 <_strtod_l+0x72>
 800bb96:	2e06      	cmp	r6, #6
 800bb98:	d126      	bne.n	800bbe8 <_strtod_l+0xb8>
 800bb9a:	2300      	movs	r3, #0
 800bb9c:	3501      	adds	r5, #1
 800bb9e:	9519      	str	r5, [sp, #100]	@ 0x64
 800bba0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bba2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	f040 8584 	bne.w	800c6b2 <_strtod_l+0xb82>
 800bbaa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bbac:	b1bb      	cbz	r3, 800bbde <_strtod_l+0xae>
 800bbae:	4650      	mov	r0, sl
 800bbb0:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 800bbb4:	b01f      	add	sp, #124	@ 0x7c
 800bbb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbba:	2920      	cmp	r1, #32
 800bbbc:	d1d0      	bne.n	800bb60 <_strtod_l+0x30>
 800bbbe:	3201      	adds	r2, #1
 800bbc0:	e7c3      	b.n	800bb4a <_strtod_l+0x1a>
 800bbc2:	292d      	cmp	r1, #45	@ 0x2d
 800bbc4:	d1cc      	bne.n	800bb60 <_strtod_l+0x30>
 800bbc6:	2101      	movs	r1, #1
 800bbc8:	910b      	str	r1, [sp, #44]	@ 0x2c
 800bbca:	1c51      	adds	r1, r2, #1
 800bbcc:	9119      	str	r1, [sp, #100]	@ 0x64
 800bbce:	7852      	ldrb	r2, [r2, #1]
 800bbd0:	2a00      	cmp	r2, #0
 800bbd2:	d1c7      	bne.n	800bb64 <_strtod_l+0x34>
 800bbd4:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800bbd6:	9419      	str	r4, [sp, #100]	@ 0x64
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	f040 8568 	bne.w	800c6ae <_strtod_l+0xb7e>
 800bbde:	4650      	mov	r0, sl
 800bbe0:	4659      	mov	r1, fp
 800bbe2:	e7e7      	b.n	800bbb4 <_strtod_l+0x84>
 800bbe4:	2100      	movs	r1, #0
 800bbe6:	e7ef      	b.n	800bbc8 <_strtod_l+0x98>
 800bbe8:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800bbea:	b13a      	cbz	r2, 800bbfc <_strtod_l+0xcc>
 800bbec:	2135      	movs	r1, #53	@ 0x35
 800bbee:	a81c      	add	r0, sp, #112	@ 0x70
 800bbf0:	f7ff ff36 	bl	800ba60 <__copybits>
 800bbf4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bbf6:	9805      	ldr	r0, [sp, #20]
 800bbf8:	f7ff fb10 	bl	800b21c <_Bfree>
 800bbfc:	3e01      	subs	r6, #1
 800bbfe:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800bc00:	2e04      	cmp	r6, #4
 800bc02:	d806      	bhi.n	800bc12 <_strtod_l+0xe2>
 800bc04:	e8df f006 	tbb	[pc, r6]
 800bc08:	201d0314 	.word	0x201d0314
 800bc0c:	14          	.byte	0x14
 800bc0d:	00          	.byte	0x00
 800bc0e:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800bc12:	05e1      	lsls	r1, r4, #23
 800bc14:	bf48      	it	mi
 800bc16:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800bc1a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800bc1e:	0d1b      	lsrs	r3, r3, #20
 800bc20:	051b      	lsls	r3, r3, #20
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d1bd      	bne.n	800bba2 <_strtod_l+0x72>
 800bc26:	f7fe fb1b 	bl	800a260 <__errno>
 800bc2a:	2322      	movs	r3, #34	@ 0x22
 800bc2c:	6003      	str	r3, [r0, #0]
 800bc2e:	e7b8      	b.n	800bba2 <_strtod_l+0x72>
 800bc30:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800bc34:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800bc38:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800bc3c:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800bc40:	e7e7      	b.n	800bc12 <_strtod_l+0xe2>
 800bc42:	f8df b178 	ldr.w	fp, [pc, #376]	@ 800bdbc <_strtod_l+0x28c>
 800bc46:	e7e4      	b.n	800bc12 <_strtod_l+0xe2>
 800bc48:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800bc4c:	f04f 3aff 	mov.w	sl, #4294967295
 800bc50:	e7df      	b.n	800bc12 <_strtod_l+0xe2>
 800bc52:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800bc54:	1c5a      	adds	r2, r3, #1
 800bc56:	9219      	str	r2, [sp, #100]	@ 0x64
 800bc58:	785b      	ldrb	r3, [r3, #1]
 800bc5a:	2b30      	cmp	r3, #48	@ 0x30
 800bc5c:	d0f9      	beq.n	800bc52 <_strtod_l+0x122>
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d09f      	beq.n	800bba2 <_strtod_l+0x72>
 800bc62:	2301      	movs	r3, #1
 800bc64:	9309      	str	r3, [sp, #36]	@ 0x24
 800bc66:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800bc68:	220a      	movs	r2, #10
 800bc6a:	930c      	str	r3, [sp, #48]	@ 0x30
 800bc6c:	2300      	movs	r3, #0
 800bc6e:	461f      	mov	r7, r3
 800bc70:	9308      	str	r3, [sp, #32]
 800bc72:	930a      	str	r3, [sp, #40]	@ 0x28
 800bc74:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800bc76:	7805      	ldrb	r5, [r0, #0]
 800bc78:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800bc7c:	b2d9      	uxtb	r1, r3
 800bc7e:	2909      	cmp	r1, #9
 800bc80:	d928      	bls.n	800bcd4 <_strtod_l+0x1a4>
 800bc82:	2201      	movs	r2, #1
 800bc84:	494e      	ldr	r1, [pc, #312]	@ (800bdc0 <_strtod_l+0x290>)
 800bc86:	f001 f94e 	bl	800cf26 <strncmp>
 800bc8a:	2800      	cmp	r0, #0
 800bc8c:	d032      	beq.n	800bcf4 <_strtod_l+0x1c4>
 800bc8e:	2000      	movs	r0, #0
 800bc90:	462a      	mov	r2, r5
 800bc92:	4681      	mov	r9, r0
 800bc94:	463d      	mov	r5, r7
 800bc96:	4603      	mov	r3, r0
 800bc98:	2a65      	cmp	r2, #101	@ 0x65
 800bc9a:	d001      	beq.n	800bca0 <_strtod_l+0x170>
 800bc9c:	2a45      	cmp	r2, #69	@ 0x45
 800bc9e:	d114      	bne.n	800bcca <_strtod_l+0x19a>
 800bca0:	b91d      	cbnz	r5, 800bcaa <_strtod_l+0x17a>
 800bca2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bca4:	4302      	orrs	r2, r0
 800bca6:	d095      	beq.n	800bbd4 <_strtod_l+0xa4>
 800bca8:	2500      	movs	r5, #0
 800bcaa:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800bcac:	1c62      	adds	r2, r4, #1
 800bcae:	9219      	str	r2, [sp, #100]	@ 0x64
 800bcb0:	7862      	ldrb	r2, [r4, #1]
 800bcb2:	2a2b      	cmp	r2, #43	@ 0x2b
 800bcb4:	d077      	beq.n	800bda6 <_strtod_l+0x276>
 800bcb6:	2a2d      	cmp	r2, #45	@ 0x2d
 800bcb8:	d07b      	beq.n	800bdb2 <_strtod_l+0x282>
 800bcba:	f04f 0c00 	mov.w	ip, #0
 800bcbe:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800bcc2:	2909      	cmp	r1, #9
 800bcc4:	f240 8082 	bls.w	800bdcc <_strtod_l+0x29c>
 800bcc8:	9419      	str	r4, [sp, #100]	@ 0x64
 800bcca:	f04f 0800 	mov.w	r8, #0
 800bcce:	e0a2      	b.n	800be16 <_strtod_l+0x2e6>
 800bcd0:	2300      	movs	r3, #0
 800bcd2:	e7c7      	b.n	800bc64 <_strtod_l+0x134>
 800bcd4:	2f08      	cmp	r7, #8
 800bcd6:	bfd5      	itete	le
 800bcd8:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800bcda:	9908      	ldrgt	r1, [sp, #32]
 800bcdc:	fb02 3301 	mlale	r3, r2, r1, r3
 800bce0:	fb02 3301 	mlagt	r3, r2, r1, r3
 800bce4:	f100 0001 	add.w	r0, r0, #1
 800bce8:	bfd4      	ite	le
 800bcea:	930a      	strle	r3, [sp, #40]	@ 0x28
 800bcec:	9308      	strgt	r3, [sp, #32]
 800bcee:	3701      	adds	r7, #1
 800bcf0:	9019      	str	r0, [sp, #100]	@ 0x64
 800bcf2:	e7bf      	b.n	800bc74 <_strtod_l+0x144>
 800bcf4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800bcf6:	1c5a      	adds	r2, r3, #1
 800bcf8:	9219      	str	r2, [sp, #100]	@ 0x64
 800bcfa:	785a      	ldrb	r2, [r3, #1]
 800bcfc:	b37f      	cbz	r7, 800bd5e <_strtod_l+0x22e>
 800bcfe:	4681      	mov	r9, r0
 800bd00:	463d      	mov	r5, r7
 800bd02:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800bd06:	2b09      	cmp	r3, #9
 800bd08:	d912      	bls.n	800bd30 <_strtod_l+0x200>
 800bd0a:	2301      	movs	r3, #1
 800bd0c:	e7c4      	b.n	800bc98 <_strtod_l+0x168>
 800bd0e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800bd10:	3001      	adds	r0, #1
 800bd12:	1c5a      	adds	r2, r3, #1
 800bd14:	9219      	str	r2, [sp, #100]	@ 0x64
 800bd16:	785a      	ldrb	r2, [r3, #1]
 800bd18:	2a30      	cmp	r2, #48	@ 0x30
 800bd1a:	d0f8      	beq.n	800bd0e <_strtod_l+0x1de>
 800bd1c:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800bd20:	2b08      	cmp	r3, #8
 800bd22:	f200 84cb 	bhi.w	800c6bc <_strtod_l+0xb8c>
 800bd26:	4681      	mov	r9, r0
 800bd28:	2000      	movs	r0, #0
 800bd2a:	4605      	mov	r5, r0
 800bd2c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800bd2e:	930c      	str	r3, [sp, #48]	@ 0x30
 800bd30:	3a30      	subs	r2, #48	@ 0x30
 800bd32:	f100 0301 	add.w	r3, r0, #1
 800bd36:	d02a      	beq.n	800bd8e <_strtod_l+0x25e>
 800bd38:	4499      	add	r9, r3
 800bd3a:	210a      	movs	r1, #10
 800bd3c:	462b      	mov	r3, r5
 800bd3e:	eb00 0c05 	add.w	ip, r0, r5
 800bd42:	4563      	cmp	r3, ip
 800bd44:	d10d      	bne.n	800bd62 <_strtod_l+0x232>
 800bd46:	1c69      	adds	r1, r5, #1
 800bd48:	4401      	add	r1, r0
 800bd4a:	4428      	add	r0, r5
 800bd4c:	2808      	cmp	r0, #8
 800bd4e:	dc16      	bgt.n	800bd7e <_strtod_l+0x24e>
 800bd50:	230a      	movs	r3, #10
 800bd52:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800bd54:	fb03 2300 	mla	r3, r3, r0, r2
 800bd58:	930a      	str	r3, [sp, #40]	@ 0x28
 800bd5a:	2300      	movs	r3, #0
 800bd5c:	e018      	b.n	800bd90 <_strtod_l+0x260>
 800bd5e:	4638      	mov	r0, r7
 800bd60:	e7da      	b.n	800bd18 <_strtod_l+0x1e8>
 800bd62:	2b08      	cmp	r3, #8
 800bd64:	f103 0301 	add.w	r3, r3, #1
 800bd68:	dc03      	bgt.n	800bd72 <_strtod_l+0x242>
 800bd6a:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800bd6c:	434e      	muls	r6, r1
 800bd6e:	960a      	str	r6, [sp, #40]	@ 0x28
 800bd70:	e7e7      	b.n	800bd42 <_strtod_l+0x212>
 800bd72:	2b10      	cmp	r3, #16
 800bd74:	bfde      	ittt	le
 800bd76:	9e08      	ldrle	r6, [sp, #32]
 800bd78:	434e      	mulle	r6, r1
 800bd7a:	9608      	strle	r6, [sp, #32]
 800bd7c:	e7e1      	b.n	800bd42 <_strtod_l+0x212>
 800bd7e:	280f      	cmp	r0, #15
 800bd80:	dceb      	bgt.n	800bd5a <_strtod_l+0x22a>
 800bd82:	230a      	movs	r3, #10
 800bd84:	9808      	ldr	r0, [sp, #32]
 800bd86:	fb03 2300 	mla	r3, r3, r0, r2
 800bd8a:	9308      	str	r3, [sp, #32]
 800bd8c:	e7e5      	b.n	800bd5a <_strtod_l+0x22a>
 800bd8e:	4629      	mov	r1, r5
 800bd90:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800bd92:	460d      	mov	r5, r1
 800bd94:	1c50      	adds	r0, r2, #1
 800bd96:	9019      	str	r0, [sp, #100]	@ 0x64
 800bd98:	7852      	ldrb	r2, [r2, #1]
 800bd9a:	4618      	mov	r0, r3
 800bd9c:	e7b1      	b.n	800bd02 <_strtod_l+0x1d2>
 800bd9e:	f04f 0900 	mov.w	r9, #0
 800bda2:	2301      	movs	r3, #1
 800bda4:	e77d      	b.n	800bca2 <_strtod_l+0x172>
 800bda6:	f04f 0c00 	mov.w	ip, #0
 800bdaa:	1ca2      	adds	r2, r4, #2
 800bdac:	9219      	str	r2, [sp, #100]	@ 0x64
 800bdae:	78a2      	ldrb	r2, [r4, #2]
 800bdb0:	e785      	b.n	800bcbe <_strtod_l+0x18e>
 800bdb2:	f04f 0c01 	mov.w	ip, #1
 800bdb6:	e7f8      	b.n	800bdaa <_strtod_l+0x27a>
 800bdb8:	0800f148 	.word	0x0800f148
 800bdbc:	7ff00000 	.word	0x7ff00000
 800bdc0:	0800f130 	.word	0x0800f130
 800bdc4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800bdc6:	1c51      	adds	r1, r2, #1
 800bdc8:	9119      	str	r1, [sp, #100]	@ 0x64
 800bdca:	7852      	ldrb	r2, [r2, #1]
 800bdcc:	2a30      	cmp	r2, #48	@ 0x30
 800bdce:	d0f9      	beq.n	800bdc4 <_strtod_l+0x294>
 800bdd0:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800bdd4:	2908      	cmp	r1, #8
 800bdd6:	f63f af78 	bhi.w	800bcca <_strtod_l+0x19a>
 800bdda:	f04f 080a 	mov.w	r8, #10
 800bdde:	3a30      	subs	r2, #48	@ 0x30
 800bde0:	920e      	str	r2, [sp, #56]	@ 0x38
 800bde2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800bde4:	920f      	str	r2, [sp, #60]	@ 0x3c
 800bde6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800bde8:	1c56      	adds	r6, r2, #1
 800bdea:	9619      	str	r6, [sp, #100]	@ 0x64
 800bdec:	7852      	ldrb	r2, [r2, #1]
 800bdee:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800bdf2:	f1be 0f09 	cmp.w	lr, #9
 800bdf6:	d939      	bls.n	800be6c <_strtod_l+0x33c>
 800bdf8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800bdfa:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800bdfe:	1a76      	subs	r6, r6, r1
 800be00:	2e08      	cmp	r6, #8
 800be02:	dc03      	bgt.n	800be0c <_strtod_l+0x2dc>
 800be04:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800be06:	4588      	cmp	r8, r1
 800be08:	bfa8      	it	ge
 800be0a:	4688      	movge	r8, r1
 800be0c:	f1bc 0f00 	cmp.w	ip, #0
 800be10:	d001      	beq.n	800be16 <_strtod_l+0x2e6>
 800be12:	f1c8 0800 	rsb	r8, r8, #0
 800be16:	2d00      	cmp	r5, #0
 800be18:	d14e      	bne.n	800beb8 <_strtod_l+0x388>
 800be1a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800be1c:	4308      	orrs	r0, r1
 800be1e:	f47f aec0 	bne.w	800bba2 <_strtod_l+0x72>
 800be22:	2b00      	cmp	r3, #0
 800be24:	f47f aed6 	bne.w	800bbd4 <_strtod_l+0xa4>
 800be28:	2a69      	cmp	r2, #105	@ 0x69
 800be2a:	d028      	beq.n	800be7e <_strtod_l+0x34e>
 800be2c:	dc25      	bgt.n	800be7a <_strtod_l+0x34a>
 800be2e:	2a49      	cmp	r2, #73	@ 0x49
 800be30:	d025      	beq.n	800be7e <_strtod_l+0x34e>
 800be32:	2a4e      	cmp	r2, #78	@ 0x4e
 800be34:	f47f aece 	bne.w	800bbd4 <_strtod_l+0xa4>
 800be38:	499a      	ldr	r1, [pc, #616]	@ (800c0a4 <_strtod_l+0x574>)
 800be3a:	a819      	add	r0, sp, #100	@ 0x64
 800be3c:	f001 fb7a 	bl	800d534 <__match>
 800be40:	2800      	cmp	r0, #0
 800be42:	f43f aec7 	beq.w	800bbd4 <_strtod_l+0xa4>
 800be46:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800be48:	781b      	ldrb	r3, [r3, #0]
 800be4a:	2b28      	cmp	r3, #40	@ 0x28
 800be4c:	d12e      	bne.n	800beac <_strtod_l+0x37c>
 800be4e:	4996      	ldr	r1, [pc, #600]	@ (800c0a8 <_strtod_l+0x578>)
 800be50:	aa1c      	add	r2, sp, #112	@ 0x70
 800be52:	a819      	add	r0, sp, #100	@ 0x64
 800be54:	f001 fb82 	bl	800d55c <__hexnan>
 800be58:	2805      	cmp	r0, #5
 800be5a:	d127      	bne.n	800beac <_strtod_l+0x37c>
 800be5c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800be5e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800be62:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800be66:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800be6a:	e69a      	b.n	800bba2 <_strtod_l+0x72>
 800be6c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800be6e:	fb08 2101 	mla	r1, r8, r1, r2
 800be72:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800be76:	920e      	str	r2, [sp, #56]	@ 0x38
 800be78:	e7b5      	b.n	800bde6 <_strtod_l+0x2b6>
 800be7a:	2a6e      	cmp	r2, #110	@ 0x6e
 800be7c:	e7da      	b.n	800be34 <_strtod_l+0x304>
 800be7e:	498b      	ldr	r1, [pc, #556]	@ (800c0ac <_strtod_l+0x57c>)
 800be80:	a819      	add	r0, sp, #100	@ 0x64
 800be82:	f001 fb57 	bl	800d534 <__match>
 800be86:	2800      	cmp	r0, #0
 800be88:	f43f aea4 	beq.w	800bbd4 <_strtod_l+0xa4>
 800be8c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800be8e:	4988      	ldr	r1, [pc, #544]	@ (800c0b0 <_strtod_l+0x580>)
 800be90:	3b01      	subs	r3, #1
 800be92:	a819      	add	r0, sp, #100	@ 0x64
 800be94:	9319      	str	r3, [sp, #100]	@ 0x64
 800be96:	f001 fb4d 	bl	800d534 <__match>
 800be9a:	b910      	cbnz	r0, 800bea2 <_strtod_l+0x372>
 800be9c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800be9e:	3301      	adds	r3, #1
 800bea0:	9319      	str	r3, [sp, #100]	@ 0x64
 800bea2:	f04f 0a00 	mov.w	sl, #0
 800bea6:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 800c0b4 <_strtod_l+0x584>
 800beaa:	e67a      	b.n	800bba2 <_strtod_l+0x72>
 800beac:	4882      	ldr	r0, [pc, #520]	@ (800c0b8 <_strtod_l+0x588>)
 800beae:	f001 f87f 	bl	800cfb0 <nan>
 800beb2:	4682      	mov	sl, r0
 800beb4:	468b      	mov	fp, r1
 800beb6:	e674      	b.n	800bba2 <_strtod_l+0x72>
 800beb8:	eba8 0309 	sub.w	r3, r8, r9
 800bebc:	2f00      	cmp	r7, #0
 800bebe:	bf08      	it	eq
 800bec0:	462f      	moveq	r7, r5
 800bec2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800bec4:	2d10      	cmp	r5, #16
 800bec6:	462c      	mov	r4, r5
 800bec8:	9309      	str	r3, [sp, #36]	@ 0x24
 800beca:	bfa8      	it	ge
 800becc:	2410      	movge	r4, #16
 800bece:	f7f4 fa89 	bl	80003e4 <__aeabi_ui2d>
 800bed2:	2d09      	cmp	r5, #9
 800bed4:	4682      	mov	sl, r0
 800bed6:	468b      	mov	fp, r1
 800bed8:	dc11      	bgt.n	800befe <_strtod_l+0x3ce>
 800beda:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bedc:	2b00      	cmp	r3, #0
 800bede:	f43f ae60 	beq.w	800bba2 <_strtod_l+0x72>
 800bee2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bee4:	dd76      	ble.n	800bfd4 <_strtod_l+0x4a4>
 800bee6:	2b16      	cmp	r3, #22
 800bee8:	dc5d      	bgt.n	800bfa6 <_strtod_l+0x476>
 800beea:	4974      	ldr	r1, [pc, #464]	@ (800c0bc <_strtod_l+0x58c>)
 800beec:	4652      	mov	r2, sl
 800beee:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800bef2:	465b      	mov	r3, fp
 800bef4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bef8:	f7f4 faee 	bl	80004d8 <__aeabi_dmul>
 800befc:	e7d9      	b.n	800beb2 <_strtod_l+0x382>
 800befe:	4b6f      	ldr	r3, [pc, #444]	@ (800c0bc <_strtod_l+0x58c>)
 800bf00:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800bf04:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800bf08:	f7f4 fae6 	bl	80004d8 <__aeabi_dmul>
 800bf0c:	4682      	mov	sl, r0
 800bf0e:	9808      	ldr	r0, [sp, #32]
 800bf10:	468b      	mov	fp, r1
 800bf12:	f7f4 fa67 	bl	80003e4 <__aeabi_ui2d>
 800bf16:	4602      	mov	r2, r0
 800bf18:	460b      	mov	r3, r1
 800bf1a:	4650      	mov	r0, sl
 800bf1c:	4659      	mov	r1, fp
 800bf1e:	f7f4 f925 	bl	800016c <__adddf3>
 800bf22:	2d0f      	cmp	r5, #15
 800bf24:	4682      	mov	sl, r0
 800bf26:	468b      	mov	fp, r1
 800bf28:	ddd7      	ble.n	800beda <_strtod_l+0x3aa>
 800bf2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bf2c:	1b2c      	subs	r4, r5, r4
 800bf2e:	441c      	add	r4, r3
 800bf30:	2c00      	cmp	r4, #0
 800bf32:	f340 8096 	ble.w	800c062 <_strtod_l+0x532>
 800bf36:	f014 030f 	ands.w	r3, r4, #15
 800bf3a:	d00a      	beq.n	800bf52 <_strtod_l+0x422>
 800bf3c:	495f      	ldr	r1, [pc, #380]	@ (800c0bc <_strtod_l+0x58c>)
 800bf3e:	4652      	mov	r2, sl
 800bf40:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800bf44:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bf48:	465b      	mov	r3, fp
 800bf4a:	f7f4 fac5 	bl	80004d8 <__aeabi_dmul>
 800bf4e:	4682      	mov	sl, r0
 800bf50:	468b      	mov	fp, r1
 800bf52:	f034 040f 	bics.w	r4, r4, #15
 800bf56:	d073      	beq.n	800c040 <_strtod_l+0x510>
 800bf58:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800bf5c:	dd48      	ble.n	800bff0 <_strtod_l+0x4c0>
 800bf5e:	2400      	movs	r4, #0
 800bf60:	46a0      	mov	r8, r4
 800bf62:	46a1      	mov	r9, r4
 800bf64:	940a      	str	r4, [sp, #40]	@ 0x28
 800bf66:	2322      	movs	r3, #34	@ 0x22
 800bf68:	f04f 0a00 	mov.w	sl, #0
 800bf6c:	9a05      	ldr	r2, [sp, #20]
 800bf6e:	f8df b144 	ldr.w	fp, [pc, #324]	@ 800c0b4 <_strtod_l+0x584>
 800bf72:	6013      	str	r3, [r2, #0]
 800bf74:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	f43f ae13 	beq.w	800bba2 <_strtod_l+0x72>
 800bf7c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bf7e:	9805      	ldr	r0, [sp, #20]
 800bf80:	f7ff f94c 	bl	800b21c <_Bfree>
 800bf84:	4649      	mov	r1, r9
 800bf86:	9805      	ldr	r0, [sp, #20]
 800bf88:	f7ff f948 	bl	800b21c <_Bfree>
 800bf8c:	4641      	mov	r1, r8
 800bf8e:	9805      	ldr	r0, [sp, #20]
 800bf90:	f7ff f944 	bl	800b21c <_Bfree>
 800bf94:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800bf96:	9805      	ldr	r0, [sp, #20]
 800bf98:	f7ff f940 	bl	800b21c <_Bfree>
 800bf9c:	4621      	mov	r1, r4
 800bf9e:	9805      	ldr	r0, [sp, #20]
 800bfa0:	f7ff f93c 	bl	800b21c <_Bfree>
 800bfa4:	e5fd      	b.n	800bba2 <_strtod_l+0x72>
 800bfa6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bfa8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800bfac:	4293      	cmp	r3, r2
 800bfae:	dbbc      	blt.n	800bf2a <_strtod_l+0x3fa>
 800bfb0:	4c42      	ldr	r4, [pc, #264]	@ (800c0bc <_strtod_l+0x58c>)
 800bfb2:	f1c5 050f 	rsb	r5, r5, #15
 800bfb6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800bfba:	4652      	mov	r2, sl
 800bfbc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bfc0:	465b      	mov	r3, fp
 800bfc2:	f7f4 fa89 	bl	80004d8 <__aeabi_dmul>
 800bfc6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bfc8:	1b5d      	subs	r5, r3, r5
 800bfca:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800bfce:	e9d4 2300 	ldrd	r2, r3, [r4]
 800bfd2:	e791      	b.n	800bef8 <_strtod_l+0x3c8>
 800bfd4:	3316      	adds	r3, #22
 800bfd6:	dba8      	blt.n	800bf2a <_strtod_l+0x3fa>
 800bfd8:	4b38      	ldr	r3, [pc, #224]	@ (800c0bc <_strtod_l+0x58c>)
 800bfda:	eba9 0808 	sub.w	r8, r9, r8
 800bfde:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800bfe2:	4650      	mov	r0, sl
 800bfe4:	e9d8 2300 	ldrd	r2, r3, [r8]
 800bfe8:	4659      	mov	r1, fp
 800bfea:	f7f4 fb9f 	bl	800072c <__aeabi_ddiv>
 800bfee:	e760      	b.n	800beb2 <_strtod_l+0x382>
 800bff0:	4b33      	ldr	r3, [pc, #204]	@ (800c0c0 <_strtod_l+0x590>)
 800bff2:	4650      	mov	r0, sl
 800bff4:	9308      	str	r3, [sp, #32]
 800bff6:	2300      	movs	r3, #0
 800bff8:	4659      	mov	r1, fp
 800bffa:	461e      	mov	r6, r3
 800bffc:	1124      	asrs	r4, r4, #4
 800bffe:	2c01      	cmp	r4, #1
 800c000:	dc21      	bgt.n	800c046 <_strtod_l+0x516>
 800c002:	b10b      	cbz	r3, 800c008 <_strtod_l+0x4d8>
 800c004:	4682      	mov	sl, r0
 800c006:	468b      	mov	fp, r1
 800c008:	492d      	ldr	r1, [pc, #180]	@ (800c0c0 <_strtod_l+0x590>)
 800c00a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800c00e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800c012:	4652      	mov	r2, sl
 800c014:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c018:	465b      	mov	r3, fp
 800c01a:	f7f4 fa5d 	bl	80004d8 <__aeabi_dmul>
 800c01e:	4b25      	ldr	r3, [pc, #148]	@ (800c0b4 <_strtod_l+0x584>)
 800c020:	460a      	mov	r2, r1
 800c022:	400b      	ands	r3, r1
 800c024:	4927      	ldr	r1, [pc, #156]	@ (800c0c4 <_strtod_l+0x594>)
 800c026:	4682      	mov	sl, r0
 800c028:	428b      	cmp	r3, r1
 800c02a:	d898      	bhi.n	800bf5e <_strtod_l+0x42e>
 800c02c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800c030:	428b      	cmp	r3, r1
 800c032:	bf86      	itte	hi
 800c034:	f04f 3aff 	movhi.w	sl, #4294967295
 800c038:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 800c0c8 <_strtod_l+0x598>
 800c03c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800c040:	2300      	movs	r3, #0
 800c042:	9308      	str	r3, [sp, #32]
 800c044:	e07a      	b.n	800c13c <_strtod_l+0x60c>
 800c046:	07e2      	lsls	r2, r4, #31
 800c048:	d505      	bpl.n	800c056 <_strtod_l+0x526>
 800c04a:	9b08      	ldr	r3, [sp, #32]
 800c04c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c050:	f7f4 fa42 	bl	80004d8 <__aeabi_dmul>
 800c054:	2301      	movs	r3, #1
 800c056:	9a08      	ldr	r2, [sp, #32]
 800c058:	3601      	adds	r6, #1
 800c05a:	3208      	adds	r2, #8
 800c05c:	1064      	asrs	r4, r4, #1
 800c05e:	9208      	str	r2, [sp, #32]
 800c060:	e7cd      	b.n	800bffe <_strtod_l+0x4ce>
 800c062:	d0ed      	beq.n	800c040 <_strtod_l+0x510>
 800c064:	4264      	negs	r4, r4
 800c066:	f014 020f 	ands.w	r2, r4, #15
 800c06a:	d00a      	beq.n	800c082 <_strtod_l+0x552>
 800c06c:	4b13      	ldr	r3, [pc, #76]	@ (800c0bc <_strtod_l+0x58c>)
 800c06e:	4650      	mov	r0, sl
 800c070:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c074:	4659      	mov	r1, fp
 800c076:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c07a:	f7f4 fb57 	bl	800072c <__aeabi_ddiv>
 800c07e:	4682      	mov	sl, r0
 800c080:	468b      	mov	fp, r1
 800c082:	1124      	asrs	r4, r4, #4
 800c084:	d0dc      	beq.n	800c040 <_strtod_l+0x510>
 800c086:	2c1f      	cmp	r4, #31
 800c088:	dd20      	ble.n	800c0cc <_strtod_l+0x59c>
 800c08a:	2400      	movs	r4, #0
 800c08c:	46a0      	mov	r8, r4
 800c08e:	46a1      	mov	r9, r4
 800c090:	940a      	str	r4, [sp, #40]	@ 0x28
 800c092:	2322      	movs	r3, #34	@ 0x22
 800c094:	9a05      	ldr	r2, [sp, #20]
 800c096:	f04f 0a00 	mov.w	sl, #0
 800c09a:	f04f 0b00 	mov.w	fp, #0
 800c09e:	6013      	str	r3, [r2, #0]
 800c0a0:	e768      	b.n	800bf74 <_strtod_l+0x444>
 800c0a2:	bf00      	nop
 800c0a4:	0800ef21 	.word	0x0800ef21
 800c0a8:	0800f134 	.word	0x0800f134
 800c0ac:	0800ef19 	.word	0x0800ef19
 800c0b0:	0800ef50 	.word	0x0800ef50
 800c0b4:	7ff00000 	.word	0x7ff00000
 800c0b8:	0800f2dd 	.word	0x0800f2dd
 800c0bc:	0800f068 	.word	0x0800f068
 800c0c0:	0800f040 	.word	0x0800f040
 800c0c4:	7ca00000 	.word	0x7ca00000
 800c0c8:	7fefffff 	.word	0x7fefffff
 800c0cc:	f014 0310 	ands.w	r3, r4, #16
 800c0d0:	bf18      	it	ne
 800c0d2:	236a      	movne	r3, #106	@ 0x6a
 800c0d4:	4650      	mov	r0, sl
 800c0d6:	9308      	str	r3, [sp, #32]
 800c0d8:	4659      	mov	r1, fp
 800c0da:	2300      	movs	r3, #0
 800c0dc:	4ea9      	ldr	r6, [pc, #676]	@ (800c384 <_strtod_l+0x854>)
 800c0de:	07e2      	lsls	r2, r4, #31
 800c0e0:	d504      	bpl.n	800c0ec <_strtod_l+0x5bc>
 800c0e2:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c0e6:	f7f4 f9f7 	bl	80004d8 <__aeabi_dmul>
 800c0ea:	2301      	movs	r3, #1
 800c0ec:	1064      	asrs	r4, r4, #1
 800c0ee:	f106 0608 	add.w	r6, r6, #8
 800c0f2:	d1f4      	bne.n	800c0de <_strtod_l+0x5ae>
 800c0f4:	b10b      	cbz	r3, 800c0fa <_strtod_l+0x5ca>
 800c0f6:	4682      	mov	sl, r0
 800c0f8:	468b      	mov	fp, r1
 800c0fa:	9b08      	ldr	r3, [sp, #32]
 800c0fc:	b1b3      	cbz	r3, 800c12c <_strtod_l+0x5fc>
 800c0fe:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800c102:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800c106:	2b00      	cmp	r3, #0
 800c108:	4659      	mov	r1, fp
 800c10a:	dd0f      	ble.n	800c12c <_strtod_l+0x5fc>
 800c10c:	2b1f      	cmp	r3, #31
 800c10e:	dd57      	ble.n	800c1c0 <_strtod_l+0x690>
 800c110:	2b34      	cmp	r3, #52	@ 0x34
 800c112:	bfd8      	it	le
 800c114:	f04f 33ff 	movle.w	r3, #4294967295
 800c118:	f04f 0a00 	mov.w	sl, #0
 800c11c:	bfcf      	iteee	gt
 800c11e:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800c122:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800c126:	4093      	lslle	r3, r2
 800c128:	ea03 0b01 	andle.w	fp, r3, r1
 800c12c:	2200      	movs	r2, #0
 800c12e:	2300      	movs	r3, #0
 800c130:	4650      	mov	r0, sl
 800c132:	4659      	mov	r1, fp
 800c134:	f7f4 fc38 	bl	80009a8 <__aeabi_dcmpeq>
 800c138:	2800      	cmp	r0, #0
 800c13a:	d1a6      	bne.n	800c08a <_strtod_l+0x55a>
 800c13c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c13e:	463a      	mov	r2, r7
 800c140:	9300      	str	r3, [sp, #0]
 800c142:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800c144:	462b      	mov	r3, r5
 800c146:	9805      	ldr	r0, [sp, #20]
 800c148:	f7ff f8d0 	bl	800b2ec <__s2b>
 800c14c:	900a      	str	r0, [sp, #40]	@ 0x28
 800c14e:	2800      	cmp	r0, #0
 800c150:	f43f af05 	beq.w	800bf5e <_strtod_l+0x42e>
 800c154:	2400      	movs	r4, #0
 800c156:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c158:	eba9 0308 	sub.w	r3, r9, r8
 800c15c:	2a00      	cmp	r2, #0
 800c15e:	bfa8      	it	ge
 800c160:	2300      	movge	r3, #0
 800c162:	46a0      	mov	r8, r4
 800c164:	9312      	str	r3, [sp, #72]	@ 0x48
 800c166:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800c16a:	9316      	str	r3, [sp, #88]	@ 0x58
 800c16c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c16e:	9805      	ldr	r0, [sp, #20]
 800c170:	6859      	ldr	r1, [r3, #4]
 800c172:	f7ff f813 	bl	800b19c <_Balloc>
 800c176:	4681      	mov	r9, r0
 800c178:	2800      	cmp	r0, #0
 800c17a:	f43f aef4 	beq.w	800bf66 <_strtod_l+0x436>
 800c17e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c180:	300c      	adds	r0, #12
 800c182:	691a      	ldr	r2, [r3, #16]
 800c184:	f103 010c 	add.w	r1, r3, #12
 800c188:	3202      	adds	r2, #2
 800c18a:	0092      	lsls	r2, r2, #2
 800c18c:	f7fe f8a3 	bl	800a2d6 <memcpy>
 800c190:	ab1c      	add	r3, sp, #112	@ 0x70
 800c192:	9301      	str	r3, [sp, #4]
 800c194:	ab1b      	add	r3, sp, #108	@ 0x6c
 800c196:	9300      	str	r3, [sp, #0]
 800c198:	4652      	mov	r2, sl
 800c19a:	465b      	mov	r3, fp
 800c19c:	9805      	ldr	r0, [sp, #20]
 800c19e:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800c1a2:	f7ff fbd5 	bl	800b950 <__d2b>
 800c1a6:	901a      	str	r0, [sp, #104]	@ 0x68
 800c1a8:	2800      	cmp	r0, #0
 800c1aa:	f43f aedc 	beq.w	800bf66 <_strtod_l+0x436>
 800c1ae:	2101      	movs	r1, #1
 800c1b0:	9805      	ldr	r0, [sp, #20]
 800c1b2:	f7ff f931 	bl	800b418 <__i2b>
 800c1b6:	4680      	mov	r8, r0
 800c1b8:	b948      	cbnz	r0, 800c1ce <_strtod_l+0x69e>
 800c1ba:	f04f 0800 	mov.w	r8, #0
 800c1be:	e6d2      	b.n	800bf66 <_strtod_l+0x436>
 800c1c0:	f04f 32ff 	mov.w	r2, #4294967295
 800c1c4:	fa02 f303 	lsl.w	r3, r2, r3
 800c1c8:	ea03 0a0a 	and.w	sl, r3, sl
 800c1cc:	e7ae      	b.n	800c12c <_strtod_l+0x5fc>
 800c1ce:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800c1d0:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800c1d2:	2d00      	cmp	r5, #0
 800c1d4:	bfab      	itete	ge
 800c1d6:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800c1d8:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800c1da:	18ef      	addge	r7, r5, r3
 800c1dc:	1b5e      	sublt	r6, r3, r5
 800c1de:	9b08      	ldr	r3, [sp, #32]
 800c1e0:	bfa8      	it	ge
 800c1e2:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800c1e4:	eba5 0503 	sub.w	r5, r5, r3
 800c1e8:	4415      	add	r5, r2
 800c1ea:	4b67      	ldr	r3, [pc, #412]	@ (800c388 <_strtod_l+0x858>)
 800c1ec:	f105 35ff 	add.w	r5, r5, #4294967295
 800c1f0:	bfb8      	it	lt
 800c1f2:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800c1f4:	429d      	cmp	r5, r3
 800c1f6:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800c1fa:	da50      	bge.n	800c29e <_strtod_l+0x76e>
 800c1fc:	1b5b      	subs	r3, r3, r5
 800c1fe:	2b1f      	cmp	r3, #31
 800c200:	f04f 0101 	mov.w	r1, #1
 800c204:	eba2 0203 	sub.w	r2, r2, r3
 800c208:	dc3d      	bgt.n	800c286 <_strtod_l+0x756>
 800c20a:	fa01 f303 	lsl.w	r3, r1, r3
 800c20e:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c210:	2300      	movs	r3, #0
 800c212:	9310      	str	r3, [sp, #64]	@ 0x40
 800c214:	18bd      	adds	r5, r7, r2
 800c216:	9b08      	ldr	r3, [sp, #32]
 800c218:	42af      	cmp	r7, r5
 800c21a:	4416      	add	r6, r2
 800c21c:	441e      	add	r6, r3
 800c21e:	463b      	mov	r3, r7
 800c220:	bfa8      	it	ge
 800c222:	462b      	movge	r3, r5
 800c224:	42b3      	cmp	r3, r6
 800c226:	bfa8      	it	ge
 800c228:	4633      	movge	r3, r6
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	bfc2      	ittt	gt
 800c22e:	1aed      	subgt	r5, r5, r3
 800c230:	1af6      	subgt	r6, r6, r3
 800c232:	1aff      	subgt	r7, r7, r3
 800c234:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c236:	2b00      	cmp	r3, #0
 800c238:	dd16      	ble.n	800c268 <_strtod_l+0x738>
 800c23a:	4641      	mov	r1, r8
 800c23c:	461a      	mov	r2, r3
 800c23e:	9805      	ldr	r0, [sp, #20]
 800c240:	f7ff f9a8 	bl	800b594 <__pow5mult>
 800c244:	4680      	mov	r8, r0
 800c246:	2800      	cmp	r0, #0
 800c248:	d0b7      	beq.n	800c1ba <_strtod_l+0x68a>
 800c24a:	4601      	mov	r1, r0
 800c24c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800c24e:	9805      	ldr	r0, [sp, #20]
 800c250:	f7ff f8f8 	bl	800b444 <__multiply>
 800c254:	900e      	str	r0, [sp, #56]	@ 0x38
 800c256:	2800      	cmp	r0, #0
 800c258:	f43f ae85 	beq.w	800bf66 <_strtod_l+0x436>
 800c25c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c25e:	9805      	ldr	r0, [sp, #20]
 800c260:	f7fe ffdc 	bl	800b21c <_Bfree>
 800c264:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c266:	931a      	str	r3, [sp, #104]	@ 0x68
 800c268:	2d00      	cmp	r5, #0
 800c26a:	dc1d      	bgt.n	800c2a8 <_strtod_l+0x778>
 800c26c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c26e:	2b00      	cmp	r3, #0
 800c270:	dd23      	ble.n	800c2ba <_strtod_l+0x78a>
 800c272:	4649      	mov	r1, r9
 800c274:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800c276:	9805      	ldr	r0, [sp, #20]
 800c278:	f7ff f98c 	bl	800b594 <__pow5mult>
 800c27c:	4681      	mov	r9, r0
 800c27e:	b9e0      	cbnz	r0, 800c2ba <_strtod_l+0x78a>
 800c280:	f04f 0900 	mov.w	r9, #0
 800c284:	e66f      	b.n	800bf66 <_strtod_l+0x436>
 800c286:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800c28a:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800c28e:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800c292:	35e2      	adds	r5, #226	@ 0xe2
 800c294:	fa01 f305 	lsl.w	r3, r1, r5
 800c298:	9310      	str	r3, [sp, #64]	@ 0x40
 800c29a:	9113      	str	r1, [sp, #76]	@ 0x4c
 800c29c:	e7ba      	b.n	800c214 <_strtod_l+0x6e4>
 800c29e:	2300      	movs	r3, #0
 800c2a0:	9310      	str	r3, [sp, #64]	@ 0x40
 800c2a2:	2301      	movs	r3, #1
 800c2a4:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c2a6:	e7b5      	b.n	800c214 <_strtod_l+0x6e4>
 800c2a8:	462a      	mov	r2, r5
 800c2aa:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c2ac:	9805      	ldr	r0, [sp, #20]
 800c2ae:	f7ff f9cb 	bl	800b648 <__lshift>
 800c2b2:	901a      	str	r0, [sp, #104]	@ 0x68
 800c2b4:	2800      	cmp	r0, #0
 800c2b6:	d1d9      	bne.n	800c26c <_strtod_l+0x73c>
 800c2b8:	e655      	b.n	800bf66 <_strtod_l+0x436>
 800c2ba:	2e00      	cmp	r6, #0
 800c2bc:	dd07      	ble.n	800c2ce <_strtod_l+0x79e>
 800c2be:	4649      	mov	r1, r9
 800c2c0:	4632      	mov	r2, r6
 800c2c2:	9805      	ldr	r0, [sp, #20]
 800c2c4:	f7ff f9c0 	bl	800b648 <__lshift>
 800c2c8:	4681      	mov	r9, r0
 800c2ca:	2800      	cmp	r0, #0
 800c2cc:	d0d8      	beq.n	800c280 <_strtod_l+0x750>
 800c2ce:	2f00      	cmp	r7, #0
 800c2d0:	dd08      	ble.n	800c2e4 <_strtod_l+0x7b4>
 800c2d2:	4641      	mov	r1, r8
 800c2d4:	463a      	mov	r2, r7
 800c2d6:	9805      	ldr	r0, [sp, #20]
 800c2d8:	f7ff f9b6 	bl	800b648 <__lshift>
 800c2dc:	4680      	mov	r8, r0
 800c2de:	2800      	cmp	r0, #0
 800c2e0:	f43f ae41 	beq.w	800bf66 <_strtod_l+0x436>
 800c2e4:	464a      	mov	r2, r9
 800c2e6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c2e8:	9805      	ldr	r0, [sp, #20]
 800c2ea:	f7ff fa35 	bl	800b758 <__mdiff>
 800c2ee:	4604      	mov	r4, r0
 800c2f0:	2800      	cmp	r0, #0
 800c2f2:	f43f ae38 	beq.w	800bf66 <_strtod_l+0x436>
 800c2f6:	68c3      	ldr	r3, [r0, #12]
 800c2f8:	4641      	mov	r1, r8
 800c2fa:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c2fc:	2300      	movs	r3, #0
 800c2fe:	60c3      	str	r3, [r0, #12]
 800c300:	f7ff fa0e 	bl	800b720 <__mcmp>
 800c304:	2800      	cmp	r0, #0
 800c306:	da45      	bge.n	800c394 <_strtod_l+0x864>
 800c308:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c30a:	ea53 030a 	orrs.w	r3, r3, sl
 800c30e:	d16b      	bne.n	800c3e8 <_strtod_l+0x8b8>
 800c310:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c314:	2b00      	cmp	r3, #0
 800c316:	d167      	bne.n	800c3e8 <_strtod_l+0x8b8>
 800c318:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c31c:	0d1b      	lsrs	r3, r3, #20
 800c31e:	051b      	lsls	r3, r3, #20
 800c320:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800c324:	d960      	bls.n	800c3e8 <_strtod_l+0x8b8>
 800c326:	6963      	ldr	r3, [r4, #20]
 800c328:	b913      	cbnz	r3, 800c330 <_strtod_l+0x800>
 800c32a:	6923      	ldr	r3, [r4, #16]
 800c32c:	2b01      	cmp	r3, #1
 800c32e:	dd5b      	ble.n	800c3e8 <_strtod_l+0x8b8>
 800c330:	4621      	mov	r1, r4
 800c332:	2201      	movs	r2, #1
 800c334:	9805      	ldr	r0, [sp, #20]
 800c336:	f7ff f987 	bl	800b648 <__lshift>
 800c33a:	4641      	mov	r1, r8
 800c33c:	4604      	mov	r4, r0
 800c33e:	f7ff f9ef 	bl	800b720 <__mcmp>
 800c342:	2800      	cmp	r0, #0
 800c344:	dd50      	ble.n	800c3e8 <_strtod_l+0x8b8>
 800c346:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c34a:	9a08      	ldr	r2, [sp, #32]
 800c34c:	0d1b      	lsrs	r3, r3, #20
 800c34e:	051b      	lsls	r3, r3, #20
 800c350:	2a00      	cmp	r2, #0
 800c352:	d06a      	beq.n	800c42a <_strtod_l+0x8fa>
 800c354:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800c358:	d867      	bhi.n	800c42a <_strtod_l+0x8fa>
 800c35a:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800c35e:	f67f ae98 	bls.w	800c092 <_strtod_l+0x562>
 800c362:	4650      	mov	r0, sl
 800c364:	4659      	mov	r1, fp
 800c366:	4b09      	ldr	r3, [pc, #36]	@ (800c38c <_strtod_l+0x85c>)
 800c368:	2200      	movs	r2, #0
 800c36a:	f7f4 f8b5 	bl	80004d8 <__aeabi_dmul>
 800c36e:	4b08      	ldr	r3, [pc, #32]	@ (800c390 <_strtod_l+0x860>)
 800c370:	4682      	mov	sl, r0
 800c372:	400b      	ands	r3, r1
 800c374:	468b      	mov	fp, r1
 800c376:	2b00      	cmp	r3, #0
 800c378:	f47f ae00 	bne.w	800bf7c <_strtod_l+0x44c>
 800c37c:	2322      	movs	r3, #34	@ 0x22
 800c37e:	9a05      	ldr	r2, [sp, #20]
 800c380:	6013      	str	r3, [r2, #0]
 800c382:	e5fb      	b.n	800bf7c <_strtod_l+0x44c>
 800c384:	0800f160 	.word	0x0800f160
 800c388:	fffffc02 	.word	0xfffffc02
 800c38c:	39500000 	.word	0x39500000
 800c390:	7ff00000 	.word	0x7ff00000
 800c394:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800c398:	d165      	bne.n	800c466 <_strtod_l+0x936>
 800c39a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800c39c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c3a0:	b35a      	cbz	r2, 800c3fa <_strtod_l+0x8ca>
 800c3a2:	4a99      	ldr	r2, [pc, #612]	@ (800c608 <_strtod_l+0xad8>)
 800c3a4:	4293      	cmp	r3, r2
 800c3a6:	d12b      	bne.n	800c400 <_strtod_l+0x8d0>
 800c3a8:	9b08      	ldr	r3, [sp, #32]
 800c3aa:	4651      	mov	r1, sl
 800c3ac:	b303      	cbz	r3, 800c3f0 <_strtod_l+0x8c0>
 800c3ae:	465a      	mov	r2, fp
 800c3b0:	4b96      	ldr	r3, [pc, #600]	@ (800c60c <_strtod_l+0xadc>)
 800c3b2:	4013      	ands	r3, r2
 800c3b4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800c3b8:	f04f 32ff 	mov.w	r2, #4294967295
 800c3bc:	d81b      	bhi.n	800c3f6 <_strtod_l+0x8c6>
 800c3be:	0d1b      	lsrs	r3, r3, #20
 800c3c0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800c3c4:	fa02 f303 	lsl.w	r3, r2, r3
 800c3c8:	4299      	cmp	r1, r3
 800c3ca:	d119      	bne.n	800c400 <_strtod_l+0x8d0>
 800c3cc:	4b90      	ldr	r3, [pc, #576]	@ (800c610 <_strtod_l+0xae0>)
 800c3ce:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c3d0:	429a      	cmp	r2, r3
 800c3d2:	d102      	bne.n	800c3da <_strtod_l+0x8aa>
 800c3d4:	3101      	adds	r1, #1
 800c3d6:	f43f adc6 	beq.w	800bf66 <_strtod_l+0x436>
 800c3da:	f04f 0a00 	mov.w	sl, #0
 800c3de:	4b8b      	ldr	r3, [pc, #556]	@ (800c60c <_strtod_l+0xadc>)
 800c3e0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c3e2:	401a      	ands	r2, r3
 800c3e4:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800c3e8:	9b08      	ldr	r3, [sp, #32]
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d1b9      	bne.n	800c362 <_strtod_l+0x832>
 800c3ee:	e5c5      	b.n	800bf7c <_strtod_l+0x44c>
 800c3f0:	f04f 33ff 	mov.w	r3, #4294967295
 800c3f4:	e7e8      	b.n	800c3c8 <_strtod_l+0x898>
 800c3f6:	4613      	mov	r3, r2
 800c3f8:	e7e6      	b.n	800c3c8 <_strtod_l+0x898>
 800c3fa:	ea53 030a 	orrs.w	r3, r3, sl
 800c3fe:	d0a2      	beq.n	800c346 <_strtod_l+0x816>
 800c400:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c402:	b1db      	cbz	r3, 800c43c <_strtod_l+0x90c>
 800c404:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c406:	4213      	tst	r3, r2
 800c408:	d0ee      	beq.n	800c3e8 <_strtod_l+0x8b8>
 800c40a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c40c:	4650      	mov	r0, sl
 800c40e:	4659      	mov	r1, fp
 800c410:	9a08      	ldr	r2, [sp, #32]
 800c412:	b1bb      	cbz	r3, 800c444 <_strtod_l+0x914>
 800c414:	f7ff fb68 	bl	800bae8 <sulp>
 800c418:	4602      	mov	r2, r0
 800c41a:	460b      	mov	r3, r1
 800c41c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c420:	f7f3 fea4 	bl	800016c <__adddf3>
 800c424:	4682      	mov	sl, r0
 800c426:	468b      	mov	fp, r1
 800c428:	e7de      	b.n	800c3e8 <_strtod_l+0x8b8>
 800c42a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800c42e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800c432:	f04f 3aff 	mov.w	sl, #4294967295
 800c436:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800c43a:	e7d5      	b.n	800c3e8 <_strtod_l+0x8b8>
 800c43c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800c43e:	ea13 0f0a 	tst.w	r3, sl
 800c442:	e7e1      	b.n	800c408 <_strtod_l+0x8d8>
 800c444:	f7ff fb50 	bl	800bae8 <sulp>
 800c448:	4602      	mov	r2, r0
 800c44a:	460b      	mov	r3, r1
 800c44c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c450:	f7f3 fe8a 	bl	8000168 <__aeabi_dsub>
 800c454:	2200      	movs	r2, #0
 800c456:	2300      	movs	r3, #0
 800c458:	4682      	mov	sl, r0
 800c45a:	468b      	mov	fp, r1
 800c45c:	f7f4 faa4 	bl	80009a8 <__aeabi_dcmpeq>
 800c460:	2800      	cmp	r0, #0
 800c462:	d0c1      	beq.n	800c3e8 <_strtod_l+0x8b8>
 800c464:	e615      	b.n	800c092 <_strtod_l+0x562>
 800c466:	4641      	mov	r1, r8
 800c468:	4620      	mov	r0, r4
 800c46a:	f7ff fac9 	bl	800ba00 <__ratio>
 800c46e:	2200      	movs	r2, #0
 800c470:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800c474:	4606      	mov	r6, r0
 800c476:	460f      	mov	r7, r1
 800c478:	f7f4 faaa 	bl	80009d0 <__aeabi_dcmple>
 800c47c:	2800      	cmp	r0, #0
 800c47e:	d06d      	beq.n	800c55c <_strtod_l+0xa2c>
 800c480:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c482:	2b00      	cmp	r3, #0
 800c484:	d178      	bne.n	800c578 <_strtod_l+0xa48>
 800c486:	f1ba 0f00 	cmp.w	sl, #0
 800c48a:	d156      	bne.n	800c53a <_strtod_l+0xa0a>
 800c48c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c48e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c492:	2b00      	cmp	r3, #0
 800c494:	d158      	bne.n	800c548 <_strtod_l+0xa18>
 800c496:	2200      	movs	r2, #0
 800c498:	4630      	mov	r0, r6
 800c49a:	4639      	mov	r1, r7
 800c49c:	4b5d      	ldr	r3, [pc, #372]	@ (800c614 <_strtod_l+0xae4>)
 800c49e:	f7f4 fa8d 	bl	80009bc <__aeabi_dcmplt>
 800c4a2:	2800      	cmp	r0, #0
 800c4a4:	d157      	bne.n	800c556 <_strtod_l+0xa26>
 800c4a6:	4630      	mov	r0, r6
 800c4a8:	4639      	mov	r1, r7
 800c4aa:	2200      	movs	r2, #0
 800c4ac:	4b5a      	ldr	r3, [pc, #360]	@ (800c618 <_strtod_l+0xae8>)
 800c4ae:	f7f4 f813 	bl	80004d8 <__aeabi_dmul>
 800c4b2:	4606      	mov	r6, r0
 800c4b4:	460f      	mov	r7, r1
 800c4b6:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800c4ba:	9606      	str	r6, [sp, #24]
 800c4bc:	9307      	str	r3, [sp, #28]
 800c4be:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c4c2:	4d52      	ldr	r5, [pc, #328]	@ (800c60c <_strtod_l+0xadc>)
 800c4c4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800c4c8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c4ca:	401d      	ands	r5, r3
 800c4cc:	4b53      	ldr	r3, [pc, #332]	@ (800c61c <_strtod_l+0xaec>)
 800c4ce:	429d      	cmp	r5, r3
 800c4d0:	f040 80aa 	bne.w	800c628 <_strtod_l+0xaf8>
 800c4d4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c4d6:	4650      	mov	r0, sl
 800c4d8:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800c4dc:	4659      	mov	r1, fp
 800c4de:	f7ff f9cf 	bl	800b880 <__ulp>
 800c4e2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c4e6:	f7f3 fff7 	bl	80004d8 <__aeabi_dmul>
 800c4ea:	4652      	mov	r2, sl
 800c4ec:	465b      	mov	r3, fp
 800c4ee:	f7f3 fe3d 	bl	800016c <__adddf3>
 800c4f2:	460b      	mov	r3, r1
 800c4f4:	4945      	ldr	r1, [pc, #276]	@ (800c60c <_strtod_l+0xadc>)
 800c4f6:	4a4a      	ldr	r2, [pc, #296]	@ (800c620 <_strtod_l+0xaf0>)
 800c4f8:	4019      	ands	r1, r3
 800c4fa:	4291      	cmp	r1, r2
 800c4fc:	4682      	mov	sl, r0
 800c4fe:	d942      	bls.n	800c586 <_strtod_l+0xa56>
 800c500:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c502:	4b43      	ldr	r3, [pc, #268]	@ (800c610 <_strtod_l+0xae0>)
 800c504:	429a      	cmp	r2, r3
 800c506:	d103      	bne.n	800c510 <_strtod_l+0x9e0>
 800c508:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c50a:	3301      	adds	r3, #1
 800c50c:	f43f ad2b 	beq.w	800bf66 <_strtod_l+0x436>
 800c510:	f04f 3aff 	mov.w	sl, #4294967295
 800c514:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 800c610 <_strtod_l+0xae0>
 800c518:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c51a:	9805      	ldr	r0, [sp, #20]
 800c51c:	f7fe fe7e 	bl	800b21c <_Bfree>
 800c520:	4649      	mov	r1, r9
 800c522:	9805      	ldr	r0, [sp, #20]
 800c524:	f7fe fe7a 	bl	800b21c <_Bfree>
 800c528:	4641      	mov	r1, r8
 800c52a:	9805      	ldr	r0, [sp, #20]
 800c52c:	f7fe fe76 	bl	800b21c <_Bfree>
 800c530:	4621      	mov	r1, r4
 800c532:	9805      	ldr	r0, [sp, #20]
 800c534:	f7fe fe72 	bl	800b21c <_Bfree>
 800c538:	e618      	b.n	800c16c <_strtod_l+0x63c>
 800c53a:	f1ba 0f01 	cmp.w	sl, #1
 800c53e:	d103      	bne.n	800c548 <_strtod_l+0xa18>
 800c540:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c542:	2b00      	cmp	r3, #0
 800c544:	f43f ada5 	beq.w	800c092 <_strtod_l+0x562>
 800c548:	2200      	movs	r2, #0
 800c54a:	4b36      	ldr	r3, [pc, #216]	@ (800c624 <_strtod_l+0xaf4>)
 800c54c:	2600      	movs	r6, #0
 800c54e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c552:	4f30      	ldr	r7, [pc, #192]	@ (800c614 <_strtod_l+0xae4>)
 800c554:	e7b3      	b.n	800c4be <_strtod_l+0x98e>
 800c556:	2600      	movs	r6, #0
 800c558:	4f2f      	ldr	r7, [pc, #188]	@ (800c618 <_strtod_l+0xae8>)
 800c55a:	e7ac      	b.n	800c4b6 <_strtod_l+0x986>
 800c55c:	4630      	mov	r0, r6
 800c55e:	4639      	mov	r1, r7
 800c560:	4b2d      	ldr	r3, [pc, #180]	@ (800c618 <_strtod_l+0xae8>)
 800c562:	2200      	movs	r2, #0
 800c564:	f7f3 ffb8 	bl	80004d8 <__aeabi_dmul>
 800c568:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c56a:	4606      	mov	r6, r0
 800c56c:	460f      	mov	r7, r1
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d0a1      	beq.n	800c4b6 <_strtod_l+0x986>
 800c572:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800c576:	e7a2      	b.n	800c4be <_strtod_l+0x98e>
 800c578:	2200      	movs	r2, #0
 800c57a:	4b26      	ldr	r3, [pc, #152]	@ (800c614 <_strtod_l+0xae4>)
 800c57c:	4616      	mov	r6, r2
 800c57e:	461f      	mov	r7, r3
 800c580:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c584:	e79b      	b.n	800c4be <_strtod_l+0x98e>
 800c586:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800c58a:	9b08      	ldr	r3, [sp, #32]
 800c58c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800c590:	2b00      	cmp	r3, #0
 800c592:	d1c1      	bne.n	800c518 <_strtod_l+0x9e8>
 800c594:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c598:	0d1b      	lsrs	r3, r3, #20
 800c59a:	051b      	lsls	r3, r3, #20
 800c59c:	429d      	cmp	r5, r3
 800c59e:	d1bb      	bne.n	800c518 <_strtod_l+0x9e8>
 800c5a0:	4630      	mov	r0, r6
 800c5a2:	4639      	mov	r1, r7
 800c5a4:	f7f4 fdfa 	bl	800119c <__aeabi_d2lz>
 800c5a8:	f7f3 ff68 	bl	800047c <__aeabi_l2d>
 800c5ac:	4602      	mov	r2, r0
 800c5ae:	460b      	mov	r3, r1
 800c5b0:	4630      	mov	r0, r6
 800c5b2:	4639      	mov	r1, r7
 800c5b4:	f7f3 fdd8 	bl	8000168 <__aeabi_dsub>
 800c5b8:	460b      	mov	r3, r1
 800c5ba:	4602      	mov	r2, r0
 800c5bc:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800c5c0:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800c5c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c5c6:	ea46 060a 	orr.w	r6, r6, sl
 800c5ca:	431e      	orrs	r6, r3
 800c5cc:	d069      	beq.n	800c6a2 <_strtod_l+0xb72>
 800c5ce:	a30a      	add	r3, pc, #40	@ (adr r3, 800c5f8 <_strtod_l+0xac8>)
 800c5d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5d4:	f7f4 f9f2 	bl	80009bc <__aeabi_dcmplt>
 800c5d8:	2800      	cmp	r0, #0
 800c5da:	f47f accf 	bne.w	800bf7c <_strtod_l+0x44c>
 800c5de:	a308      	add	r3, pc, #32	@ (adr r3, 800c600 <_strtod_l+0xad0>)
 800c5e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5e4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c5e8:	f7f4 fa06 	bl	80009f8 <__aeabi_dcmpgt>
 800c5ec:	2800      	cmp	r0, #0
 800c5ee:	d093      	beq.n	800c518 <_strtod_l+0x9e8>
 800c5f0:	e4c4      	b.n	800bf7c <_strtod_l+0x44c>
 800c5f2:	bf00      	nop
 800c5f4:	f3af 8000 	nop.w
 800c5f8:	94a03595 	.word	0x94a03595
 800c5fc:	3fdfffff 	.word	0x3fdfffff
 800c600:	35afe535 	.word	0x35afe535
 800c604:	3fe00000 	.word	0x3fe00000
 800c608:	000fffff 	.word	0x000fffff
 800c60c:	7ff00000 	.word	0x7ff00000
 800c610:	7fefffff 	.word	0x7fefffff
 800c614:	3ff00000 	.word	0x3ff00000
 800c618:	3fe00000 	.word	0x3fe00000
 800c61c:	7fe00000 	.word	0x7fe00000
 800c620:	7c9fffff 	.word	0x7c9fffff
 800c624:	bff00000 	.word	0xbff00000
 800c628:	9b08      	ldr	r3, [sp, #32]
 800c62a:	b323      	cbz	r3, 800c676 <_strtod_l+0xb46>
 800c62c:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800c630:	d821      	bhi.n	800c676 <_strtod_l+0xb46>
 800c632:	a327      	add	r3, pc, #156	@ (adr r3, 800c6d0 <_strtod_l+0xba0>)
 800c634:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c638:	4630      	mov	r0, r6
 800c63a:	4639      	mov	r1, r7
 800c63c:	f7f4 f9c8 	bl	80009d0 <__aeabi_dcmple>
 800c640:	b1a0      	cbz	r0, 800c66c <_strtod_l+0xb3c>
 800c642:	4639      	mov	r1, r7
 800c644:	4630      	mov	r0, r6
 800c646:	f7f4 fa1f 	bl	8000a88 <__aeabi_d2uiz>
 800c64a:	2801      	cmp	r0, #1
 800c64c:	bf38      	it	cc
 800c64e:	2001      	movcc	r0, #1
 800c650:	f7f3 fec8 	bl	80003e4 <__aeabi_ui2d>
 800c654:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c656:	4606      	mov	r6, r0
 800c658:	460f      	mov	r7, r1
 800c65a:	b9fb      	cbnz	r3, 800c69c <_strtod_l+0xb6c>
 800c65c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c660:	9014      	str	r0, [sp, #80]	@ 0x50
 800c662:	9315      	str	r3, [sp, #84]	@ 0x54
 800c664:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800c668:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800c66c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c66e:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800c672:	1b5b      	subs	r3, r3, r5
 800c674:	9311      	str	r3, [sp, #68]	@ 0x44
 800c676:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c67a:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800c67e:	f7ff f8ff 	bl	800b880 <__ulp>
 800c682:	4602      	mov	r2, r0
 800c684:	460b      	mov	r3, r1
 800c686:	4650      	mov	r0, sl
 800c688:	4659      	mov	r1, fp
 800c68a:	f7f3 ff25 	bl	80004d8 <__aeabi_dmul>
 800c68e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800c692:	f7f3 fd6b 	bl	800016c <__adddf3>
 800c696:	4682      	mov	sl, r0
 800c698:	468b      	mov	fp, r1
 800c69a:	e776      	b.n	800c58a <_strtod_l+0xa5a>
 800c69c:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800c6a0:	e7e0      	b.n	800c664 <_strtod_l+0xb34>
 800c6a2:	a30d      	add	r3, pc, #52	@ (adr r3, 800c6d8 <_strtod_l+0xba8>)
 800c6a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6a8:	f7f4 f988 	bl	80009bc <__aeabi_dcmplt>
 800c6ac:	e79e      	b.n	800c5ec <_strtod_l+0xabc>
 800c6ae:	2300      	movs	r3, #0
 800c6b0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c6b2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c6b4:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800c6b6:	6013      	str	r3, [r2, #0]
 800c6b8:	f7ff ba77 	b.w	800bbaa <_strtod_l+0x7a>
 800c6bc:	2a65      	cmp	r2, #101	@ 0x65
 800c6be:	f43f ab6e 	beq.w	800bd9e <_strtod_l+0x26e>
 800c6c2:	2a45      	cmp	r2, #69	@ 0x45
 800c6c4:	f43f ab6b 	beq.w	800bd9e <_strtod_l+0x26e>
 800c6c8:	2301      	movs	r3, #1
 800c6ca:	f7ff bba6 	b.w	800be1a <_strtod_l+0x2ea>
 800c6ce:	bf00      	nop
 800c6d0:	ffc00000 	.word	0xffc00000
 800c6d4:	41dfffff 	.word	0x41dfffff
 800c6d8:	94a03595 	.word	0x94a03595
 800c6dc:	3fcfffff 	.word	0x3fcfffff

0800c6e0 <_strtod_r>:
 800c6e0:	4b01      	ldr	r3, [pc, #4]	@ (800c6e8 <_strtod_r+0x8>)
 800c6e2:	f7ff ba25 	b.w	800bb30 <_strtod_l>
 800c6e6:	bf00      	nop
 800c6e8:	20000090 	.word	0x20000090

0800c6ec <_strtol_l.constprop.0>:
 800c6ec:	2b24      	cmp	r3, #36	@ 0x24
 800c6ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c6f2:	4686      	mov	lr, r0
 800c6f4:	4690      	mov	r8, r2
 800c6f6:	d801      	bhi.n	800c6fc <_strtol_l.constprop.0+0x10>
 800c6f8:	2b01      	cmp	r3, #1
 800c6fa:	d106      	bne.n	800c70a <_strtol_l.constprop.0+0x1e>
 800c6fc:	f7fd fdb0 	bl	800a260 <__errno>
 800c700:	2316      	movs	r3, #22
 800c702:	6003      	str	r3, [r0, #0]
 800c704:	2000      	movs	r0, #0
 800c706:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c70a:	460d      	mov	r5, r1
 800c70c:	4833      	ldr	r0, [pc, #204]	@ (800c7dc <_strtol_l.constprop.0+0xf0>)
 800c70e:	462a      	mov	r2, r5
 800c710:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c714:	5d06      	ldrb	r6, [r0, r4]
 800c716:	f016 0608 	ands.w	r6, r6, #8
 800c71a:	d1f8      	bne.n	800c70e <_strtol_l.constprop.0+0x22>
 800c71c:	2c2d      	cmp	r4, #45	@ 0x2d
 800c71e:	d12d      	bne.n	800c77c <_strtol_l.constprop.0+0x90>
 800c720:	2601      	movs	r6, #1
 800c722:	782c      	ldrb	r4, [r5, #0]
 800c724:	1c95      	adds	r5, r2, #2
 800c726:	f033 0210 	bics.w	r2, r3, #16
 800c72a:	d109      	bne.n	800c740 <_strtol_l.constprop.0+0x54>
 800c72c:	2c30      	cmp	r4, #48	@ 0x30
 800c72e:	d12a      	bne.n	800c786 <_strtol_l.constprop.0+0x9a>
 800c730:	782a      	ldrb	r2, [r5, #0]
 800c732:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800c736:	2a58      	cmp	r2, #88	@ 0x58
 800c738:	d125      	bne.n	800c786 <_strtol_l.constprop.0+0x9a>
 800c73a:	2310      	movs	r3, #16
 800c73c:	786c      	ldrb	r4, [r5, #1]
 800c73e:	3502      	adds	r5, #2
 800c740:	2200      	movs	r2, #0
 800c742:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800c746:	f10c 3cff 	add.w	ip, ip, #4294967295
 800c74a:	fbbc f9f3 	udiv	r9, ip, r3
 800c74e:	4610      	mov	r0, r2
 800c750:	fb03 ca19 	mls	sl, r3, r9, ip
 800c754:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800c758:	2f09      	cmp	r7, #9
 800c75a:	d81b      	bhi.n	800c794 <_strtol_l.constprop.0+0xa8>
 800c75c:	463c      	mov	r4, r7
 800c75e:	42a3      	cmp	r3, r4
 800c760:	dd27      	ble.n	800c7b2 <_strtol_l.constprop.0+0xc6>
 800c762:	1c57      	adds	r7, r2, #1
 800c764:	d007      	beq.n	800c776 <_strtol_l.constprop.0+0x8a>
 800c766:	4581      	cmp	r9, r0
 800c768:	d320      	bcc.n	800c7ac <_strtol_l.constprop.0+0xc0>
 800c76a:	d101      	bne.n	800c770 <_strtol_l.constprop.0+0x84>
 800c76c:	45a2      	cmp	sl, r4
 800c76e:	db1d      	blt.n	800c7ac <_strtol_l.constprop.0+0xc0>
 800c770:	2201      	movs	r2, #1
 800c772:	fb00 4003 	mla	r0, r0, r3, r4
 800c776:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c77a:	e7eb      	b.n	800c754 <_strtol_l.constprop.0+0x68>
 800c77c:	2c2b      	cmp	r4, #43	@ 0x2b
 800c77e:	bf04      	itt	eq
 800c780:	782c      	ldrbeq	r4, [r5, #0]
 800c782:	1c95      	addeq	r5, r2, #2
 800c784:	e7cf      	b.n	800c726 <_strtol_l.constprop.0+0x3a>
 800c786:	2b00      	cmp	r3, #0
 800c788:	d1da      	bne.n	800c740 <_strtol_l.constprop.0+0x54>
 800c78a:	2c30      	cmp	r4, #48	@ 0x30
 800c78c:	bf0c      	ite	eq
 800c78e:	2308      	moveq	r3, #8
 800c790:	230a      	movne	r3, #10
 800c792:	e7d5      	b.n	800c740 <_strtol_l.constprop.0+0x54>
 800c794:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800c798:	2f19      	cmp	r7, #25
 800c79a:	d801      	bhi.n	800c7a0 <_strtol_l.constprop.0+0xb4>
 800c79c:	3c37      	subs	r4, #55	@ 0x37
 800c79e:	e7de      	b.n	800c75e <_strtol_l.constprop.0+0x72>
 800c7a0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800c7a4:	2f19      	cmp	r7, #25
 800c7a6:	d804      	bhi.n	800c7b2 <_strtol_l.constprop.0+0xc6>
 800c7a8:	3c57      	subs	r4, #87	@ 0x57
 800c7aa:	e7d8      	b.n	800c75e <_strtol_l.constprop.0+0x72>
 800c7ac:	f04f 32ff 	mov.w	r2, #4294967295
 800c7b0:	e7e1      	b.n	800c776 <_strtol_l.constprop.0+0x8a>
 800c7b2:	1c53      	adds	r3, r2, #1
 800c7b4:	d108      	bne.n	800c7c8 <_strtol_l.constprop.0+0xdc>
 800c7b6:	2322      	movs	r3, #34	@ 0x22
 800c7b8:	4660      	mov	r0, ip
 800c7ba:	f8ce 3000 	str.w	r3, [lr]
 800c7be:	f1b8 0f00 	cmp.w	r8, #0
 800c7c2:	d0a0      	beq.n	800c706 <_strtol_l.constprop.0+0x1a>
 800c7c4:	1e69      	subs	r1, r5, #1
 800c7c6:	e006      	b.n	800c7d6 <_strtol_l.constprop.0+0xea>
 800c7c8:	b106      	cbz	r6, 800c7cc <_strtol_l.constprop.0+0xe0>
 800c7ca:	4240      	negs	r0, r0
 800c7cc:	f1b8 0f00 	cmp.w	r8, #0
 800c7d0:	d099      	beq.n	800c706 <_strtol_l.constprop.0+0x1a>
 800c7d2:	2a00      	cmp	r2, #0
 800c7d4:	d1f6      	bne.n	800c7c4 <_strtol_l.constprop.0+0xd8>
 800c7d6:	f8c8 1000 	str.w	r1, [r8]
 800c7da:	e794      	b.n	800c706 <_strtol_l.constprop.0+0x1a>
 800c7dc:	0800f189 	.word	0x0800f189

0800c7e0 <_strtol_r>:
 800c7e0:	f7ff bf84 	b.w	800c6ec <_strtol_l.constprop.0>

0800c7e4 <__ssputs_r>:
 800c7e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c7e8:	461f      	mov	r7, r3
 800c7ea:	688e      	ldr	r6, [r1, #8]
 800c7ec:	4682      	mov	sl, r0
 800c7ee:	42be      	cmp	r6, r7
 800c7f0:	460c      	mov	r4, r1
 800c7f2:	4690      	mov	r8, r2
 800c7f4:	680b      	ldr	r3, [r1, #0]
 800c7f6:	d82d      	bhi.n	800c854 <__ssputs_r+0x70>
 800c7f8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c7fc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c800:	d026      	beq.n	800c850 <__ssputs_r+0x6c>
 800c802:	6965      	ldr	r5, [r4, #20]
 800c804:	6909      	ldr	r1, [r1, #16]
 800c806:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c80a:	eba3 0901 	sub.w	r9, r3, r1
 800c80e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c812:	1c7b      	adds	r3, r7, #1
 800c814:	444b      	add	r3, r9
 800c816:	106d      	asrs	r5, r5, #1
 800c818:	429d      	cmp	r5, r3
 800c81a:	bf38      	it	cc
 800c81c:	461d      	movcc	r5, r3
 800c81e:	0553      	lsls	r3, r2, #21
 800c820:	d527      	bpl.n	800c872 <__ssputs_r+0x8e>
 800c822:	4629      	mov	r1, r5
 800c824:	f7fe fc2e 	bl	800b084 <_malloc_r>
 800c828:	4606      	mov	r6, r0
 800c82a:	b360      	cbz	r0, 800c886 <__ssputs_r+0xa2>
 800c82c:	464a      	mov	r2, r9
 800c82e:	6921      	ldr	r1, [r4, #16]
 800c830:	f7fd fd51 	bl	800a2d6 <memcpy>
 800c834:	89a3      	ldrh	r3, [r4, #12]
 800c836:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c83a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c83e:	81a3      	strh	r3, [r4, #12]
 800c840:	6126      	str	r6, [r4, #16]
 800c842:	444e      	add	r6, r9
 800c844:	6026      	str	r6, [r4, #0]
 800c846:	463e      	mov	r6, r7
 800c848:	6165      	str	r5, [r4, #20]
 800c84a:	eba5 0509 	sub.w	r5, r5, r9
 800c84e:	60a5      	str	r5, [r4, #8]
 800c850:	42be      	cmp	r6, r7
 800c852:	d900      	bls.n	800c856 <__ssputs_r+0x72>
 800c854:	463e      	mov	r6, r7
 800c856:	4632      	mov	r2, r6
 800c858:	4641      	mov	r1, r8
 800c85a:	6820      	ldr	r0, [r4, #0]
 800c85c:	f7fd fc94 	bl	800a188 <memmove>
 800c860:	2000      	movs	r0, #0
 800c862:	68a3      	ldr	r3, [r4, #8]
 800c864:	1b9b      	subs	r3, r3, r6
 800c866:	60a3      	str	r3, [r4, #8]
 800c868:	6823      	ldr	r3, [r4, #0]
 800c86a:	4433      	add	r3, r6
 800c86c:	6023      	str	r3, [r4, #0]
 800c86e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c872:	462a      	mov	r2, r5
 800c874:	f000 ff1f 	bl	800d6b6 <_realloc_r>
 800c878:	4606      	mov	r6, r0
 800c87a:	2800      	cmp	r0, #0
 800c87c:	d1e0      	bne.n	800c840 <__ssputs_r+0x5c>
 800c87e:	4650      	mov	r0, sl
 800c880:	6921      	ldr	r1, [r4, #16]
 800c882:	f7fe fb8d 	bl	800afa0 <_free_r>
 800c886:	230c      	movs	r3, #12
 800c888:	f8ca 3000 	str.w	r3, [sl]
 800c88c:	89a3      	ldrh	r3, [r4, #12]
 800c88e:	f04f 30ff 	mov.w	r0, #4294967295
 800c892:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c896:	81a3      	strh	r3, [r4, #12]
 800c898:	e7e9      	b.n	800c86e <__ssputs_r+0x8a>
	...

0800c89c <_svfiprintf_r>:
 800c89c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8a0:	4698      	mov	r8, r3
 800c8a2:	898b      	ldrh	r3, [r1, #12]
 800c8a4:	4607      	mov	r7, r0
 800c8a6:	061b      	lsls	r3, r3, #24
 800c8a8:	460d      	mov	r5, r1
 800c8aa:	4614      	mov	r4, r2
 800c8ac:	b09d      	sub	sp, #116	@ 0x74
 800c8ae:	d510      	bpl.n	800c8d2 <_svfiprintf_r+0x36>
 800c8b0:	690b      	ldr	r3, [r1, #16]
 800c8b2:	b973      	cbnz	r3, 800c8d2 <_svfiprintf_r+0x36>
 800c8b4:	2140      	movs	r1, #64	@ 0x40
 800c8b6:	f7fe fbe5 	bl	800b084 <_malloc_r>
 800c8ba:	6028      	str	r0, [r5, #0]
 800c8bc:	6128      	str	r0, [r5, #16]
 800c8be:	b930      	cbnz	r0, 800c8ce <_svfiprintf_r+0x32>
 800c8c0:	230c      	movs	r3, #12
 800c8c2:	603b      	str	r3, [r7, #0]
 800c8c4:	f04f 30ff 	mov.w	r0, #4294967295
 800c8c8:	b01d      	add	sp, #116	@ 0x74
 800c8ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8ce:	2340      	movs	r3, #64	@ 0x40
 800c8d0:	616b      	str	r3, [r5, #20]
 800c8d2:	2300      	movs	r3, #0
 800c8d4:	9309      	str	r3, [sp, #36]	@ 0x24
 800c8d6:	2320      	movs	r3, #32
 800c8d8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c8dc:	2330      	movs	r3, #48	@ 0x30
 800c8de:	f04f 0901 	mov.w	r9, #1
 800c8e2:	f8cd 800c 	str.w	r8, [sp, #12]
 800c8e6:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800ca80 <_svfiprintf_r+0x1e4>
 800c8ea:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c8ee:	4623      	mov	r3, r4
 800c8f0:	469a      	mov	sl, r3
 800c8f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c8f6:	b10a      	cbz	r2, 800c8fc <_svfiprintf_r+0x60>
 800c8f8:	2a25      	cmp	r2, #37	@ 0x25
 800c8fa:	d1f9      	bne.n	800c8f0 <_svfiprintf_r+0x54>
 800c8fc:	ebba 0b04 	subs.w	fp, sl, r4
 800c900:	d00b      	beq.n	800c91a <_svfiprintf_r+0x7e>
 800c902:	465b      	mov	r3, fp
 800c904:	4622      	mov	r2, r4
 800c906:	4629      	mov	r1, r5
 800c908:	4638      	mov	r0, r7
 800c90a:	f7ff ff6b 	bl	800c7e4 <__ssputs_r>
 800c90e:	3001      	adds	r0, #1
 800c910:	f000 80a7 	beq.w	800ca62 <_svfiprintf_r+0x1c6>
 800c914:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c916:	445a      	add	r2, fp
 800c918:	9209      	str	r2, [sp, #36]	@ 0x24
 800c91a:	f89a 3000 	ldrb.w	r3, [sl]
 800c91e:	2b00      	cmp	r3, #0
 800c920:	f000 809f 	beq.w	800ca62 <_svfiprintf_r+0x1c6>
 800c924:	2300      	movs	r3, #0
 800c926:	f04f 32ff 	mov.w	r2, #4294967295
 800c92a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c92e:	f10a 0a01 	add.w	sl, sl, #1
 800c932:	9304      	str	r3, [sp, #16]
 800c934:	9307      	str	r3, [sp, #28]
 800c936:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c93a:	931a      	str	r3, [sp, #104]	@ 0x68
 800c93c:	4654      	mov	r4, sl
 800c93e:	2205      	movs	r2, #5
 800c940:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c944:	484e      	ldr	r0, [pc, #312]	@ (800ca80 <_svfiprintf_r+0x1e4>)
 800c946:	f7fd fcb8 	bl	800a2ba <memchr>
 800c94a:	9a04      	ldr	r2, [sp, #16]
 800c94c:	b9d8      	cbnz	r0, 800c986 <_svfiprintf_r+0xea>
 800c94e:	06d0      	lsls	r0, r2, #27
 800c950:	bf44      	itt	mi
 800c952:	2320      	movmi	r3, #32
 800c954:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c958:	0711      	lsls	r1, r2, #28
 800c95a:	bf44      	itt	mi
 800c95c:	232b      	movmi	r3, #43	@ 0x2b
 800c95e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c962:	f89a 3000 	ldrb.w	r3, [sl]
 800c966:	2b2a      	cmp	r3, #42	@ 0x2a
 800c968:	d015      	beq.n	800c996 <_svfiprintf_r+0xfa>
 800c96a:	4654      	mov	r4, sl
 800c96c:	2000      	movs	r0, #0
 800c96e:	f04f 0c0a 	mov.w	ip, #10
 800c972:	9a07      	ldr	r2, [sp, #28]
 800c974:	4621      	mov	r1, r4
 800c976:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c97a:	3b30      	subs	r3, #48	@ 0x30
 800c97c:	2b09      	cmp	r3, #9
 800c97e:	d94b      	bls.n	800ca18 <_svfiprintf_r+0x17c>
 800c980:	b1b0      	cbz	r0, 800c9b0 <_svfiprintf_r+0x114>
 800c982:	9207      	str	r2, [sp, #28]
 800c984:	e014      	b.n	800c9b0 <_svfiprintf_r+0x114>
 800c986:	eba0 0308 	sub.w	r3, r0, r8
 800c98a:	fa09 f303 	lsl.w	r3, r9, r3
 800c98e:	4313      	orrs	r3, r2
 800c990:	46a2      	mov	sl, r4
 800c992:	9304      	str	r3, [sp, #16]
 800c994:	e7d2      	b.n	800c93c <_svfiprintf_r+0xa0>
 800c996:	9b03      	ldr	r3, [sp, #12]
 800c998:	1d19      	adds	r1, r3, #4
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	9103      	str	r1, [sp, #12]
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	bfbb      	ittet	lt
 800c9a2:	425b      	neglt	r3, r3
 800c9a4:	f042 0202 	orrlt.w	r2, r2, #2
 800c9a8:	9307      	strge	r3, [sp, #28]
 800c9aa:	9307      	strlt	r3, [sp, #28]
 800c9ac:	bfb8      	it	lt
 800c9ae:	9204      	strlt	r2, [sp, #16]
 800c9b0:	7823      	ldrb	r3, [r4, #0]
 800c9b2:	2b2e      	cmp	r3, #46	@ 0x2e
 800c9b4:	d10a      	bne.n	800c9cc <_svfiprintf_r+0x130>
 800c9b6:	7863      	ldrb	r3, [r4, #1]
 800c9b8:	2b2a      	cmp	r3, #42	@ 0x2a
 800c9ba:	d132      	bne.n	800ca22 <_svfiprintf_r+0x186>
 800c9bc:	9b03      	ldr	r3, [sp, #12]
 800c9be:	3402      	adds	r4, #2
 800c9c0:	1d1a      	adds	r2, r3, #4
 800c9c2:	681b      	ldr	r3, [r3, #0]
 800c9c4:	9203      	str	r2, [sp, #12]
 800c9c6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c9ca:	9305      	str	r3, [sp, #20]
 800c9cc:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800ca84 <_svfiprintf_r+0x1e8>
 800c9d0:	2203      	movs	r2, #3
 800c9d2:	4650      	mov	r0, sl
 800c9d4:	7821      	ldrb	r1, [r4, #0]
 800c9d6:	f7fd fc70 	bl	800a2ba <memchr>
 800c9da:	b138      	cbz	r0, 800c9ec <_svfiprintf_r+0x150>
 800c9dc:	2240      	movs	r2, #64	@ 0x40
 800c9de:	9b04      	ldr	r3, [sp, #16]
 800c9e0:	eba0 000a 	sub.w	r0, r0, sl
 800c9e4:	4082      	lsls	r2, r0
 800c9e6:	4313      	orrs	r3, r2
 800c9e8:	3401      	adds	r4, #1
 800c9ea:	9304      	str	r3, [sp, #16]
 800c9ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c9f0:	2206      	movs	r2, #6
 800c9f2:	4825      	ldr	r0, [pc, #148]	@ (800ca88 <_svfiprintf_r+0x1ec>)
 800c9f4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c9f8:	f7fd fc5f 	bl	800a2ba <memchr>
 800c9fc:	2800      	cmp	r0, #0
 800c9fe:	d036      	beq.n	800ca6e <_svfiprintf_r+0x1d2>
 800ca00:	4b22      	ldr	r3, [pc, #136]	@ (800ca8c <_svfiprintf_r+0x1f0>)
 800ca02:	bb1b      	cbnz	r3, 800ca4c <_svfiprintf_r+0x1b0>
 800ca04:	9b03      	ldr	r3, [sp, #12]
 800ca06:	3307      	adds	r3, #7
 800ca08:	f023 0307 	bic.w	r3, r3, #7
 800ca0c:	3308      	adds	r3, #8
 800ca0e:	9303      	str	r3, [sp, #12]
 800ca10:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ca12:	4433      	add	r3, r6
 800ca14:	9309      	str	r3, [sp, #36]	@ 0x24
 800ca16:	e76a      	b.n	800c8ee <_svfiprintf_r+0x52>
 800ca18:	460c      	mov	r4, r1
 800ca1a:	2001      	movs	r0, #1
 800ca1c:	fb0c 3202 	mla	r2, ip, r2, r3
 800ca20:	e7a8      	b.n	800c974 <_svfiprintf_r+0xd8>
 800ca22:	2300      	movs	r3, #0
 800ca24:	f04f 0c0a 	mov.w	ip, #10
 800ca28:	4619      	mov	r1, r3
 800ca2a:	3401      	adds	r4, #1
 800ca2c:	9305      	str	r3, [sp, #20]
 800ca2e:	4620      	mov	r0, r4
 800ca30:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ca34:	3a30      	subs	r2, #48	@ 0x30
 800ca36:	2a09      	cmp	r2, #9
 800ca38:	d903      	bls.n	800ca42 <_svfiprintf_r+0x1a6>
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d0c6      	beq.n	800c9cc <_svfiprintf_r+0x130>
 800ca3e:	9105      	str	r1, [sp, #20]
 800ca40:	e7c4      	b.n	800c9cc <_svfiprintf_r+0x130>
 800ca42:	4604      	mov	r4, r0
 800ca44:	2301      	movs	r3, #1
 800ca46:	fb0c 2101 	mla	r1, ip, r1, r2
 800ca4a:	e7f0      	b.n	800ca2e <_svfiprintf_r+0x192>
 800ca4c:	ab03      	add	r3, sp, #12
 800ca4e:	9300      	str	r3, [sp, #0]
 800ca50:	462a      	mov	r2, r5
 800ca52:	4638      	mov	r0, r7
 800ca54:	4b0e      	ldr	r3, [pc, #56]	@ (800ca90 <_svfiprintf_r+0x1f4>)
 800ca56:	a904      	add	r1, sp, #16
 800ca58:	f7fc fb9e 	bl	8009198 <_printf_float>
 800ca5c:	1c42      	adds	r2, r0, #1
 800ca5e:	4606      	mov	r6, r0
 800ca60:	d1d6      	bne.n	800ca10 <_svfiprintf_r+0x174>
 800ca62:	89ab      	ldrh	r3, [r5, #12]
 800ca64:	065b      	lsls	r3, r3, #25
 800ca66:	f53f af2d 	bmi.w	800c8c4 <_svfiprintf_r+0x28>
 800ca6a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ca6c:	e72c      	b.n	800c8c8 <_svfiprintf_r+0x2c>
 800ca6e:	ab03      	add	r3, sp, #12
 800ca70:	9300      	str	r3, [sp, #0]
 800ca72:	462a      	mov	r2, r5
 800ca74:	4638      	mov	r0, r7
 800ca76:	4b06      	ldr	r3, [pc, #24]	@ (800ca90 <_svfiprintf_r+0x1f4>)
 800ca78:	a904      	add	r1, sp, #16
 800ca7a:	f7fc fe2b 	bl	80096d4 <_printf_i>
 800ca7e:	e7ed      	b.n	800ca5c <_svfiprintf_r+0x1c0>
 800ca80:	0800f289 	.word	0x0800f289
 800ca84:	0800f28f 	.word	0x0800f28f
 800ca88:	0800f293 	.word	0x0800f293
 800ca8c:	08009199 	.word	0x08009199
 800ca90:	0800c7e5 	.word	0x0800c7e5

0800ca94 <__sfputc_r>:
 800ca94:	6893      	ldr	r3, [r2, #8]
 800ca96:	b410      	push	{r4}
 800ca98:	3b01      	subs	r3, #1
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	6093      	str	r3, [r2, #8]
 800ca9e:	da07      	bge.n	800cab0 <__sfputc_r+0x1c>
 800caa0:	6994      	ldr	r4, [r2, #24]
 800caa2:	42a3      	cmp	r3, r4
 800caa4:	db01      	blt.n	800caaa <__sfputc_r+0x16>
 800caa6:	290a      	cmp	r1, #10
 800caa8:	d102      	bne.n	800cab0 <__sfputc_r+0x1c>
 800caaa:	bc10      	pop	{r4}
 800caac:	f7fd bad7 	b.w	800a05e <__swbuf_r>
 800cab0:	6813      	ldr	r3, [r2, #0]
 800cab2:	1c58      	adds	r0, r3, #1
 800cab4:	6010      	str	r0, [r2, #0]
 800cab6:	7019      	strb	r1, [r3, #0]
 800cab8:	4608      	mov	r0, r1
 800caba:	bc10      	pop	{r4}
 800cabc:	4770      	bx	lr

0800cabe <__sfputs_r>:
 800cabe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cac0:	4606      	mov	r6, r0
 800cac2:	460f      	mov	r7, r1
 800cac4:	4614      	mov	r4, r2
 800cac6:	18d5      	adds	r5, r2, r3
 800cac8:	42ac      	cmp	r4, r5
 800caca:	d101      	bne.n	800cad0 <__sfputs_r+0x12>
 800cacc:	2000      	movs	r0, #0
 800cace:	e007      	b.n	800cae0 <__sfputs_r+0x22>
 800cad0:	463a      	mov	r2, r7
 800cad2:	4630      	mov	r0, r6
 800cad4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cad8:	f7ff ffdc 	bl	800ca94 <__sfputc_r>
 800cadc:	1c43      	adds	r3, r0, #1
 800cade:	d1f3      	bne.n	800cac8 <__sfputs_r+0xa>
 800cae0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800cae4 <_vfiprintf_r>:
 800cae4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cae8:	460d      	mov	r5, r1
 800caea:	4614      	mov	r4, r2
 800caec:	4698      	mov	r8, r3
 800caee:	4606      	mov	r6, r0
 800caf0:	b09d      	sub	sp, #116	@ 0x74
 800caf2:	b118      	cbz	r0, 800cafc <_vfiprintf_r+0x18>
 800caf4:	6a03      	ldr	r3, [r0, #32]
 800caf6:	b90b      	cbnz	r3, 800cafc <_vfiprintf_r+0x18>
 800caf8:	f7fd f9a8 	bl	8009e4c <__sinit>
 800cafc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cafe:	07d9      	lsls	r1, r3, #31
 800cb00:	d405      	bmi.n	800cb0e <_vfiprintf_r+0x2a>
 800cb02:	89ab      	ldrh	r3, [r5, #12]
 800cb04:	059a      	lsls	r2, r3, #22
 800cb06:	d402      	bmi.n	800cb0e <_vfiprintf_r+0x2a>
 800cb08:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cb0a:	f7fd fbd4 	bl	800a2b6 <__retarget_lock_acquire_recursive>
 800cb0e:	89ab      	ldrh	r3, [r5, #12]
 800cb10:	071b      	lsls	r3, r3, #28
 800cb12:	d501      	bpl.n	800cb18 <_vfiprintf_r+0x34>
 800cb14:	692b      	ldr	r3, [r5, #16]
 800cb16:	b99b      	cbnz	r3, 800cb40 <_vfiprintf_r+0x5c>
 800cb18:	4629      	mov	r1, r5
 800cb1a:	4630      	mov	r0, r6
 800cb1c:	f7fd fade 	bl	800a0dc <__swsetup_r>
 800cb20:	b170      	cbz	r0, 800cb40 <_vfiprintf_r+0x5c>
 800cb22:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cb24:	07dc      	lsls	r4, r3, #31
 800cb26:	d504      	bpl.n	800cb32 <_vfiprintf_r+0x4e>
 800cb28:	f04f 30ff 	mov.w	r0, #4294967295
 800cb2c:	b01d      	add	sp, #116	@ 0x74
 800cb2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb32:	89ab      	ldrh	r3, [r5, #12]
 800cb34:	0598      	lsls	r0, r3, #22
 800cb36:	d4f7      	bmi.n	800cb28 <_vfiprintf_r+0x44>
 800cb38:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cb3a:	f7fd fbbd 	bl	800a2b8 <__retarget_lock_release_recursive>
 800cb3e:	e7f3      	b.n	800cb28 <_vfiprintf_r+0x44>
 800cb40:	2300      	movs	r3, #0
 800cb42:	9309      	str	r3, [sp, #36]	@ 0x24
 800cb44:	2320      	movs	r3, #32
 800cb46:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800cb4a:	2330      	movs	r3, #48	@ 0x30
 800cb4c:	f04f 0901 	mov.w	r9, #1
 800cb50:	f8cd 800c 	str.w	r8, [sp, #12]
 800cb54:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800cd00 <_vfiprintf_r+0x21c>
 800cb58:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800cb5c:	4623      	mov	r3, r4
 800cb5e:	469a      	mov	sl, r3
 800cb60:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cb64:	b10a      	cbz	r2, 800cb6a <_vfiprintf_r+0x86>
 800cb66:	2a25      	cmp	r2, #37	@ 0x25
 800cb68:	d1f9      	bne.n	800cb5e <_vfiprintf_r+0x7a>
 800cb6a:	ebba 0b04 	subs.w	fp, sl, r4
 800cb6e:	d00b      	beq.n	800cb88 <_vfiprintf_r+0xa4>
 800cb70:	465b      	mov	r3, fp
 800cb72:	4622      	mov	r2, r4
 800cb74:	4629      	mov	r1, r5
 800cb76:	4630      	mov	r0, r6
 800cb78:	f7ff ffa1 	bl	800cabe <__sfputs_r>
 800cb7c:	3001      	adds	r0, #1
 800cb7e:	f000 80a7 	beq.w	800ccd0 <_vfiprintf_r+0x1ec>
 800cb82:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cb84:	445a      	add	r2, fp
 800cb86:	9209      	str	r2, [sp, #36]	@ 0x24
 800cb88:	f89a 3000 	ldrb.w	r3, [sl]
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	f000 809f 	beq.w	800ccd0 <_vfiprintf_r+0x1ec>
 800cb92:	2300      	movs	r3, #0
 800cb94:	f04f 32ff 	mov.w	r2, #4294967295
 800cb98:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cb9c:	f10a 0a01 	add.w	sl, sl, #1
 800cba0:	9304      	str	r3, [sp, #16]
 800cba2:	9307      	str	r3, [sp, #28]
 800cba4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800cba8:	931a      	str	r3, [sp, #104]	@ 0x68
 800cbaa:	4654      	mov	r4, sl
 800cbac:	2205      	movs	r2, #5
 800cbae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cbb2:	4853      	ldr	r0, [pc, #332]	@ (800cd00 <_vfiprintf_r+0x21c>)
 800cbb4:	f7fd fb81 	bl	800a2ba <memchr>
 800cbb8:	9a04      	ldr	r2, [sp, #16]
 800cbba:	b9d8      	cbnz	r0, 800cbf4 <_vfiprintf_r+0x110>
 800cbbc:	06d1      	lsls	r1, r2, #27
 800cbbe:	bf44      	itt	mi
 800cbc0:	2320      	movmi	r3, #32
 800cbc2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cbc6:	0713      	lsls	r3, r2, #28
 800cbc8:	bf44      	itt	mi
 800cbca:	232b      	movmi	r3, #43	@ 0x2b
 800cbcc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cbd0:	f89a 3000 	ldrb.w	r3, [sl]
 800cbd4:	2b2a      	cmp	r3, #42	@ 0x2a
 800cbd6:	d015      	beq.n	800cc04 <_vfiprintf_r+0x120>
 800cbd8:	4654      	mov	r4, sl
 800cbda:	2000      	movs	r0, #0
 800cbdc:	f04f 0c0a 	mov.w	ip, #10
 800cbe0:	9a07      	ldr	r2, [sp, #28]
 800cbe2:	4621      	mov	r1, r4
 800cbe4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cbe8:	3b30      	subs	r3, #48	@ 0x30
 800cbea:	2b09      	cmp	r3, #9
 800cbec:	d94b      	bls.n	800cc86 <_vfiprintf_r+0x1a2>
 800cbee:	b1b0      	cbz	r0, 800cc1e <_vfiprintf_r+0x13a>
 800cbf0:	9207      	str	r2, [sp, #28]
 800cbf2:	e014      	b.n	800cc1e <_vfiprintf_r+0x13a>
 800cbf4:	eba0 0308 	sub.w	r3, r0, r8
 800cbf8:	fa09 f303 	lsl.w	r3, r9, r3
 800cbfc:	4313      	orrs	r3, r2
 800cbfe:	46a2      	mov	sl, r4
 800cc00:	9304      	str	r3, [sp, #16]
 800cc02:	e7d2      	b.n	800cbaa <_vfiprintf_r+0xc6>
 800cc04:	9b03      	ldr	r3, [sp, #12]
 800cc06:	1d19      	adds	r1, r3, #4
 800cc08:	681b      	ldr	r3, [r3, #0]
 800cc0a:	9103      	str	r1, [sp, #12]
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	bfbb      	ittet	lt
 800cc10:	425b      	neglt	r3, r3
 800cc12:	f042 0202 	orrlt.w	r2, r2, #2
 800cc16:	9307      	strge	r3, [sp, #28]
 800cc18:	9307      	strlt	r3, [sp, #28]
 800cc1a:	bfb8      	it	lt
 800cc1c:	9204      	strlt	r2, [sp, #16]
 800cc1e:	7823      	ldrb	r3, [r4, #0]
 800cc20:	2b2e      	cmp	r3, #46	@ 0x2e
 800cc22:	d10a      	bne.n	800cc3a <_vfiprintf_r+0x156>
 800cc24:	7863      	ldrb	r3, [r4, #1]
 800cc26:	2b2a      	cmp	r3, #42	@ 0x2a
 800cc28:	d132      	bne.n	800cc90 <_vfiprintf_r+0x1ac>
 800cc2a:	9b03      	ldr	r3, [sp, #12]
 800cc2c:	3402      	adds	r4, #2
 800cc2e:	1d1a      	adds	r2, r3, #4
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	9203      	str	r2, [sp, #12]
 800cc34:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800cc38:	9305      	str	r3, [sp, #20]
 800cc3a:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800cd04 <_vfiprintf_r+0x220>
 800cc3e:	2203      	movs	r2, #3
 800cc40:	4650      	mov	r0, sl
 800cc42:	7821      	ldrb	r1, [r4, #0]
 800cc44:	f7fd fb39 	bl	800a2ba <memchr>
 800cc48:	b138      	cbz	r0, 800cc5a <_vfiprintf_r+0x176>
 800cc4a:	2240      	movs	r2, #64	@ 0x40
 800cc4c:	9b04      	ldr	r3, [sp, #16]
 800cc4e:	eba0 000a 	sub.w	r0, r0, sl
 800cc52:	4082      	lsls	r2, r0
 800cc54:	4313      	orrs	r3, r2
 800cc56:	3401      	adds	r4, #1
 800cc58:	9304      	str	r3, [sp, #16]
 800cc5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cc5e:	2206      	movs	r2, #6
 800cc60:	4829      	ldr	r0, [pc, #164]	@ (800cd08 <_vfiprintf_r+0x224>)
 800cc62:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800cc66:	f7fd fb28 	bl	800a2ba <memchr>
 800cc6a:	2800      	cmp	r0, #0
 800cc6c:	d03f      	beq.n	800ccee <_vfiprintf_r+0x20a>
 800cc6e:	4b27      	ldr	r3, [pc, #156]	@ (800cd0c <_vfiprintf_r+0x228>)
 800cc70:	bb1b      	cbnz	r3, 800ccba <_vfiprintf_r+0x1d6>
 800cc72:	9b03      	ldr	r3, [sp, #12]
 800cc74:	3307      	adds	r3, #7
 800cc76:	f023 0307 	bic.w	r3, r3, #7
 800cc7a:	3308      	adds	r3, #8
 800cc7c:	9303      	str	r3, [sp, #12]
 800cc7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cc80:	443b      	add	r3, r7
 800cc82:	9309      	str	r3, [sp, #36]	@ 0x24
 800cc84:	e76a      	b.n	800cb5c <_vfiprintf_r+0x78>
 800cc86:	460c      	mov	r4, r1
 800cc88:	2001      	movs	r0, #1
 800cc8a:	fb0c 3202 	mla	r2, ip, r2, r3
 800cc8e:	e7a8      	b.n	800cbe2 <_vfiprintf_r+0xfe>
 800cc90:	2300      	movs	r3, #0
 800cc92:	f04f 0c0a 	mov.w	ip, #10
 800cc96:	4619      	mov	r1, r3
 800cc98:	3401      	adds	r4, #1
 800cc9a:	9305      	str	r3, [sp, #20]
 800cc9c:	4620      	mov	r0, r4
 800cc9e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cca2:	3a30      	subs	r2, #48	@ 0x30
 800cca4:	2a09      	cmp	r2, #9
 800cca6:	d903      	bls.n	800ccb0 <_vfiprintf_r+0x1cc>
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	d0c6      	beq.n	800cc3a <_vfiprintf_r+0x156>
 800ccac:	9105      	str	r1, [sp, #20]
 800ccae:	e7c4      	b.n	800cc3a <_vfiprintf_r+0x156>
 800ccb0:	4604      	mov	r4, r0
 800ccb2:	2301      	movs	r3, #1
 800ccb4:	fb0c 2101 	mla	r1, ip, r1, r2
 800ccb8:	e7f0      	b.n	800cc9c <_vfiprintf_r+0x1b8>
 800ccba:	ab03      	add	r3, sp, #12
 800ccbc:	9300      	str	r3, [sp, #0]
 800ccbe:	462a      	mov	r2, r5
 800ccc0:	4630      	mov	r0, r6
 800ccc2:	4b13      	ldr	r3, [pc, #76]	@ (800cd10 <_vfiprintf_r+0x22c>)
 800ccc4:	a904      	add	r1, sp, #16
 800ccc6:	f7fc fa67 	bl	8009198 <_printf_float>
 800ccca:	4607      	mov	r7, r0
 800cccc:	1c78      	adds	r0, r7, #1
 800ccce:	d1d6      	bne.n	800cc7e <_vfiprintf_r+0x19a>
 800ccd0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ccd2:	07d9      	lsls	r1, r3, #31
 800ccd4:	d405      	bmi.n	800cce2 <_vfiprintf_r+0x1fe>
 800ccd6:	89ab      	ldrh	r3, [r5, #12]
 800ccd8:	059a      	lsls	r2, r3, #22
 800ccda:	d402      	bmi.n	800cce2 <_vfiprintf_r+0x1fe>
 800ccdc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ccde:	f7fd faeb 	bl	800a2b8 <__retarget_lock_release_recursive>
 800cce2:	89ab      	ldrh	r3, [r5, #12]
 800cce4:	065b      	lsls	r3, r3, #25
 800cce6:	f53f af1f 	bmi.w	800cb28 <_vfiprintf_r+0x44>
 800ccea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ccec:	e71e      	b.n	800cb2c <_vfiprintf_r+0x48>
 800ccee:	ab03      	add	r3, sp, #12
 800ccf0:	9300      	str	r3, [sp, #0]
 800ccf2:	462a      	mov	r2, r5
 800ccf4:	4630      	mov	r0, r6
 800ccf6:	4b06      	ldr	r3, [pc, #24]	@ (800cd10 <_vfiprintf_r+0x22c>)
 800ccf8:	a904      	add	r1, sp, #16
 800ccfa:	f7fc fceb 	bl	80096d4 <_printf_i>
 800ccfe:	e7e4      	b.n	800ccca <_vfiprintf_r+0x1e6>
 800cd00:	0800f289 	.word	0x0800f289
 800cd04:	0800f28f 	.word	0x0800f28f
 800cd08:	0800f293 	.word	0x0800f293
 800cd0c:	08009199 	.word	0x08009199
 800cd10:	0800cabf 	.word	0x0800cabf

0800cd14 <__sflush_r>:
 800cd14:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800cd18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd1a:	0716      	lsls	r6, r2, #28
 800cd1c:	4605      	mov	r5, r0
 800cd1e:	460c      	mov	r4, r1
 800cd20:	d454      	bmi.n	800cdcc <__sflush_r+0xb8>
 800cd22:	684b      	ldr	r3, [r1, #4]
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	dc02      	bgt.n	800cd2e <__sflush_r+0x1a>
 800cd28:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	dd48      	ble.n	800cdc0 <__sflush_r+0xac>
 800cd2e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800cd30:	2e00      	cmp	r6, #0
 800cd32:	d045      	beq.n	800cdc0 <__sflush_r+0xac>
 800cd34:	2300      	movs	r3, #0
 800cd36:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800cd3a:	682f      	ldr	r7, [r5, #0]
 800cd3c:	6a21      	ldr	r1, [r4, #32]
 800cd3e:	602b      	str	r3, [r5, #0]
 800cd40:	d030      	beq.n	800cda4 <__sflush_r+0x90>
 800cd42:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800cd44:	89a3      	ldrh	r3, [r4, #12]
 800cd46:	0759      	lsls	r1, r3, #29
 800cd48:	d505      	bpl.n	800cd56 <__sflush_r+0x42>
 800cd4a:	6863      	ldr	r3, [r4, #4]
 800cd4c:	1ad2      	subs	r2, r2, r3
 800cd4e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800cd50:	b10b      	cbz	r3, 800cd56 <__sflush_r+0x42>
 800cd52:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800cd54:	1ad2      	subs	r2, r2, r3
 800cd56:	2300      	movs	r3, #0
 800cd58:	4628      	mov	r0, r5
 800cd5a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800cd5c:	6a21      	ldr	r1, [r4, #32]
 800cd5e:	47b0      	blx	r6
 800cd60:	1c43      	adds	r3, r0, #1
 800cd62:	89a3      	ldrh	r3, [r4, #12]
 800cd64:	d106      	bne.n	800cd74 <__sflush_r+0x60>
 800cd66:	6829      	ldr	r1, [r5, #0]
 800cd68:	291d      	cmp	r1, #29
 800cd6a:	d82b      	bhi.n	800cdc4 <__sflush_r+0xb0>
 800cd6c:	4a28      	ldr	r2, [pc, #160]	@ (800ce10 <__sflush_r+0xfc>)
 800cd6e:	410a      	asrs	r2, r1
 800cd70:	07d6      	lsls	r6, r2, #31
 800cd72:	d427      	bmi.n	800cdc4 <__sflush_r+0xb0>
 800cd74:	2200      	movs	r2, #0
 800cd76:	6062      	str	r2, [r4, #4]
 800cd78:	6922      	ldr	r2, [r4, #16]
 800cd7a:	04d9      	lsls	r1, r3, #19
 800cd7c:	6022      	str	r2, [r4, #0]
 800cd7e:	d504      	bpl.n	800cd8a <__sflush_r+0x76>
 800cd80:	1c42      	adds	r2, r0, #1
 800cd82:	d101      	bne.n	800cd88 <__sflush_r+0x74>
 800cd84:	682b      	ldr	r3, [r5, #0]
 800cd86:	b903      	cbnz	r3, 800cd8a <__sflush_r+0x76>
 800cd88:	6560      	str	r0, [r4, #84]	@ 0x54
 800cd8a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cd8c:	602f      	str	r7, [r5, #0]
 800cd8e:	b1b9      	cbz	r1, 800cdc0 <__sflush_r+0xac>
 800cd90:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cd94:	4299      	cmp	r1, r3
 800cd96:	d002      	beq.n	800cd9e <__sflush_r+0x8a>
 800cd98:	4628      	mov	r0, r5
 800cd9a:	f7fe f901 	bl	800afa0 <_free_r>
 800cd9e:	2300      	movs	r3, #0
 800cda0:	6363      	str	r3, [r4, #52]	@ 0x34
 800cda2:	e00d      	b.n	800cdc0 <__sflush_r+0xac>
 800cda4:	2301      	movs	r3, #1
 800cda6:	4628      	mov	r0, r5
 800cda8:	47b0      	blx	r6
 800cdaa:	4602      	mov	r2, r0
 800cdac:	1c50      	adds	r0, r2, #1
 800cdae:	d1c9      	bne.n	800cd44 <__sflush_r+0x30>
 800cdb0:	682b      	ldr	r3, [r5, #0]
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	d0c6      	beq.n	800cd44 <__sflush_r+0x30>
 800cdb6:	2b1d      	cmp	r3, #29
 800cdb8:	d001      	beq.n	800cdbe <__sflush_r+0xaa>
 800cdba:	2b16      	cmp	r3, #22
 800cdbc:	d11d      	bne.n	800cdfa <__sflush_r+0xe6>
 800cdbe:	602f      	str	r7, [r5, #0]
 800cdc0:	2000      	movs	r0, #0
 800cdc2:	e021      	b.n	800ce08 <__sflush_r+0xf4>
 800cdc4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cdc8:	b21b      	sxth	r3, r3
 800cdca:	e01a      	b.n	800ce02 <__sflush_r+0xee>
 800cdcc:	690f      	ldr	r7, [r1, #16]
 800cdce:	2f00      	cmp	r7, #0
 800cdd0:	d0f6      	beq.n	800cdc0 <__sflush_r+0xac>
 800cdd2:	0793      	lsls	r3, r2, #30
 800cdd4:	bf18      	it	ne
 800cdd6:	2300      	movne	r3, #0
 800cdd8:	680e      	ldr	r6, [r1, #0]
 800cdda:	bf08      	it	eq
 800cddc:	694b      	ldreq	r3, [r1, #20]
 800cdde:	1bf6      	subs	r6, r6, r7
 800cde0:	600f      	str	r7, [r1, #0]
 800cde2:	608b      	str	r3, [r1, #8]
 800cde4:	2e00      	cmp	r6, #0
 800cde6:	ddeb      	ble.n	800cdc0 <__sflush_r+0xac>
 800cde8:	4633      	mov	r3, r6
 800cdea:	463a      	mov	r2, r7
 800cdec:	4628      	mov	r0, r5
 800cdee:	6a21      	ldr	r1, [r4, #32]
 800cdf0:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800cdf4:	47e0      	blx	ip
 800cdf6:	2800      	cmp	r0, #0
 800cdf8:	dc07      	bgt.n	800ce0a <__sflush_r+0xf6>
 800cdfa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cdfe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ce02:	f04f 30ff 	mov.w	r0, #4294967295
 800ce06:	81a3      	strh	r3, [r4, #12]
 800ce08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ce0a:	4407      	add	r7, r0
 800ce0c:	1a36      	subs	r6, r6, r0
 800ce0e:	e7e9      	b.n	800cde4 <__sflush_r+0xd0>
 800ce10:	dfbffffe 	.word	0xdfbffffe

0800ce14 <_fflush_r>:
 800ce14:	b538      	push	{r3, r4, r5, lr}
 800ce16:	690b      	ldr	r3, [r1, #16]
 800ce18:	4605      	mov	r5, r0
 800ce1a:	460c      	mov	r4, r1
 800ce1c:	b913      	cbnz	r3, 800ce24 <_fflush_r+0x10>
 800ce1e:	2500      	movs	r5, #0
 800ce20:	4628      	mov	r0, r5
 800ce22:	bd38      	pop	{r3, r4, r5, pc}
 800ce24:	b118      	cbz	r0, 800ce2e <_fflush_r+0x1a>
 800ce26:	6a03      	ldr	r3, [r0, #32]
 800ce28:	b90b      	cbnz	r3, 800ce2e <_fflush_r+0x1a>
 800ce2a:	f7fd f80f 	bl	8009e4c <__sinit>
 800ce2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	d0f3      	beq.n	800ce1e <_fflush_r+0xa>
 800ce36:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ce38:	07d0      	lsls	r0, r2, #31
 800ce3a:	d404      	bmi.n	800ce46 <_fflush_r+0x32>
 800ce3c:	0599      	lsls	r1, r3, #22
 800ce3e:	d402      	bmi.n	800ce46 <_fflush_r+0x32>
 800ce40:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ce42:	f7fd fa38 	bl	800a2b6 <__retarget_lock_acquire_recursive>
 800ce46:	4628      	mov	r0, r5
 800ce48:	4621      	mov	r1, r4
 800ce4a:	f7ff ff63 	bl	800cd14 <__sflush_r>
 800ce4e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ce50:	4605      	mov	r5, r0
 800ce52:	07da      	lsls	r2, r3, #31
 800ce54:	d4e4      	bmi.n	800ce20 <_fflush_r+0xc>
 800ce56:	89a3      	ldrh	r3, [r4, #12]
 800ce58:	059b      	lsls	r3, r3, #22
 800ce5a:	d4e1      	bmi.n	800ce20 <_fflush_r+0xc>
 800ce5c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ce5e:	f7fd fa2b 	bl	800a2b8 <__retarget_lock_release_recursive>
 800ce62:	e7dd      	b.n	800ce20 <_fflush_r+0xc>

0800ce64 <__swhatbuf_r>:
 800ce64:	b570      	push	{r4, r5, r6, lr}
 800ce66:	460c      	mov	r4, r1
 800ce68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce6c:	4615      	mov	r5, r2
 800ce6e:	2900      	cmp	r1, #0
 800ce70:	461e      	mov	r6, r3
 800ce72:	b096      	sub	sp, #88	@ 0x58
 800ce74:	da0c      	bge.n	800ce90 <__swhatbuf_r+0x2c>
 800ce76:	89a3      	ldrh	r3, [r4, #12]
 800ce78:	2100      	movs	r1, #0
 800ce7a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ce7e:	bf14      	ite	ne
 800ce80:	2340      	movne	r3, #64	@ 0x40
 800ce82:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ce86:	2000      	movs	r0, #0
 800ce88:	6031      	str	r1, [r6, #0]
 800ce8a:	602b      	str	r3, [r5, #0]
 800ce8c:	b016      	add	sp, #88	@ 0x58
 800ce8e:	bd70      	pop	{r4, r5, r6, pc}
 800ce90:	466a      	mov	r2, sp
 800ce92:	f000 f85b 	bl	800cf4c <_fstat_r>
 800ce96:	2800      	cmp	r0, #0
 800ce98:	dbed      	blt.n	800ce76 <__swhatbuf_r+0x12>
 800ce9a:	9901      	ldr	r1, [sp, #4]
 800ce9c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800cea0:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800cea4:	4259      	negs	r1, r3
 800cea6:	4159      	adcs	r1, r3
 800cea8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ceac:	e7eb      	b.n	800ce86 <__swhatbuf_r+0x22>

0800ceae <__smakebuf_r>:
 800ceae:	898b      	ldrh	r3, [r1, #12]
 800ceb0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ceb2:	079d      	lsls	r5, r3, #30
 800ceb4:	4606      	mov	r6, r0
 800ceb6:	460c      	mov	r4, r1
 800ceb8:	d507      	bpl.n	800ceca <__smakebuf_r+0x1c>
 800ceba:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800cebe:	6023      	str	r3, [r4, #0]
 800cec0:	6123      	str	r3, [r4, #16]
 800cec2:	2301      	movs	r3, #1
 800cec4:	6163      	str	r3, [r4, #20]
 800cec6:	b003      	add	sp, #12
 800cec8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ceca:	466a      	mov	r2, sp
 800cecc:	ab01      	add	r3, sp, #4
 800cece:	f7ff ffc9 	bl	800ce64 <__swhatbuf_r>
 800ced2:	9f00      	ldr	r7, [sp, #0]
 800ced4:	4605      	mov	r5, r0
 800ced6:	4639      	mov	r1, r7
 800ced8:	4630      	mov	r0, r6
 800ceda:	f7fe f8d3 	bl	800b084 <_malloc_r>
 800cede:	b948      	cbnz	r0, 800cef4 <__smakebuf_r+0x46>
 800cee0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cee4:	059a      	lsls	r2, r3, #22
 800cee6:	d4ee      	bmi.n	800cec6 <__smakebuf_r+0x18>
 800cee8:	f023 0303 	bic.w	r3, r3, #3
 800ceec:	f043 0302 	orr.w	r3, r3, #2
 800cef0:	81a3      	strh	r3, [r4, #12]
 800cef2:	e7e2      	b.n	800ceba <__smakebuf_r+0xc>
 800cef4:	89a3      	ldrh	r3, [r4, #12]
 800cef6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800cefa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cefe:	81a3      	strh	r3, [r4, #12]
 800cf00:	9b01      	ldr	r3, [sp, #4]
 800cf02:	6020      	str	r0, [r4, #0]
 800cf04:	b15b      	cbz	r3, 800cf1e <__smakebuf_r+0x70>
 800cf06:	4630      	mov	r0, r6
 800cf08:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cf0c:	f000 f830 	bl	800cf70 <_isatty_r>
 800cf10:	b128      	cbz	r0, 800cf1e <__smakebuf_r+0x70>
 800cf12:	89a3      	ldrh	r3, [r4, #12]
 800cf14:	f023 0303 	bic.w	r3, r3, #3
 800cf18:	f043 0301 	orr.w	r3, r3, #1
 800cf1c:	81a3      	strh	r3, [r4, #12]
 800cf1e:	89a3      	ldrh	r3, [r4, #12]
 800cf20:	431d      	orrs	r5, r3
 800cf22:	81a5      	strh	r5, [r4, #12]
 800cf24:	e7cf      	b.n	800cec6 <__smakebuf_r+0x18>

0800cf26 <strncmp>:
 800cf26:	b510      	push	{r4, lr}
 800cf28:	b16a      	cbz	r2, 800cf46 <strncmp+0x20>
 800cf2a:	3901      	subs	r1, #1
 800cf2c:	1884      	adds	r4, r0, r2
 800cf2e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cf32:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800cf36:	429a      	cmp	r2, r3
 800cf38:	d103      	bne.n	800cf42 <strncmp+0x1c>
 800cf3a:	42a0      	cmp	r0, r4
 800cf3c:	d001      	beq.n	800cf42 <strncmp+0x1c>
 800cf3e:	2a00      	cmp	r2, #0
 800cf40:	d1f5      	bne.n	800cf2e <strncmp+0x8>
 800cf42:	1ad0      	subs	r0, r2, r3
 800cf44:	bd10      	pop	{r4, pc}
 800cf46:	4610      	mov	r0, r2
 800cf48:	e7fc      	b.n	800cf44 <strncmp+0x1e>
	...

0800cf4c <_fstat_r>:
 800cf4c:	b538      	push	{r3, r4, r5, lr}
 800cf4e:	2300      	movs	r3, #0
 800cf50:	4d06      	ldr	r5, [pc, #24]	@ (800cf6c <_fstat_r+0x20>)
 800cf52:	4604      	mov	r4, r0
 800cf54:	4608      	mov	r0, r1
 800cf56:	4611      	mov	r1, r2
 800cf58:	602b      	str	r3, [r5, #0]
 800cf5a:	f7f5 fecf 	bl	8002cfc <_fstat>
 800cf5e:	1c43      	adds	r3, r0, #1
 800cf60:	d102      	bne.n	800cf68 <_fstat_r+0x1c>
 800cf62:	682b      	ldr	r3, [r5, #0]
 800cf64:	b103      	cbz	r3, 800cf68 <_fstat_r+0x1c>
 800cf66:	6023      	str	r3, [r4, #0]
 800cf68:	bd38      	pop	{r3, r4, r5, pc}
 800cf6a:	bf00      	nop
 800cf6c:	20000a10 	.word	0x20000a10

0800cf70 <_isatty_r>:
 800cf70:	b538      	push	{r3, r4, r5, lr}
 800cf72:	2300      	movs	r3, #0
 800cf74:	4d05      	ldr	r5, [pc, #20]	@ (800cf8c <_isatty_r+0x1c>)
 800cf76:	4604      	mov	r4, r0
 800cf78:	4608      	mov	r0, r1
 800cf7a:	602b      	str	r3, [r5, #0]
 800cf7c:	f7f5 fecd 	bl	8002d1a <_isatty>
 800cf80:	1c43      	adds	r3, r0, #1
 800cf82:	d102      	bne.n	800cf8a <_isatty_r+0x1a>
 800cf84:	682b      	ldr	r3, [r5, #0]
 800cf86:	b103      	cbz	r3, 800cf8a <_isatty_r+0x1a>
 800cf88:	6023      	str	r3, [r4, #0]
 800cf8a:	bd38      	pop	{r3, r4, r5, pc}
 800cf8c:	20000a10 	.word	0x20000a10

0800cf90 <_sbrk_r>:
 800cf90:	b538      	push	{r3, r4, r5, lr}
 800cf92:	2300      	movs	r3, #0
 800cf94:	4d05      	ldr	r5, [pc, #20]	@ (800cfac <_sbrk_r+0x1c>)
 800cf96:	4604      	mov	r4, r0
 800cf98:	4608      	mov	r0, r1
 800cf9a:	602b      	str	r3, [r5, #0]
 800cf9c:	f7f5 fed4 	bl	8002d48 <_sbrk>
 800cfa0:	1c43      	adds	r3, r0, #1
 800cfa2:	d102      	bne.n	800cfaa <_sbrk_r+0x1a>
 800cfa4:	682b      	ldr	r3, [r5, #0]
 800cfa6:	b103      	cbz	r3, 800cfaa <_sbrk_r+0x1a>
 800cfa8:	6023      	str	r3, [r4, #0]
 800cfaa:	bd38      	pop	{r3, r4, r5, pc}
 800cfac:	20000a10 	.word	0x20000a10

0800cfb0 <nan>:
 800cfb0:	2000      	movs	r0, #0
 800cfb2:	4901      	ldr	r1, [pc, #4]	@ (800cfb8 <nan+0x8>)
 800cfb4:	4770      	bx	lr
 800cfb6:	bf00      	nop
 800cfb8:	7ff80000 	.word	0x7ff80000

0800cfbc <__assert_func>:
 800cfbc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cfbe:	4614      	mov	r4, r2
 800cfc0:	461a      	mov	r2, r3
 800cfc2:	4b09      	ldr	r3, [pc, #36]	@ (800cfe8 <__assert_func+0x2c>)
 800cfc4:	4605      	mov	r5, r0
 800cfc6:	681b      	ldr	r3, [r3, #0]
 800cfc8:	68d8      	ldr	r0, [r3, #12]
 800cfca:	b954      	cbnz	r4, 800cfe2 <__assert_func+0x26>
 800cfcc:	4b07      	ldr	r3, [pc, #28]	@ (800cfec <__assert_func+0x30>)
 800cfce:	461c      	mov	r4, r3
 800cfd0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cfd4:	9100      	str	r1, [sp, #0]
 800cfd6:	462b      	mov	r3, r5
 800cfd8:	4905      	ldr	r1, [pc, #20]	@ (800cff0 <__assert_func+0x34>)
 800cfda:	f000 fba7 	bl	800d72c <fiprintf>
 800cfde:	f000 fbb7 	bl	800d750 <abort>
 800cfe2:	4b04      	ldr	r3, [pc, #16]	@ (800cff4 <__assert_func+0x38>)
 800cfe4:	e7f4      	b.n	800cfd0 <__assert_func+0x14>
 800cfe6:	bf00      	nop
 800cfe8:	20000040 	.word	0x20000040
 800cfec:	0800f2dd 	.word	0x0800f2dd
 800cff0:	0800f2af 	.word	0x0800f2af
 800cff4:	0800f2a2 	.word	0x0800f2a2

0800cff8 <_calloc_r>:
 800cff8:	b570      	push	{r4, r5, r6, lr}
 800cffa:	fba1 5402 	umull	r5, r4, r1, r2
 800cffe:	b93c      	cbnz	r4, 800d010 <_calloc_r+0x18>
 800d000:	4629      	mov	r1, r5
 800d002:	f7fe f83f 	bl	800b084 <_malloc_r>
 800d006:	4606      	mov	r6, r0
 800d008:	b928      	cbnz	r0, 800d016 <_calloc_r+0x1e>
 800d00a:	2600      	movs	r6, #0
 800d00c:	4630      	mov	r0, r6
 800d00e:	bd70      	pop	{r4, r5, r6, pc}
 800d010:	220c      	movs	r2, #12
 800d012:	6002      	str	r2, [r0, #0]
 800d014:	e7f9      	b.n	800d00a <_calloc_r+0x12>
 800d016:	462a      	mov	r2, r5
 800d018:	4621      	mov	r1, r4
 800d01a:	f7fd f8cf 	bl	800a1bc <memset>
 800d01e:	e7f5      	b.n	800d00c <_calloc_r+0x14>

0800d020 <rshift>:
 800d020:	6903      	ldr	r3, [r0, #16]
 800d022:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d026:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800d02a:	f100 0414 	add.w	r4, r0, #20
 800d02e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800d032:	dd46      	ble.n	800d0c2 <rshift+0xa2>
 800d034:	f011 011f 	ands.w	r1, r1, #31
 800d038:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800d03c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800d040:	d10c      	bne.n	800d05c <rshift+0x3c>
 800d042:	4629      	mov	r1, r5
 800d044:	f100 0710 	add.w	r7, r0, #16
 800d048:	42b1      	cmp	r1, r6
 800d04a:	d335      	bcc.n	800d0b8 <rshift+0x98>
 800d04c:	1a9b      	subs	r3, r3, r2
 800d04e:	009b      	lsls	r3, r3, #2
 800d050:	1eea      	subs	r2, r5, #3
 800d052:	4296      	cmp	r6, r2
 800d054:	bf38      	it	cc
 800d056:	2300      	movcc	r3, #0
 800d058:	4423      	add	r3, r4
 800d05a:	e015      	b.n	800d088 <rshift+0x68>
 800d05c:	46a1      	mov	r9, r4
 800d05e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800d062:	f1c1 0820 	rsb	r8, r1, #32
 800d066:	40cf      	lsrs	r7, r1
 800d068:	f105 0e04 	add.w	lr, r5, #4
 800d06c:	4576      	cmp	r6, lr
 800d06e:	46f4      	mov	ip, lr
 800d070:	d816      	bhi.n	800d0a0 <rshift+0x80>
 800d072:	1a9a      	subs	r2, r3, r2
 800d074:	0092      	lsls	r2, r2, #2
 800d076:	3a04      	subs	r2, #4
 800d078:	3501      	adds	r5, #1
 800d07a:	42ae      	cmp	r6, r5
 800d07c:	bf38      	it	cc
 800d07e:	2200      	movcc	r2, #0
 800d080:	18a3      	adds	r3, r4, r2
 800d082:	50a7      	str	r7, [r4, r2]
 800d084:	b107      	cbz	r7, 800d088 <rshift+0x68>
 800d086:	3304      	adds	r3, #4
 800d088:	42a3      	cmp	r3, r4
 800d08a:	eba3 0204 	sub.w	r2, r3, r4
 800d08e:	bf08      	it	eq
 800d090:	2300      	moveq	r3, #0
 800d092:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800d096:	6102      	str	r2, [r0, #16]
 800d098:	bf08      	it	eq
 800d09a:	6143      	streq	r3, [r0, #20]
 800d09c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d0a0:	f8dc c000 	ldr.w	ip, [ip]
 800d0a4:	fa0c fc08 	lsl.w	ip, ip, r8
 800d0a8:	ea4c 0707 	orr.w	r7, ip, r7
 800d0ac:	f849 7b04 	str.w	r7, [r9], #4
 800d0b0:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d0b4:	40cf      	lsrs	r7, r1
 800d0b6:	e7d9      	b.n	800d06c <rshift+0x4c>
 800d0b8:	f851 cb04 	ldr.w	ip, [r1], #4
 800d0bc:	f847 cf04 	str.w	ip, [r7, #4]!
 800d0c0:	e7c2      	b.n	800d048 <rshift+0x28>
 800d0c2:	4623      	mov	r3, r4
 800d0c4:	e7e0      	b.n	800d088 <rshift+0x68>

0800d0c6 <__hexdig_fun>:
 800d0c6:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800d0ca:	2b09      	cmp	r3, #9
 800d0cc:	d802      	bhi.n	800d0d4 <__hexdig_fun+0xe>
 800d0ce:	3820      	subs	r0, #32
 800d0d0:	b2c0      	uxtb	r0, r0
 800d0d2:	4770      	bx	lr
 800d0d4:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800d0d8:	2b05      	cmp	r3, #5
 800d0da:	d801      	bhi.n	800d0e0 <__hexdig_fun+0x1a>
 800d0dc:	3847      	subs	r0, #71	@ 0x47
 800d0de:	e7f7      	b.n	800d0d0 <__hexdig_fun+0xa>
 800d0e0:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800d0e4:	2b05      	cmp	r3, #5
 800d0e6:	d801      	bhi.n	800d0ec <__hexdig_fun+0x26>
 800d0e8:	3827      	subs	r0, #39	@ 0x27
 800d0ea:	e7f1      	b.n	800d0d0 <__hexdig_fun+0xa>
 800d0ec:	2000      	movs	r0, #0
 800d0ee:	4770      	bx	lr

0800d0f0 <__gethex>:
 800d0f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0f4:	468a      	mov	sl, r1
 800d0f6:	4690      	mov	r8, r2
 800d0f8:	b085      	sub	sp, #20
 800d0fa:	9302      	str	r3, [sp, #8]
 800d0fc:	680b      	ldr	r3, [r1, #0]
 800d0fe:	9001      	str	r0, [sp, #4]
 800d100:	1c9c      	adds	r4, r3, #2
 800d102:	46a1      	mov	r9, r4
 800d104:	f814 0b01 	ldrb.w	r0, [r4], #1
 800d108:	2830      	cmp	r0, #48	@ 0x30
 800d10a:	d0fa      	beq.n	800d102 <__gethex+0x12>
 800d10c:	eba9 0303 	sub.w	r3, r9, r3
 800d110:	f1a3 0b02 	sub.w	fp, r3, #2
 800d114:	f7ff ffd7 	bl	800d0c6 <__hexdig_fun>
 800d118:	4605      	mov	r5, r0
 800d11a:	2800      	cmp	r0, #0
 800d11c:	d168      	bne.n	800d1f0 <__gethex+0x100>
 800d11e:	2201      	movs	r2, #1
 800d120:	4648      	mov	r0, r9
 800d122:	499f      	ldr	r1, [pc, #636]	@ (800d3a0 <__gethex+0x2b0>)
 800d124:	f7ff feff 	bl	800cf26 <strncmp>
 800d128:	4607      	mov	r7, r0
 800d12a:	2800      	cmp	r0, #0
 800d12c:	d167      	bne.n	800d1fe <__gethex+0x10e>
 800d12e:	f899 0001 	ldrb.w	r0, [r9, #1]
 800d132:	4626      	mov	r6, r4
 800d134:	f7ff ffc7 	bl	800d0c6 <__hexdig_fun>
 800d138:	2800      	cmp	r0, #0
 800d13a:	d062      	beq.n	800d202 <__gethex+0x112>
 800d13c:	4623      	mov	r3, r4
 800d13e:	7818      	ldrb	r0, [r3, #0]
 800d140:	4699      	mov	r9, r3
 800d142:	2830      	cmp	r0, #48	@ 0x30
 800d144:	f103 0301 	add.w	r3, r3, #1
 800d148:	d0f9      	beq.n	800d13e <__gethex+0x4e>
 800d14a:	f7ff ffbc 	bl	800d0c6 <__hexdig_fun>
 800d14e:	fab0 f580 	clz	r5, r0
 800d152:	f04f 0b01 	mov.w	fp, #1
 800d156:	096d      	lsrs	r5, r5, #5
 800d158:	464a      	mov	r2, r9
 800d15a:	4616      	mov	r6, r2
 800d15c:	7830      	ldrb	r0, [r6, #0]
 800d15e:	3201      	adds	r2, #1
 800d160:	f7ff ffb1 	bl	800d0c6 <__hexdig_fun>
 800d164:	2800      	cmp	r0, #0
 800d166:	d1f8      	bne.n	800d15a <__gethex+0x6a>
 800d168:	2201      	movs	r2, #1
 800d16a:	4630      	mov	r0, r6
 800d16c:	498c      	ldr	r1, [pc, #560]	@ (800d3a0 <__gethex+0x2b0>)
 800d16e:	f7ff feda 	bl	800cf26 <strncmp>
 800d172:	2800      	cmp	r0, #0
 800d174:	d13f      	bne.n	800d1f6 <__gethex+0x106>
 800d176:	b944      	cbnz	r4, 800d18a <__gethex+0x9a>
 800d178:	1c74      	adds	r4, r6, #1
 800d17a:	4622      	mov	r2, r4
 800d17c:	4616      	mov	r6, r2
 800d17e:	7830      	ldrb	r0, [r6, #0]
 800d180:	3201      	adds	r2, #1
 800d182:	f7ff ffa0 	bl	800d0c6 <__hexdig_fun>
 800d186:	2800      	cmp	r0, #0
 800d188:	d1f8      	bne.n	800d17c <__gethex+0x8c>
 800d18a:	1ba4      	subs	r4, r4, r6
 800d18c:	00a7      	lsls	r7, r4, #2
 800d18e:	7833      	ldrb	r3, [r6, #0]
 800d190:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800d194:	2b50      	cmp	r3, #80	@ 0x50
 800d196:	d13e      	bne.n	800d216 <__gethex+0x126>
 800d198:	7873      	ldrb	r3, [r6, #1]
 800d19a:	2b2b      	cmp	r3, #43	@ 0x2b
 800d19c:	d033      	beq.n	800d206 <__gethex+0x116>
 800d19e:	2b2d      	cmp	r3, #45	@ 0x2d
 800d1a0:	d034      	beq.n	800d20c <__gethex+0x11c>
 800d1a2:	2400      	movs	r4, #0
 800d1a4:	1c71      	adds	r1, r6, #1
 800d1a6:	7808      	ldrb	r0, [r1, #0]
 800d1a8:	f7ff ff8d 	bl	800d0c6 <__hexdig_fun>
 800d1ac:	1e43      	subs	r3, r0, #1
 800d1ae:	b2db      	uxtb	r3, r3
 800d1b0:	2b18      	cmp	r3, #24
 800d1b2:	d830      	bhi.n	800d216 <__gethex+0x126>
 800d1b4:	f1a0 0210 	sub.w	r2, r0, #16
 800d1b8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800d1bc:	f7ff ff83 	bl	800d0c6 <__hexdig_fun>
 800d1c0:	f100 3cff 	add.w	ip, r0, #4294967295
 800d1c4:	fa5f fc8c 	uxtb.w	ip, ip
 800d1c8:	f1bc 0f18 	cmp.w	ip, #24
 800d1cc:	f04f 030a 	mov.w	r3, #10
 800d1d0:	d91e      	bls.n	800d210 <__gethex+0x120>
 800d1d2:	b104      	cbz	r4, 800d1d6 <__gethex+0xe6>
 800d1d4:	4252      	negs	r2, r2
 800d1d6:	4417      	add	r7, r2
 800d1d8:	f8ca 1000 	str.w	r1, [sl]
 800d1dc:	b1ed      	cbz	r5, 800d21a <__gethex+0x12a>
 800d1de:	f1bb 0f00 	cmp.w	fp, #0
 800d1e2:	bf0c      	ite	eq
 800d1e4:	2506      	moveq	r5, #6
 800d1e6:	2500      	movne	r5, #0
 800d1e8:	4628      	mov	r0, r5
 800d1ea:	b005      	add	sp, #20
 800d1ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d1f0:	2500      	movs	r5, #0
 800d1f2:	462c      	mov	r4, r5
 800d1f4:	e7b0      	b.n	800d158 <__gethex+0x68>
 800d1f6:	2c00      	cmp	r4, #0
 800d1f8:	d1c7      	bne.n	800d18a <__gethex+0x9a>
 800d1fa:	4627      	mov	r7, r4
 800d1fc:	e7c7      	b.n	800d18e <__gethex+0x9e>
 800d1fe:	464e      	mov	r6, r9
 800d200:	462f      	mov	r7, r5
 800d202:	2501      	movs	r5, #1
 800d204:	e7c3      	b.n	800d18e <__gethex+0x9e>
 800d206:	2400      	movs	r4, #0
 800d208:	1cb1      	adds	r1, r6, #2
 800d20a:	e7cc      	b.n	800d1a6 <__gethex+0xb6>
 800d20c:	2401      	movs	r4, #1
 800d20e:	e7fb      	b.n	800d208 <__gethex+0x118>
 800d210:	fb03 0002 	mla	r0, r3, r2, r0
 800d214:	e7ce      	b.n	800d1b4 <__gethex+0xc4>
 800d216:	4631      	mov	r1, r6
 800d218:	e7de      	b.n	800d1d8 <__gethex+0xe8>
 800d21a:	4629      	mov	r1, r5
 800d21c:	eba6 0309 	sub.w	r3, r6, r9
 800d220:	3b01      	subs	r3, #1
 800d222:	2b07      	cmp	r3, #7
 800d224:	dc0a      	bgt.n	800d23c <__gethex+0x14c>
 800d226:	9801      	ldr	r0, [sp, #4]
 800d228:	f7fd ffb8 	bl	800b19c <_Balloc>
 800d22c:	4604      	mov	r4, r0
 800d22e:	b940      	cbnz	r0, 800d242 <__gethex+0x152>
 800d230:	4602      	mov	r2, r0
 800d232:	21e4      	movs	r1, #228	@ 0xe4
 800d234:	4b5b      	ldr	r3, [pc, #364]	@ (800d3a4 <__gethex+0x2b4>)
 800d236:	485c      	ldr	r0, [pc, #368]	@ (800d3a8 <__gethex+0x2b8>)
 800d238:	f7ff fec0 	bl	800cfbc <__assert_func>
 800d23c:	3101      	adds	r1, #1
 800d23e:	105b      	asrs	r3, r3, #1
 800d240:	e7ef      	b.n	800d222 <__gethex+0x132>
 800d242:	2300      	movs	r3, #0
 800d244:	f100 0a14 	add.w	sl, r0, #20
 800d248:	4655      	mov	r5, sl
 800d24a:	469b      	mov	fp, r3
 800d24c:	45b1      	cmp	r9, r6
 800d24e:	d337      	bcc.n	800d2c0 <__gethex+0x1d0>
 800d250:	f845 bb04 	str.w	fp, [r5], #4
 800d254:	eba5 050a 	sub.w	r5, r5, sl
 800d258:	10ad      	asrs	r5, r5, #2
 800d25a:	6125      	str	r5, [r4, #16]
 800d25c:	4658      	mov	r0, fp
 800d25e:	f7fe f88f 	bl	800b380 <__hi0bits>
 800d262:	016d      	lsls	r5, r5, #5
 800d264:	f8d8 6000 	ldr.w	r6, [r8]
 800d268:	1a2d      	subs	r5, r5, r0
 800d26a:	42b5      	cmp	r5, r6
 800d26c:	dd54      	ble.n	800d318 <__gethex+0x228>
 800d26e:	1bad      	subs	r5, r5, r6
 800d270:	4629      	mov	r1, r5
 800d272:	4620      	mov	r0, r4
 800d274:	f7fe fc17 	bl	800baa6 <__any_on>
 800d278:	4681      	mov	r9, r0
 800d27a:	b178      	cbz	r0, 800d29c <__gethex+0x1ac>
 800d27c:	f04f 0901 	mov.w	r9, #1
 800d280:	1e6b      	subs	r3, r5, #1
 800d282:	1159      	asrs	r1, r3, #5
 800d284:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800d288:	f003 021f 	and.w	r2, r3, #31
 800d28c:	fa09 f202 	lsl.w	r2, r9, r2
 800d290:	420a      	tst	r2, r1
 800d292:	d003      	beq.n	800d29c <__gethex+0x1ac>
 800d294:	454b      	cmp	r3, r9
 800d296:	dc36      	bgt.n	800d306 <__gethex+0x216>
 800d298:	f04f 0902 	mov.w	r9, #2
 800d29c:	4629      	mov	r1, r5
 800d29e:	4620      	mov	r0, r4
 800d2a0:	f7ff febe 	bl	800d020 <rshift>
 800d2a4:	442f      	add	r7, r5
 800d2a6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d2aa:	42bb      	cmp	r3, r7
 800d2ac:	da42      	bge.n	800d334 <__gethex+0x244>
 800d2ae:	4621      	mov	r1, r4
 800d2b0:	9801      	ldr	r0, [sp, #4]
 800d2b2:	f7fd ffb3 	bl	800b21c <_Bfree>
 800d2b6:	2300      	movs	r3, #0
 800d2b8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d2ba:	25a3      	movs	r5, #163	@ 0xa3
 800d2bc:	6013      	str	r3, [r2, #0]
 800d2be:	e793      	b.n	800d1e8 <__gethex+0xf8>
 800d2c0:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800d2c4:	2a2e      	cmp	r2, #46	@ 0x2e
 800d2c6:	d012      	beq.n	800d2ee <__gethex+0x1fe>
 800d2c8:	2b20      	cmp	r3, #32
 800d2ca:	d104      	bne.n	800d2d6 <__gethex+0x1e6>
 800d2cc:	f845 bb04 	str.w	fp, [r5], #4
 800d2d0:	f04f 0b00 	mov.w	fp, #0
 800d2d4:	465b      	mov	r3, fp
 800d2d6:	7830      	ldrb	r0, [r6, #0]
 800d2d8:	9303      	str	r3, [sp, #12]
 800d2da:	f7ff fef4 	bl	800d0c6 <__hexdig_fun>
 800d2de:	9b03      	ldr	r3, [sp, #12]
 800d2e0:	f000 000f 	and.w	r0, r0, #15
 800d2e4:	4098      	lsls	r0, r3
 800d2e6:	ea4b 0b00 	orr.w	fp, fp, r0
 800d2ea:	3304      	adds	r3, #4
 800d2ec:	e7ae      	b.n	800d24c <__gethex+0x15c>
 800d2ee:	45b1      	cmp	r9, r6
 800d2f0:	d8ea      	bhi.n	800d2c8 <__gethex+0x1d8>
 800d2f2:	2201      	movs	r2, #1
 800d2f4:	4630      	mov	r0, r6
 800d2f6:	492a      	ldr	r1, [pc, #168]	@ (800d3a0 <__gethex+0x2b0>)
 800d2f8:	9303      	str	r3, [sp, #12]
 800d2fa:	f7ff fe14 	bl	800cf26 <strncmp>
 800d2fe:	9b03      	ldr	r3, [sp, #12]
 800d300:	2800      	cmp	r0, #0
 800d302:	d1e1      	bne.n	800d2c8 <__gethex+0x1d8>
 800d304:	e7a2      	b.n	800d24c <__gethex+0x15c>
 800d306:	4620      	mov	r0, r4
 800d308:	1ea9      	subs	r1, r5, #2
 800d30a:	f7fe fbcc 	bl	800baa6 <__any_on>
 800d30e:	2800      	cmp	r0, #0
 800d310:	d0c2      	beq.n	800d298 <__gethex+0x1a8>
 800d312:	f04f 0903 	mov.w	r9, #3
 800d316:	e7c1      	b.n	800d29c <__gethex+0x1ac>
 800d318:	da09      	bge.n	800d32e <__gethex+0x23e>
 800d31a:	1b75      	subs	r5, r6, r5
 800d31c:	4621      	mov	r1, r4
 800d31e:	462a      	mov	r2, r5
 800d320:	9801      	ldr	r0, [sp, #4]
 800d322:	f7fe f991 	bl	800b648 <__lshift>
 800d326:	4604      	mov	r4, r0
 800d328:	1b7f      	subs	r7, r7, r5
 800d32a:	f100 0a14 	add.w	sl, r0, #20
 800d32e:	f04f 0900 	mov.w	r9, #0
 800d332:	e7b8      	b.n	800d2a6 <__gethex+0x1b6>
 800d334:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800d338:	42bd      	cmp	r5, r7
 800d33a:	dd6f      	ble.n	800d41c <__gethex+0x32c>
 800d33c:	1bed      	subs	r5, r5, r7
 800d33e:	42ae      	cmp	r6, r5
 800d340:	dc34      	bgt.n	800d3ac <__gethex+0x2bc>
 800d342:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d346:	2b02      	cmp	r3, #2
 800d348:	d022      	beq.n	800d390 <__gethex+0x2a0>
 800d34a:	2b03      	cmp	r3, #3
 800d34c:	d024      	beq.n	800d398 <__gethex+0x2a8>
 800d34e:	2b01      	cmp	r3, #1
 800d350:	d115      	bne.n	800d37e <__gethex+0x28e>
 800d352:	42ae      	cmp	r6, r5
 800d354:	d113      	bne.n	800d37e <__gethex+0x28e>
 800d356:	2e01      	cmp	r6, #1
 800d358:	d10b      	bne.n	800d372 <__gethex+0x282>
 800d35a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d35e:	9a02      	ldr	r2, [sp, #8]
 800d360:	2562      	movs	r5, #98	@ 0x62
 800d362:	6013      	str	r3, [r2, #0]
 800d364:	2301      	movs	r3, #1
 800d366:	6123      	str	r3, [r4, #16]
 800d368:	f8ca 3000 	str.w	r3, [sl]
 800d36c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d36e:	601c      	str	r4, [r3, #0]
 800d370:	e73a      	b.n	800d1e8 <__gethex+0xf8>
 800d372:	4620      	mov	r0, r4
 800d374:	1e71      	subs	r1, r6, #1
 800d376:	f7fe fb96 	bl	800baa6 <__any_on>
 800d37a:	2800      	cmp	r0, #0
 800d37c:	d1ed      	bne.n	800d35a <__gethex+0x26a>
 800d37e:	4621      	mov	r1, r4
 800d380:	9801      	ldr	r0, [sp, #4]
 800d382:	f7fd ff4b 	bl	800b21c <_Bfree>
 800d386:	2300      	movs	r3, #0
 800d388:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d38a:	2550      	movs	r5, #80	@ 0x50
 800d38c:	6013      	str	r3, [r2, #0]
 800d38e:	e72b      	b.n	800d1e8 <__gethex+0xf8>
 800d390:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d392:	2b00      	cmp	r3, #0
 800d394:	d1f3      	bne.n	800d37e <__gethex+0x28e>
 800d396:	e7e0      	b.n	800d35a <__gethex+0x26a>
 800d398:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d39a:	2b00      	cmp	r3, #0
 800d39c:	d1dd      	bne.n	800d35a <__gethex+0x26a>
 800d39e:	e7ee      	b.n	800d37e <__gethex+0x28e>
 800d3a0:	0800f130 	.word	0x0800f130
 800d3a4:	0800efc9 	.word	0x0800efc9
 800d3a8:	0800f2de 	.word	0x0800f2de
 800d3ac:	1e6f      	subs	r7, r5, #1
 800d3ae:	f1b9 0f00 	cmp.w	r9, #0
 800d3b2:	d130      	bne.n	800d416 <__gethex+0x326>
 800d3b4:	b127      	cbz	r7, 800d3c0 <__gethex+0x2d0>
 800d3b6:	4639      	mov	r1, r7
 800d3b8:	4620      	mov	r0, r4
 800d3ba:	f7fe fb74 	bl	800baa6 <__any_on>
 800d3be:	4681      	mov	r9, r0
 800d3c0:	2301      	movs	r3, #1
 800d3c2:	4629      	mov	r1, r5
 800d3c4:	1b76      	subs	r6, r6, r5
 800d3c6:	2502      	movs	r5, #2
 800d3c8:	117a      	asrs	r2, r7, #5
 800d3ca:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800d3ce:	f007 071f 	and.w	r7, r7, #31
 800d3d2:	40bb      	lsls	r3, r7
 800d3d4:	4213      	tst	r3, r2
 800d3d6:	4620      	mov	r0, r4
 800d3d8:	bf18      	it	ne
 800d3da:	f049 0902 	orrne.w	r9, r9, #2
 800d3de:	f7ff fe1f 	bl	800d020 <rshift>
 800d3e2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800d3e6:	f1b9 0f00 	cmp.w	r9, #0
 800d3ea:	d047      	beq.n	800d47c <__gethex+0x38c>
 800d3ec:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d3f0:	2b02      	cmp	r3, #2
 800d3f2:	d015      	beq.n	800d420 <__gethex+0x330>
 800d3f4:	2b03      	cmp	r3, #3
 800d3f6:	d017      	beq.n	800d428 <__gethex+0x338>
 800d3f8:	2b01      	cmp	r3, #1
 800d3fa:	d109      	bne.n	800d410 <__gethex+0x320>
 800d3fc:	f019 0f02 	tst.w	r9, #2
 800d400:	d006      	beq.n	800d410 <__gethex+0x320>
 800d402:	f8da 3000 	ldr.w	r3, [sl]
 800d406:	ea49 0903 	orr.w	r9, r9, r3
 800d40a:	f019 0f01 	tst.w	r9, #1
 800d40e:	d10e      	bne.n	800d42e <__gethex+0x33e>
 800d410:	f045 0510 	orr.w	r5, r5, #16
 800d414:	e032      	b.n	800d47c <__gethex+0x38c>
 800d416:	f04f 0901 	mov.w	r9, #1
 800d41a:	e7d1      	b.n	800d3c0 <__gethex+0x2d0>
 800d41c:	2501      	movs	r5, #1
 800d41e:	e7e2      	b.n	800d3e6 <__gethex+0x2f6>
 800d420:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d422:	f1c3 0301 	rsb	r3, r3, #1
 800d426:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d428:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d42a:	2b00      	cmp	r3, #0
 800d42c:	d0f0      	beq.n	800d410 <__gethex+0x320>
 800d42e:	f04f 0c00 	mov.w	ip, #0
 800d432:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800d436:	f104 0314 	add.w	r3, r4, #20
 800d43a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800d43e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800d442:	4618      	mov	r0, r3
 800d444:	f853 2b04 	ldr.w	r2, [r3], #4
 800d448:	f1b2 3fff 	cmp.w	r2, #4294967295
 800d44c:	d01b      	beq.n	800d486 <__gethex+0x396>
 800d44e:	3201      	adds	r2, #1
 800d450:	6002      	str	r2, [r0, #0]
 800d452:	2d02      	cmp	r5, #2
 800d454:	f104 0314 	add.w	r3, r4, #20
 800d458:	d13c      	bne.n	800d4d4 <__gethex+0x3e4>
 800d45a:	f8d8 2000 	ldr.w	r2, [r8]
 800d45e:	3a01      	subs	r2, #1
 800d460:	42b2      	cmp	r2, r6
 800d462:	d109      	bne.n	800d478 <__gethex+0x388>
 800d464:	2201      	movs	r2, #1
 800d466:	1171      	asrs	r1, r6, #5
 800d468:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d46c:	f006 061f 	and.w	r6, r6, #31
 800d470:	fa02 f606 	lsl.w	r6, r2, r6
 800d474:	421e      	tst	r6, r3
 800d476:	d13a      	bne.n	800d4ee <__gethex+0x3fe>
 800d478:	f045 0520 	orr.w	r5, r5, #32
 800d47c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d47e:	601c      	str	r4, [r3, #0]
 800d480:	9b02      	ldr	r3, [sp, #8]
 800d482:	601f      	str	r7, [r3, #0]
 800d484:	e6b0      	b.n	800d1e8 <__gethex+0xf8>
 800d486:	4299      	cmp	r1, r3
 800d488:	f843 cc04 	str.w	ip, [r3, #-4]
 800d48c:	d8d9      	bhi.n	800d442 <__gethex+0x352>
 800d48e:	68a3      	ldr	r3, [r4, #8]
 800d490:	459b      	cmp	fp, r3
 800d492:	db17      	blt.n	800d4c4 <__gethex+0x3d4>
 800d494:	6861      	ldr	r1, [r4, #4]
 800d496:	9801      	ldr	r0, [sp, #4]
 800d498:	3101      	adds	r1, #1
 800d49a:	f7fd fe7f 	bl	800b19c <_Balloc>
 800d49e:	4681      	mov	r9, r0
 800d4a0:	b918      	cbnz	r0, 800d4aa <__gethex+0x3ba>
 800d4a2:	4602      	mov	r2, r0
 800d4a4:	2184      	movs	r1, #132	@ 0x84
 800d4a6:	4b19      	ldr	r3, [pc, #100]	@ (800d50c <__gethex+0x41c>)
 800d4a8:	e6c5      	b.n	800d236 <__gethex+0x146>
 800d4aa:	6922      	ldr	r2, [r4, #16]
 800d4ac:	f104 010c 	add.w	r1, r4, #12
 800d4b0:	3202      	adds	r2, #2
 800d4b2:	0092      	lsls	r2, r2, #2
 800d4b4:	300c      	adds	r0, #12
 800d4b6:	f7fc ff0e 	bl	800a2d6 <memcpy>
 800d4ba:	4621      	mov	r1, r4
 800d4bc:	9801      	ldr	r0, [sp, #4]
 800d4be:	f7fd fead 	bl	800b21c <_Bfree>
 800d4c2:	464c      	mov	r4, r9
 800d4c4:	6923      	ldr	r3, [r4, #16]
 800d4c6:	1c5a      	adds	r2, r3, #1
 800d4c8:	6122      	str	r2, [r4, #16]
 800d4ca:	2201      	movs	r2, #1
 800d4cc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d4d0:	615a      	str	r2, [r3, #20]
 800d4d2:	e7be      	b.n	800d452 <__gethex+0x362>
 800d4d4:	6922      	ldr	r2, [r4, #16]
 800d4d6:	455a      	cmp	r2, fp
 800d4d8:	dd0b      	ble.n	800d4f2 <__gethex+0x402>
 800d4da:	2101      	movs	r1, #1
 800d4dc:	4620      	mov	r0, r4
 800d4de:	f7ff fd9f 	bl	800d020 <rshift>
 800d4e2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d4e6:	3701      	adds	r7, #1
 800d4e8:	42bb      	cmp	r3, r7
 800d4ea:	f6ff aee0 	blt.w	800d2ae <__gethex+0x1be>
 800d4ee:	2501      	movs	r5, #1
 800d4f0:	e7c2      	b.n	800d478 <__gethex+0x388>
 800d4f2:	f016 061f 	ands.w	r6, r6, #31
 800d4f6:	d0fa      	beq.n	800d4ee <__gethex+0x3fe>
 800d4f8:	4453      	add	r3, sl
 800d4fa:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800d4fe:	f7fd ff3f 	bl	800b380 <__hi0bits>
 800d502:	f1c6 0620 	rsb	r6, r6, #32
 800d506:	42b0      	cmp	r0, r6
 800d508:	dbe7      	blt.n	800d4da <__gethex+0x3ea>
 800d50a:	e7f0      	b.n	800d4ee <__gethex+0x3fe>
 800d50c:	0800efc9 	.word	0x0800efc9

0800d510 <L_shift>:
 800d510:	f1c2 0208 	rsb	r2, r2, #8
 800d514:	0092      	lsls	r2, r2, #2
 800d516:	b570      	push	{r4, r5, r6, lr}
 800d518:	f1c2 0620 	rsb	r6, r2, #32
 800d51c:	6843      	ldr	r3, [r0, #4]
 800d51e:	6804      	ldr	r4, [r0, #0]
 800d520:	fa03 f506 	lsl.w	r5, r3, r6
 800d524:	432c      	orrs	r4, r5
 800d526:	40d3      	lsrs	r3, r2
 800d528:	6004      	str	r4, [r0, #0]
 800d52a:	f840 3f04 	str.w	r3, [r0, #4]!
 800d52e:	4288      	cmp	r0, r1
 800d530:	d3f4      	bcc.n	800d51c <L_shift+0xc>
 800d532:	bd70      	pop	{r4, r5, r6, pc}

0800d534 <__match>:
 800d534:	b530      	push	{r4, r5, lr}
 800d536:	6803      	ldr	r3, [r0, #0]
 800d538:	3301      	adds	r3, #1
 800d53a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d53e:	b914      	cbnz	r4, 800d546 <__match+0x12>
 800d540:	6003      	str	r3, [r0, #0]
 800d542:	2001      	movs	r0, #1
 800d544:	bd30      	pop	{r4, r5, pc}
 800d546:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d54a:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800d54e:	2d19      	cmp	r5, #25
 800d550:	bf98      	it	ls
 800d552:	3220      	addls	r2, #32
 800d554:	42a2      	cmp	r2, r4
 800d556:	d0f0      	beq.n	800d53a <__match+0x6>
 800d558:	2000      	movs	r0, #0
 800d55a:	e7f3      	b.n	800d544 <__match+0x10>

0800d55c <__hexnan>:
 800d55c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d560:	2500      	movs	r5, #0
 800d562:	680b      	ldr	r3, [r1, #0]
 800d564:	4682      	mov	sl, r0
 800d566:	115e      	asrs	r6, r3, #5
 800d568:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800d56c:	f013 031f 	ands.w	r3, r3, #31
 800d570:	bf18      	it	ne
 800d572:	3604      	addne	r6, #4
 800d574:	1f37      	subs	r7, r6, #4
 800d576:	4690      	mov	r8, r2
 800d578:	46b9      	mov	r9, r7
 800d57a:	463c      	mov	r4, r7
 800d57c:	46ab      	mov	fp, r5
 800d57e:	b087      	sub	sp, #28
 800d580:	6801      	ldr	r1, [r0, #0]
 800d582:	9301      	str	r3, [sp, #4]
 800d584:	f846 5c04 	str.w	r5, [r6, #-4]
 800d588:	9502      	str	r5, [sp, #8]
 800d58a:	784a      	ldrb	r2, [r1, #1]
 800d58c:	1c4b      	adds	r3, r1, #1
 800d58e:	9303      	str	r3, [sp, #12]
 800d590:	b342      	cbz	r2, 800d5e4 <__hexnan+0x88>
 800d592:	4610      	mov	r0, r2
 800d594:	9105      	str	r1, [sp, #20]
 800d596:	9204      	str	r2, [sp, #16]
 800d598:	f7ff fd95 	bl	800d0c6 <__hexdig_fun>
 800d59c:	2800      	cmp	r0, #0
 800d59e:	d151      	bne.n	800d644 <__hexnan+0xe8>
 800d5a0:	9a04      	ldr	r2, [sp, #16]
 800d5a2:	9905      	ldr	r1, [sp, #20]
 800d5a4:	2a20      	cmp	r2, #32
 800d5a6:	d818      	bhi.n	800d5da <__hexnan+0x7e>
 800d5a8:	9b02      	ldr	r3, [sp, #8]
 800d5aa:	459b      	cmp	fp, r3
 800d5ac:	dd13      	ble.n	800d5d6 <__hexnan+0x7a>
 800d5ae:	454c      	cmp	r4, r9
 800d5b0:	d206      	bcs.n	800d5c0 <__hexnan+0x64>
 800d5b2:	2d07      	cmp	r5, #7
 800d5b4:	dc04      	bgt.n	800d5c0 <__hexnan+0x64>
 800d5b6:	462a      	mov	r2, r5
 800d5b8:	4649      	mov	r1, r9
 800d5ba:	4620      	mov	r0, r4
 800d5bc:	f7ff ffa8 	bl	800d510 <L_shift>
 800d5c0:	4544      	cmp	r4, r8
 800d5c2:	d952      	bls.n	800d66a <__hexnan+0x10e>
 800d5c4:	2300      	movs	r3, #0
 800d5c6:	f1a4 0904 	sub.w	r9, r4, #4
 800d5ca:	f844 3c04 	str.w	r3, [r4, #-4]
 800d5ce:	461d      	mov	r5, r3
 800d5d0:	464c      	mov	r4, r9
 800d5d2:	f8cd b008 	str.w	fp, [sp, #8]
 800d5d6:	9903      	ldr	r1, [sp, #12]
 800d5d8:	e7d7      	b.n	800d58a <__hexnan+0x2e>
 800d5da:	2a29      	cmp	r2, #41	@ 0x29
 800d5dc:	d157      	bne.n	800d68e <__hexnan+0x132>
 800d5de:	3102      	adds	r1, #2
 800d5e0:	f8ca 1000 	str.w	r1, [sl]
 800d5e4:	f1bb 0f00 	cmp.w	fp, #0
 800d5e8:	d051      	beq.n	800d68e <__hexnan+0x132>
 800d5ea:	454c      	cmp	r4, r9
 800d5ec:	d206      	bcs.n	800d5fc <__hexnan+0xa0>
 800d5ee:	2d07      	cmp	r5, #7
 800d5f0:	dc04      	bgt.n	800d5fc <__hexnan+0xa0>
 800d5f2:	462a      	mov	r2, r5
 800d5f4:	4649      	mov	r1, r9
 800d5f6:	4620      	mov	r0, r4
 800d5f8:	f7ff ff8a 	bl	800d510 <L_shift>
 800d5fc:	4544      	cmp	r4, r8
 800d5fe:	d936      	bls.n	800d66e <__hexnan+0x112>
 800d600:	4623      	mov	r3, r4
 800d602:	f1a8 0204 	sub.w	r2, r8, #4
 800d606:	f853 1b04 	ldr.w	r1, [r3], #4
 800d60a:	429f      	cmp	r7, r3
 800d60c:	f842 1f04 	str.w	r1, [r2, #4]!
 800d610:	d2f9      	bcs.n	800d606 <__hexnan+0xaa>
 800d612:	1b3b      	subs	r3, r7, r4
 800d614:	f023 0303 	bic.w	r3, r3, #3
 800d618:	3304      	adds	r3, #4
 800d61a:	3401      	adds	r4, #1
 800d61c:	3e03      	subs	r6, #3
 800d61e:	42b4      	cmp	r4, r6
 800d620:	bf88      	it	hi
 800d622:	2304      	movhi	r3, #4
 800d624:	2200      	movs	r2, #0
 800d626:	4443      	add	r3, r8
 800d628:	f843 2b04 	str.w	r2, [r3], #4
 800d62c:	429f      	cmp	r7, r3
 800d62e:	d2fb      	bcs.n	800d628 <__hexnan+0xcc>
 800d630:	683b      	ldr	r3, [r7, #0]
 800d632:	b91b      	cbnz	r3, 800d63c <__hexnan+0xe0>
 800d634:	4547      	cmp	r7, r8
 800d636:	d128      	bne.n	800d68a <__hexnan+0x12e>
 800d638:	2301      	movs	r3, #1
 800d63a:	603b      	str	r3, [r7, #0]
 800d63c:	2005      	movs	r0, #5
 800d63e:	b007      	add	sp, #28
 800d640:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d644:	3501      	adds	r5, #1
 800d646:	2d08      	cmp	r5, #8
 800d648:	f10b 0b01 	add.w	fp, fp, #1
 800d64c:	dd06      	ble.n	800d65c <__hexnan+0x100>
 800d64e:	4544      	cmp	r4, r8
 800d650:	d9c1      	bls.n	800d5d6 <__hexnan+0x7a>
 800d652:	2300      	movs	r3, #0
 800d654:	2501      	movs	r5, #1
 800d656:	f844 3c04 	str.w	r3, [r4, #-4]
 800d65a:	3c04      	subs	r4, #4
 800d65c:	6822      	ldr	r2, [r4, #0]
 800d65e:	f000 000f 	and.w	r0, r0, #15
 800d662:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800d666:	6020      	str	r0, [r4, #0]
 800d668:	e7b5      	b.n	800d5d6 <__hexnan+0x7a>
 800d66a:	2508      	movs	r5, #8
 800d66c:	e7b3      	b.n	800d5d6 <__hexnan+0x7a>
 800d66e:	9b01      	ldr	r3, [sp, #4]
 800d670:	2b00      	cmp	r3, #0
 800d672:	d0dd      	beq.n	800d630 <__hexnan+0xd4>
 800d674:	f04f 32ff 	mov.w	r2, #4294967295
 800d678:	f1c3 0320 	rsb	r3, r3, #32
 800d67c:	40da      	lsrs	r2, r3
 800d67e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800d682:	4013      	ands	r3, r2
 800d684:	f846 3c04 	str.w	r3, [r6, #-4]
 800d688:	e7d2      	b.n	800d630 <__hexnan+0xd4>
 800d68a:	3f04      	subs	r7, #4
 800d68c:	e7d0      	b.n	800d630 <__hexnan+0xd4>
 800d68e:	2004      	movs	r0, #4
 800d690:	e7d5      	b.n	800d63e <__hexnan+0xe2>

0800d692 <__ascii_mbtowc>:
 800d692:	b082      	sub	sp, #8
 800d694:	b901      	cbnz	r1, 800d698 <__ascii_mbtowc+0x6>
 800d696:	a901      	add	r1, sp, #4
 800d698:	b142      	cbz	r2, 800d6ac <__ascii_mbtowc+0x1a>
 800d69a:	b14b      	cbz	r3, 800d6b0 <__ascii_mbtowc+0x1e>
 800d69c:	7813      	ldrb	r3, [r2, #0]
 800d69e:	600b      	str	r3, [r1, #0]
 800d6a0:	7812      	ldrb	r2, [r2, #0]
 800d6a2:	1e10      	subs	r0, r2, #0
 800d6a4:	bf18      	it	ne
 800d6a6:	2001      	movne	r0, #1
 800d6a8:	b002      	add	sp, #8
 800d6aa:	4770      	bx	lr
 800d6ac:	4610      	mov	r0, r2
 800d6ae:	e7fb      	b.n	800d6a8 <__ascii_mbtowc+0x16>
 800d6b0:	f06f 0001 	mvn.w	r0, #1
 800d6b4:	e7f8      	b.n	800d6a8 <__ascii_mbtowc+0x16>

0800d6b6 <_realloc_r>:
 800d6b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d6ba:	4680      	mov	r8, r0
 800d6bc:	4615      	mov	r5, r2
 800d6be:	460c      	mov	r4, r1
 800d6c0:	b921      	cbnz	r1, 800d6cc <_realloc_r+0x16>
 800d6c2:	4611      	mov	r1, r2
 800d6c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d6c8:	f7fd bcdc 	b.w	800b084 <_malloc_r>
 800d6cc:	b92a      	cbnz	r2, 800d6da <_realloc_r+0x24>
 800d6ce:	f7fd fc67 	bl	800afa0 <_free_r>
 800d6d2:	2400      	movs	r4, #0
 800d6d4:	4620      	mov	r0, r4
 800d6d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d6da:	f000 f840 	bl	800d75e <_malloc_usable_size_r>
 800d6de:	4285      	cmp	r5, r0
 800d6e0:	4606      	mov	r6, r0
 800d6e2:	d802      	bhi.n	800d6ea <_realloc_r+0x34>
 800d6e4:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800d6e8:	d8f4      	bhi.n	800d6d4 <_realloc_r+0x1e>
 800d6ea:	4629      	mov	r1, r5
 800d6ec:	4640      	mov	r0, r8
 800d6ee:	f7fd fcc9 	bl	800b084 <_malloc_r>
 800d6f2:	4607      	mov	r7, r0
 800d6f4:	2800      	cmp	r0, #0
 800d6f6:	d0ec      	beq.n	800d6d2 <_realloc_r+0x1c>
 800d6f8:	42b5      	cmp	r5, r6
 800d6fa:	462a      	mov	r2, r5
 800d6fc:	4621      	mov	r1, r4
 800d6fe:	bf28      	it	cs
 800d700:	4632      	movcs	r2, r6
 800d702:	f7fc fde8 	bl	800a2d6 <memcpy>
 800d706:	4621      	mov	r1, r4
 800d708:	4640      	mov	r0, r8
 800d70a:	f7fd fc49 	bl	800afa0 <_free_r>
 800d70e:	463c      	mov	r4, r7
 800d710:	e7e0      	b.n	800d6d4 <_realloc_r+0x1e>

0800d712 <__ascii_wctomb>:
 800d712:	4603      	mov	r3, r0
 800d714:	4608      	mov	r0, r1
 800d716:	b141      	cbz	r1, 800d72a <__ascii_wctomb+0x18>
 800d718:	2aff      	cmp	r2, #255	@ 0xff
 800d71a:	d904      	bls.n	800d726 <__ascii_wctomb+0x14>
 800d71c:	228a      	movs	r2, #138	@ 0x8a
 800d71e:	f04f 30ff 	mov.w	r0, #4294967295
 800d722:	601a      	str	r2, [r3, #0]
 800d724:	4770      	bx	lr
 800d726:	2001      	movs	r0, #1
 800d728:	700a      	strb	r2, [r1, #0]
 800d72a:	4770      	bx	lr

0800d72c <fiprintf>:
 800d72c:	b40e      	push	{r1, r2, r3}
 800d72e:	b503      	push	{r0, r1, lr}
 800d730:	4601      	mov	r1, r0
 800d732:	ab03      	add	r3, sp, #12
 800d734:	4805      	ldr	r0, [pc, #20]	@ (800d74c <fiprintf+0x20>)
 800d736:	f853 2b04 	ldr.w	r2, [r3], #4
 800d73a:	6800      	ldr	r0, [r0, #0]
 800d73c:	9301      	str	r3, [sp, #4]
 800d73e:	f7ff f9d1 	bl	800cae4 <_vfiprintf_r>
 800d742:	b002      	add	sp, #8
 800d744:	f85d eb04 	ldr.w	lr, [sp], #4
 800d748:	b003      	add	sp, #12
 800d74a:	4770      	bx	lr
 800d74c:	20000040 	.word	0x20000040

0800d750 <abort>:
 800d750:	2006      	movs	r0, #6
 800d752:	b508      	push	{r3, lr}
 800d754:	f000 f834 	bl	800d7c0 <raise>
 800d758:	2001      	movs	r0, #1
 800d75a:	f7f5 fa80 	bl	8002c5e <_exit>

0800d75e <_malloc_usable_size_r>:
 800d75e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d762:	1f18      	subs	r0, r3, #4
 800d764:	2b00      	cmp	r3, #0
 800d766:	bfbc      	itt	lt
 800d768:	580b      	ldrlt	r3, [r1, r0]
 800d76a:	18c0      	addlt	r0, r0, r3
 800d76c:	4770      	bx	lr

0800d76e <_raise_r>:
 800d76e:	291f      	cmp	r1, #31
 800d770:	b538      	push	{r3, r4, r5, lr}
 800d772:	4605      	mov	r5, r0
 800d774:	460c      	mov	r4, r1
 800d776:	d904      	bls.n	800d782 <_raise_r+0x14>
 800d778:	2316      	movs	r3, #22
 800d77a:	6003      	str	r3, [r0, #0]
 800d77c:	f04f 30ff 	mov.w	r0, #4294967295
 800d780:	bd38      	pop	{r3, r4, r5, pc}
 800d782:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d784:	b112      	cbz	r2, 800d78c <_raise_r+0x1e>
 800d786:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d78a:	b94b      	cbnz	r3, 800d7a0 <_raise_r+0x32>
 800d78c:	4628      	mov	r0, r5
 800d78e:	f000 f831 	bl	800d7f4 <_getpid_r>
 800d792:	4622      	mov	r2, r4
 800d794:	4601      	mov	r1, r0
 800d796:	4628      	mov	r0, r5
 800d798:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d79c:	f000 b818 	b.w	800d7d0 <_kill_r>
 800d7a0:	2b01      	cmp	r3, #1
 800d7a2:	d00a      	beq.n	800d7ba <_raise_r+0x4c>
 800d7a4:	1c59      	adds	r1, r3, #1
 800d7a6:	d103      	bne.n	800d7b0 <_raise_r+0x42>
 800d7a8:	2316      	movs	r3, #22
 800d7aa:	6003      	str	r3, [r0, #0]
 800d7ac:	2001      	movs	r0, #1
 800d7ae:	e7e7      	b.n	800d780 <_raise_r+0x12>
 800d7b0:	2100      	movs	r1, #0
 800d7b2:	4620      	mov	r0, r4
 800d7b4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d7b8:	4798      	blx	r3
 800d7ba:	2000      	movs	r0, #0
 800d7bc:	e7e0      	b.n	800d780 <_raise_r+0x12>
	...

0800d7c0 <raise>:
 800d7c0:	4b02      	ldr	r3, [pc, #8]	@ (800d7cc <raise+0xc>)
 800d7c2:	4601      	mov	r1, r0
 800d7c4:	6818      	ldr	r0, [r3, #0]
 800d7c6:	f7ff bfd2 	b.w	800d76e <_raise_r>
 800d7ca:	bf00      	nop
 800d7cc:	20000040 	.word	0x20000040

0800d7d0 <_kill_r>:
 800d7d0:	b538      	push	{r3, r4, r5, lr}
 800d7d2:	2300      	movs	r3, #0
 800d7d4:	4d06      	ldr	r5, [pc, #24]	@ (800d7f0 <_kill_r+0x20>)
 800d7d6:	4604      	mov	r4, r0
 800d7d8:	4608      	mov	r0, r1
 800d7da:	4611      	mov	r1, r2
 800d7dc:	602b      	str	r3, [r5, #0]
 800d7de:	f7f5 fa2e 	bl	8002c3e <_kill>
 800d7e2:	1c43      	adds	r3, r0, #1
 800d7e4:	d102      	bne.n	800d7ec <_kill_r+0x1c>
 800d7e6:	682b      	ldr	r3, [r5, #0]
 800d7e8:	b103      	cbz	r3, 800d7ec <_kill_r+0x1c>
 800d7ea:	6023      	str	r3, [r4, #0]
 800d7ec:	bd38      	pop	{r3, r4, r5, pc}
 800d7ee:	bf00      	nop
 800d7f0:	20000a10 	.word	0x20000a10

0800d7f4 <_getpid_r>:
 800d7f4:	f7f5 ba1c 	b.w	8002c30 <_getpid>

0800d7f8 <_init>:
 800d7f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d7fa:	bf00      	nop
 800d7fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d7fe:	bc08      	pop	{r3}
 800d800:	469e      	mov	lr, r3
 800d802:	4770      	bx	lr

0800d804 <_fini>:
 800d804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d806:	bf00      	nop
 800d808:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d80a:	bc08      	pop	{r3}
 800d80c:	469e      	mov	lr, r3
 800d80e:	4770      	bx	lr
