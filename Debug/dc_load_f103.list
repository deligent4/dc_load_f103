
dc_load_f103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b6a0  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c30  0800b7b0  0800b7b0  0000c7b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c3e0  0800c3e0  0000e1ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800c3e0  0800c3e0  0000d3e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c3e8  0800c3e8  0000e1ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c3e8  0800c3e8  0000d3e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c3ec  0800c3ec  0000d3ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0800c3f0  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000704  200001ec  0800c5dc  0000e1ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200008f0  0800c5dc  0000e8f0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000e1ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010544  00000000  00000000  0000e215  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030eb  00000000  00000000  0001e759  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e70  00000000  00000000  00021848  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b06  00000000  00000000  000226b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a356  00000000  00000000  000231be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014c0d  00000000  00000000  0003d514  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008dd68  00000000  00000000  00052121  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000dfe89  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e48  00000000  00000000  000dfecc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  000e4d14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001ec 	.word	0x200001ec
 800012c:	00000000 	.word	0x00000000
 8000130:	0800b798 	.word	0x0800b798

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001f0 	.word	0x200001f0
 800014c:	0800b798 	.word	0x0800b798

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_d2lz>:
 8000b68:	b538      	push	{r3, r4, r5, lr}
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	4604      	mov	r4, r0
 8000b70:	460d      	mov	r5, r1
 8000b72:	f7ff ff23 	bl	80009bc <__aeabi_dcmplt>
 8000b76:	b928      	cbnz	r0, 8000b84 <__aeabi_d2lz+0x1c>
 8000b78:	4620      	mov	r0, r4
 8000b7a:	4629      	mov	r1, r5
 8000b7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000b80:	f000 b80a 	b.w	8000b98 <__aeabi_d2ulz>
 8000b84:	4620      	mov	r0, r4
 8000b86:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000b8a:	f000 f805 	bl	8000b98 <__aeabi_d2ulz>
 8000b8e:	4240      	negs	r0, r0
 8000b90:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b94:	bd38      	pop	{r3, r4, r5, pc}
 8000b96:	bf00      	nop

08000b98 <__aeabi_d2ulz>:
 8000b98:	b5d0      	push	{r4, r6, r7, lr}
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	4b0b      	ldr	r3, [pc, #44]	@ (8000bcc <__aeabi_d2ulz+0x34>)
 8000b9e:	4606      	mov	r6, r0
 8000ba0:	460f      	mov	r7, r1
 8000ba2:	f7ff fc99 	bl	80004d8 <__aeabi_dmul>
 8000ba6:	f7ff ff6f 	bl	8000a88 <__aeabi_d2uiz>
 8000baa:	4604      	mov	r4, r0
 8000bac:	f7ff fc1a 	bl	80003e4 <__aeabi_ui2d>
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	4b07      	ldr	r3, [pc, #28]	@ (8000bd0 <__aeabi_d2ulz+0x38>)
 8000bb4:	f7ff fc90 	bl	80004d8 <__aeabi_dmul>
 8000bb8:	4602      	mov	r2, r0
 8000bba:	460b      	mov	r3, r1
 8000bbc:	4630      	mov	r0, r6
 8000bbe:	4639      	mov	r1, r7
 8000bc0:	f7ff fad2 	bl	8000168 <__aeabi_dsub>
 8000bc4:	f7ff ff60 	bl	8000a88 <__aeabi_d2uiz>
 8000bc8:	4621      	mov	r1, r4
 8000bca:	bdd0      	pop	{r4, r6, r7, pc}
 8000bcc:	3df00000 	.word	0x3df00000
 8000bd0:	41f00000 	.word	0x41f00000

08000bd4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b084      	sub	sp, #16
 8000bd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000bda:	1d3b      	adds	r3, r7, #4
 8000bdc:	2200      	movs	r2, #0
 8000bde:	601a      	str	r2, [r3, #0]
 8000be0:	605a      	str	r2, [r3, #4]
 8000be2:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000be4:	4b18      	ldr	r3, [pc, #96]	@ (8000c48 <MX_ADC1_Init+0x74>)
 8000be6:	4a19      	ldr	r2, [pc, #100]	@ (8000c4c <MX_ADC1_Init+0x78>)
 8000be8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000bea:	4b17      	ldr	r3, [pc, #92]	@ (8000c48 <MX_ADC1_Init+0x74>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000bf0:	4b15      	ldr	r3, [pc, #84]	@ (8000c48 <MX_ADC1_Init+0x74>)
 8000bf2:	2201      	movs	r2, #1
 8000bf4:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000bf6:	4b14      	ldr	r3, [pc, #80]	@ (8000c48 <MX_ADC1_Init+0x74>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000bfc:	4b12      	ldr	r3, [pc, #72]	@ (8000c48 <MX_ADC1_Init+0x74>)
 8000bfe:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000c02:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c04:	4b10      	ldr	r3, [pc, #64]	@ (8000c48 <MX_ADC1_Init+0x74>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000c0a:	4b0f      	ldr	r3, [pc, #60]	@ (8000c48 <MX_ADC1_Init+0x74>)
 8000c0c:	2201      	movs	r2, #1
 8000c0e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c10:	480d      	ldr	r0, [pc, #52]	@ (8000c48 <MX_ADC1_Init+0x74>)
 8000c12:	f000 fdd1 	bl	80017b8 <HAL_ADC_Init>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000c1c:	f000 fb64 	bl	80012e8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000c20:	2309      	movs	r3, #9
 8000c22:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c24:	2301      	movs	r3, #1
 8000c26:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 8000c28:	2305      	movs	r3, #5
 8000c2a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c2c:	1d3b      	adds	r3, r7, #4
 8000c2e:	4619      	mov	r1, r3
 8000c30:	4805      	ldr	r0, [pc, #20]	@ (8000c48 <MX_ADC1_Init+0x74>)
 8000c32:	f001 f859 	bl	8001ce8 <HAL_ADC_ConfigChannel>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d001      	beq.n	8000c40 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000c3c:	f000 fb54 	bl	80012e8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c40:	bf00      	nop
 8000c42:	3710      	adds	r7, #16
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	20000208 	.word	0x20000208
 8000c4c:	40012400 	.word	0x40012400

08000c50 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b088      	sub	sp, #32
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c58:	f107 0310 	add.w	r3, r7, #16
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	601a      	str	r2, [r3, #0]
 8000c60:	605a      	str	r2, [r3, #4]
 8000c62:	609a      	str	r2, [r3, #8]
 8000c64:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	4a14      	ldr	r2, [pc, #80]	@ (8000cbc <HAL_ADC_MspInit+0x6c>)
 8000c6c:	4293      	cmp	r3, r2
 8000c6e:	d121      	bne.n	8000cb4 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000c70:	4b13      	ldr	r3, [pc, #76]	@ (8000cc0 <HAL_ADC_MspInit+0x70>)
 8000c72:	699b      	ldr	r3, [r3, #24]
 8000c74:	4a12      	ldr	r2, [pc, #72]	@ (8000cc0 <HAL_ADC_MspInit+0x70>)
 8000c76:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000c7a:	6193      	str	r3, [r2, #24]
 8000c7c:	4b10      	ldr	r3, [pc, #64]	@ (8000cc0 <HAL_ADC_MspInit+0x70>)
 8000c7e:	699b      	ldr	r3, [r3, #24]
 8000c80:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000c84:	60fb      	str	r3, [r7, #12]
 8000c86:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c88:	4b0d      	ldr	r3, [pc, #52]	@ (8000cc0 <HAL_ADC_MspInit+0x70>)
 8000c8a:	699b      	ldr	r3, [r3, #24]
 8000c8c:	4a0c      	ldr	r2, [pc, #48]	@ (8000cc0 <HAL_ADC_MspInit+0x70>)
 8000c8e:	f043 0308 	orr.w	r3, r3, #8
 8000c92:	6193      	str	r3, [r2, #24]
 8000c94:	4b0a      	ldr	r3, [pc, #40]	@ (8000cc0 <HAL_ADC_MspInit+0x70>)
 8000c96:	699b      	ldr	r3, [r3, #24]
 8000c98:	f003 0308 	and.w	r3, r3, #8
 8000c9c:	60bb      	str	r3, [r7, #8]
 8000c9e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = BATT_SENSE_Pin;
 8000ca0:	2302      	movs	r3, #2
 8000ca2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ca4:	2303      	movs	r3, #3
 8000ca6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(BATT_SENSE_GPIO_Port, &GPIO_InitStruct);
 8000ca8:	f107 0310 	add.w	r3, r7, #16
 8000cac:	4619      	mov	r1, r3
 8000cae:	4805      	ldr	r0, [pc, #20]	@ (8000cc4 <HAL_ADC_MspInit+0x74>)
 8000cb0:	f001 fd50 	bl	8002754 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000cb4:	bf00      	nop
 8000cb6:	3720      	adds	r7, #32
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	40012400 	.word	0x40012400
 8000cc0:	40021000 	.word	0x40021000
 8000cc4:	40010c00 	.word	0x40010c00

08000cc8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cce:	4b0c      	ldr	r3, [pc, #48]	@ (8000d00 <MX_DMA_Init+0x38>)
 8000cd0:	695b      	ldr	r3, [r3, #20]
 8000cd2:	4a0b      	ldr	r2, [pc, #44]	@ (8000d00 <MX_DMA_Init+0x38>)
 8000cd4:	f043 0301 	orr.w	r3, r3, #1
 8000cd8:	6153      	str	r3, [r2, #20]
 8000cda:	4b09      	ldr	r3, [pc, #36]	@ (8000d00 <MX_DMA_Init+0x38>)
 8000cdc:	695b      	ldr	r3, [r3, #20]
 8000cde:	f003 0301 	and.w	r3, r3, #1
 8000ce2:	607b      	str	r3, [r7, #4]
 8000ce4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	2100      	movs	r1, #0
 8000cea:	2010      	movs	r0, #16
 8000cec:	f001 fb15 	bl	800231a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000cf0:	2010      	movs	r0, #16
 8000cf2:	f001 fb2e 	bl	8002352 <HAL_NVIC_EnableIRQ>

}
 8000cf6:	bf00      	nop
 8000cf8:	3708      	adds	r7, #8
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	40021000 	.word	0x40021000

08000d04 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b088      	sub	sp, #32
 8000d08:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d0a:	f107 0310 	add.w	r3, r7, #16
 8000d0e:	2200      	movs	r2, #0
 8000d10:	601a      	str	r2, [r3, #0]
 8000d12:	605a      	str	r2, [r3, #4]
 8000d14:	609a      	str	r2, [r3, #8]
 8000d16:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d18:	4b39      	ldr	r3, [pc, #228]	@ (8000e00 <MX_GPIO_Init+0xfc>)
 8000d1a:	699b      	ldr	r3, [r3, #24]
 8000d1c:	4a38      	ldr	r2, [pc, #224]	@ (8000e00 <MX_GPIO_Init+0xfc>)
 8000d1e:	f043 0310 	orr.w	r3, r3, #16
 8000d22:	6193      	str	r3, [r2, #24]
 8000d24:	4b36      	ldr	r3, [pc, #216]	@ (8000e00 <MX_GPIO_Init+0xfc>)
 8000d26:	699b      	ldr	r3, [r3, #24]
 8000d28:	f003 0310 	and.w	r3, r3, #16
 8000d2c:	60fb      	str	r3, [r7, #12]
 8000d2e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d30:	4b33      	ldr	r3, [pc, #204]	@ (8000e00 <MX_GPIO_Init+0xfc>)
 8000d32:	699b      	ldr	r3, [r3, #24]
 8000d34:	4a32      	ldr	r2, [pc, #200]	@ (8000e00 <MX_GPIO_Init+0xfc>)
 8000d36:	f043 0320 	orr.w	r3, r3, #32
 8000d3a:	6193      	str	r3, [r2, #24]
 8000d3c:	4b30      	ldr	r3, [pc, #192]	@ (8000e00 <MX_GPIO_Init+0xfc>)
 8000d3e:	699b      	ldr	r3, [r3, #24]
 8000d40:	f003 0320 	and.w	r3, r3, #32
 8000d44:	60bb      	str	r3, [r7, #8]
 8000d46:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d48:	4b2d      	ldr	r3, [pc, #180]	@ (8000e00 <MX_GPIO_Init+0xfc>)
 8000d4a:	699b      	ldr	r3, [r3, #24]
 8000d4c:	4a2c      	ldr	r2, [pc, #176]	@ (8000e00 <MX_GPIO_Init+0xfc>)
 8000d4e:	f043 0304 	orr.w	r3, r3, #4
 8000d52:	6193      	str	r3, [r2, #24]
 8000d54:	4b2a      	ldr	r3, [pc, #168]	@ (8000e00 <MX_GPIO_Init+0xfc>)
 8000d56:	699b      	ldr	r3, [r3, #24]
 8000d58:	f003 0304 	and.w	r3, r3, #4
 8000d5c:	607b      	str	r3, [r7, #4]
 8000d5e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d60:	4b27      	ldr	r3, [pc, #156]	@ (8000e00 <MX_GPIO_Init+0xfc>)
 8000d62:	699b      	ldr	r3, [r3, #24]
 8000d64:	4a26      	ldr	r2, [pc, #152]	@ (8000e00 <MX_GPIO_Init+0xfc>)
 8000d66:	f043 0308 	orr.w	r3, r3, #8
 8000d6a:	6193      	str	r3, [r2, #24]
 8000d6c:	4b24      	ldr	r3, [pc, #144]	@ (8000e00 <MX_GPIO_Init+0xfc>)
 8000d6e:	699b      	ldr	r3, [r3, #24]
 8000d70:	f003 0308 	and.w	r3, r3, #8
 8000d74:	603b      	str	r3, [r7, #0]
 8000d76:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_RED_Pin|LED_GRN_Pin|LED_BLU_Pin, GPIO_PIN_RESET);
 8000d78:	2200      	movs	r2, #0
 8000d7a:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 8000d7e:	4821      	ldr	r0, [pc, #132]	@ (8000e04 <MX_GPIO_Init+0x100>)
 8000d80:	f001 fe6c 	bl	8002a5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LTC4151_SHDN_N_GPIO_Port, LTC4151_SHDN_N_Pin, GPIO_PIN_RESET);
 8000d84:	2200      	movs	r2, #0
 8000d86:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000d8a:	481f      	ldr	r0, [pc, #124]	@ (8000e08 <MX_GPIO_Init+0x104>)
 8000d8c:	f001 fe66 	bl	8002a5c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = LED_RED_Pin|LED_GRN_Pin|LED_BLU_Pin;
 8000d90:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8000d94:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d96:	2301      	movs	r3, #1
 8000d98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d9e:	2302      	movs	r3, #2
 8000da0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000da2:	f107 0310 	add.w	r3, r7, #16
 8000da6:	4619      	mov	r1, r3
 8000da8:	4816      	ldr	r0, [pc, #88]	@ (8000e04 <MX_GPIO_Init+0x100>)
 8000daa:	f001 fcd3 	bl	8002754 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LTC2944_ALCC_Pin;
 8000dae:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000db2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000db4:	4b15      	ldr	r3, [pc, #84]	@ (8000e0c <MX_GPIO_Init+0x108>)
 8000db6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000db8:	2301      	movs	r3, #1
 8000dba:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LTC2944_ALCC_GPIO_Port, &GPIO_InitStruct);
 8000dbc:	f107 0310 	add.w	r3, r7, #16
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	4811      	ldr	r0, [pc, #68]	@ (8000e08 <MX_GPIO_Init+0x104>)
 8000dc4:	f001 fcc6 	bl	8002754 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LTC4151_SHDN_N_Pin;
 8000dc8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000dcc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dce:	2301      	movs	r3, #1
 8000dd0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd6:	2302      	movs	r3, #2
 8000dd8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LTC4151_SHDN_N_GPIO_Port, &GPIO_InitStruct);
 8000dda:	f107 0310 	add.w	r3, r7, #16
 8000dde:	4619      	mov	r1, r3
 8000de0:	4809      	ldr	r0, [pc, #36]	@ (8000e08 <MX_GPIO_Init+0x104>)
 8000de2:	f001 fcb7 	bl	8002754 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000de6:	2200      	movs	r2, #0
 8000de8:	2100      	movs	r1, #0
 8000dea:	2017      	movs	r0, #23
 8000dec:	f001 fa95 	bl	800231a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000df0:	2017      	movs	r0, #23
 8000df2:	f001 faae 	bl	8002352 <HAL_NVIC_EnableIRQ>

}
 8000df6:	bf00      	nop
 8000df8:	3720      	adds	r7, #32
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	40021000 	.word	0x40021000
 8000e04:	40011000 	.word	0x40011000
 8000e08:	40010c00 	.word	0x40010c00
 8000e0c:	10210000 	.word	0x10210000

08000e10 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c2;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e14:	4b12      	ldr	r3, [pc, #72]	@ (8000e60 <MX_I2C1_Init+0x50>)
 8000e16:	4a13      	ldr	r2, [pc, #76]	@ (8000e64 <MX_I2C1_Init+0x54>)
 8000e18:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000e1a:	4b11      	ldr	r3, [pc, #68]	@ (8000e60 <MX_I2C1_Init+0x50>)
 8000e1c:	4a12      	ldr	r2, [pc, #72]	@ (8000e68 <MX_I2C1_Init+0x58>)
 8000e1e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000e20:	4b0f      	ldr	r3, [pc, #60]	@ (8000e60 <MX_I2C1_Init+0x50>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000e26:	4b0e      	ldr	r3, [pc, #56]	@ (8000e60 <MX_I2C1_Init+0x50>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e2c:	4b0c      	ldr	r3, [pc, #48]	@ (8000e60 <MX_I2C1_Init+0x50>)
 8000e2e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000e32:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e34:	4b0a      	ldr	r3, [pc, #40]	@ (8000e60 <MX_I2C1_Init+0x50>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000e3a:	4b09      	ldr	r3, [pc, #36]	@ (8000e60 <MX_I2C1_Init+0x50>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e40:	4b07      	ldr	r3, [pc, #28]	@ (8000e60 <MX_I2C1_Init+0x50>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e46:	4b06      	ldr	r3, [pc, #24]	@ (8000e60 <MX_I2C1_Init+0x50>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e4c:	4804      	ldr	r0, [pc, #16]	@ (8000e60 <MX_I2C1_Init+0x50>)
 8000e4e:	f001 fe59 	bl	8002b04 <HAL_I2C_Init>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d001      	beq.n	8000e5c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000e58:	f000 fa46 	bl	80012e8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e5c:	bf00      	nop
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	20000238 	.word	0x20000238
 8000e64:	40005400 	.word	0x40005400
 8000e68:	000186a0 	.word	0x000186a0

08000e6c <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000e70:	4b12      	ldr	r3, [pc, #72]	@ (8000ebc <MX_I2C2_Init+0x50>)
 8000e72:	4a13      	ldr	r2, [pc, #76]	@ (8000ec0 <MX_I2C2_Init+0x54>)
 8000e74:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8000e76:	4b11      	ldr	r3, [pc, #68]	@ (8000ebc <MX_I2C2_Init+0x50>)
 8000e78:	4a12      	ldr	r2, [pc, #72]	@ (8000ec4 <MX_I2C2_Init+0x58>)
 8000e7a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000e7c:	4b0f      	ldr	r3, [pc, #60]	@ (8000ebc <MX_I2C2_Init+0x50>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000e82:	4b0e      	ldr	r3, [pc, #56]	@ (8000ebc <MX_I2C2_Init+0x50>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e88:	4b0c      	ldr	r3, [pc, #48]	@ (8000ebc <MX_I2C2_Init+0x50>)
 8000e8a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000e8e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e90:	4b0a      	ldr	r3, [pc, #40]	@ (8000ebc <MX_I2C2_Init+0x50>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000e96:	4b09      	ldr	r3, [pc, #36]	@ (8000ebc <MX_I2C2_Init+0x50>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e9c:	4b07      	ldr	r3, [pc, #28]	@ (8000ebc <MX_I2C2_Init+0x50>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ea2:	4b06      	ldr	r3, [pc, #24]	@ (8000ebc <MX_I2C2_Init+0x50>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000ea8:	4804      	ldr	r0, [pc, #16]	@ (8000ebc <MX_I2C2_Init+0x50>)
 8000eaa:	f001 fe2b 	bl	8002b04 <HAL_I2C_Init>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d001      	beq.n	8000eb8 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000eb4:	f000 fa18 	bl	80012e8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000eb8:	bf00      	nop
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	2000028c 	.word	0x2000028c
 8000ec0:	40005800 	.word	0x40005800
 8000ec4:	00061a80 	.word	0x00061a80

08000ec8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b08a      	sub	sp, #40	@ 0x28
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed0:	f107 0318 	add.w	r3, r7, #24
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	601a      	str	r2, [r3, #0]
 8000ed8:	605a      	str	r2, [r3, #4]
 8000eda:	609a      	str	r2, [r3, #8]
 8000edc:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	4a42      	ldr	r2, [pc, #264]	@ (8000fec <HAL_I2C_MspInit+0x124>)
 8000ee4:	4293      	cmp	r3, r2
 8000ee6:	d152      	bne.n	8000f8e <HAL_I2C_MspInit+0xc6>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ee8:	4b41      	ldr	r3, [pc, #260]	@ (8000ff0 <HAL_I2C_MspInit+0x128>)
 8000eea:	699b      	ldr	r3, [r3, #24]
 8000eec:	4a40      	ldr	r2, [pc, #256]	@ (8000ff0 <HAL_I2C_MspInit+0x128>)
 8000eee:	f043 0308 	orr.w	r3, r3, #8
 8000ef2:	6193      	str	r3, [r2, #24]
 8000ef4:	4b3e      	ldr	r3, [pc, #248]	@ (8000ff0 <HAL_I2C_MspInit+0x128>)
 8000ef6:	699b      	ldr	r3, [r3, #24]
 8000ef8:	f003 0308 	and.w	r3, r3, #8
 8000efc:	617b      	str	r3, [r7, #20]
 8000efe:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000f00:	23c0      	movs	r3, #192	@ 0xc0
 8000f02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f04:	2312      	movs	r3, #18
 8000f06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f08:	2303      	movs	r3, #3
 8000f0a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f0c:	f107 0318 	add.w	r3, r7, #24
 8000f10:	4619      	mov	r1, r3
 8000f12:	4838      	ldr	r0, [pc, #224]	@ (8000ff4 <HAL_I2C_MspInit+0x12c>)
 8000f14:	f001 fc1e 	bl	8002754 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f18:	4b35      	ldr	r3, [pc, #212]	@ (8000ff0 <HAL_I2C_MspInit+0x128>)
 8000f1a:	69db      	ldr	r3, [r3, #28]
 8000f1c:	4a34      	ldr	r2, [pc, #208]	@ (8000ff0 <HAL_I2C_MspInit+0x128>)
 8000f1e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000f22:	61d3      	str	r3, [r2, #28]
 8000f24:	4b32      	ldr	r3, [pc, #200]	@ (8000ff0 <HAL_I2C_MspInit+0x128>)
 8000f26:	69db      	ldr	r3, [r3, #28]
 8000f28:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f2c:	613b      	str	r3, [r7, #16]
 8000f2e:	693b      	ldr	r3, [r7, #16]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 8000f30:	4b31      	ldr	r3, [pc, #196]	@ (8000ff8 <HAL_I2C_MspInit+0x130>)
 8000f32:	4a32      	ldr	r2, [pc, #200]	@ (8000ffc <HAL_I2C_MspInit+0x134>)
 8000f34:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000f36:	4b30      	ldr	r3, [pc, #192]	@ (8000ff8 <HAL_I2C_MspInit+0x130>)
 8000f38:	2210      	movs	r2, #16
 8000f3a:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f3c:	4b2e      	ldr	r3, [pc, #184]	@ (8000ff8 <HAL_I2C_MspInit+0x130>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000f42:	4b2d      	ldr	r3, [pc, #180]	@ (8000ff8 <HAL_I2C_MspInit+0x130>)
 8000f44:	2280      	movs	r2, #128	@ 0x80
 8000f46:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f48:	4b2b      	ldr	r3, [pc, #172]	@ (8000ff8 <HAL_I2C_MspInit+0x130>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f4e:	4b2a      	ldr	r3, [pc, #168]	@ (8000ff8 <HAL_I2C_MspInit+0x130>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8000f54:	4b28      	ldr	r3, [pc, #160]	@ (8000ff8 <HAL_I2C_MspInit+0x130>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000f5a:	4b27      	ldr	r3, [pc, #156]	@ (8000ff8 <HAL_I2C_MspInit+0x130>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8000f60:	4825      	ldr	r0, [pc, #148]	@ (8000ff8 <HAL_I2C_MspInit+0x130>)
 8000f62:	f001 fa11 	bl	8002388 <HAL_DMA_Init>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d001      	beq.n	8000f70 <HAL_I2C_MspInit+0xa8>
    {
      Error_Handler();
 8000f6c:	f000 f9bc 	bl	80012e8 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	4a21      	ldr	r2, [pc, #132]	@ (8000ff8 <HAL_I2C_MspInit+0x130>)
 8000f74:	635a      	str	r2, [r3, #52]	@ 0x34
 8000f76:	4a20      	ldr	r2, [pc, #128]	@ (8000ff8 <HAL_I2C_MspInit+0x130>)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	6253      	str	r3, [r2, #36]	@ 0x24

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	2100      	movs	r1, #0
 8000f80:	201f      	movs	r0, #31
 8000f82:	f001 f9ca 	bl	800231a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000f86:	201f      	movs	r0, #31
 8000f88:	f001 f9e3 	bl	8002352 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000f8c:	e029      	b.n	8000fe2 <HAL_I2C_MspInit+0x11a>
  else if(i2cHandle->Instance==I2C2)
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	4a1b      	ldr	r2, [pc, #108]	@ (8001000 <HAL_I2C_MspInit+0x138>)
 8000f94:	4293      	cmp	r3, r2
 8000f96:	d124      	bne.n	8000fe2 <HAL_I2C_MspInit+0x11a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f98:	4b15      	ldr	r3, [pc, #84]	@ (8000ff0 <HAL_I2C_MspInit+0x128>)
 8000f9a:	699b      	ldr	r3, [r3, #24]
 8000f9c:	4a14      	ldr	r2, [pc, #80]	@ (8000ff0 <HAL_I2C_MspInit+0x128>)
 8000f9e:	f043 0308 	orr.w	r3, r3, #8
 8000fa2:	6193      	str	r3, [r2, #24]
 8000fa4:	4b12      	ldr	r3, [pc, #72]	@ (8000ff0 <HAL_I2C_MspInit+0x128>)
 8000fa6:	699b      	ldr	r3, [r3, #24]
 8000fa8:	f003 0308 	and.w	r3, r3, #8
 8000fac:	60fb      	str	r3, [r7, #12]
 8000fae:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000fb0:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000fb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fb6:	2312      	movs	r3, #18
 8000fb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fba:	2303      	movs	r3, #3
 8000fbc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fbe:	f107 0318 	add.w	r3, r7, #24
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	480b      	ldr	r0, [pc, #44]	@ (8000ff4 <HAL_I2C_MspInit+0x12c>)
 8000fc6:	f001 fbc5 	bl	8002754 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000fca:	4b09      	ldr	r3, [pc, #36]	@ (8000ff0 <HAL_I2C_MspInit+0x128>)
 8000fcc:	69db      	ldr	r3, [r3, #28]
 8000fce:	4a08      	ldr	r2, [pc, #32]	@ (8000ff0 <HAL_I2C_MspInit+0x128>)
 8000fd0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000fd4:	61d3      	str	r3, [r2, #28]
 8000fd6:	4b06      	ldr	r3, [pc, #24]	@ (8000ff0 <HAL_I2C_MspInit+0x128>)
 8000fd8:	69db      	ldr	r3, [r3, #28]
 8000fda:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000fde:	60bb      	str	r3, [r7, #8]
 8000fe0:	68bb      	ldr	r3, [r7, #8]
}
 8000fe2:	bf00      	nop
 8000fe4:	3728      	adds	r7, #40	@ 0x28
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	40005400 	.word	0x40005400
 8000ff0:	40021000 	.word	0x40021000
 8000ff4:	40010c00 	.word	0x40010c00
 8000ff8:	200002e0 	.word	0x200002e0
 8000ffc:	4002006c 	.word	0x4002006c
 8001000:	40005800 	.word	0x40005800

08001004 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 800100c:	1d39      	adds	r1, r7, #4
 800100e:	f04f 33ff 	mov.w	r3, #4294967295
 8001012:	2201      	movs	r2, #1
 8001014:	4803      	ldr	r0, [pc, #12]	@ (8001024 <__io_putchar+0x20>)
 8001016:	f005 fa21 	bl	800645c <HAL_UART_Transmit>
  return ch;
 800101a:	687b      	ldr	r3, [r7, #4]
}
 800101c:	4618      	mov	r0, r3
 800101e:	3708      	adds	r7, #8
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	20000350 	.word	0x20000350

08001028 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800102c:	f000 fb3e 	bl	80016ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001030:	f000 f8e2 	bl	80011f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001034:	f7ff fe66 	bl	8000d04 <MX_GPIO_Init>
  MX_DMA_Init();
 8001038:	f7ff fe46 	bl	8000cc8 <MX_DMA_Init>
  MX_I2C2_Init();
 800103c:	f7ff ff16 	bl	8000e6c <MX_I2C2_Init>
  MX_I2C1_Init();
 8001040:	f7ff fee6 	bl	8000e10 <MX_I2C1_Init>
  MX_ADC1_Init();
 8001044:	f7ff fdc6 	bl	8000bd4 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8001048:	f000 fa96 	bl	8001578 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  ssd1306_Init();
 800104c:	f005 fe36 	bl	8006cbc <ssd1306_Init>
  HAL_ADCEx_Calibration_Start(&hadc1);
 8001050:	4852      	ldr	r0, [pc, #328]	@ (800119c <main+0x174>)
 8001052:	f000 ffdd 	bl	8002010 <HAL_ADCEx_Calibration_Start>
  HAL_Delay(100);
 8001056:	2064      	movs	r0, #100	@ 0x64
 8001058:	f000 fb8a 	bl	8001770 <HAL_Delay>
  HAL_ADC_Start(&hadc1);
 800105c:	484f      	ldr	r0, [pc, #316]	@ (800119c <main+0x174>)
 800105e:	f000 fc83 	bl	8001968 <HAL_ADC_Start>

  printf("LTC2959 Begin\n\r");
 8001062:	484f      	ldr	r0, [pc, #316]	@ (80011a0 <main+0x178>)
 8001064:	f006 ff56 	bl	8007f14 <iprintf>
  while(HAL_I2C_IsDeviceReady(&LTC2959_I2C_PORT, LTC2959_I2C_ADDR, 100, 1000) != HAL_OK);	// wait for it to come alive
 8001068:	bf00      	nop
 800106a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800106e:	2264      	movs	r2, #100	@ 0x64
 8001070:	21c6      	movs	r1, #198	@ 0xc6
 8001072:	484c      	ldr	r0, [pc, #304]	@ (80011a4 <main+0x17c>)
 8001074:	f002 fb0a 	bl	800368c <HAL_I2C_IsDeviceReady>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d1f5      	bne.n	800106a <main+0x42>
  LTC2959_Init(&ltc2959);
 800107e:	484a      	ldr	r0, [pc, #296]	@ (80011a8 <main+0x180>)
 8001080:	f005 fd07 	bl	8006a92 <LTC2959_Init>
  HAL_Delay(1000);
 8001084:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001088:	f000 fb72 	bl	8001770 <HAL_Delay>

  AD5693_Reset();
 800108c:	f005 fbba 	bl	8006804 <AD5693_Reset>
  HAL_Delay(10);
 8001090:	200a      	movs	r0, #10
 8001092:	f000 fb6d 	bl	8001770 <HAL_Delay>
  AD5693_Init(ad5693);
 8001096:	4b45      	ldr	r3, [pc, #276]	@ (80011ac <main+0x184>)
 8001098:	6818      	ldr	r0, [r3, #0]
 800109a:	f005 fbd3 	bl	8006844 <AD5693_Init>
  HAL_Delay(10);
 800109e:	200a      	movs	r0, #10
 80010a0:	f000 fb66 	bl	8001770 <HAL_Delay>




  myOLED_char(1, 12, "Volt = ");
 80010a4:	4a42      	ldr	r2, [pc, #264]	@ (80011b0 <main+0x188>)
 80010a6:	210c      	movs	r1, #12
 80010a8:	2001      	movs	r0, #1
 80010aa:	f000 f901 	bl	80012b0 <myOLED_char>
  myOLED_char(1, 24, "Curr = ");
 80010ae:	4a41      	ldr	r2, [pc, #260]	@ (80011b4 <main+0x18c>)
 80010b0:	2118      	movs	r1, #24
 80010b2:	2001      	movs	r0, #1
 80010b4:	f000 f8fc 	bl	80012b0 <myOLED_char>
  myOLED_char(1, 36, "Chg  = ");
 80010b8:	4a3f      	ldr	r2, [pc, #252]	@ (80011b8 <main+0x190>)
 80010ba:	2124      	movs	r1, #36	@ 0x24
 80010bc:	2001      	movs	r0, #1
 80010be:	f000 f8f7 	bl	80012b0 <myOLED_char>
  myOLED_char(1, 48, "Temp = ");
 80010c2:	4a3e      	ldr	r2, [pc, #248]	@ (80011bc <main+0x194>)
 80010c4:	2130      	movs	r1, #48	@ 0x30
 80010c6:	2001      	movs	r0, #1
 80010c8:	f000 f8f2 	bl	80012b0 <myOLED_char>
  ssd1306_UpdateScreen();
 80010cc:	f005 fe82 	bl	8006dd4 <ssd1306_UpdateScreen>
  HAL_Delay(100);
 80010d0:	2064      	movs	r0, #100	@ 0x64
 80010d2:	f000 fb4d 	bl	8001770 <HAL_Delay>
//  AD5693_Set_Voltage(2);		// Test DAC
//  AD5693_Set_Voltage_Raw(1000);

  while (1)
  {
	  tick = HAL_GetTick();
 80010d6:	f000 fb41 	bl	800175c <HAL_GetTick>
 80010da:	4603      	mov	r3, r0
 80010dc:	4a38      	ldr	r2, [pc, #224]	@ (80011c0 <main+0x198>)
 80010de:	6013      	str	r3, [r2, #0]
//	  myOLED_int(1, 2, tick);
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_ADC_PollForConversion(&hadc1, 10);
 80010e0:	210a      	movs	r1, #10
 80010e2:	482e      	ldr	r0, [pc, #184]	@ (800119c <main+0x174>)
 80010e4:	f000 fcee 	bl	8001ac4 <HAL_ADC_PollForConversion>
  	  if(HAL_ADC_GetValue(&hadc1) >= 200){
 80010e8:	482c      	ldr	r0, [pc, #176]	@ (800119c <main+0x174>)
 80010ea:	f000 fdf1 	bl	8001cd0 <HAL_ADC_GetValue>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2bc7      	cmp	r3, #199	@ 0xc7
 80010f2:	d903      	bls.n	80010fc <main+0xd4>
  		  battery_detect = true;
 80010f4:	4b33      	ldr	r3, [pc, #204]	@ (80011c4 <main+0x19c>)
 80010f6:	2201      	movs	r2, #1
 80010f8:	701a      	strb	r2, [r3, #0]
 80010fa:	e008      	b.n	800110e <main+0xe6>
  	  }else if(HAL_ADC_GetValue(&hadc1) < 200){
 80010fc:	4827      	ldr	r0, [pc, #156]	@ (800119c <main+0x174>)
 80010fe:	f000 fde7 	bl	8001cd0 <HAL_ADC_GetValue>
 8001102:	4603      	mov	r3, r0
 8001104:	2bc7      	cmp	r3, #199	@ 0xc7
 8001106:	d802      	bhi.n	800110e <main+0xe6>
  		  battery_detect = false;
 8001108:	4b2e      	ldr	r3, [pc, #184]	@ (80011c4 <main+0x19c>)
 800110a:	2200      	movs	r2, #0
 800110c:	701a      	strb	r2, [r3, #0]
//      }

//	  current = LTC2959_Get_Current();
//  	  filter_current = Get_Current_Filtered(current);

      if(tick - prev_control_delay >= control_delay){
 800110e:	4b2c      	ldr	r3, [pc, #176]	@ (80011c0 <main+0x198>)
 8001110:	681a      	ldr	r2, [r3, #0]
 8001112:	4b2d      	ldr	r3, [pc, #180]	@ (80011c8 <main+0x1a0>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	1ad2      	subs	r2, r2, r3
 8001118:	4b2c      	ldr	r3, [pc, #176]	@ (80011cc <main+0x1a4>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	429a      	cmp	r2, r3
 800111e:	d317      	bcc.n	8001150 <main+0x128>
		  voltage = LTC2959_Get_Voltage();
 8001120:	f005 fd2c 	bl	8006b7c <LTC2959_Get_Voltage>
 8001124:	4603      	mov	r3, r0
 8001126:	4a2a      	ldr	r2, [pc, #168]	@ (80011d0 <main+0x1a8>)
 8001128:	6013      	str	r3, [r2, #0]
		  current = LTC2959_Get_Current();
 800112a:	f005 fd51 	bl	8006bd0 <LTC2959_Get_Current>
 800112e:	4603      	mov	r3, r0
 8001130:	4a28      	ldr	r2, [pc, #160]	@ (80011d4 <main+0x1ac>)
 8001132:	6013      	str	r3, [r2, #0]
		  charge = LTC2959_Get_Acc_Charge();
 8001134:	f005 fcd8 	bl	8006ae8 <LTC2959_Get_Acc_Charge>
 8001138:	4603      	mov	r3, r0
 800113a:	4a27      	ldr	r2, [pc, #156]	@ (80011d8 <main+0x1b0>)
 800113c:	6013      	str	r3, [r2, #0]
//		  control_volt = Control_DAC_Output(500, current, battery_detect);
		  AD5693_Set_Voltage_Raw(control_volt);
 800113e:	4b27      	ldr	r3, [pc, #156]	@ (80011dc <main+0x1b4>)
 8001140:	881b      	ldrh	r3, [r3, #0]
 8001142:	4618      	mov	r0, r3
 8001144:	f005 fbbc 	bl	80068c0 <AD5693_Set_Voltage_Raw>
		  prev_control_delay = tick;
 8001148:	4b1d      	ldr	r3, [pc, #116]	@ (80011c0 <main+0x198>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a1e      	ldr	r2, [pc, #120]	@ (80011c8 <main+0x1a0>)
 800114e:	6013      	str	r3, [r2, #0]
	  }



	  if(tick - prev_print_delay >= print_delay){
 8001150:	4b1b      	ldr	r3, [pc, #108]	@ (80011c0 <main+0x198>)
 8001152:	681a      	ldr	r2, [r3, #0]
 8001154:	4b22      	ldr	r3, [pc, #136]	@ (80011e0 <main+0x1b8>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	1ad2      	subs	r2, r2, r3
 800115a:	4b22      	ldr	r3, [pc, #136]	@ (80011e4 <main+0x1bc>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	429a      	cmp	r2, r3
 8001160:	d309      	bcc.n	8001176 <main+0x14e>
//		  printf("LTC2959_Voltage = %.4f\n\r", voltage);
//		  printf("LTC2959_current = %ld, Filter_current = %ld\n\r\v", current, filter_current);
//		  printf("%ld, %ld, %ld \n\r", voltage, current, filter_current);
//		  printf("LTC2959_charge = %.4f\n\r\v", charge);
		  printf("LTC2959_current = %ld\n\r", current);
 8001162:	4b1c      	ldr	r3, [pc, #112]	@ (80011d4 <main+0x1ac>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4619      	mov	r1, r3
 8001168:	481f      	ldr	r0, [pc, #124]	@ (80011e8 <main+0x1c0>)
 800116a:	f006 fed3 	bl	8007f14 <iprintf>
		  prev_print_delay = tick;
 800116e:	4b14      	ldr	r3, [pc, #80]	@ (80011c0 <main+0x198>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	4a1b      	ldr	r2, [pc, #108]	@ (80011e0 <main+0x1b8>)
 8001174:	6013      	str	r3, [r2, #0]
//		  break;
//
//	  default:
//	  }

	  if(tick - prev_tick >= blink_delay){
 8001176:	4b12      	ldr	r3, [pc, #72]	@ (80011c0 <main+0x198>)
 8001178:	681a      	ldr	r2, [r3, #0]
 800117a:	4b1c      	ldr	r3, [pc, #112]	@ (80011ec <main+0x1c4>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	1ad3      	subs	r3, r2, r3
 8001180:	4a1b      	ldr	r2, [pc, #108]	@ (80011f0 <main+0x1c8>)
 8001182:	8812      	ldrh	r2, [r2, #0]
 8001184:	4293      	cmp	r3, r2
 8001186:	d3a6      	bcc.n	80010d6 <main+0xae>
		  prev_tick = tick;
 8001188:	4b0d      	ldr	r3, [pc, #52]	@ (80011c0 <main+0x198>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a17      	ldr	r2, [pc, #92]	@ (80011ec <main+0x1c4>)
 800118e:	6013      	str	r3, [r2, #0]
		  HAL_GPIO_TogglePin(LED_BLU_GPIO_Port, LED_BLU_Pin);
 8001190:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001194:	4817      	ldr	r0, [pc, #92]	@ (80011f4 <main+0x1cc>)
 8001196:	f001 fc79 	bl	8002a8c <HAL_GPIO_TogglePin>
	  tick = HAL_GetTick();
 800119a:	e79c      	b.n	80010d6 <main+0xae>
 800119c:	20000208 	.word	0x20000208
 80011a0:	0800b7b0 	.word	0x0800b7b0
 80011a4:	2000028c 	.word	0x2000028c
 80011a8:	2000000c 	.word	0x2000000c
 80011ac:	20000348 	.word	0x20000348
 80011b0:	0800b7c0 	.word	0x0800b7c0
 80011b4:	0800b7c8 	.word	0x0800b7c8
 80011b8:	0800b7d0 	.word	0x0800b7d0
 80011bc:	0800b7d8 	.word	0x0800b7d8
 80011c0:	20000324 	.word	0x20000324
 80011c4:	20000344 	.word	0x20000344
 80011c8:	20000340 	.word	0x20000340
 80011cc:	20000008 	.word	0x20000008
 80011d0:	20000330 	.word	0x20000330
 80011d4:	2000032c 	.word	0x2000032c
 80011d8:	20000334 	.word	0x20000334
 80011dc:	20000338 	.word	0x20000338
 80011e0:	2000033c 	.word	0x2000033c
 80011e4:	20000004 	.word	0x20000004
 80011e8:	0800b7e0 	.word	0x0800b7e0
 80011ec:	20000328 	.word	0x20000328
 80011f0:	20000000 	.word	0x20000000
 80011f4:	40011000 	.word	0x40011000

080011f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b094      	sub	sp, #80	@ 0x50
 80011fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011fe:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001202:	2228      	movs	r2, #40	@ 0x28
 8001204:	2100      	movs	r1, #0
 8001206:	4618      	mov	r0, r3
 8001208:	f006 ff13 	bl	8008032 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800120c:	f107 0314 	add.w	r3, r7, #20
 8001210:	2200      	movs	r2, #0
 8001212:	601a      	str	r2, [r3, #0]
 8001214:	605a      	str	r2, [r3, #4]
 8001216:	609a      	str	r2, [r3, #8]
 8001218:	60da      	str	r2, [r3, #12]
 800121a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800121c:	1d3b      	adds	r3, r7, #4
 800121e:	2200      	movs	r2, #0
 8001220:	601a      	str	r2, [r3, #0]
 8001222:	605a      	str	r2, [r3, #4]
 8001224:	609a      	str	r2, [r3, #8]
 8001226:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001228:	2301      	movs	r3, #1
 800122a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800122c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001230:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001232:	2300      	movs	r3, #0
 8001234:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001236:	2301      	movs	r3, #1
 8001238:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800123a:	2302      	movs	r3, #2
 800123c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800123e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001242:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001244:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001248:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800124a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800124e:	4618      	mov	r0, r3
 8001250:	f004 fb38 	bl	80058c4 <HAL_RCC_OscConfig>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d001      	beq.n	800125e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800125a:	f000 f845 	bl	80012e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800125e:	230f      	movs	r3, #15
 8001260:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001262:	2302      	movs	r3, #2
 8001264:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001266:	2300      	movs	r3, #0
 8001268:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800126a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800126e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001270:	2300      	movs	r3, #0
 8001272:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001274:	f107 0314 	add.w	r3, r7, #20
 8001278:	2102      	movs	r1, #2
 800127a:	4618      	mov	r0, r3
 800127c:	f004 fda4 	bl	8005dc8 <HAL_RCC_ClockConfig>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001286:	f000 f82f 	bl	80012e8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800128a:	2302      	movs	r3, #2
 800128c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800128e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001292:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001294:	1d3b      	adds	r3, r7, #4
 8001296:	4618      	mov	r0, r3
 8001298:	f004 ff24 	bl	80060e4 <HAL_RCCEx_PeriphCLKConfig>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80012a2:	f000 f821 	bl	80012e8 <Error_Handler>
  }
}
 80012a6:	bf00      	nop
 80012a8:	3750      	adds	r7, #80	@ 0x50
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
	...

080012b0 <myOLED_char>:

/* USER CODE BEGIN 4 */

void myOLED_char(uint16_t cursorX, uint16_t cursorY, char* data){
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	4603      	mov	r3, r0
 80012b8:	603a      	str	r2, [r7, #0]
 80012ba:	80fb      	strh	r3, [r7, #6]
 80012bc:	460b      	mov	r3, r1
 80012be:	80bb      	strh	r3, [r7, #4]

	ssd1306_SetCursor(cursorX, cursorY);
 80012c0:	88fb      	ldrh	r3, [r7, #6]
 80012c2:	b2db      	uxtb	r3, r3
 80012c4:	88ba      	ldrh	r2, [r7, #4]
 80012c6:	b2d2      	uxtb	r2, r2
 80012c8:	4611      	mov	r1, r2
 80012ca:	4618      	mov	r0, r3
 80012cc:	f005 feaa 	bl	8007024 <ssd1306_SetCursor>
	ssd1306_WriteString(data, Font_7x10, White);
 80012d0:	4a04      	ldr	r2, [pc, #16]	@ (80012e4 <myOLED_char+0x34>)
 80012d2:	2301      	movs	r3, #1
 80012d4:	ca06      	ldmia	r2, {r1, r2}
 80012d6:	6838      	ldr	r0, [r7, #0]
 80012d8:	f005 fe7e 	bl	8006fd8 <ssd1306_WriteString>
}
 80012dc:	bf00      	nop
 80012de:	3708      	adds	r7, #8
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	2000001c 	.word	0x2000001c

080012e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012ec:	b672      	cpsid	i
}
 80012ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012f0:	bf00      	nop
 80012f2:	e7fd      	b.n	80012f0 <Error_Handler+0x8>

080012f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b085      	sub	sp, #20
 80012f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80012fa:	4b15      	ldr	r3, [pc, #84]	@ (8001350 <HAL_MspInit+0x5c>)
 80012fc:	699b      	ldr	r3, [r3, #24]
 80012fe:	4a14      	ldr	r2, [pc, #80]	@ (8001350 <HAL_MspInit+0x5c>)
 8001300:	f043 0301 	orr.w	r3, r3, #1
 8001304:	6193      	str	r3, [r2, #24]
 8001306:	4b12      	ldr	r3, [pc, #72]	@ (8001350 <HAL_MspInit+0x5c>)
 8001308:	699b      	ldr	r3, [r3, #24]
 800130a:	f003 0301 	and.w	r3, r3, #1
 800130e:	60bb      	str	r3, [r7, #8]
 8001310:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001312:	4b0f      	ldr	r3, [pc, #60]	@ (8001350 <HAL_MspInit+0x5c>)
 8001314:	69db      	ldr	r3, [r3, #28]
 8001316:	4a0e      	ldr	r2, [pc, #56]	@ (8001350 <HAL_MspInit+0x5c>)
 8001318:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800131c:	61d3      	str	r3, [r2, #28]
 800131e:	4b0c      	ldr	r3, [pc, #48]	@ (8001350 <HAL_MspInit+0x5c>)
 8001320:	69db      	ldr	r3, [r3, #28]
 8001322:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001326:	607b      	str	r3, [r7, #4]
 8001328:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800132a:	4b0a      	ldr	r3, [pc, #40]	@ (8001354 <HAL_MspInit+0x60>)
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	60fb      	str	r3, [r7, #12]
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001336:	60fb      	str	r3, [r7, #12]
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800133e:	60fb      	str	r3, [r7, #12]
 8001340:	4a04      	ldr	r2, [pc, #16]	@ (8001354 <HAL_MspInit+0x60>)
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001346:	bf00      	nop
 8001348:	3714      	adds	r7, #20
 800134a:	46bd      	mov	sp, r7
 800134c:	bc80      	pop	{r7}
 800134e:	4770      	bx	lr
 8001350:	40021000 	.word	0x40021000
 8001354:	40010000 	.word	0x40010000

08001358 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800135c:	bf00      	nop
 800135e:	e7fd      	b.n	800135c <NMI_Handler+0x4>

08001360 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001364:	bf00      	nop
 8001366:	e7fd      	b.n	8001364 <HardFault_Handler+0x4>

08001368 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800136c:	bf00      	nop
 800136e:	e7fd      	b.n	800136c <MemManage_Handler+0x4>

08001370 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001374:	bf00      	nop
 8001376:	e7fd      	b.n	8001374 <BusFault_Handler+0x4>

08001378 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800137c:	bf00      	nop
 800137e:	e7fd      	b.n	800137c <UsageFault_Handler+0x4>

08001380 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001384:	bf00      	nop
 8001386:	46bd      	mov	sp, r7
 8001388:	bc80      	pop	{r7}
 800138a:	4770      	bx	lr

0800138c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001390:	bf00      	nop
 8001392:	46bd      	mov	sp, r7
 8001394:	bc80      	pop	{r7}
 8001396:	4770      	bx	lr

08001398 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800139c:	bf00      	nop
 800139e:	46bd      	mov	sp, r7
 80013a0:	bc80      	pop	{r7}
 80013a2:	4770      	bx	lr

080013a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013a8:	f000 f9c6 	bl	8001738 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013ac:	bf00      	nop
 80013ae:	bd80      	pop	{r7, pc}

080013b0 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 80013b4:	4802      	ldr	r0, [pc, #8]	@ (80013c0 <DMA1_Channel6_IRQHandler+0x10>)
 80013b6:	f001 f8b9 	bl	800252c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80013ba:	bf00      	nop
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	200002e0 	.word	0x200002e0

080013c4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LTC2944_ALCC_Pin);
 80013c8:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80013cc:	f001 fb78 	bl	8002ac0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80013d0:	bf00      	nop
 80013d2:	bd80      	pop	{r7, pc}

080013d4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80013d8:	4802      	ldr	r0, [pc, #8]	@ (80013e4 <I2C1_EV_IRQHandler+0x10>)
 80013da:	f002 fa85 	bl	80038e8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80013de:	bf00      	nop
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	20000238 	.word	0x20000238

080013e8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0
  return 1;
 80013ec:	2301      	movs	r3, #1
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bc80      	pop	{r7}
 80013f4:	4770      	bx	lr

080013f6 <_kill>:

int _kill(int pid, int sig)
{
 80013f6:	b580      	push	{r7, lr}
 80013f8:	b082      	sub	sp, #8
 80013fa:	af00      	add	r7, sp, #0
 80013fc:	6078      	str	r0, [r7, #4]
 80013fe:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001400:	f006 fe6a 	bl	80080d8 <__errno>
 8001404:	4603      	mov	r3, r0
 8001406:	2216      	movs	r2, #22
 8001408:	601a      	str	r2, [r3, #0]
  return -1;
 800140a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800140e:	4618      	mov	r0, r3
 8001410:	3708      	adds	r7, #8
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}

08001416 <_exit>:

void _exit (int status)
{
 8001416:	b580      	push	{r7, lr}
 8001418:	b082      	sub	sp, #8
 800141a:	af00      	add	r7, sp, #0
 800141c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800141e:	f04f 31ff 	mov.w	r1, #4294967295
 8001422:	6878      	ldr	r0, [r7, #4]
 8001424:	f7ff ffe7 	bl	80013f6 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001428:	bf00      	nop
 800142a:	e7fd      	b.n	8001428 <_exit+0x12>

0800142c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b086      	sub	sp, #24
 8001430:	af00      	add	r7, sp, #0
 8001432:	60f8      	str	r0, [r7, #12]
 8001434:	60b9      	str	r1, [r7, #8]
 8001436:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001438:	2300      	movs	r3, #0
 800143a:	617b      	str	r3, [r7, #20]
 800143c:	e00a      	b.n	8001454 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800143e:	f3af 8000 	nop.w
 8001442:	4601      	mov	r1, r0
 8001444:	68bb      	ldr	r3, [r7, #8]
 8001446:	1c5a      	adds	r2, r3, #1
 8001448:	60ba      	str	r2, [r7, #8]
 800144a:	b2ca      	uxtb	r2, r1
 800144c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800144e:	697b      	ldr	r3, [r7, #20]
 8001450:	3301      	adds	r3, #1
 8001452:	617b      	str	r3, [r7, #20]
 8001454:	697a      	ldr	r2, [r7, #20]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	429a      	cmp	r2, r3
 800145a:	dbf0      	blt.n	800143e <_read+0x12>
  }

  return len;
 800145c:	687b      	ldr	r3, [r7, #4]
}
 800145e:	4618      	mov	r0, r3
 8001460:	3718      	adds	r7, #24
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}

08001466 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001466:	b580      	push	{r7, lr}
 8001468:	b086      	sub	sp, #24
 800146a:	af00      	add	r7, sp, #0
 800146c:	60f8      	str	r0, [r7, #12]
 800146e:	60b9      	str	r1, [r7, #8]
 8001470:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001472:	2300      	movs	r3, #0
 8001474:	617b      	str	r3, [r7, #20]
 8001476:	e009      	b.n	800148c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001478:	68bb      	ldr	r3, [r7, #8]
 800147a:	1c5a      	adds	r2, r3, #1
 800147c:	60ba      	str	r2, [r7, #8]
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	4618      	mov	r0, r3
 8001482:	f7ff fdbf 	bl	8001004 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001486:	697b      	ldr	r3, [r7, #20]
 8001488:	3301      	adds	r3, #1
 800148a:	617b      	str	r3, [r7, #20]
 800148c:	697a      	ldr	r2, [r7, #20]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	429a      	cmp	r2, r3
 8001492:	dbf1      	blt.n	8001478 <_write+0x12>
  }
  return len;
 8001494:	687b      	ldr	r3, [r7, #4]
}
 8001496:	4618      	mov	r0, r3
 8001498:	3718      	adds	r7, #24
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}

0800149e <_close>:

int _close(int file)
{
 800149e:	b480      	push	{r7}
 80014a0:	b083      	sub	sp, #12
 80014a2:	af00      	add	r7, sp, #0
 80014a4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80014a6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	370c      	adds	r7, #12
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bc80      	pop	{r7}
 80014b2:	4770      	bx	lr

080014b4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b083      	sub	sp, #12
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
 80014bc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80014c4:	605a      	str	r2, [r3, #4]
  return 0;
 80014c6:	2300      	movs	r3, #0
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	370c      	adds	r7, #12
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bc80      	pop	{r7}
 80014d0:	4770      	bx	lr

080014d2 <_isatty>:

int _isatty(int file)
{
 80014d2:	b480      	push	{r7}
 80014d4:	b083      	sub	sp, #12
 80014d6:	af00      	add	r7, sp, #0
 80014d8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80014da:	2301      	movs	r3, #1
}
 80014dc:	4618      	mov	r0, r3
 80014de:	370c      	adds	r7, #12
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bc80      	pop	{r7}
 80014e4:	4770      	bx	lr

080014e6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80014e6:	b480      	push	{r7}
 80014e8:	b085      	sub	sp, #20
 80014ea:	af00      	add	r7, sp, #0
 80014ec:	60f8      	str	r0, [r7, #12]
 80014ee:	60b9      	str	r1, [r7, #8]
 80014f0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80014f2:	2300      	movs	r3, #0
}
 80014f4:	4618      	mov	r0, r3
 80014f6:	3714      	adds	r7, #20
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bc80      	pop	{r7}
 80014fc:	4770      	bx	lr
	...

08001500 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b086      	sub	sp, #24
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001508:	4a14      	ldr	r2, [pc, #80]	@ (800155c <_sbrk+0x5c>)
 800150a:	4b15      	ldr	r3, [pc, #84]	@ (8001560 <_sbrk+0x60>)
 800150c:	1ad3      	subs	r3, r2, r3
 800150e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001510:	697b      	ldr	r3, [r7, #20]
 8001512:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001514:	4b13      	ldr	r3, [pc, #76]	@ (8001564 <_sbrk+0x64>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d102      	bne.n	8001522 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800151c:	4b11      	ldr	r3, [pc, #68]	@ (8001564 <_sbrk+0x64>)
 800151e:	4a12      	ldr	r2, [pc, #72]	@ (8001568 <_sbrk+0x68>)
 8001520:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001522:	4b10      	ldr	r3, [pc, #64]	@ (8001564 <_sbrk+0x64>)
 8001524:	681a      	ldr	r2, [r3, #0]
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	4413      	add	r3, r2
 800152a:	693a      	ldr	r2, [r7, #16]
 800152c:	429a      	cmp	r2, r3
 800152e:	d207      	bcs.n	8001540 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001530:	f006 fdd2 	bl	80080d8 <__errno>
 8001534:	4603      	mov	r3, r0
 8001536:	220c      	movs	r2, #12
 8001538:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800153a:	f04f 33ff 	mov.w	r3, #4294967295
 800153e:	e009      	b.n	8001554 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001540:	4b08      	ldr	r3, [pc, #32]	@ (8001564 <_sbrk+0x64>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001546:	4b07      	ldr	r3, [pc, #28]	@ (8001564 <_sbrk+0x64>)
 8001548:	681a      	ldr	r2, [r3, #0]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	4413      	add	r3, r2
 800154e:	4a05      	ldr	r2, [pc, #20]	@ (8001564 <_sbrk+0x64>)
 8001550:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001552:	68fb      	ldr	r3, [r7, #12]
}
 8001554:	4618      	mov	r0, r3
 8001556:	3718      	adds	r7, #24
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}
 800155c:	20005000 	.word	0x20005000
 8001560:	00000400 	.word	0x00000400
 8001564:	2000034c 	.word	0x2000034c
 8001568:	200008f0 	.word	0x200008f0

0800156c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001570:	bf00      	nop
 8001572:	46bd      	mov	sp, r7
 8001574:	bc80      	pop	{r7}
 8001576:	4770      	bx	lr

08001578 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800157c:	4b11      	ldr	r3, [pc, #68]	@ (80015c4 <MX_USART2_UART_Init+0x4c>)
 800157e:	4a12      	ldr	r2, [pc, #72]	@ (80015c8 <MX_USART2_UART_Init+0x50>)
 8001580:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001582:	4b10      	ldr	r3, [pc, #64]	@ (80015c4 <MX_USART2_UART_Init+0x4c>)
 8001584:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001588:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800158a:	4b0e      	ldr	r3, [pc, #56]	@ (80015c4 <MX_USART2_UART_Init+0x4c>)
 800158c:	2200      	movs	r2, #0
 800158e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001590:	4b0c      	ldr	r3, [pc, #48]	@ (80015c4 <MX_USART2_UART_Init+0x4c>)
 8001592:	2200      	movs	r2, #0
 8001594:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001596:	4b0b      	ldr	r3, [pc, #44]	@ (80015c4 <MX_USART2_UART_Init+0x4c>)
 8001598:	2200      	movs	r2, #0
 800159a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800159c:	4b09      	ldr	r3, [pc, #36]	@ (80015c4 <MX_USART2_UART_Init+0x4c>)
 800159e:	220c      	movs	r2, #12
 80015a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015a2:	4b08      	ldr	r3, [pc, #32]	@ (80015c4 <MX_USART2_UART_Init+0x4c>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80015a8:	4b06      	ldr	r3, [pc, #24]	@ (80015c4 <MX_USART2_UART_Init+0x4c>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80015ae:	4805      	ldr	r0, [pc, #20]	@ (80015c4 <MX_USART2_UART_Init+0x4c>)
 80015b0:	f004 ff04 	bl	80063bc <HAL_UART_Init>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80015ba:	f7ff fe95 	bl	80012e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80015be:	bf00      	nop
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	20000350 	.word	0x20000350
 80015c8:	40004400 	.word	0x40004400

080015cc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b088      	sub	sp, #32
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015d4:	f107 0310 	add.w	r3, r7, #16
 80015d8:	2200      	movs	r2, #0
 80015da:	601a      	str	r2, [r3, #0]
 80015dc:	605a      	str	r2, [r3, #4]
 80015de:	609a      	str	r2, [r3, #8]
 80015e0:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4a1b      	ldr	r2, [pc, #108]	@ (8001654 <HAL_UART_MspInit+0x88>)
 80015e8:	4293      	cmp	r3, r2
 80015ea:	d12f      	bne.n	800164c <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80015ec:	4b1a      	ldr	r3, [pc, #104]	@ (8001658 <HAL_UART_MspInit+0x8c>)
 80015ee:	69db      	ldr	r3, [r3, #28]
 80015f0:	4a19      	ldr	r2, [pc, #100]	@ (8001658 <HAL_UART_MspInit+0x8c>)
 80015f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015f6:	61d3      	str	r3, [r2, #28]
 80015f8:	4b17      	ldr	r3, [pc, #92]	@ (8001658 <HAL_UART_MspInit+0x8c>)
 80015fa:	69db      	ldr	r3, [r3, #28]
 80015fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001600:	60fb      	str	r3, [r7, #12]
 8001602:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001604:	4b14      	ldr	r3, [pc, #80]	@ (8001658 <HAL_UART_MspInit+0x8c>)
 8001606:	699b      	ldr	r3, [r3, #24]
 8001608:	4a13      	ldr	r2, [pc, #76]	@ (8001658 <HAL_UART_MspInit+0x8c>)
 800160a:	f043 0304 	orr.w	r3, r3, #4
 800160e:	6193      	str	r3, [r2, #24]
 8001610:	4b11      	ldr	r3, [pc, #68]	@ (8001658 <HAL_UART_MspInit+0x8c>)
 8001612:	699b      	ldr	r3, [r3, #24]
 8001614:	f003 0304 	and.w	r3, r3, #4
 8001618:	60bb      	str	r3, [r7, #8]
 800161a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800161c:	2304      	movs	r3, #4
 800161e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001620:	2302      	movs	r3, #2
 8001622:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001624:	2303      	movs	r3, #3
 8001626:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001628:	f107 0310 	add.w	r3, r7, #16
 800162c:	4619      	mov	r1, r3
 800162e:	480b      	ldr	r0, [pc, #44]	@ (800165c <HAL_UART_MspInit+0x90>)
 8001630:	f001 f890 	bl	8002754 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001634:	2308      	movs	r3, #8
 8001636:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001638:	2300      	movs	r3, #0
 800163a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163c:	2300      	movs	r3, #0
 800163e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001640:	f107 0310 	add.w	r3, r7, #16
 8001644:	4619      	mov	r1, r3
 8001646:	4805      	ldr	r0, [pc, #20]	@ (800165c <HAL_UART_MspInit+0x90>)
 8001648:	f001 f884 	bl	8002754 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800164c:	bf00      	nop
 800164e:	3720      	adds	r7, #32
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}
 8001654:	40004400 	.word	0x40004400
 8001658:	40021000 	.word	0x40021000
 800165c:	40010800 	.word	0x40010800

08001660 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001660:	f7ff ff84 	bl	800156c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001664:	480b      	ldr	r0, [pc, #44]	@ (8001694 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001666:	490c      	ldr	r1, [pc, #48]	@ (8001698 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001668:	4a0c      	ldr	r2, [pc, #48]	@ (800169c <LoopFillZerobss+0x16>)
  movs r3, #0
 800166a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800166c:	e002      	b.n	8001674 <LoopCopyDataInit>

0800166e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800166e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001670:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001672:	3304      	adds	r3, #4

08001674 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001674:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001676:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001678:	d3f9      	bcc.n	800166e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800167a:	4a09      	ldr	r2, [pc, #36]	@ (80016a0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800167c:	4c09      	ldr	r4, [pc, #36]	@ (80016a4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800167e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001680:	e001      	b.n	8001686 <LoopFillZerobss>

08001682 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001682:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001684:	3204      	adds	r2, #4

08001686 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001686:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001688:	d3fb      	bcc.n	8001682 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800168a:	f006 fd2b 	bl	80080e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800168e:	f7ff fccb 	bl	8001028 <main>
  bx lr
 8001692:	4770      	bx	lr
  ldr r0, =_sdata
 8001694:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001698:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 800169c:	0800c3f0 	.word	0x0800c3f0
  ldr r2, =_sbss
 80016a0:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 80016a4:	200008f0 	.word	0x200008f0

080016a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80016a8:	e7fe      	b.n	80016a8 <ADC1_2_IRQHandler>
	...

080016ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016b0:	4b08      	ldr	r3, [pc, #32]	@ (80016d4 <HAL_Init+0x28>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a07      	ldr	r2, [pc, #28]	@ (80016d4 <HAL_Init+0x28>)
 80016b6:	f043 0310 	orr.w	r3, r3, #16
 80016ba:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016bc:	2003      	movs	r0, #3
 80016be:	f000 fe21 	bl	8002304 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016c2:	200f      	movs	r0, #15
 80016c4:	f000 f808 	bl	80016d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016c8:	f7ff fe14 	bl	80012f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016cc:	2300      	movs	r3, #0
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	40022000 	.word	0x40022000

080016d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b082      	sub	sp, #8
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016e0:	4b12      	ldr	r3, [pc, #72]	@ (800172c <HAL_InitTick+0x54>)
 80016e2:	681a      	ldr	r2, [r3, #0]
 80016e4:	4b12      	ldr	r3, [pc, #72]	@ (8001730 <HAL_InitTick+0x58>)
 80016e6:	781b      	ldrb	r3, [r3, #0]
 80016e8:	4619      	mov	r1, r3
 80016ea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80016f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80016f6:	4618      	mov	r0, r3
 80016f8:	f000 fe39 	bl	800236e <HAL_SYSTICK_Config>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d001      	beq.n	8001706 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001702:	2301      	movs	r3, #1
 8001704:	e00e      	b.n	8001724 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2b0f      	cmp	r3, #15
 800170a:	d80a      	bhi.n	8001722 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800170c:	2200      	movs	r2, #0
 800170e:	6879      	ldr	r1, [r7, #4]
 8001710:	f04f 30ff 	mov.w	r0, #4294967295
 8001714:	f000 fe01 	bl	800231a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001718:	4a06      	ldr	r2, [pc, #24]	@ (8001734 <HAL_InitTick+0x5c>)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800171e:	2300      	movs	r3, #0
 8001720:	e000      	b.n	8001724 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001722:	2301      	movs	r3, #1
}
 8001724:	4618      	mov	r0, r3
 8001726:	3708      	adds	r7, #8
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}
 800172c:	20000010 	.word	0x20000010
 8001730:	20000018 	.word	0x20000018
 8001734:	20000014 	.word	0x20000014

08001738 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800173c:	4b05      	ldr	r3, [pc, #20]	@ (8001754 <HAL_IncTick+0x1c>)
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	461a      	mov	r2, r3
 8001742:	4b05      	ldr	r3, [pc, #20]	@ (8001758 <HAL_IncTick+0x20>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4413      	add	r3, r2
 8001748:	4a03      	ldr	r2, [pc, #12]	@ (8001758 <HAL_IncTick+0x20>)
 800174a:	6013      	str	r3, [r2, #0]
}
 800174c:	bf00      	nop
 800174e:	46bd      	mov	sp, r7
 8001750:	bc80      	pop	{r7}
 8001752:	4770      	bx	lr
 8001754:	20000018 	.word	0x20000018
 8001758:	20000398 	.word	0x20000398

0800175c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
  return uwTick;
 8001760:	4b02      	ldr	r3, [pc, #8]	@ (800176c <HAL_GetTick+0x10>)
 8001762:	681b      	ldr	r3, [r3, #0]
}
 8001764:	4618      	mov	r0, r3
 8001766:	46bd      	mov	sp, r7
 8001768:	bc80      	pop	{r7}
 800176a:	4770      	bx	lr
 800176c:	20000398 	.word	0x20000398

08001770 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b084      	sub	sp, #16
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001778:	f7ff fff0 	bl	800175c <HAL_GetTick>
 800177c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001788:	d005      	beq.n	8001796 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800178a:	4b0a      	ldr	r3, [pc, #40]	@ (80017b4 <HAL_Delay+0x44>)
 800178c:	781b      	ldrb	r3, [r3, #0]
 800178e:	461a      	mov	r2, r3
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	4413      	add	r3, r2
 8001794:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001796:	bf00      	nop
 8001798:	f7ff ffe0 	bl	800175c <HAL_GetTick>
 800179c:	4602      	mov	r2, r0
 800179e:	68bb      	ldr	r3, [r7, #8]
 80017a0:	1ad3      	subs	r3, r2, r3
 80017a2:	68fa      	ldr	r2, [r7, #12]
 80017a4:	429a      	cmp	r2, r3
 80017a6:	d8f7      	bhi.n	8001798 <HAL_Delay+0x28>
  {
  }
}
 80017a8:	bf00      	nop
 80017aa:	bf00      	nop
 80017ac:	3710      	adds	r7, #16
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	20000018 	.word	0x20000018

080017b8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b086      	sub	sp, #24
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017c0:	2300      	movs	r3, #0
 80017c2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80017c4:	2300      	movs	r3, #0
 80017c6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80017c8:	2300      	movs	r3, #0
 80017ca:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80017cc:	2300      	movs	r3, #0
 80017ce:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d101      	bne.n	80017da <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80017d6:	2301      	movs	r3, #1
 80017d8:	e0be      	b.n	8001958 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	689b      	ldr	r3, [r3, #8]
 80017de:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d109      	bne.n	80017fc <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2200      	movs	r2, #0
 80017ec:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2200      	movs	r2, #0
 80017f2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80017f6:	6878      	ldr	r0, [r7, #4]
 80017f8:	f7ff fa2a 	bl	8000c50 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80017fc:	6878      	ldr	r0, [r7, #4]
 80017fe:	f000 fbc5 	bl	8001f8c <ADC_ConversionStop_Disable>
 8001802:	4603      	mov	r3, r0
 8001804:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800180a:	f003 0310 	and.w	r3, r3, #16
 800180e:	2b00      	cmp	r3, #0
 8001810:	f040 8099 	bne.w	8001946 <HAL_ADC_Init+0x18e>
 8001814:	7dfb      	ldrb	r3, [r7, #23]
 8001816:	2b00      	cmp	r3, #0
 8001818:	f040 8095 	bne.w	8001946 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001820:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001824:	f023 0302 	bic.w	r3, r3, #2
 8001828:	f043 0202 	orr.w	r2, r3, #2
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001838:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	7b1b      	ldrb	r3, [r3, #12]
 800183e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001840:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001842:	68ba      	ldr	r2, [r7, #8]
 8001844:	4313      	orrs	r3, r2
 8001846:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	689b      	ldr	r3, [r3, #8]
 800184c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001850:	d003      	beq.n	800185a <HAL_ADC_Init+0xa2>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	689b      	ldr	r3, [r3, #8]
 8001856:	2b01      	cmp	r3, #1
 8001858:	d102      	bne.n	8001860 <HAL_ADC_Init+0xa8>
 800185a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800185e:	e000      	b.n	8001862 <HAL_ADC_Init+0xaa>
 8001860:	2300      	movs	r3, #0
 8001862:	693a      	ldr	r2, [r7, #16]
 8001864:	4313      	orrs	r3, r2
 8001866:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	7d1b      	ldrb	r3, [r3, #20]
 800186c:	2b01      	cmp	r3, #1
 800186e:	d119      	bne.n	80018a4 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	7b1b      	ldrb	r3, [r3, #12]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d109      	bne.n	800188c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	699b      	ldr	r3, [r3, #24]
 800187c:	3b01      	subs	r3, #1
 800187e:	035a      	lsls	r2, r3, #13
 8001880:	693b      	ldr	r3, [r7, #16]
 8001882:	4313      	orrs	r3, r2
 8001884:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001888:	613b      	str	r3, [r7, #16]
 800188a:	e00b      	b.n	80018a4 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001890:	f043 0220 	orr.w	r2, r3, #32
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800189c:	f043 0201 	orr.w	r2, r3, #1
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	693a      	ldr	r2, [r7, #16]
 80018b4:	430a      	orrs	r2, r1
 80018b6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	689a      	ldr	r2, [r3, #8]
 80018be:	4b28      	ldr	r3, [pc, #160]	@ (8001960 <HAL_ADC_Init+0x1a8>)
 80018c0:	4013      	ands	r3, r2
 80018c2:	687a      	ldr	r2, [r7, #4]
 80018c4:	6812      	ldr	r2, [r2, #0]
 80018c6:	68b9      	ldr	r1, [r7, #8]
 80018c8:	430b      	orrs	r3, r1
 80018ca:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	689b      	ldr	r3, [r3, #8]
 80018d0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80018d4:	d003      	beq.n	80018de <HAL_ADC_Init+0x126>
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	689b      	ldr	r3, [r3, #8]
 80018da:	2b01      	cmp	r3, #1
 80018dc:	d104      	bne.n	80018e8 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	691b      	ldr	r3, [r3, #16]
 80018e2:	3b01      	subs	r3, #1
 80018e4:	051b      	lsls	r3, r3, #20
 80018e6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018ee:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	68fa      	ldr	r2, [r7, #12]
 80018f8:	430a      	orrs	r2, r1
 80018fa:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	689a      	ldr	r2, [r3, #8]
 8001902:	4b18      	ldr	r3, [pc, #96]	@ (8001964 <HAL_ADC_Init+0x1ac>)
 8001904:	4013      	ands	r3, r2
 8001906:	68ba      	ldr	r2, [r7, #8]
 8001908:	429a      	cmp	r2, r3
 800190a:	d10b      	bne.n	8001924 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2200      	movs	r2, #0
 8001910:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001916:	f023 0303 	bic.w	r3, r3, #3
 800191a:	f043 0201 	orr.w	r2, r3, #1
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001922:	e018      	b.n	8001956 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001928:	f023 0312 	bic.w	r3, r3, #18
 800192c:	f043 0210 	orr.w	r2, r3, #16
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001938:	f043 0201 	orr.w	r2, r3, #1
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001940:	2301      	movs	r3, #1
 8001942:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001944:	e007      	b.n	8001956 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800194a:	f043 0210 	orr.w	r2, r3, #16
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001952:	2301      	movs	r3, #1
 8001954:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001956:	7dfb      	ldrb	r3, [r7, #23]
}
 8001958:	4618      	mov	r0, r3
 800195a:	3718      	adds	r7, #24
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}
 8001960:	ffe1f7fd 	.word	0xffe1f7fd
 8001964:	ff1f0efe 	.word	0xff1f0efe

08001968 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b084      	sub	sp, #16
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001970:	2300      	movs	r3, #0
 8001972:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800197a:	2b01      	cmp	r3, #1
 800197c:	d101      	bne.n	8001982 <HAL_ADC_Start+0x1a>
 800197e:	2302      	movs	r3, #2
 8001980:	e098      	b.n	8001ab4 <HAL_ADC_Start+0x14c>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2201      	movs	r2, #1
 8001986:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800198a:	6878      	ldr	r0, [r7, #4]
 800198c:	f000 faa4 	bl	8001ed8 <ADC_Enable>
 8001990:	4603      	mov	r3, r0
 8001992:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001994:	7bfb      	ldrb	r3, [r7, #15]
 8001996:	2b00      	cmp	r3, #0
 8001998:	f040 8087 	bne.w	8001aaa <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019a0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80019a4:	f023 0301 	bic.w	r3, r3, #1
 80019a8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a41      	ldr	r2, [pc, #260]	@ (8001abc <HAL_ADC_Start+0x154>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d105      	bne.n	80019c6 <HAL_ADC_Start+0x5e>
 80019ba:	4b41      	ldr	r3, [pc, #260]	@ (8001ac0 <HAL_ADC_Start+0x158>)
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d115      	bne.n	80019f2 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019ca:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d026      	beq.n	8001a2e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019e4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80019e8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80019f0:	e01d      	b.n	8001a2e <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019f6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4a2f      	ldr	r2, [pc, #188]	@ (8001ac0 <HAL_ADC_Start+0x158>)
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d004      	beq.n	8001a12 <HAL_ADC_Start+0xaa>
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a2b      	ldr	r2, [pc, #172]	@ (8001abc <HAL_ADC_Start+0x154>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d10d      	bne.n	8001a2e <HAL_ADC_Start+0xc6>
 8001a12:	4b2b      	ldr	r3, [pc, #172]	@ (8001ac0 <HAL_ADC_Start+0x158>)
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d007      	beq.n	8001a2e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a22:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001a26:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a32:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d006      	beq.n	8001a48 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a3e:	f023 0206 	bic.w	r2, r3, #6
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001a46:	e002      	b.n	8001a4e <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2200      	movs	r2, #0
 8001a52:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f06f 0202 	mvn.w	r2, #2
 8001a5e:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001a6a:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001a6e:	d113      	bne.n	8001a98 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001a74:	4a11      	ldr	r2, [pc, #68]	@ (8001abc <HAL_ADC_Start+0x154>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d105      	bne.n	8001a86 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001a7a:	4b11      	ldr	r3, [pc, #68]	@ (8001ac0 <HAL_ADC_Start+0x158>)
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d108      	bne.n	8001a98 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	689a      	ldr	r2, [r3, #8]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8001a94:	609a      	str	r2, [r3, #8]
 8001a96:	e00c      	b.n	8001ab2 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	689a      	ldr	r2, [r3, #8]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8001aa6:	609a      	str	r2, [r3, #8]
 8001aa8:	e003      	b.n	8001ab2 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2200      	movs	r2, #0
 8001aae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001ab2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	3710      	adds	r7, #16
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	40012800 	.word	0x40012800
 8001ac0:	40012400 	.word	0x40012400

08001ac4 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001ac4:	b590      	push	{r4, r7, lr}
 8001ac6:	b087      	sub	sp, #28
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
 8001acc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001ada:	f7ff fe3f 	bl	800175c <HAL_GetTick>
 8001ade:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	689b      	ldr	r3, [r3, #8]
 8001ae6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d00b      	beq.n	8001b06 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001af2:	f043 0220 	orr.w	r2, r3, #32
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2200      	movs	r2, #0
 8001afe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 8001b02:	2301      	movs	r3, #1
 8001b04:	e0d3      	b.n	8001cae <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d131      	bne.n	8001b78 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b1a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d12a      	bne.n	8001b78 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001b22:	e021      	b.n	8001b68 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b2a:	d01d      	beq.n	8001b68 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d007      	beq.n	8001b42 <HAL_ADC_PollForConversion+0x7e>
 8001b32:	f7ff fe13 	bl	800175c <HAL_GetTick>
 8001b36:	4602      	mov	r2, r0
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	1ad3      	subs	r3, r2, r3
 8001b3c:	683a      	ldr	r2, [r7, #0]
 8001b3e:	429a      	cmp	r2, r3
 8001b40:	d212      	bcs.n	8001b68 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f003 0302 	and.w	r3, r3, #2
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d10b      	bne.n	8001b68 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b54:	f043 0204 	orr.w	r2, r3, #4
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2200      	movs	r2, #0
 8001b60:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 8001b64:	2303      	movs	r3, #3
 8001b66:	e0a2      	b.n	8001cae <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f003 0302 	and.w	r3, r3, #2
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d0d6      	beq.n	8001b24 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001b76:	e070      	b.n	8001c5a <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001b78:	4b4f      	ldr	r3, [pc, #316]	@ (8001cb8 <HAL_ADC_PollForConversion+0x1f4>)
 8001b7a:	681c      	ldr	r4, [r3, #0]
 8001b7c:	2002      	movs	r0, #2
 8001b7e:	f004 fb67 	bl	8006250 <HAL_RCCEx_GetPeriphCLKFreq>
 8001b82:	4603      	mov	r3, r0
 8001b84:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	6919      	ldr	r1, [r3, #16]
 8001b8e:	4b4b      	ldr	r3, [pc, #300]	@ (8001cbc <HAL_ADC_PollForConversion+0x1f8>)
 8001b90:	400b      	ands	r3, r1
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d118      	bne.n	8001bc8 <HAL_ADC_PollForConversion+0x104>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	68d9      	ldr	r1, [r3, #12]
 8001b9c:	4b48      	ldr	r3, [pc, #288]	@ (8001cc0 <HAL_ADC_PollForConversion+0x1fc>)
 8001b9e:	400b      	ands	r3, r1
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d111      	bne.n	8001bc8 <HAL_ADC_PollForConversion+0x104>
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	6919      	ldr	r1, [r3, #16]
 8001baa:	4b46      	ldr	r3, [pc, #280]	@ (8001cc4 <HAL_ADC_PollForConversion+0x200>)
 8001bac:	400b      	ands	r3, r1
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d108      	bne.n	8001bc4 <HAL_ADC_PollForConversion+0x100>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	68d9      	ldr	r1, [r3, #12]
 8001bb8:	4b43      	ldr	r3, [pc, #268]	@ (8001cc8 <HAL_ADC_PollForConversion+0x204>)
 8001bba:	400b      	ands	r3, r1
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d101      	bne.n	8001bc4 <HAL_ADC_PollForConversion+0x100>
 8001bc0:	2314      	movs	r3, #20
 8001bc2:	e020      	b.n	8001c06 <HAL_ADC_PollForConversion+0x142>
 8001bc4:	2329      	movs	r3, #41	@ 0x29
 8001bc6:	e01e      	b.n	8001c06 <HAL_ADC_PollForConversion+0x142>
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	6919      	ldr	r1, [r3, #16]
 8001bce:	4b3d      	ldr	r3, [pc, #244]	@ (8001cc4 <HAL_ADC_PollForConversion+0x200>)
 8001bd0:	400b      	ands	r3, r1
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d106      	bne.n	8001be4 <HAL_ADC_PollForConversion+0x120>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	68d9      	ldr	r1, [r3, #12]
 8001bdc:	4b3a      	ldr	r3, [pc, #232]	@ (8001cc8 <HAL_ADC_PollForConversion+0x204>)
 8001bde:	400b      	ands	r3, r1
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d00d      	beq.n	8001c00 <HAL_ADC_PollForConversion+0x13c>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	6919      	ldr	r1, [r3, #16]
 8001bea:	4b38      	ldr	r3, [pc, #224]	@ (8001ccc <HAL_ADC_PollForConversion+0x208>)
 8001bec:	400b      	ands	r3, r1
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d108      	bne.n	8001c04 <HAL_ADC_PollForConversion+0x140>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	68d9      	ldr	r1, [r3, #12]
 8001bf8:	4b34      	ldr	r3, [pc, #208]	@ (8001ccc <HAL_ADC_PollForConversion+0x208>)
 8001bfa:	400b      	ands	r3, r1
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d101      	bne.n	8001c04 <HAL_ADC_PollForConversion+0x140>
 8001c00:	2354      	movs	r3, #84	@ 0x54
 8001c02:	e000      	b.n	8001c06 <HAL_ADC_PollForConversion+0x142>
 8001c04:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8001c06:	fb02 f303 	mul.w	r3, r2, r3
 8001c0a:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001c0c:	e021      	b.n	8001c52 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c14:	d01a      	beq.n	8001c4c <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d007      	beq.n	8001c2c <HAL_ADC_PollForConversion+0x168>
 8001c1c:	f7ff fd9e 	bl	800175c <HAL_GetTick>
 8001c20:	4602      	mov	r2, r0
 8001c22:	697b      	ldr	r3, [r7, #20]
 8001c24:	1ad3      	subs	r3, r2, r3
 8001c26:	683a      	ldr	r2, [r7, #0]
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	d20f      	bcs.n	8001c4c <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	693a      	ldr	r2, [r7, #16]
 8001c30:	429a      	cmp	r2, r3
 8001c32:	d90b      	bls.n	8001c4c <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c38:	f043 0204 	orr.w	r2, r3, #4
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2200      	movs	r2, #0
 8001c44:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 8001c48:	2303      	movs	r3, #3
 8001c4a:	e030      	b.n	8001cae <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	3301      	adds	r3, #1
 8001c50:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	693a      	ldr	r2, [r7, #16]
 8001c56:	429a      	cmp	r2, r3
 8001c58:	d8d9      	bhi.n	8001c0e <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f06f 0212 	mvn.w	r2, #18
 8001c62:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c68:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	689b      	ldr	r3, [r3, #8]
 8001c76:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001c7a:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001c7e:	d115      	bne.n	8001cac <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d111      	bne.n	8001cac <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c8c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c98:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d105      	bne.n	8001cac <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ca4:	f043 0201 	orr.w	r2, r3, #1
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001cac:	2300      	movs	r3, #0
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	371c      	adds	r7, #28
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd90      	pop	{r4, r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	20000010 	.word	0x20000010
 8001cbc:	24924924 	.word	0x24924924
 8001cc0:	00924924 	.word	0x00924924
 8001cc4:	12492492 	.word	0x12492492
 8001cc8:	00492492 	.word	0x00492492
 8001ccc:	00249249 	.word	0x00249249

08001cd0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b083      	sub	sp, #12
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	370c      	adds	r7, #12
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bc80      	pop	{r7}
 8001ce6:	4770      	bx	lr

08001ce8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001ce8:	b480      	push	{r7}
 8001cea:	b085      	sub	sp, #20
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
 8001cf0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001d00:	2b01      	cmp	r3, #1
 8001d02:	d101      	bne.n	8001d08 <HAL_ADC_ConfigChannel+0x20>
 8001d04:	2302      	movs	r3, #2
 8001d06:	e0dc      	b.n	8001ec2 <HAL_ADC_ConfigChannel+0x1da>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	2b06      	cmp	r3, #6
 8001d16:	d81c      	bhi.n	8001d52 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	685a      	ldr	r2, [r3, #4]
 8001d22:	4613      	mov	r3, r2
 8001d24:	009b      	lsls	r3, r3, #2
 8001d26:	4413      	add	r3, r2
 8001d28:	3b05      	subs	r3, #5
 8001d2a:	221f      	movs	r2, #31
 8001d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d30:	43db      	mvns	r3, r3
 8001d32:	4019      	ands	r1, r3
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	6818      	ldr	r0, [r3, #0]
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	685a      	ldr	r2, [r3, #4]
 8001d3c:	4613      	mov	r3, r2
 8001d3e:	009b      	lsls	r3, r3, #2
 8001d40:	4413      	add	r3, r2
 8001d42:	3b05      	subs	r3, #5
 8001d44:	fa00 f203 	lsl.w	r2, r0, r3
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	430a      	orrs	r2, r1
 8001d4e:	635a      	str	r2, [r3, #52]	@ 0x34
 8001d50:	e03c      	b.n	8001dcc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	2b0c      	cmp	r3, #12
 8001d58:	d81c      	bhi.n	8001d94 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	685a      	ldr	r2, [r3, #4]
 8001d64:	4613      	mov	r3, r2
 8001d66:	009b      	lsls	r3, r3, #2
 8001d68:	4413      	add	r3, r2
 8001d6a:	3b23      	subs	r3, #35	@ 0x23
 8001d6c:	221f      	movs	r2, #31
 8001d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d72:	43db      	mvns	r3, r3
 8001d74:	4019      	ands	r1, r3
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	6818      	ldr	r0, [r3, #0]
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	685a      	ldr	r2, [r3, #4]
 8001d7e:	4613      	mov	r3, r2
 8001d80:	009b      	lsls	r3, r3, #2
 8001d82:	4413      	add	r3, r2
 8001d84:	3b23      	subs	r3, #35	@ 0x23
 8001d86:	fa00 f203 	lsl.w	r2, r0, r3
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	430a      	orrs	r2, r1
 8001d90:	631a      	str	r2, [r3, #48]	@ 0x30
 8001d92:	e01b      	b.n	8001dcc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	685a      	ldr	r2, [r3, #4]
 8001d9e:	4613      	mov	r3, r2
 8001da0:	009b      	lsls	r3, r3, #2
 8001da2:	4413      	add	r3, r2
 8001da4:	3b41      	subs	r3, #65	@ 0x41
 8001da6:	221f      	movs	r2, #31
 8001da8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dac:	43db      	mvns	r3, r3
 8001dae:	4019      	ands	r1, r3
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	6818      	ldr	r0, [r3, #0]
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	685a      	ldr	r2, [r3, #4]
 8001db8:	4613      	mov	r3, r2
 8001dba:	009b      	lsls	r3, r3, #2
 8001dbc:	4413      	add	r3, r2
 8001dbe:	3b41      	subs	r3, #65	@ 0x41
 8001dc0:	fa00 f203 	lsl.w	r2, r0, r3
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	430a      	orrs	r2, r1
 8001dca:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	2b09      	cmp	r3, #9
 8001dd2:	d91c      	bls.n	8001e0e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	68d9      	ldr	r1, [r3, #12]
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	681a      	ldr	r2, [r3, #0]
 8001dde:	4613      	mov	r3, r2
 8001de0:	005b      	lsls	r3, r3, #1
 8001de2:	4413      	add	r3, r2
 8001de4:	3b1e      	subs	r3, #30
 8001de6:	2207      	movs	r2, #7
 8001de8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dec:	43db      	mvns	r3, r3
 8001dee:	4019      	ands	r1, r3
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	6898      	ldr	r0, [r3, #8]
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	4613      	mov	r3, r2
 8001dfa:	005b      	lsls	r3, r3, #1
 8001dfc:	4413      	add	r3, r2
 8001dfe:	3b1e      	subs	r3, #30
 8001e00:	fa00 f203 	lsl.w	r2, r0, r3
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	430a      	orrs	r2, r1
 8001e0a:	60da      	str	r2, [r3, #12]
 8001e0c:	e019      	b.n	8001e42 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	6919      	ldr	r1, [r3, #16]
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	681a      	ldr	r2, [r3, #0]
 8001e18:	4613      	mov	r3, r2
 8001e1a:	005b      	lsls	r3, r3, #1
 8001e1c:	4413      	add	r3, r2
 8001e1e:	2207      	movs	r2, #7
 8001e20:	fa02 f303 	lsl.w	r3, r2, r3
 8001e24:	43db      	mvns	r3, r3
 8001e26:	4019      	ands	r1, r3
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	6898      	ldr	r0, [r3, #8]
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	681a      	ldr	r2, [r3, #0]
 8001e30:	4613      	mov	r3, r2
 8001e32:	005b      	lsls	r3, r3, #1
 8001e34:	4413      	add	r3, r2
 8001e36:	fa00 f203 	lsl.w	r2, r0, r3
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	430a      	orrs	r2, r1
 8001e40:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	2b10      	cmp	r3, #16
 8001e48:	d003      	beq.n	8001e52 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001e4e:	2b11      	cmp	r3, #17
 8001e50:	d132      	bne.n	8001eb8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4a1d      	ldr	r2, [pc, #116]	@ (8001ecc <HAL_ADC_ConfigChannel+0x1e4>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d125      	bne.n	8001ea8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	689b      	ldr	r3, [r3, #8]
 8001e62:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d126      	bne.n	8001eb8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	689a      	ldr	r2, [r3, #8]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8001e78:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	2b10      	cmp	r3, #16
 8001e80:	d11a      	bne.n	8001eb8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001e82:	4b13      	ldr	r3, [pc, #76]	@ (8001ed0 <HAL_ADC_ConfigChannel+0x1e8>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a13      	ldr	r2, [pc, #76]	@ (8001ed4 <HAL_ADC_ConfigChannel+0x1ec>)
 8001e88:	fba2 2303 	umull	r2, r3, r2, r3
 8001e8c:	0c9a      	lsrs	r2, r3, #18
 8001e8e:	4613      	mov	r3, r2
 8001e90:	009b      	lsls	r3, r3, #2
 8001e92:	4413      	add	r3, r2
 8001e94:	005b      	lsls	r3, r3, #1
 8001e96:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001e98:	e002      	b.n	8001ea0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001e9a:	68bb      	ldr	r3, [r7, #8]
 8001e9c:	3b01      	subs	r3, #1
 8001e9e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001ea0:	68bb      	ldr	r3, [r7, #8]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d1f9      	bne.n	8001e9a <HAL_ADC_ConfigChannel+0x1b2>
 8001ea6:	e007      	b.n	8001eb8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001eac:	f043 0220 	orr.w	r2, r3, #32
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2200      	movs	r2, #0
 8001ebc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001ec0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	3714      	adds	r7, #20
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bc80      	pop	{r7}
 8001eca:	4770      	bx	lr
 8001ecc:	40012400 	.word	0x40012400
 8001ed0:	20000010 	.word	0x20000010
 8001ed4:	431bde83 	.word	0x431bde83

08001ed8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b084      	sub	sp, #16
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	689b      	ldr	r3, [r3, #8]
 8001eee:	f003 0301 	and.w	r3, r3, #1
 8001ef2:	2b01      	cmp	r3, #1
 8001ef4:	d040      	beq.n	8001f78 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	689a      	ldr	r2, [r3, #8]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f042 0201 	orr.w	r2, r2, #1
 8001f04:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001f06:	4b1f      	ldr	r3, [pc, #124]	@ (8001f84 <ADC_Enable+0xac>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a1f      	ldr	r2, [pc, #124]	@ (8001f88 <ADC_Enable+0xb0>)
 8001f0c:	fba2 2303 	umull	r2, r3, r2, r3
 8001f10:	0c9b      	lsrs	r3, r3, #18
 8001f12:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001f14:	e002      	b.n	8001f1c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001f16:	68bb      	ldr	r3, [r7, #8]
 8001f18:	3b01      	subs	r3, #1
 8001f1a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d1f9      	bne.n	8001f16 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001f22:	f7ff fc1b 	bl	800175c <HAL_GetTick>
 8001f26:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001f28:	e01f      	b.n	8001f6a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001f2a:	f7ff fc17 	bl	800175c <HAL_GetTick>
 8001f2e:	4602      	mov	r2, r0
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	1ad3      	subs	r3, r2, r3
 8001f34:	2b02      	cmp	r3, #2
 8001f36:	d918      	bls.n	8001f6a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	f003 0301 	and.w	r3, r3, #1
 8001f42:	2b01      	cmp	r3, #1
 8001f44:	d011      	beq.n	8001f6a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f4a:	f043 0210 	orr.w	r2, r3, #16
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f56:	f043 0201 	orr.w	r2, r3, #1
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2200      	movs	r2, #0
 8001f62:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8001f66:	2301      	movs	r3, #1
 8001f68:	e007      	b.n	8001f7a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	f003 0301 	and.w	r3, r3, #1
 8001f74:	2b01      	cmp	r3, #1
 8001f76:	d1d8      	bne.n	8001f2a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001f78:	2300      	movs	r3, #0
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	3710      	adds	r7, #16
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	20000010 	.word	0x20000010
 8001f88:	431bde83 	.word	0x431bde83

08001f8c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b084      	sub	sp, #16
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001f94:	2300      	movs	r3, #0
 8001f96:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	f003 0301 	and.w	r3, r3, #1
 8001fa2:	2b01      	cmp	r3, #1
 8001fa4:	d12e      	bne.n	8002004 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	689a      	ldr	r2, [r3, #8]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f022 0201 	bic.w	r2, r2, #1
 8001fb4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001fb6:	f7ff fbd1 	bl	800175c <HAL_GetTick>
 8001fba:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001fbc:	e01b      	b.n	8001ff6 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001fbe:	f7ff fbcd 	bl	800175c <HAL_GetTick>
 8001fc2:	4602      	mov	r2, r0
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	1ad3      	subs	r3, r2, r3
 8001fc8:	2b02      	cmp	r3, #2
 8001fca:	d914      	bls.n	8001ff6 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	689b      	ldr	r3, [r3, #8]
 8001fd2:	f003 0301 	and.w	r3, r3, #1
 8001fd6:	2b01      	cmp	r3, #1
 8001fd8:	d10d      	bne.n	8001ff6 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fde:	f043 0210 	orr.w	r2, r3, #16
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fea:	f043 0201 	orr.w	r2, r3, #1
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e007      	b.n	8002006 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	689b      	ldr	r3, [r3, #8]
 8001ffc:	f003 0301 	and.w	r3, r3, #1
 8002000:	2b01      	cmp	r3, #1
 8002002:	d0dc      	beq.n	8001fbe <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002004:	2300      	movs	r3, #0
}
 8002006:	4618      	mov	r0, r3
 8002008:	3710      	adds	r7, #16
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}
	...

08002010 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8002010:	b590      	push	{r4, r7, lr}
 8002012:	b087      	sub	sp, #28
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002018:	2300      	movs	r3, #0
 800201a:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 800201c:	2300      	movs	r3, #0
 800201e:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002026:	2b01      	cmp	r3, #1
 8002028:	d101      	bne.n	800202e <HAL_ADCEx_Calibration_Start+0x1e>
 800202a:	2302      	movs	r3, #2
 800202c:	e097      	b.n	800215e <HAL_ADCEx_Calibration_Start+0x14e>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2201      	movs	r2, #1
 8002032:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002036:	6878      	ldr	r0, [r7, #4]
 8002038:	f7ff ffa8 	bl	8001f8c <ADC_ConversionStop_Disable>
 800203c:	4603      	mov	r3, r0
 800203e:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 8002040:	6878      	ldr	r0, [r7, #4]
 8002042:	f7ff ff49 	bl	8001ed8 <ADC_Enable>
 8002046:	4603      	mov	r3, r0
 8002048:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 800204a:	7dfb      	ldrb	r3, [r7, #23]
 800204c:	2b00      	cmp	r3, #0
 800204e:	f040 8081 	bne.w	8002154 <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002056:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800205a:	f023 0302 	bic.w	r3, r3, #2
 800205e:	f043 0202 	orr.w	r2, r3, #2
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002066:	4b40      	ldr	r3, [pc, #256]	@ (8002168 <HAL_ADCEx_Calibration_Start+0x158>)
 8002068:	681c      	ldr	r4, [r3, #0]
 800206a:	2002      	movs	r0, #2
 800206c:	f004 f8f0 	bl	8006250 <HAL_RCCEx_GetPeriphCLKFreq>
 8002070:	4603      	mov	r3, r0
 8002072:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8002076:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8002078:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 800207a:	e002      	b.n	8002082 <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	3b01      	subs	r3, #1
 8002080:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d1f9      	bne.n	800207c <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	689a      	ldr	r2, [r3, #8]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f042 0208 	orr.w	r2, r2, #8
 8002096:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8002098:	f7ff fb60 	bl	800175c <HAL_GetTick>
 800209c:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800209e:	e01b      	b.n	80020d8 <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80020a0:	f7ff fb5c 	bl	800175c <HAL_GetTick>
 80020a4:	4602      	mov	r2, r0
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	1ad3      	subs	r3, r2, r3
 80020aa:	2b0a      	cmp	r3, #10
 80020ac:	d914      	bls.n	80020d8 <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	689b      	ldr	r3, [r3, #8]
 80020b4:	f003 0308 	and.w	r3, r3, #8
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d00d      	beq.n	80020d8 <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020c0:	f023 0312 	bic.w	r3, r3, #18
 80020c4:	f043 0210 	orr.w	r2, r3, #16
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2200      	movs	r2, #0
 80020d0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 80020d4:	2301      	movs	r3, #1
 80020d6:	e042      	b.n	800215e <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	f003 0308 	and.w	r3, r3, #8
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d1dc      	bne.n	80020a0 <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	689a      	ldr	r2, [r3, #8]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f042 0204 	orr.w	r2, r2, #4
 80020f4:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80020f6:	f7ff fb31 	bl	800175c <HAL_GetTick>
 80020fa:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80020fc:	e01b      	b.n	8002136 <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80020fe:	f7ff fb2d 	bl	800175c <HAL_GetTick>
 8002102:	4602      	mov	r2, r0
 8002104:	693b      	ldr	r3, [r7, #16]
 8002106:	1ad3      	subs	r3, r2, r3
 8002108:	2b0a      	cmp	r3, #10
 800210a:	d914      	bls.n	8002136 <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	689b      	ldr	r3, [r3, #8]
 8002112:	f003 0304 	and.w	r3, r3, #4
 8002116:	2b00      	cmp	r3, #0
 8002118:	d00d      	beq.n	8002136 <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800211e:	f023 0312 	bic.w	r3, r3, #18
 8002122:	f043 0210 	orr.w	r2, r3, #16
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2200      	movs	r2, #0
 800212e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8002132:	2301      	movs	r3, #1
 8002134:	e013      	b.n	800215e <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	689b      	ldr	r3, [r3, #8]
 800213c:	f003 0304 	and.w	r3, r3, #4
 8002140:	2b00      	cmp	r3, #0
 8002142:	d1dc      	bne.n	80020fe <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002148:	f023 0303 	bic.w	r3, r3, #3
 800214c:	f043 0201 	orr.w	r2, r3, #1
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2200      	movs	r2, #0
 8002158:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800215c:	7dfb      	ldrb	r3, [r7, #23]
}
 800215e:	4618      	mov	r0, r3
 8002160:	371c      	adds	r7, #28
 8002162:	46bd      	mov	sp, r7
 8002164:	bd90      	pop	{r4, r7, pc}
 8002166:	bf00      	nop
 8002168:	20000010 	.word	0x20000010

0800216c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800216c:	b480      	push	{r7}
 800216e:	b085      	sub	sp, #20
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	f003 0307 	and.w	r3, r3, #7
 800217a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800217c:	4b0c      	ldr	r3, [pc, #48]	@ (80021b0 <__NVIC_SetPriorityGrouping+0x44>)
 800217e:	68db      	ldr	r3, [r3, #12]
 8002180:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002182:	68ba      	ldr	r2, [r7, #8]
 8002184:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002188:	4013      	ands	r3, r2
 800218a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002194:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002198:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800219c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800219e:	4a04      	ldr	r2, [pc, #16]	@ (80021b0 <__NVIC_SetPriorityGrouping+0x44>)
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	60d3      	str	r3, [r2, #12]
}
 80021a4:	bf00      	nop
 80021a6:	3714      	adds	r7, #20
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bc80      	pop	{r7}
 80021ac:	4770      	bx	lr
 80021ae:	bf00      	nop
 80021b0:	e000ed00 	.word	0xe000ed00

080021b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021b4:	b480      	push	{r7}
 80021b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021b8:	4b04      	ldr	r3, [pc, #16]	@ (80021cc <__NVIC_GetPriorityGrouping+0x18>)
 80021ba:	68db      	ldr	r3, [r3, #12]
 80021bc:	0a1b      	lsrs	r3, r3, #8
 80021be:	f003 0307 	and.w	r3, r3, #7
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bc80      	pop	{r7}
 80021c8:	4770      	bx	lr
 80021ca:	bf00      	nop
 80021cc:	e000ed00 	.word	0xe000ed00

080021d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b083      	sub	sp, #12
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	4603      	mov	r3, r0
 80021d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	db0b      	blt.n	80021fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021e2:	79fb      	ldrb	r3, [r7, #7]
 80021e4:	f003 021f 	and.w	r2, r3, #31
 80021e8:	4906      	ldr	r1, [pc, #24]	@ (8002204 <__NVIC_EnableIRQ+0x34>)
 80021ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ee:	095b      	lsrs	r3, r3, #5
 80021f0:	2001      	movs	r0, #1
 80021f2:	fa00 f202 	lsl.w	r2, r0, r2
 80021f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80021fa:	bf00      	nop
 80021fc:	370c      	adds	r7, #12
 80021fe:	46bd      	mov	sp, r7
 8002200:	bc80      	pop	{r7}
 8002202:	4770      	bx	lr
 8002204:	e000e100 	.word	0xe000e100

08002208 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002208:	b480      	push	{r7}
 800220a:	b083      	sub	sp, #12
 800220c:	af00      	add	r7, sp, #0
 800220e:	4603      	mov	r3, r0
 8002210:	6039      	str	r1, [r7, #0]
 8002212:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002214:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002218:	2b00      	cmp	r3, #0
 800221a:	db0a      	blt.n	8002232 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	b2da      	uxtb	r2, r3
 8002220:	490c      	ldr	r1, [pc, #48]	@ (8002254 <__NVIC_SetPriority+0x4c>)
 8002222:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002226:	0112      	lsls	r2, r2, #4
 8002228:	b2d2      	uxtb	r2, r2
 800222a:	440b      	add	r3, r1
 800222c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002230:	e00a      	b.n	8002248 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	b2da      	uxtb	r2, r3
 8002236:	4908      	ldr	r1, [pc, #32]	@ (8002258 <__NVIC_SetPriority+0x50>)
 8002238:	79fb      	ldrb	r3, [r7, #7]
 800223a:	f003 030f 	and.w	r3, r3, #15
 800223e:	3b04      	subs	r3, #4
 8002240:	0112      	lsls	r2, r2, #4
 8002242:	b2d2      	uxtb	r2, r2
 8002244:	440b      	add	r3, r1
 8002246:	761a      	strb	r2, [r3, #24]
}
 8002248:	bf00      	nop
 800224a:	370c      	adds	r7, #12
 800224c:	46bd      	mov	sp, r7
 800224e:	bc80      	pop	{r7}
 8002250:	4770      	bx	lr
 8002252:	bf00      	nop
 8002254:	e000e100 	.word	0xe000e100
 8002258:	e000ed00 	.word	0xe000ed00

0800225c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800225c:	b480      	push	{r7}
 800225e:	b089      	sub	sp, #36	@ 0x24
 8002260:	af00      	add	r7, sp, #0
 8002262:	60f8      	str	r0, [r7, #12]
 8002264:	60b9      	str	r1, [r7, #8]
 8002266:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	f003 0307 	and.w	r3, r3, #7
 800226e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002270:	69fb      	ldr	r3, [r7, #28]
 8002272:	f1c3 0307 	rsb	r3, r3, #7
 8002276:	2b04      	cmp	r3, #4
 8002278:	bf28      	it	cs
 800227a:	2304      	movcs	r3, #4
 800227c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800227e:	69fb      	ldr	r3, [r7, #28]
 8002280:	3304      	adds	r3, #4
 8002282:	2b06      	cmp	r3, #6
 8002284:	d902      	bls.n	800228c <NVIC_EncodePriority+0x30>
 8002286:	69fb      	ldr	r3, [r7, #28]
 8002288:	3b03      	subs	r3, #3
 800228a:	e000      	b.n	800228e <NVIC_EncodePriority+0x32>
 800228c:	2300      	movs	r3, #0
 800228e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002290:	f04f 32ff 	mov.w	r2, #4294967295
 8002294:	69bb      	ldr	r3, [r7, #24]
 8002296:	fa02 f303 	lsl.w	r3, r2, r3
 800229a:	43da      	mvns	r2, r3
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	401a      	ands	r2, r3
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022a4:	f04f 31ff 	mov.w	r1, #4294967295
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	fa01 f303 	lsl.w	r3, r1, r3
 80022ae:	43d9      	mvns	r1, r3
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022b4:	4313      	orrs	r3, r2
         );
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	3724      	adds	r7, #36	@ 0x24
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bc80      	pop	{r7}
 80022be:	4770      	bx	lr

080022c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b082      	sub	sp, #8
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	3b01      	subs	r3, #1
 80022cc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80022d0:	d301      	bcc.n	80022d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022d2:	2301      	movs	r3, #1
 80022d4:	e00f      	b.n	80022f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022d6:	4a0a      	ldr	r2, [pc, #40]	@ (8002300 <SysTick_Config+0x40>)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	3b01      	subs	r3, #1
 80022dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022de:	210f      	movs	r1, #15
 80022e0:	f04f 30ff 	mov.w	r0, #4294967295
 80022e4:	f7ff ff90 	bl	8002208 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022e8:	4b05      	ldr	r3, [pc, #20]	@ (8002300 <SysTick_Config+0x40>)
 80022ea:	2200      	movs	r2, #0
 80022ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022ee:	4b04      	ldr	r3, [pc, #16]	@ (8002300 <SysTick_Config+0x40>)
 80022f0:	2207      	movs	r2, #7
 80022f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022f4:	2300      	movs	r3, #0
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	3708      	adds	r7, #8
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	e000e010 	.word	0xe000e010

08002304 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b082      	sub	sp, #8
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800230c:	6878      	ldr	r0, [r7, #4]
 800230e:	f7ff ff2d 	bl	800216c <__NVIC_SetPriorityGrouping>
}
 8002312:	bf00      	nop
 8002314:	3708      	adds	r7, #8
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}

0800231a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800231a:	b580      	push	{r7, lr}
 800231c:	b086      	sub	sp, #24
 800231e:	af00      	add	r7, sp, #0
 8002320:	4603      	mov	r3, r0
 8002322:	60b9      	str	r1, [r7, #8]
 8002324:	607a      	str	r2, [r7, #4]
 8002326:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002328:	2300      	movs	r3, #0
 800232a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800232c:	f7ff ff42 	bl	80021b4 <__NVIC_GetPriorityGrouping>
 8002330:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002332:	687a      	ldr	r2, [r7, #4]
 8002334:	68b9      	ldr	r1, [r7, #8]
 8002336:	6978      	ldr	r0, [r7, #20]
 8002338:	f7ff ff90 	bl	800225c <NVIC_EncodePriority>
 800233c:	4602      	mov	r2, r0
 800233e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002342:	4611      	mov	r1, r2
 8002344:	4618      	mov	r0, r3
 8002346:	f7ff ff5f 	bl	8002208 <__NVIC_SetPriority>
}
 800234a:	bf00      	nop
 800234c:	3718      	adds	r7, #24
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}

08002352 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002352:	b580      	push	{r7, lr}
 8002354:	b082      	sub	sp, #8
 8002356:	af00      	add	r7, sp, #0
 8002358:	4603      	mov	r3, r0
 800235a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800235c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002360:	4618      	mov	r0, r3
 8002362:	f7ff ff35 	bl	80021d0 <__NVIC_EnableIRQ>
}
 8002366:	bf00      	nop
 8002368:	3708      	adds	r7, #8
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}

0800236e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800236e:	b580      	push	{r7, lr}
 8002370:	b082      	sub	sp, #8
 8002372:	af00      	add	r7, sp, #0
 8002374:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002376:	6878      	ldr	r0, [r7, #4]
 8002378:	f7ff ffa2 	bl	80022c0 <SysTick_Config>
 800237c:	4603      	mov	r3, r0
}
 800237e:	4618      	mov	r0, r3
 8002380:	3708      	adds	r7, #8
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}
	...

08002388 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002388:	b480      	push	{r7}
 800238a:	b085      	sub	sp, #20
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002390:	2300      	movs	r3, #0
 8002392:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d101      	bne.n	800239e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	e043      	b.n	8002426 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	461a      	mov	r2, r3
 80023a4:	4b22      	ldr	r3, [pc, #136]	@ (8002430 <HAL_DMA_Init+0xa8>)
 80023a6:	4413      	add	r3, r2
 80023a8:	4a22      	ldr	r2, [pc, #136]	@ (8002434 <HAL_DMA_Init+0xac>)
 80023aa:	fba2 2303 	umull	r2, r3, r2, r3
 80023ae:	091b      	lsrs	r3, r3, #4
 80023b0:	009a      	lsls	r2, r3, #2
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	4a1f      	ldr	r2, [pc, #124]	@ (8002438 <HAL_DMA_Init+0xb0>)
 80023ba:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2202      	movs	r2, #2
 80023c0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80023d2:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80023d6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80023e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	68db      	ldr	r3, [r3, #12]
 80023e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	695b      	ldr	r3, [r3, #20]
 80023f2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023f8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	69db      	ldr	r3, [r3, #28]
 80023fe:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002400:	68fa      	ldr	r2, [r7, #12]
 8002402:	4313      	orrs	r3, r2
 8002404:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	68fa      	ldr	r2, [r7, #12]
 800240c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2200      	movs	r2, #0
 8002412:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2201      	movs	r2, #1
 8002418:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2200      	movs	r2, #0
 8002420:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002424:	2300      	movs	r3, #0
}
 8002426:	4618      	mov	r0, r3
 8002428:	3714      	adds	r7, #20
 800242a:	46bd      	mov	sp, r7
 800242c:	bc80      	pop	{r7}
 800242e:	4770      	bx	lr
 8002430:	bffdfff8 	.word	0xbffdfff8
 8002434:	cccccccd 	.word	0xcccccccd
 8002438:	40020000 	.word	0x40020000

0800243c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800243c:	b580      	push	{r7, lr}
 800243e:	b084      	sub	sp, #16
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002444:	2300      	movs	r3, #0
 8002446:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800244e:	b2db      	uxtb	r3, r3
 8002450:	2b02      	cmp	r3, #2
 8002452:	d005      	beq.n	8002460 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2204      	movs	r2, #4
 8002458:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	73fb      	strb	r3, [r7, #15]
 800245e:	e051      	b.n	8002504 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f022 020e 	bic.w	r2, r2, #14
 800246e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	681a      	ldr	r2, [r3, #0]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f022 0201 	bic.w	r2, r2, #1
 800247e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a22      	ldr	r2, [pc, #136]	@ (8002510 <HAL_DMA_Abort_IT+0xd4>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d029      	beq.n	80024de <HAL_DMA_Abort_IT+0xa2>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4a21      	ldr	r2, [pc, #132]	@ (8002514 <HAL_DMA_Abort_IT+0xd8>)
 8002490:	4293      	cmp	r3, r2
 8002492:	d022      	beq.n	80024da <HAL_DMA_Abort_IT+0x9e>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a1f      	ldr	r2, [pc, #124]	@ (8002518 <HAL_DMA_Abort_IT+0xdc>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d01a      	beq.n	80024d4 <HAL_DMA_Abort_IT+0x98>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a1e      	ldr	r2, [pc, #120]	@ (800251c <HAL_DMA_Abort_IT+0xe0>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d012      	beq.n	80024ce <HAL_DMA_Abort_IT+0x92>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a1c      	ldr	r2, [pc, #112]	@ (8002520 <HAL_DMA_Abort_IT+0xe4>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d00a      	beq.n	80024c8 <HAL_DMA_Abort_IT+0x8c>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a1b      	ldr	r2, [pc, #108]	@ (8002524 <HAL_DMA_Abort_IT+0xe8>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d102      	bne.n	80024c2 <HAL_DMA_Abort_IT+0x86>
 80024bc:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80024c0:	e00e      	b.n	80024e0 <HAL_DMA_Abort_IT+0xa4>
 80024c2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80024c6:	e00b      	b.n	80024e0 <HAL_DMA_Abort_IT+0xa4>
 80024c8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80024cc:	e008      	b.n	80024e0 <HAL_DMA_Abort_IT+0xa4>
 80024ce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80024d2:	e005      	b.n	80024e0 <HAL_DMA_Abort_IT+0xa4>
 80024d4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80024d8:	e002      	b.n	80024e0 <HAL_DMA_Abort_IT+0xa4>
 80024da:	2310      	movs	r3, #16
 80024dc:	e000      	b.n	80024e0 <HAL_DMA_Abort_IT+0xa4>
 80024de:	2301      	movs	r3, #1
 80024e0:	4a11      	ldr	r2, [pc, #68]	@ (8002528 <HAL_DMA_Abort_IT+0xec>)
 80024e2:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2201      	movs	r2, #1
 80024e8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2200      	movs	r2, #0
 80024f0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d003      	beq.n	8002504 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002500:	6878      	ldr	r0, [r7, #4]
 8002502:	4798      	blx	r3
    } 
  }
  return status;
 8002504:	7bfb      	ldrb	r3, [r7, #15]
}
 8002506:	4618      	mov	r0, r3
 8002508:	3710      	adds	r7, #16
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}
 800250e:	bf00      	nop
 8002510:	40020008 	.word	0x40020008
 8002514:	4002001c 	.word	0x4002001c
 8002518:	40020030 	.word	0x40020030
 800251c:	40020044 	.word	0x40020044
 8002520:	40020058 	.word	0x40020058
 8002524:	4002006c 	.word	0x4002006c
 8002528:	40020000 	.word	0x40020000

0800252c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b084      	sub	sp, #16
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002548:	2204      	movs	r2, #4
 800254a:	409a      	lsls	r2, r3
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	4013      	ands	r3, r2
 8002550:	2b00      	cmp	r3, #0
 8002552:	d04f      	beq.n	80025f4 <HAL_DMA_IRQHandler+0xc8>
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	f003 0304 	and.w	r3, r3, #4
 800255a:	2b00      	cmp	r3, #0
 800255c:	d04a      	beq.n	80025f4 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f003 0320 	and.w	r3, r3, #32
 8002568:	2b00      	cmp	r3, #0
 800256a:	d107      	bne.n	800257c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	681a      	ldr	r2, [r3, #0]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f022 0204 	bic.w	r2, r2, #4
 800257a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a66      	ldr	r2, [pc, #408]	@ (800271c <HAL_DMA_IRQHandler+0x1f0>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d029      	beq.n	80025da <HAL_DMA_IRQHandler+0xae>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a65      	ldr	r2, [pc, #404]	@ (8002720 <HAL_DMA_IRQHandler+0x1f4>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d022      	beq.n	80025d6 <HAL_DMA_IRQHandler+0xaa>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a63      	ldr	r2, [pc, #396]	@ (8002724 <HAL_DMA_IRQHandler+0x1f8>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d01a      	beq.n	80025d0 <HAL_DMA_IRQHandler+0xa4>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a62      	ldr	r2, [pc, #392]	@ (8002728 <HAL_DMA_IRQHandler+0x1fc>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d012      	beq.n	80025ca <HAL_DMA_IRQHandler+0x9e>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a60      	ldr	r2, [pc, #384]	@ (800272c <HAL_DMA_IRQHandler+0x200>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d00a      	beq.n	80025c4 <HAL_DMA_IRQHandler+0x98>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4a5f      	ldr	r2, [pc, #380]	@ (8002730 <HAL_DMA_IRQHandler+0x204>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d102      	bne.n	80025be <HAL_DMA_IRQHandler+0x92>
 80025b8:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80025bc:	e00e      	b.n	80025dc <HAL_DMA_IRQHandler+0xb0>
 80025be:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80025c2:	e00b      	b.n	80025dc <HAL_DMA_IRQHandler+0xb0>
 80025c4:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80025c8:	e008      	b.n	80025dc <HAL_DMA_IRQHandler+0xb0>
 80025ca:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80025ce:	e005      	b.n	80025dc <HAL_DMA_IRQHandler+0xb0>
 80025d0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80025d4:	e002      	b.n	80025dc <HAL_DMA_IRQHandler+0xb0>
 80025d6:	2340      	movs	r3, #64	@ 0x40
 80025d8:	e000      	b.n	80025dc <HAL_DMA_IRQHandler+0xb0>
 80025da:	2304      	movs	r3, #4
 80025dc:	4a55      	ldr	r2, [pc, #340]	@ (8002734 <HAL_DMA_IRQHandler+0x208>)
 80025de:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	f000 8094 	beq.w	8002712 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025ee:	6878      	ldr	r0, [r7, #4]
 80025f0:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80025f2:	e08e      	b.n	8002712 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025f8:	2202      	movs	r2, #2
 80025fa:	409a      	lsls	r2, r3
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	4013      	ands	r3, r2
 8002600:	2b00      	cmp	r3, #0
 8002602:	d056      	beq.n	80026b2 <HAL_DMA_IRQHandler+0x186>
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	f003 0302 	and.w	r3, r3, #2
 800260a:	2b00      	cmp	r3, #0
 800260c:	d051      	beq.n	80026b2 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f003 0320 	and.w	r3, r3, #32
 8002618:	2b00      	cmp	r3, #0
 800261a:	d10b      	bne.n	8002634 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	681a      	ldr	r2, [r3, #0]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f022 020a 	bic.w	r2, r2, #10
 800262a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2201      	movs	r2, #1
 8002630:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a38      	ldr	r2, [pc, #224]	@ (800271c <HAL_DMA_IRQHandler+0x1f0>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d029      	beq.n	8002692 <HAL_DMA_IRQHandler+0x166>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a37      	ldr	r2, [pc, #220]	@ (8002720 <HAL_DMA_IRQHandler+0x1f4>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d022      	beq.n	800268e <HAL_DMA_IRQHandler+0x162>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a35      	ldr	r2, [pc, #212]	@ (8002724 <HAL_DMA_IRQHandler+0x1f8>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d01a      	beq.n	8002688 <HAL_DMA_IRQHandler+0x15c>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a34      	ldr	r2, [pc, #208]	@ (8002728 <HAL_DMA_IRQHandler+0x1fc>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d012      	beq.n	8002682 <HAL_DMA_IRQHandler+0x156>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a32      	ldr	r2, [pc, #200]	@ (800272c <HAL_DMA_IRQHandler+0x200>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d00a      	beq.n	800267c <HAL_DMA_IRQHandler+0x150>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a31      	ldr	r2, [pc, #196]	@ (8002730 <HAL_DMA_IRQHandler+0x204>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d102      	bne.n	8002676 <HAL_DMA_IRQHandler+0x14a>
 8002670:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002674:	e00e      	b.n	8002694 <HAL_DMA_IRQHandler+0x168>
 8002676:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800267a:	e00b      	b.n	8002694 <HAL_DMA_IRQHandler+0x168>
 800267c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002680:	e008      	b.n	8002694 <HAL_DMA_IRQHandler+0x168>
 8002682:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002686:	e005      	b.n	8002694 <HAL_DMA_IRQHandler+0x168>
 8002688:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800268c:	e002      	b.n	8002694 <HAL_DMA_IRQHandler+0x168>
 800268e:	2320      	movs	r3, #32
 8002690:	e000      	b.n	8002694 <HAL_DMA_IRQHandler+0x168>
 8002692:	2302      	movs	r3, #2
 8002694:	4a27      	ldr	r2, [pc, #156]	@ (8002734 <HAL_DMA_IRQHandler+0x208>)
 8002696:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2200      	movs	r2, #0
 800269c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d034      	beq.n	8002712 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026ac:	6878      	ldr	r0, [r7, #4]
 80026ae:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80026b0:	e02f      	b.n	8002712 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026b6:	2208      	movs	r2, #8
 80026b8:	409a      	lsls	r2, r3
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	4013      	ands	r3, r2
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d028      	beq.n	8002714 <HAL_DMA_IRQHandler+0x1e8>
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	f003 0308 	and.w	r3, r3, #8
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d023      	beq.n	8002714 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	681a      	ldr	r2, [r3, #0]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f022 020e 	bic.w	r2, r2, #14
 80026da:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026e4:	2101      	movs	r1, #1
 80026e6:	fa01 f202 	lsl.w	r2, r1, r2
 80026ea:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2201      	movs	r2, #1
 80026f0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2201      	movs	r2, #1
 80026f6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2200      	movs	r2, #0
 80026fe:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002706:	2b00      	cmp	r3, #0
 8002708:	d004      	beq.n	8002714 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800270e:	6878      	ldr	r0, [r7, #4]
 8002710:	4798      	blx	r3
    }
  }
  return;
 8002712:	bf00      	nop
 8002714:	bf00      	nop
}
 8002716:	3710      	adds	r7, #16
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}
 800271c:	40020008 	.word	0x40020008
 8002720:	4002001c 	.word	0x4002001c
 8002724:	40020030 	.word	0x40020030
 8002728:	40020044 	.word	0x40020044
 800272c:	40020058 	.word	0x40020058
 8002730:	4002006c 	.word	0x4002006c
 8002734:	40020000 	.word	0x40020000

08002738 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002738:	b480      	push	{r7}
 800273a:	b083      	sub	sp, #12
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002746:	b2db      	uxtb	r3, r3
}
 8002748:	4618      	mov	r0, r3
 800274a:	370c      	adds	r7, #12
 800274c:	46bd      	mov	sp, r7
 800274e:	bc80      	pop	{r7}
 8002750:	4770      	bx	lr
	...

08002754 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002754:	b480      	push	{r7}
 8002756:	b08b      	sub	sp, #44	@ 0x2c
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
 800275c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800275e:	2300      	movs	r3, #0
 8002760:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002762:	2300      	movs	r3, #0
 8002764:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002766:	e169      	b.n	8002a3c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002768:	2201      	movs	r2, #1
 800276a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800276c:	fa02 f303 	lsl.w	r3, r2, r3
 8002770:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	69fa      	ldr	r2, [r7, #28]
 8002778:	4013      	ands	r3, r2
 800277a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800277c:	69ba      	ldr	r2, [r7, #24]
 800277e:	69fb      	ldr	r3, [r7, #28]
 8002780:	429a      	cmp	r2, r3
 8002782:	f040 8158 	bne.w	8002a36 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	4a9a      	ldr	r2, [pc, #616]	@ (80029f4 <HAL_GPIO_Init+0x2a0>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d05e      	beq.n	800284e <HAL_GPIO_Init+0xfa>
 8002790:	4a98      	ldr	r2, [pc, #608]	@ (80029f4 <HAL_GPIO_Init+0x2a0>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d875      	bhi.n	8002882 <HAL_GPIO_Init+0x12e>
 8002796:	4a98      	ldr	r2, [pc, #608]	@ (80029f8 <HAL_GPIO_Init+0x2a4>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d058      	beq.n	800284e <HAL_GPIO_Init+0xfa>
 800279c:	4a96      	ldr	r2, [pc, #600]	@ (80029f8 <HAL_GPIO_Init+0x2a4>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d86f      	bhi.n	8002882 <HAL_GPIO_Init+0x12e>
 80027a2:	4a96      	ldr	r2, [pc, #600]	@ (80029fc <HAL_GPIO_Init+0x2a8>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d052      	beq.n	800284e <HAL_GPIO_Init+0xfa>
 80027a8:	4a94      	ldr	r2, [pc, #592]	@ (80029fc <HAL_GPIO_Init+0x2a8>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d869      	bhi.n	8002882 <HAL_GPIO_Init+0x12e>
 80027ae:	4a94      	ldr	r2, [pc, #592]	@ (8002a00 <HAL_GPIO_Init+0x2ac>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d04c      	beq.n	800284e <HAL_GPIO_Init+0xfa>
 80027b4:	4a92      	ldr	r2, [pc, #584]	@ (8002a00 <HAL_GPIO_Init+0x2ac>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d863      	bhi.n	8002882 <HAL_GPIO_Init+0x12e>
 80027ba:	4a92      	ldr	r2, [pc, #584]	@ (8002a04 <HAL_GPIO_Init+0x2b0>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d046      	beq.n	800284e <HAL_GPIO_Init+0xfa>
 80027c0:	4a90      	ldr	r2, [pc, #576]	@ (8002a04 <HAL_GPIO_Init+0x2b0>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d85d      	bhi.n	8002882 <HAL_GPIO_Init+0x12e>
 80027c6:	2b12      	cmp	r3, #18
 80027c8:	d82a      	bhi.n	8002820 <HAL_GPIO_Init+0xcc>
 80027ca:	2b12      	cmp	r3, #18
 80027cc:	d859      	bhi.n	8002882 <HAL_GPIO_Init+0x12e>
 80027ce:	a201      	add	r2, pc, #4	@ (adr r2, 80027d4 <HAL_GPIO_Init+0x80>)
 80027d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027d4:	0800284f 	.word	0x0800284f
 80027d8:	08002829 	.word	0x08002829
 80027dc:	0800283b 	.word	0x0800283b
 80027e0:	0800287d 	.word	0x0800287d
 80027e4:	08002883 	.word	0x08002883
 80027e8:	08002883 	.word	0x08002883
 80027ec:	08002883 	.word	0x08002883
 80027f0:	08002883 	.word	0x08002883
 80027f4:	08002883 	.word	0x08002883
 80027f8:	08002883 	.word	0x08002883
 80027fc:	08002883 	.word	0x08002883
 8002800:	08002883 	.word	0x08002883
 8002804:	08002883 	.word	0x08002883
 8002808:	08002883 	.word	0x08002883
 800280c:	08002883 	.word	0x08002883
 8002810:	08002883 	.word	0x08002883
 8002814:	08002883 	.word	0x08002883
 8002818:	08002831 	.word	0x08002831
 800281c:	08002845 	.word	0x08002845
 8002820:	4a79      	ldr	r2, [pc, #484]	@ (8002a08 <HAL_GPIO_Init+0x2b4>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d013      	beq.n	800284e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002826:	e02c      	b.n	8002882 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	68db      	ldr	r3, [r3, #12]
 800282c:	623b      	str	r3, [r7, #32]
          break;
 800282e:	e029      	b.n	8002884 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	68db      	ldr	r3, [r3, #12]
 8002834:	3304      	adds	r3, #4
 8002836:	623b      	str	r3, [r7, #32]
          break;
 8002838:	e024      	b.n	8002884 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	68db      	ldr	r3, [r3, #12]
 800283e:	3308      	adds	r3, #8
 8002840:	623b      	str	r3, [r7, #32]
          break;
 8002842:	e01f      	b.n	8002884 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	68db      	ldr	r3, [r3, #12]
 8002848:	330c      	adds	r3, #12
 800284a:	623b      	str	r3, [r7, #32]
          break;
 800284c:	e01a      	b.n	8002884 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	689b      	ldr	r3, [r3, #8]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d102      	bne.n	800285c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002856:	2304      	movs	r3, #4
 8002858:	623b      	str	r3, [r7, #32]
          break;
 800285a:	e013      	b.n	8002884 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	689b      	ldr	r3, [r3, #8]
 8002860:	2b01      	cmp	r3, #1
 8002862:	d105      	bne.n	8002870 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002864:	2308      	movs	r3, #8
 8002866:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	69fa      	ldr	r2, [r7, #28]
 800286c:	611a      	str	r2, [r3, #16]
          break;
 800286e:	e009      	b.n	8002884 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002870:	2308      	movs	r3, #8
 8002872:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	69fa      	ldr	r2, [r7, #28]
 8002878:	615a      	str	r2, [r3, #20]
          break;
 800287a:	e003      	b.n	8002884 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800287c:	2300      	movs	r3, #0
 800287e:	623b      	str	r3, [r7, #32]
          break;
 8002880:	e000      	b.n	8002884 <HAL_GPIO_Init+0x130>
          break;
 8002882:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002884:	69bb      	ldr	r3, [r7, #24]
 8002886:	2bff      	cmp	r3, #255	@ 0xff
 8002888:	d801      	bhi.n	800288e <HAL_GPIO_Init+0x13a>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	e001      	b.n	8002892 <HAL_GPIO_Init+0x13e>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	3304      	adds	r3, #4
 8002892:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002894:	69bb      	ldr	r3, [r7, #24]
 8002896:	2bff      	cmp	r3, #255	@ 0xff
 8002898:	d802      	bhi.n	80028a0 <HAL_GPIO_Init+0x14c>
 800289a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800289c:	009b      	lsls	r3, r3, #2
 800289e:	e002      	b.n	80028a6 <HAL_GPIO_Init+0x152>
 80028a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028a2:	3b08      	subs	r3, #8
 80028a4:	009b      	lsls	r3, r3, #2
 80028a6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	681a      	ldr	r2, [r3, #0]
 80028ac:	210f      	movs	r1, #15
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	fa01 f303 	lsl.w	r3, r1, r3
 80028b4:	43db      	mvns	r3, r3
 80028b6:	401a      	ands	r2, r3
 80028b8:	6a39      	ldr	r1, [r7, #32]
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	fa01 f303 	lsl.w	r3, r1, r3
 80028c0:	431a      	orrs	r2, r3
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	f000 80b1 	beq.w	8002a36 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80028d4:	4b4d      	ldr	r3, [pc, #308]	@ (8002a0c <HAL_GPIO_Init+0x2b8>)
 80028d6:	699b      	ldr	r3, [r3, #24]
 80028d8:	4a4c      	ldr	r2, [pc, #304]	@ (8002a0c <HAL_GPIO_Init+0x2b8>)
 80028da:	f043 0301 	orr.w	r3, r3, #1
 80028de:	6193      	str	r3, [r2, #24]
 80028e0:	4b4a      	ldr	r3, [pc, #296]	@ (8002a0c <HAL_GPIO_Init+0x2b8>)
 80028e2:	699b      	ldr	r3, [r3, #24]
 80028e4:	f003 0301 	and.w	r3, r3, #1
 80028e8:	60bb      	str	r3, [r7, #8]
 80028ea:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80028ec:	4a48      	ldr	r2, [pc, #288]	@ (8002a10 <HAL_GPIO_Init+0x2bc>)
 80028ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028f0:	089b      	lsrs	r3, r3, #2
 80028f2:	3302      	adds	r3, #2
 80028f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028f8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80028fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028fc:	f003 0303 	and.w	r3, r3, #3
 8002900:	009b      	lsls	r3, r3, #2
 8002902:	220f      	movs	r2, #15
 8002904:	fa02 f303 	lsl.w	r3, r2, r3
 8002908:	43db      	mvns	r3, r3
 800290a:	68fa      	ldr	r2, [r7, #12]
 800290c:	4013      	ands	r3, r2
 800290e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	4a40      	ldr	r2, [pc, #256]	@ (8002a14 <HAL_GPIO_Init+0x2c0>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d013      	beq.n	8002940 <HAL_GPIO_Init+0x1ec>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	4a3f      	ldr	r2, [pc, #252]	@ (8002a18 <HAL_GPIO_Init+0x2c4>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d00d      	beq.n	800293c <HAL_GPIO_Init+0x1e8>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	4a3e      	ldr	r2, [pc, #248]	@ (8002a1c <HAL_GPIO_Init+0x2c8>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d007      	beq.n	8002938 <HAL_GPIO_Init+0x1e4>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	4a3d      	ldr	r2, [pc, #244]	@ (8002a20 <HAL_GPIO_Init+0x2cc>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d101      	bne.n	8002934 <HAL_GPIO_Init+0x1e0>
 8002930:	2303      	movs	r3, #3
 8002932:	e006      	b.n	8002942 <HAL_GPIO_Init+0x1ee>
 8002934:	2304      	movs	r3, #4
 8002936:	e004      	b.n	8002942 <HAL_GPIO_Init+0x1ee>
 8002938:	2302      	movs	r3, #2
 800293a:	e002      	b.n	8002942 <HAL_GPIO_Init+0x1ee>
 800293c:	2301      	movs	r3, #1
 800293e:	e000      	b.n	8002942 <HAL_GPIO_Init+0x1ee>
 8002940:	2300      	movs	r3, #0
 8002942:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002944:	f002 0203 	and.w	r2, r2, #3
 8002948:	0092      	lsls	r2, r2, #2
 800294a:	4093      	lsls	r3, r2
 800294c:	68fa      	ldr	r2, [r7, #12]
 800294e:	4313      	orrs	r3, r2
 8002950:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002952:	492f      	ldr	r1, [pc, #188]	@ (8002a10 <HAL_GPIO_Init+0x2bc>)
 8002954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002956:	089b      	lsrs	r3, r3, #2
 8002958:	3302      	adds	r3, #2
 800295a:	68fa      	ldr	r2, [r7, #12]
 800295c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002968:	2b00      	cmp	r3, #0
 800296a:	d006      	beq.n	800297a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800296c:	4b2d      	ldr	r3, [pc, #180]	@ (8002a24 <HAL_GPIO_Init+0x2d0>)
 800296e:	689a      	ldr	r2, [r3, #8]
 8002970:	492c      	ldr	r1, [pc, #176]	@ (8002a24 <HAL_GPIO_Init+0x2d0>)
 8002972:	69bb      	ldr	r3, [r7, #24]
 8002974:	4313      	orrs	r3, r2
 8002976:	608b      	str	r3, [r1, #8]
 8002978:	e006      	b.n	8002988 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800297a:	4b2a      	ldr	r3, [pc, #168]	@ (8002a24 <HAL_GPIO_Init+0x2d0>)
 800297c:	689a      	ldr	r2, [r3, #8]
 800297e:	69bb      	ldr	r3, [r7, #24]
 8002980:	43db      	mvns	r3, r3
 8002982:	4928      	ldr	r1, [pc, #160]	@ (8002a24 <HAL_GPIO_Init+0x2d0>)
 8002984:	4013      	ands	r3, r2
 8002986:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002990:	2b00      	cmp	r3, #0
 8002992:	d006      	beq.n	80029a2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002994:	4b23      	ldr	r3, [pc, #140]	@ (8002a24 <HAL_GPIO_Init+0x2d0>)
 8002996:	68da      	ldr	r2, [r3, #12]
 8002998:	4922      	ldr	r1, [pc, #136]	@ (8002a24 <HAL_GPIO_Init+0x2d0>)
 800299a:	69bb      	ldr	r3, [r7, #24]
 800299c:	4313      	orrs	r3, r2
 800299e:	60cb      	str	r3, [r1, #12]
 80029a0:	e006      	b.n	80029b0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80029a2:	4b20      	ldr	r3, [pc, #128]	@ (8002a24 <HAL_GPIO_Init+0x2d0>)
 80029a4:	68da      	ldr	r2, [r3, #12]
 80029a6:	69bb      	ldr	r3, [r7, #24]
 80029a8:	43db      	mvns	r3, r3
 80029aa:	491e      	ldr	r1, [pc, #120]	@ (8002a24 <HAL_GPIO_Init+0x2d0>)
 80029ac:	4013      	ands	r3, r2
 80029ae:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d006      	beq.n	80029ca <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80029bc:	4b19      	ldr	r3, [pc, #100]	@ (8002a24 <HAL_GPIO_Init+0x2d0>)
 80029be:	685a      	ldr	r2, [r3, #4]
 80029c0:	4918      	ldr	r1, [pc, #96]	@ (8002a24 <HAL_GPIO_Init+0x2d0>)
 80029c2:	69bb      	ldr	r3, [r7, #24]
 80029c4:	4313      	orrs	r3, r2
 80029c6:	604b      	str	r3, [r1, #4]
 80029c8:	e006      	b.n	80029d8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80029ca:	4b16      	ldr	r3, [pc, #88]	@ (8002a24 <HAL_GPIO_Init+0x2d0>)
 80029cc:	685a      	ldr	r2, [r3, #4]
 80029ce:	69bb      	ldr	r3, [r7, #24]
 80029d0:	43db      	mvns	r3, r3
 80029d2:	4914      	ldr	r1, [pc, #80]	@ (8002a24 <HAL_GPIO_Init+0x2d0>)
 80029d4:	4013      	ands	r3, r2
 80029d6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d021      	beq.n	8002a28 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80029e4:	4b0f      	ldr	r3, [pc, #60]	@ (8002a24 <HAL_GPIO_Init+0x2d0>)
 80029e6:	681a      	ldr	r2, [r3, #0]
 80029e8:	490e      	ldr	r1, [pc, #56]	@ (8002a24 <HAL_GPIO_Init+0x2d0>)
 80029ea:	69bb      	ldr	r3, [r7, #24]
 80029ec:	4313      	orrs	r3, r2
 80029ee:	600b      	str	r3, [r1, #0]
 80029f0:	e021      	b.n	8002a36 <HAL_GPIO_Init+0x2e2>
 80029f2:	bf00      	nop
 80029f4:	10320000 	.word	0x10320000
 80029f8:	10310000 	.word	0x10310000
 80029fc:	10220000 	.word	0x10220000
 8002a00:	10210000 	.word	0x10210000
 8002a04:	10120000 	.word	0x10120000
 8002a08:	10110000 	.word	0x10110000
 8002a0c:	40021000 	.word	0x40021000
 8002a10:	40010000 	.word	0x40010000
 8002a14:	40010800 	.word	0x40010800
 8002a18:	40010c00 	.word	0x40010c00
 8002a1c:	40011000 	.word	0x40011000
 8002a20:	40011400 	.word	0x40011400
 8002a24:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002a28:	4b0b      	ldr	r3, [pc, #44]	@ (8002a58 <HAL_GPIO_Init+0x304>)
 8002a2a:	681a      	ldr	r2, [r3, #0]
 8002a2c:	69bb      	ldr	r3, [r7, #24]
 8002a2e:	43db      	mvns	r3, r3
 8002a30:	4909      	ldr	r1, [pc, #36]	@ (8002a58 <HAL_GPIO_Init+0x304>)
 8002a32:	4013      	ands	r3, r2
 8002a34:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002a36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a38:	3301      	adds	r3, #1
 8002a3a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a42:	fa22 f303 	lsr.w	r3, r2, r3
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	f47f ae8e 	bne.w	8002768 <HAL_GPIO_Init+0x14>
  }
}
 8002a4c:	bf00      	nop
 8002a4e:	bf00      	nop
 8002a50:	372c      	adds	r7, #44	@ 0x2c
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bc80      	pop	{r7}
 8002a56:	4770      	bx	lr
 8002a58:	40010400 	.word	0x40010400

08002a5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b083      	sub	sp, #12
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
 8002a64:	460b      	mov	r3, r1
 8002a66:	807b      	strh	r3, [r7, #2]
 8002a68:	4613      	mov	r3, r2
 8002a6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002a6c:	787b      	ldrb	r3, [r7, #1]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d003      	beq.n	8002a7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a72:	887a      	ldrh	r2, [r7, #2]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002a78:	e003      	b.n	8002a82 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002a7a:	887b      	ldrh	r3, [r7, #2]
 8002a7c:	041a      	lsls	r2, r3, #16
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	611a      	str	r2, [r3, #16]
}
 8002a82:	bf00      	nop
 8002a84:	370c      	adds	r7, #12
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bc80      	pop	{r7}
 8002a8a:	4770      	bx	lr

08002a8c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b085      	sub	sp, #20
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
 8002a94:	460b      	mov	r3, r1
 8002a96:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	68db      	ldr	r3, [r3, #12]
 8002a9c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002a9e:	887a      	ldrh	r2, [r7, #2]
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	4013      	ands	r3, r2
 8002aa4:	041a      	lsls	r2, r3, #16
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	43d9      	mvns	r1, r3
 8002aaa:	887b      	ldrh	r3, [r7, #2]
 8002aac:	400b      	ands	r3, r1
 8002aae:	431a      	orrs	r2, r3
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	611a      	str	r2, [r3, #16]
}
 8002ab4:	bf00      	nop
 8002ab6:	3714      	adds	r7, #20
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bc80      	pop	{r7}
 8002abc:	4770      	bx	lr
	...

08002ac0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b082      	sub	sp, #8
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002aca:	4b08      	ldr	r3, [pc, #32]	@ (8002aec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002acc:	695a      	ldr	r2, [r3, #20]
 8002ace:	88fb      	ldrh	r3, [r7, #6]
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d006      	beq.n	8002ae4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002ad6:	4a05      	ldr	r2, [pc, #20]	@ (8002aec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ad8:	88fb      	ldrh	r3, [r7, #6]
 8002ada:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002adc:	88fb      	ldrh	r3, [r7, #6]
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f000 f806 	bl	8002af0 <HAL_GPIO_EXTI_Callback>
  }
}
 8002ae4:	bf00      	nop
 8002ae6:	3708      	adds	r7, #8
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}
 8002aec:	40010400 	.word	0x40010400

08002af0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002af0:	b480      	push	{r7}
 8002af2:	b083      	sub	sp, #12
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	4603      	mov	r3, r0
 8002af8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002afa:	bf00      	nop
 8002afc:	370c      	adds	r7, #12
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bc80      	pop	{r7}
 8002b02:	4770      	bx	lr

08002b04 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b084      	sub	sp, #16
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d101      	bne.n	8002b16 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	e12b      	b.n	8002d6e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b1c:	b2db      	uxtb	r3, r3
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d106      	bne.n	8002b30 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2200      	movs	r2, #0
 8002b26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	f7fe f9cc 	bl	8000ec8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2224      	movs	r2, #36	@ 0x24
 8002b34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	681a      	ldr	r2, [r3, #0]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f022 0201 	bic.w	r2, r2, #1
 8002b46:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	681a      	ldr	r2, [r3, #0]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002b56:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	681a      	ldr	r2, [r3, #0]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002b66:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002b68:	f003 fa76 	bl	8006058 <HAL_RCC_GetPCLK1Freq>
 8002b6c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	4a81      	ldr	r2, [pc, #516]	@ (8002d78 <HAL_I2C_Init+0x274>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d807      	bhi.n	8002b88 <HAL_I2C_Init+0x84>
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	4a80      	ldr	r2, [pc, #512]	@ (8002d7c <HAL_I2C_Init+0x278>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	bf94      	ite	ls
 8002b80:	2301      	movls	r3, #1
 8002b82:	2300      	movhi	r3, #0
 8002b84:	b2db      	uxtb	r3, r3
 8002b86:	e006      	b.n	8002b96 <HAL_I2C_Init+0x92>
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	4a7d      	ldr	r2, [pc, #500]	@ (8002d80 <HAL_I2C_Init+0x27c>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	bf94      	ite	ls
 8002b90:	2301      	movls	r3, #1
 8002b92:	2300      	movhi	r3, #0
 8002b94:	b2db      	uxtb	r3, r3
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d001      	beq.n	8002b9e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e0e7      	b.n	8002d6e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	4a78      	ldr	r2, [pc, #480]	@ (8002d84 <HAL_I2C_Init+0x280>)
 8002ba2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ba6:	0c9b      	lsrs	r3, r3, #18
 8002ba8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	68ba      	ldr	r2, [r7, #8]
 8002bba:	430a      	orrs	r2, r1
 8002bbc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	6a1b      	ldr	r3, [r3, #32]
 8002bc4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	4a6a      	ldr	r2, [pc, #424]	@ (8002d78 <HAL_I2C_Init+0x274>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d802      	bhi.n	8002bd8 <HAL_I2C_Init+0xd4>
 8002bd2:	68bb      	ldr	r3, [r7, #8]
 8002bd4:	3301      	adds	r3, #1
 8002bd6:	e009      	b.n	8002bec <HAL_I2C_Init+0xe8>
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002bde:	fb02 f303 	mul.w	r3, r2, r3
 8002be2:	4a69      	ldr	r2, [pc, #420]	@ (8002d88 <HAL_I2C_Init+0x284>)
 8002be4:	fba2 2303 	umull	r2, r3, r2, r3
 8002be8:	099b      	lsrs	r3, r3, #6
 8002bea:	3301      	adds	r3, #1
 8002bec:	687a      	ldr	r2, [r7, #4]
 8002bee:	6812      	ldr	r2, [r2, #0]
 8002bf0:	430b      	orrs	r3, r1
 8002bf2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	69db      	ldr	r3, [r3, #28]
 8002bfa:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002bfe:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	495c      	ldr	r1, [pc, #368]	@ (8002d78 <HAL_I2C_Init+0x274>)
 8002c08:	428b      	cmp	r3, r1
 8002c0a:	d819      	bhi.n	8002c40 <HAL_I2C_Init+0x13c>
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	1e59      	subs	r1, r3, #1
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	005b      	lsls	r3, r3, #1
 8002c16:	fbb1 f3f3 	udiv	r3, r1, r3
 8002c1a:	1c59      	adds	r1, r3, #1
 8002c1c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002c20:	400b      	ands	r3, r1
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d00a      	beq.n	8002c3c <HAL_I2C_Init+0x138>
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	1e59      	subs	r1, r3, #1
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	005b      	lsls	r3, r3, #1
 8002c30:	fbb1 f3f3 	udiv	r3, r1, r3
 8002c34:	3301      	adds	r3, #1
 8002c36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c3a:	e051      	b.n	8002ce0 <HAL_I2C_Init+0x1dc>
 8002c3c:	2304      	movs	r3, #4
 8002c3e:	e04f      	b.n	8002ce0 <HAL_I2C_Init+0x1dc>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d111      	bne.n	8002c6c <HAL_I2C_Init+0x168>
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	1e58      	subs	r0, r3, #1
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6859      	ldr	r1, [r3, #4]
 8002c50:	460b      	mov	r3, r1
 8002c52:	005b      	lsls	r3, r3, #1
 8002c54:	440b      	add	r3, r1
 8002c56:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c5a:	3301      	adds	r3, #1
 8002c5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	bf0c      	ite	eq
 8002c64:	2301      	moveq	r3, #1
 8002c66:	2300      	movne	r3, #0
 8002c68:	b2db      	uxtb	r3, r3
 8002c6a:	e012      	b.n	8002c92 <HAL_I2C_Init+0x18e>
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	1e58      	subs	r0, r3, #1
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6859      	ldr	r1, [r3, #4]
 8002c74:	460b      	mov	r3, r1
 8002c76:	009b      	lsls	r3, r3, #2
 8002c78:	440b      	add	r3, r1
 8002c7a:	0099      	lsls	r1, r3, #2
 8002c7c:	440b      	add	r3, r1
 8002c7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c82:	3301      	adds	r3, #1
 8002c84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	bf0c      	ite	eq
 8002c8c:	2301      	moveq	r3, #1
 8002c8e:	2300      	movne	r3, #0
 8002c90:	b2db      	uxtb	r3, r3
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d001      	beq.n	8002c9a <HAL_I2C_Init+0x196>
 8002c96:	2301      	movs	r3, #1
 8002c98:	e022      	b.n	8002ce0 <HAL_I2C_Init+0x1dc>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	689b      	ldr	r3, [r3, #8]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d10e      	bne.n	8002cc0 <HAL_I2C_Init+0x1bc>
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	1e58      	subs	r0, r3, #1
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6859      	ldr	r1, [r3, #4]
 8002caa:	460b      	mov	r3, r1
 8002cac:	005b      	lsls	r3, r3, #1
 8002cae:	440b      	add	r3, r1
 8002cb0:	fbb0 f3f3 	udiv	r3, r0, r3
 8002cb4:	3301      	adds	r3, #1
 8002cb6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002cbe:	e00f      	b.n	8002ce0 <HAL_I2C_Init+0x1dc>
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	1e58      	subs	r0, r3, #1
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6859      	ldr	r1, [r3, #4]
 8002cc8:	460b      	mov	r3, r1
 8002cca:	009b      	lsls	r3, r3, #2
 8002ccc:	440b      	add	r3, r1
 8002cce:	0099      	lsls	r1, r3, #2
 8002cd0:	440b      	add	r3, r1
 8002cd2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002cd6:	3301      	adds	r3, #1
 8002cd8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cdc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002ce0:	6879      	ldr	r1, [r7, #4]
 8002ce2:	6809      	ldr	r1, [r1, #0]
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	69da      	ldr	r2, [r3, #28]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6a1b      	ldr	r3, [r3, #32]
 8002cfa:	431a      	orrs	r2, r3
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	430a      	orrs	r2, r1
 8002d02:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	689b      	ldr	r3, [r3, #8]
 8002d0a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002d0e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002d12:	687a      	ldr	r2, [r7, #4]
 8002d14:	6911      	ldr	r1, [r2, #16]
 8002d16:	687a      	ldr	r2, [r7, #4]
 8002d18:	68d2      	ldr	r2, [r2, #12]
 8002d1a:	4311      	orrs	r1, r2
 8002d1c:	687a      	ldr	r2, [r7, #4]
 8002d1e:	6812      	ldr	r2, [r2, #0]
 8002d20:	430b      	orrs	r3, r1
 8002d22:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	68db      	ldr	r3, [r3, #12]
 8002d2a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	695a      	ldr	r2, [r3, #20]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	699b      	ldr	r3, [r3, #24]
 8002d36:	431a      	orrs	r2, r3
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	430a      	orrs	r2, r1
 8002d3e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	681a      	ldr	r2, [r3, #0]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f042 0201 	orr.w	r2, r2, #1
 8002d4e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2200      	movs	r2, #0
 8002d54:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2220      	movs	r2, #32
 8002d5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2200      	movs	r2, #0
 8002d62:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2200      	movs	r2, #0
 8002d68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002d6c:	2300      	movs	r3, #0
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	3710      	adds	r7, #16
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}
 8002d76:	bf00      	nop
 8002d78:	000186a0 	.word	0x000186a0
 8002d7c:	001e847f 	.word	0x001e847f
 8002d80:	003d08ff 	.word	0x003d08ff
 8002d84:	431bde83 	.word	0x431bde83
 8002d88:	10624dd3 	.word	0x10624dd3

08002d8c <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b083      	sub	sp, #12
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	695b      	ldr	r3, [r3, #20]
 8002d9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d9e:	2b80      	cmp	r3, #128	@ 0x80
 8002da0:	d103      	bne.n	8002daa <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	2200      	movs	r2, #0
 8002da8:	611a      	str	r2, [r3, #16]
  }
}
 8002daa:	bf00      	nop
 8002dac:	370c      	adds	r7, #12
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bc80      	pop	{r7}
 8002db2:	4770      	bx	lr

08002db4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b088      	sub	sp, #32
 8002db8:	af02      	add	r7, sp, #8
 8002dba:	60f8      	str	r0, [r7, #12]
 8002dbc:	607a      	str	r2, [r7, #4]
 8002dbe:	461a      	mov	r2, r3
 8002dc0:	460b      	mov	r3, r1
 8002dc2:	817b      	strh	r3, [r7, #10]
 8002dc4:	4613      	mov	r3, r2
 8002dc6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002dc8:	f7fe fcc8 	bl	800175c <HAL_GetTick>
 8002dcc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002dd4:	b2db      	uxtb	r3, r3
 8002dd6:	2b20      	cmp	r3, #32
 8002dd8:	f040 80e0 	bne.w	8002f9c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	9300      	str	r3, [sp, #0]
 8002de0:	2319      	movs	r3, #25
 8002de2:	2201      	movs	r2, #1
 8002de4:	4970      	ldr	r1, [pc, #448]	@ (8002fa8 <HAL_I2C_Master_Transmit+0x1f4>)
 8002de6:	68f8      	ldr	r0, [r7, #12]
 8002de8:	f002 faea 	bl	80053c0 <I2C_WaitOnFlagUntilTimeout>
 8002dec:	4603      	mov	r3, r0
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d001      	beq.n	8002df6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002df2:	2302      	movs	r3, #2
 8002df4:	e0d3      	b.n	8002f9e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002dfc:	2b01      	cmp	r3, #1
 8002dfe:	d101      	bne.n	8002e04 <HAL_I2C_Master_Transmit+0x50>
 8002e00:	2302      	movs	r3, #2
 8002e02:	e0cc      	b.n	8002f9e <HAL_I2C_Master_Transmit+0x1ea>
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	2201      	movs	r2, #1
 8002e08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f003 0301 	and.w	r3, r3, #1
 8002e16:	2b01      	cmp	r3, #1
 8002e18:	d007      	beq.n	8002e2a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	681a      	ldr	r2, [r3, #0]
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f042 0201 	orr.w	r2, r2, #1
 8002e28:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	681a      	ldr	r2, [r3, #0]
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002e38:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	2221      	movs	r2, #33	@ 0x21
 8002e3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	2210      	movs	r2, #16
 8002e46:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	687a      	ldr	r2, [r7, #4]
 8002e54:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	893a      	ldrh	r2, [r7, #8]
 8002e5a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e60:	b29a      	uxth	r2, r3
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	4a50      	ldr	r2, [pc, #320]	@ (8002fac <HAL_I2C_Master_Transmit+0x1f8>)
 8002e6a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002e6c:	8979      	ldrh	r1, [r7, #10]
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	6a3a      	ldr	r2, [r7, #32]
 8002e72:	68f8      	ldr	r0, [r7, #12]
 8002e74:	f001 fffc 	bl	8004e70 <I2C_MasterRequestWrite>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d001      	beq.n	8002e82 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e08d      	b.n	8002f9e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e82:	2300      	movs	r3, #0
 8002e84:	613b      	str	r3, [r7, #16]
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	695b      	ldr	r3, [r3, #20]
 8002e8c:	613b      	str	r3, [r7, #16]
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	699b      	ldr	r3, [r3, #24]
 8002e94:	613b      	str	r3, [r7, #16]
 8002e96:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002e98:	e066      	b.n	8002f68 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e9a:	697a      	ldr	r2, [r7, #20]
 8002e9c:	6a39      	ldr	r1, [r7, #32]
 8002e9e:	68f8      	ldr	r0, [r7, #12]
 8002ea0:	f002 fba8 	bl	80055f4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d00d      	beq.n	8002ec6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eae:	2b04      	cmp	r3, #4
 8002eb0:	d107      	bne.n	8002ec2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	681a      	ldr	r2, [r3, #0]
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ec0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e06b      	b.n	8002f9e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eca:	781a      	ldrb	r2, [r3, #0]
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ed6:	1c5a      	adds	r2, r3, #1
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ee0:	b29b      	uxth	r3, r3
 8002ee2:	3b01      	subs	r3, #1
 8002ee4:	b29a      	uxth	r2, r3
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002eee:	3b01      	subs	r3, #1
 8002ef0:	b29a      	uxth	r2, r3
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	695b      	ldr	r3, [r3, #20]
 8002efc:	f003 0304 	and.w	r3, r3, #4
 8002f00:	2b04      	cmp	r3, #4
 8002f02:	d11b      	bne.n	8002f3c <HAL_I2C_Master_Transmit+0x188>
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d017      	beq.n	8002f3c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f10:	781a      	ldrb	r2, [r3, #0]
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f1c:	1c5a      	adds	r2, r3, #1
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f26:	b29b      	uxth	r3, r3
 8002f28:	3b01      	subs	r3, #1
 8002f2a:	b29a      	uxth	r2, r3
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f34:	3b01      	subs	r3, #1
 8002f36:	b29a      	uxth	r2, r3
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f3c:	697a      	ldr	r2, [r7, #20]
 8002f3e:	6a39      	ldr	r1, [r7, #32]
 8002f40:	68f8      	ldr	r0, [r7, #12]
 8002f42:	f002 fb9f 	bl	8005684 <I2C_WaitOnBTFFlagUntilTimeout>
 8002f46:	4603      	mov	r3, r0
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d00d      	beq.n	8002f68 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f50:	2b04      	cmp	r3, #4
 8002f52:	d107      	bne.n	8002f64 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	681a      	ldr	r2, [r3, #0]
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f62:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002f64:	2301      	movs	r3, #1
 8002f66:	e01a      	b.n	8002f9e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d194      	bne.n	8002e9a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	681a      	ldr	r2, [r3, #0]
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f7e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	2220      	movs	r2, #32
 8002f84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	2200      	movs	r2, #0
 8002f94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002f98:	2300      	movs	r3, #0
 8002f9a:	e000      	b.n	8002f9e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002f9c:	2302      	movs	r3, #2
  }
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	3718      	adds	r7, #24
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}
 8002fa6:	bf00      	nop
 8002fa8:	00100002 	.word	0x00100002
 8002fac:	ffff0000 	.word	0xffff0000

08002fb0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b088      	sub	sp, #32
 8002fb4:	af02      	add	r7, sp, #8
 8002fb6:	60f8      	str	r0, [r7, #12]
 8002fb8:	4608      	mov	r0, r1
 8002fba:	4611      	mov	r1, r2
 8002fbc:	461a      	mov	r2, r3
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	817b      	strh	r3, [r7, #10]
 8002fc2:	460b      	mov	r3, r1
 8002fc4:	813b      	strh	r3, [r7, #8]
 8002fc6:	4613      	mov	r3, r2
 8002fc8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002fca:	f7fe fbc7 	bl	800175c <HAL_GetTick>
 8002fce:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002fd6:	b2db      	uxtb	r3, r3
 8002fd8:	2b20      	cmp	r3, #32
 8002fda:	f040 80d9 	bne.w	8003190 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002fde:	697b      	ldr	r3, [r7, #20]
 8002fe0:	9300      	str	r3, [sp, #0]
 8002fe2:	2319      	movs	r3, #25
 8002fe4:	2201      	movs	r2, #1
 8002fe6:	496d      	ldr	r1, [pc, #436]	@ (800319c <HAL_I2C_Mem_Write+0x1ec>)
 8002fe8:	68f8      	ldr	r0, [r7, #12]
 8002fea:	f002 f9e9 	bl	80053c0 <I2C_WaitOnFlagUntilTimeout>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d001      	beq.n	8002ff8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002ff4:	2302      	movs	r3, #2
 8002ff6:	e0cc      	b.n	8003192 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002ffe:	2b01      	cmp	r3, #1
 8003000:	d101      	bne.n	8003006 <HAL_I2C_Mem_Write+0x56>
 8003002:	2302      	movs	r3, #2
 8003004:	e0c5      	b.n	8003192 <HAL_I2C_Mem_Write+0x1e2>
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	2201      	movs	r2, #1
 800300a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f003 0301 	and.w	r3, r3, #1
 8003018:	2b01      	cmp	r3, #1
 800301a:	d007      	beq.n	800302c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	681a      	ldr	r2, [r3, #0]
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f042 0201 	orr.w	r2, r2, #1
 800302a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	681a      	ldr	r2, [r3, #0]
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800303a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	2221      	movs	r2, #33	@ 0x21
 8003040:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	2240      	movs	r2, #64	@ 0x40
 8003048:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	2200      	movs	r2, #0
 8003050:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	6a3a      	ldr	r2, [r7, #32]
 8003056:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800305c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003062:	b29a      	uxth	r2, r3
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	4a4d      	ldr	r2, [pc, #308]	@ (80031a0 <HAL_I2C_Mem_Write+0x1f0>)
 800306c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800306e:	88f8      	ldrh	r0, [r7, #6]
 8003070:	893a      	ldrh	r2, [r7, #8]
 8003072:	8979      	ldrh	r1, [r7, #10]
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	9301      	str	r3, [sp, #4]
 8003078:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800307a:	9300      	str	r3, [sp, #0]
 800307c:	4603      	mov	r3, r0
 800307e:	68f8      	ldr	r0, [r7, #12]
 8003080:	f001 ff78 	bl	8004f74 <I2C_RequestMemoryWrite>
 8003084:	4603      	mov	r3, r0
 8003086:	2b00      	cmp	r3, #0
 8003088:	d052      	beq.n	8003130 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	e081      	b.n	8003192 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800308e:	697a      	ldr	r2, [r7, #20]
 8003090:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003092:	68f8      	ldr	r0, [r7, #12]
 8003094:	f002 faae 	bl	80055f4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003098:	4603      	mov	r3, r0
 800309a:	2b00      	cmp	r3, #0
 800309c:	d00d      	beq.n	80030ba <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030a2:	2b04      	cmp	r3, #4
 80030a4:	d107      	bne.n	80030b6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	681a      	ldr	r2, [r3, #0]
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80030b4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	e06b      	b.n	8003192 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030be:	781a      	ldrb	r2, [r3, #0]
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030ca:	1c5a      	adds	r2, r3, #1
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030d4:	3b01      	subs	r3, #1
 80030d6:	b29a      	uxth	r2, r3
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030e0:	b29b      	uxth	r3, r3
 80030e2:	3b01      	subs	r3, #1
 80030e4:	b29a      	uxth	r2, r3
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	695b      	ldr	r3, [r3, #20]
 80030f0:	f003 0304 	and.w	r3, r3, #4
 80030f4:	2b04      	cmp	r3, #4
 80030f6:	d11b      	bne.n	8003130 <HAL_I2C_Mem_Write+0x180>
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d017      	beq.n	8003130 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003104:	781a      	ldrb	r2, [r3, #0]
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003110:	1c5a      	adds	r2, r3, #1
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800311a:	3b01      	subs	r3, #1
 800311c:	b29a      	uxth	r2, r3
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003126:	b29b      	uxth	r3, r3
 8003128:	3b01      	subs	r3, #1
 800312a:	b29a      	uxth	r2, r3
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003134:	2b00      	cmp	r3, #0
 8003136:	d1aa      	bne.n	800308e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003138:	697a      	ldr	r2, [r7, #20]
 800313a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800313c:	68f8      	ldr	r0, [r7, #12]
 800313e:	f002 faa1 	bl	8005684 <I2C_WaitOnBTFFlagUntilTimeout>
 8003142:	4603      	mov	r3, r0
 8003144:	2b00      	cmp	r3, #0
 8003146:	d00d      	beq.n	8003164 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800314c:	2b04      	cmp	r3, #4
 800314e:	d107      	bne.n	8003160 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	681a      	ldr	r2, [r3, #0]
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800315e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003160:	2301      	movs	r3, #1
 8003162:	e016      	b.n	8003192 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	681a      	ldr	r2, [r3, #0]
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003172:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	2220      	movs	r2, #32
 8003178:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	2200      	movs	r2, #0
 8003180:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	2200      	movs	r2, #0
 8003188:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800318c:	2300      	movs	r3, #0
 800318e:	e000      	b.n	8003192 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003190:	2302      	movs	r3, #2
  }
}
 8003192:	4618      	mov	r0, r3
 8003194:	3718      	adds	r7, #24
 8003196:	46bd      	mov	sp, r7
 8003198:	bd80      	pop	{r7, pc}
 800319a:	bf00      	nop
 800319c:	00100002 	.word	0x00100002
 80031a0:	ffff0000 	.word	0xffff0000

080031a4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b08c      	sub	sp, #48	@ 0x30
 80031a8:	af02      	add	r7, sp, #8
 80031aa:	60f8      	str	r0, [r7, #12]
 80031ac:	4608      	mov	r0, r1
 80031ae:	4611      	mov	r1, r2
 80031b0:	461a      	mov	r2, r3
 80031b2:	4603      	mov	r3, r0
 80031b4:	817b      	strh	r3, [r7, #10]
 80031b6:	460b      	mov	r3, r1
 80031b8:	813b      	strh	r3, [r7, #8]
 80031ba:	4613      	mov	r3, r2
 80031bc:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80031be:	2300      	movs	r3, #0
 80031c0:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80031c2:	f7fe facb 	bl	800175c <HAL_GetTick>
 80031c6:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80031ce:	b2db      	uxtb	r3, r3
 80031d0:	2b20      	cmp	r3, #32
 80031d2:	f040 8250 	bne.w	8003676 <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80031d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031d8:	9300      	str	r3, [sp, #0]
 80031da:	2319      	movs	r3, #25
 80031dc:	2201      	movs	r2, #1
 80031de:	4982      	ldr	r1, [pc, #520]	@ (80033e8 <HAL_I2C_Mem_Read+0x244>)
 80031e0:	68f8      	ldr	r0, [r7, #12]
 80031e2:	f002 f8ed 	bl	80053c0 <I2C_WaitOnFlagUntilTimeout>
 80031e6:	4603      	mov	r3, r0
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d001      	beq.n	80031f0 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80031ec:	2302      	movs	r3, #2
 80031ee:	e243      	b.n	8003678 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80031f6:	2b01      	cmp	r3, #1
 80031f8:	d101      	bne.n	80031fe <HAL_I2C_Mem_Read+0x5a>
 80031fa:	2302      	movs	r3, #2
 80031fc:	e23c      	b.n	8003678 <HAL_I2C_Mem_Read+0x4d4>
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	2201      	movs	r2, #1
 8003202:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f003 0301 	and.w	r3, r3, #1
 8003210:	2b01      	cmp	r3, #1
 8003212:	d007      	beq.n	8003224 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	681a      	ldr	r2, [r3, #0]
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f042 0201 	orr.w	r2, r2, #1
 8003222:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	681a      	ldr	r2, [r3, #0]
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003232:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	2222      	movs	r2, #34	@ 0x22
 8003238:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2240      	movs	r2, #64	@ 0x40
 8003240:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	2200      	movs	r2, #0
 8003248:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800324e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003254:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800325a:	b29a      	uxth	r2, r3
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	4a62      	ldr	r2, [pc, #392]	@ (80033ec <HAL_I2C_Mem_Read+0x248>)
 8003264:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003266:	88f8      	ldrh	r0, [r7, #6]
 8003268:	893a      	ldrh	r2, [r7, #8]
 800326a:	8979      	ldrh	r1, [r7, #10]
 800326c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800326e:	9301      	str	r3, [sp, #4]
 8003270:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003272:	9300      	str	r3, [sp, #0]
 8003274:	4603      	mov	r3, r0
 8003276:	68f8      	ldr	r0, [r7, #12]
 8003278:	f001 ff12 	bl	80050a0 <I2C_RequestMemoryRead>
 800327c:	4603      	mov	r3, r0
 800327e:	2b00      	cmp	r3, #0
 8003280:	d001      	beq.n	8003286 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	e1f8      	b.n	8003678 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800328a:	2b00      	cmp	r3, #0
 800328c:	d113      	bne.n	80032b6 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800328e:	2300      	movs	r3, #0
 8003290:	61fb      	str	r3, [r7, #28]
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	695b      	ldr	r3, [r3, #20]
 8003298:	61fb      	str	r3, [r7, #28]
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	699b      	ldr	r3, [r3, #24]
 80032a0:	61fb      	str	r3, [r7, #28]
 80032a2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	681a      	ldr	r2, [r3, #0]
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80032b2:	601a      	str	r2, [r3, #0]
 80032b4:	e1cc      	b.n	8003650 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032ba:	2b01      	cmp	r3, #1
 80032bc:	d11e      	bne.n	80032fc <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	681a      	ldr	r2, [r3, #0]
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80032cc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80032ce:	b672      	cpsid	i
}
 80032d0:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032d2:	2300      	movs	r3, #0
 80032d4:	61bb      	str	r3, [r7, #24]
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	695b      	ldr	r3, [r3, #20]
 80032dc:	61bb      	str	r3, [r7, #24]
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	699b      	ldr	r3, [r3, #24]
 80032e4:	61bb      	str	r3, [r7, #24]
 80032e6:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	681a      	ldr	r2, [r3, #0]
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80032f6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80032f8:	b662      	cpsie	i
}
 80032fa:	e035      	b.n	8003368 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003300:	2b02      	cmp	r3, #2
 8003302:	d11e      	bne.n	8003342 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	681a      	ldr	r2, [r3, #0]
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003312:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003314:	b672      	cpsid	i
}
 8003316:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003318:	2300      	movs	r3, #0
 800331a:	617b      	str	r3, [r7, #20]
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	695b      	ldr	r3, [r3, #20]
 8003322:	617b      	str	r3, [r7, #20]
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	699b      	ldr	r3, [r3, #24]
 800332a:	617b      	str	r3, [r7, #20]
 800332c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	681a      	ldr	r2, [r3, #0]
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800333c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800333e:	b662      	cpsie	i
}
 8003340:	e012      	b.n	8003368 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	681a      	ldr	r2, [r3, #0]
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003350:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003352:	2300      	movs	r3, #0
 8003354:	613b      	str	r3, [r7, #16]
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	695b      	ldr	r3, [r3, #20]
 800335c:	613b      	str	r3, [r7, #16]
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	699b      	ldr	r3, [r3, #24]
 8003364:	613b      	str	r3, [r7, #16]
 8003366:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003368:	e172      	b.n	8003650 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800336e:	2b03      	cmp	r3, #3
 8003370:	f200 811f 	bhi.w	80035b2 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003378:	2b01      	cmp	r3, #1
 800337a:	d123      	bne.n	80033c4 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800337c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800337e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003380:	68f8      	ldr	r0, [r7, #12]
 8003382:	f002 f9f9 	bl	8005778 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003386:	4603      	mov	r3, r0
 8003388:	2b00      	cmp	r3, #0
 800338a:	d001      	beq.n	8003390 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 800338c:	2301      	movs	r3, #1
 800338e:	e173      	b.n	8003678 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	691a      	ldr	r2, [r3, #16]
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800339a:	b2d2      	uxtb	r2, r2
 800339c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033a2:	1c5a      	adds	r2, r3, #1
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033ac:	3b01      	subs	r3, #1
 80033ae:	b29a      	uxth	r2, r3
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033b8:	b29b      	uxth	r3, r3
 80033ba:	3b01      	subs	r3, #1
 80033bc:	b29a      	uxth	r2, r3
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80033c2:	e145      	b.n	8003650 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033c8:	2b02      	cmp	r3, #2
 80033ca:	d152      	bne.n	8003472 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80033cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033ce:	9300      	str	r3, [sp, #0]
 80033d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033d2:	2200      	movs	r2, #0
 80033d4:	4906      	ldr	r1, [pc, #24]	@ (80033f0 <HAL_I2C_Mem_Read+0x24c>)
 80033d6:	68f8      	ldr	r0, [r7, #12]
 80033d8:	f001 fff2 	bl	80053c0 <I2C_WaitOnFlagUntilTimeout>
 80033dc:	4603      	mov	r3, r0
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d008      	beq.n	80033f4 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	e148      	b.n	8003678 <HAL_I2C_Mem_Read+0x4d4>
 80033e6:	bf00      	nop
 80033e8:	00100002 	.word	0x00100002
 80033ec:	ffff0000 	.word	0xffff0000
 80033f0:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80033f4:	b672      	cpsid	i
}
 80033f6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	681a      	ldr	r2, [r3, #0]
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003406:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	691a      	ldr	r2, [r3, #16]
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003412:	b2d2      	uxtb	r2, r2
 8003414:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800341a:	1c5a      	adds	r2, r3, #1
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003424:	3b01      	subs	r3, #1
 8003426:	b29a      	uxth	r2, r3
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003430:	b29b      	uxth	r3, r3
 8003432:	3b01      	subs	r3, #1
 8003434:	b29a      	uxth	r2, r3
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800343a:	b662      	cpsie	i
}
 800343c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	691a      	ldr	r2, [r3, #16]
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003448:	b2d2      	uxtb	r2, r2
 800344a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003450:	1c5a      	adds	r2, r3, #1
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800345a:	3b01      	subs	r3, #1
 800345c:	b29a      	uxth	r2, r3
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003466:	b29b      	uxth	r3, r3
 8003468:	3b01      	subs	r3, #1
 800346a:	b29a      	uxth	r2, r3
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003470:	e0ee      	b.n	8003650 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003474:	9300      	str	r3, [sp, #0]
 8003476:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003478:	2200      	movs	r2, #0
 800347a:	4981      	ldr	r1, [pc, #516]	@ (8003680 <HAL_I2C_Mem_Read+0x4dc>)
 800347c:	68f8      	ldr	r0, [r7, #12]
 800347e:	f001 ff9f 	bl	80053c0 <I2C_WaitOnFlagUntilTimeout>
 8003482:	4603      	mov	r3, r0
 8003484:	2b00      	cmp	r3, #0
 8003486:	d001      	beq.n	800348c <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8003488:	2301      	movs	r3, #1
 800348a:	e0f5      	b.n	8003678 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	681a      	ldr	r2, [r3, #0]
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800349a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800349c:	b672      	cpsid	i
}
 800349e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	691a      	ldr	r2, [r3, #16]
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034aa:	b2d2      	uxtb	r2, r2
 80034ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034b2:	1c5a      	adds	r2, r3, #1
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034bc:	3b01      	subs	r3, #1
 80034be:	b29a      	uxth	r2, r3
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034c8:	b29b      	uxth	r3, r3
 80034ca:	3b01      	subs	r3, #1
 80034cc:	b29a      	uxth	r2, r3
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80034d2:	4b6c      	ldr	r3, [pc, #432]	@ (8003684 <HAL_I2C_Mem_Read+0x4e0>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	08db      	lsrs	r3, r3, #3
 80034d8:	4a6b      	ldr	r2, [pc, #428]	@ (8003688 <HAL_I2C_Mem_Read+0x4e4>)
 80034da:	fba2 2303 	umull	r2, r3, r2, r3
 80034de:	0a1a      	lsrs	r2, r3, #8
 80034e0:	4613      	mov	r3, r2
 80034e2:	009b      	lsls	r3, r3, #2
 80034e4:	4413      	add	r3, r2
 80034e6:	00da      	lsls	r2, r3, #3
 80034e8:	1ad3      	subs	r3, r2, r3
 80034ea:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80034ec:	6a3b      	ldr	r3, [r7, #32]
 80034ee:	3b01      	subs	r3, #1
 80034f0:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80034f2:	6a3b      	ldr	r3, [r7, #32]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d118      	bne.n	800352a <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	2200      	movs	r2, #0
 80034fc:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	2220      	movs	r2, #32
 8003502:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	2200      	movs	r2, #0
 800350a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003512:	f043 0220 	orr.w	r2, r3, #32
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800351a:	b662      	cpsie	i
}
 800351c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	2200      	movs	r2, #0
 8003522:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	e0a6      	b.n	8003678 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	695b      	ldr	r3, [r3, #20]
 8003530:	f003 0304 	and.w	r3, r3, #4
 8003534:	2b04      	cmp	r3, #4
 8003536:	d1d9      	bne.n	80034ec <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	681a      	ldr	r2, [r3, #0]
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003546:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	691a      	ldr	r2, [r3, #16]
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003552:	b2d2      	uxtb	r2, r2
 8003554:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800355a:	1c5a      	adds	r2, r3, #1
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003564:	3b01      	subs	r3, #1
 8003566:	b29a      	uxth	r2, r3
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003570:	b29b      	uxth	r3, r3
 8003572:	3b01      	subs	r3, #1
 8003574:	b29a      	uxth	r2, r3
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800357a:	b662      	cpsie	i
}
 800357c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	691a      	ldr	r2, [r3, #16]
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003588:	b2d2      	uxtb	r2, r2
 800358a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003590:	1c5a      	adds	r2, r3, #1
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800359a:	3b01      	subs	r3, #1
 800359c:	b29a      	uxth	r2, r3
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035a6:	b29b      	uxth	r3, r3
 80035a8:	3b01      	subs	r3, #1
 80035aa:	b29a      	uxth	r2, r3
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80035b0:	e04e      	b.n	8003650 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035b4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80035b6:	68f8      	ldr	r0, [r7, #12]
 80035b8:	f002 f8de 	bl	8005778 <I2C_WaitOnRXNEFlagUntilTimeout>
 80035bc:	4603      	mov	r3, r0
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d001      	beq.n	80035c6 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	e058      	b.n	8003678 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	691a      	ldr	r2, [r3, #16]
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035d0:	b2d2      	uxtb	r2, r2
 80035d2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035d8:	1c5a      	adds	r2, r3, #1
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035e2:	3b01      	subs	r3, #1
 80035e4:	b29a      	uxth	r2, r3
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035ee:	b29b      	uxth	r3, r3
 80035f0:	3b01      	subs	r3, #1
 80035f2:	b29a      	uxth	r2, r3
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	695b      	ldr	r3, [r3, #20]
 80035fe:	f003 0304 	and.w	r3, r3, #4
 8003602:	2b04      	cmp	r3, #4
 8003604:	d124      	bne.n	8003650 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800360a:	2b03      	cmp	r3, #3
 800360c:	d107      	bne.n	800361e <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	681a      	ldr	r2, [r3, #0]
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800361c:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	691a      	ldr	r2, [r3, #16]
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003628:	b2d2      	uxtb	r2, r2
 800362a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003630:	1c5a      	adds	r2, r3, #1
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800363a:	3b01      	subs	r3, #1
 800363c:	b29a      	uxth	r2, r3
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003646:	b29b      	uxth	r3, r3
 8003648:	3b01      	subs	r3, #1
 800364a:	b29a      	uxth	r2, r3
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003654:	2b00      	cmp	r3, #0
 8003656:	f47f ae88 	bne.w	800336a <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	2220      	movs	r2, #32
 800365e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	2200      	movs	r2, #0
 8003666:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	2200      	movs	r2, #0
 800366e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003672:	2300      	movs	r3, #0
 8003674:	e000      	b.n	8003678 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 8003676:	2302      	movs	r3, #2
  }
}
 8003678:	4618      	mov	r0, r3
 800367a:	3728      	adds	r7, #40	@ 0x28
 800367c:	46bd      	mov	sp, r7
 800367e:	bd80      	pop	{r7, pc}
 8003680:	00010004 	.word	0x00010004
 8003684:	20000010 	.word	0x20000010
 8003688:	14f8b589 	.word	0x14f8b589

0800368c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b08a      	sub	sp, #40	@ 0x28
 8003690:	af02      	add	r7, sp, #8
 8003692:	60f8      	str	r0, [r7, #12]
 8003694:	607a      	str	r2, [r7, #4]
 8003696:	603b      	str	r3, [r7, #0]
 8003698:	460b      	mov	r3, r1
 800369a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800369c:	f7fe f85e 	bl	800175c <HAL_GetTick>
 80036a0:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80036a2:	2300      	movs	r3, #0
 80036a4:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80036ac:	b2db      	uxtb	r3, r3
 80036ae:	2b20      	cmp	r3, #32
 80036b0:	f040 8111 	bne.w	80038d6 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80036b4:	69fb      	ldr	r3, [r7, #28]
 80036b6:	9300      	str	r3, [sp, #0]
 80036b8:	2319      	movs	r3, #25
 80036ba:	2201      	movs	r2, #1
 80036bc:	4988      	ldr	r1, [pc, #544]	@ (80038e0 <HAL_I2C_IsDeviceReady+0x254>)
 80036be:	68f8      	ldr	r0, [r7, #12]
 80036c0:	f001 fe7e 	bl	80053c0 <I2C_WaitOnFlagUntilTimeout>
 80036c4:	4603      	mov	r3, r0
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d001      	beq.n	80036ce <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80036ca:	2302      	movs	r3, #2
 80036cc:	e104      	b.n	80038d8 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80036d4:	2b01      	cmp	r3, #1
 80036d6:	d101      	bne.n	80036dc <HAL_I2C_IsDeviceReady+0x50>
 80036d8:	2302      	movs	r3, #2
 80036da:	e0fd      	b.n	80038d8 <HAL_I2C_IsDeviceReady+0x24c>
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	2201      	movs	r2, #1
 80036e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f003 0301 	and.w	r3, r3, #1
 80036ee:	2b01      	cmp	r3, #1
 80036f0:	d007      	beq.n	8003702 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	681a      	ldr	r2, [r3, #0]
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f042 0201 	orr.w	r2, r2, #1
 8003700:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	681a      	ldr	r2, [r3, #0]
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003710:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	2224      	movs	r2, #36	@ 0x24
 8003716:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	2200      	movs	r2, #0
 800371e:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	4a70      	ldr	r2, [pc, #448]	@ (80038e4 <HAL_I2C_IsDeviceReady+0x258>)
 8003724:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	681a      	ldr	r2, [r3, #0]
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003734:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003736:	69fb      	ldr	r3, [r7, #28]
 8003738:	9300      	str	r3, [sp, #0]
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	2200      	movs	r2, #0
 800373e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003742:	68f8      	ldr	r0, [r7, #12]
 8003744:	f001 fe3c 	bl	80053c0 <I2C_WaitOnFlagUntilTimeout>
 8003748:	4603      	mov	r3, r0
 800374a:	2b00      	cmp	r3, #0
 800374c:	d00d      	beq.n	800376a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003758:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800375c:	d103      	bne.n	8003766 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003764:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8003766:	2303      	movs	r3, #3
 8003768:	e0b6      	b.n	80038d8 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800376a:	897b      	ldrh	r3, [r7, #10]
 800376c:	b2db      	uxtb	r3, r3
 800376e:	461a      	mov	r2, r3
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003778:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800377a:	f7fd ffef 	bl	800175c <HAL_GetTick>
 800377e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	695b      	ldr	r3, [r3, #20]
 8003786:	f003 0302 	and.w	r3, r3, #2
 800378a:	2b02      	cmp	r3, #2
 800378c:	bf0c      	ite	eq
 800378e:	2301      	moveq	r3, #1
 8003790:	2300      	movne	r3, #0
 8003792:	b2db      	uxtb	r3, r3
 8003794:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	695b      	ldr	r3, [r3, #20]
 800379c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80037a4:	bf0c      	ite	eq
 80037a6:	2301      	moveq	r3, #1
 80037a8:	2300      	movne	r3, #0
 80037aa:	b2db      	uxtb	r3, r3
 80037ac:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80037ae:	e025      	b.n	80037fc <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80037b0:	f7fd ffd4 	bl	800175c <HAL_GetTick>
 80037b4:	4602      	mov	r2, r0
 80037b6:	69fb      	ldr	r3, [r7, #28]
 80037b8:	1ad3      	subs	r3, r2, r3
 80037ba:	683a      	ldr	r2, [r7, #0]
 80037bc:	429a      	cmp	r2, r3
 80037be:	d302      	bcc.n	80037c6 <HAL_I2C_IsDeviceReady+0x13a>
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d103      	bne.n	80037ce <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	22a0      	movs	r2, #160	@ 0xa0
 80037ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	695b      	ldr	r3, [r3, #20]
 80037d4:	f003 0302 	and.w	r3, r3, #2
 80037d8:	2b02      	cmp	r3, #2
 80037da:	bf0c      	ite	eq
 80037dc:	2301      	moveq	r3, #1
 80037de:	2300      	movne	r3, #0
 80037e0:	b2db      	uxtb	r3, r3
 80037e2:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	695b      	ldr	r3, [r3, #20]
 80037ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80037f2:	bf0c      	ite	eq
 80037f4:	2301      	moveq	r3, #1
 80037f6:	2300      	movne	r3, #0
 80037f8:	b2db      	uxtb	r3, r3
 80037fa:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003802:	b2db      	uxtb	r3, r3
 8003804:	2ba0      	cmp	r3, #160	@ 0xa0
 8003806:	d005      	beq.n	8003814 <HAL_I2C_IsDeviceReady+0x188>
 8003808:	7dfb      	ldrb	r3, [r7, #23]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d102      	bne.n	8003814 <HAL_I2C_IsDeviceReady+0x188>
 800380e:	7dbb      	ldrb	r3, [r7, #22]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d0cd      	beq.n	80037b0 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	2220      	movs	r2, #32
 8003818:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	695b      	ldr	r3, [r3, #20]
 8003822:	f003 0302 	and.w	r3, r3, #2
 8003826:	2b02      	cmp	r3, #2
 8003828:	d129      	bne.n	800387e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	681a      	ldr	r2, [r3, #0]
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003838:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800383a:	2300      	movs	r3, #0
 800383c:	613b      	str	r3, [r7, #16]
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	695b      	ldr	r3, [r3, #20]
 8003844:	613b      	str	r3, [r7, #16]
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	699b      	ldr	r3, [r3, #24]
 800384c:	613b      	str	r3, [r7, #16]
 800384e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003850:	69fb      	ldr	r3, [r7, #28]
 8003852:	9300      	str	r3, [sp, #0]
 8003854:	2319      	movs	r3, #25
 8003856:	2201      	movs	r2, #1
 8003858:	4921      	ldr	r1, [pc, #132]	@ (80038e0 <HAL_I2C_IsDeviceReady+0x254>)
 800385a:	68f8      	ldr	r0, [r7, #12]
 800385c:	f001 fdb0 	bl	80053c0 <I2C_WaitOnFlagUntilTimeout>
 8003860:	4603      	mov	r3, r0
 8003862:	2b00      	cmp	r3, #0
 8003864:	d001      	beq.n	800386a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003866:	2301      	movs	r3, #1
 8003868:	e036      	b.n	80038d8 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2220      	movs	r2, #32
 800386e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	2200      	movs	r2, #0
 8003876:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 800387a:	2300      	movs	r3, #0
 800387c:	e02c      	b.n	80038d8 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	681a      	ldr	r2, [r3, #0]
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800388c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003896:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003898:	69fb      	ldr	r3, [r7, #28]
 800389a:	9300      	str	r3, [sp, #0]
 800389c:	2319      	movs	r3, #25
 800389e:	2201      	movs	r2, #1
 80038a0:	490f      	ldr	r1, [pc, #60]	@ (80038e0 <HAL_I2C_IsDeviceReady+0x254>)
 80038a2:	68f8      	ldr	r0, [r7, #12]
 80038a4:	f001 fd8c 	bl	80053c0 <I2C_WaitOnFlagUntilTimeout>
 80038a8:	4603      	mov	r3, r0
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d001      	beq.n	80038b2 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
 80038b0:	e012      	b.n	80038d8 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80038b2:	69bb      	ldr	r3, [r7, #24]
 80038b4:	3301      	adds	r3, #1
 80038b6:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80038b8:	69ba      	ldr	r2, [r7, #24]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	429a      	cmp	r2, r3
 80038be:	f4ff af32 	bcc.w	8003726 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	2220      	movs	r2, #32
 80038c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	2200      	movs	r2, #0
 80038ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	e000      	b.n	80038d8 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80038d6:	2302      	movs	r3, #2
  }
}
 80038d8:	4618      	mov	r0, r3
 80038da:	3720      	adds	r7, #32
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd80      	pop	{r7, pc}
 80038e0:	00100002 	.word	0x00100002
 80038e4:	ffff0000 	.word	0xffff0000

080038e8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b088      	sub	sp, #32
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80038f0:	2300      	movs	r3, #0
 80038f2:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003900:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003908:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003910:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003912:	7bfb      	ldrb	r3, [r7, #15]
 8003914:	2b10      	cmp	r3, #16
 8003916:	d003      	beq.n	8003920 <HAL_I2C_EV_IRQHandler+0x38>
 8003918:	7bfb      	ldrb	r3, [r7, #15]
 800391a:	2b40      	cmp	r3, #64	@ 0x40
 800391c:	f040 80b1 	bne.w	8003a82 <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	699b      	ldr	r3, [r3, #24]
 8003926:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	695b      	ldr	r3, [r3, #20]
 800392e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003930:	69fb      	ldr	r3, [r7, #28]
 8003932:	f003 0301 	and.w	r3, r3, #1
 8003936:	2b00      	cmp	r3, #0
 8003938:	d10d      	bne.n	8003956 <HAL_I2C_EV_IRQHandler+0x6e>
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8003940:	d003      	beq.n	800394a <HAL_I2C_EV_IRQHandler+0x62>
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8003948:	d101      	bne.n	800394e <HAL_I2C_EV_IRQHandler+0x66>
 800394a:	2301      	movs	r3, #1
 800394c:	e000      	b.n	8003950 <HAL_I2C_EV_IRQHandler+0x68>
 800394e:	2300      	movs	r3, #0
 8003950:	2b01      	cmp	r3, #1
 8003952:	f000 8114 	beq.w	8003b7e <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003956:	69fb      	ldr	r3, [r7, #28]
 8003958:	f003 0301 	and.w	r3, r3, #1
 800395c:	2b00      	cmp	r3, #0
 800395e:	d00b      	beq.n	8003978 <HAL_I2C_EV_IRQHandler+0x90>
 8003960:	697b      	ldr	r3, [r7, #20]
 8003962:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003966:	2b00      	cmp	r3, #0
 8003968:	d006      	beq.n	8003978 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800396a:	6878      	ldr	r0, [r7, #4]
 800396c:	f001 ff8f 	bl	800588e <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003970:	6878      	ldr	r0, [r7, #4]
 8003972:	f000 fccd 	bl	8004310 <I2C_Master_SB>
 8003976:	e083      	b.n	8003a80 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003978:	69fb      	ldr	r3, [r7, #28]
 800397a:	f003 0308 	and.w	r3, r3, #8
 800397e:	2b00      	cmp	r3, #0
 8003980:	d008      	beq.n	8003994 <HAL_I2C_EV_IRQHandler+0xac>
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003988:	2b00      	cmp	r3, #0
 800398a:	d003      	beq.n	8003994 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 800398c:	6878      	ldr	r0, [r7, #4]
 800398e:	f000 fd44 	bl	800441a <I2C_Master_ADD10>
 8003992:	e075      	b.n	8003a80 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003994:	69fb      	ldr	r3, [r7, #28]
 8003996:	f003 0302 	and.w	r3, r3, #2
 800399a:	2b00      	cmp	r3, #0
 800399c:	d008      	beq.n	80039b0 <HAL_I2C_EV_IRQHandler+0xc8>
 800399e:	697b      	ldr	r3, [r7, #20]
 80039a0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d003      	beq.n	80039b0 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 80039a8:	6878      	ldr	r0, [r7, #4]
 80039aa:	f000 fd5f 	bl	800446c <I2C_Master_ADDR>
 80039ae:	e067      	b.n	8003a80 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80039b0:	69bb      	ldr	r3, [r7, #24]
 80039b2:	f003 0304 	and.w	r3, r3, #4
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d036      	beq.n	8003a28 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80039c4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80039c8:	f000 80db 	beq.w	8003b82 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80039cc:	69fb      	ldr	r3, [r7, #28]
 80039ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d00d      	beq.n	80039f2 <HAL_I2C_EV_IRQHandler+0x10a>
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d008      	beq.n	80039f2 <HAL_I2C_EV_IRQHandler+0x10a>
 80039e0:	69fb      	ldr	r3, [r7, #28]
 80039e2:	f003 0304 	and.w	r3, r3, #4
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d103      	bne.n	80039f2 <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80039ea:	6878      	ldr	r0, [r7, #4]
 80039ec:	f000 f92d 	bl	8003c4a <I2C_MasterTransmit_TXE>
 80039f0:	e046      	b.n	8003a80 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80039f2:	69fb      	ldr	r3, [r7, #28]
 80039f4:	f003 0304 	and.w	r3, r3, #4
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	f000 80c2 	beq.w	8003b82 <HAL_I2C_EV_IRQHandler+0x29a>
 80039fe:	697b      	ldr	r3, [r7, #20]
 8003a00:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	f000 80bc 	beq.w	8003b82 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003a0a:	7bbb      	ldrb	r3, [r7, #14]
 8003a0c:	2b21      	cmp	r3, #33	@ 0x21
 8003a0e:	d103      	bne.n	8003a18 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8003a10:	6878      	ldr	r0, [r7, #4]
 8003a12:	f000 f9b6 	bl	8003d82 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003a16:	e0b4      	b.n	8003b82 <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8003a18:	7bfb      	ldrb	r3, [r7, #15]
 8003a1a:	2b40      	cmp	r3, #64	@ 0x40
 8003a1c:	f040 80b1 	bne.w	8003b82 <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003a20:	6878      	ldr	r0, [r7, #4]
 8003a22:	f000 fa24 	bl	8003e6e <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003a26:	e0ac      	b.n	8003b82 <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003a32:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003a36:	f000 80a4 	beq.w	8003b82 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003a3a:	69fb      	ldr	r3, [r7, #28]
 8003a3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d00d      	beq.n	8003a60 <HAL_I2C_EV_IRQHandler+0x178>
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d008      	beq.n	8003a60 <HAL_I2C_EV_IRQHandler+0x178>
 8003a4e:	69fb      	ldr	r3, [r7, #28]
 8003a50:	f003 0304 	and.w	r3, r3, #4
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d103      	bne.n	8003a60 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003a58:	6878      	ldr	r0, [r7, #4]
 8003a5a:	f000 faa0 	bl	8003f9e <I2C_MasterReceive_RXNE>
 8003a5e:	e00f      	b.n	8003a80 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003a60:	69fb      	ldr	r3, [r7, #28]
 8003a62:	f003 0304 	and.w	r3, r3, #4
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	f000 808b 	beq.w	8003b82 <HAL_I2C_EV_IRQHandler+0x29a>
 8003a6c:	697b      	ldr	r3, [r7, #20]
 8003a6e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	f000 8085 	beq.w	8003b82 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003a78:	6878      	ldr	r0, [r7, #4]
 8003a7a:	f000 fb58 	bl	800412e <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003a7e:	e080      	b.n	8003b82 <HAL_I2C_EV_IRQHandler+0x29a>
 8003a80:	e07f      	b.n	8003b82 <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d004      	beq.n	8003a94 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	695b      	ldr	r3, [r3, #20]
 8003a90:	61fb      	str	r3, [r7, #28]
 8003a92:	e007      	b.n	8003aa4 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	699b      	ldr	r3, [r3, #24]
 8003a9a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	695b      	ldr	r3, [r3, #20]
 8003aa2:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003aa4:	69fb      	ldr	r3, [r7, #28]
 8003aa6:	f003 0302 	and.w	r3, r3, #2
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d011      	beq.n	8003ad2 <HAL_I2C_EV_IRQHandler+0x1ea>
 8003aae:	697b      	ldr	r3, [r7, #20]
 8003ab0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d00c      	beq.n	8003ad2 <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d003      	beq.n	8003ac8 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	699b      	ldr	r3, [r3, #24]
 8003ac6:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003ac8:	69b9      	ldr	r1, [r7, #24]
 8003aca:	6878      	ldr	r0, [r7, #4]
 8003acc:	f000 ff25 	bl	800491a <I2C_Slave_ADDR>
 8003ad0:	e05a      	b.n	8003b88 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003ad2:	69fb      	ldr	r3, [r7, #28]
 8003ad4:	f003 0310 	and.w	r3, r3, #16
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d008      	beq.n	8003aee <HAL_I2C_EV_IRQHandler+0x206>
 8003adc:	697b      	ldr	r3, [r7, #20]
 8003ade:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d003      	beq.n	8003aee <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 8003ae6:	6878      	ldr	r0, [r7, #4]
 8003ae8:	f000 ff60 	bl	80049ac <I2C_Slave_STOPF>
 8003aec:	e04c      	b.n	8003b88 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003aee:	7bbb      	ldrb	r3, [r7, #14]
 8003af0:	2b21      	cmp	r3, #33	@ 0x21
 8003af2:	d002      	beq.n	8003afa <HAL_I2C_EV_IRQHandler+0x212>
 8003af4:	7bbb      	ldrb	r3, [r7, #14]
 8003af6:	2b29      	cmp	r3, #41	@ 0x29
 8003af8:	d120      	bne.n	8003b3c <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003afa:	69fb      	ldr	r3, [r7, #28]
 8003afc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d00d      	beq.n	8003b20 <HAL_I2C_EV_IRQHandler+0x238>
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d008      	beq.n	8003b20 <HAL_I2C_EV_IRQHandler+0x238>
 8003b0e:	69fb      	ldr	r3, [r7, #28]
 8003b10:	f003 0304 	and.w	r3, r3, #4
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d103      	bne.n	8003b20 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8003b18:	6878      	ldr	r0, [r7, #4]
 8003b1a:	f000 fe42 	bl	80047a2 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003b1e:	e032      	b.n	8003b86 <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003b20:	69fb      	ldr	r3, [r7, #28]
 8003b22:	f003 0304 	and.w	r3, r3, #4
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d02d      	beq.n	8003b86 <HAL_I2C_EV_IRQHandler+0x29e>
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d028      	beq.n	8003b86 <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8003b34:	6878      	ldr	r0, [r7, #4]
 8003b36:	f000 fe71 	bl	800481c <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003b3a:	e024      	b.n	8003b86 <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003b3c:	69fb      	ldr	r3, [r7, #28]
 8003b3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d00d      	beq.n	8003b62 <HAL_I2C_EV_IRQHandler+0x27a>
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d008      	beq.n	8003b62 <HAL_I2C_EV_IRQHandler+0x27a>
 8003b50:	69fb      	ldr	r3, [r7, #28]
 8003b52:	f003 0304 	and.w	r3, r3, #4
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d103      	bne.n	8003b62 <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	f000 fe7e 	bl	800485c <I2C_SlaveReceive_RXNE>
 8003b60:	e012      	b.n	8003b88 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003b62:	69fb      	ldr	r3, [r7, #28]
 8003b64:	f003 0304 	and.w	r3, r3, #4
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d00d      	beq.n	8003b88 <HAL_I2C_EV_IRQHandler+0x2a0>
 8003b6c:	697b      	ldr	r3, [r7, #20]
 8003b6e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d008      	beq.n	8003b88 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8003b76:	6878      	ldr	r0, [r7, #4]
 8003b78:	f000 feae 	bl	80048d8 <I2C_SlaveReceive_BTF>
 8003b7c:	e004      	b.n	8003b88 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 8003b7e:	bf00      	nop
 8003b80:	e002      	b.n	8003b88 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003b82:	bf00      	nop
 8003b84:	e000      	b.n	8003b88 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003b86:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003b88:	3720      	adds	r7, #32
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}

08003b8e <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003b8e:	b480      	push	{r7}
 8003b90:	b083      	sub	sp, #12
 8003b92:	af00      	add	r7, sp, #0
 8003b94:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003b96:	bf00      	nop
 8003b98:	370c      	adds	r7, #12
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bc80      	pop	{r7}
 8003b9e:	4770      	bx	lr

08003ba0 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	b083      	sub	sp, #12
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003ba8:	bf00      	nop
 8003baa:	370c      	adds	r7, #12
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bc80      	pop	{r7}
 8003bb0:	4770      	bx	lr

08003bb2 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003bb2:	b480      	push	{r7}
 8003bb4:	b083      	sub	sp, #12
 8003bb6:	af00      	add	r7, sp, #0
 8003bb8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003bba:	bf00      	nop
 8003bbc:	370c      	adds	r7, #12
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bc80      	pop	{r7}
 8003bc2:	4770      	bx	lr

08003bc4 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b083      	sub	sp, #12
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003bcc:	bf00      	nop
 8003bce:	370c      	adds	r7, #12
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bc80      	pop	{r7}
 8003bd4:	4770      	bx	lr

08003bd6 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003bd6:	b480      	push	{r7}
 8003bd8:	b083      	sub	sp, #12
 8003bda:	af00      	add	r7, sp, #0
 8003bdc:	6078      	str	r0, [r7, #4]
 8003bde:	460b      	mov	r3, r1
 8003be0:	70fb      	strb	r3, [r7, #3]
 8003be2:	4613      	mov	r3, r2
 8003be4:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003be6:	bf00      	nop
 8003be8:	370c      	adds	r7, #12
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bc80      	pop	{r7}
 8003bee:	4770      	bx	lr

08003bf0 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b083      	sub	sp, #12
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8003bf8:	bf00      	nop
 8003bfa:	370c      	adds	r7, #12
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bc80      	pop	{r7}
 8003c00:	4770      	bx	lr

08003c02 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003c02:	b480      	push	{r7}
 8003c04:	b083      	sub	sp, #12
 8003c06:	af00      	add	r7, sp, #0
 8003c08:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003c0a:	bf00      	nop
 8003c0c:	370c      	adds	r7, #12
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bc80      	pop	{r7}
 8003c12:	4770      	bx	lr

08003c14 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003c14:	b480      	push	{r7}
 8003c16:	b083      	sub	sp, #12
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003c1c:	bf00      	nop
 8003c1e:	370c      	adds	r7, #12
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bc80      	pop	{r7}
 8003c24:	4770      	bx	lr

08003c26 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003c26:	b480      	push	{r7}
 8003c28:	b083      	sub	sp, #12
 8003c2a:	af00      	add	r7, sp, #0
 8003c2c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003c2e:	bf00      	nop
 8003c30:	370c      	adds	r7, #12
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bc80      	pop	{r7}
 8003c36:	4770      	bx	lr

08003c38 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b083      	sub	sp, #12
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003c40:	bf00      	nop
 8003c42:	370c      	adds	r7, #12
 8003c44:	46bd      	mov	sp, r7
 8003c46:	bc80      	pop	{r7}
 8003c48:	4770      	bx	lr

08003c4a <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003c4a:	b580      	push	{r7, lr}
 8003c4c:	b084      	sub	sp, #16
 8003c4e:	af00      	add	r7, sp, #0
 8003c50:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c58:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003c60:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c66:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d150      	bne.n	8003d12 <I2C_MasterTransmit_TXE+0xc8>
 8003c70:	7bfb      	ldrb	r3, [r7, #15]
 8003c72:	2b21      	cmp	r3, #33	@ 0x21
 8003c74:	d14d      	bne.n	8003d12 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	2b08      	cmp	r3, #8
 8003c7a:	d01d      	beq.n	8003cb8 <I2C_MasterTransmit_TXE+0x6e>
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	2b20      	cmp	r3, #32
 8003c80:	d01a      	beq.n	8003cb8 <I2C_MasterTransmit_TXE+0x6e>
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003c88:	d016      	beq.n	8003cb8 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	685a      	ldr	r2, [r3, #4]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003c98:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2211      	movs	r2, #17
 8003c9e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2220      	movs	r2, #32
 8003cac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003cb0:	6878      	ldr	r0, [r7, #4]
 8003cb2:	f7ff ff6c 	bl	8003b8e <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003cb6:	e060      	b.n	8003d7a <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	685a      	ldr	r2, [r3, #4]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003cc6:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	681a      	ldr	r2, [r3, #0]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003cd6:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2220      	movs	r2, #32
 8003ce2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003cec:	b2db      	uxtb	r3, r3
 8003cee:	2b40      	cmp	r3, #64	@ 0x40
 8003cf0:	d107      	bne.n	8003d02 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003cfa:	6878      	ldr	r0, [r7, #4]
 8003cfc:	f7ff ff81 	bl	8003c02 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003d00:	e03b      	b.n	8003d7a <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2200      	movs	r2, #0
 8003d06:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003d0a:	6878      	ldr	r0, [r7, #4]
 8003d0c:	f7ff ff3f 	bl	8003b8e <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003d10:	e033      	b.n	8003d7a <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003d12:	7bfb      	ldrb	r3, [r7, #15]
 8003d14:	2b21      	cmp	r3, #33	@ 0x21
 8003d16:	d005      	beq.n	8003d24 <I2C_MasterTransmit_TXE+0xda>
 8003d18:	7bbb      	ldrb	r3, [r7, #14]
 8003d1a:	2b40      	cmp	r3, #64	@ 0x40
 8003d1c:	d12d      	bne.n	8003d7a <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003d1e:	7bfb      	ldrb	r3, [r7, #15]
 8003d20:	2b22      	cmp	r3, #34	@ 0x22
 8003d22:	d12a      	bne.n	8003d7a <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d28:	b29b      	uxth	r3, r3
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d108      	bne.n	8003d40 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	685a      	ldr	r2, [r3, #4]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d3c:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003d3e:	e01c      	b.n	8003d7a <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003d46:	b2db      	uxtb	r3, r3
 8003d48:	2b40      	cmp	r3, #64	@ 0x40
 8003d4a:	d103      	bne.n	8003d54 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003d4c:	6878      	ldr	r0, [r7, #4]
 8003d4e:	f000 f88e 	bl	8003e6e <I2C_MemoryTransmit_TXE_BTF>
}
 8003d52:	e012      	b.n	8003d7a <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d58:	781a      	ldrb	r2, [r3, #0]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d64:	1c5a      	adds	r2, r3, #1
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d6e:	b29b      	uxth	r3, r3
 8003d70:	3b01      	subs	r3, #1
 8003d72:	b29a      	uxth	r2, r3
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003d78:	e7ff      	b.n	8003d7a <I2C_MasterTransmit_TXE+0x130>
 8003d7a:	bf00      	nop
 8003d7c:	3710      	adds	r7, #16
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bd80      	pop	{r7, pc}

08003d82 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003d82:	b580      	push	{r7, lr}
 8003d84:	b084      	sub	sp, #16
 8003d86:	af00      	add	r7, sp, #0
 8003d88:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d8e:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d96:	b2db      	uxtb	r3, r3
 8003d98:	2b21      	cmp	r3, #33	@ 0x21
 8003d9a:	d164      	bne.n	8003e66 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003da0:	b29b      	uxth	r3, r3
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d012      	beq.n	8003dcc <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003daa:	781a      	ldrb	r2, [r3, #0]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003db6:	1c5a      	adds	r2, r3, #1
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dc0:	b29b      	uxth	r3, r3
 8003dc2:	3b01      	subs	r3, #1
 8003dc4:	b29a      	uxth	r2, r3
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003dca:	e04c      	b.n	8003e66 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	2b08      	cmp	r3, #8
 8003dd0:	d01d      	beq.n	8003e0e <I2C_MasterTransmit_BTF+0x8c>
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	2b20      	cmp	r3, #32
 8003dd6:	d01a      	beq.n	8003e0e <I2C_MasterTransmit_BTF+0x8c>
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003dde:	d016      	beq.n	8003e0e <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	685a      	ldr	r2, [r3, #4]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003dee:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2211      	movs	r2, #17
 8003df4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2220      	movs	r2, #32
 8003e02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003e06:	6878      	ldr	r0, [r7, #4]
 8003e08:	f7ff fec1 	bl	8003b8e <HAL_I2C_MasterTxCpltCallback>
}
 8003e0c:	e02b      	b.n	8003e66 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	685a      	ldr	r2, [r3, #4]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003e1c:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	681a      	ldr	r2, [r3, #0]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e2c:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2200      	movs	r2, #0
 8003e32:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2220      	movs	r2, #32
 8003e38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003e42:	b2db      	uxtb	r3, r3
 8003e44:	2b40      	cmp	r3, #64	@ 0x40
 8003e46:	d107      	bne.n	8003e58 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003e50:	6878      	ldr	r0, [r7, #4]
 8003e52:	f7ff fed6 	bl	8003c02 <HAL_I2C_MemTxCpltCallback>
}
 8003e56:	e006      	b.n	8003e66 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8003e60:	6878      	ldr	r0, [r7, #4]
 8003e62:	f7ff fe94 	bl	8003b8e <HAL_I2C_MasterTxCpltCallback>
}
 8003e66:	bf00      	nop
 8003e68:	3710      	adds	r7, #16
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bd80      	pop	{r7, pc}

08003e6e <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003e6e:	b580      	push	{r7, lr}
 8003e70:	b084      	sub	sp, #16
 8003e72:	af00      	add	r7, sp, #0
 8003e74:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e7c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d11d      	bne.n	8003ec2 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e8a:	2b01      	cmp	r3, #1
 8003e8c:	d10b      	bne.n	8003ea6 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e92:	b2da      	uxtb	r2, r3
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e9e:	1c9a      	adds	r2, r3, #2
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8003ea4:	e077      	b.n	8003f96 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003eaa:	b29b      	uxth	r3, r3
 8003eac:	121b      	asrs	r3, r3, #8
 8003eae:	b2da      	uxtb	r2, r3
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003eba:	1c5a      	adds	r2, r3, #1
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003ec0:	e069      	b.n	8003f96 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ec6:	2b01      	cmp	r3, #1
 8003ec8:	d10b      	bne.n	8003ee2 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ece:	b2da      	uxtb	r2, r3
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003eda:	1c5a      	adds	r2, r3, #1
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003ee0:	e059      	b.n	8003f96 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ee6:	2b02      	cmp	r3, #2
 8003ee8:	d152      	bne.n	8003f90 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003eea:	7bfb      	ldrb	r3, [r7, #15]
 8003eec:	2b22      	cmp	r3, #34	@ 0x22
 8003eee:	d10d      	bne.n	8003f0c <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	681a      	ldr	r2, [r3, #0]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003efe:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f04:	1c5a      	adds	r2, r3, #1
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003f0a:	e044      	b.n	8003f96 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f10:	b29b      	uxth	r3, r3
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d015      	beq.n	8003f42 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8003f16:	7bfb      	ldrb	r3, [r7, #15]
 8003f18:	2b21      	cmp	r3, #33	@ 0x21
 8003f1a:	d112      	bne.n	8003f42 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f20:	781a      	ldrb	r2, [r3, #0]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f2c:	1c5a      	adds	r2, r3, #1
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f36:	b29b      	uxth	r3, r3
 8003f38:	3b01      	subs	r3, #1
 8003f3a:	b29a      	uxth	r2, r3
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003f40:	e029      	b.n	8003f96 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f46:	b29b      	uxth	r3, r3
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d124      	bne.n	8003f96 <I2C_MemoryTransmit_TXE_BTF+0x128>
 8003f4c:	7bfb      	ldrb	r3, [r7, #15]
 8003f4e:	2b21      	cmp	r3, #33	@ 0x21
 8003f50:	d121      	bne.n	8003f96 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	685a      	ldr	r2, [r3, #4]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003f60:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	681a      	ldr	r2, [r3, #0]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f70:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2200      	movs	r2, #0
 8003f76:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2220      	movs	r2, #32
 8003f7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2200      	movs	r2, #0
 8003f84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003f88:	6878      	ldr	r0, [r7, #4]
 8003f8a:	f7ff fe3a 	bl	8003c02 <HAL_I2C_MemTxCpltCallback>
}
 8003f8e:	e002      	b.n	8003f96 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8003f90:	6878      	ldr	r0, [r7, #4]
 8003f92:	f7fe fefb 	bl	8002d8c <I2C_Flush_DR>
}
 8003f96:	bf00      	nop
 8003f98:	3710      	adds	r7, #16
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}

08003f9e <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003f9e:	b580      	push	{r7, lr}
 8003fa0:	b084      	sub	sp, #16
 8003fa2:	af00      	add	r7, sp, #0
 8003fa4:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003fac:	b2db      	uxtb	r3, r3
 8003fae:	2b22      	cmp	r3, #34	@ 0x22
 8003fb0:	f040 80b9 	bne.w	8004126 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fb8:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fbe:	b29b      	uxth	r3, r3
 8003fc0:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	2b03      	cmp	r3, #3
 8003fc6:	d921      	bls.n	800400c <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	691a      	ldr	r2, [r3, #16]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fd2:	b2d2      	uxtb	r2, r2
 8003fd4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fda:	1c5a      	adds	r2, r3, #1
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fe4:	b29b      	uxth	r3, r3
 8003fe6:	3b01      	subs	r3, #1
 8003fe8:	b29a      	uxth	r2, r3
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ff2:	b29b      	uxth	r3, r3
 8003ff4:	2b03      	cmp	r3, #3
 8003ff6:	f040 8096 	bne.w	8004126 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	685a      	ldr	r2, [r3, #4]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004008:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 800400a:	e08c      	b.n	8004126 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004010:	2b02      	cmp	r3, #2
 8004012:	d07f      	beq.n	8004114 <I2C_MasterReceive_RXNE+0x176>
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	2b01      	cmp	r3, #1
 8004018:	d002      	beq.n	8004020 <I2C_MasterReceive_RXNE+0x82>
 800401a:	68bb      	ldr	r3, [r7, #8]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d179      	bne.n	8004114 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004020:	6878      	ldr	r0, [r7, #4]
 8004022:	f001 fb77 	bl	8005714 <I2C_WaitOnSTOPRequestThroughIT>
 8004026:	4603      	mov	r3, r0
 8004028:	2b00      	cmp	r3, #0
 800402a:	d14c      	bne.n	80040c6 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	681a      	ldr	r2, [r3, #0]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800403a:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	685a      	ldr	r2, [r3, #4]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800404a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	691a      	ldr	r2, [r3, #16]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004056:	b2d2      	uxtb	r2, r2
 8004058:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800405e:	1c5a      	adds	r2, r3, #1
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004068:	b29b      	uxth	r3, r3
 800406a:	3b01      	subs	r3, #1
 800406c:	b29a      	uxth	r2, r3
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2220      	movs	r2, #32
 8004076:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004080:	b2db      	uxtb	r3, r3
 8004082:	2b40      	cmp	r3, #64	@ 0x40
 8004084:	d10a      	bne.n	800409c <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2200      	movs	r2, #0
 800408a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2200      	movs	r2, #0
 8004092:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8004094:	6878      	ldr	r0, [r7, #4]
 8004096:	f7ff fdbd 	bl	8003c14 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800409a:	e044      	b.n	8004126 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2200      	movs	r2, #0
 80040a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	2b08      	cmp	r3, #8
 80040a8:	d002      	beq.n	80040b0 <I2C_MasterReceive_RXNE+0x112>
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	2b20      	cmp	r3, #32
 80040ae:	d103      	bne.n	80040b8 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2200      	movs	r2, #0
 80040b4:	631a      	str	r2, [r3, #48]	@ 0x30
 80040b6:	e002      	b.n	80040be <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2212      	movs	r2, #18
 80040bc:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	f7ff fd6e 	bl	8003ba0 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80040c4:	e02f      	b.n	8004126 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	685a      	ldr	r2, [r3, #4]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80040d4:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	691a      	ldr	r2, [r3, #16]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040e0:	b2d2      	uxtb	r2, r2
 80040e2:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040e8:	1c5a      	adds	r2, r3, #1
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040f2:	b29b      	uxth	r3, r3
 80040f4:	3b01      	subs	r3, #1
 80040f6:	b29a      	uxth	r2, r3
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2220      	movs	r2, #32
 8004100:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2200      	movs	r2, #0
 8004108:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800410c:	6878      	ldr	r0, [r7, #4]
 800410e:	f7ff fd8a 	bl	8003c26 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004112:	e008      	b.n	8004126 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	685a      	ldr	r2, [r3, #4]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004122:	605a      	str	r2, [r3, #4]
}
 8004124:	e7ff      	b.n	8004126 <I2C_MasterReceive_RXNE+0x188>
 8004126:	bf00      	nop
 8004128:	3710      	adds	r7, #16
 800412a:	46bd      	mov	sp, r7
 800412c:	bd80      	pop	{r7, pc}

0800412e <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800412e:	b580      	push	{r7, lr}
 8004130:	b084      	sub	sp, #16
 8004132:	af00      	add	r7, sp, #0
 8004134:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800413a:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004140:	b29b      	uxth	r3, r3
 8004142:	2b04      	cmp	r3, #4
 8004144:	d11b      	bne.n	800417e <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	685a      	ldr	r2, [r3, #4]
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004154:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	691a      	ldr	r2, [r3, #16]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004160:	b2d2      	uxtb	r2, r2
 8004162:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004168:	1c5a      	adds	r2, r3, #1
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004172:	b29b      	uxth	r3, r3
 8004174:	3b01      	subs	r3, #1
 8004176:	b29a      	uxth	r2, r3
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800417c:	e0c4      	b.n	8004308 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004182:	b29b      	uxth	r3, r3
 8004184:	2b03      	cmp	r3, #3
 8004186:	d129      	bne.n	80041dc <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	685a      	ldr	r2, [r3, #4]
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004196:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	2b04      	cmp	r3, #4
 800419c:	d00a      	beq.n	80041b4 <I2C_MasterReceive_BTF+0x86>
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	2b02      	cmp	r3, #2
 80041a2:	d007      	beq.n	80041b4 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	681a      	ldr	r2, [r3, #0]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80041b2:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	691a      	ldr	r2, [r3, #16]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041be:	b2d2      	uxtb	r2, r2
 80041c0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041c6:	1c5a      	adds	r2, r3, #1
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041d0:	b29b      	uxth	r3, r3
 80041d2:	3b01      	subs	r3, #1
 80041d4:	b29a      	uxth	r2, r3
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80041da:	e095      	b.n	8004308 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041e0:	b29b      	uxth	r3, r3
 80041e2:	2b02      	cmp	r3, #2
 80041e4:	d17d      	bne.n	80042e2 <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	2b01      	cmp	r3, #1
 80041ea:	d002      	beq.n	80041f2 <I2C_MasterReceive_BTF+0xc4>
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	2b10      	cmp	r3, #16
 80041f0:	d108      	bne.n	8004204 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	681a      	ldr	r2, [r3, #0]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004200:	601a      	str	r2, [r3, #0]
 8004202:	e016      	b.n	8004232 <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	2b04      	cmp	r3, #4
 8004208:	d002      	beq.n	8004210 <I2C_MasterReceive_BTF+0xe2>
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	2b02      	cmp	r3, #2
 800420e:	d108      	bne.n	8004222 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	681a      	ldr	r2, [r3, #0]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800421e:	601a      	str	r2, [r3, #0]
 8004220:	e007      	b.n	8004232 <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	681a      	ldr	r2, [r3, #0]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004230:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	691a      	ldr	r2, [r3, #16]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800423c:	b2d2      	uxtb	r2, r2
 800423e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004244:	1c5a      	adds	r2, r3, #1
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800424e:	b29b      	uxth	r3, r3
 8004250:	3b01      	subs	r3, #1
 8004252:	b29a      	uxth	r2, r3
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	691a      	ldr	r2, [r3, #16]
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004262:	b2d2      	uxtb	r2, r2
 8004264:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800426a:	1c5a      	adds	r2, r3, #1
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004274:	b29b      	uxth	r3, r3
 8004276:	3b01      	subs	r3, #1
 8004278:	b29a      	uxth	r2, r3
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	685a      	ldr	r2, [r3, #4]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800428c:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2220      	movs	r2, #32
 8004292:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800429c:	b2db      	uxtb	r3, r3
 800429e:	2b40      	cmp	r3, #64	@ 0x40
 80042a0:	d10a      	bne.n	80042b8 <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2200      	movs	r2, #0
 80042a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2200      	movs	r2, #0
 80042ae:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80042b0:	6878      	ldr	r0, [r7, #4]
 80042b2:	f7ff fcaf 	bl	8003c14 <HAL_I2C_MemRxCpltCallback>
}
 80042b6:	e027      	b.n	8004308 <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2200      	movs	r2, #0
 80042bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	2b08      	cmp	r3, #8
 80042c4:	d002      	beq.n	80042cc <I2C_MasterReceive_BTF+0x19e>
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	2b20      	cmp	r3, #32
 80042ca:	d103      	bne.n	80042d4 <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2200      	movs	r2, #0
 80042d0:	631a      	str	r2, [r3, #48]	@ 0x30
 80042d2:	e002      	b.n	80042da <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2212      	movs	r2, #18
 80042d8:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80042da:	6878      	ldr	r0, [r7, #4]
 80042dc:	f7ff fc60 	bl	8003ba0 <HAL_I2C_MasterRxCpltCallback>
}
 80042e0:	e012      	b.n	8004308 <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	691a      	ldr	r2, [r3, #16]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042ec:	b2d2      	uxtb	r2, r2
 80042ee:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042f4:	1c5a      	adds	r2, r3, #1
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042fe:	b29b      	uxth	r3, r3
 8004300:	3b01      	subs	r3, #1
 8004302:	b29a      	uxth	r2, r3
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8004308:	bf00      	nop
 800430a:	3710      	adds	r7, #16
 800430c:	46bd      	mov	sp, r7
 800430e:	bd80      	pop	{r7, pc}

08004310 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8004310:	b480      	push	{r7}
 8004312:	b083      	sub	sp, #12
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800431e:	b2db      	uxtb	r3, r3
 8004320:	2b40      	cmp	r3, #64	@ 0x40
 8004322:	d117      	bne.n	8004354 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004328:	2b00      	cmp	r3, #0
 800432a:	d109      	bne.n	8004340 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004330:	b2db      	uxtb	r3, r3
 8004332:	461a      	mov	r2, r3
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800433c:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800433e:	e067      	b.n	8004410 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004344:	b2db      	uxtb	r3, r3
 8004346:	f043 0301 	orr.w	r3, r3, #1
 800434a:	b2da      	uxtb	r2, r3
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	611a      	str	r2, [r3, #16]
}
 8004352:	e05d      	b.n	8004410 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	691b      	ldr	r3, [r3, #16]
 8004358:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800435c:	d133      	bne.n	80043c6 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004364:	b2db      	uxtb	r3, r3
 8004366:	2b21      	cmp	r3, #33	@ 0x21
 8004368:	d109      	bne.n	800437e <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800436e:	b2db      	uxtb	r3, r3
 8004370:	461a      	mov	r2, r3
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800437a:	611a      	str	r2, [r3, #16]
 800437c:	e008      	b.n	8004390 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004382:	b2db      	uxtb	r3, r3
 8004384:	f043 0301 	orr.w	r3, r3, #1
 8004388:	b2da      	uxtb	r2, r3
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004394:	2b00      	cmp	r3, #0
 8004396:	d004      	beq.n	80043a2 <I2C_Master_SB+0x92>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800439c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d108      	bne.n	80043b4 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d032      	beq.n	8004410 <I2C_Master_SB+0x100>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d02d      	beq.n	8004410 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	685a      	ldr	r2, [r3, #4]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80043c2:	605a      	str	r2, [r3, #4]
}
 80043c4:	e024      	b.n	8004410 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d10e      	bne.n	80043ec <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043d2:	b29b      	uxth	r3, r3
 80043d4:	11db      	asrs	r3, r3, #7
 80043d6:	b2db      	uxtb	r3, r3
 80043d8:	f003 0306 	and.w	r3, r3, #6
 80043dc:	b2db      	uxtb	r3, r3
 80043de:	f063 030f 	orn	r3, r3, #15
 80043e2:	b2da      	uxtb	r2, r3
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	611a      	str	r2, [r3, #16]
}
 80043ea:	e011      	b.n	8004410 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043f0:	2b01      	cmp	r3, #1
 80043f2:	d10d      	bne.n	8004410 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043f8:	b29b      	uxth	r3, r3
 80043fa:	11db      	asrs	r3, r3, #7
 80043fc:	b2db      	uxtb	r3, r3
 80043fe:	f003 0306 	and.w	r3, r3, #6
 8004402:	b2db      	uxtb	r3, r3
 8004404:	f063 030e 	orn	r3, r3, #14
 8004408:	b2da      	uxtb	r2, r3
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	611a      	str	r2, [r3, #16]
}
 8004410:	bf00      	nop
 8004412:	370c      	adds	r7, #12
 8004414:	46bd      	mov	sp, r7
 8004416:	bc80      	pop	{r7}
 8004418:	4770      	bx	lr

0800441a <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800441a:	b480      	push	{r7}
 800441c:	b083      	sub	sp, #12
 800441e:	af00      	add	r7, sp, #0
 8004420:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004426:	b2da      	uxtb	r2, r3
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004432:	2b00      	cmp	r3, #0
 8004434:	d004      	beq.n	8004440 <I2C_Master_ADD10+0x26>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800443a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800443c:	2b00      	cmp	r3, #0
 800443e:	d108      	bne.n	8004452 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004444:	2b00      	cmp	r3, #0
 8004446:	d00c      	beq.n	8004462 <I2C_Master_ADD10+0x48>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800444c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800444e:	2b00      	cmp	r3, #0
 8004450:	d007      	beq.n	8004462 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	685a      	ldr	r2, [r3, #4]
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004460:	605a      	str	r2, [r3, #4]
  }
}
 8004462:	bf00      	nop
 8004464:	370c      	adds	r7, #12
 8004466:	46bd      	mov	sp, r7
 8004468:	bc80      	pop	{r7}
 800446a:	4770      	bx	lr

0800446c <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800446c:	b480      	push	{r7}
 800446e:	b091      	sub	sp, #68	@ 0x44
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800447a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004482:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004488:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004490:	b2db      	uxtb	r3, r3
 8004492:	2b22      	cmp	r3, #34	@ 0x22
 8004494:	f040 8174 	bne.w	8004780 <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800449c:	2b00      	cmp	r3, #0
 800449e:	d10f      	bne.n	80044c0 <I2C_Master_ADDR+0x54>
 80044a0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80044a4:	2b40      	cmp	r3, #64	@ 0x40
 80044a6:	d10b      	bne.n	80044c0 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044a8:	2300      	movs	r3, #0
 80044aa:	633b      	str	r3, [r7, #48]	@ 0x30
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	695b      	ldr	r3, [r3, #20]
 80044b2:	633b      	str	r3, [r7, #48]	@ 0x30
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	699b      	ldr	r3, [r3, #24]
 80044ba:	633b      	str	r3, [r7, #48]	@ 0x30
 80044bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044be:	e16b      	b.n	8004798 <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d11d      	bne.n	8004504 <I2C_Master_ADDR+0x98>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	691b      	ldr	r3, [r3, #16]
 80044cc:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80044d0:	d118      	bne.n	8004504 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044d2:	2300      	movs	r3, #0
 80044d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	695b      	ldr	r3, [r3, #20]
 80044dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	699b      	ldr	r3, [r3, #24]
 80044e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80044e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	681a      	ldr	r2, [r3, #0]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80044f6:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044fc:	1c5a      	adds	r2, r3, #1
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	651a      	str	r2, [r3, #80]	@ 0x50
 8004502:	e149      	b.n	8004798 <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004508:	b29b      	uxth	r3, r3
 800450a:	2b00      	cmp	r3, #0
 800450c:	d113      	bne.n	8004536 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800450e:	2300      	movs	r3, #0
 8004510:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	695b      	ldr	r3, [r3, #20]
 8004518:	62bb      	str	r3, [r7, #40]	@ 0x28
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	699b      	ldr	r3, [r3, #24]
 8004520:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004522:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	681a      	ldr	r2, [r3, #0]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004532:	601a      	str	r2, [r3, #0]
 8004534:	e120      	b.n	8004778 <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800453a:	b29b      	uxth	r3, r3
 800453c:	2b01      	cmp	r3, #1
 800453e:	f040 808a 	bne.w	8004656 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8004542:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004544:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004548:	d137      	bne.n	80045ba <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	681a      	ldr	r2, [r3, #0]
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004558:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004564:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004568:	d113      	bne.n	8004592 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	681a      	ldr	r2, [r3, #0]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004578:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800457a:	2300      	movs	r3, #0
 800457c:	627b      	str	r3, [r7, #36]	@ 0x24
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	695b      	ldr	r3, [r3, #20]
 8004584:	627b      	str	r3, [r7, #36]	@ 0x24
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	699b      	ldr	r3, [r3, #24]
 800458c:	627b      	str	r3, [r7, #36]	@ 0x24
 800458e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004590:	e0f2      	b.n	8004778 <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004592:	2300      	movs	r3, #0
 8004594:	623b      	str	r3, [r7, #32]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	695b      	ldr	r3, [r3, #20]
 800459c:	623b      	str	r3, [r7, #32]
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	699b      	ldr	r3, [r3, #24]
 80045a4:	623b      	str	r3, [r7, #32]
 80045a6:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	681a      	ldr	r2, [r3, #0]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80045b6:	601a      	str	r2, [r3, #0]
 80045b8:	e0de      	b.n	8004778 <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80045ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045bc:	2b08      	cmp	r3, #8
 80045be:	d02e      	beq.n	800461e <I2C_Master_ADDR+0x1b2>
 80045c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045c2:	2b20      	cmp	r3, #32
 80045c4:	d02b      	beq.n	800461e <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80045c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045c8:	2b12      	cmp	r3, #18
 80045ca:	d102      	bne.n	80045d2 <I2C_Master_ADDR+0x166>
 80045cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045ce:	2b01      	cmp	r3, #1
 80045d0:	d125      	bne.n	800461e <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80045d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045d4:	2b04      	cmp	r3, #4
 80045d6:	d00e      	beq.n	80045f6 <I2C_Master_ADDR+0x18a>
 80045d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045da:	2b02      	cmp	r3, #2
 80045dc:	d00b      	beq.n	80045f6 <I2C_Master_ADDR+0x18a>
 80045de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045e0:	2b10      	cmp	r3, #16
 80045e2:	d008      	beq.n	80045f6 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	681a      	ldr	r2, [r3, #0]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80045f2:	601a      	str	r2, [r3, #0]
 80045f4:	e007      	b.n	8004606 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	681a      	ldr	r2, [r3, #0]
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004604:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004606:	2300      	movs	r3, #0
 8004608:	61fb      	str	r3, [r7, #28]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	695b      	ldr	r3, [r3, #20]
 8004610:	61fb      	str	r3, [r7, #28]
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	699b      	ldr	r3, [r3, #24]
 8004618:	61fb      	str	r3, [r7, #28]
 800461a:	69fb      	ldr	r3, [r7, #28]
 800461c:	e0ac      	b.n	8004778 <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	681a      	ldr	r2, [r3, #0]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800462c:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800462e:	2300      	movs	r3, #0
 8004630:	61bb      	str	r3, [r7, #24]
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	695b      	ldr	r3, [r3, #20]
 8004638:	61bb      	str	r3, [r7, #24]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	699b      	ldr	r3, [r3, #24]
 8004640:	61bb      	str	r3, [r7, #24]
 8004642:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	681a      	ldr	r2, [r3, #0]
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004652:	601a      	str	r2, [r3, #0]
 8004654:	e090      	b.n	8004778 <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800465a:	b29b      	uxth	r3, r3
 800465c:	2b02      	cmp	r3, #2
 800465e:	d158      	bne.n	8004712 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004660:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004662:	2b04      	cmp	r3, #4
 8004664:	d021      	beq.n	80046aa <I2C_Master_ADDR+0x23e>
 8004666:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004668:	2b02      	cmp	r3, #2
 800466a:	d01e      	beq.n	80046aa <I2C_Master_ADDR+0x23e>
 800466c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800466e:	2b10      	cmp	r3, #16
 8004670:	d01b      	beq.n	80046aa <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	681a      	ldr	r2, [r3, #0]
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004680:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004682:	2300      	movs	r3, #0
 8004684:	617b      	str	r3, [r7, #20]
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	695b      	ldr	r3, [r3, #20]
 800468c:	617b      	str	r3, [r7, #20]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	699b      	ldr	r3, [r3, #24]
 8004694:	617b      	str	r3, [r7, #20]
 8004696:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	681a      	ldr	r2, [r3, #0]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80046a6:	601a      	str	r2, [r3, #0]
 80046a8:	e012      	b.n	80046d0 <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	681a      	ldr	r2, [r3, #0]
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80046b8:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046ba:	2300      	movs	r3, #0
 80046bc:	613b      	str	r3, [r7, #16]
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	695b      	ldr	r3, [r3, #20]
 80046c4:	613b      	str	r3, [r7, #16]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	699b      	ldr	r3, [r3, #24]
 80046cc:	613b      	str	r3, [r7, #16]
 80046ce:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80046da:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80046de:	d14b      	bne.n	8004778 <I2C_Master_ADDR+0x30c>
 80046e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046e2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80046e6:	d00b      	beq.n	8004700 <I2C_Master_ADDR+0x294>
 80046e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046ea:	2b01      	cmp	r3, #1
 80046ec:	d008      	beq.n	8004700 <I2C_Master_ADDR+0x294>
 80046ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046f0:	2b08      	cmp	r3, #8
 80046f2:	d005      	beq.n	8004700 <I2C_Master_ADDR+0x294>
 80046f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046f6:	2b10      	cmp	r3, #16
 80046f8:	d002      	beq.n	8004700 <I2C_Master_ADDR+0x294>
 80046fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046fc:	2b20      	cmp	r3, #32
 80046fe:	d13b      	bne.n	8004778 <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	685a      	ldr	r2, [r3, #4]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800470e:	605a      	str	r2, [r3, #4]
 8004710:	e032      	b.n	8004778 <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	681a      	ldr	r2, [r3, #0]
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004720:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800472c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004730:	d117      	bne.n	8004762 <I2C_Master_ADDR+0x2f6>
 8004732:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004734:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004738:	d00b      	beq.n	8004752 <I2C_Master_ADDR+0x2e6>
 800473a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800473c:	2b01      	cmp	r3, #1
 800473e:	d008      	beq.n	8004752 <I2C_Master_ADDR+0x2e6>
 8004740:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004742:	2b08      	cmp	r3, #8
 8004744:	d005      	beq.n	8004752 <I2C_Master_ADDR+0x2e6>
 8004746:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004748:	2b10      	cmp	r3, #16
 800474a:	d002      	beq.n	8004752 <I2C_Master_ADDR+0x2e6>
 800474c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800474e:	2b20      	cmp	r3, #32
 8004750:	d107      	bne.n	8004762 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	685a      	ldr	r2, [r3, #4]
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004760:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004762:	2300      	movs	r3, #0
 8004764:	60fb      	str	r3, [r7, #12]
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	695b      	ldr	r3, [r3, #20]
 800476c:	60fb      	str	r3, [r7, #12]
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	699b      	ldr	r3, [r3, #24]
 8004774:	60fb      	str	r3, [r7, #12]
 8004776:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2200      	movs	r2, #0
 800477c:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800477e:	e00b      	b.n	8004798 <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004780:	2300      	movs	r3, #0
 8004782:	60bb      	str	r3, [r7, #8]
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	695b      	ldr	r3, [r3, #20]
 800478a:	60bb      	str	r3, [r7, #8]
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	699b      	ldr	r3, [r3, #24]
 8004792:	60bb      	str	r3, [r7, #8]
 8004794:	68bb      	ldr	r3, [r7, #8]
}
 8004796:	e7ff      	b.n	8004798 <I2C_Master_ADDR+0x32c>
 8004798:	bf00      	nop
 800479a:	3744      	adds	r7, #68	@ 0x44
 800479c:	46bd      	mov	sp, r7
 800479e:	bc80      	pop	{r7}
 80047a0:	4770      	bx	lr

080047a2 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80047a2:	b580      	push	{r7, lr}
 80047a4:	b084      	sub	sp, #16
 80047a6:	af00      	add	r7, sp, #0
 80047a8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80047b0:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047b6:	b29b      	uxth	r3, r3
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d02b      	beq.n	8004814 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047c0:	781a      	ldrb	r2, [r3, #0]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047cc:	1c5a      	adds	r2, r3, #1
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047d6:	b29b      	uxth	r3, r3
 80047d8:	3b01      	subs	r3, #1
 80047da:	b29a      	uxth	r2, r3
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047e4:	b29b      	uxth	r3, r3
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d114      	bne.n	8004814 <I2C_SlaveTransmit_TXE+0x72>
 80047ea:	7bfb      	ldrb	r3, [r7, #15]
 80047ec:	2b29      	cmp	r3, #41	@ 0x29
 80047ee:	d111      	bne.n	8004814 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	685a      	ldr	r2, [r3, #4]
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80047fe:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2221      	movs	r2, #33	@ 0x21
 8004804:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2228      	movs	r2, #40	@ 0x28
 800480a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800480e:	6878      	ldr	r0, [r7, #4]
 8004810:	f7ff f9cf 	bl	8003bb2 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004814:	bf00      	nop
 8004816:	3710      	adds	r7, #16
 8004818:	46bd      	mov	sp, r7
 800481a:	bd80      	pop	{r7, pc}

0800481c <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800481c:	b480      	push	{r7}
 800481e:	b083      	sub	sp, #12
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004828:	b29b      	uxth	r3, r3
 800482a:	2b00      	cmp	r3, #0
 800482c:	d011      	beq.n	8004852 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004832:	781a      	ldrb	r2, [r3, #0]
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800483e:	1c5a      	adds	r2, r3, #1
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004848:	b29b      	uxth	r3, r3
 800484a:	3b01      	subs	r3, #1
 800484c:	b29a      	uxth	r2, r3
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8004852:	bf00      	nop
 8004854:	370c      	adds	r7, #12
 8004856:	46bd      	mov	sp, r7
 8004858:	bc80      	pop	{r7}
 800485a:	4770      	bx	lr

0800485c <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b084      	sub	sp, #16
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800486a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004870:	b29b      	uxth	r3, r3
 8004872:	2b00      	cmp	r3, #0
 8004874:	d02c      	beq.n	80048d0 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	691a      	ldr	r2, [r3, #16]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004880:	b2d2      	uxtb	r2, r2
 8004882:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004888:	1c5a      	adds	r2, r3, #1
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004892:	b29b      	uxth	r3, r3
 8004894:	3b01      	subs	r3, #1
 8004896:	b29a      	uxth	r2, r3
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048a0:	b29b      	uxth	r3, r3
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d114      	bne.n	80048d0 <I2C_SlaveReceive_RXNE+0x74>
 80048a6:	7bfb      	ldrb	r3, [r7, #15]
 80048a8:	2b2a      	cmp	r3, #42	@ 0x2a
 80048aa:	d111      	bne.n	80048d0 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	685a      	ldr	r2, [r3, #4]
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80048ba:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2222      	movs	r2, #34	@ 0x22
 80048c0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2228      	movs	r2, #40	@ 0x28
 80048c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80048ca:	6878      	ldr	r0, [r7, #4]
 80048cc:	f7ff f97a 	bl	8003bc4 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80048d0:	bf00      	nop
 80048d2:	3710      	adds	r7, #16
 80048d4:	46bd      	mov	sp, r7
 80048d6:	bd80      	pop	{r7, pc}

080048d8 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80048d8:	b480      	push	{r7}
 80048da:	b083      	sub	sp, #12
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048e4:	b29b      	uxth	r3, r3
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d012      	beq.n	8004910 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	691a      	ldr	r2, [r3, #16]
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048f4:	b2d2      	uxtb	r2, r2
 80048f6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048fc:	1c5a      	adds	r2, r3, #1
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004906:	b29b      	uxth	r3, r3
 8004908:	3b01      	subs	r3, #1
 800490a:	b29a      	uxth	r2, r3
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8004910:	bf00      	nop
 8004912:	370c      	adds	r7, #12
 8004914:	46bd      	mov	sp, r7
 8004916:	bc80      	pop	{r7}
 8004918:	4770      	bx	lr

0800491a <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800491a:	b580      	push	{r7, lr}
 800491c:	b084      	sub	sp, #16
 800491e:	af00      	add	r7, sp, #0
 8004920:	6078      	str	r0, [r7, #4]
 8004922:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004924:	2300      	movs	r3, #0
 8004926:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800492e:	b2db      	uxtb	r3, r3
 8004930:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004934:	2b28      	cmp	r3, #40	@ 0x28
 8004936:	d125      	bne.n	8004984 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	685a      	ldr	r2, [r3, #4]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004946:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	f003 0304 	and.w	r3, r3, #4
 800494e:	2b00      	cmp	r3, #0
 8004950:	d101      	bne.n	8004956 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8004952:	2301      	movs	r3, #1
 8004954:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800495c:	2b00      	cmp	r3, #0
 800495e:	d103      	bne.n	8004968 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	68db      	ldr	r3, [r3, #12]
 8004964:	81bb      	strh	r3, [r7, #12]
 8004966:	e002      	b.n	800496e <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	699b      	ldr	r3, [r3, #24]
 800496c:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2200      	movs	r2, #0
 8004972:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004976:	89ba      	ldrh	r2, [r7, #12]
 8004978:	7bfb      	ldrb	r3, [r7, #15]
 800497a:	4619      	mov	r1, r3
 800497c:	6878      	ldr	r0, [r7, #4]
 800497e:	f7ff f92a 	bl	8003bd6 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004982:	e00e      	b.n	80049a2 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004984:	2300      	movs	r3, #0
 8004986:	60bb      	str	r3, [r7, #8]
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	695b      	ldr	r3, [r3, #20]
 800498e:	60bb      	str	r3, [r7, #8]
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	699b      	ldr	r3, [r3, #24]
 8004996:	60bb      	str	r3, [r7, #8]
 8004998:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2200      	movs	r2, #0
 800499e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 80049a2:	bf00      	nop
 80049a4:	3710      	adds	r7, #16
 80049a6:	46bd      	mov	sp, r7
 80049a8:	bd80      	pop	{r7, pc}
	...

080049ac <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b084      	sub	sp, #16
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80049ba:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	685a      	ldr	r2, [r3, #4]
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80049ca:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80049cc:	2300      	movs	r3, #0
 80049ce:	60bb      	str	r3, [r7, #8]
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	695b      	ldr	r3, [r3, #20]
 80049d6:	60bb      	str	r3, [r7, #8]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	681a      	ldr	r2, [r3, #0]
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f042 0201 	orr.w	r2, r2, #1
 80049e6:	601a      	str	r2, [r3, #0]
 80049e8:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	681a      	ldr	r2, [r3, #0]
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80049f8:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	685b      	ldr	r3, [r3, #4]
 8004a00:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004a04:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a08:	d172      	bne.n	8004af0 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004a0a:	7bfb      	ldrb	r3, [r7, #15]
 8004a0c:	2b22      	cmp	r3, #34	@ 0x22
 8004a0e:	d002      	beq.n	8004a16 <I2C_Slave_STOPF+0x6a>
 8004a10:	7bfb      	ldrb	r3, [r7, #15]
 8004a12:	2b2a      	cmp	r3, #42	@ 0x2a
 8004a14:	d135      	bne.n	8004a82 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	b29a      	uxth	r2, r3
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a28:	b29b      	uxth	r3, r3
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d005      	beq.n	8004a3a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a32:	f043 0204 	orr.w	r2, r3, #4
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	685a      	ldr	r2, [r3, #4]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004a48:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a4e:	4618      	mov	r0, r3
 8004a50:	f7fd fe72 	bl	8002738 <HAL_DMA_GetState>
 8004a54:	4603      	mov	r3, r0
 8004a56:	2b01      	cmp	r3, #1
 8004a58:	d049      	beq.n	8004aee <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a5e:	4a69      	ldr	r2, [pc, #420]	@ (8004c04 <I2C_Slave_STOPF+0x258>)
 8004a60:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a66:	4618      	mov	r0, r3
 8004a68:	f7fd fce8 	bl	800243c <HAL_DMA_Abort_IT>
 8004a6c:	4603      	mov	r3, r0
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d03d      	beq.n	8004aee <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a78:	687a      	ldr	r2, [r7, #4]
 8004a7a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004a7c:	4610      	mov	r0, r2
 8004a7e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004a80:	e035      	b.n	8004aee <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	685b      	ldr	r3, [r3, #4]
 8004a8a:	b29a      	uxth	r2, r3
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a94:	b29b      	uxth	r3, r3
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d005      	beq.n	8004aa6 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a9e:	f043 0204 	orr.w	r2, r3, #4
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	685a      	ldr	r2, [r3, #4]
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004ab4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004aba:	4618      	mov	r0, r3
 8004abc:	f7fd fe3c 	bl	8002738 <HAL_DMA_GetState>
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	2b01      	cmp	r3, #1
 8004ac4:	d014      	beq.n	8004af0 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004aca:	4a4e      	ldr	r2, [pc, #312]	@ (8004c04 <I2C_Slave_STOPF+0x258>)
 8004acc:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	f7fd fcb2 	bl	800243c <HAL_DMA_Abort_IT>
 8004ad8:	4603      	mov	r3, r0
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d008      	beq.n	8004af0 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ae2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ae4:	687a      	ldr	r2, [r7, #4]
 8004ae6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004ae8:	4610      	mov	r0, r2
 8004aea:	4798      	blx	r3
 8004aec:	e000      	b.n	8004af0 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004aee:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004af4:	b29b      	uxth	r3, r3
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d03e      	beq.n	8004b78 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	695b      	ldr	r3, [r3, #20]
 8004b00:	f003 0304 	and.w	r3, r3, #4
 8004b04:	2b04      	cmp	r3, #4
 8004b06:	d112      	bne.n	8004b2e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	691a      	ldr	r2, [r3, #16]
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b12:	b2d2      	uxtb	r2, r2
 8004b14:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b1a:	1c5a      	adds	r2, r3, #1
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b24:	b29b      	uxth	r3, r3
 8004b26:	3b01      	subs	r3, #1
 8004b28:	b29a      	uxth	r2, r3
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	695b      	ldr	r3, [r3, #20]
 8004b34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b38:	2b40      	cmp	r3, #64	@ 0x40
 8004b3a:	d112      	bne.n	8004b62 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	691a      	ldr	r2, [r3, #16]
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b46:	b2d2      	uxtb	r2, r2
 8004b48:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b4e:	1c5a      	adds	r2, r3, #1
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b58:	b29b      	uxth	r3, r3
 8004b5a:	3b01      	subs	r3, #1
 8004b5c:	b29a      	uxth	r2, r3
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b66:	b29b      	uxth	r3, r3
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d005      	beq.n	8004b78 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b70:	f043 0204 	orr.w	r2, r3, #4
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d003      	beq.n	8004b88 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004b80:	6878      	ldr	r0, [r7, #4]
 8004b82:	f000 f843 	bl	8004c0c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8004b86:	e039      	b.n	8004bfc <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004b88:	7bfb      	ldrb	r3, [r7, #15]
 8004b8a:	2b2a      	cmp	r3, #42	@ 0x2a
 8004b8c:	d109      	bne.n	8004ba2 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2200      	movs	r2, #0
 8004b92:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2228      	movs	r2, #40	@ 0x28
 8004b98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004b9c:	6878      	ldr	r0, [r7, #4]
 8004b9e:	f7ff f811 	bl	8003bc4 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ba8:	b2db      	uxtb	r3, r3
 8004baa:	2b28      	cmp	r3, #40	@ 0x28
 8004bac:	d111      	bne.n	8004bd2 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	4a15      	ldr	r2, [pc, #84]	@ (8004c08 <I2C_Slave_STOPF+0x25c>)
 8004bb2:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2220      	movs	r2, #32
 8004bbe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004bca:	6878      	ldr	r0, [r7, #4]
 8004bcc:	f7ff f810 	bl	8003bf0 <HAL_I2C_ListenCpltCallback>
}
 8004bd0:	e014      	b.n	8004bfc <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bd6:	2b22      	cmp	r3, #34	@ 0x22
 8004bd8:	d002      	beq.n	8004be0 <I2C_Slave_STOPF+0x234>
 8004bda:	7bfb      	ldrb	r3, [r7, #15]
 8004bdc:	2b22      	cmp	r3, #34	@ 0x22
 8004bde:	d10d      	bne.n	8004bfc <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2200      	movs	r2, #0
 8004be4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2220      	movs	r2, #32
 8004bea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004bf6:	6878      	ldr	r0, [r7, #4]
 8004bf8:	f7fe ffe4 	bl	8003bc4 <HAL_I2C_SlaveRxCpltCallback>
}
 8004bfc:	bf00      	nop
 8004bfe:	3710      	adds	r7, #16
 8004c00:	46bd      	mov	sp, r7
 8004c02:	bd80      	pop	{r7, pc}
 8004c04:	08005271 	.word	0x08005271
 8004c08:	ffff0000 	.word	0xffff0000

08004c0c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b084      	sub	sp, #16
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c1a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004c22:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004c24:	7bbb      	ldrb	r3, [r7, #14]
 8004c26:	2b10      	cmp	r3, #16
 8004c28:	d002      	beq.n	8004c30 <I2C_ITError+0x24>
 8004c2a:	7bbb      	ldrb	r3, [r7, #14]
 8004c2c:	2b40      	cmp	r3, #64	@ 0x40
 8004c2e:	d10a      	bne.n	8004c46 <I2C_ITError+0x3a>
 8004c30:	7bfb      	ldrb	r3, [r7, #15]
 8004c32:	2b22      	cmp	r3, #34	@ 0x22
 8004c34:	d107      	bne.n	8004c46 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	681a      	ldr	r2, [r3, #0]
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004c44:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004c46:	7bfb      	ldrb	r3, [r7, #15]
 8004c48:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004c4c:	2b28      	cmp	r3, #40	@ 0x28
 8004c4e:	d107      	bne.n	8004c60 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2200      	movs	r2, #0
 8004c54:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2228      	movs	r2, #40	@ 0x28
 8004c5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004c5e:	e015      	b.n	8004c8c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004c6a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004c6e:	d00a      	beq.n	8004c86 <I2C_ITError+0x7a>
 8004c70:	7bfb      	ldrb	r3, [r7, #15]
 8004c72:	2b60      	cmp	r3, #96	@ 0x60
 8004c74:	d007      	beq.n	8004c86 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2220      	movs	r2, #32
 8004c7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2200      	movs	r2, #0
 8004c82:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2200      	movs	r2, #0
 8004c8a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004c96:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004c9a:	d162      	bne.n	8004d62 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	685a      	ldr	r2, [r3, #4]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004caa:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004cb0:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8004cb4:	b2db      	uxtb	r3, r3
 8004cb6:	2b01      	cmp	r3, #1
 8004cb8:	d020      	beq.n	8004cfc <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004cbe:	4a6a      	ldr	r2, [pc, #424]	@ (8004e68 <I2C_ITError+0x25c>)
 8004cc0:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	f7fd fbb8 	bl	800243c <HAL_DMA_Abort_IT>
 8004ccc:	4603      	mov	r3, r0
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	f000 8089 	beq.w	8004de6 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	681a      	ldr	r2, [r3, #0]
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f022 0201 	bic.w	r2, r2, #1
 8004ce2:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2220      	movs	r2, #32
 8004ce8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004cf0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004cf2:	687a      	ldr	r2, [r7, #4]
 8004cf4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004cf6:	4610      	mov	r0, r2
 8004cf8:	4798      	blx	r3
 8004cfa:	e074      	b.n	8004de6 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d00:	4a59      	ldr	r2, [pc, #356]	@ (8004e68 <I2C_ITError+0x25c>)
 8004d02:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d08:	4618      	mov	r0, r3
 8004d0a:	f7fd fb97 	bl	800243c <HAL_DMA_Abort_IT>
 8004d0e:	4603      	mov	r3, r0
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d068      	beq.n	8004de6 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	695b      	ldr	r3, [r3, #20]
 8004d1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d1e:	2b40      	cmp	r3, #64	@ 0x40
 8004d20:	d10b      	bne.n	8004d3a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	691a      	ldr	r2, [r3, #16]
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d2c:	b2d2      	uxtb	r2, r2
 8004d2e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d34:	1c5a      	adds	r2, r3, #1
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	681a      	ldr	r2, [r3, #0]
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f022 0201 	bic.w	r2, r2, #1
 8004d48:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2220      	movs	r2, #32
 8004d4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d58:	687a      	ldr	r2, [r7, #4]
 8004d5a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004d5c:	4610      	mov	r0, r2
 8004d5e:	4798      	blx	r3
 8004d60:	e041      	b.n	8004de6 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d68:	b2db      	uxtb	r3, r3
 8004d6a:	2b60      	cmp	r3, #96	@ 0x60
 8004d6c:	d125      	bne.n	8004dba <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2220      	movs	r2, #32
 8004d72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2200      	movs	r2, #0
 8004d7a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	695b      	ldr	r3, [r3, #20]
 8004d82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d86:	2b40      	cmp	r3, #64	@ 0x40
 8004d88:	d10b      	bne.n	8004da2 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	691a      	ldr	r2, [r3, #16]
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d94:	b2d2      	uxtb	r2, r2
 8004d96:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d9c:	1c5a      	adds	r2, r3, #1
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	681a      	ldr	r2, [r3, #0]
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f022 0201 	bic.w	r2, r2, #1
 8004db0:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004db2:	6878      	ldr	r0, [r7, #4]
 8004db4:	f7fe ff40 	bl	8003c38 <HAL_I2C_AbortCpltCallback>
 8004db8:	e015      	b.n	8004de6 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	695b      	ldr	r3, [r3, #20]
 8004dc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004dc4:	2b40      	cmp	r3, #64	@ 0x40
 8004dc6:	d10b      	bne.n	8004de0 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	691a      	ldr	r2, [r3, #16]
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dd2:	b2d2      	uxtb	r2, r2
 8004dd4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dda:	1c5a      	adds	r2, r3, #1
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004de0:	6878      	ldr	r0, [r7, #4]
 8004de2:	f7fe ff20 	bl	8003c26 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dea:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	f003 0301 	and.w	r3, r3, #1
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d10e      	bne.n	8004e14 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004df6:	68bb      	ldr	r3, [r7, #8]
 8004df8:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d109      	bne.n	8004e14 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004e00:	68bb      	ldr	r3, [r7, #8]
 8004e02:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d104      	bne.n	8004e14 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8004e0a:	68bb      	ldr	r3, [r7, #8]
 8004e0c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d007      	beq.n	8004e24 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	685a      	ldr	r2, [r3, #4]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004e22:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e2a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e30:	f003 0304 	and.w	r3, r3, #4
 8004e34:	2b04      	cmp	r3, #4
 8004e36:	d113      	bne.n	8004e60 <I2C_ITError+0x254>
 8004e38:	7bfb      	ldrb	r3, [r7, #15]
 8004e3a:	2b28      	cmp	r3, #40	@ 0x28
 8004e3c:	d110      	bne.n	8004e60 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	4a0a      	ldr	r2, [pc, #40]	@ (8004e6c <I2C_ITError+0x260>)
 8004e42:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2200      	movs	r2, #0
 8004e48:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2220      	movs	r2, #32
 8004e4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2200      	movs	r2, #0
 8004e56:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004e5a:	6878      	ldr	r0, [r7, #4]
 8004e5c:	f7fe fec8 	bl	8003bf0 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004e60:	bf00      	nop
 8004e62:	3710      	adds	r7, #16
 8004e64:	46bd      	mov	sp, r7
 8004e66:	bd80      	pop	{r7, pc}
 8004e68:	08005271 	.word	0x08005271
 8004e6c:	ffff0000 	.word	0xffff0000

08004e70 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b088      	sub	sp, #32
 8004e74:	af02      	add	r7, sp, #8
 8004e76:	60f8      	str	r0, [r7, #12]
 8004e78:	607a      	str	r2, [r7, #4]
 8004e7a:	603b      	str	r3, [r7, #0]
 8004e7c:	460b      	mov	r3, r1
 8004e7e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e84:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004e86:	697b      	ldr	r3, [r7, #20]
 8004e88:	2b08      	cmp	r3, #8
 8004e8a:	d006      	beq.n	8004e9a <I2C_MasterRequestWrite+0x2a>
 8004e8c:	697b      	ldr	r3, [r7, #20]
 8004e8e:	2b01      	cmp	r3, #1
 8004e90:	d003      	beq.n	8004e9a <I2C_MasterRequestWrite+0x2a>
 8004e92:	697b      	ldr	r3, [r7, #20]
 8004e94:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004e98:	d108      	bne.n	8004eac <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	681a      	ldr	r2, [r3, #0]
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004ea8:	601a      	str	r2, [r3, #0]
 8004eaa:	e00b      	b.n	8004ec4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004eb0:	2b12      	cmp	r3, #18
 8004eb2:	d107      	bne.n	8004ec4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	681a      	ldr	r2, [r3, #0]
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004ec2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	9300      	str	r3, [sp, #0]
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004ed0:	68f8      	ldr	r0, [r7, #12]
 8004ed2:	f000 fa75 	bl	80053c0 <I2C_WaitOnFlagUntilTimeout>
 8004ed6:	4603      	mov	r3, r0
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d00d      	beq.n	8004ef8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ee6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004eea:	d103      	bne.n	8004ef4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004ef2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004ef4:	2303      	movs	r3, #3
 8004ef6:	e035      	b.n	8004f64 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	691b      	ldr	r3, [r3, #16]
 8004efc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004f00:	d108      	bne.n	8004f14 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004f02:	897b      	ldrh	r3, [r7, #10]
 8004f04:	b2db      	uxtb	r3, r3
 8004f06:	461a      	mov	r2, r3
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004f10:	611a      	str	r2, [r3, #16]
 8004f12:	e01b      	b.n	8004f4c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004f14:	897b      	ldrh	r3, [r7, #10]
 8004f16:	11db      	asrs	r3, r3, #7
 8004f18:	b2db      	uxtb	r3, r3
 8004f1a:	f003 0306 	and.w	r3, r3, #6
 8004f1e:	b2db      	uxtb	r3, r3
 8004f20:	f063 030f 	orn	r3, r3, #15
 8004f24:	b2da      	uxtb	r2, r3
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	687a      	ldr	r2, [r7, #4]
 8004f30:	490e      	ldr	r1, [pc, #56]	@ (8004f6c <I2C_MasterRequestWrite+0xfc>)
 8004f32:	68f8      	ldr	r0, [r7, #12]
 8004f34:	f000 fabe 	bl	80054b4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004f38:	4603      	mov	r3, r0
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d001      	beq.n	8004f42 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004f3e:	2301      	movs	r3, #1
 8004f40:	e010      	b.n	8004f64 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004f42:	897b      	ldrh	r3, [r7, #10]
 8004f44:	b2da      	uxtb	r2, r3
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	687a      	ldr	r2, [r7, #4]
 8004f50:	4907      	ldr	r1, [pc, #28]	@ (8004f70 <I2C_MasterRequestWrite+0x100>)
 8004f52:	68f8      	ldr	r0, [r7, #12]
 8004f54:	f000 faae 	bl	80054b4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004f58:	4603      	mov	r3, r0
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d001      	beq.n	8004f62 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004f5e:	2301      	movs	r3, #1
 8004f60:	e000      	b.n	8004f64 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004f62:	2300      	movs	r3, #0
}
 8004f64:	4618      	mov	r0, r3
 8004f66:	3718      	adds	r7, #24
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	bd80      	pop	{r7, pc}
 8004f6c:	00010008 	.word	0x00010008
 8004f70:	00010002 	.word	0x00010002

08004f74 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b088      	sub	sp, #32
 8004f78:	af02      	add	r7, sp, #8
 8004f7a:	60f8      	str	r0, [r7, #12]
 8004f7c:	4608      	mov	r0, r1
 8004f7e:	4611      	mov	r1, r2
 8004f80:	461a      	mov	r2, r3
 8004f82:	4603      	mov	r3, r0
 8004f84:	817b      	strh	r3, [r7, #10]
 8004f86:	460b      	mov	r3, r1
 8004f88:	813b      	strh	r3, [r7, #8]
 8004f8a:	4613      	mov	r3, r2
 8004f8c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	681a      	ldr	r2, [r3, #0]
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004f9c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004f9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fa0:	9300      	str	r3, [sp, #0]
 8004fa2:	6a3b      	ldr	r3, [r7, #32]
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004faa:	68f8      	ldr	r0, [r7, #12]
 8004fac:	f000 fa08 	bl	80053c0 <I2C_WaitOnFlagUntilTimeout>
 8004fb0:	4603      	mov	r3, r0
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d00d      	beq.n	8004fd2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fc0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004fc4:	d103      	bne.n	8004fce <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004fcc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004fce:	2303      	movs	r3, #3
 8004fd0:	e05f      	b.n	8005092 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004fd2:	897b      	ldrh	r3, [r7, #10]
 8004fd4:	b2db      	uxtb	r3, r3
 8004fd6:	461a      	mov	r2, r3
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004fe0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004fe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fe4:	6a3a      	ldr	r2, [r7, #32]
 8004fe6:	492d      	ldr	r1, [pc, #180]	@ (800509c <I2C_RequestMemoryWrite+0x128>)
 8004fe8:	68f8      	ldr	r0, [r7, #12]
 8004fea:	f000 fa63 	bl	80054b4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004fee:	4603      	mov	r3, r0
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d001      	beq.n	8004ff8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	e04c      	b.n	8005092 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	617b      	str	r3, [r7, #20]
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	695b      	ldr	r3, [r3, #20]
 8005002:	617b      	str	r3, [r7, #20]
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	699b      	ldr	r3, [r3, #24]
 800500a:	617b      	str	r3, [r7, #20]
 800500c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800500e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005010:	6a39      	ldr	r1, [r7, #32]
 8005012:	68f8      	ldr	r0, [r7, #12]
 8005014:	f000 faee 	bl	80055f4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005018:	4603      	mov	r3, r0
 800501a:	2b00      	cmp	r3, #0
 800501c:	d00d      	beq.n	800503a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005022:	2b04      	cmp	r3, #4
 8005024:	d107      	bne.n	8005036 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	681a      	ldr	r2, [r3, #0]
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005034:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005036:	2301      	movs	r3, #1
 8005038:	e02b      	b.n	8005092 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800503a:	88fb      	ldrh	r3, [r7, #6]
 800503c:	2b01      	cmp	r3, #1
 800503e:	d105      	bne.n	800504c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005040:	893b      	ldrh	r3, [r7, #8]
 8005042:	b2da      	uxtb	r2, r3
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	611a      	str	r2, [r3, #16]
 800504a:	e021      	b.n	8005090 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800504c:	893b      	ldrh	r3, [r7, #8]
 800504e:	0a1b      	lsrs	r3, r3, #8
 8005050:	b29b      	uxth	r3, r3
 8005052:	b2da      	uxtb	r2, r3
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800505a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800505c:	6a39      	ldr	r1, [r7, #32]
 800505e:	68f8      	ldr	r0, [r7, #12]
 8005060:	f000 fac8 	bl	80055f4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005064:	4603      	mov	r3, r0
 8005066:	2b00      	cmp	r3, #0
 8005068:	d00d      	beq.n	8005086 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800506e:	2b04      	cmp	r3, #4
 8005070:	d107      	bne.n	8005082 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	681a      	ldr	r2, [r3, #0]
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005080:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005082:	2301      	movs	r3, #1
 8005084:	e005      	b.n	8005092 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005086:	893b      	ldrh	r3, [r7, #8]
 8005088:	b2da      	uxtb	r2, r3
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005090:	2300      	movs	r3, #0
}
 8005092:	4618      	mov	r0, r3
 8005094:	3718      	adds	r7, #24
 8005096:	46bd      	mov	sp, r7
 8005098:	bd80      	pop	{r7, pc}
 800509a:	bf00      	nop
 800509c:	00010002 	.word	0x00010002

080050a0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b088      	sub	sp, #32
 80050a4:	af02      	add	r7, sp, #8
 80050a6:	60f8      	str	r0, [r7, #12]
 80050a8:	4608      	mov	r0, r1
 80050aa:	4611      	mov	r1, r2
 80050ac:	461a      	mov	r2, r3
 80050ae:	4603      	mov	r3, r0
 80050b0:	817b      	strh	r3, [r7, #10]
 80050b2:	460b      	mov	r3, r1
 80050b4:	813b      	strh	r3, [r7, #8]
 80050b6:	4613      	mov	r3, r2
 80050b8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	681a      	ldr	r2, [r3, #0]
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80050c8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	681a      	ldr	r2, [r3, #0]
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80050d8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80050da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050dc:	9300      	str	r3, [sp, #0]
 80050de:	6a3b      	ldr	r3, [r7, #32]
 80050e0:	2200      	movs	r2, #0
 80050e2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80050e6:	68f8      	ldr	r0, [r7, #12]
 80050e8:	f000 f96a 	bl	80053c0 <I2C_WaitOnFlagUntilTimeout>
 80050ec:	4603      	mov	r3, r0
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d00d      	beq.n	800510e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005100:	d103      	bne.n	800510a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005108:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800510a:	2303      	movs	r3, #3
 800510c:	e0aa      	b.n	8005264 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800510e:	897b      	ldrh	r3, [r7, #10]
 8005110:	b2db      	uxtb	r3, r3
 8005112:	461a      	mov	r2, r3
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800511c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800511e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005120:	6a3a      	ldr	r2, [r7, #32]
 8005122:	4952      	ldr	r1, [pc, #328]	@ (800526c <I2C_RequestMemoryRead+0x1cc>)
 8005124:	68f8      	ldr	r0, [r7, #12]
 8005126:	f000 f9c5 	bl	80054b4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800512a:	4603      	mov	r3, r0
 800512c:	2b00      	cmp	r3, #0
 800512e:	d001      	beq.n	8005134 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005130:	2301      	movs	r3, #1
 8005132:	e097      	b.n	8005264 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005134:	2300      	movs	r3, #0
 8005136:	617b      	str	r3, [r7, #20]
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	695b      	ldr	r3, [r3, #20]
 800513e:	617b      	str	r3, [r7, #20]
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	699b      	ldr	r3, [r3, #24]
 8005146:	617b      	str	r3, [r7, #20]
 8005148:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800514a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800514c:	6a39      	ldr	r1, [r7, #32]
 800514e:	68f8      	ldr	r0, [r7, #12]
 8005150:	f000 fa50 	bl	80055f4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005154:	4603      	mov	r3, r0
 8005156:	2b00      	cmp	r3, #0
 8005158:	d00d      	beq.n	8005176 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800515e:	2b04      	cmp	r3, #4
 8005160:	d107      	bne.n	8005172 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	681a      	ldr	r2, [r3, #0]
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005170:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005172:	2301      	movs	r3, #1
 8005174:	e076      	b.n	8005264 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005176:	88fb      	ldrh	r3, [r7, #6]
 8005178:	2b01      	cmp	r3, #1
 800517a:	d105      	bne.n	8005188 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800517c:	893b      	ldrh	r3, [r7, #8]
 800517e:	b2da      	uxtb	r2, r3
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	611a      	str	r2, [r3, #16]
 8005186:	e021      	b.n	80051cc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005188:	893b      	ldrh	r3, [r7, #8]
 800518a:	0a1b      	lsrs	r3, r3, #8
 800518c:	b29b      	uxth	r3, r3
 800518e:	b2da      	uxtb	r2, r3
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005196:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005198:	6a39      	ldr	r1, [r7, #32]
 800519a:	68f8      	ldr	r0, [r7, #12]
 800519c:	f000 fa2a 	bl	80055f4 <I2C_WaitOnTXEFlagUntilTimeout>
 80051a0:	4603      	mov	r3, r0
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d00d      	beq.n	80051c2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051aa:	2b04      	cmp	r3, #4
 80051ac:	d107      	bne.n	80051be <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	681a      	ldr	r2, [r3, #0]
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80051bc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80051be:	2301      	movs	r3, #1
 80051c0:	e050      	b.n	8005264 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80051c2:	893b      	ldrh	r3, [r7, #8]
 80051c4:	b2da      	uxtb	r2, r3
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80051cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80051ce:	6a39      	ldr	r1, [r7, #32]
 80051d0:	68f8      	ldr	r0, [r7, #12]
 80051d2:	f000 fa0f 	bl	80055f4 <I2C_WaitOnTXEFlagUntilTimeout>
 80051d6:	4603      	mov	r3, r0
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d00d      	beq.n	80051f8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051e0:	2b04      	cmp	r3, #4
 80051e2:	d107      	bne.n	80051f4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	681a      	ldr	r2, [r3, #0]
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80051f2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80051f4:	2301      	movs	r3, #1
 80051f6:	e035      	b.n	8005264 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	681a      	ldr	r2, [r3, #0]
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005206:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005208:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800520a:	9300      	str	r3, [sp, #0]
 800520c:	6a3b      	ldr	r3, [r7, #32]
 800520e:	2200      	movs	r2, #0
 8005210:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005214:	68f8      	ldr	r0, [r7, #12]
 8005216:	f000 f8d3 	bl	80053c0 <I2C_WaitOnFlagUntilTimeout>
 800521a:	4603      	mov	r3, r0
 800521c:	2b00      	cmp	r3, #0
 800521e:	d00d      	beq.n	800523c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800522a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800522e:	d103      	bne.n	8005238 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005236:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005238:	2303      	movs	r3, #3
 800523a:	e013      	b.n	8005264 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800523c:	897b      	ldrh	r3, [r7, #10]
 800523e:	b2db      	uxtb	r3, r3
 8005240:	f043 0301 	orr.w	r3, r3, #1
 8005244:	b2da      	uxtb	r2, r3
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800524c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800524e:	6a3a      	ldr	r2, [r7, #32]
 8005250:	4906      	ldr	r1, [pc, #24]	@ (800526c <I2C_RequestMemoryRead+0x1cc>)
 8005252:	68f8      	ldr	r0, [r7, #12]
 8005254:	f000 f92e 	bl	80054b4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005258:	4603      	mov	r3, r0
 800525a:	2b00      	cmp	r3, #0
 800525c:	d001      	beq.n	8005262 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800525e:	2301      	movs	r3, #1
 8005260:	e000      	b.n	8005264 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005262:	2300      	movs	r3, #0
}
 8005264:	4618      	mov	r0, r3
 8005266:	3718      	adds	r7, #24
 8005268:	46bd      	mov	sp, r7
 800526a:	bd80      	pop	{r7, pc}
 800526c:	00010002 	.word	0x00010002

08005270 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b086      	sub	sp, #24
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005278:	2300      	movs	r3, #0
 800527a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005280:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005282:	697b      	ldr	r3, [r7, #20]
 8005284:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005288:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800528a:	4b4b      	ldr	r3, [pc, #300]	@ (80053b8 <I2C_DMAAbort+0x148>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	08db      	lsrs	r3, r3, #3
 8005290:	4a4a      	ldr	r2, [pc, #296]	@ (80053bc <I2C_DMAAbort+0x14c>)
 8005292:	fba2 2303 	umull	r2, r3, r2, r3
 8005296:	0a1a      	lsrs	r2, r3, #8
 8005298:	4613      	mov	r3, r2
 800529a:	009b      	lsls	r3, r3, #2
 800529c:	4413      	add	r3, r2
 800529e:	00da      	lsls	r2, r3, #3
 80052a0:	1ad3      	subs	r3, r2, r3
 80052a2:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d106      	bne.n	80052b8 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80052aa:	697b      	ldr	r3, [r7, #20]
 80052ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052ae:	f043 0220 	orr.w	r2, r3, #32
 80052b2:	697b      	ldr	r3, [r7, #20]
 80052b4:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 80052b6:	e00a      	b.n	80052ce <I2C_DMAAbort+0x5e>
    }
    count--;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	3b01      	subs	r3, #1
 80052bc:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80052be:	697b      	ldr	r3, [r7, #20]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80052c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80052cc:	d0ea      	beq.n	80052a4 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80052ce:	697b      	ldr	r3, [r7, #20]
 80052d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d003      	beq.n	80052de <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80052d6:	697b      	ldr	r3, [r7, #20]
 80052d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052da:	2200      	movs	r2, #0
 80052dc:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  if (hi2c->hdmarx != NULL)
 80052de:	697b      	ldr	r3, [r7, #20]
 80052e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d003      	beq.n	80052ee <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80052e6:	697b      	ldr	r3, [r7, #20]
 80052e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052ea:	2200      	movs	r2, #0
 80052ec:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052ee:	697b      	ldr	r3, [r7, #20]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	681a      	ldr	r2, [r3, #0]
 80052f4:	697b      	ldr	r3, [r7, #20]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80052fc:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80052fe:	697b      	ldr	r3, [r7, #20]
 8005300:	2200      	movs	r2, #0
 8005302:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8005304:	697b      	ldr	r3, [r7, #20]
 8005306:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005308:	2b00      	cmp	r3, #0
 800530a:	d003      	beq.n	8005314 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800530c:	697b      	ldr	r3, [r7, #20]
 800530e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005310:	2200      	movs	r2, #0
 8005312:	635a      	str	r2, [r3, #52]	@ 0x34
  }
  if (hi2c->hdmarx != NULL)
 8005314:	697b      	ldr	r3, [r7, #20]
 8005316:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005318:	2b00      	cmp	r3, #0
 800531a:	d003      	beq.n	8005324 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800531c:	697b      	ldr	r3, [r7, #20]
 800531e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005320:	2200      	movs	r2, #0
 8005322:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8005324:	697b      	ldr	r3, [r7, #20]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	681a      	ldr	r2, [r3, #0]
 800532a:	697b      	ldr	r3, [r7, #20]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f022 0201 	bic.w	r2, r2, #1
 8005332:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005334:	697b      	ldr	r3, [r7, #20]
 8005336:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800533a:	b2db      	uxtb	r3, r3
 800533c:	2b60      	cmp	r3, #96	@ 0x60
 800533e:	d10e      	bne.n	800535e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005340:	697b      	ldr	r3, [r7, #20]
 8005342:	2220      	movs	r2, #32
 8005344:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005348:	697b      	ldr	r3, [r7, #20]
 800534a:	2200      	movs	r2, #0
 800534c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005350:	697b      	ldr	r3, [r7, #20]
 8005352:	2200      	movs	r2, #0
 8005354:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005356:	6978      	ldr	r0, [r7, #20]
 8005358:	f7fe fc6e 	bl	8003c38 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800535c:	e027      	b.n	80053ae <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800535e:	7cfb      	ldrb	r3, [r7, #19]
 8005360:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005364:	2b28      	cmp	r3, #40	@ 0x28
 8005366:	d117      	bne.n	8005398 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8005368:	697b      	ldr	r3, [r7, #20]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	681a      	ldr	r2, [r3, #0]
 800536e:	697b      	ldr	r3, [r7, #20]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f042 0201 	orr.w	r2, r2, #1
 8005376:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005378:	697b      	ldr	r3, [r7, #20]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	681a      	ldr	r2, [r3, #0]
 800537e:	697b      	ldr	r3, [r7, #20]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005386:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005388:	697b      	ldr	r3, [r7, #20]
 800538a:	2200      	movs	r2, #0
 800538c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800538e:	697b      	ldr	r3, [r7, #20]
 8005390:	2228      	movs	r2, #40	@ 0x28
 8005392:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8005396:	e007      	b.n	80053a8 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8005398:	697b      	ldr	r3, [r7, #20]
 800539a:	2220      	movs	r2, #32
 800539c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80053a0:	697b      	ldr	r3, [r7, #20]
 80053a2:	2200      	movs	r2, #0
 80053a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80053a8:	6978      	ldr	r0, [r7, #20]
 80053aa:	f7fe fc3c 	bl	8003c26 <HAL_I2C_ErrorCallback>
}
 80053ae:	bf00      	nop
 80053b0:	3718      	adds	r7, #24
 80053b2:	46bd      	mov	sp, r7
 80053b4:	bd80      	pop	{r7, pc}
 80053b6:	bf00      	nop
 80053b8:	20000010 	.word	0x20000010
 80053bc:	14f8b589 	.word	0x14f8b589

080053c0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b084      	sub	sp, #16
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	60f8      	str	r0, [r7, #12]
 80053c8:	60b9      	str	r1, [r7, #8]
 80053ca:	603b      	str	r3, [r7, #0]
 80053cc:	4613      	mov	r3, r2
 80053ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80053d0:	e048      	b.n	8005464 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053d8:	d044      	beq.n	8005464 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053da:	f7fc f9bf 	bl	800175c <HAL_GetTick>
 80053de:	4602      	mov	r2, r0
 80053e0:	69bb      	ldr	r3, [r7, #24]
 80053e2:	1ad3      	subs	r3, r2, r3
 80053e4:	683a      	ldr	r2, [r7, #0]
 80053e6:	429a      	cmp	r2, r3
 80053e8:	d302      	bcc.n	80053f0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d139      	bne.n	8005464 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	0c1b      	lsrs	r3, r3, #16
 80053f4:	b2db      	uxtb	r3, r3
 80053f6:	2b01      	cmp	r3, #1
 80053f8:	d10d      	bne.n	8005416 <I2C_WaitOnFlagUntilTimeout+0x56>
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	695b      	ldr	r3, [r3, #20]
 8005400:	43da      	mvns	r2, r3
 8005402:	68bb      	ldr	r3, [r7, #8]
 8005404:	4013      	ands	r3, r2
 8005406:	b29b      	uxth	r3, r3
 8005408:	2b00      	cmp	r3, #0
 800540a:	bf0c      	ite	eq
 800540c:	2301      	moveq	r3, #1
 800540e:	2300      	movne	r3, #0
 8005410:	b2db      	uxtb	r3, r3
 8005412:	461a      	mov	r2, r3
 8005414:	e00c      	b.n	8005430 <I2C_WaitOnFlagUntilTimeout+0x70>
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	699b      	ldr	r3, [r3, #24]
 800541c:	43da      	mvns	r2, r3
 800541e:	68bb      	ldr	r3, [r7, #8]
 8005420:	4013      	ands	r3, r2
 8005422:	b29b      	uxth	r3, r3
 8005424:	2b00      	cmp	r3, #0
 8005426:	bf0c      	ite	eq
 8005428:	2301      	moveq	r3, #1
 800542a:	2300      	movne	r3, #0
 800542c:	b2db      	uxtb	r3, r3
 800542e:	461a      	mov	r2, r3
 8005430:	79fb      	ldrb	r3, [r7, #7]
 8005432:	429a      	cmp	r2, r3
 8005434:	d116      	bne.n	8005464 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	2200      	movs	r2, #0
 800543a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	2220      	movs	r2, #32
 8005440:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	2200      	movs	r2, #0
 8005448:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005450:	f043 0220 	orr.w	r2, r3, #32
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	2200      	movs	r2, #0
 800545c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005460:	2301      	movs	r3, #1
 8005462:	e023      	b.n	80054ac <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	0c1b      	lsrs	r3, r3, #16
 8005468:	b2db      	uxtb	r3, r3
 800546a:	2b01      	cmp	r3, #1
 800546c:	d10d      	bne.n	800548a <I2C_WaitOnFlagUntilTimeout+0xca>
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	695b      	ldr	r3, [r3, #20]
 8005474:	43da      	mvns	r2, r3
 8005476:	68bb      	ldr	r3, [r7, #8]
 8005478:	4013      	ands	r3, r2
 800547a:	b29b      	uxth	r3, r3
 800547c:	2b00      	cmp	r3, #0
 800547e:	bf0c      	ite	eq
 8005480:	2301      	moveq	r3, #1
 8005482:	2300      	movne	r3, #0
 8005484:	b2db      	uxtb	r3, r3
 8005486:	461a      	mov	r2, r3
 8005488:	e00c      	b.n	80054a4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	699b      	ldr	r3, [r3, #24]
 8005490:	43da      	mvns	r2, r3
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	4013      	ands	r3, r2
 8005496:	b29b      	uxth	r3, r3
 8005498:	2b00      	cmp	r3, #0
 800549a:	bf0c      	ite	eq
 800549c:	2301      	moveq	r3, #1
 800549e:	2300      	movne	r3, #0
 80054a0:	b2db      	uxtb	r3, r3
 80054a2:	461a      	mov	r2, r3
 80054a4:	79fb      	ldrb	r3, [r7, #7]
 80054a6:	429a      	cmp	r2, r3
 80054a8:	d093      	beq.n	80053d2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80054aa:	2300      	movs	r3, #0
}
 80054ac:	4618      	mov	r0, r3
 80054ae:	3710      	adds	r7, #16
 80054b0:	46bd      	mov	sp, r7
 80054b2:	bd80      	pop	{r7, pc}

080054b4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b084      	sub	sp, #16
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	60f8      	str	r0, [r7, #12]
 80054bc:	60b9      	str	r1, [r7, #8]
 80054be:	607a      	str	r2, [r7, #4]
 80054c0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80054c2:	e071      	b.n	80055a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	695b      	ldr	r3, [r3, #20]
 80054ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80054ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80054d2:	d123      	bne.n	800551c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	681a      	ldr	r2, [r3, #0]
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80054e2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80054ec:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	2200      	movs	r2, #0
 80054f2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	2220      	movs	r2, #32
 80054f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	2200      	movs	r2, #0
 8005500:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005508:	f043 0204 	orr.w	r2, r3, #4
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	2200      	movs	r2, #0
 8005514:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005518:	2301      	movs	r3, #1
 800551a:	e067      	b.n	80055ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005522:	d041      	beq.n	80055a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005524:	f7fc f91a 	bl	800175c <HAL_GetTick>
 8005528:	4602      	mov	r2, r0
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	1ad3      	subs	r3, r2, r3
 800552e:	687a      	ldr	r2, [r7, #4]
 8005530:	429a      	cmp	r2, r3
 8005532:	d302      	bcc.n	800553a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d136      	bne.n	80055a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800553a:	68bb      	ldr	r3, [r7, #8]
 800553c:	0c1b      	lsrs	r3, r3, #16
 800553e:	b2db      	uxtb	r3, r3
 8005540:	2b01      	cmp	r3, #1
 8005542:	d10c      	bne.n	800555e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	695b      	ldr	r3, [r3, #20]
 800554a:	43da      	mvns	r2, r3
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	4013      	ands	r3, r2
 8005550:	b29b      	uxth	r3, r3
 8005552:	2b00      	cmp	r3, #0
 8005554:	bf14      	ite	ne
 8005556:	2301      	movne	r3, #1
 8005558:	2300      	moveq	r3, #0
 800555a:	b2db      	uxtb	r3, r3
 800555c:	e00b      	b.n	8005576 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	699b      	ldr	r3, [r3, #24]
 8005564:	43da      	mvns	r2, r3
 8005566:	68bb      	ldr	r3, [r7, #8]
 8005568:	4013      	ands	r3, r2
 800556a:	b29b      	uxth	r3, r3
 800556c:	2b00      	cmp	r3, #0
 800556e:	bf14      	ite	ne
 8005570:	2301      	movne	r3, #1
 8005572:	2300      	moveq	r3, #0
 8005574:	b2db      	uxtb	r3, r3
 8005576:	2b00      	cmp	r3, #0
 8005578:	d016      	beq.n	80055a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	2200      	movs	r2, #0
 800557e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	2220      	movs	r2, #32
 8005584:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	2200      	movs	r2, #0
 800558c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005594:	f043 0220 	orr.w	r2, r3, #32
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	2200      	movs	r2, #0
 80055a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80055a4:	2301      	movs	r3, #1
 80055a6:	e021      	b.n	80055ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80055a8:	68bb      	ldr	r3, [r7, #8]
 80055aa:	0c1b      	lsrs	r3, r3, #16
 80055ac:	b2db      	uxtb	r3, r3
 80055ae:	2b01      	cmp	r3, #1
 80055b0:	d10c      	bne.n	80055cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	695b      	ldr	r3, [r3, #20]
 80055b8:	43da      	mvns	r2, r3
 80055ba:	68bb      	ldr	r3, [r7, #8]
 80055bc:	4013      	ands	r3, r2
 80055be:	b29b      	uxth	r3, r3
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	bf14      	ite	ne
 80055c4:	2301      	movne	r3, #1
 80055c6:	2300      	moveq	r3, #0
 80055c8:	b2db      	uxtb	r3, r3
 80055ca:	e00b      	b.n	80055e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	699b      	ldr	r3, [r3, #24]
 80055d2:	43da      	mvns	r2, r3
 80055d4:	68bb      	ldr	r3, [r7, #8]
 80055d6:	4013      	ands	r3, r2
 80055d8:	b29b      	uxth	r3, r3
 80055da:	2b00      	cmp	r3, #0
 80055dc:	bf14      	ite	ne
 80055de:	2301      	movne	r3, #1
 80055e0:	2300      	moveq	r3, #0
 80055e2:	b2db      	uxtb	r3, r3
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	f47f af6d 	bne.w	80054c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80055ea:	2300      	movs	r3, #0
}
 80055ec:	4618      	mov	r0, r3
 80055ee:	3710      	adds	r7, #16
 80055f0:	46bd      	mov	sp, r7
 80055f2:	bd80      	pop	{r7, pc}

080055f4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b084      	sub	sp, #16
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	60f8      	str	r0, [r7, #12]
 80055fc:	60b9      	str	r1, [r7, #8]
 80055fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005600:	e034      	b.n	800566c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005602:	68f8      	ldr	r0, [r7, #12]
 8005604:	f000 f915 	bl	8005832 <I2C_IsAcknowledgeFailed>
 8005608:	4603      	mov	r3, r0
 800560a:	2b00      	cmp	r3, #0
 800560c:	d001      	beq.n	8005612 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800560e:	2301      	movs	r3, #1
 8005610:	e034      	b.n	800567c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005612:	68bb      	ldr	r3, [r7, #8]
 8005614:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005618:	d028      	beq.n	800566c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800561a:	f7fc f89f 	bl	800175c <HAL_GetTick>
 800561e:	4602      	mov	r2, r0
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	1ad3      	subs	r3, r2, r3
 8005624:	68ba      	ldr	r2, [r7, #8]
 8005626:	429a      	cmp	r2, r3
 8005628:	d302      	bcc.n	8005630 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800562a:	68bb      	ldr	r3, [r7, #8]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d11d      	bne.n	800566c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	695b      	ldr	r3, [r3, #20]
 8005636:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800563a:	2b80      	cmp	r3, #128	@ 0x80
 800563c:	d016      	beq.n	800566c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	2200      	movs	r2, #0
 8005642:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	2220      	movs	r2, #32
 8005648:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	2200      	movs	r2, #0
 8005650:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005658:	f043 0220 	orr.w	r2, r3, #32
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	2200      	movs	r2, #0
 8005664:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005668:	2301      	movs	r3, #1
 800566a:	e007      	b.n	800567c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	695b      	ldr	r3, [r3, #20]
 8005672:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005676:	2b80      	cmp	r3, #128	@ 0x80
 8005678:	d1c3      	bne.n	8005602 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800567a:	2300      	movs	r3, #0
}
 800567c:	4618      	mov	r0, r3
 800567e:	3710      	adds	r7, #16
 8005680:	46bd      	mov	sp, r7
 8005682:	bd80      	pop	{r7, pc}

08005684 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b084      	sub	sp, #16
 8005688:	af00      	add	r7, sp, #0
 800568a:	60f8      	str	r0, [r7, #12]
 800568c:	60b9      	str	r1, [r7, #8]
 800568e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005690:	e034      	b.n	80056fc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005692:	68f8      	ldr	r0, [r7, #12]
 8005694:	f000 f8cd 	bl	8005832 <I2C_IsAcknowledgeFailed>
 8005698:	4603      	mov	r3, r0
 800569a:	2b00      	cmp	r3, #0
 800569c:	d001      	beq.n	80056a2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800569e:	2301      	movs	r3, #1
 80056a0:	e034      	b.n	800570c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056a8:	d028      	beq.n	80056fc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056aa:	f7fc f857 	bl	800175c <HAL_GetTick>
 80056ae:	4602      	mov	r2, r0
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	1ad3      	subs	r3, r2, r3
 80056b4:	68ba      	ldr	r2, [r7, #8]
 80056b6:	429a      	cmp	r2, r3
 80056b8:	d302      	bcc.n	80056c0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80056ba:	68bb      	ldr	r3, [r7, #8]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d11d      	bne.n	80056fc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	695b      	ldr	r3, [r3, #20]
 80056c6:	f003 0304 	and.w	r3, r3, #4
 80056ca:	2b04      	cmp	r3, #4
 80056cc:	d016      	beq.n	80056fc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	2200      	movs	r2, #0
 80056d2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	2220      	movs	r2, #32
 80056d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	2200      	movs	r2, #0
 80056e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056e8:	f043 0220 	orr.w	r2, r3, #32
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	2200      	movs	r2, #0
 80056f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80056f8:	2301      	movs	r3, #1
 80056fa:	e007      	b.n	800570c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	695b      	ldr	r3, [r3, #20]
 8005702:	f003 0304 	and.w	r3, r3, #4
 8005706:	2b04      	cmp	r3, #4
 8005708:	d1c3      	bne.n	8005692 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800570a:	2300      	movs	r3, #0
}
 800570c:	4618      	mov	r0, r3
 800570e:	3710      	adds	r7, #16
 8005710:	46bd      	mov	sp, r7
 8005712:	bd80      	pop	{r7, pc}

08005714 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8005714:	b480      	push	{r7}
 8005716:	b085      	sub	sp, #20
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800571c:	2300      	movs	r3, #0
 800571e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8005720:	4b13      	ldr	r3, [pc, #76]	@ (8005770 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	08db      	lsrs	r3, r3, #3
 8005726:	4a13      	ldr	r2, [pc, #76]	@ (8005774 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8005728:	fba2 2303 	umull	r2, r3, r2, r3
 800572c:	0a1a      	lsrs	r2, r3, #8
 800572e:	4613      	mov	r3, r2
 8005730:	009b      	lsls	r3, r3, #2
 8005732:	4413      	add	r3, r2
 8005734:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	3b01      	subs	r3, #1
 800573a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d107      	bne.n	8005752 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005746:	f043 0220 	orr.w	r2, r3, #32
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 800574e:	2301      	movs	r3, #1
 8005750:	e008      	b.n	8005764 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800575c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005760:	d0e9      	beq.n	8005736 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8005762:	2300      	movs	r3, #0
}
 8005764:	4618      	mov	r0, r3
 8005766:	3714      	adds	r7, #20
 8005768:	46bd      	mov	sp, r7
 800576a:	bc80      	pop	{r7}
 800576c:	4770      	bx	lr
 800576e:	bf00      	nop
 8005770:	20000010 	.word	0x20000010
 8005774:	14f8b589 	.word	0x14f8b589

08005778 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b084      	sub	sp, #16
 800577c:	af00      	add	r7, sp, #0
 800577e:	60f8      	str	r0, [r7, #12]
 8005780:	60b9      	str	r1, [r7, #8]
 8005782:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005784:	e049      	b.n	800581a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	695b      	ldr	r3, [r3, #20]
 800578c:	f003 0310 	and.w	r3, r3, #16
 8005790:	2b10      	cmp	r3, #16
 8005792:	d119      	bne.n	80057c8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f06f 0210 	mvn.w	r2, #16
 800579c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	2200      	movs	r2, #0
 80057a2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	2220      	movs	r2, #32
 80057a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	2200      	movs	r2, #0
 80057b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	2200      	movs	r2, #0
 80057c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80057c4:	2301      	movs	r3, #1
 80057c6:	e030      	b.n	800582a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057c8:	f7fb ffc8 	bl	800175c <HAL_GetTick>
 80057cc:	4602      	mov	r2, r0
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	1ad3      	subs	r3, r2, r3
 80057d2:	68ba      	ldr	r2, [r7, #8]
 80057d4:	429a      	cmp	r2, r3
 80057d6:	d302      	bcc.n	80057de <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d11d      	bne.n	800581a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	695b      	ldr	r3, [r3, #20]
 80057e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057e8:	2b40      	cmp	r3, #64	@ 0x40
 80057ea:	d016      	beq.n	800581a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	2200      	movs	r2, #0
 80057f0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	2220      	movs	r2, #32
 80057f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	2200      	movs	r2, #0
 80057fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005806:	f043 0220 	orr.w	r2, r3, #32
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	2200      	movs	r2, #0
 8005812:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005816:	2301      	movs	r3, #1
 8005818:	e007      	b.n	800582a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	695b      	ldr	r3, [r3, #20]
 8005820:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005824:	2b40      	cmp	r3, #64	@ 0x40
 8005826:	d1ae      	bne.n	8005786 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005828:	2300      	movs	r3, #0
}
 800582a:	4618      	mov	r0, r3
 800582c:	3710      	adds	r7, #16
 800582e:	46bd      	mov	sp, r7
 8005830:	bd80      	pop	{r7, pc}

08005832 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005832:	b480      	push	{r7}
 8005834:	b083      	sub	sp, #12
 8005836:	af00      	add	r7, sp, #0
 8005838:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	695b      	ldr	r3, [r3, #20]
 8005840:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005844:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005848:	d11b      	bne.n	8005882 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005852:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2200      	movs	r2, #0
 8005858:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2220      	movs	r2, #32
 800585e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2200      	movs	r2, #0
 8005866:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800586e:	f043 0204 	orr.w	r2, r3, #4
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2200      	movs	r2, #0
 800587a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800587e:	2301      	movs	r3, #1
 8005880:	e000      	b.n	8005884 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005882:	2300      	movs	r3, #0
}
 8005884:	4618      	mov	r0, r3
 8005886:	370c      	adds	r7, #12
 8005888:	46bd      	mov	sp, r7
 800588a:	bc80      	pop	{r7}
 800588c:	4770      	bx	lr

0800588e <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800588e:	b480      	push	{r7}
 8005890:	b083      	sub	sp, #12
 8005892:	af00      	add	r7, sp, #0
 8005894:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800589a:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 800589e:	d103      	bne.n	80058a8 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2201      	movs	r2, #1
 80058a4:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80058a6:	e007      	b.n	80058b8 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058ac:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80058b0:	d102      	bne.n	80058b8 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2208      	movs	r2, #8
 80058b6:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80058b8:	bf00      	nop
 80058ba:	370c      	adds	r7, #12
 80058bc:	46bd      	mov	sp, r7
 80058be:	bc80      	pop	{r7}
 80058c0:	4770      	bx	lr
	...

080058c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b086      	sub	sp, #24
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d101      	bne.n	80058d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80058d2:	2301      	movs	r3, #1
 80058d4:	e272      	b.n	8005dbc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f003 0301 	and.w	r3, r3, #1
 80058de:	2b00      	cmp	r3, #0
 80058e0:	f000 8087 	beq.w	80059f2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80058e4:	4b92      	ldr	r3, [pc, #584]	@ (8005b30 <HAL_RCC_OscConfig+0x26c>)
 80058e6:	685b      	ldr	r3, [r3, #4]
 80058e8:	f003 030c 	and.w	r3, r3, #12
 80058ec:	2b04      	cmp	r3, #4
 80058ee:	d00c      	beq.n	800590a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80058f0:	4b8f      	ldr	r3, [pc, #572]	@ (8005b30 <HAL_RCC_OscConfig+0x26c>)
 80058f2:	685b      	ldr	r3, [r3, #4]
 80058f4:	f003 030c 	and.w	r3, r3, #12
 80058f8:	2b08      	cmp	r3, #8
 80058fa:	d112      	bne.n	8005922 <HAL_RCC_OscConfig+0x5e>
 80058fc:	4b8c      	ldr	r3, [pc, #560]	@ (8005b30 <HAL_RCC_OscConfig+0x26c>)
 80058fe:	685b      	ldr	r3, [r3, #4]
 8005900:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005904:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005908:	d10b      	bne.n	8005922 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800590a:	4b89      	ldr	r3, [pc, #548]	@ (8005b30 <HAL_RCC_OscConfig+0x26c>)
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005912:	2b00      	cmp	r3, #0
 8005914:	d06c      	beq.n	80059f0 <HAL_RCC_OscConfig+0x12c>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	685b      	ldr	r3, [r3, #4]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d168      	bne.n	80059f0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800591e:	2301      	movs	r3, #1
 8005920:	e24c      	b.n	8005dbc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	685b      	ldr	r3, [r3, #4]
 8005926:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800592a:	d106      	bne.n	800593a <HAL_RCC_OscConfig+0x76>
 800592c:	4b80      	ldr	r3, [pc, #512]	@ (8005b30 <HAL_RCC_OscConfig+0x26c>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	4a7f      	ldr	r2, [pc, #508]	@ (8005b30 <HAL_RCC_OscConfig+0x26c>)
 8005932:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005936:	6013      	str	r3, [r2, #0]
 8005938:	e02e      	b.n	8005998 <HAL_RCC_OscConfig+0xd4>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	685b      	ldr	r3, [r3, #4]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d10c      	bne.n	800595c <HAL_RCC_OscConfig+0x98>
 8005942:	4b7b      	ldr	r3, [pc, #492]	@ (8005b30 <HAL_RCC_OscConfig+0x26c>)
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	4a7a      	ldr	r2, [pc, #488]	@ (8005b30 <HAL_RCC_OscConfig+0x26c>)
 8005948:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800594c:	6013      	str	r3, [r2, #0]
 800594e:	4b78      	ldr	r3, [pc, #480]	@ (8005b30 <HAL_RCC_OscConfig+0x26c>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	4a77      	ldr	r2, [pc, #476]	@ (8005b30 <HAL_RCC_OscConfig+0x26c>)
 8005954:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005958:	6013      	str	r3, [r2, #0]
 800595a:	e01d      	b.n	8005998 <HAL_RCC_OscConfig+0xd4>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	685b      	ldr	r3, [r3, #4]
 8005960:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005964:	d10c      	bne.n	8005980 <HAL_RCC_OscConfig+0xbc>
 8005966:	4b72      	ldr	r3, [pc, #456]	@ (8005b30 <HAL_RCC_OscConfig+0x26c>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	4a71      	ldr	r2, [pc, #452]	@ (8005b30 <HAL_RCC_OscConfig+0x26c>)
 800596c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005970:	6013      	str	r3, [r2, #0]
 8005972:	4b6f      	ldr	r3, [pc, #444]	@ (8005b30 <HAL_RCC_OscConfig+0x26c>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	4a6e      	ldr	r2, [pc, #440]	@ (8005b30 <HAL_RCC_OscConfig+0x26c>)
 8005978:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800597c:	6013      	str	r3, [r2, #0]
 800597e:	e00b      	b.n	8005998 <HAL_RCC_OscConfig+0xd4>
 8005980:	4b6b      	ldr	r3, [pc, #428]	@ (8005b30 <HAL_RCC_OscConfig+0x26c>)
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	4a6a      	ldr	r2, [pc, #424]	@ (8005b30 <HAL_RCC_OscConfig+0x26c>)
 8005986:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800598a:	6013      	str	r3, [r2, #0]
 800598c:	4b68      	ldr	r3, [pc, #416]	@ (8005b30 <HAL_RCC_OscConfig+0x26c>)
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4a67      	ldr	r2, [pc, #412]	@ (8005b30 <HAL_RCC_OscConfig+0x26c>)
 8005992:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005996:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	685b      	ldr	r3, [r3, #4]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d013      	beq.n	80059c8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059a0:	f7fb fedc 	bl	800175c <HAL_GetTick>
 80059a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059a6:	e008      	b.n	80059ba <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80059a8:	f7fb fed8 	bl	800175c <HAL_GetTick>
 80059ac:	4602      	mov	r2, r0
 80059ae:	693b      	ldr	r3, [r7, #16]
 80059b0:	1ad3      	subs	r3, r2, r3
 80059b2:	2b64      	cmp	r3, #100	@ 0x64
 80059b4:	d901      	bls.n	80059ba <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80059b6:	2303      	movs	r3, #3
 80059b8:	e200      	b.n	8005dbc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059ba:	4b5d      	ldr	r3, [pc, #372]	@ (8005b30 <HAL_RCC_OscConfig+0x26c>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d0f0      	beq.n	80059a8 <HAL_RCC_OscConfig+0xe4>
 80059c6:	e014      	b.n	80059f2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059c8:	f7fb fec8 	bl	800175c <HAL_GetTick>
 80059cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80059ce:	e008      	b.n	80059e2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80059d0:	f7fb fec4 	bl	800175c <HAL_GetTick>
 80059d4:	4602      	mov	r2, r0
 80059d6:	693b      	ldr	r3, [r7, #16]
 80059d8:	1ad3      	subs	r3, r2, r3
 80059da:	2b64      	cmp	r3, #100	@ 0x64
 80059dc:	d901      	bls.n	80059e2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80059de:	2303      	movs	r3, #3
 80059e0:	e1ec      	b.n	8005dbc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80059e2:	4b53      	ldr	r3, [pc, #332]	@ (8005b30 <HAL_RCC_OscConfig+0x26c>)
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d1f0      	bne.n	80059d0 <HAL_RCC_OscConfig+0x10c>
 80059ee:	e000      	b.n	80059f2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80059f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f003 0302 	and.w	r3, r3, #2
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d063      	beq.n	8005ac6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80059fe:	4b4c      	ldr	r3, [pc, #304]	@ (8005b30 <HAL_RCC_OscConfig+0x26c>)
 8005a00:	685b      	ldr	r3, [r3, #4]
 8005a02:	f003 030c 	and.w	r3, r3, #12
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d00b      	beq.n	8005a22 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005a0a:	4b49      	ldr	r3, [pc, #292]	@ (8005b30 <HAL_RCC_OscConfig+0x26c>)
 8005a0c:	685b      	ldr	r3, [r3, #4]
 8005a0e:	f003 030c 	and.w	r3, r3, #12
 8005a12:	2b08      	cmp	r3, #8
 8005a14:	d11c      	bne.n	8005a50 <HAL_RCC_OscConfig+0x18c>
 8005a16:	4b46      	ldr	r3, [pc, #280]	@ (8005b30 <HAL_RCC_OscConfig+0x26c>)
 8005a18:	685b      	ldr	r3, [r3, #4]
 8005a1a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d116      	bne.n	8005a50 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a22:	4b43      	ldr	r3, [pc, #268]	@ (8005b30 <HAL_RCC_OscConfig+0x26c>)
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f003 0302 	and.w	r3, r3, #2
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d005      	beq.n	8005a3a <HAL_RCC_OscConfig+0x176>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	691b      	ldr	r3, [r3, #16]
 8005a32:	2b01      	cmp	r3, #1
 8005a34:	d001      	beq.n	8005a3a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005a36:	2301      	movs	r3, #1
 8005a38:	e1c0      	b.n	8005dbc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a3a:	4b3d      	ldr	r3, [pc, #244]	@ (8005b30 <HAL_RCC_OscConfig+0x26c>)
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	695b      	ldr	r3, [r3, #20]
 8005a46:	00db      	lsls	r3, r3, #3
 8005a48:	4939      	ldr	r1, [pc, #228]	@ (8005b30 <HAL_RCC_OscConfig+0x26c>)
 8005a4a:	4313      	orrs	r3, r2
 8005a4c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a4e:	e03a      	b.n	8005ac6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	691b      	ldr	r3, [r3, #16]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d020      	beq.n	8005a9a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005a58:	4b36      	ldr	r3, [pc, #216]	@ (8005b34 <HAL_RCC_OscConfig+0x270>)
 8005a5a:	2201      	movs	r2, #1
 8005a5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a5e:	f7fb fe7d 	bl	800175c <HAL_GetTick>
 8005a62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a64:	e008      	b.n	8005a78 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005a66:	f7fb fe79 	bl	800175c <HAL_GetTick>
 8005a6a:	4602      	mov	r2, r0
 8005a6c:	693b      	ldr	r3, [r7, #16]
 8005a6e:	1ad3      	subs	r3, r2, r3
 8005a70:	2b02      	cmp	r3, #2
 8005a72:	d901      	bls.n	8005a78 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005a74:	2303      	movs	r3, #3
 8005a76:	e1a1      	b.n	8005dbc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a78:	4b2d      	ldr	r3, [pc, #180]	@ (8005b30 <HAL_RCC_OscConfig+0x26c>)
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f003 0302 	and.w	r3, r3, #2
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d0f0      	beq.n	8005a66 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a84:	4b2a      	ldr	r3, [pc, #168]	@ (8005b30 <HAL_RCC_OscConfig+0x26c>)
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	695b      	ldr	r3, [r3, #20]
 8005a90:	00db      	lsls	r3, r3, #3
 8005a92:	4927      	ldr	r1, [pc, #156]	@ (8005b30 <HAL_RCC_OscConfig+0x26c>)
 8005a94:	4313      	orrs	r3, r2
 8005a96:	600b      	str	r3, [r1, #0]
 8005a98:	e015      	b.n	8005ac6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005a9a:	4b26      	ldr	r3, [pc, #152]	@ (8005b34 <HAL_RCC_OscConfig+0x270>)
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005aa0:	f7fb fe5c 	bl	800175c <HAL_GetTick>
 8005aa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005aa6:	e008      	b.n	8005aba <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005aa8:	f7fb fe58 	bl	800175c <HAL_GetTick>
 8005aac:	4602      	mov	r2, r0
 8005aae:	693b      	ldr	r3, [r7, #16]
 8005ab0:	1ad3      	subs	r3, r2, r3
 8005ab2:	2b02      	cmp	r3, #2
 8005ab4:	d901      	bls.n	8005aba <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005ab6:	2303      	movs	r3, #3
 8005ab8:	e180      	b.n	8005dbc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005aba:	4b1d      	ldr	r3, [pc, #116]	@ (8005b30 <HAL_RCC_OscConfig+0x26c>)
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f003 0302 	and.w	r3, r3, #2
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d1f0      	bne.n	8005aa8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f003 0308 	and.w	r3, r3, #8
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d03a      	beq.n	8005b48 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	699b      	ldr	r3, [r3, #24]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d019      	beq.n	8005b0e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005ada:	4b17      	ldr	r3, [pc, #92]	@ (8005b38 <HAL_RCC_OscConfig+0x274>)
 8005adc:	2201      	movs	r2, #1
 8005ade:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ae0:	f7fb fe3c 	bl	800175c <HAL_GetTick>
 8005ae4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005ae6:	e008      	b.n	8005afa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005ae8:	f7fb fe38 	bl	800175c <HAL_GetTick>
 8005aec:	4602      	mov	r2, r0
 8005aee:	693b      	ldr	r3, [r7, #16]
 8005af0:	1ad3      	subs	r3, r2, r3
 8005af2:	2b02      	cmp	r3, #2
 8005af4:	d901      	bls.n	8005afa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005af6:	2303      	movs	r3, #3
 8005af8:	e160      	b.n	8005dbc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005afa:	4b0d      	ldr	r3, [pc, #52]	@ (8005b30 <HAL_RCC_OscConfig+0x26c>)
 8005afc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005afe:	f003 0302 	and.w	r3, r3, #2
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d0f0      	beq.n	8005ae8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005b06:	2001      	movs	r0, #1
 8005b08:	f000 face 	bl	80060a8 <RCC_Delay>
 8005b0c:	e01c      	b.n	8005b48 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005b0e:	4b0a      	ldr	r3, [pc, #40]	@ (8005b38 <HAL_RCC_OscConfig+0x274>)
 8005b10:	2200      	movs	r2, #0
 8005b12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b14:	f7fb fe22 	bl	800175c <HAL_GetTick>
 8005b18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b1a:	e00f      	b.n	8005b3c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005b1c:	f7fb fe1e 	bl	800175c <HAL_GetTick>
 8005b20:	4602      	mov	r2, r0
 8005b22:	693b      	ldr	r3, [r7, #16]
 8005b24:	1ad3      	subs	r3, r2, r3
 8005b26:	2b02      	cmp	r3, #2
 8005b28:	d908      	bls.n	8005b3c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005b2a:	2303      	movs	r3, #3
 8005b2c:	e146      	b.n	8005dbc <HAL_RCC_OscConfig+0x4f8>
 8005b2e:	bf00      	nop
 8005b30:	40021000 	.word	0x40021000
 8005b34:	42420000 	.word	0x42420000
 8005b38:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b3c:	4b92      	ldr	r3, [pc, #584]	@ (8005d88 <HAL_RCC_OscConfig+0x4c4>)
 8005b3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b40:	f003 0302 	and.w	r3, r3, #2
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d1e9      	bne.n	8005b1c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f003 0304 	and.w	r3, r3, #4
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	f000 80a6 	beq.w	8005ca2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005b56:	2300      	movs	r3, #0
 8005b58:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005b5a:	4b8b      	ldr	r3, [pc, #556]	@ (8005d88 <HAL_RCC_OscConfig+0x4c4>)
 8005b5c:	69db      	ldr	r3, [r3, #28]
 8005b5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d10d      	bne.n	8005b82 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005b66:	4b88      	ldr	r3, [pc, #544]	@ (8005d88 <HAL_RCC_OscConfig+0x4c4>)
 8005b68:	69db      	ldr	r3, [r3, #28]
 8005b6a:	4a87      	ldr	r2, [pc, #540]	@ (8005d88 <HAL_RCC_OscConfig+0x4c4>)
 8005b6c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005b70:	61d3      	str	r3, [r2, #28]
 8005b72:	4b85      	ldr	r3, [pc, #532]	@ (8005d88 <HAL_RCC_OscConfig+0x4c4>)
 8005b74:	69db      	ldr	r3, [r3, #28]
 8005b76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005b7a:	60bb      	str	r3, [r7, #8]
 8005b7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005b7e:	2301      	movs	r3, #1
 8005b80:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b82:	4b82      	ldr	r3, [pc, #520]	@ (8005d8c <HAL_RCC_OscConfig+0x4c8>)
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d118      	bne.n	8005bc0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005b8e:	4b7f      	ldr	r3, [pc, #508]	@ (8005d8c <HAL_RCC_OscConfig+0x4c8>)
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	4a7e      	ldr	r2, [pc, #504]	@ (8005d8c <HAL_RCC_OscConfig+0x4c8>)
 8005b94:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005b98:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005b9a:	f7fb fddf 	bl	800175c <HAL_GetTick>
 8005b9e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ba0:	e008      	b.n	8005bb4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ba2:	f7fb fddb 	bl	800175c <HAL_GetTick>
 8005ba6:	4602      	mov	r2, r0
 8005ba8:	693b      	ldr	r3, [r7, #16]
 8005baa:	1ad3      	subs	r3, r2, r3
 8005bac:	2b64      	cmp	r3, #100	@ 0x64
 8005bae:	d901      	bls.n	8005bb4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005bb0:	2303      	movs	r3, #3
 8005bb2:	e103      	b.n	8005dbc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005bb4:	4b75      	ldr	r3, [pc, #468]	@ (8005d8c <HAL_RCC_OscConfig+0x4c8>)
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d0f0      	beq.n	8005ba2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	68db      	ldr	r3, [r3, #12]
 8005bc4:	2b01      	cmp	r3, #1
 8005bc6:	d106      	bne.n	8005bd6 <HAL_RCC_OscConfig+0x312>
 8005bc8:	4b6f      	ldr	r3, [pc, #444]	@ (8005d88 <HAL_RCC_OscConfig+0x4c4>)
 8005bca:	6a1b      	ldr	r3, [r3, #32]
 8005bcc:	4a6e      	ldr	r2, [pc, #440]	@ (8005d88 <HAL_RCC_OscConfig+0x4c4>)
 8005bce:	f043 0301 	orr.w	r3, r3, #1
 8005bd2:	6213      	str	r3, [r2, #32]
 8005bd4:	e02d      	b.n	8005c32 <HAL_RCC_OscConfig+0x36e>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	68db      	ldr	r3, [r3, #12]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d10c      	bne.n	8005bf8 <HAL_RCC_OscConfig+0x334>
 8005bde:	4b6a      	ldr	r3, [pc, #424]	@ (8005d88 <HAL_RCC_OscConfig+0x4c4>)
 8005be0:	6a1b      	ldr	r3, [r3, #32]
 8005be2:	4a69      	ldr	r2, [pc, #420]	@ (8005d88 <HAL_RCC_OscConfig+0x4c4>)
 8005be4:	f023 0301 	bic.w	r3, r3, #1
 8005be8:	6213      	str	r3, [r2, #32]
 8005bea:	4b67      	ldr	r3, [pc, #412]	@ (8005d88 <HAL_RCC_OscConfig+0x4c4>)
 8005bec:	6a1b      	ldr	r3, [r3, #32]
 8005bee:	4a66      	ldr	r2, [pc, #408]	@ (8005d88 <HAL_RCC_OscConfig+0x4c4>)
 8005bf0:	f023 0304 	bic.w	r3, r3, #4
 8005bf4:	6213      	str	r3, [r2, #32]
 8005bf6:	e01c      	b.n	8005c32 <HAL_RCC_OscConfig+0x36e>
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	68db      	ldr	r3, [r3, #12]
 8005bfc:	2b05      	cmp	r3, #5
 8005bfe:	d10c      	bne.n	8005c1a <HAL_RCC_OscConfig+0x356>
 8005c00:	4b61      	ldr	r3, [pc, #388]	@ (8005d88 <HAL_RCC_OscConfig+0x4c4>)
 8005c02:	6a1b      	ldr	r3, [r3, #32]
 8005c04:	4a60      	ldr	r2, [pc, #384]	@ (8005d88 <HAL_RCC_OscConfig+0x4c4>)
 8005c06:	f043 0304 	orr.w	r3, r3, #4
 8005c0a:	6213      	str	r3, [r2, #32]
 8005c0c:	4b5e      	ldr	r3, [pc, #376]	@ (8005d88 <HAL_RCC_OscConfig+0x4c4>)
 8005c0e:	6a1b      	ldr	r3, [r3, #32]
 8005c10:	4a5d      	ldr	r2, [pc, #372]	@ (8005d88 <HAL_RCC_OscConfig+0x4c4>)
 8005c12:	f043 0301 	orr.w	r3, r3, #1
 8005c16:	6213      	str	r3, [r2, #32]
 8005c18:	e00b      	b.n	8005c32 <HAL_RCC_OscConfig+0x36e>
 8005c1a:	4b5b      	ldr	r3, [pc, #364]	@ (8005d88 <HAL_RCC_OscConfig+0x4c4>)
 8005c1c:	6a1b      	ldr	r3, [r3, #32]
 8005c1e:	4a5a      	ldr	r2, [pc, #360]	@ (8005d88 <HAL_RCC_OscConfig+0x4c4>)
 8005c20:	f023 0301 	bic.w	r3, r3, #1
 8005c24:	6213      	str	r3, [r2, #32]
 8005c26:	4b58      	ldr	r3, [pc, #352]	@ (8005d88 <HAL_RCC_OscConfig+0x4c4>)
 8005c28:	6a1b      	ldr	r3, [r3, #32]
 8005c2a:	4a57      	ldr	r2, [pc, #348]	@ (8005d88 <HAL_RCC_OscConfig+0x4c4>)
 8005c2c:	f023 0304 	bic.w	r3, r3, #4
 8005c30:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	68db      	ldr	r3, [r3, #12]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d015      	beq.n	8005c66 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c3a:	f7fb fd8f 	bl	800175c <HAL_GetTick>
 8005c3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c40:	e00a      	b.n	8005c58 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c42:	f7fb fd8b 	bl	800175c <HAL_GetTick>
 8005c46:	4602      	mov	r2, r0
 8005c48:	693b      	ldr	r3, [r7, #16]
 8005c4a:	1ad3      	subs	r3, r2, r3
 8005c4c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d901      	bls.n	8005c58 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005c54:	2303      	movs	r3, #3
 8005c56:	e0b1      	b.n	8005dbc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c58:	4b4b      	ldr	r3, [pc, #300]	@ (8005d88 <HAL_RCC_OscConfig+0x4c4>)
 8005c5a:	6a1b      	ldr	r3, [r3, #32]
 8005c5c:	f003 0302 	and.w	r3, r3, #2
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d0ee      	beq.n	8005c42 <HAL_RCC_OscConfig+0x37e>
 8005c64:	e014      	b.n	8005c90 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c66:	f7fb fd79 	bl	800175c <HAL_GetTick>
 8005c6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c6c:	e00a      	b.n	8005c84 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c6e:	f7fb fd75 	bl	800175c <HAL_GetTick>
 8005c72:	4602      	mov	r2, r0
 8005c74:	693b      	ldr	r3, [r7, #16]
 8005c76:	1ad3      	subs	r3, r2, r3
 8005c78:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d901      	bls.n	8005c84 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005c80:	2303      	movs	r3, #3
 8005c82:	e09b      	b.n	8005dbc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c84:	4b40      	ldr	r3, [pc, #256]	@ (8005d88 <HAL_RCC_OscConfig+0x4c4>)
 8005c86:	6a1b      	ldr	r3, [r3, #32]
 8005c88:	f003 0302 	and.w	r3, r3, #2
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d1ee      	bne.n	8005c6e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005c90:	7dfb      	ldrb	r3, [r7, #23]
 8005c92:	2b01      	cmp	r3, #1
 8005c94:	d105      	bne.n	8005ca2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c96:	4b3c      	ldr	r3, [pc, #240]	@ (8005d88 <HAL_RCC_OscConfig+0x4c4>)
 8005c98:	69db      	ldr	r3, [r3, #28]
 8005c9a:	4a3b      	ldr	r2, [pc, #236]	@ (8005d88 <HAL_RCC_OscConfig+0x4c4>)
 8005c9c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005ca0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	69db      	ldr	r3, [r3, #28]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	f000 8087 	beq.w	8005dba <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005cac:	4b36      	ldr	r3, [pc, #216]	@ (8005d88 <HAL_RCC_OscConfig+0x4c4>)
 8005cae:	685b      	ldr	r3, [r3, #4]
 8005cb0:	f003 030c 	and.w	r3, r3, #12
 8005cb4:	2b08      	cmp	r3, #8
 8005cb6:	d061      	beq.n	8005d7c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	69db      	ldr	r3, [r3, #28]
 8005cbc:	2b02      	cmp	r3, #2
 8005cbe:	d146      	bne.n	8005d4e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005cc0:	4b33      	ldr	r3, [pc, #204]	@ (8005d90 <HAL_RCC_OscConfig+0x4cc>)
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005cc6:	f7fb fd49 	bl	800175c <HAL_GetTick>
 8005cca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005ccc:	e008      	b.n	8005ce0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005cce:	f7fb fd45 	bl	800175c <HAL_GetTick>
 8005cd2:	4602      	mov	r2, r0
 8005cd4:	693b      	ldr	r3, [r7, #16]
 8005cd6:	1ad3      	subs	r3, r2, r3
 8005cd8:	2b02      	cmp	r3, #2
 8005cda:	d901      	bls.n	8005ce0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005cdc:	2303      	movs	r3, #3
 8005cde:	e06d      	b.n	8005dbc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005ce0:	4b29      	ldr	r3, [pc, #164]	@ (8005d88 <HAL_RCC_OscConfig+0x4c4>)
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d1f0      	bne.n	8005cce <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6a1b      	ldr	r3, [r3, #32]
 8005cf0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005cf4:	d108      	bne.n	8005d08 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005cf6:	4b24      	ldr	r3, [pc, #144]	@ (8005d88 <HAL_RCC_OscConfig+0x4c4>)
 8005cf8:	685b      	ldr	r3, [r3, #4]
 8005cfa:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	689b      	ldr	r3, [r3, #8]
 8005d02:	4921      	ldr	r1, [pc, #132]	@ (8005d88 <HAL_RCC_OscConfig+0x4c4>)
 8005d04:	4313      	orrs	r3, r2
 8005d06:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005d08:	4b1f      	ldr	r3, [pc, #124]	@ (8005d88 <HAL_RCC_OscConfig+0x4c4>)
 8005d0a:	685b      	ldr	r3, [r3, #4]
 8005d0c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	6a19      	ldr	r1, [r3, #32]
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d18:	430b      	orrs	r3, r1
 8005d1a:	491b      	ldr	r1, [pc, #108]	@ (8005d88 <HAL_RCC_OscConfig+0x4c4>)
 8005d1c:	4313      	orrs	r3, r2
 8005d1e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005d20:	4b1b      	ldr	r3, [pc, #108]	@ (8005d90 <HAL_RCC_OscConfig+0x4cc>)
 8005d22:	2201      	movs	r2, #1
 8005d24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d26:	f7fb fd19 	bl	800175c <HAL_GetTick>
 8005d2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005d2c:	e008      	b.n	8005d40 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d2e:	f7fb fd15 	bl	800175c <HAL_GetTick>
 8005d32:	4602      	mov	r2, r0
 8005d34:	693b      	ldr	r3, [r7, #16]
 8005d36:	1ad3      	subs	r3, r2, r3
 8005d38:	2b02      	cmp	r3, #2
 8005d3a:	d901      	bls.n	8005d40 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005d3c:	2303      	movs	r3, #3
 8005d3e:	e03d      	b.n	8005dbc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005d40:	4b11      	ldr	r3, [pc, #68]	@ (8005d88 <HAL_RCC_OscConfig+0x4c4>)
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d0f0      	beq.n	8005d2e <HAL_RCC_OscConfig+0x46a>
 8005d4c:	e035      	b.n	8005dba <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d4e:	4b10      	ldr	r3, [pc, #64]	@ (8005d90 <HAL_RCC_OscConfig+0x4cc>)
 8005d50:	2200      	movs	r2, #0
 8005d52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d54:	f7fb fd02 	bl	800175c <HAL_GetTick>
 8005d58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005d5a:	e008      	b.n	8005d6e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d5c:	f7fb fcfe 	bl	800175c <HAL_GetTick>
 8005d60:	4602      	mov	r2, r0
 8005d62:	693b      	ldr	r3, [r7, #16]
 8005d64:	1ad3      	subs	r3, r2, r3
 8005d66:	2b02      	cmp	r3, #2
 8005d68:	d901      	bls.n	8005d6e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005d6a:	2303      	movs	r3, #3
 8005d6c:	e026      	b.n	8005dbc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005d6e:	4b06      	ldr	r3, [pc, #24]	@ (8005d88 <HAL_RCC_OscConfig+0x4c4>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d1f0      	bne.n	8005d5c <HAL_RCC_OscConfig+0x498>
 8005d7a:	e01e      	b.n	8005dba <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	69db      	ldr	r3, [r3, #28]
 8005d80:	2b01      	cmp	r3, #1
 8005d82:	d107      	bne.n	8005d94 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005d84:	2301      	movs	r3, #1
 8005d86:	e019      	b.n	8005dbc <HAL_RCC_OscConfig+0x4f8>
 8005d88:	40021000 	.word	0x40021000
 8005d8c:	40007000 	.word	0x40007000
 8005d90:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005d94:	4b0b      	ldr	r3, [pc, #44]	@ (8005dc4 <HAL_RCC_OscConfig+0x500>)
 8005d96:	685b      	ldr	r3, [r3, #4]
 8005d98:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6a1b      	ldr	r3, [r3, #32]
 8005da4:	429a      	cmp	r2, r3
 8005da6:	d106      	bne.n	8005db6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005db2:	429a      	cmp	r2, r3
 8005db4:	d001      	beq.n	8005dba <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8005db6:	2301      	movs	r3, #1
 8005db8:	e000      	b.n	8005dbc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8005dba:	2300      	movs	r3, #0
}
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	3718      	adds	r7, #24
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	bd80      	pop	{r7, pc}
 8005dc4:	40021000 	.word	0x40021000

08005dc8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b084      	sub	sp, #16
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
 8005dd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d101      	bne.n	8005ddc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005dd8:	2301      	movs	r3, #1
 8005dda:	e0d0      	b.n	8005f7e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005ddc:	4b6a      	ldr	r3, [pc, #424]	@ (8005f88 <HAL_RCC_ClockConfig+0x1c0>)
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f003 0307 	and.w	r3, r3, #7
 8005de4:	683a      	ldr	r2, [r7, #0]
 8005de6:	429a      	cmp	r2, r3
 8005de8:	d910      	bls.n	8005e0c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005dea:	4b67      	ldr	r3, [pc, #412]	@ (8005f88 <HAL_RCC_ClockConfig+0x1c0>)
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f023 0207 	bic.w	r2, r3, #7
 8005df2:	4965      	ldr	r1, [pc, #404]	@ (8005f88 <HAL_RCC_ClockConfig+0x1c0>)
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	4313      	orrs	r3, r2
 8005df8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005dfa:	4b63      	ldr	r3, [pc, #396]	@ (8005f88 <HAL_RCC_ClockConfig+0x1c0>)
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f003 0307 	and.w	r3, r3, #7
 8005e02:	683a      	ldr	r2, [r7, #0]
 8005e04:	429a      	cmp	r2, r3
 8005e06:	d001      	beq.n	8005e0c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005e08:	2301      	movs	r3, #1
 8005e0a:	e0b8      	b.n	8005f7e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f003 0302 	and.w	r3, r3, #2
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d020      	beq.n	8005e5a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f003 0304 	and.w	r3, r3, #4
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d005      	beq.n	8005e30 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005e24:	4b59      	ldr	r3, [pc, #356]	@ (8005f8c <HAL_RCC_ClockConfig+0x1c4>)
 8005e26:	685b      	ldr	r3, [r3, #4]
 8005e28:	4a58      	ldr	r2, [pc, #352]	@ (8005f8c <HAL_RCC_ClockConfig+0x1c4>)
 8005e2a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005e2e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f003 0308 	and.w	r3, r3, #8
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d005      	beq.n	8005e48 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005e3c:	4b53      	ldr	r3, [pc, #332]	@ (8005f8c <HAL_RCC_ClockConfig+0x1c4>)
 8005e3e:	685b      	ldr	r3, [r3, #4]
 8005e40:	4a52      	ldr	r2, [pc, #328]	@ (8005f8c <HAL_RCC_ClockConfig+0x1c4>)
 8005e42:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8005e46:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005e48:	4b50      	ldr	r3, [pc, #320]	@ (8005f8c <HAL_RCC_ClockConfig+0x1c4>)
 8005e4a:	685b      	ldr	r3, [r3, #4]
 8005e4c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	689b      	ldr	r3, [r3, #8]
 8005e54:	494d      	ldr	r1, [pc, #308]	@ (8005f8c <HAL_RCC_ClockConfig+0x1c4>)
 8005e56:	4313      	orrs	r3, r2
 8005e58:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f003 0301 	and.w	r3, r3, #1
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d040      	beq.n	8005ee8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	685b      	ldr	r3, [r3, #4]
 8005e6a:	2b01      	cmp	r3, #1
 8005e6c:	d107      	bne.n	8005e7e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e6e:	4b47      	ldr	r3, [pc, #284]	@ (8005f8c <HAL_RCC_ClockConfig+0x1c4>)
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d115      	bne.n	8005ea6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e7a:	2301      	movs	r3, #1
 8005e7c:	e07f      	b.n	8005f7e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	685b      	ldr	r3, [r3, #4]
 8005e82:	2b02      	cmp	r3, #2
 8005e84:	d107      	bne.n	8005e96 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e86:	4b41      	ldr	r3, [pc, #260]	@ (8005f8c <HAL_RCC_ClockConfig+0x1c4>)
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d109      	bne.n	8005ea6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e92:	2301      	movs	r3, #1
 8005e94:	e073      	b.n	8005f7e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e96:	4b3d      	ldr	r3, [pc, #244]	@ (8005f8c <HAL_RCC_ClockConfig+0x1c4>)
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f003 0302 	and.w	r3, r3, #2
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d101      	bne.n	8005ea6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ea2:	2301      	movs	r3, #1
 8005ea4:	e06b      	b.n	8005f7e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005ea6:	4b39      	ldr	r3, [pc, #228]	@ (8005f8c <HAL_RCC_ClockConfig+0x1c4>)
 8005ea8:	685b      	ldr	r3, [r3, #4]
 8005eaa:	f023 0203 	bic.w	r2, r3, #3
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	685b      	ldr	r3, [r3, #4]
 8005eb2:	4936      	ldr	r1, [pc, #216]	@ (8005f8c <HAL_RCC_ClockConfig+0x1c4>)
 8005eb4:	4313      	orrs	r3, r2
 8005eb6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005eb8:	f7fb fc50 	bl	800175c <HAL_GetTick>
 8005ebc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ebe:	e00a      	b.n	8005ed6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ec0:	f7fb fc4c 	bl	800175c <HAL_GetTick>
 8005ec4:	4602      	mov	r2, r0
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	1ad3      	subs	r3, r2, r3
 8005eca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d901      	bls.n	8005ed6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005ed2:	2303      	movs	r3, #3
 8005ed4:	e053      	b.n	8005f7e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ed6:	4b2d      	ldr	r3, [pc, #180]	@ (8005f8c <HAL_RCC_ClockConfig+0x1c4>)
 8005ed8:	685b      	ldr	r3, [r3, #4]
 8005eda:	f003 020c 	and.w	r2, r3, #12
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	685b      	ldr	r3, [r3, #4]
 8005ee2:	009b      	lsls	r3, r3, #2
 8005ee4:	429a      	cmp	r2, r3
 8005ee6:	d1eb      	bne.n	8005ec0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005ee8:	4b27      	ldr	r3, [pc, #156]	@ (8005f88 <HAL_RCC_ClockConfig+0x1c0>)
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f003 0307 	and.w	r3, r3, #7
 8005ef0:	683a      	ldr	r2, [r7, #0]
 8005ef2:	429a      	cmp	r2, r3
 8005ef4:	d210      	bcs.n	8005f18 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ef6:	4b24      	ldr	r3, [pc, #144]	@ (8005f88 <HAL_RCC_ClockConfig+0x1c0>)
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f023 0207 	bic.w	r2, r3, #7
 8005efe:	4922      	ldr	r1, [pc, #136]	@ (8005f88 <HAL_RCC_ClockConfig+0x1c0>)
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	4313      	orrs	r3, r2
 8005f04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f06:	4b20      	ldr	r3, [pc, #128]	@ (8005f88 <HAL_RCC_ClockConfig+0x1c0>)
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f003 0307 	and.w	r3, r3, #7
 8005f0e:	683a      	ldr	r2, [r7, #0]
 8005f10:	429a      	cmp	r2, r3
 8005f12:	d001      	beq.n	8005f18 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005f14:	2301      	movs	r3, #1
 8005f16:	e032      	b.n	8005f7e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f003 0304 	and.w	r3, r3, #4
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d008      	beq.n	8005f36 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005f24:	4b19      	ldr	r3, [pc, #100]	@ (8005f8c <HAL_RCC_ClockConfig+0x1c4>)
 8005f26:	685b      	ldr	r3, [r3, #4]
 8005f28:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	68db      	ldr	r3, [r3, #12]
 8005f30:	4916      	ldr	r1, [pc, #88]	@ (8005f8c <HAL_RCC_ClockConfig+0x1c4>)
 8005f32:	4313      	orrs	r3, r2
 8005f34:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f003 0308 	and.w	r3, r3, #8
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d009      	beq.n	8005f56 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005f42:	4b12      	ldr	r3, [pc, #72]	@ (8005f8c <HAL_RCC_ClockConfig+0x1c4>)
 8005f44:	685b      	ldr	r3, [r3, #4]
 8005f46:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	691b      	ldr	r3, [r3, #16]
 8005f4e:	00db      	lsls	r3, r3, #3
 8005f50:	490e      	ldr	r1, [pc, #56]	@ (8005f8c <HAL_RCC_ClockConfig+0x1c4>)
 8005f52:	4313      	orrs	r3, r2
 8005f54:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005f56:	f000 f821 	bl	8005f9c <HAL_RCC_GetSysClockFreq>
 8005f5a:	4602      	mov	r2, r0
 8005f5c:	4b0b      	ldr	r3, [pc, #44]	@ (8005f8c <HAL_RCC_ClockConfig+0x1c4>)
 8005f5e:	685b      	ldr	r3, [r3, #4]
 8005f60:	091b      	lsrs	r3, r3, #4
 8005f62:	f003 030f 	and.w	r3, r3, #15
 8005f66:	490a      	ldr	r1, [pc, #40]	@ (8005f90 <HAL_RCC_ClockConfig+0x1c8>)
 8005f68:	5ccb      	ldrb	r3, [r1, r3]
 8005f6a:	fa22 f303 	lsr.w	r3, r2, r3
 8005f6e:	4a09      	ldr	r2, [pc, #36]	@ (8005f94 <HAL_RCC_ClockConfig+0x1cc>)
 8005f70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005f72:	4b09      	ldr	r3, [pc, #36]	@ (8005f98 <HAL_RCC_ClockConfig+0x1d0>)
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	4618      	mov	r0, r3
 8005f78:	f7fb fbae 	bl	80016d8 <HAL_InitTick>

  return HAL_OK;
 8005f7c:	2300      	movs	r3, #0
}
 8005f7e:	4618      	mov	r0, r3
 8005f80:	3710      	adds	r7, #16
 8005f82:	46bd      	mov	sp, r7
 8005f84:	bd80      	pop	{r7, pc}
 8005f86:	bf00      	nop
 8005f88:	40022000 	.word	0x40022000
 8005f8c:	40021000 	.word	0x40021000
 8005f90:	0800b808 	.word	0x0800b808
 8005f94:	20000010 	.word	0x20000010
 8005f98:	20000014 	.word	0x20000014

08005f9c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005f9c:	b480      	push	{r7}
 8005f9e:	b087      	sub	sp, #28
 8005fa0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	60fb      	str	r3, [r7, #12]
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	60bb      	str	r3, [r7, #8]
 8005faa:	2300      	movs	r3, #0
 8005fac:	617b      	str	r3, [r7, #20]
 8005fae:	2300      	movs	r3, #0
 8005fb0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005fb6:	4b1e      	ldr	r3, [pc, #120]	@ (8006030 <HAL_RCC_GetSysClockFreq+0x94>)
 8005fb8:	685b      	ldr	r3, [r3, #4]
 8005fba:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	f003 030c 	and.w	r3, r3, #12
 8005fc2:	2b04      	cmp	r3, #4
 8005fc4:	d002      	beq.n	8005fcc <HAL_RCC_GetSysClockFreq+0x30>
 8005fc6:	2b08      	cmp	r3, #8
 8005fc8:	d003      	beq.n	8005fd2 <HAL_RCC_GetSysClockFreq+0x36>
 8005fca:	e027      	b.n	800601c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005fcc:	4b19      	ldr	r3, [pc, #100]	@ (8006034 <HAL_RCC_GetSysClockFreq+0x98>)
 8005fce:	613b      	str	r3, [r7, #16]
      break;
 8005fd0:	e027      	b.n	8006022 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	0c9b      	lsrs	r3, r3, #18
 8005fd6:	f003 030f 	and.w	r3, r3, #15
 8005fda:	4a17      	ldr	r2, [pc, #92]	@ (8006038 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005fdc:	5cd3      	ldrb	r3, [r2, r3]
 8005fde:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d010      	beq.n	800600c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005fea:	4b11      	ldr	r3, [pc, #68]	@ (8006030 <HAL_RCC_GetSysClockFreq+0x94>)
 8005fec:	685b      	ldr	r3, [r3, #4]
 8005fee:	0c5b      	lsrs	r3, r3, #17
 8005ff0:	f003 0301 	and.w	r3, r3, #1
 8005ff4:	4a11      	ldr	r2, [pc, #68]	@ (800603c <HAL_RCC_GetSysClockFreq+0xa0>)
 8005ff6:	5cd3      	ldrb	r3, [r2, r3]
 8005ff8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	4a0d      	ldr	r2, [pc, #52]	@ (8006034 <HAL_RCC_GetSysClockFreq+0x98>)
 8005ffe:	fb03 f202 	mul.w	r2, r3, r2
 8006002:	68bb      	ldr	r3, [r7, #8]
 8006004:	fbb2 f3f3 	udiv	r3, r2, r3
 8006008:	617b      	str	r3, [r7, #20]
 800600a:	e004      	b.n	8006016 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	4a0c      	ldr	r2, [pc, #48]	@ (8006040 <HAL_RCC_GetSysClockFreq+0xa4>)
 8006010:	fb02 f303 	mul.w	r3, r2, r3
 8006014:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8006016:	697b      	ldr	r3, [r7, #20]
 8006018:	613b      	str	r3, [r7, #16]
      break;
 800601a:	e002      	b.n	8006022 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800601c:	4b05      	ldr	r3, [pc, #20]	@ (8006034 <HAL_RCC_GetSysClockFreq+0x98>)
 800601e:	613b      	str	r3, [r7, #16]
      break;
 8006020:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006022:	693b      	ldr	r3, [r7, #16]
}
 8006024:	4618      	mov	r0, r3
 8006026:	371c      	adds	r7, #28
 8006028:	46bd      	mov	sp, r7
 800602a:	bc80      	pop	{r7}
 800602c:	4770      	bx	lr
 800602e:	bf00      	nop
 8006030:	40021000 	.word	0x40021000
 8006034:	007a1200 	.word	0x007a1200
 8006038:	0800b820 	.word	0x0800b820
 800603c:	0800b830 	.word	0x0800b830
 8006040:	003d0900 	.word	0x003d0900

08006044 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006044:	b480      	push	{r7}
 8006046:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006048:	4b02      	ldr	r3, [pc, #8]	@ (8006054 <HAL_RCC_GetHCLKFreq+0x10>)
 800604a:	681b      	ldr	r3, [r3, #0]
}
 800604c:	4618      	mov	r0, r3
 800604e:	46bd      	mov	sp, r7
 8006050:	bc80      	pop	{r7}
 8006052:	4770      	bx	lr
 8006054:	20000010 	.word	0x20000010

08006058 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006058:	b580      	push	{r7, lr}
 800605a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800605c:	f7ff fff2 	bl	8006044 <HAL_RCC_GetHCLKFreq>
 8006060:	4602      	mov	r2, r0
 8006062:	4b05      	ldr	r3, [pc, #20]	@ (8006078 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006064:	685b      	ldr	r3, [r3, #4]
 8006066:	0a1b      	lsrs	r3, r3, #8
 8006068:	f003 0307 	and.w	r3, r3, #7
 800606c:	4903      	ldr	r1, [pc, #12]	@ (800607c <HAL_RCC_GetPCLK1Freq+0x24>)
 800606e:	5ccb      	ldrb	r3, [r1, r3]
 8006070:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006074:	4618      	mov	r0, r3
 8006076:	bd80      	pop	{r7, pc}
 8006078:	40021000 	.word	0x40021000
 800607c:	0800b818 	.word	0x0800b818

08006080 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006084:	f7ff ffde 	bl	8006044 <HAL_RCC_GetHCLKFreq>
 8006088:	4602      	mov	r2, r0
 800608a:	4b05      	ldr	r3, [pc, #20]	@ (80060a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800608c:	685b      	ldr	r3, [r3, #4]
 800608e:	0adb      	lsrs	r3, r3, #11
 8006090:	f003 0307 	and.w	r3, r3, #7
 8006094:	4903      	ldr	r1, [pc, #12]	@ (80060a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006096:	5ccb      	ldrb	r3, [r1, r3]
 8006098:	fa22 f303 	lsr.w	r3, r2, r3
}
 800609c:	4618      	mov	r0, r3
 800609e:	bd80      	pop	{r7, pc}
 80060a0:	40021000 	.word	0x40021000
 80060a4:	0800b818 	.word	0x0800b818

080060a8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80060a8:	b480      	push	{r7}
 80060aa:	b085      	sub	sp, #20
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80060b0:	4b0a      	ldr	r3, [pc, #40]	@ (80060dc <RCC_Delay+0x34>)
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	4a0a      	ldr	r2, [pc, #40]	@ (80060e0 <RCC_Delay+0x38>)
 80060b6:	fba2 2303 	umull	r2, r3, r2, r3
 80060ba:	0a5b      	lsrs	r3, r3, #9
 80060bc:	687a      	ldr	r2, [r7, #4]
 80060be:	fb02 f303 	mul.w	r3, r2, r3
 80060c2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80060c4:	bf00      	nop
  }
  while (Delay --);
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	1e5a      	subs	r2, r3, #1
 80060ca:	60fa      	str	r2, [r7, #12]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d1f9      	bne.n	80060c4 <RCC_Delay+0x1c>
}
 80060d0:	bf00      	nop
 80060d2:	bf00      	nop
 80060d4:	3714      	adds	r7, #20
 80060d6:	46bd      	mov	sp, r7
 80060d8:	bc80      	pop	{r7}
 80060da:	4770      	bx	lr
 80060dc:	20000010 	.word	0x20000010
 80060e0:	10624dd3 	.word	0x10624dd3

080060e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b086      	sub	sp, #24
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80060ec:	2300      	movs	r3, #0
 80060ee:	613b      	str	r3, [r7, #16]
 80060f0:	2300      	movs	r3, #0
 80060f2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f003 0301 	and.w	r3, r3, #1
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d07d      	beq.n	80061fc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8006100:	2300      	movs	r3, #0
 8006102:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006104:	4b4f      	ldr	r3, [pc, #316]	@ (8006244 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006106:	69db      	ldr	r3, [r3, #28]
 8006108:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800610c:	2b00      	cmp	r3, #0
 800610e:	d10d      	bne.n	800612c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006110:	4b4c      	ldr	r3, [pc, #304]	@ (8006244 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006112:	69db      	ldr	r3, [r3, #28]
 8006114:	4a4b      	ldr	r2, [pc, #300]	@ (8006244 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006116:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800611a:	61d3      	str	r3, [r2, #28]
 800611c:	4b49      	ldr	r3, [pc, #292]	@ (8006244 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800611e:	69db      	ldr	r3, [r3, #28]
 8006120:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006124:	60bb      	str	r3, [r7, #8]
 8006126:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006128:	2301      	movs	r3, #1
 800612a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800612c:	4b46      	ldr	r3, [pc, #280]	@ (8006248 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006134:	2b00      	cmp	r3, #0
 8006136:	d118      	bne.n	800616a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006138:	4b43      	ldr	r3, [pc, #268]	@ (8006248 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	4a42      	ldr	r2, [pc, #264]	@ (8006248 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800613e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006142:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006144:	f7fb fb0a 	bl	800175c <HAL_GetTick>
 8006148:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800614a:	e008      	b.n	800615e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800614c:	f7fb fb06 	bl	800175c <HAL_GetTick>
 8006150:	4602      	mov	r2, r0
 8006152:	693b      	ldr	r3, [r7, #16]
 8006154:	1ad3      	subs	r3, r2, r3
 8006156:	2b64      	cmp	r3, #100	@ 0x64
 8006158:	d901      	bls.n	800615e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800615a:	2303      	movs	r3, #3
 800615c:	e06d      	b.n	800623a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800615e:	4b3a      	ldr	r3, [pc, #232]	@ (8006248 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006166:	2b00      	cmp	r3, #0
 8006168:	d0f0      	beq.n	800614c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800616a:	4b36      	ldr	r3, [pc, #216]	@ (8006244 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800616c:	6a1b      	ldr	r3, [r3, #32]
 800616e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006172:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d02e      	beq.n	80061d8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	685b      	ldr	r3, [r3, #4]
 800617e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006182:	68fa      	ldr	r2, [r7, #12]
 8006184:	429a      	cmp	r2, r3
 8006186:	d027      	beq.n	80061d8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006188:	4b2e      	ldr	r3, [pc, #184]	@ (8006244 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800618a:	6a1b      	ldr	r3, [r3, #32]
 800618c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006190:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006192:	4b2e      	ldr	r3, [pc, #184]	@ (800624c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006194:	2201      	movs	r2, #1
 8006196:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006198:	4b2c      	ldr	r3, [pc, #176]	@ (800624c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800619a:	2200      	movs	r2, #0
 800619c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800619e:	4a29      	ldr	r2, [pc, #164]	@ (8006244 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	f003 0301 	and.w	r3, r3, #1
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d014      	beq.n	80061d8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061ae:	f7fb fad5 	bl	800175c <HAL_GetTick>
 80061b2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80061b4:	e00a      	b.n	80061cc <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80061b6:	f7fb fad1 	bl	800175c <HAL_GetTick>
 80061ba:	4602      	mov	r2, r0
 80061bc:	693b      	ldr	r3, [r7, #16]
 80061be:	1ad3      	subs	r3, r2, r3
 80061c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80061c4:	4293      	cmp	r3, r2
 80061c6:	d901      	bls.n	80061cc <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80061c8:	2303      	movs	r3, #3
 80061ca:	e036      	b.n	800623a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80061cc:	4b1d      	ldr	r3, [pc, #116]	@ (8006244 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80061ce:	6a1b      	ldr	r3, [r3, #32]
 80061d0:	f003 0302 	and.w	r3, r3, #2
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d0ee      	beq.n	80061b6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80061d8:	4b1a      	ldr	r3, [pc, #104]	@ (8006244 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80061da:	6a1b      	ldr	r3, [r3, #32]
 80061dc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	685b      	ldr	r3, [r3, #4]
 80061e4:	4917      	ldr	r1, [pc, #92]	@ (8006244 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80061e6:	4313      	orrs	r3, r2
 80061e8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80061ea:	7dfb      	ldrb	r3, [r7, #23]
 80061ec:	2b01      	cmp	r3, #1
 80061ee:	d105      	bne.n	80061fc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80061f0:	4b14      	ldr	r3, [pc, #80]	@ (8006244 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80061f2:	69db      	ldr	r3, [r3, #28]
 80061f4:	4a13      	ldr	r2, [pc, #76]	@ (8006244 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80061f6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80061fa:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f003 0302 	and.w	r3, r3, #2
 8006204:	2b00      	cmp	r3, #0
 8006206:	d008      	beq.n	800621a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006208:	4b0e      	ldr	r3, [pc, #56]	@ (8006244 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800620a:	685b      	ldr	r3, [r3, #4]
 800620c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	689b      	ldr	r3, [r3, #8]
 8006214:	490b      	ldr	r1, [pc, #44]	@ (8006244 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006216:	4313      	orrs	r3, r2
 8006218:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f003 0310 	and.w	r3, r3, #16
 8006222:	2b00      	cmp	r3, #0
 8006224:	d008      	beq.n	8006238 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006226:	4b07      	ldr	r3, [pc, #28]	@ (8006244 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006228:	685b      	ldr	r3, [r3, #4]
 800622a:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	68db      	ldr	r3, [r3, #12]
 8006232:	4904      	ldr	r1, [pc, #16]	@ (8006244 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006234:	4313      	orrs	r3, r2
 8006236:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8006238:	2300      	movs	r3, #0
}
 800623a:	4618      	mov	r0, r3
 800623c:	3718      	adds	r7, #24
 800623e:	46bd      	mov	sp, r7
 8006240:	bd80      	pop	{r7, pc}
 8006242:	bf00      	nop
 8006244:	40021000 	.word	0x40021000
 8006248:	40007000 	.word	0x40007000
 800624c:	42420440 	.word	0x42420440

08006250 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006250:	b580      	push	{r7, lr}
 8006252:	b088      	sub	sp, #32
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8006258:	2300      	movs	r3, #0
 800625a:	617b      	str	r3, [r7, #20]
 800625c:	2300      	movs	r3, #0
 800625e:	61fb      	str	r3, [r7, #28]
 8006260:	2300      	movs	r3, #0
 8006262:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8006264:	2300      	movs	r3, #0
 8006266:	60fb      	str	r3, [r7, #12]
 8006268:	2300      	movs	r3, #0
 800626a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2b10      	cmp	r3, #16
 8006270:	d00a      	beq.n	8006288 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	2b10      	cmp	r3, #16
 8006276:	f200 808a 	bhi.w	800638e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	2b01      	cmp	r3, #1
 800627e:	d045      	beq.n	800630c <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2b02      	cmp	r3, #2
 8006284:	d075      	beq.n	8006372 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8006286:	e082      	b.n	800638e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8006288:	4b46      	ldr	r3, [pc, #280]	@ (80063a4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800628a:	685b      	ldr	r3, [r3, #4]
 800628c:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800628e:	4b45      	ldr	r3, [pc, #276]	@ (80063a4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006296:	2b00      	cmp	r3, #0
 8006298:	d07b      	beq.n	8006392 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	0c9b      	lsrs	r3, r3, #18
 800629e:	f003 030f 	and.w	r3, r3, #15
 80062a2:	4a41      	ldr	r2, [pc, #260]	@ (80063a8 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 80062a4:	5cd3      	ldrb	r3, [r2, r3]
 80062a6:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d015      	beq.n	80062de <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80062b2:	4b3c      	ldr	r3, [pc, #240]	@ (80063a4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80062b4:	685b      	ldr	r3, [r3, #4]
 80062b6:	0c5b      	lsrs	r3, r3, #17
 80062b8:	f003 0301 	and.w	r3, r3, #1
 80062bc:	4a3b      	ldr	r2, [pc, #236]	@ (80063ac <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 80062be:	5cd3      	ldrb	r3, [r2, r3]
 80062c0:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d00d      	beq.n	80062e8 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80062cc:	4a38      	ldr	r2, [pc, #224]	@ (80063b0 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80062ce:	697b      	ldr	r3, [r7, #20]
 80062d0:	fbb2 f2f3 	udiv	r2, r2, r3
 80062d4:	693b      	ldr	r3, [r7, #16]
 80062d6:	fb02 f303 	mul.w	r3, r2, r3
 80062da:	61fb      	str	r3, [r7, #28]
 80062dc:	e004      	b.n	80062e8 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80062de:	693b      	ldr	r3, [r7, #16]
 80062e0:	4a34      	ldr	r2, [pc, #208]	@ (80063b4 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80062e2:	fb02 f303 	mul.w	r3, r2, r3
 80062e6:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80062e8:	4b2e      	ldr	r3, [pc, #184]	@ (80063a4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80062ea:	685b      	ldr	r3, [r3, #4]
 80062ec:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80062f0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80062f4:	d102      	bne.n	80062fc <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 80062f6:	69fb      	ldr	r3, [r7, #28]
 80062f8:	61bb      	str	r3, [r7, #24]
      break;
 80062fa:	e04a      	b.n	8006392 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 80062fc:	69fb      	ldr	r3, [r7, #28]
 80062fe:	005b      	lsls	r3, r3, #1
 8006300:	4a2d      	ldr	r2, [pc, #180]	@ (80063b8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8006302:	fba2 2303 	umull	r2, r3, r2, r3
 8006306:	085b      	lsrs	r3, r3, #1
 8006308:	61bb      	str	r3, [r7, #24]
      break;
 800630a:	e042      	b.n	8006392 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 800630c:	4b25      	ldr	r3, [pc, #148]	@ (80063a4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800630e:	6a1b      	ldr	r3, [r3, #32]
 8006310:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006318:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800631c:	d108      	bne.n	8006330 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	f003 0302 	and.w	r3, r3, #2
 8006324:	2b00      	cmp	r3, #0
 8006326:	d003      	beq.n	8006330 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8006328:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800632c:	61bb      	str	r3, [r7, #24]
 800632e:	e01f      	b.n	8006370 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006336:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800633a:	d109      	bne.n	8006350 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 800633c:	4b19      	ldr	r3, [pc, #100]	@ (80063a4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800633e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006340:	f003 0302 	and.w	r3, r3, #2
 8006344:	2b00      	cmp	r3, #0
 8006346:	d003      	beq.n	8006350 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8006348:	f649 4340 	movw	r3, #40000	@ 0x9c40
 800634c:	61bb      	str	r3, [r7, #24]
 800634e:	e00f      	b.n	8006370 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006356:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800635a:	d11c      	bne.n	8006396 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 800635c:	4b11      	ldr	r3, [pc, #68]	@ (80063a4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006364:	2b00      	cmp	r3, #0
 8006366:	d016      	beq.n	8006396 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8006368:	f24f 4324 	movw	r3, #62500	@ 0xf424
 800636c:	61bb      	str	r3, [r7, #24]
      break;
 800636e:	e012      	b.n	8006396 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8006370:	e011      	b.n	8006396 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8006372:	f7ff fe85 	bl	8006080 <HAL_RCC_GetPCLK2Freq>
 8006376:	4602      	mov	r2, r0
 8006378:	4b0a      	ldr	r3, [pc, #40]	@ (80063a4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800637a:	685b      	ldr	r3, [r3, #4]
 800637c:	0b9b      	lsrs	r3, r3, #14
 800637e:	f003 0303 	and.w	r3, r3, #3
 8006382:	3301      	adds	r3, #1
 8006384:	005b      	lsls	r3, r3, #1
 8006386:	fbb2 f3f3 	udiv	r3, r2, r3
 800638a:	61bb      	str	r3, [r7, #24]
      break;
 800638c:	e004      	b.n	8006398 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800638e:	bf00      	nop
 8006390:	e002      	b.n	8006398 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8006392:	bf00      	nop
 8006394:	e000      	b.n	8006398 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8006396:	bf00      	nop
    }
  }
  return (frequency);
 8006398:	69bb      	ldr	r3, [r7, #24]
}
 800639a:	4618      	mov	r0, r3
 800639c:	3720      	adds	r7, #32
 800639e:	46bd      	mov	sp, r7
 80063a0:	bd80      	pop	{r7, pc}
 80063a2:	bf00      	nop
 80063a4:	40021000 	.word	0x40021000
 80063a8:	0800b834 	.word	0x0800b834
 80063ac:	0800b844 	.word	0x0800b844
 80063b0:	007a1200 	.word	0x007a1200
 80063b4:	003d0900 	.word	0x003d0900
 80063b8:	aaaaaaab 	.word	0xaaaaaaab

080063bc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b082      	sub	sp, #8
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d101      	bne.n	80063ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80063ca:	2301      	movs	r3, #1
 80063cc:	e042      	b.n	8006454 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80063d4:	b2db      	uxtb	r3, r3
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d106      	bne.n	80063e8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2200      	movs	r2, #0
 80063de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80063e2:	6878      	ldr	r0, [r7, #4]
 80063e4:	f7fb f8f2 	bl	80015cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2224      	movs	r2, #36	@ 0x24
 80063ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	68da      	ldr	r2, [r3, #12]
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80063fe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006400:	6878      	ldr	r0, [r7, #4]
 8006402:	f000 f971 	bl	80066e8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	691a      	ldr	r2, [r3, #16]
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006414:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	695a      	ldr	r2, [r3, #20]
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006424:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	68da      	ldr	r2, [r3, #12]
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006434:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	2200      	movs	r2, #0
 800643a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2220      	movs	r2, #32
 8006440:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2220      	movs	r2, #32
 8006448:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2200      	movs	r2, #0
 8006450:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006452:	2300      	movs	r3, #0
}
 8006454:	4618      	mov	r0, r3
 8006456:	3708      	adds	r7, #8
 8006458:	46bd      	mov	sp, r7
 800645a:	bd80      	pop	{r7, pc}

0800645c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b08a      	sub	sp, #40	@ 0x28
 8006460:	af02      	add	r7, sp, #8
 8006462:	60f8      	str	r0, [r7, #12]
 8006464:	60b9      	str	r1, [r7, #8]
 8006466:	603b      	str	r3, [r7, #0]
 8006468:	4613      	mov	r3, r2
 800646a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800646c:	2300      	movs	r3, #0
 800646e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006476:	b2db      	uxtb	r3, r3
 8006478:	2b20      	cmp	r3, #32
 800647a:	d175      	bne.n	8006568 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800647c:	68bb      	ldr	r3, [r7, #8]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d002      	beq.n	8006488 <HAL_UART_Transmit+0x2c>
 8006482:	88fb      	ldrh	r3, [r7, #6]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d101      	bne.n	800648c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006488:	2301      	movs	r3, #1
 800648a:	e06e      	b.n	800656a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	2200      	movs	r2, #0
 8006490:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	2221      	movs	r2, #33	@ 0x21
 8006496:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800649a:	f7fb f95f 	bl	800175c <HAL_GetTick>
 800649e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	88fa      	ldrh	r2, [r7, #6]
 80064a4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	88fa      	ldrh	r2, [r7, #6]
 80064aa:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	689b      	ldr	r3, [r3, #8]
 80064b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80064b4:	d108      	bne.n	80064c8 <HAL_UART_Transmit+0x6c>
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	691b      	ldr	r3, [r3, #16]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d104      	bne.n	80064c8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80064be:	2300      	movs	r3, #0
 80064c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80064c2:	68bb      	ldr	r3, [r7, #8]
 80064c4:	61bb      	str	r3, [r7, #24]
 80064c6:	e003      	b.n	80064d0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80064c8:	68bb      	ldr	r3, [r7, #8]
 80064ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80064cc:	2300      	movs	r3, #0
 80064ce:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80064d0:	e02e      	b.n	8006530 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	9300      	str	r3, [sp, #0]
 80064d6:	697b      	ldr	r3, [r7, #20]
 80064d8:	2200      	movs	r2, #0
 80064da:	2180      	movs	r1, #128	@ 0x80
 80064dc:	68f8      	ldr	r0, [r7, #12]
 80064de:	f000 f848 	bl	8006572 <UART_WaitOnFlagUntilTimeout>
 80064e2:	4603      	mov	r3, r0
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d005      	beq.n	80064f4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	2220      	movs	r2, #32
 80064ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80064f0:	2303      	movs	r3, #3
 80064f2:	e03a      	b.n	800656a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80064f4:	69fb      	ldr	r3, [r7, #28]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d10b      	bne.n	8006512 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80064fa:	69bb      	ldr	r3, [r7, #24]
 80064fc:	881b      	ldrh	r3, [r3, #0]
 80064fe:	461a      	mov	r2, r3
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006508:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800650a:	69bb      	ldr	r3, [r7, #24]
 800650c:	3302      	adds	r3, #2
 800650e:	61bb      	str	r3, [r7, #24]
 8006510:	e007      	b.n	8006522 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006512:	69fb      	ldr	r3, [r7, #28]
 8006514:	781a      	ldrb	r2, [r3, #0]
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800651c:	69fb      	ldr	r3, [r7, #28]
 800651e:	3301      	adds	r3, #1
 8006520:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006526:	b29b      	uxth	r3, r3
 8006528:	3b01      	subs	r3, #1
 800652a:	b29a      	uxth	r2, r3
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006534:	b29b      	uxth	r3, r3
 8006536:	2b00      	cmp	r3, #0
 8006538:	d1cb      	bne.n	80064d2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	9300      	str	r3, [sp, #0]
 800653e:	697b      	ldr	r3, [r7, #20]
 8006540:	2200      	movs	r2, #0
 8006542:	2140      	movs	r1, #64	@ 0x40
 8006544:	68f8      	ldr	r0, [r7, #12]
 8006546:	f000 f814 	bl	8006572 <UART_WaitOnFlagUntilTimeout>
 800654a:	4603      	mov	r3, r0
 800654c:	2b00      	cmp	r3, #0
 800654e:	d005      	beq.n	800655c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	2220      	movs	r2, #32
 8006554:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8006558:	2303      	movs	r3, #3
 800655a:	e006      	b.n	800656a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	2220      	movs	r2, #32
 8006560:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8006564:	2300      	movs	r3, #0
 8006566:	e000      	b.n	800656a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8006568:	2302      	movs	r3, #2
  }
}
 800656a:	4618      	mov	r0, r3
 800656c:	3720      	adds	r7, #32
 800656e:	46bd      	mov	sp, r7
 8006570:	bd80      	pop	{r7, pc}

08006572 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006572:	b580      	push	{r7, lr}
 8006574:	b086      	sub	sp, #24
 8006576:	af00      	add	r7, sp, #0
 8006578:	60f8      	str	r0, [r7, #12]
 800657a:	60b9      	str	r1, [r7, #8]
 800657c:	603b      	str	r3, [r7, #0]
 800657e:	4613      	mov	r3, r2
 8006580:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006582:	e03b      	b.n	80065fc <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006584:	6a3b      	ldr	r3, [r7, #32]
 8006586:	f1b3 3fff 	cmp.w	r3, #4294967295
 800658a:	d037      	beq.n	80065fc <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800658c:	f7fb f8e6 	bl	800175c <HAL_GetTick>
 8006590:	4602      	mov	r2, r0
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	1ad3      	subs	r3, r2, r3
 8006596:	6a3a      	ldr	r2, [r7, #32]
 8006598:	429a      	cmp	r2, r3
 800659a:	d302      	bcc.n	80065a2 <UART_WaitOnFlagUntilTimeout+0x30>
 800659c:	6a3b      	ldr	r3, [r7, #32]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d101      	bne.n	80065a6 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80065a2:	2303      	movs	r3, #3
 80065a4:	e03a      	b.n	800661c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	68db      	ldr	r3, [r3, #12]
 80065ac:	f003 0304 	and.w	r3, r3, #4
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d023      	beq.n	80065fc <UART_WaitOnFlagUntilTimeout+0x8a>
 80065b4:	68bb      	ldr	r3, [r7, #8]
 80065b6:	2b80      	cmp	r3, #128	@ 0x80
 80065b8:	d020      	beq.n	80065fc <UART_WaitOnFlagUntilTimeout+0x8a>
 80065ba:	68bb      	ldr	r3, [r7, #8]
 80065bc:	2b40      	cmp	r3, #64	@ 0x40
 80065be:	d01d      	beq.n	80065fc <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f003 0308 	and.w	r3, r3, #8
 80065ca:	2b08      	cmp	r3, #8
 80065cc:	d116      	bne.n	80065fc <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80065ce:	2300      	movs	r3, #0
 80065d0:	617b      	str	r3, [r7, #20]
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	617b      	str	r3, [r7, #20]
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	685b      	ldr	r3, [r3, #4]
 80065e0:	617b      	str	r3, [r7, #20]
 80065e2:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80065e4:	68f8      	ldr	r0, [r7, #12]
 80065e6:	f000 f81d 	bl	8006624 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	2208      	movs	r2, #8
 80065ee:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	2200      	movs	r2, #0
 80065f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80065f8:	2301      	movs	r3, #1
 80065fa:	e00f      	b.n	800661c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	681a      	ldr	r2, [r3, #0]
 8006602:	68bb      	ldr	r3, [r7, #8]
 8006604:	4013      	ands	r3, r2
 8006606:	68ba      	ldr	r2, [r7, #8]
 8006608:	429a      	cmp	r2, r3
 800660a:	bf0c      	ite	eq
 800660c:	2301      	moveq	r3, #1
 800660e:	2300      	movne	r3, #0
 8006610:	b2db      	uxtb	r3, r3
 8006612:	461a      	mov	r2, r3
 8006614:	79fb      	ldrb	r3, [r7, #7]
 8006616:	429a      	cmp	r2, r3
 8006618:	d0b4      	beq.n	8006584 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800661a:	2300      	movs	r3, #0
}
 800661c:	4618      	mov	r0, r3
 800661e:	3718      	adds	r7, #24
 8006620:	46bd      	mov	sp, r7
 8006622:	bd80      	pop	{r7, pc}

08006624 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006624:	b480      	push	{r7}
 8006626:	b095      	sub	sp, #84	@ 0x54
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	330c      	adds	r3, #12
 8006632:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006634:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006636:	e853 3f00 	ldrex	r3, [r3]
 800663a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800663c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800663e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006642:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	330c      	adds	r3, #12
 800664a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800664c:	643a      	str	r2, [r7, #64]	@ 0x40
 800664e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006650:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006652:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006654:	e841 2300 	strex	r3, r2, [r1]
 8006658:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800665a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800665c:	2b00      	cmp	r3, #0
 800665e:	d1e5      	bne.n	800662c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	3314      	adds	r3, #20
 8006666:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006668:	6a3b      	ldr	r3, [r7, #32]
 800666a:	e853 3f00 	ldrex	r3, [r3]
 800666e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006670:	69fb      	ldr	r3, [r7, #28]
 8006672:	f023 0301 	bic.w	r3, r3, #1
 8006676:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	3314      	adds	r3, #20
 800667e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006680:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006682:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006684:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006686:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006688:	e841 2300 	strex	r3, r2, [r1]
 800668c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800668e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006690:	2b00      	cmp	r3, #0
 8006692:	d1e5      	bne.n	8006660 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006698:	2b01      	cmp	r3, #1
 800669a:	d119      	bne.n	80066d0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	330c      	adds	r3, #12
 80066a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	e853 3f00 	ldrex	r3, [r3]
 80066aa:	60bb      	str	r3, [r7, #8]
   return(result);
 80066ac:	68bb      	ldr	r3, [r7, #8]
 80066ae:	f023 0310 	bic.w	r3, r3, #16
 80066b2:	647b      	str	r3, [r7, #68]	@ 0x44
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	330c      	adds	r3, #12
 80066ba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80066bc:	61ba      	str	r2, [r7, #24]
 80066be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066c0:	6979      	ldr	r1, [r7, #20]
 80066c2:	69ba      	ldr	r2, [r7, #24]
 80066c4:	e841 2300 	strex	r3, r2, [r1]
 80066c8:	613b      	str	r3, [r7, #16]
   return(result);
 80066ca:	693b      	ldr	r3, [r7, #16]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d1e5      	bne.n	800669c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2220      	movs	r2, #32
 80066d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2200      	movs	r2, #0
 80066dc:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80066de:	bf00      	nop
 80066e0:	3754      	adds	r7, #84	@ 0x54
 80066e2:	46bd      	mov	sp, r7
 80066e4:	bc80      	pop	{r7}
 80066e6:	4770      	bx	lr

080066e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b084      	sub	sp, #16
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	691b      	ldr	r3, [r3, #16]
 80066f6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	68da      	ldr	r2, [r3, #12]
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	430a      	orrs	r2, r1
 8006704:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	689a      	ldr	r2, [r3, #8]
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	691b      	ldr	r3, [r3, #16]
 800670e:	431a      	orrs	r2, r3
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	695b      	ldr	r3, [r3, #20]
 8006714:	4313      	orrs	r3, r2
 8006716:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	68db      	ldr	r3, [r3, #12]
 800671e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8006722:	f023 030c 	bic.w	r3, r3, #12
 8006726:	687a      	ldr	r2, [r7, #4]
 8006728:	6812      	ldr	r2, [r2, #0]
 800672a:	68b9      	ldr	r1, [r7, #8]
 800672c:	430b      	orrs	r3, r1
 800672e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	695b      	ldr	r3, [r3, #20]
 8006736:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	699a      	ldr	r2, [r3, #24]
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	430a      	orrs	r2, r1
 8006744:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	4a2c      	ldr	r2, [pc, #176]	@ (80067fc <UART_SetConfig+0x114>)
 800674c:	4293      	cmp	r3, r2
 800674e:	d103      	bne.n	8006758 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006750:	f7ff fc96 	bl	8006080 <HAL_RCC_GetPCLK2Freq>
 8006754:	60f8      	str	r0, [r7, #12]
 8006756:	e002      	b.n	800675e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006758:	f7ff fc7e 	bl	8006058 <HAL_RCC_GetPCLK1Freq>
 800675c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800675e:	68fa      	ldr	r2, [r7, #12]
 8006760:	4613      	mov	r3, r2
 8006762:	009b      	lsls	r3, r3, #2
 8006764:	4413      	add	r3, r2
 8006766:	009a      	lsls	r2, r3, #2
 8006768:	441a      	add	r2, r3
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	685b      	ldr	r3, [r3, #4]
 800676e:	009b      	lsls	r3, r3, #2
 8006770:	fbb2 f3f3 	udiv	r3, r2, r3
 8006774:	4a22      	ldr	r2, [pc, #136]	@ (8006800 <UART_SetConfig+0x118>)
 8006776:	fba2 2303 	umull	r2, r3, r2, r3
 800677a:	095b      	lsrs	r3, r3, #5
 800677c:	0119      	lsls	r1, r3, #4
 800677e:	68fa      	ldr	r2, [r7, #12]
 8006780:	4613      	mov	r3, r2
 8006782:	009b      	lsls	r3, r3, #2
 8006784:	4413      	add	r3, r2
 8006786:	009a      	lsls	r2, r3, #2
 8006788:	441a      	add	r2, r3
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	685b      	ldr	r3, [r3, #4]
 800678e:	009b      	lsls	r3, r3, #2
 8006790:	fbb2 f2f3 	udiv	r2, r2, r3
 8006794:	4b1a      	ldr	r3, [pc, #104]	@ (8006800 <UART_SetConfig+0x118>)
 8006796:	fba3 0302 	umull	r0, r3, r3, r2
 800679a:	095b      	lsrs	r3, r3, #5
 800679c:	2064      	movs	r0, #100	@ 0x64
 800679e:	fb00 f303 	mul.w	r3, r0, r3
 80067a2:	1ad3      	subs	r3, r2, r3
 80067a4:	011b      	lsls	r3, r3, #4
 80067a6:	3332      	adds	r3, #50	@ 0x32
 80067a8:	4a15      	ldr	r2, [pc, #84]	@ (8006800 <UART_SetConfig+0x118>)
 80067aa:	fba2 2303 	umull	r2, r3, r2, r3
 80067ae:	095b      	lsrs	r3, r3, #5
 80067b0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80067b4:	4419      	add	r1, r3
 80067b6:	68fa      	ldr	r2, [r7, #12]
 80067b8:	4613      	mov	r3, r2
 80067ba:	009b      	lsls	r3, r3, #2
 80067bc:	4413      	add	r3, r2
 80067be:	009a      	lsls	r2, r3, #2
 80067c0:	441a      	add	r2, r3
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	685b      	ldr	r3, [r3, #4]
 80067c6:	009b      	lsls	r3, r3, #2
 80067c8:	fbb2 f2f3 	udiv	r2, r2, r3
 80067cc:	4b0c      	ldr	r3, [pc, #48]	@ (8006800 <UART_SetConfig+0x118>)
 80067ce:	fba3 0302 	umull	r0, r3, r3, r2
 80067d2:	095b      	lsrs	r3, r3, #5
 80067d4:	2064      	movs	r0, #100	@ 0x64
 80067d6:	fb00 f303 	mul.w	r3, r0, r3
 80067da:	1ad3      	subs	r3, r2, r3
 80067dc:	011b      	lsls	r3, r3, #4
 80067de:	3332      	adds	r3, #50	@ 0x32
 80067e0:	4a07      	ldr	r2, [pc, #28]	@ (8006800 <UART_SetConfig+0x118>)
 80067e2:	fba2 2303 	umull	r2, r3, r2, r3
 80067e6:	095b      	lsrs	r3, r3, #5
 80067e8:	f003 020f 	and.w	r2, r3, #15
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	440a      	add	r2, r1
 80067f2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80067f4:	bf00      	nop
 80067f6:	3710      	adds	r7, #16
 80067f8:	46bd      	mov	sp, r7
 80067fa:	bd80      	pop	{r7, pc}
 80067fc:	40013800 	.word	0x40013800
 8006800:	51eb851f 	.word	0x51eb851f

08006804 <AD5693_Reset>:
 *      reference https://github.com/adafruit/Adafruit_AD569x
 */

#include "ad5693.h"

HAL_StatusTypeDef AD5693_Reset(void){
 8006804:	b580      	push	{r7, lr}
 8006806:	b084      	sub	sp, #16
 8006808:	af02      	add	r7, sp, #8
	uint8_t command = WRITE_CONTROL_REG;		// Command Byte
 800680a:	2340      	movs	r3, #64	@ 0x40
 800680c:	71fb      	strb	r3, [r7, #7]
	uint8_t highByte = 0b10000000;				// Data High, Reset bit High
 800680e:	2380      	movs	r3, #128	@ 0x80
 8006810:	71bb      	strb	r3, [r7, #6]
	uint8_t lowByte = 0b00000000;				// Data Low
 8006812:	2300      	movs	r3, #0
 8006814:	717b      	strb	r3, [r7, #5]

	// Combine the command and data into a single 3-byte buffer
	uint8_t buffer[3] = {command, highByte, lowByte};
 8006816:	79fb      	ldrb	r3, [r7, #7]
 8006818:	703b      	strb	r3, [r7, #0]
 800681a:	79bb      	ldrb	r3, [r7, #6]
 800681c:	707b      	strb	r3, [r7, #1]
 800681e:	797b      	ldrb	r3, [r7, #5]
 8006820:	70bb      	strb	r3, [r7, #2]
	uint8_t status = HAL_I2C_Master_Transmit(I2C_HANDLE,
 8006822:	463a      	mov	r2, r7
 8006824:	230a      	movs	r3, #10
 8006826:	9300      	str	r3, [sp, #0]
 8006828:	2303      	movs	r3, #3
 800682a:	2198      	movs	r1, #152	@ 0x98
 800682c:	4804      	ldr	r0, [pc, #16]	@ (8006840 <AD5693_Reset+0x3c>)
 800682e:	f7fc fac1 	bl	8002db4 <HAL_I2C_Master_Transmit>
 8006832:	4603      	mov	r3, r0
 8006834:	713b      	strb	r3, [r7, #4]
			AD5693_ADDRESS, buffer, 3, 10);
	return status;
 8006836:	793b      	ldrb	r3, [r7, #4]
}
 8006838:	4618      	mov	r0, r3
 800683a:	3708      	adds	r7, #8
 800683c:	46bd      	mov	sp, r7
 800683e:	bd80      	pop	{r7, pc}
 8006840:	20000238 	.word	0x20000238

08006844 <AD5693_Init>:

HAL_StatusTypeDef AD5693_Init(ad5693_configuration_t ad5693){
 8006844:	b580      	push	{r7, lr}
 8006846:	b088      	sub	sp, #32
 8006848:	af02      	add	r7, sp, #8
 800684a:	6078      	str	r0, [r7, #4]
	// Prepare the command byte
	uint8_t command = WRITE_CONTROL_REG;
 800684c:	2340      	movs	r3, #64	@ 0x40
 800684e:	75fb      	strb	r3, [r7, #23]

	// Prepare the high and low data bytes
	uint16_t data = 0x0000;
 8006850:	2300      	movs	r3, #0
 8006852:	82bb      	strh	r3, [r7, #20]
	data |= ((uint16_t)ad5693.mode << 13); // Set D14 and D13 for the operating mode
 8006854:	79bb      	ldrb	r3, [r7, #6]
 8006856:	035b      	lsls	r3, r3, #13
 8006858:	b21a      	sxth	r2, r3
 800685a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800685e:	4313      	orrs	r3, r2
 8006860:	b21b      	sxth	r3, r3
 8006862:	82bb      	strh	r3, [r7, #20]
	data |= ((uint16_t)ad5693.ref_disable << 12); // Set D12 for enable_ref
 8006864:	793b      	ldrb	r3, [r7, #4]
 8006866:	031b      	lsls	r3, r3, #12
 8006868:	b21a      	sxth	r2, r3
 800686a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800686e:	4313      	orrs	r3, r2
 8006870:	b21b      	sxth	r3, r3
 8006872:	82bb      	strh	r3, [r7, #20]
	data |= ((uint16_t)ad5693.gain_x2 << 11);      // Set D11 for the gain
 8006874:	797b      	ldrb	r3, [r7, #5]
 8006876:	02db      	lsls	r3, r3, #11
 8006878:	b21a      	sxth	r2, r3
 800687a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800687e:	4313      	orrs	r3, r2
 8006880:	b21b      	sxth	r3, r3
 8006882:	82bb      	strh	r3, [r7, #20]

	uint8_t highByte = (data >> 8) & 0xFF;
 8006884:	8abb      	ldrh	r3, [r7, #20]
 8006886:	0a1b      	lsrs	r3, r3, #8
 8006888:	b29b      	uxth	r3, r3
 800688a:	74fb      	strb	r3, [r7, #19]
	uint8_t lowByte = data & 0xFF;
 800688c:	8abb      	ldrh	r3, [r7, #20]
 800688e:	74bb      	strb	r3, [r7, #18]

	// Combine the command and data into a single 3-byte buffer
	uint8_t buffer[3] = {command, highByte, lowByte};
 8006890:	7dfb      	ldrb	r3, [r7, #23]
 8006892:	733b      	strb	r3, [r7, #12]
 8006894:	7cfb      	ldrb	r3, [r7, #19]
 8006896:	737b      	strb	r3, [r7, #13]
 8006898:	7cbb      	ldrb	r3, [r7, #18]
 800689a:	73bb      	strb	r3, [r7, #14]
	uint8_t status = HAL_I2C_Master_Transmit(I2C_HANDLE,
 800689c:	f107 020c 	add.w	r2, r7, #12
 80068a0:	230a      	movs	r3, #10
 80068a2:	9300      	str	r3, [sp, #0]
 80068a4:	2303      	movs	r3, #3
 80068a6:	2198      	movs	r1, #152	@ 0x98
 80068a8:	4804      	ldr	r0, [pc, #16]	@ (80068bc <AD5693_Init+0x78>)
 80068aa:	f7fc fa83 	bl	8002db4 <HAL_I2C_Master_Transmit>
 80068ae:	4603      	mov	r3, r0
 80068b0:	747b      	strb	r3, [r7, #17]
					AD5693_ADDRESS, buffer, 3, 10);
	return status;
 80068b2:	7c7b      	ldrb	r3, [r7, #17]
}
 80068b4:	4618      	mov	r0, r3
 80068b6:	3718      	adds	r7, #24
 80068b8:	46bd      	mov	sp, r7
 80068ba:	bd80      	pop	{r7, pc}
 80068bc:	20000238 	.word	0x20000238

080068c0 <AD5693_Set_Voltage_Raw>:
					AD5693_ADDRESS, buffer, 3, 10);
	return status;
}


HAL_StatusTypeDef AD5693_Set_Voltage_Raw(uint16_t voltage){
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b088      	sub	sp, #32
 80068c4:	af02      	add	r7, sp, #8
 80068c6:	4603      	mov	r3, r0
 80068c8:	80fb      	strh	r3, [r7, #6]
	uint16_t data = voltage;
 80068ca:	88fb      	ldrh	r3, [r7, #6]
 80068cc:	82fb      	strh	r3, [r7, #22]

	// Prepare the command byte
    uint8_t command = WRITE_DAC_N_INPUT_REG;
 80068ce:	2330      	movs	r3, #48	@ 0x30
 80068d0:	757b      	strb	r3, [r7, #21]

    // Prepare the high and low data bytes
    uint8_t highByte = (data >> 8) & 0xFF;
 80068d2:	8afb      	ldrh	r3, [r7, #22]
 80068d4:	0a1b      	lsrs	r3, r3, #8
 80068d6:	b29b      	uxth	r3, r3
 80068d8:	753b      	strb	r3, [r7, #20]
    uint8_t lowByte = data & 0xFF;
 80068da:	8afb      	ldrh	r3, [r7, #22]
 80068dc:	74fb      	strb	r3, [r7, #19]

    // Combine the command and data into a single 3-byte buffer
    uint8_t buffer[3] = {command, highByte, lowByte};
 80068de:	7d7b      	ldrb	r3, [r7, #21]
 80068e0:	733b      	strb	r3, [r7, #12]
 80068e2:	7d3b      	ldrb	r3, [r7, #20]
 80068e4:	737b      	strb	r3, [r7, #13]
 80068e6:	7cfb      	ldrb	r3, [r7, #19]
 80068e8:	73bb      	strb	r3, [r7, #14]

    // Write the 3-byte buffer to the I2C device and return the result
    HAL_StatusTypeDef status = HAL_I2C_Master_Transmit(I2C_HANDLE,
 80068ea:	f107 020c 	add.w	r2, r7, #12
 80068ee:	230a      	movs	r3, #10
 80068f0:	9300      	str	r3, [sp, #0]
 80068f2:	2303      	movs	r3, #3
 80068f4:	2198      	movs	r1, #152	@ 0x98
 80068f6:	4805      	ldr	r0, [pc, #20]	@ (800690c <AD5693_Set_Voltage_Raw+0x4c>)
 80068f8:	f7fc fa5c 	bl	8002db4 <HAL_I2C_Master_Transmit>
 80068fc:	4603      	mov	r3, r0
 80068fe:	74bb      	strb	r3, [r7, #18]
					AD5693_ADDRESS, buffer, 3, 10);
	return status;
 8006900:	7cbb      	ldrb	r3, [r7, #18]
}
 8006902:	4618      	mov	r0, r3
 8006904:	3718      	adds	r7, #24
 8006906:	46bd      	mov	sp, r7
 8006908:	bd80      	pop	{r7, pc}
 800690a:	bf00      	nop
 800690c:	20000238 	.word	0x20000238

08006910 <Write_Reg>:
 * @param  reg    The register address to write to.
 * @param  value  The value to write to the register.
 *
 * @retval HAL_StatusTypeDef  Returns HAL_OK on success, or HAL_ERROR if the write operation fails.
 */
static HAL_StatusTypeDef Write_Reg(uint8_t reg, uint8_t value) {
 8006910:	b580      	push	{r7, lr}
 8006912:	b088      	sub	sp, #32
 8006914:	af04      	add	r7, sp, #16
 8006916:	4603      	mov	r3, r0
 8006918:	460a      	mov	r2, r1
 800691a:	71fb      	strb	r3, [r7, #7]
 800691c:	4613      	mov	r3, r2
 800691e:	71bb      	strb	r3, [r7, #6]
	uint8_t buf[1] = {value}, status;
 8006920:	79bb      	ldrb	r3, [r7, #6]
 8006922:	733b      	strb	r3, [r7, #12]

	status = HAL_I2C_Mem_Write(&LTC2959_I2C_PORT, LTC2959_I2C_ADDR, reg, 1, &buf[0], 1, 100);
 8006924:	79fb      	ldrb	r3, [r7, #7]
 8006926:	b29a      	uxth	r2, r3
 8006928:	2364      	movs	r3, #100	@ 0x64
 800692a:	9302      	str	r3, [sp, #8]
 800692c:	2301      	movs	r3, #1
 800692e:	9301      	str	r3, [sp, #4]
 8006930:	f107 030c 	add.w	r3, r7, #12
 8006934:	9300      	str	r3, [sp, #0]
 8006936:	2301      	movs	r3, #1
 8006938:	21c6      	movs	r1, #198	@ 0xc6
 800693a:	4805      	ldr	r0, [pc, #20]	@ (8006950 <Write_Reg+0x40>)
 800693c:	f7fc fb38 	bl	8002fb0 <HAL_I2C_Mem_Write>
 8006940:	4603      	mov	r3, r0
 8006942:	73fb      	strb	r3, [r7, #15]
	return status;
 8006944:	7bfb      	ldrb	r3, [r7, #15]
}
 8006946:	4618      	mov	r0, r3
 8006948:	3710      	adds	r7, #16
 800694a:	46bd      	mov	sp, r7
 800694c:	bd80      	pop	{r7, pc}
 800694e:	bf00      	nop
 8006950:	2000028c 	.word	0x2000028c

08006954 <Read_Reg>:
 *
 * @param  reg  The register address to read from.
 *
 * @retval uint8_t  Returns the value read from the register.
 */
static uint8_t Read_Reg(uint8_t reg){
 8006954:	b580      	push	{r7, lr}
 8006956:	b088      	sub	sp, #32
 8006958:	af04      	add	r7, sp, #16
 800695a:	4603      	mov	r3, r0
 800695c:	71fb      	strb	r3, [r7, #7]
	uint8_t value;
	HAL_I2C_Mem_Read(&LTC2959_I2C_PORT, LTC2959_I2C_ADDR, reg, 1, &value, 1, 100);
 800695e:	79fb      	ldrb	r3, [r7, #7]
 8006960:	b29a      	uxth	r2, r3
 8006962:	2364      	movs	r3, #100	@ 0x64
 8006964:	9302      	str	r3, [sp, #8]
 8006966:	2301      	movs	r3, #1
 8006968:	9301      	str	r3, [sp, #4]
 800696a:	f107 030f 	add.w	r3, r7, #15
 800696e:	9300      	str	r3, [sp, #0]
 8006970:	2301      	movs	r3, #1
 8006972:	21c6      	movs	r1, #198	@ 0xc6
 8006974:	4803      	ldr	r0, [pc, #12]	@ (8006984 <Read_Reg+0x30>)
 8006976:	f7fc fc15 	bl	80031a4 <HAL_I2C_Mem_Read>
	return value;
 800697a:	7bfb      	ldrb	r3, [r7, #15]
}
 800697c:	4618      	mov	r0, r3
 800697e:	3710      	adds	r7, #16
 8006980:	46bd      	mov	sp, r7
 8006982:	bd80      	pop	{r7, pc}
 8006984:	2000028c 	.word	0x2000028c

08006988 <Set_ADC_Mode>:
 * This function writes the specified ADC mode to the ADC control register.
 *
 * @param  mode  This parameter can be a value of @ref ADC_MODE.
 * Specifies the ADC mode to be set.
 */
static HAL_StatusTypeDef Set_ADC_Mode(uint8_t mode){
 8006988:	b580      	push	{r7, lr}
 800698a:	b084      	sub	sp, #16
 800698c:	af00      	add	r7, sp, #0
 800698e:	4603      	mov	r3, r0
 8006990:	71fb      	strb	r3, [r7, #7]
    uint8_t value = Read_Reg(REG_ADC_CONTROL);
 8006992:	2001      	movs	r0, #1
 8006994:	f7ff ffde 	bl	8006954 <Read_Reg>
 8006998:	4603      	mov	r3, r0
 800699a:	73fb      	strb	r3, [r7, #15]
    MODIFY_REG(value, CTRL_ADC_MODE_MASK, mode);
 800699c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80069a0:	f003 031f 	and.w	r3, r3, #31
 80069a4:	b25a      	sxtb	r2, r3
 80069a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80069aa:	4313      	orrs	r3, r2
 80069ac:	b25b      	sxtb	r3, r3
 80069ae:	73fb      	strb	r3, [r7, #15]
    return Write_Reg(REG_ADC_CONTROL, value);
 80069b0:	7bfb      	ldrb	r3, [r7, #15]
 80069b2:	4619      	mov	r1, r3
 80069b4:	2001      	movs	r0, #1
 80069b6:	f7ff ffab 	bl	8006910 <Write_Reg>
 80069ba:	4603      	mov	r3, r0
}
 80069bc:	4618      	mov	r0, r3
 80069be:	3710      	adds	r7, #16
 80069c0:	46bd      	mov	sp, r7
 80069c2:	bd80      	pop	{r7, pc}

080069c4 <Set_GPIO_Configure>:
 * This function configures the GPIO pin to the specified mode.
 *
 * @param  config  This parameter can be a value of @ref GPIO_CONFIG.
 * Specifies the GPIO mode to be set.
 */
static HAL_StatusTypeDef Set_GPIO_Configure(uint8_t config) {
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b084      	sub	sp, #16
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	4603      	mov	r3, r0
 80069cc:	71fb      	strb	r3, [r7, #7]
    uint8_t value = Read_Reg(REG_ADC_CONTROL);
 80069ce:	2001      	movs	r0, #1
 80069d0:	f7ff ffc0 	bl	8006954 <Read_Reg>
 80069d4:	4603      	mov	r3, r0
 80069d6:	73fb      	strb	r3, [r7, #15]
    MODIFY_REG(value, CTRL_GPIO_CONFIG_MASK, config);
 80069d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80069dc:	f023 0318 	bic.w	r3, r3, #24
 80069e0:	b25a      	sxtb	r2, r3
 80069e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80069e6:	4313      	orrs	r3, r2
 80069e8:	b25b      	sxtb	r3, r3
 80069ea:	73fb      	strb	r3, [r7, #15]
    return Write_Reg(REG_ADC_CONTROL, value);
 80069ec:	7bfb      	ldrb	r3, [r7, #15]
 80069ee:	4619      	mov	r1, r3
 80069f0:	2001      	movs	r0, #1
 80069f2:	f7ff ff8d 	bl	8006910 <Write_Reg>
 80069f6:	4603      	mov	r3, r0
}
 80069f8:	4618      	mov	r0, r3
 80069fa:	3710      	adds	r7, #16
 80069fc:	46bd      	mov	sp, r7
 80069fe:	bd80      	pop	{r7, pc}

08006a00 <Set_Voltage_Input>:
 * VDD and SENSEN based on the input parameter.
 *
 * @param  input  This parameter can be a value of @ref VOLTAGE_INPUT.
 * Specifies the voltage input pin (VDD or SENSEN).
 */
static HAL_StatusTypeDef Set_Voltage_Input(uint8_t input) {
 8006a00:	b580      	push	{r7, lr}
 8006a02:	b084      	sub	sp, #16
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	4603      	mov	r3, r0
 8006a08:	71fb      	strb	r3, [r7, #7]
    uint8_t value = Read_Reg(REG_ADC_CONTROL);
 8006a0a:	2001      	movs	r0, #1
 8006a0c:	f7ff ffa2 	bl	8006954 <Read_Reg>
 8006a10:	4603      	mov	r3, r0
 8006a12:	73fb      	strb	r3, [r7, #15]
    MODIFY_REG(value, CTRL_CONFIG_VOLTAGE_INPUT_MASK, input);
 8006a14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006a18:	f023 0304 	bic.w	r3, r3, #4
 8006a1c:	b25a      	sxtb	r2, r3
 8006a1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a22:	4313      	orrs	r3, r2
 8006a24:	b25b      	sxtb	r3, r3
 8006a26:	73fb      	strb	r3, [r7, #15]
    return Write_Reg(REG_ADC_CONTROL, value);
 8006a28:	7bfb      	ldrb	r3, [r7, #15]
 8006a2a:	4619      	mov	r1, r3
 8006a2c:	2001      	movs	r0, #1
 8006a2e:	f7ff ff6f 	bl	8006910 <Write_Reg>
 8006a32:	4603      	mov	r3, r0
}
 8006a34:	4618      	mov	r0, r3
 8006a36:	3710      	adds	r7, #16
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	bd80      	pop	{r7, pc}

08006a3c <Set_Coulomb_Counter_Deadband>:
 * This function sets the deadband for the Coulomb Counter.
 *
 * @param  deadband  This parameter can be a value of @ref COULOMB_COUNTER_DEADBAND.
 * Specifies the deadband value for the Coulomb Counter.
 */
static HAL_StatusTypeDef Set_Coulomb_Counter_Deadband(uint8_t deadband){
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b084      	sub	sp, #16
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	4603      	mov	r3, r0
 8006a44:	71fb      	strb	r3, [r7, #7]
	uint8_t value = Read_Reg(REG_COULOMB_COUNTER_CONTROL);
 8006a46:	2002      	movs	r0, #2
 8006a48:	f7ff ff84 	bl	8006954 <Read_Reg>
 8006a4c:	4603      	mov	r3, r0
 8006a4e:	73fb      	strb	r3, [r7, #15]
    // Set the deadband
	MODIFY_REG(value, CC_CONFIG_DEADBAND_MASK, deadband);
 8006a50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006a54:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006a58:	b25a      	sxtb	r2, r3
 8006a5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a5e:	4313      	orrs	r3, r2
 8006a60:	b25b      	sxtb	r3, r3
 8006a62:	73fb      	strb	r3, [r7, #15]
	// Ensure reserved bits are set to their default values
	MODIFY_REG(value, CC_CONFIG_RESERVED_54_MASK, CC_CONFIG_RESERVED_54_DEFAULT);
 8006a64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006a68:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8006a6c:	b25b      	sxtb	r3, r3
 8006a6e:	f043 0310 	orr.w	r3, r3, #16
 8006a72:	b25b      	sxtb	r3, r3
 8006a74:	73fb      	strb	r3, [r7, #15]
	MODIFY_REG(value, CC_CONFIG_RESERVED_20_MASK, CC_CONFIG_RESERVED_20_DEFAULT);
 8006a76:	7bfb      	ldrb	r3, [r7, #15]
 8006a78:	f023 0307 	bic.w	r3, r3, #7
 8006a7c:	73fb      	strb	r3, [r7, #15]
	return Write_Reg(REG_COULOMB_COUNTER_CONTROL, value);
 8006a7e:	7bfb      	ldrb	r3, [r7, #15]
 8006a80:	4619      	mov	r1, r3
 8006a82:	2002      	movs	r0, #2
 8006a84:	f7ff ff44 	bl	8006910 <Write_Reg>
 8006a88:	4603      	mov	r3, r0
}
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	3710      	adds	r7, #16
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	bd80      	pop	{r7, pc}

08006a92 <LTC2959_Init>:
 * structure provided.
 *
 * @param  config_t  Pointer to a structure of type @ref LTC2959_Config_t containing
 * the initialization parameters for the LTC2959.
 */
void LTC2959_Init(LTC2959_Config_t *config_t){
 8006a92:	b580      	push	{r7, lr}
 8006a94:	b082      	sub	sp, #8
 8006a96:	af00      	add	r7, sp, #0
 8006a98:	6078      	str	r0, [r7, #4]
#ifndef _DEBUG
	Set_ADC_Mode(config_t->ADC_mode);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	781b      	ldrb	r3, [r3, #0]
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	f7ff ff72 	bl	8006988 <Set_ADC_Mode>
	HAL_Delay(10);
 8006aa4:	200a      	movs	r0, #10
 8006aa6:	f7fa fe63 	bl	8001770 <HAL_Delay>
	Set_GPIO_Configure(config_t->GPIO_config);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	785b      	ldrb	r3, [r3, #1]
 8006aae:	4618      	mov	r0, r3
 8006ab0:	f7ff ff88 	bl	80069c4 <Set_GPIO_Configure>
	HAL_Delay(10);
 8006ab4:	200a      	movs	r0, #10
 8006ab6:	f7fa fe5b 	bl	8001770 <HAL_Delay>
	Set_Voltage_Input(config_t->voltage_input);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	789b      	ldrb	r3, [r3, #2]
 8006abe:	4618      	mov	r0, r3
 8006ac0:	f7ff ff9e 	bl	8006a00 <Set_Voltage_Input>
	HAL_Delay(10);
 8006ac4:	200a      	movs	r0, #10
 8006ac6:	f7fa fe53 	bl	8001770 <HAL_Delay>
	Set_Coulomb_Counter_Deadband(config_t->CC_deadband);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	78db      	ldrb	r3, [r3, #3]
 8006ace:	4618      	mov	r0, r3
 8006ad0:	f7ff ffb4 	bl	8006a3c <Set_Coulomb_Counter_Deadband>
	HAL_Delay(10);
 8006ad4:	200a      	movs	r0, #10
 8006ad6:	f7fa fe4b 	bl	8001770 <HAL_Delay>
	status = Set_Coulomb_Counter_Deadband(config_t->CC_deadband);
	printf("Set_Coulomb_Counter_Deadband = %d\n\r", status);
	HAL_Delay(10);
#endif

}
 8006ada:	bf00      	nop
 8006adc:	3708      	adds	r7, #8
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	bd80      	pop	{r7, pc}
 8006ae2:	0000      	movs	r0, r0
 8006ae4:	0000      	movs	r0, r0
	...

08006ae8 <LTC2959_Get_Acc_Charge>:
 * This function reads the accumulated charge register of the LTC2959 and
 * returns the total accumulated charge in mAh (milli-Amp Hour).
 *
 * @return Total accumulated charge in micro-Amp-hour (uAh).
 */
uint32_t LTC2959_Get_Acc_Charge(){
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b084      	sub	sp, #16
 8006aec:	af00      	add	r7, sp, #0
	uint8_t buf[4];
	uint32_t charge_raw;
//	float total_charge_mAh;

	// Read the MSB and LSB of the voltage register
	buf[0] = Read_Reg(REG_ACCUMULATED_CHARGE_MSB);
 8006aee:	2003      	movs	r0, #3
 8006af0:	f7ff ff30 	bl	8006954 <Read_Reg>
 8006af4:	4603      	mov	r3, r0
 8006af6:	713b      	strb	r3, [r7, #4]
	buf[1] = Read_Reg(REG_ACCUMULATED_CHARGE_23_16);
 8006af8:	2004      	movs	r0, #4
 8006afa:	f7ff ff2b 	bl	8006954 <Read_Reg>
 8006afe:	4603      	mov	r3, r0
 8006b00:	717b      	strb	r3, [r7, #5]
	buf[2] = Read_Reg(REG_ACCUMULATED_CHARGE_15_8);
 8006b02:	2005      	movs	r0, #5
 8006b04:	f7ff ff26 	bl	8006954 <Read_Reg>
 8006b08:	4603      	mov	r3, r0
 8006b0a:	71bb      	strb	r3, [r7, #6]
	buf[3] = Read_Reg(REG_ACCUMULATED_CHARGE_LSB);
 8006b0c:	2006      	movs	r0, #6
 8006b0e:	f7ff ff21 	bl	8006954 <Read_Reg>
 8006b12:	4603      	mov	r3, r0
 8006b14:	71fb      	strb	r3, [r7, #7]

	charge_raw = 	((uint32_t)buf[0] << 24) |
 8006b16:	793b      	ldrb	r3, [r7, #4]
 8006b18:	061a      	lsls	r2, r3, #24
					((uint32_t)buf[1] << 16) |
 8006b1a:	797b      	ldrb	r3, [r7, #5]
 8006b1c:	041b      	lsls	r3, r3, #16
	charge_raw = 	((uint32_t)buf[0] << 24) |
 8006b1e:	431a      	orrs	r2, r3
					((uint32_t)buf[2] << 8)	 |
 8006b20:	79bb      	ldrb	r3, [r7, #6]
 8006b22:	021b      	lsls	r3, r3, #8
					((uint32_t)buf[1] << 16) |
 8006b24:	4313      	orrs	r3, r2
					(uint32_t)buf[3];
 8006b26:	79fa      	ldrb	r2, [r7, #7]
	charge_raw = 	((uint32_t)buf[0] << 24) |
 8006b28:	4313      	orrs	r3, r2
 8006b2a:	60fb      	str	r3, [r7, #12]

	uint32_t total_charge_mAh = ((ACR_MID_SCALE - charge_raw) * QLSB) / 1000;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	f1c3 4300 	rsb	r3, r3, #2147483648	@ 0x80000000
 8006b32:	4618      	mov	r0, r3
 8006b34:	f7f9 fc56 	bl	80003e4 <__aeabi_ui2d>
 8006b38:	a30d      	add	r3, pc, #52	@ (adr r3, 8006b70 <LTC2959_Get_Acc_Charge+0x88>)
 8006b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b3e:	f7f9 fccb 	bl	80004d8 <__aeabi_dmul>
 8006b42:	4602      	mov	r2, r0
 8006b44:	460b      	mov	r3, r1
 8006b46:	4610      	mov	r0, r2
 8006b48:	4619      	mov	r1, r3
 8006b4a:	f04f 0200 	mov.w	r2, #0
 8006b4e:	4b0a      	ldr	r3, [pc, #40]	@ (8006b78 <LTC2959_Get_Acc_Charge+0x90>)
 8006b50:	f7f9 fdec 	bl	800072c <__aeabi_ddiv>
 8006b54:	4602      	mov	r2, r0
 8006b56:	460b      	mov	r3, r1
 8006b58:	4610      	mov	r0, r2
 8006b5a:	4619      	mov	r1, r3
 8006b5c:	f7f9 ff94 	bl	8000a88 <__aeabi_d2uiz>
 8006b60:	4603      	mov	r3, r0
 8006b62:	60bb      	str	r3, [r7, #8]

	return total_charge_mAh;
 8006b64:	68bb      	ldr	r3, [r7, #8]
}
 8006b66:	4618      	mov	r0, r3
 8006b68:	3710      	adds	r7, #16
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	bd80      	pop	{r7, pc}
 8006b6e:	bf00      	nop
 8006b70:	9f900000 	.word	0x9f900000
 8006b74:	40c159aa 	.word	0x40c159aa
 8006b78:	408f4000 	.word	0x408f4000

08006b7c <LTC2959_Get_Voltage>:
 *
 * This function reads the voltage register and returns the voltage value in volts.
 * VDD or SENSEN (depending on the ADC control settings).
 * @return Voltage in milli-volts.
 */
uint32_t LTC2959_Get_Voltage(){
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b084      	sub	sp, #16
 8006b80:	af00      	add	r7, sp, #0
	uint8_t buf[2];
	uint16_t value;
	uint32_t voltage;

	// Read the MSB and LSB of the voltage register
	buf[0] = Read_Reg(REG_VOLTAGE_MSB);
 8006b82:	200f      	movs	r0, #15
 8006b84:	f7ff fee6 	bl	8006954 <Read_Reg>
 8006b88:	4603      	mov	r3, r0
 8006b8a:	713b      	strb	r3, [r7, #4]
	buf[1] = Read_Reg(REG_VOLTAGE_LSB);
 8006b8c:	2010      	movs	r0, #16
 8006b8e:	f7ff fee1 	bl	8006954 <Read_Reg>
 8006b92:	4603      	mov	r3, r0
 8006b94:	717b      	strb	r3, [r7, #5]
	value = (buf[0] << 8) | buf[1];
 8006b96:	793b      	ldrb	r3, [r7, #4]
 8006b98:	021b      	lsls	r3, r3, #8
 8006b9a:	b21a      	sxth	r2, r3
 8006b9c:	797b      	ldrb	r3, [r7, #5]
 8006b9e:	b21b      	sxth	r3, r3
 8006ba0:	4313      	orrs	r3, r2
 8006ba2:	b21b      	sxth	r3, r3
 8006ba4:	81fb      	strh	r3, [r7, #14]
//	voltage = 62.6 * ((float)value / 65536.0);
	voltage = value * VOLTAGE_MULTIPLIER / 1000;
 8006ba6:	89fb      	ldrh	r3, [r7, #14]
 8006ba8:	f44f 726f 	mov.w	r2, #956	@ 0x3bc
 8006bac:	fb02 f303 	mul.w	r3, r2, r3
 8006bb0:	4a05      	ldr	r2, [pc, #20]	@ (8006bc8 <LTC2959_Get_Voltage+0x4c>)
 8006bb2:	fb82 1203 	smull	r1, r2, r2, r3
 8006bb6:	1192      	asrs	r2, r2, #6
 8006bb8:	17db      	asrs	r3, r3, #31
 8006bba:	1ad3      	subs	r3, r2, r3
 8006bbc:	60bb      	str	r3, [r7, #8]
	return voltage;
 8006bbe:	68bb      	ldr	r3, [r7, #8]
}
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	3710      	adds	r7, #16
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	bd80      	pop	{r7, pc}
 8006bc8:	10624dd3 	.word	0x10624dd3
 8006bcc:	00000000 	.word	0x00000000

08006bd0 <LTC2959_Get_Current>:
 * This function reads the current register and calculates the
 * current using the sense resistor value.
 *
 * @return Current in milli-amperes.
 */
int32_t LTC2959_Get_Current(){
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	b084      	sub	sp, #16
 8006bd4:	af00      	add	r7, sp, #0
	uint8_t buf[2];
	int16_t value;

	// Read the MSB and LSB of the current register
	buf[0] = Read_Reg(REG_CURRENT_MSB);
 8006bd6:	2019      	movs	r0, #25
 8006bd8:	f7ff febc 	bl	8006954 <Read_Reg>
 8006bdc:	4603      	mov	r3, r0
 8006bde:	713b      	strb	r3, [r7, #4]
	buf[1] = Read_Reg(REG_CURRENT_LSB);
 8006be0:	201a      	movs	r0, #26
 8006be2:	f7ff feb7 	bl	8006954 <Read_Reg>
 8006be6:	4603      	mov	r3, r0
 8006be8:	717b      	strb	r3, [r7, #5]

	// Combine MSB and LSB into 16-bit signed value
	value = (int16_t)((buf[0] << 8) | buf[1]);
 8006bea:	793b      	ldrb	r3, [r7, #4]
 8006bec:	021b      	lsls	r3, r3, #8
 8006bee:	b21a      	sxth	r2, r3
 8006bf0:	797b      	ldrb	r3, [r7, #5]
 8006bf2:	b21b      	sxth	r3, r3
 8006bf4:	4313      	orrs	r3, r2
 8006bf6:	81fb      	strh	r3, [r7, #14]

	int32_t current_mA = value * CURRENT_MULTIPLIER / 1000;
 8006bf8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	f7f9 fc01 	bl	8000404 <__aeabi_i2d>
 8006c02:	a30f      	add	r3, pc, #60	@ (adr r3, 8006c40 <LTC2959_Get_Current+0x70>)
 8006c04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c08:	f7f9 fc66 	bl	80004d8 <__aeabi_dmul>
 8006c0c:	4602      	mov	r2, r0
 8006c0e:	460b      	mov	r3, r1
 8006c10:	4610      	mov	r0, r2
 8006c12:	4619      	mov	r1, r3
 8006c14:	f04f 0200 	mov.w	r2, #0
 8006c18:	4b0b      	ldr	r3, [pc, #44]	@ (8006c48 <LTC2959_Get_Current+0x78>)
 8006c1a:	f7f9 fd87 	bl	800072c <__aeabi_ddiv>
 8006c1e:	4602      	mov	r2, r0
 8006c20:	460b      	mov	r3, r1
 8006c22:	4610      	mov	r0, r2
 8006c24:	4619      	mov	r1, r3
 8006c26:	f7f9 ff07 	bl	8000a38 <__aeabi_d2iz>
 8006c2a:	4603      	mov	r3, r0
 8006c2c:	60bb      	str	r3, [r7, #8]

	return current_mA + 5;
 8006c2e:	68bb      	ldr	r3, [r7, #8]
 8006c30:	3305      	adds	r3, #5
}
 8006c32:	4618      	mov	r0, r3
 8006c34:	3710      	adds	r7, #16
 8006c36:	46bd      	mov	sp, r7
 8006c38:	bd80      	pop	{r7, pc}
 8006c3a:	bf00      	nop
 8006c3c:	f3af 8000 	nop.w
 8006c40:	00000000 	.word	0x00000000
 8006c44:	408efe92 	.word	0x408efe92
 8006c48:	408f4000 	.word	0x408f4000

08006c4c <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8006c4c:	b480      	push	{r7}
 8006c4e:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8006c50:	bf00      	nop
 8006c52:	46bd      	mov	sp, r7
 8006c54:	bc80      	pop	{r7}
 8006c56:	4770      	bx	lr

08006c58 <ssd1306_WriteCommand>:
/*
 * DMA settings
 * ADD I2Cx_TX in normal mode. Byte | Byte
 * In NVIC Settings, Enable "I2Cx event interrupt"
 */
void ssd1306_WriteCommand(uint8_t byte) {
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b086      	sub	sp, #24
 8006c5c:	af04      	add	r7, sp, #16
 8006c5e:	4603      	mov	r3, r0
 8006c60:	71fb      	strb	r3, [r7, #7]
#ifdef USE_DMA
	while(HAL_I2C_GetState(&SSD1306_I2C_PORT) != HAL_I2C_STATE_READY);
	HAL_I2C_Mem_Write_DMA(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1);
#else
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8006c62:	f04f 33ff 	mov.w	r3, #4294967295
 8006c66:	9302      	str	r3, [sp, #8]
 8006c68:	2301      	movs	r3, #1
 8006c6a:	9301      	str	r3, [sp, #4]
 8006c6c:	1dfb      	adds	r3, r7, #7
 8006c6e:	9300      	str	r3, [sp, #0]
 8006c70:	2301      	movs	r3, #1
 8006c72:	2200      	movs	r2, #0
 8006c74:	2178      	movs	r1, #120	@ 0x78
 8006c76:	4803      	ldr	r0, [pc, #12]	@ (8006c84 <ssd1306_WriteCommand+0x2c>)
 8006c78:	f7fc f99a 	bl	8002fb0 <HAL_I2C_Mem_Write>
#endif
}
 8006c7c:	bf00      	nop
 8006c7e:	3708      	adds	r7, #8
 8006c80:	46bd      	mov	sp, r7
 8006c82:	bd80      	pop	{r7, pc}
 8006c84:	20000238 	.word	0x20000238

08006c88 <ssd1306_WriteData>:


void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	b086      	sub	sp, #24
 8006c8c:	af04      	add	r7, sp, #16
 8006c8e:	6078      	str	r0, [r7, #4]
 8006c90:	6039      	str	r1, [r7, #0]
#ifdef USE_DMA
	while(HAL_I2C_GetState(&SSD1306_I2C_PORT) != HAL_I2C_STATE_READY);
	HAL_I2C_Mem_Write_DMA(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size);
#else
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	b29b      	uxth	r3, r3
 8006c96:	f04f 32ff 	mov.w	r2, #4294967295
 8006c9a:	9202      	str	r2, [sp, #8]
 8006c9c:	9301      	str	r3, [sp, #4]
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	9300      	str	r3, [sp, #0]
 8006ca2:	2301      	movs	r3, #1
 8006ca4:	2240      	movs	r2, #64	@ 0x40
 8006ca6:	2178      	movs	r1, #120	@ 0x78
 8006ca8:	4803      	ldr	r0, [pc, #12]	@ (8006cb8 <ssd1306_WriteData+0x30>)
 8006caa:	f7fc f981 	bl	8002fb0 <HAL_I2C_Mem_Write>
#endif
}
 8006cae:	bf00      	nop
 8006cb0:	3708      	adds	r7, #8
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	bd80      	pop	{r7, pc}
 8006cb6:	bf00      	nop
 8006cb8:	20000238 	.word	0x20000238

08006cbc <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8006cc0:	f7ff ffc4 	bl	8006c4c <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8006cc4:	2064      	movs	r0, #100	@ 0x64
 8006cc6:	f7fa fd53 	bl	8001770 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8006cca:	2000      	movs	r0, #0
 8006ccc:	f000 f9d6 	bl	800707c <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8006cd0:	2020      	movs	r0, #32
 8006cd2:	f7ff ffc1 	bl	8006c58 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8006cd6:	2000      	movs	r0, #0
 8006cd8:	f7ff ffbe 	bl	8006c58 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8006cdc:	20b0      	movs	r0, #176	@ 0xb0
 8006cde:	f7ff ffbb 	bl	8006c58 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8006ce2:	20c8      	movs	r0, #200	@ 0xc8
 8006ce4:	f7ff ffb8 	bl	8006c58 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8006ce8:	2000      	movs	r0, #0
 8006cea:	f7ff ffb5 	bl	8006c58 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8006cee:	2010      	movs	r0, #16
 8006cf0:	f7ff ffb2 	bl	8006c58 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8006cf4:	2040      	movs	r0, #64	@ 0x40
 8006cf6:	f7ff ffaf 	bl	8006c58 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8006cfa:	20ff      	movs	r0, #255	@ 0xff
 8006cfc:	f000 f9aa 	bl	8007054 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8006d00:	20a1      	movs	r0, #161	@ 0xa1
 8006d02:	f7ff ffa9 	bl	8006c58 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8006d06:	20a6      	movs	r0, #166	@ 0xa6
 8006d08:	f7ff ffa6 	bl	8006c58 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8006d0c:	20a8      	movs	r0, #168	@ 0xa8
 8006d0e:	f7ff ffa3 	bl	8006c58 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8006d12:	203f      	movs	r0, #63	@ 0x3f
 8006d14:	f7ff ffa0 	bl	8006c58 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8006d18:	20a4      	movs	r0, #164	@ 0xa4
 8006d1a:	f7ff ff9d 	bl	8006c58 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8006d1e:	20d3      	movs	r0, #211	@ 0xd3
 8006d20:	f7ff ff9a 	bl	8006c58 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8006d24:	2000      	movs	r0, #0
 8006d26:	f7ff ff97 	bl	8006c58 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8006d2a:	20d5      	movs	r0, #213	@ 0xd5
 8006d2c:	f7ff ff94 	bl	8006c58 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8006d30:	20f0      	movs	r0, #240	@ 0xf0
 8006d32:	f7ff ff91 	bl	8006c58 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8006d36:	20d9      	movs	r0, #217	@ 0xd9
 8006d38:	f7ff ff8e 	bl	8006c58 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8006d3c:	2022      	movs	r0, #34	@ 0x22
 8006d3e:	f7ff ff8b 	bl	8006c58 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8006d42:	20da      	movs	r0, #218	@ 0xda
 8006d44:	f7ff ff88 	bl	8006c58 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8006d48:	2012      	movs	r0, #18
 8006d4a:	f7ff ff85 	bl	8006c58 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8006d4e:	20db      	movs	r0, #219	@ 0xdb
 8006d50:	f7ff ff82 	bl	8006c58 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8006d54:	2020      	movs	r0, #32
 8006d56:	f7ff ff7f 	bl	8006c58 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8006d5a:	208d      	movs	r0, #141	@ 0x8d
 8006d5c:	f7ff ff7c 	bl	8006c58 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8006d60:	2014      	movs	r0, #20
 8006d62:	f7ff ff79 	bl	8006c58 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8006d66:	2001      	movs	r0, #1
 8006d68:	f000 f988 	bl	800707c <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8006d6c:	2000      	movs	r0, #0
 8006d6e:	f000 f80f 	bl	8006d90 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8006d72:	f000 f82f 	bl	8006dd4 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8006d76:	4b05      	ldr	r3, [pc, #20]	@ (8006d8c <ssd1306_Init+0xd0>)
 8006d78:	2200      	movs	r2, #0
 8006d7a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8006d7c:	4b03      	ldr	r3, [pc, #12]	@ (8006d8c <ssd1306_Init+0xd0>)
 8006d7e:	2200      	movs	r2, #0
 8006d80:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8006d82:	4b02      	ldr	r3, [pc, #8]	@ (8006d8c <ssd1306_Init+0xd0>)
 8006d84:	2201      	movs	r2, #1
 8006d86:	711a      	strb	r2, [r3, #4]
}
 8006d88:	bf00      	nop
 8006d8a:	bd80      	pop	{r7, pc}
 8006d8c:	2000079c 	.word	0x2000079c

08006d90 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8006d90:	b480      	push	{r7}
 8006d92:	b085      	sub	sp, #20
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	4603      	mov	r3, r0
 8006d98:	71fb      	strb	r3, [r7, #7]
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	60fb      	str	r3, [r7, #12]
 8006d9e:	e00d      	b.n	8006dbc <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8006da0:	79fb      	ldrb	r3, [r7, #7]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d101      	bne.n	8006daa <ssd1306_Fill+0x1a>
 8006da6:	2100      	movs	r1, #0
 8006da8:	e000      	b.n	8006dac <ssd1306_Fill+0x1c>
 8006daa:	21ff      	movs	r1, #255	@ 0xff
 8006dac:	4a08      	ldr	r2, [pc, #32]	@ (8006dd0 <ssd1306_Fill+0x40>)
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	4413      	add	r3, r2
 8006db2:	460a      	mov	r2, r1
 8006db4:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	3301      	adds	r3, #1
 8006dba:	60fb      	str	r3, [r7, #12]
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006dc2:	d3ed      	bcc.n	8006da0 <ssd1306_Fill+0x10>
    }
}
 8006dc4:	bf00      	nop
 8006dc6:	bf00      	nop
 8006dc8:	3714      	adds	r7, #20
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	bc80      	pop	{r7}
 8006dce:	4770      	bx	lr
 8006dd0:	2000039c 	.word	0x2000039c

08006dd4 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b082      	sub	sp, #8
 8006dd8:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8006dda:	2300      	movs	r3, #0
 8006ddc:	71fb      	strb	r3, [r7, #7]
 8006dde:	e016      	b.n	8006e0e <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8006de0:	79fb      	ldrb	r3, [r7, #7]
 8006de2:	3b50      	subs	r3, #80	@ 0x50
 8006de4:	b2db      	uxtb	r3, r3
 8006de6:	4618      	mov	r0, r3
 8006de8:	f7ff ff36 	bl	8006c58 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8006dec:	2001      	movs	r0, #1
 8006dee:	f7ff ff33 	bl	8006c58 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8006df2:	2010      	movs	r0, #16
 8006df4:	f7ff ff30 	bl	8006c58 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8006df8:	79fb      	ldrb	r3, [r7, #7]
 8006dfa:	01db      	lsls	r3, r3, #7
 8006dfc:	4a08      	ldr	r2, [pc, #32]	@ (8006e20 <ssd1306_UpdateScreen+0x4c>)
 8006dfe:	4413      	add	r3, r2
 8006e00:	2180      	movs	r1, #128	@ 0x80
 8006e02:	4618      	mov	r0, r3
 8006e04:	f7ff ff40 	bl	8006c88 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8006e08:	79fb      	ldrb	r3, [r7, #7]
 8006e0a:	3301      	adds	r3, #1
 8006e0c:	71fb      	strb	r3, [r7, #7]
 8006e0e:	79fb      	ldrb	r3, [r7, #7]
 8006e10:	2b07      	cmp	r3, #7
 8006e12:	d9e5      	bls.n	8006de0 <ssd1306_UpdateScreen+0xc>
    }
}
 8006e14:	bf00      	nop
 8006e16:	bf00      	nop
 8006e18:	3708      	adds	r7, #8
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	bd80      	pop	{r7, pc}
 8006e1e:	bf00      	nop
 8006e20:	2000039c 	.word	0x2000039c

08006e24 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8006e24:	b480      	push	{r7}
 8006e26:	b083      	sub	sp, #12
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	4603      	mov	r3, r0
 8006e2c:	71fb      	strb	r3, [r7, #7]
 8006e2e:	460b      	mov	r3, r1
 8006e30:	71bb      	strb	r3, [r7, #6]
 8006e32:	4613      	mov	r3, r2
 8006e34:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8006e36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	db3d      	blt.n	8006eba <ssd1306_DrawPixel+0x96>
 8006e3e:	79bb      	ldrb	r3, [r7, #6]
 8006e40:	2b3f      	cmp	r3, #63	@ 0x3f
 8006e42:	d83a      	bhi.n	8006eba <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8006e44:	797b      	ldrb	r3, [r7, #5]
 8006e46:	2b01      	cmp	r3, #1
 8006e48:	d11a      	bne.n	8006e80 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8006e4a:	79fa      	ldrb	r2, [r7, #7]
 8006e4c:	79bb      	ldrb	r3, [r7, #6]
 8006e4e:	08db      	lsrs	r3, r3, #3
 8006e50:	b2d8      	uxtb	r0, r3
 8006e52:	4603      	mov	r3, r0
 8006e54:	01db      	lsls	r3, r3, #7
 8006e56:	4413      	add	r3, r2
 8006e58:	4a1a      	ldr	r2, [pc, #104]	@ (8006ec4 <ssd1306_DrawPixel+0xa0>)
 8006e5a:	5cd3      	ldrb	r3, [r2, r3]
 8006e5c:	b25a      	sxtb	r2, r3
 8006e5e:	79bb      	ldrb	r3, [r7, #6]
 8006e60:	f003 0307 	and.w	r3, r3, #7
 8006e64:	2101      	movs	r1, #1
 8006e66:	fa01 f303 	lsl.w	r3, r1, r3
 8006e6a:	b25b      	sxtb	r3, r3
 8006e6c:	4313      	orrs	r3, r2
 8006e6e:	b259      	sxtb	r1, r3
 8006e70:	79fa      	ldrb	r2, [r7, #7]
 8006e72:	4603      	mov	r3, r0
 8006e74:	01db      	lsls	r3, r3, #7
 8006e76:	4413      	add	r3, r2
 8006e78:	b2c9      	uxtb	r1, r1
 8006e7a:	4a12      	ldr	r2, [pc, #72]	@ (8006ec4 <ssd1306_DrawPixel+0xa0>)
 8006e7c:	54d1      	strb	r1, [r2, r3]
 8006e7e:	e01d      	b.n	8006ebc <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8006e80:	79fa      	ldrb	r2, [r7, #7]
 8006e82:	79bb      	ldrb	r3, [r7, #6]
 8006e84:	08db      	lsrs	r3, r3, #3
 8006e86:	b2d8      	uxtb	r0, r3
 8006e88:	4603      	mov	r3, r0
 8006e8a:	01db      	lsls	r3, r3, #7
 8006e8c:	4413      	add	r3, r2
 8006e8e:	4a0d      	ldr	r2, [pc, #52]	@ (8006ec4 <ssd1306_DrawPixel+0xa0>)
 8006e90:	5cd3      	ldrb	r3, [r2, r3]
 8006e92:	b25a      	sxtb	r2, r3
 8006e94:	79bb      	ldrb	r3, [r7, #6]
 8006e96:	f003 0307 	and.w	r3, r3, #7
 8006e9a:	2101      	movs	r1, #1
 8006e9c:	fa01 f303 	lsl.w	r3, r1, r3
 8006ea0:	b25b      	sxtb	r3, r3
 8006ea2:	43db      	mvns	r3, r3
 8006ea4:	b25b      	sxtb	r3, r3
 8006ea6:	4013      	ands	r3, r2
 8006ea8:	b259      	sxtb	r1, r3
 8006eaa:	79fa      	ldrb	r2, [r7, #7]
 8006eac:	4603      	mov	r3, r0
 8006eae:	01db      	lsls	r3, r3, #7
 8006eb0:	4413      	add	r3, r2
 8006eb2:	b2c9      	uxtb	r1, r1
 8006eb4:	4a03      	ldr	r2, [pc, #12]	@ (8006ec4 <ssd1306_DrawPixel+0xa0>)
 8006eb6:	54d1      	strb	r1, [r2, r3]
 8006eb8:	e000      	b.n	8006ebc <ssd1306_DrawPixel+0x98>
        return;
 8006eba:	bf00      	nop
    }
}
 8006ebc:	370c      	adds	r7, #12
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	bc80      	pop	{r7}
 8006ec2:	4770      	bx	lr
 8006ec4:	2000039c 	.word	0x2000039c

08006ec8 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8006ec8:	b590      	push	{r4, r7, lr}
 8006eca:	b089      	sub	sp, #36	@ 0x24
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	4604      	mov	r4, r0
 8006ed0:	1d38      	adds	r0, r7, #4
 8006ed2:	e880 0006 	stmia.w	r0, {r1, r2}
 8006ed6:	461a      	mov	r2, r3
 8006ed8:	4623      	mov	r3, r4
 8006eda:	73fb      	strb	r3, [r7, #15]
 8006edc:	4613      	mov	r3, r2
 8006ede:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8006ee0:	7bfb      	ldrb	r3, [r7, #15]
 8006ee2:	2b1f      	cmp	r3, #31
 8006ee4:	d902      	bls.n	8006eec <ssd1306_WriteChar+0x24>
 8006ee6:	7bfb      	ldrb	r3, [r7, #15]
 8006ee8:	2b7e      	cmp	r3, #126	@ 0x7e
 8006eea:	d901      	bls.n	8006ef0 <ssd1306_WriteChar+0x28>
        return 0;
 8006eec:	2300      	movs	r3, #0
 8006eee:	e06c      	b.n	8006fca <ssd1306_WriteChar+0x102>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8006ef0:	4b38      	ldr	r3, [pc, #224]	@ (8006fd4 <ssd1306_WriteChar+0x10c>)
 8006ef2:	881b      	ldrh	r3, [r3, #0]
 8006ef4:	461a      	mov	r2, r3
 8006ef6:	793b      	ldrb	r3, [r7, #4]
 8006ef8:	4413      	add	r3, r2
 8006efa:	2b80      	cmp	r3, #128	@ 0x80
 8006efc:	dc06      	bgt.n	8006f0c <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8006efe:	4b35      	ldr	r3, [pc, #212]	@ (8006fd4 <ssd1306_WriteChar+0x10c>)
 8006f00:	885b      	ldrh	r3, [r3, #2]
 8006f02:	461a      	mov	r2, r3
 8006f04:	797b      	ldrb	r3, [r7, #5]
 8006f06:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8006f08:	2b40      	cmp	r3, #64	@ 0x40
 8006f0a:	dd01      	ble.n	8006f10 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	e05c      	b.n	8006fca <ssd1306_WriteChar+0x102>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8006f10:	2300      	movs	r3, #0
 8006f12:	61fb      	str	r3, [r7, #28]
 8006f14:	e04c      	b.n	8006fb0 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8006f16:	68ba      	ldr	r2, [r7, #8]
 8006f18:	7bfb      	ldrb	r3, [r7, #15]
 8006f1a:	3b20      	subs	r3, #32
 8006f1c:	7979      	ldrb	r1, [r7, #5]
 8006f1e:	fb01 f303 	mul.w	r3, r1, r3
 8006f22:	4619      	mov	r1, r3
 8006f24:	69fb      	ldr	r3, [r7, #28]
 8006f26:	440b      	add	r3, r1
 8006f28:	005b      	lsls	r3, r3, #1
 8006f2a:	4413      	add	r3, r2
 8006f2c:	881b      	ldrh	r3, [r3, #0]
 8006f2e:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8006f30:	2300      	movs	r3, #0
 8006f32:	61bb      	str	r3, [r7, #24]
 8006f34:	e034      	b.n	8006fa0 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8006f36:	697a      	ldr	r2, [r7, #20]
 8006f38:	69bb      	ldr	r3, [r7, #24]
 8006f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8006f3e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d012      	beq.n	8006f6c <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8006f46:	4b23      	ldr	r3, [pc, #140]	@ (8006fd4 <ssd1306_WriteChar+0x10c>)
 8006f48:	881b      	ldrh	r3, [r3, #0]
 8006f4a:	b2da      	uxtb	r2, r3
 8006f4c:	69bb      	ldr	r3, [r7, #24]
 8006f4e:	b2db      	uxtb	r3, r3
 8006f50:	4413      	add	r3, r2
 8006f52:	b2d8      	uxtb	r0, r3
 8006f54:	4b1f      	ldr	r3, [pc, #124]	@ (8006fd4 <ssd1306_WriteChar+0x10c>)
 8006f56:	885b      	ldrh	r3, [r3, #2]
 8006f58:	b2da      	uxtb	r2, r3
 8006f5a:	69fb      	ldr	r3, [r7, #28]
 8006f5c:	b2db      	uxtb	r3, r3
 8006f5e:	4413      	add	r3, r2
 8006f60:	b2db      	uxtb	r3, r3
 8006f62:	7bba      	ldrb	r2, [r7, #14]
 8006f64:	4619      	mov	r1, r3
 8006f66:	f7ff ff5d 	bl	8006e24 <ssd1306_DrawPixel>
 8006f6a:	e016      	b.n	8006f9a <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8006f6c:	4b19      	ldr	r3, [pc, #100]	@ (8006fd4 <ssd1306_WriteChar+0x10c>)
 8006f6e:	881b      	ldrh	r3, [r3, #0]
 8006f70:	b2da      	uxtb	r2, r3
 8006f72:	69bb      	ldr	r3, [r7, #24]
 8006f74:	b2db      	uxtb	r3, r3
 8006f76:	4413      	add	r3, r2
 8006f78:	b2d8      	uxtb	r0, r3
 8006f7a:	4b16      	ldr	r3, [pc, #88]	@ (8006fd4 <ssd1306_WriteChar+0x10c>)
 8006f7c:	885b      	ldrh	r3, [r3, #2]
 8006f7e:	b2da      	uxtb	r2, r3
 8006f80:	69fb      	ldr	r3, [r7, #28]
 8006f82:	b2db      	uxtb	r3, r3
 8006f84:	4413      	add	r3, r2
 8006f86:	b2d9      	uxtb	r1, r3
 8006f88:	7bbb      	ldrb	r3, [r7, #14]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	bf0c      	ite	eq
 8006f8e:	2301      	moveq	r3, #1
 8006f90:	2300      	movne	r3, #0
 8006f92:	b2db      	uxtb	r3, r3
 8006f94:	461a      	mov	r2, r3
 8006f96:	f7ff ff45 	bl	8006e24 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8006f9a:	69bb      	ldr	r3, [r7, #24]
 8006f9c:	3301      	adds	r3, #1
 8006f9e:	61bb      	str	r3, [r7, #24]
 8006fa0:	793b      	ldrb	r3, [r7, #4]
 8006fa2:	461a      	mov	r2, r3
 8006fa4:	69bb      	ldr	r3, [r7, #24]
 8006fa6:	4293      	cmp	r3, r2
 8006fa8:	d3c5      	bcc.n	8006f36 <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8006faa:	69fb      	ldr	r3, [r7, #28]
 8006fac:	3301      	adds	r3, #1
 8006fae:	61fb      	str	r3, [r7, #28]
 8006fb0:	797b      	ldrb	r3, [r7, #5]
 8006fb2:	461a      	mov	r2, r3
 8006fb4:	69fb      	ldr	r3, [r7, #28]
 8006fb6:	4293      	cmp	r3, r2
 8006fb8:	d3ad      	bcc.n	8006f16 <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8006fba:	4b06      	ldr	r3, [pc, #24]	@ (8006fd4 <ssd1306_WriteChar+0x10c>)
 8006fbc:	881b      	ldrh	r3, [r3, #0]
 8006fbe:	793a      	ldrb	r2, [r7, #4]
 8006fc0:	4413      	add	r3, r2
 8006fc2:	b29a      	uxth	r2, r3
 8006fc4:	4b03      	ldr	r3, [pc, #12]	@ (8006fd4 <ssd1306_WriteChar+0x10c>)
 8006fc6:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8006fc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fca:	4618      	mov	r0, r3
 8006fcc:	3724      	adds	r7, #36	@ 0x24
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	bd90      	pop	{r4, r7, pc}
 8006fd2:	bf00      	nop
 8006fd4:	2000079c 	.word	0x2000079c

08006fd8 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	b084      	sub	sp, #16
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	60f8      	str	r0, [r7, #12]
 8006fe0:	1d38      	adds	r0, r7, #4
 8006fe2:	e880 0006 	stmia.w	r0, {r1, r2}
 8006fe6:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 8006fe8:	e012      	b.n	8007010 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	7818      	ldrb	r0, [r3, #0]
 8006fee:	78fb      	ldrb	r3, [r7, #3]
 8006ff0:	1d3a      	adds	r2, r7, #4
 8006ff2:	ca06      	ldmia	r2, {r1, r2}
 8006ff4:	f7ff ff68 	bl	8006ec8 <ssd1306_WriteChar>
 8006ff8:	4603      	mov	r3, r0
 8006ffa:	461a      	mov	r2, r3
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	781b      	ldrb	r3, [r3, #0]
 8007000:	429a      	cmp	r2, r3
 8007002:	d002      	beq.n	800700a <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	781b      	ldrb	r3, [r3, #0]
 8007008:	e008      	b.n	800701c <ssd1306_WriteString+0x44>
        }
        str++;
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	3301      	adds	r3, #1
 800700e:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	781b      	ldrb	r3, [r3, #0]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d1e8      	bne.n	8006fea <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	781b      	ldrb	r3, [r3, #0]
}
 800701c:	4618      	mov	r0, r3
 800701e:	3710      	adds	r7, #16
 8007020:	46bd      	mov	sp, r7
 8007022:	bd80      	pop	{r7, pc}

08007024 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8007024:	b480      	push	{r7}
 8007026:	b083      	sub	sp, #12
 8007028:	af00      	add	r7, sp, #0
 800702a:	4603      	mov	r3, r0
 800702c:	460a      	mov	r2, r1
 800702e:	71fb      	strb	r3, [r7, #7]
 8007030:	4613      	mov	r3, r2
 8007032:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8007034:	79fb      	ldrb	r3, [r7, #7]
 8007036:	b29a      	uxth	r2, r3
 8007038:	4b05      	ldr	r3, [pc, #20]	@ (8007050 <ssd1306_SetCursor+0x2c>)
 800703a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 800703c:	79bb      	ldrb	r3, [r7, #6]
 800703e:	b29a      	uxth	r2, r3
 8007040:	4b03      	ldr	r3, [pc, #12]	@ (8007050 <ssd1306_SetCursor+0x2c>)
 8007042:	805a      	strh	r2, [r3, #2]
}
 8007044:	bf00      	nop
 8007046:	370c      	adds	r7, #12
 8007048:	46bd      	mov	sp, r7
 800704a:	bc80      	pop	{r7}
 800704c:	4770      	bx	lr
 800704e:	bf00      	nop
 8007050:	2000079c 	.word	0x2000079c

08007054 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8007054:	b580      	push	{r7, lr}
 8007056:	b084      	sub	sp, #16
 8007058:	af00      	add	r7, sp, #0
 800705a:	4603      	mov	r3, r0
 800705c:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 800705e:	2381      	movs	r3, #129	@ 0x81
 8007060:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8007062:	7bfb      	ldrb	r3, [r7, #15]
 8007064:	4618      	mov	r0, r3
 8007066:	f7ff fdf7 	bl	8006c58 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 800706a:	79fb      	ldrb	r3, [r7, #7]
 800706c:	4618      	mov	r0, r3
 800706e:	f7ff fdf3 	bl	8006c58 <ssd1306_WriteCommand>
}
 8007072:	bf00      	nop
 8007074:	3710      	adds	r7, #16
 8007076:	46bd      	mov	sp, r7
 8007078:	bd80      	pop	{r7, pc}
	...

0800707c <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 800707c:	b580      	push	{r7, lr}
 800707e:	b084      	sub	sp, #16
 8007080:	af00      	add	r7, sp, #0
 8007082:	4603      	mov	r3, r0
 8007084:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8007086:	79fb      	ldrb	r3, [r7, #7]
 8007088:	2b00      	cmp	r3, #0
 800708a:	d005      	beq.n	8007098 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 800708c:	23af      	movs	r3, #175	@ 0xaf
 800708e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8007090:	4b08      	ldr	r3, [pc, #32]	@ (80070b4 <ssd1306_SetDisplayOn+0x38>)
 8007092:	2201      	movs	r2, #1
 8007094:	715a      	strb	r2, [r3, #5]
 8007096:	e004      	b.n	80070a2 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8007098:	23ae      	movs	r3, #174	@ 0xae
 800709a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 800709c:	4b05      	ldr	r3, [pc, #20]	@ (80070b4 <ssd1306_SetDisplayOn+0x38>)
 800709e:	2200      	movs	r2, #0
 80070a0:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 80070a2:	7bfb      	ldrb	r3, [r7, #15]
 80070a4:	4618      	mov	r0, r3
 80070a6:	f7ff fdd7 	bl	8006c58 <ssd1306_WriteCommand>
}
 80070aa:	bf00      	nop
 80070ac:	3710      	adds	r7, #16
 80070ae:	46bd      	mov	sp, r7
 80070b0:	bd80      	pop	{r7, pc}
 80070b2:	bf00      	nop
 80070b4:	2000079c 	.word	0x2000079c

080070b8 <__cvt>:
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80070be:	461d      	mov	r5, r3
 80070c0:	bfbb      	ittet	lt
 80070c2:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 80070c6:	461d      	movlt	r5, r3
 80070c8:	2300      	movge	r3, #0
 80070ca:	232d      	movlt	r3, #45	@ 0x2d
 80070cc:	b088      	sub	sp, #32
 80070ce:	4614      	mov	r4, r2
 80070d0:	bfb8      	it	lt
 80070d2:	4614      	movlt	r4, r2
 80070d4:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80070d6:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 80070d8:	7013      	strb	r3, [r2, #0]
 80070da:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80070dc:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 80070e0:	f023 0820 	bic.w	r8, r3, #32
 80070e4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80070e8:	d005      	beq.n	80070f6 <__cvt+0x3e>
 80070ea:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80070ee:	d100      	bne.n	80070f2 <__cvt+0x3a>
 80070f0:	3601      	adds	r6, #1
 80070f2:	2302      	movs	r3, #2
 80070f4:	e000      	b.n	80070f8 <__cvt+0x40>
 80070f6:	2303      	movs	r3, #3
 80070f8:	aa07      	add	r2, sp, #28
 80070fa:	9204      	str	r2, [sp, #16]
 80070fc:	aa06      	add	r2, sp, #24
 80070fe:	e9cd a202 	strd	sl, r2, [sp, #8]
 8007102:	e9cd 3600 	strd	r3, r6, [sp]
 8007106:	4622      	mov	r2, r4
 8007108:	462b      	mov	r3, r5
 800710a:	f001 f8bd 	bl	8008288 <_dtoa_r>
 800710e:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007112:	4607      	mov	r7, r0
 8007114:	d119      	bne.n	800714a <__cvt+0x92>
 8007116:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007118:	07db      	lsls	r3, r3, #31
 800711a:	d50e      	bpl.n	800713a <__cvt+0x82>
 800711c:	eb00 0906 	add.w	r9, r0, r6
 8007120:	2200      	movs	r2, #0
 8007122:	2300      	movs	r3, #0
 8007124:	4620      	mov	r0, r4
 8007126:	4629      	mov	r1, r5
 8007128:	f7f9 fc3e 	bl	80009a8 <__aeabi_dcmpeq>
 800712c:	b108      	cbz	r0, 8007132 <__cvt+0x7a>
 800712e:	f8cd 901c 	str.w	r9, [sp, #28]
 8007132:	2230      	movs	r2, #48	@ 0x30
 8007134:	9b07      	ldr	r3, [sp, #28]
 8007136:	454b      	cmp	r3, r9
 8007138:	d31e      	bcc.n	8007178 <__cvt+0xc0>
 800713a:	4638      	mov	r0, r7
 800713c:	9b07      	ldr	r3, [sp, #28]
 800713e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8007140:	1bdb      	subs	r3, r3, r7
 8007142:	6013      	str	r3, [r2, #0]
 8007144:	b008      	add	sp, #32
 8007146:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800714a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800714e:	eb00 0906 	add.w	r9, r0, r6
 8007152:	d1e5      	bne.n	8007120 <__cvt+0x68>
 8007154:	7803      	ldrb	r3, [r0, #0]
 8007156:	2b30      	cmp	r3, #48	@ 0x30
 8007158:	d10a      	bne.n	8007170 <__cvt+0xb8>
 800715a:	2200      	movs	r2, #0
 800715c:	2300      	movs	r3, #0
 800715e:	4620      	mov	r0, r4
 8007160:	4629      	mov	r1, r5
 8007162:	f7f9 fc21 	bl	80009a8 <__aeabi_dcmpeq>
 8007166:	b918      	cbnz	r0, 8007170 <__cvt+0xb8>
 8007168:	f1c6 0601 	rsb	r6, r6, #1
 800716c:	f8ca 6000 	str.w	r6, [sl]
 8007170:	f8da 3000 	ldr.w	r3, [sl]
 8007174:	4499      	add	r9, r3
 8007176:	e7d3      	b.n	8007120 <__cvt+0x68>
 8007178:	1c59      	adds	r1, r3, #1
 800717a:	9107      	str	r1, [sp, #28]
 800717c:	701a      	strb	r2, [r3, #0]
 800717e:	e7d9      	b.n	8007134 <__cvt+0x7c>

08007180 <__exponent>:
 8007180:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007182:	2900      	cmp	r1, #0
 8007184:	bfb6      	itet	lt
 8007186:	232d      	movlt	r3, #45	@ 0x2d
 8007188:	232b      	movge	r3, #43	@ 0x2b
 800718a:	4249      	neglt	r1, r1
 800718c:	2909      	cmp	r1, #9
 800718e:	7002      	strb	r2, [r0, #0]
 8007190:	7043      	strb	r3, [r0, #1]
 8007192:	dd29      	ble.n	80071e8 <__exponent+0x68>
 8007194:	f10d 0307 	add.w	r3, sp, #7
 8007198:	461d      	mov	r5, r3
 800719a:	270a      	movs	r7, #10
 800719c:	fbb1 f6f7 	udiv	r6, r1, r7
 80071a0:	461a      	mov	r2, r3
 80071a2:	fb07 1416 	mls	r4, r7, r6, r1
 80071a6:	3430      	adds	r4, #48	@ 0x30
 80071a8:	f802 4c01 	strb.w	r4, [r2, #-1]
 80071ac:	460c      	mov	r4, r1
 80071ae:	2c63      	cmp	r4, #99	@ 0x63
 80071b0:	4631      	mov	r1, r6
 80071b2:	f103 33ff 	add.w	r3, r3, #4294967295
 80071b6:	dcf1      	bgt.n	800719c <__exponent+0x1c>
 80071b8:	3130      	adds	r1, #48	@ 0x30
 80071ba:	1e94      	subs	r4, r2, #2
 80071bc:	f803 1c01 	strb.w	r1, [r3, #-1]
 80071c0:	4623      	mov	r3, r4
 80071c2:	1c41      	adds	r1, r0, #1
 80071c4:	42ab      	cmp	r3, r5
 80071c6:	d30a      	bcc.n	80071de <__exponent+0x5e>
 80071c8:	f10d 0309 	add.w	r3, sp, #9
 80071cc:	1a9b      	subs	r3, r3, r2
 80071ce:	42ac      	cmp	r4, r5
 80071d0:	bf88      	it	hi
 80071d2:	2300      	movhi	r3, #0
 80071d4:	3302      	adds	r3, #2
 80071d6:	4403      	add	r3, r0
 80071d8:	1a18      	subs	r0, r3, r0
 80071da:	b003      	add	sp, #12
 80071dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80071de:	f813 6b01 	ldrb.w	r6, [r3], #1
 80071e2:	f801 6f01 	strb.w	r6, [r1, #1]!
 80071e6:	e7ed      	b.n	80071c4 <__exponent+0x44>
 80071e8:	2330      	movs	r3, #48	@ 0x30
 80071ea:	3130      	adds	r1, #48	@ 0x30
 80071ec:	7083      	strb	r3, [r0, #2]
 80071ee:	70c1      	strb	r1, [r0, #3]
 80071f0:	1d03      	adds	r3, r0, #4
 80071f2:	e7f1      	b.n	80071d8 <__exponent+0x58>

080071f4 <_printf_float>:
 80071f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071f8:	b091      	sub	sp, #68	@ 0x44
 80071fa:	460c      	mov	r4, r1
 80071fc:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8007200:	4616      	mov	r6, r2
 8007202:	461f      	mov	r7, r3
 8007204:	4605      	mov	r5, r0
 8007206:	f000 ff1d 	bl	8008044 <_localeconv_r>
 800720a:	6803      	ldr	r3, [r0, #0]
 800720c:	4618      	mov	r0, r3
 800720e:	9308      	str	r3, [sp, #32]
 8007210:	f7f8 ff9e 	bl	8000150 <strlen>
 8007214:	2300      	movs	r3, #0
 8007216:	930e      	str	r3, [sp, #56]	@ 0x38
 8007218:	f8d8 3000 	ldr.w	r3, [r8]
 800721c:	9009      	str	r0, [sp, #36]	@ 0x24
 800721e:	3307      	adds	r3, #7
 8007220:	f023 0307 	bic.w	r3, r3, #7
 8007224:	f103 0208 	add.w	r2, r3, #8
 8007228:	f894 a018 	ldrb.w	sl, [r4, #24]
 800722c:	f8d4 b000 	ldr.w	fp, [r4]
 8007230:	f8c8 2000 	str.w	r2, [r8]
 8007234:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007238:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800723c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800723e:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8007242:	f04f 32ff 	mov.w	r2, #4294967295
 8007246:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800724a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800724e:	4b9c      	ldr	r3, [pc, #624]	@ (80074c0 <_printf_float+0x2cc>)
 8007250:	f7f9 fbdc 	bl	8000a0c <__aeabi_dcmpun>
 8007254:	bb70      	cbnz	r0, 80072b4 <_printf_float+0xc0>
 8007256:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800725a:	f04f 32ff 	mov.w	r2, #4294967295
 800725e:	4b98      	ldr	r3, [pc, #608]	@ (80074c0 <_printf_float+0x2cc>)
 8007260:	f7f9 fbb6 	bl	80009d0 <__aeabi_dcmple>
 8007264:	bb30      	cbnz	r0, 80072b4 <_printf_float+0xc0>
 8007266:	2200      	movs	r2, #0
 8007268:	2300      	movs	r3, #0
 800726a:	4640      	mov	r0, r8
 800726c:	4649      	mov	r1, r9
 800726e:	f7f9 fba5 	bl	80009bc <__aeabi_dcmplt>
 8007272:	b110      	cbz	r0, 800727a <_printf_float+0x86>
 8007274:	232d      	movs	r3, #45	@ 0x2d
 8007276:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800727a:	4a92      	ldr	r2, [pc, #584]	@ (80074c4 <_printf_float+0x2d0>)
 800727c:	4b92      	ldr	r3, [pc, #584]	@ (80074c8 <_printf_float+0x2d4>)
 800727e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007282:	bf94      	ite	ls
 8007284:	4690      	movls	r8, r2
 8007286:	4698      	movhi	r8, r3
 8007288:	2303      	movs	r3, #3
 800728a:	f04f 0900 	mov.w	r9, #0
 800728e:	6123      	str	r3, [r4, #16]
 8007290:	f02b 0304 	bic.w	r3, fp, #4
 8007294:	6023      	str	r3, [r4, #0]
 8007296:	4633      	mov	r3, r6
 8007298:	4621      	mov	r1, r4
 800729a:	4628      	mov	r0, r5
 800729c:	9700      	str	r7, [sp, #0]
 800729e:	aa0f      	add	r2, sp, #60	@ 0x3c
 80072a0:	f000 f9d4 	bl	800764c <_printf_common>
 80072a4:	3001      	adds	r0, #1
 80072a6:	f040 8090 	bne.w	80073ca <_printf_float+0x1d6>
 80072aa:	f04f 30ff 	mov.w	r0, #4294967295
 80072ae:	b011      	add	sp, #68	@ 0x44
 80072b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072b4:	4642      	mov	r2, r8
 80072b6:	464b      	mov	r3, r9
 80072b8:	4640      	mov	r0, r8
 80072ba:	4649      	mov	r1, r9
 80072bc:	f7f9 fba6 	bl	8000a0c <__aeabi_dcmpun>
 80072c0:	b148      	cbz	r0, 80072d6 <_printf_float+0xe2>
 80072c2:	464b      	mov	r3, r9
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	bfb8      	it	lt
 80072c8:	232d      	movlt	r3, #45	@ 0x2d
 80072ca:	4a80      	ldr	r2, [pc, #512]	@ (80074cc <_printf_float+0x2d8>)
 80072cc:	bfb8      	it	lt
 80072ce:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80072d2:	4b7f      	ldr	r3, [pc, #508]	@ (80074d0 <_printf_float+0x2dc>)
 80072d4:	e7d3      	b.n	800727e <_printf_float+0x8a>
 80072d6:	6863      	ldr	r3, [r4, #4]
 80072d8:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 80072dc:	1c5a      	adds	r2, r3, #1
 80072de:	d13f      	bne.n	8007360 <_printf_float+0x16c>
 80072e0:	2306      	movs	r3, #6
 80072e2:	6063      	str	r3, [r4, #4]
 80072e4:	2200      	movs	r2, #0
 80072e6:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 80072ea:	6023      	str	r3, [r4, #0]
 80072ec:	9206      	str	r2, [sp, #24]
 80072ee:	aa0e      	add	r2, sp, #56	@ 0x38
 80072f0:	e9cd a204 	strd	sl, r2, [sp, #16]
 80072f4:	aa0d      	add	r2, sp, #52	@ 0x34
 80072f6:	9203      	str	r2, [sp, #12]
 80072f8:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 80072fc:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8007300:	6863      	ldr	r3, [r4, #4]
 8007302:	4642      	mov	r2, r8
 8007304:	9300      	str	r3, [sp, #0]
 8007306:	4628      	mov	r0, r5
 8007308:	464b      	mov	r3, r9
 800730a:	910a      	str	r1, [sp, #40]	@ 0x28
 800730c:	f7ff fed4 	bl	80070b8 <__cvt>
 8007310:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007312:	4680      	mov	r8, r0
 8007314:	2947      	cmp	r1, #71	@ 0x47
 8007316:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8007318:	d128      	bne.n	800736c <_printf_float+0x178>
 800731a:	1cc8      	adds	r0, r1, #3
 800731c:	db02      	blt.n	8007324 <_printf_float+0x130>
 800731e:	6863      	ldr	r3, [r4, #4]
 8007320:	4299      	cmp	r1, r3
 8007322:	dd40      	ble.n	80073a6 <_printf_float+0x1b2>
 8007324:	f1aa 0a02 	sub.w	sl, sl, #2
 8007328:	fa5f fa8a 	uxtb.w	sl, sl
 800732c:	4652      	mov	r2, sl
 800732e:	3901      	subs	r1, #1
 8007330:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007334:	910d      	str	r1, [sp, #52]	@ 0x34
 8007336:	f7ff ff23 	bl	8007180 <__exponent>
 800733a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800733c:	4681      	mov	r9, r0
 800733e:	1813      	adds	r3, r2, r0
 8007340:	2a01      	cmp	r2, #1
 8007342:	6123      	str	r3, [r4, #16]
 8007344:	dc02      	bgt.n	800734c <_printf_float+0x158>
 8007346:	6822      	ldr	r2, [r4, #0]
 8007348:	07d2      	lsls	r2, r2, #31
 800734a:	d501      	bpl.n	8007350 <_printf_float+0x15c>
 800734c:	3301      	adds	r3, #1
 800734e:	6123      	str	r3, [r4, #16]
 8007350:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8007354:	2b00      	cmp	r3, #0
 8007356:	d09e      	beq.n	8007296 <_printf_float+0xa2>
 8007358:	232d      	movs	r3, #45	@ 0x2d
 800735a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800735e:	e79a      	b.n	8007296 <_printf_float+0xa2>
 8007360:	2947      	cmp	r1, #71	@ 0x47
 8007362:	d1bf      	bne.n	80072e4 <_printf_float+0xf0>
 8007364:	2b00      	cmp	r3, #0
 8007366:	d1bd      	bne.n	80072e4 <_printf_float+0xf0>
 8007368:	2301      	movs	r3, #1
 800736a:	e7ba      	b.n	80072e2 <_printf_float+0xee>
 800736c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007370:	d9dc      	bls.n	800732c <_printf_float+0x138>
 8007372:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007376:	d118      	bne.n	80073aa <_printf_float+0x1b6>
 8007378:	2900      	cmp	r1, #0
 800737a:	6863      	ldr	r3, [r4, #4]
 800737c:	dd0b      	ble.n	8007396 <_printf_float+0x1a2>
 800737e:	6121      	str	r1, [r4, #16]
 8007380:	b913      	cbnz	r3, 8007388 <_printf_float+0x194>
 8007382:	6822      	ldr	r2, [r4, #0]
 8007384:	07d0      	lsls	r0, r2, #31
 8007386:	d502      	bpl.n	800738e <_printf_float+0x19a>
 8007388:	3301      	adds	r3, #1
 800738a:	440b      	add	r3, r1
 800738c:	6123      	str	r3, [r4, #16]
 800738e:	f04f 0900 	mov.w	r9, #0
 8007392:	65a1      	str	r1, [r4, #88]	@ 0x58
 8007394:	e7dc      	b.n	8007350 <_printf_float+0x15c>
 8007396:	b913      	cbnz	r3, 800739e <_printf_float+0x1aa>
 8007398:	6822      	ldr	r2, [r4, #0]
 800739a:	07d2      	lsls	r2, r2, #31
 800739c:	d501      	bpl.n	80073a2 <_printf_float+0x1ae>
 800739e:	3302      	adds	r3, #2
 80073a0:	e7f4      	b.n	800738c <_printf_float+0x198>
 80073a2:	2301      	movs	r3, #1
 80073a4:	e7f2      	b.n	800738c <_printf_float+0x198>
 80073a6:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80073aa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80073ac:	4299      	cmp	r1, r3
 80073ae:	db05      	blt.n	80073bc <_printf_float+0x1c8>
 80073b0:	6823      	ldr	r3, [r4, #0]
 80073b2:	6121      	str	r1, [r4, #16]
 80073b4:	07d8      	lsls	r0, r3, #31
 80073b6:	d5ea      	bpl.n	800738e <_printf_float+0x19a>
 80073b8:	1c4b      	adds	r3, r1, #1
 80073ba:	e7e7      	b.n	800738c <_printf_float+0x198>
 80073bc:	2900      	cmp	r1, #0
 80073be:	bfcc      	ite	gt
 80073c0:	2201      	movgt	r2, #1
 80073c2:	f1c1 0202 	rsble	r2, r1, #2
 80073c6:	4413      	add	r3, r2
 80073c8:	e7e0      	b.n	800738c <_printf_float+0x198>
 80073ca:	6823      	ldr	r3, [r4, #0]
 80073cc:	055a      	lsls	r2, r3, #21
 80073ce:	d407      	bmi.n	80073e0 <_printf_float+0x1ec>
 80073d0:	6923      	ldr	r3, [r4, #16]
 80073d2:	4642      	mov	r2, r8
 80073d4:	4631      	mov	r1, r6
 80073d6:	4628      	mov	r0, r5
 80073d8:	47b8      	blx	r7
 80073da:	3001      	adds	r0, #1
 80073dc:	d12b      	bne.n	8007436 <_printf_float+0x242>
 80073de:	e764      	b.n	80072aa <_printf_float+0xb6>
 80073e0:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80073e4:	f240 80dc 	bls.w	80075a0 <_printf_float+0x3ac>
 80073e8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80073ec:	2200      	movs	r2, #0
 80073ee:	2300      	movs	r3, #0
 80073f0:	f7f9 fada 	bl	80009a8 <__aeabi_dcmpeq>
 80073f4:	2800      	cmp	r0, #0
 80073f6:	d033      	beq.n	8007460 <_printf_float+0x26c>
 80073f8:	2301      	movs	r3, #1
 80073fa:	4631      	mov	r1, r6
 80073fc:	4628      	mov	r0, r5
 80073fe:	4a35      	ldr	r2, [pc, #212]	@ (80074d4 <_printf_float+0x2e0>)
 8007400:	47b8      	blx	r7
 8007402:	3001      	adds	r0, #1
 8007404:	f43f af51 	beq.w	80072aa <_printf_float+0xb6>
 8007408:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 800740c:	4543      	cmp	r3, r8
 800740e:	db02      	blt.n	8007416 <_printf_float+0x222>
 8007410:	6823      	ldr	r3, [r4, #0]
 8007412:	07d8      	lsls	r0, r3, #31
 8007414:	d50f      	bpl.n	8007436 <_printf_float+0x242>
 8007416:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800741a:	4631      	mov	r1, r6
 800741c:	4628      	mov	r0, r5
 800741e:	47b8      	blx	r7
 8007420:	3001      	adds	r0, #1
 8007422:	f43f af42 	beq.w	80072aa <_printf_float+0xb6>
 8007426:	f04f 0900 	mov.w	r9, #0
 800742a:	f108 38ff 	add.w	r8, r8, #4294967295
 800742e:	f104 0a1a 	add.w	sl, r4, #26
 8007432:	45c8      	cmp	r8, r9
 8007434:	dc09      	bgt.n	800744a <_printf_float+0x256>
 8007436:	6823      	ldr	r3, [r4, #0]
 8007438:	079b      	lsls	r3, r3, #30
 800743a:	f100 8102 	bmi.w	8007642 <_printf_float+0x44e>
 800743e:	68e0      	ldr	r0, [r4, #12]
 8007440:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007442:	4298      	cmp	r0, r3
 8007444:	bfb8      	it	lt
 8007446:	4618      	movlt	r0, r3
 8007448:	e731      	b.n	80072ae <_printf_float+0xba>
 800744a:	2301      	movs	r3, #1
 800744c:	4652      	mov	r2, sl
 800744e:	4631      	mov	r1, r6
 8007450:	4628      	mov	r0, r5
 8007452:	47b8      	blx	r7
 8007454:	3001      	adds	r0, #1
 8007456:	f43f af28 	beq.w	80072aa <_printf_float+0xb6>
 800745a:	f109 0901 	add.w	r9, r9, #1
 800745e:	e7e8      	b.n	8007432 <_printf_float+0x23e>
 8007460:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007462:	2b00      	cmp	r3, #0
 8007464:	dc38      	bgt.n	80074d8 <_printf_float+0x2e4>
 8007466:	2301      	movs	r3, #1
 8007468:	4631      	mov	r1, r6
 800746a:	4628      	mov	r0, r5
 800746c:	4a19      	ldr	r2, [pc, #100]	@ (80074d4 <_printf_float+0x2e0>)
 800746e:	47b8      	blx	r7
 8007470:	3001      	adds	r0, #1
 8007472:	f43f af1a 	beq.w	80072aa <_printf_float+0xb6>
 8007476:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800747a:	ea59 0303 	orrs.w	r3, r9, r3
 800747e:	d102      	bne.n	8007486 <_printf_float+0x292>
 8007480:	6823      	ldr	r3, [r4, #0]
 8007482:	07d9      	lsls	r1, r3, #31
 8007484:	d5d7      	bpl.n	8007436 <_printf_float+0x242>
 8007486:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800748a:	4631      	mov	r1, r6
 800748c:	4628      	mov	r0, r5
 800748e:	47b8      	blx	r7
 8007490:	3001      	adds	r0, #1
 8007492:	f43f af0a 	beq.w	80072aa <_printf_float+0xb6>
 8007496:	f04f 0a00 	mov.w	sl, #0
 800749a:	f104 0b1a 	add.w	fp, r4, #26
 800749e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80074a0:	425b      	negs	r3, r3
 80074a2:	4553      	cmp	r3, sl
 80074a4:	dc01      	bgt.n	80074aa <_printf_float+0x2b6>
 80074a6:	464b      	mov	r3, r9
 80074a8:	e793      	b.n	80073d2 <_printf_float+0x1de>
 80074aa:	2301      	movs	r3, #1
 80074ac:	465a      	mov	r2, fp
 80074ae:	4631      	mov	r1, r6
 80074b0:	4628      	mov	r0, r5
 80074b2:	47b8      	blx	r7
 80074b4:	3001      	adds	r0, #1
 80074b6:	f43f aef8 	beq.w	80072aa <_printf_float+0xb6>
 80074ba:	f10a 0a01 	add.w	sl, sl, #1
 80074be:	e7ee      	b.n	800749e <_printf_float+0x2aa>
 80074c0:	7fefffff 	.word	0x7fefffff
 80074c4:	0800bfb4 	.word	0x0800bfb4
 80074c8:	0800bfb8 	.word	0x0800bfb8
 80074cc:	0800bfbc 	.word	0x0800bfbc
 80074d0:	0800bfc0 	.word	0x0800bfc0
 80074d4:	0800bfc4 	.word	0x0800bfc4
 80074d8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80074da:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80074de:	4553      	cmp	r3, sl
 80074e0:	bfa8      	it	ge
 80074e2:	4653      	movge	r3, sl
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	4699      	mov	r9, r3
 80074e8:	dc36      	bgt.n	8007558 <_printf_float+0x364>
 80074ea:	f04f 0b00 	mov.w	fp, #0
 80074ee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80074f2:	f104 021a 	add.w	r2, r4, #26
 80074f6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80074f8:	930a      	str	r3, [sp, #40]	@ 0x28
 80074fa:	eba3 0309 	sub.w	r3, r3, r9
 80074fe:	455b      	cmp	r3, fp
 8007500:	dc31      	bgt.n	8007566 <_printf_float+0x372>
 8007502:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007504:	459a      	cmp	sl, r3
 8007506:	dc3a      	bgt.n	800757e <_printf_float+0x38a>
 8007508:	6823      	ldr	r3, [r4, #0]
 800750a:	07da      	lsls	r2, r3, #31
 800750c:	d437      	bmi.n	800757e <_printf_float+0x38a>
 800750e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007510:	ebaa 0903 	sub.w	r9, sl, r3
 8007514:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007516:	ebaa 0303 	sub.w	r3, sl, r3
 800751a:	4599      	cmp	r9, r3
 800751c:	bfa8      	it	ge
 800751e:	4699      	movge	r9, r3
 8007520:	f1b9 0f00 	cmp.w	r9, #0
 8007524:	dc33      	bgt.n	800758e <_printf_float+0x39a>
 8007526:	f04f 0800 	mov.w	r8, #0
 800752a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800752e:	f104 0b1a 	add.w	fp, r4, #26
 8007532:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007534:	ebaa 0303 	sub.w	r3, sl, r3
 8007538:	eba3 0309 	sub.w	r3, r3, r9
 800753c:	4543      	cmp	r3, r8
 800753e:	f77f af7a 	ble.w	8007436 <_printf_float+0x242>
 8007542:	2301      	movs	r3, #1
 8007544:	465a      	mov	r2, fp
 8007546:	4631      	mov	r1, r6
 8007548:	4628      	mov	r0, r5
 800754a:	47b8      	blx	r7
 800754c:	3001      	adds	r0, #1
 800754e:	f43f aeac 	beq.w	80072aa <_printf_float+0xb6>
 8007552:	f108 0801 	add.w	r8, r8, #1
 8007556:	e7ec      	b.n	8007532 <_printf_float+0x33e>
 8007558:	4642      	mov	r2, r8
 800755a:	4631      	mov	r1, r6
 800755c:	4628      	mov	r0, r5
 800755e:	47b8      	blx	r7
 8007560:	3001      	adds	r0, #1
 8007562:	d1c2      	bne.n	80074ea <_printf_float+0x2f6>
 8007564:	e6a1      	b.n	80072aa <_printf_float+0xb6>
 8007566:	2301      	movs	r3, #1
 8007568:	4631      	mov	r1, r6
 800756a:	4628      	mov	r0, r5
 800756c:	920a      	str	r2, [sp, #40]	@ 0x28
 800756e:	47b8      	blx	r7
 8007570:	3001      	adds	r0, #1
 8007572:	f43f ae9a 	beq.w	80072aa <_printf_float+0xb6>
 8007576:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007578:	f10b 0b01 	add.w	fp, fp, #1
 800757c:	e7bb      	b.n	80074f6 <_printf_float+0x302>
 800757e:	4631      	mov	r1, r6
 8007580:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007584:	4628      	mov	r0, r5
 8007586:	47b8      	blx	r7
 8007588:	3001      	adds	r0, #1
 800758a:	d1c0      	bne.n	800750e <_printf_float+0x31a>
 800758c:	e68d      	b.n	80072aa <_printf_float+0xb6>
 800758e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007590:	464b      	mov	r3, r9
 8007592:	4631      	mov	r1, r6
 8007594:	4628      	mov	r0, r5
 8007596:	4442      	add	r2, r8
 8007598:	47b8      	blx	r7
 800759a:	3001      	adds	r0, #1
 800759c:	d1c3      	bne.n	8007526 <_printf_float+0x332>
 800759e:	e684      	b.n	80072aa <_printf_float+0xb6>
 80075a0:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80075a4:	f1ba 0f01 	cmp.w	sl, #1
 80075a8:	dc01      	bgt.n	80075ae <_printf_float+0x3ba>
 80075aa:	07db      	lsls	r3, r3, #31
 80075ac:	d536      	bpl.n	800761c <_printf_float+0x428>
 80075ae:	2301      	movs	r3, #1
 80075b0:	4642      	mov	r2, r8
 80075b2:	4631      	mov	r1, r6
 80075b4:	4628      	mov	r0, r5
 80075b6:	47b8      	blx	r7
 80075b8:	3001      	adds	r0, #1
 80075ba:	f43f ae76 	beq.w	80072aa <_printf_float+0xb6>
 80075be:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80075c2:	4631      	mov	r1, r6
 80075c4:	4628      	mov	r0, r5
 80075c6:	47b8      	blx	r7
 80075c8:	3001      	adds	r0, #1
 80075ca:	f43f ae6e 	beq.w	80072aa <_printf_float+0xb6>
 80075ce:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80075d2:	2200      	movs	r2, #0
 80075d4:	2300      	movs	r3, #0
 80075d6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80075da:	f7f9 f9e5 	bl	80009a8 <__aeabi_dcmpeq>
 80075de:	b9c0      	cbnz	r0, 8007612 <_printf_float+0x41e>
 80075e0:	4653      	mov	r3, sl
 80075e2:	f108 0201 	add.w	r2, r8, #1
 80075e6:	4631      	mov	r1, r6
 80075e8:	4628      	mov	r0, r5
 80075ea:	47b8      	blx	r7
 80075ec:	3001      	adds	r0, #1
 80075ee:	d10c      	bne.n	800760a <_printf_float+0x416>
 80075f0:	e65b      	b.n	80072aa <_printf_float+0xb6>
 80075f2:	2301      	movs	r3, #1
 80075f4:	465a      	mov	r2, fp
 80075f6:	4631      	mov	r1, r6
 80075f8:	4628      	mov	r0, r5
 80075fa:	47b8      	blx	r7
 80075fc:	3001      	adds	r0, #1
 80075fe:	f43f ae54 	beq.w	80072aa <_printf_float+0xb6>
 8007602:	f108 0801 	add.w	r8, r8, #1
 8007606:	45d0      	cmp	r8, sl
 8007608:	dbf3      	blt.n	80075f2 <_printf_float+0x3fe>
 800760a:	464b      	mov	r3, r9
 800760c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007610:	e6e0      	b.n	80073d4 <_printf_float+0x1e0>
 8007612:	f04f 0800 	mov.w	r8, #0
 8007616:	f104 0b1a 	add.w	fp, r4, #26
 800761a:	e7f4      	b.n	8007606 <_printf_float+0x412>
 800761c:	2301      	movs	r3, #1
 800761e:	4642      	mov	r2, r8
 8007620:	e7e1      	b.n	80075e6 <_printf_float+0x3f2>
 8007622:	2301      	movs	r3, #1
 8007624:	464a      	mov	r2, r9
 8007626:	4631      	mov	r1, r6
 8007628:	4628      	mov	r0, r5
 800762a:	47b8      	blx	r7
 800762c:	3001      	adds	r0, #1
 800762e:	f43f ae3c 	beq.w	80072aa <_printf_float+0xb6>
 8007632:	f108 0801 	add.w	r8, r8, #1
 8007636:	68e3      	ldr	r3, [r4, #12]
 8007638:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800763a:	1a5b      	subs	r3, r3, r1
 800763c:	4543      	cmp	r3, r8
 800763e:	dcf0      	bgt.n	8007622 <_printf_float+0x42e>
 8007640:	e6fd      	b.n	800743e <_printf_float+0x24a>
 8007642:	f04f 0800 	mov.w	r8, #0
 8007646:	f104 0919 	add.w	r9, r4, #25
 800764a:	e7f4      	b.n	8007636 <_printf_float+0x442>

0800764c <_printf_common>:
 800764c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007650:	4616      	mov	r6, r2
 8007652:	4698      	mov	r8, r3
 8007654:	688a      	ldr	r2, [r1, #8]
 8007656:	690b      	ldr	r3, [r1, #16]
 8007658:	4607      	mov	r7, r0
 800765a:	4293      	cmp	r3, r2
 800765c:	bfb8      	it	lt
 800765e:	4613      	movlt	r3, r2
 8007660:	6033      	str	r3, [r6, #0]
 8007662:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007666:	460c      	mov	r4, r1
 8007668:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800766c:	b10a      	cbz	r2, 8007672 <_printf_common+0x26>
 800766e:	3301      	adds	r3, #1
 8007670:	6033      	str	r3, [r6, #0]
 8007672:	6823      	ldr	r3, [r4, #0]
 8007674:	0699      	lsls	r1, r3, #26
 8007676:	bf42      	ittt	mi
 8007678:	6833      	ldrmi	r3, [r6, #0]
 800767a:	3302      	addmi	r3, #2
 800767c:	6033      	strmi	r3, [r6, #0]
 800767e:	6825      	ldr	r5, [r4, #0]
 8007680:	f015 0506 	ands.w	r5, r5, #6
 8007684:	d106      	bne.n	8007694 <_printf_common+0x48>
 8007686:	f104 0a19 	add.w	sl, r4, #25
 800768a:	68e3      	ldr	r3, [r4, #12]
 800768c:	6832      	ldr	r2, [r6, #0]
 800768e:	1a9b      	subs	r3, r3, r2
 8007690:	42ab      	cmp	r3, r5
 8007692:	dc2b      	bgt.n	80076ec <_printf_common+0xa0>
 8007694:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007698:	6822      	ldr	r2, [r4, #0]
 800769a:	3b00      	subs	r3, #0
 800769c:	bf18      	it	ne
 800769e:	2301      	movne	r3, #1
 80076a0:	0692      	lsls	r2, r2, #26
 80076a2:	d430      	bmi.n	8007706 <_printf_common+0xba>
 80076a4:	4641      	mov	r1, r8
 80076a6:	4638      	mov	r0, r7
 80076a8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80076ac:	47c8      	blx	r9
 80076ae:	3001      	adds	r0, #1
 80076b0:	d023      	beq.n	80076fa <_printf_common+0xae>
 80076b2:	6823      	ldr	r3, [r4, #0]
 80076b4:	6922      	ldr	r2, [r4, #16]
 80076b6:	f003 0306 	and.w	r3, r3, #6
 80076ba:	2b04      	cmp	r3, #4
 80076bc:	bf14      	ite	ne
 80076be:	2500      	movne	r5, #0
 80076c0:	6833      	ldreq	r3, [r6, #0]
 80076c2:	f04f 0600 	mov.w	r6, #0
 80076c6:	bf08      	it	eq
 80076c8:	68e5      	ldreq	r5, [r4, #12]
 80076ca:	f104 041a 	add.w	r4, r4, #26
 80076ce:	bf08      	it	eq
 80076d0:	1aed      	subeq	r5, r5, r3
 80076d2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80076d6:	bf08      	it	eq
 80076d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80076dc:	4293      	cmp	r3, r2
 80076de:	bfc4      	itt	gt
 80076e0:	1a9b      	subgt	r3, r3, r2
 80076e2:	18ed      	addgt	r5, r5, r3
 80076e4:	42b5      	cmp	r5, r6
 80076e6:	d11a      	bne.n	800771e <_printf_common+0xd2>
 80076e8:	2000      	movs	r0, #0
 80076ea:	e008      	b.n	80076fe <_printf_common+0xb2>
 80076ec:	2301      	movs	r3, #1
 80076ee:	4652      	mov	r2, sl
 80076f0:	4641      	mov	r1, r8
 80076f2:	4638      	mov	r0, r7
 80076f4:	47c8      	blx	r9
 80076f6:	3001      	adds	r0, #1
 80076f8:	d103      	bne.n	8007702 <_printf_common+0xb6>
 80076fa:	f04f 30ff 	mov.w	r0, #4294967295
 80076fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007702:	3501      	adds	r5, #1
 8007704:	e7c1      	b.n	800768a <_printf_common+0x3e>
 8007706:	2030      	movs	r0, #48	@ 0x30
 8007708:	18e1      	adds	r1, r4, r3
 800770a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800770e:	1c5a      	adds	r2, r3, #1
 8007710:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007714:	4422      	add	r2, r4
 8007716:	3302      	adds	r3, #2
 8007718:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800771c:	e7c2      	b.n	80076a4 <_printf_common+0x58>
 800771e:	2301      	movs	r3, #1
 8007720:	4622      	mov	r2, r4
 8007722:	4641      	mov	r1, r8
 8007724:	4638      	mov	r0, r7
 8007726:	47c8      	blx	r9
 8007728:	3001      	adds	r0, #1
 800772a:	d0e6      	beq.n	80076fa <_printf_common+0xae>
 800772c:	3601      	adds	r6, #1
 800772e:	e7d9      	b.n	80076e4 <_printf_common+0x98>

08007730 <_printf_i>:
 8007730:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007734:	7e0f      	ldrb	r7, [r1, #24]
 8007736:	4691      	mov	r9, r2
 8007738:	2f78      	cmp	r7, #120	@ 0x78
 800773a:	4680      	mov	r8, r0
 800773c:	460c      	mov	r4, r1
 800773e:	469a      	mov	sl, r3
 8007740:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007742:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007746:	d807      	bhi.n	8007758 <_printf_i+0x28>
 8007748:	2f62      	cmp	r7, #98	@ 0x62
 800774a:	d80a      	bhi.n	8007762 <_printf_i+0x32>
 800774c:	2f00      	cmp	r7, #0
 800774e:	f000 80d3 	beq.w	80078f8 <_printf_i+0x1c8>
 8007752:	2f58      	cmp	r7, #88	@ 0x58
 8007754:	f000 80ba 	beq.w	80078cc <_printf_i+0x19c>
 8007758:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800775c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007760:	e03a      	b.n	80077d8 <_printf_i+0xa8>
 8007762:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007766:	2b15      	cmp	r3, #21
 8007768:	d8f6      	bhi.n	8007758 <_printf_i+0x28>
 800776a:	a101      	add	r1, pc, #4	@ (adr r1, 8007770 <_printf_i+0x40>)
 800776c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007770:	080077c9 	.word	0x080077c9
 8007774:	080077dd 	.word	0x080077dd
 8007778:	08007759 	.word	0x08007759
 800777c:	08007759 	.word	0x08007759
 8007780:	08007759 	.word	0x08007759
 8007784:	08007759 	.word	0x08007759
 8007788:	080077dd 	.word	0x080077dd
 800778c:	08007759 	.word	0x08007759
 8007790:	08007759 	.word	0x08007759
 8007794:	08007759 	.word	0x08007759
 8007798:	08007759 	.word	0x08007759
 800779c:	080078df 	.word	0x080078df
 80077a0:	08007807 	.word	0x08007807
 80077a4:	08007899 	.word	0x08007899
 80077a8:	08007759 	.word	0x08007759
 80077ac:	08007759 	.word	0x08007759
 80077b0:	08007901 	.word	0x08007901
 80077b4:	08007759 	.word	0x08007759
 80077b8:	08007807 	.word	0x08007807
 80077bc:	08007759 	.word	0x08007759
 80077c0:	08007759 	.word	0x08007759
 80077c4:	080078a1 	.word	0x080078a1
 80077c8:	6833      	ldr	r3, [r6, #0]
 80077ca:	1d1a      	adds	r2, r3, #4
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	6032      	str	r2, [r6, #0]
 80077d0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80077d4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80077d8:	2301      	movs	r3, #1
 80077da:	e09e      	b.n	800791a <_printf_i+0x1ea>
 80077dc:	6833      	ldr	r3, [r6, #0]
 80077de:	6820      	ldr	r0, [r4, #0]
 80077e0:	1d19      	adds	r1, r3, #4
 80077e2:	6031      	str	r1, [r6, #0]
 80077e4:	0606      	lsls	r6, r0, #24
 80077e6:	d501      	bpl.n	80077ec <_printf_i+0xbc>
 80077e8:	681d      	ldr	r5, [r3, #0]
 80077ea:	e003      	b.n	80077f4 <_printf_i+0xc4>
 80077ec:	0645      	lsls	r5, r0, #25
 80077ee:	d5fb      	bpl.n	80077e8 <_printf_i+0xb8>
 80077f0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80077f4:	2d00      	cmp	r5, #0
 80077f6:	da03      	bge.n	8007800 <_printf_i+0xd0>
 80077f8:	232d      	movs	r3, #45	@ 0x2d
 80077fa:	426d      	negs	r5, r5
 80077fc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007800:	230a      	movs	r3, #10
 8007802:	4859      	ldr	r0, [pc, #356]	@ (8007968 <_printf_i+0x238>)
 8007804:	e011      	b.n	800782a <_printf_i+0xfa>
 8007806:	6821      	ldr	r1, [r4, #0]
 8007808:	6833      	ldr	r3, [r6, #0]
 800780a:	0608      	lsls	r0, r1, #24
 800780c:	f853 5b04 	ldr.w	r5, [r3], #4
 8007810:	d402      	bmi.n	8007818 <_printf_i+0xe8>
 8007812:	0649      	lsls	r1, r1, #25
 8007814:	bf48      	it	mi
 8007816:	b2ad      	uxthmi	r5, r5
 8007818:	2f6f      	cmp	r7, #111	@ 0x6f
 800781a:	6033      	str	r3, [r6, #0]
 800781c:	bf14      	ite	ne
 800781e:	230a      	movne	r3, #10
 8007820:	2308      	moveq	r3, #8
 8007822:	4851      	ldr	r0, [pc, #324]	@ (8007968 <_printf_i+0x238>)
 8007824:	2100      	movs	r1, #0
 8007826:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800782a:	6866      	ldr	r6, [r4, #4]
 800782c:	2e00      	cmp	r6, #0
 800782e:	bfa8      	it	ge
 8007830:	6821      	ldrge	r1, [r4, #0]
 8007832:	60a6      	str	r6, [r4, #8]
 8007834:	bfa4      	itt	ge
 8007836:	f021 0104 	bicge.w	r1, r1, #4
 800783a:	6021      	strge	r1, [r4, #0]
 800783c:	b90d      	cbnz	r5, 8007842 <_printf_i+0x112>
 800783e:	2e00      	cmp	r6, #0
 8007840:	d04b      	beq.n	80078da <_printf_i+0x1aa>
 8007842:	4616      	mov	r6, r2
 8007844:	fbb5 f1f3 	udiv	r1, r5, r3
 8007848:	fb03 5711 	mls	r7, r3, r1, r5
 800784c:	5dc7      	ldrb	r7, [r0, r7]
 800784e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007852:	462f      	mov	r7, r5
 8007854:	42bb      	cmp	r3, r7
 8007856:	460d      	mov	r5, r1
 8007858:	d9f4      	bls.n	8007844 <_printf_i+0x114>
 800785a:	2b08      	cmp	r3, #8
 800785c:	d10b      	bne.n	8007876 <_printf_i+0x146>
 800785e:	6823      	ldr	r3, [r4, #0]
 8007860:	07df      	lsls	r7, r3, #31
 8007862:	d508      	bpl.n	8007876 <_printf_i+0x146>
 8007864:	6923      	ldr	r3, [r4, #16]
 8007866:	6861      	ldr	r1, [r4, #4]
 8007868:	4299      	cmp	r1, r3
 800786a:	bfde      	ittt	le
 800786c:	2330      	movle	r3, #48	@ 0x30
 800786e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007872:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007876:	1b92      	subs	r2, r2, r6
 8007878:	6122      	str	r2, [r4, #16]
 800787a:	464b      	mov	r3, r9
 800787c:	4621      	mov	r1, r4
 800787e:	4640      	mov	r0, r8
 8007880:	f8cd a000 	str.w	sl, [sp]
 8007884:	aa03      	add	r2, sp, #12
 8007886:	f7ff fee1 	bl	800764c <_printf_common>
 800788a:	3001      	adds	r0, #1
 800788c:	d14a      	bne.n	8007924 <_printf_i+0x1f4>
 800788e:	f04f 30ff 	mov.w	r0, #4294967295
 8007892:	b004      	add	sp, #16
 8007894:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007898:	6823      	ldr	r3, [r4, #0]
 800789a:	f043 0320 	orr.w	r3, r3, #32
 800789e:	6023      	str	r3, [r4, #0]
 80078a0:	2778      	movs	r7, #120	@ 0x78
 80078a2:	4832      	ldr	r0, [pc, #200]	@ (800796c <_printf_i+0x23c>)
 80078a4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80078a8:	6823      	ldr	r3, [r4, #0]
 80078aa:	6831      	ldr	r1, [r6, #0]
 80078ac:	061f      	lsls	r7, r3, #24
 80078ae:	f851 5b04 	ldr.w	r5, [r1], #4
 80078b2:	d402      	bmi.n	80078ba <_printf_i+0x18a>
 80078b4:	065f      	lsls	r7, r3, #25
 80078b6:	bf48      	it	mi
 80078b8:	b2ad      	uxthmi	r5, r5
 80078ba:	6031      	str	r1, [r6, #0]
 80078bc:	07d9      	lsls	r1, r3, #31
 80078be:	bf44      	itt	mi
 80078c0:	f043 0320 	orrmi.w	r3, r3, #32
 80078c4:	6023      	strmi	r3, [r4, #0]
 80078c6:	b11d      	cbz	r5, 80078d0 <_printf_i+0x1a0>
 80078c8:	2310      	movs	r3, #16
 80078ca:	e7ab      	b.n	8007824 <_printf_i+0xf4>
 80078cc:	4826      	ldr	r0, [pc, #152]	@ (8007968 <_printf_i+0x238>)
 80078ce:	e7e9      	b.n	80078a4 <_printf_i+0x174>
 80078d0:	6823      	ldr	r3, [r4, #0]
 80078d2:	f023 0320 	bic.w	r3, r3, #32
 80078d6:	6023      	str	r3, [r4, #0]
 80078d8:	e7f6      	b.n	80078c8 <_printf_i+0x198>
 80078da:	4616      	mov	r6, r2
 80078dc:	e7bd      	b.n	800785a <_printf_i+0x12a>
 80078de:	6833      	ldr	r3, [r6, #0]
 80078e0:	6825      	ldr	r5, [r4, #0]
 80078e2:	1d18      	adds	r0, r3, #4
 80078e4:	6961      	ldr	r1, [r4, #20]
 80078e6:	6030      	str	r0, [r6, #0]
 80078e8:	062e      	lsls	r6, r5, #24
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	d501      	bpl.n	80078f2 <_printf_i+0x1c2>
 80078ee:	6019      	str	r1, [r3, #0]
 80078f0:	e002      	b.n	80078f8 <_printf_i+0x1c8>
 80078f2:	0668      	lsls	r0, r5, #25
 80078f4:	d5fb      	bpl.n	80078ee <_printf_i+0x1be>
 80078f6:	8019      	strh	r1, [r3, #0]
 80078f8:	2300      	movs	r3, #0
 80078fa:	4616      	mov	r6, r2
 80078fc:	6123      	str	r3, [r4, #16]
 80078fe:	e7bc      	b.n	800787a <_printf_i+0x14a>
 8007900:	6833      	ldr	r3, [r6, #0]
 8007902:	2100      	movs	r1, #0
 8007904:	1d1a      	adds	r2, r3, #4
 8007906:	6032      	str	r2, [r6, #0]
 8007908:	681e      	ldr	r6, [r3, #0]
 800790a:	6862      	ldr	r2, [r4, #4]
 800790c:	4630      	mov	r0, r6
 800790e:	f000 fc10 	bl	8008132 <memchr>
 8007912:	b108      	cbz	r0, 8007918 <_printf_i+0x1e8>
 8007914:	1b80      	subs	r0, r0, r6
 8007916:	6060      	str	r0, [r4, #4]
 8007918:	6863      	ldr	r3, [r4, #4]
 800791a:	6123      	str	r3, [r4, #16]
 800791c:	2300      	movs	r3, #0
 800791e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007922:	e7aa      	b.n	800787a <_printf_i+0x14a>
 8007924:	4632      	mov	r2, r6
 8007926:	4649      	mov	r1, r9
 8007928:	4640      	mov	r0, r8
 800792a:	6923      	ldr	r3, [r4, #16]
 800792c:	47d0      	blx	sl
 800792e:	3001      	adds	r0, #1
 8007930:	d0ad      	beq.n	800788e <_printf_i+0x15e>
 8007932:	6823      	ldr	r3, [r4, #0]
 8007934:	079b      	lsls	r3, r3, #30
 8007936:	d413      	bmi.n	8007960 <_printf_i+0x230>
 8007938:	68e0      	ldr	r0, [r4, #12]
 800793a:	9b03      	ldr	r3, [sp, #12]
 800793c:	4298      	cmp	r0, r3
 800793e:	bfb8      	it	lt
 8007940:	4618      	movlt	r0, r3
 8007942:	e7a6      	b.n	8007892 <_printf_i+0x162>
 8007944:	2301      	movs	r3, #1
 8007946:	4632      	mov	r2, r6
 8007948:	4649      	mov	r1, r9
 800794a:	4640      	mov	r0, r8
 800794c:	47d0      	blx	sl
 800794e:	3001      	adds	r0, #1
 8007950:	d09d      	beq.n	800788e <_printf_i+0x15e>
 8007952:	3501      	adds	r5, #1
 8007954:	68e3      	ldr	r3, [r4, #12]
 8007956:	9903      	ldr	r1, [sp, #12]
 8007958:	1a5b      	subs	r3, r3, r1
 800795a:	42ab      	cmp	r3, r5
 800795c:	dcf2      	bgt.n	8007944 <_printf_i+0x214>
 800795e:	e7eb      	b.n	8007938 <_printf_i+0x208>
 8007960:	2500      	movs	r5, #0
 8007962:	f104 0619 	add.w	r6, r4, #25
 8007966:	e7f5      	b.n	8007954 <_printf_i+0x224>
 8007968:	0800bfc6 	.word	0x0800bfc6
 800796c:	0800bfd7 	.word	0x0800bfd7

08007970 <_scanf_float>:
 8007970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007974:	b087      	sub	sp, #28
 8007976:	9303      	str	r3, [sp, #12]
 8007978:	688b      	ldr	r3, [r1, #8]
 800797a:	4617      	mov	r7, r2
 800797c:	1e5a      	subs	r2, r3, #1
 800797e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8007982:	bf82      	ittt	hi
 8007984:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8007988:	eb03 0b05 	addhi.w	fp, r3, r5
 800798c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8007990:	460a      	mov	r2, r1
 8007992:	f04f 0500 	mov.w	r5, #0
 8007996:	bf88      	it	hi
 8007998:	608b      	strhi	r3, [r1, #8]
 800799a:	680b      	ldr	r3, [r1, #0]
 800799c:	4680      	mov	r8, r0
 800799e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80079a2:	f842 3b1c 	str.w	r3, [r2], #28
 80079a6:	460c      	mov	r4, r1
 80079a8:	bf98      	it	ls
 80079aa:	f04f 0b00 	movls.w	fp, #0
 80079ae:	4616      	mov	r6, r2
 80079b0:	46aa      	mov	sl, r5
 80079b2:	46a9      	mov	r9, r5
 80079b4:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80079b8:	9201      	str	r2, [sp, #4]
 80079ba:	9502      	str	r5, [sp, #8]
 80079bc:	68a2      	ldr	r2, [r4, #8]
 80079be:	b152      	cbz	r2, 80079d6 <_scanf_float+0x66>
 80079c0:	683b      	ldr	r3, [r7, #0]
 80079c2:	781b      	ldrb	r3, [r3, #0]
 80079c4:	2b4e      	cmp	r3, #78	@ 0x4e
 80079c6:	d865      	bhi.n	8007a94 <_scanf_float+0x124>
 80079c8:	2b40      	cmp	r3, #64	@ 0x40
 80079ca:	d83d      	bhi.n	8007a48 <_scanf_float+0xd8>
 80079cc:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80079d0:	b2c8      	uxtb	r0, r1
 80079d2:	280e      	cmp	r0, #14
 80079d4:	d93b      	bls.n	8007a4e <_scanf_float+0xde>
 80079d6:	f1b9 0f00 	cmp.w	r9, #0
 80079da:	d003      	beq.n	80079e4 <_scanf_float+0x74>
 80079dc:	6823      	ldr	r3, [r4, #0]
 80079de:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80079e2:	6023      	str	r3, [r4, #0]
 80079e4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80079e8:	f1ba 0f01 	cmp.w	sl, #1
 80079ec:	f200 8118 	bhi.w	8007c20 <_scanf_float+0x2b0>
 80079f0:	9b01      	ldr	r3, [sp, #4]
 80079f2:	429e      	cmp	r6, r3
 80079f4:	f200 8109 	bhi.w	8007c0a <_scanf_float+0x29a>
 80079f8:	2001      	movs	r0, #1
 80079fa:	b007      	add	sp, #28
 80079fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a00:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8007a04:	2a0d      	cmp	r2, #13
 8007a06:	d8e6      	bhi.n	80079d6 <_scanf_float+0x66>
 8007a08:	a101      	add	r1, pc, #4	@ (adr r1, 8007a10 <_scanf_float+0xa0>)
 8007a0a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007a0e:	bf00      	nop
 8007a10:	08007b57 	.word	0x08007b57
 8007a14:	080079d7 	.word	0x080079d7
 8007a18:	080079d7 	.word	0x080079d7
 8007a1c:	080079d7 	.word	0x080079d7
 8007a20:	08007bb7 	.word	0x08007bb7
 8007a24:	08007b8f 	.word	0x08007b8f
 8007a28:	080079d7 	.word	0x080079d7
 8007a2c:	080079d7 	.word	0x080079d7
 8007a30:	08007b65 	.word	0x08007b65
 8007a34:	080079d7 	.word	0x080079d7
 8007a38:	080079d7 	.word	0x080079d7
 8007a3c:	080079d7 	.word	0x080079d7
 8007a40:	080079d7 	.word	0x080079d7
 8007a44:	08007b1d 	.word	0x08007b1d
 8007a48:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8007a4c:	e7da      	b.n	8007a04 <_scanf_float+0x94>
 8007a4e:	290e      	cmp	r1, #14
 8007a50:	d8c1      	bhi.n	80079d6 <_scanf_float+0x66>
 8007a52:	a001      	add	r0, pc, #4	@ (adr r0, 8007a58 <_scanf_float+0xe8>)
 8007a54:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8007a58:	08007b0d 	.word	0x08007b0d
 8007a5c:	080079d7 	.word	0x080079d7
 8007a60:	08007b0d 	.word	0x08007b0d
 8007a64:	08007ba3 	.word	0x08007ba3
 8007a68:	080079d7 	.word	0x080079d7
 8007a6c:	08007ab5 	.word	0x08007ab5
 8007a70:	08007af3 	.word	0x08007af3
 8007a74:	08007af3 	.word	0x08007af3
 8007a78:	08007af3 	.word	0x08007af3
 8007a7c:	08007af3 	.word	0x08007af3
 8007a80:	08007af3 	.word	0x08007af3
 8007a84:	08007af3 	.word	0x08007af3
 8007a88:	08007af3 	.word	0x08007af3
 8007a8c:	08007af3 	.word	0x08007af3
 8007a90:	08007af3 	.word	0x08007af3
 8007a94:	2b6e      	cmp	r3, #110	@ 0x6e
 8007a96:	d809      	bhi.n	8007aac <_scanf_float+0x13c>
 8007a98:	2b60      	cmp	r3, #96	@ 0x60
 8007a9a:	d8b1      	bhi.n	8007a00 <_scanf_float+0x90>
 8007a9c:	2b54      	cmp	r3, #84	@ 0x54
 8007a9e:	d07b      	beq.n	8007b98 <_scanf_float+0x228>
 8007aa0:	2b59      	cmp	r3, #89	@ 0x59
 8007aa2:	d198      	bne.n	80079d6 <_scanf_float+0x66>
 8007aa4:	2d07      	cmp	r5, #7
 8007aa6:	d196      	bne.n	80079d6 <_scanf_float+0x66>
 8007aa8:	2508      	movs	r5, #8
 8007aaa:	e02c      	b.n	8007b06 <_scanf_float+0x196>
 8007aac:	2b74      	cmp	r3, #116	@ 0x74
 8007aae:	d073      	beq.n	8007b98 <_scanf_float+0x228>
 8007ab0:	2b79      	cmp	r3, #121	@ 0x79
 8007ab2:	e7f6      	b.n	8007aa2 <_scanf_float+0x132>
 8007ab4:	6821      	ldr	r1, [r4, #0]
 8007ab6:	05c8      	lsls	r0, r1, #23
 8007ab8:	d51b      	bpl.n	8007af2 <_scanf_float+0x182>
 8007aba:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8007abe:	6021      	str	r1, [r4, #0]
 8007ac0:	f109 0901 	add.w	r9, r9, #1
 8007ac4:	f1bb 0f00 	cmp.w	fp, #0
 8007ac8:	d003      	beq.n	8007ad2 <_scanf_float+0x162>
 8007aca:	3201      	adds	r2, #1
 8007acc:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007ad0:	60a2      	str	r2, [r4, #8]
 8007ad2:	68a3      	ldr	r3, [r4, #8]
 8007ad4:	3b01      	subs	r3, #1
 8007ad6:	60a3      	str	r3, [r4, #8]
 8007ad8:	6923      	ldr	r3, [r4, #16]
 8007ada:	3301      	adds	r3, #1
 8007adc:	6123      	str	r3, [r4, #16]
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	3b01      	subs	r3, #1
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	607b      	str	r3, [r7, #4]
 8007ae6:	f340 8087 	ble.w	8007bf8 <_scanf_float+0x288>
 8007aea:	683b      	ldr	r3, [r7, #0]
 8007aec:	3301      	adds	r3, #1
 8007aee:	603b      	str	r3, [r7, #0]
 8007af0:	e764      	b.n	80079bc <_scanf_float+0x4c>
 8007af2:	eb1a 0105 	adds.w	r1, sl, r5
 8007af6:	f47f af6e 	bne.w	80079d6 <_scanf_float+0x66>
 8007afa:	460d      	mov	r5, r1
 8007afc:	468a      	mov	sl, r1
 8007afe:	6822      	ldr	r2, [r4, #0]
 8007b00:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8007b04:	6022      	str	r2, [r4, #0]
 8007b06:	f806 3b01 	strb.w	r3, [r6], #1
 8007b0a:	e7e2      	b.n	8007ad2 <_scanf_float+0x162>
 8007b0c:	6822      	ldr	r2, [r4, #0]
 8007b0e:	0610      	lsls	r0, r2, #24
 8007b10:	f57f af61 	bpl.w	80079d6 <_scanf_float+0x66>
 8007b14:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007b18:	6022      	str	r2, [r4, #0]
 8007b1a:	e7f4      	b.n	8007b06 <_scanf_float+0x196>
 8007b1c:	f1ba 0f00 	cmp.w	sl, #0
 8007b20:	d10e      	bne.n	8007b40 <_scanf_float+0x1d0>
 8007b22:	f1b9 0f00 	cmp.w	r9, #0
 8007b26:	d10e      	bne.n	8007b46 <_scanf_float+0x1d6>
 8007b28:	6822      	ldr	r2, [r4, #0]
 8007b2a:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8007b2e:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8007b32:	d108      	bne.n	8007b46 <_scanf_float+0x1d6>
 8007b34:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007b38:	f04f 0a01 	mov.w	sl, #1
 8007b3c:	6022      	str	r2, [r4, #0]
 8007b3e:	e7e2      	b.n	8007b06 <_scanf_float+0x196>
 8007b40:	f1ba 0f02 	cmp.w	sl, #2
 8007b44:	d055      	beq.n	8007bf2 <_scanf_float+0x282>
 8007b46:	2d01      	cmp	r5, #1
 8007b48:	d002      	beq.n	8007b50 <_scanf_float+0x1e0>
 8007b4a:	2d04      	cmp	r5, #4
 8007b4c:	f47f af43 	bne.w	80079d6 <_scanf_float+0x66>
 8007b50:	3501      	adds	r5, #1
 8007b52:	b2ed      	uxtb	r5, r5
 8007b54:	e7d7      	b.n	8007b06 <_scanf_float+0x196>
 8007b56:	f1ba 0f01 	cmp.w	sl, #1
 8007b5a:	f47f af3c 	bne.w	80079d6 <_scanf_float+0x66>
 8007b5e:	f04f 0a02 	mov.w	sl, #2
 8007b62:	e7d0      	b.n	8007b06 <_scanf_float+0x196>
 8007b64:	b97d      	cbnz	r5, 8007b86 <_scanf_float+0x216>
 8007b66:	f1b9 0f00 	cmp.w	r9, #0
 8007b6a:	f47f af37 	bne.w	80079dc <_scanf_float+0x6c>
 8007b6e:	6822      	ldr	r2, [r4, #0]
 8007b70:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8007b74:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8007b78:	f040 8103 	bne.w	8007d82 <_scanf_float+0x412>
 8007b7c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007b80:	2501      	movs	r5, #1
 8007b82:	6022      	str	r2, [r4, #0]
 8007b84:	e7bf      	b.n	8007b06 <_scanf_float+0x196>
 8007b86:	2d03      	cmp	r5, #3
 8007b88:	d0e2      	beq.n	8007b50 <_scanf_float+0x1e0>
 8007b8a:	2d05      	cmp	r5, #5
 8007b8c:	e7de      	b.n	8007b4c <_scanf_float+0x1dc>
 8007b8e:	2d02      	cmp	r5, #2
 8007b90:	f47f af21 	bne.w	80079d6 <_scanf_float+0x66>
 8007b94:	2503      	movs	r5, #3
 8007b96:	e7b6      	b.n	8007b06 <_scanf_float+0x196>
 8007b98:	2d06      	cmp	r5, #6
 8007b9a:	f47f af1c 	bne.w	80079d6 <_scanf_float+0x66>
 8007b9e:	2507      	movs	r5, #7
 8007ba0:	e7b1      	b.n	8007b06 <_scanf_float+0x196>
 8007ba2:	6822      	ldr	r2, [r4, #0]
 8007ba4:	0591      	lsls	r1, r2, #22
 8007ba6:	f57f af16 	bpl.w	80079d6 <_scanf_float+0x66>
 8007baa:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8007bae:	6022      	str	r2, [r4, #0]
 8007bb0:	f8cd 9008 	str.w	r9, [sp, #8]
 8007bb4:	e7a7      	b.n	8007b06 <_scanf_float+0x196>
 8007bb6:	6822      	ldr	r2, [r4, #0]
 8007bb8:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8007bbc:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8007bc0:	d006      	beq.n	8007bd0 <_scanf_float+0x260>
 8007bc2:	0550      	lsls	r0, r2, #21
 8007bc4:	f57f af07 	bpl.w	80079d6 <_scanf_float+0x66>
 8007bc8:	f1b9 0f00 	cmp.w	r9, #0
 8007bcc:	f000 80d9 	beq.w	8007d82 <_scanf_float+0x412>
 8007bd0:	0591      	lsls	r1, r2, #22
 8007bd2:	bf58      	it	pl
 8007bd4:	9902      	ldrpl	r1, [sp, #8]
 8007bd6:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007bda:	bf58      	it	pl
 8007bdc:	eba9 0101 	subpl.w	r1, r9, r1
 8007be0:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8007be4:	f04f 0900 	mov.w	r9, #0
 8007be8:	bf58      	it	pl
 8007bea:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8007bee:	6022      	str	r2, [r4, #0]
 8007bf0:	e789      	b.n	8007b06 <_scanf_float+0x196>
 8007bf2:	f04f 0a03 	mov.w	sl, #3
 8007bf6:	e786      	b.n	8007b06 <_scanf_float+0x196>
 8007bf8:	4639      	mov	r1, r7
 8007bfa:	4640      	mov	r0, r8
 8007bfc:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8007c00:	4798      	blx	r3
 8007c02:	2800      	cmp	r0, #0
 8007c04:	f43f aeda 	beq.w	80079bc <_scanf_float+0x4c>
 8007c08:	e6e5      	b.n	80079d6 <_scanf_float+0x66>
 8007c0a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007c0e:	463a      	mov	r2, r7
 8007c10:	4640      	mov	r0, r8
 8007c12:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007c16:	4798      	blx	r3
 8007c18:	6923      	ldr	r3, [r4, #16]
 8007c1a:	3b01      	subs	r3, #1
 8007c1c:	6123      	str	r3, [r4, #16]
 8007c1e:	e6e7      	b.n	80079f0 <_scanf_float+0x80>
 8007c20:	1e6b      	subs	r3, r5, #1
 8007c22:	2b06      	cmp	r3, #6
 8007c24:	d824      	bhi.n	8007c70 <_scanf_float+0x300>
 8007c26:	2d02      	cmp	r5, #2
 8007c28:	d836      	bhi.n	8007c98 <_scanf_float+0x328>
 8007c2a:	9b01      	ldr	r3, [sp, #4]
 8007c2c:	429e      	cmp	r6, r3
 8007c2e:	f67f aee3 	bls.w	80079f8 <_scanf_float+0x88>
 8007c32:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007c36:	463a      	mov	r2, r7
 8007c38:	4640      	mov	r0, r8
 8007c3a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007c3e:	4798      	blx	r3
 8007c40:	6923      	ldr	r3, [r4, #16]
 8007c42:	3b01      	subs	r3, #1
 8007c44:	6123      	str	r3, [r4, #16]
 8007c46:	e7f0      	b.n	8007c2a <_scanf_float+0x2ba>
 8007c48:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007c4c:	463a      	mov	r2, r7
 8007c4e:	4640      	mov	r0, r8
 8007c50:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8007c54:	4798      	blx	r3
 8007c56:	6923      	ldr	r3, [r4, #16]
 8007c58:	3b01      	subs	r3, #1
 8007c5a:	6123      	str	r3, [r4, #16]
 8007c5c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007c60:	fa5f fa8a 	uxtb.w	sl, sl
 8007c64:	f1ba 0f02 	cmp.w	sl, #2
 8007c68:	d1ee      	bne.n	8007c48 <_scanf_float+0x2d8>
 8007c6a:	3d03      	subs	r5, #3
 8007c6c:	b2ed      	uxtb	r5, r5
 8007c6e:	1b76      	subs	r6, r6, r5
 8007c70:	6823      	ldr	r3, [r4, #0]
 8007c72:	05da      	lsls	r2, r3, #23
 8007c74:	d530      	bpl.n	8007cd8 <_scanf_float+0x368>
 8007c76:	055b      	lsls	r3, r3, #21
 8007c78:	d511      	bpl.n	8007c9e <_scanf_float+0x32e>
 8007c7a:	9b01      	ldr	r3, [sp, #4]
 8007c7c:	429e      	cmp	r6, r3
 8007c7e:	f67f aebb 	bls.w	80079f8 <_scanf_float+0x88>
 8007c82:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007c86:	463a      	mov	r2, r7
 8007c88:	4640      	mov	r0, r8
 8007c8a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007c8e:	4798      	blx	r3
 8007c90:	6923      	ldr	r3, [r4, #16]
 8007c92:	3b01      	subs	r3, #1
 8007c94:	6123      	str	r3, [r4, #16]
 8007c96:	e7f0      	b.n	8007c7a <_scanf_float+0x30a>
 8007c98:	46aa      	mov	sl, r5
 8007c9a:	46b3      	mov	fp, r6
 8007c9c:	e7de      	b.n	8007c5c <_scanf_float+0x2ec>
 8007c9e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8007ca2:	6923      	ldr	r3, [r4, #16]
 8007ca4:	2965      	cmp	r1, #101	@ 0x65
 8007ca6:	f103 33ff 	add.w	r3, r3, #4294967295
 8007caa:	f106 35ff 	add.w	r5, r6, #4294967295
 8007cae:	6123      	str	r3, [r4, #16]
 8007cb0:	d00c      	beq.n	8007ccc <_scanf_float+0x35c>
 8007cb2:	2945      	cmp	r1, #69	@ 0x45
 8007cb4:	d00a      	beq.n	8007ccc <_scanf_float+0x35c>
 8007cb6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007cba:	463a      	mov	r2, r7
 8007cbc:	4640      	mov	r0, r8
 8007cbe:	4798      	blx	r3
 8007cc0:	6923      	ldr	r3, [r4, #16]
 8007cc2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8007cc6:	3b01      	subs	r3, #1
 8007cc8:	1eb5      	subs	r5, r6, #2
 8007cca:	6123      	str	r3, [r4, #16]
 8007ccc:	463a      	mov	r2, r7
 8007cce:	4640      	mov	r0, r8
 8007cd0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007cd4:	4798      	blx	r3
 8007cd6:	462e      	mov	r6, r5
 8007cd8:	6822      	ldr	r2, [r4, #0]
 8007cda:	f012 0210 	ands.w	r2, r2, #16
 8007cde:	d001      	beq.n	8007ce4 <_scanf_float+0x374>
 8007ce0:	2000      	movs	r0, #0
 8007ce2:	e68a      	b.n	80079fa <_scanf_float+0x8a>
 8007ce4:	7032      	strb	r2, [r6, #0]
 8007ce6:	6823      	ldr	r3, [r4, #0]
 8007ce8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007cec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007cf0:	d11c      	bne.n	8007d2c <_scanf_float+0x3bc>
 8007cf2:	9b02      	ldr	r3, [sp, #8]
 8007cf4:	454b      	cmp	r3, r9
 8007cf6:	eba3 0209 	sub.w	r2, r3, r9
 8007cfa:	d123      	bne.n	8007d44 <_scanf_float+0x3d4>
 8007cfc:	2200      	movs	r2, #0
 8007cfe:	4640      	mov	r0, r8
 8007d00:	9901      	ldr	r1, [sp, #4]
 8007d02:	f002 fc29 	bl	800a558 <_strtod_r>
 8007d06:	9b03      	ldr	r3, [sp, #12]
 8007d08:	6825      	ldr	r5, [r4, #0]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	f015 0f02 	tst.w	r5, #2
 8007d10:	4606      	mov	r6, r0
 8007d12:	460f      	mov	r7, r1
 8007d14:	f103 0204 	add.w	r2, r3, #4
 8007d18:	d01f      	beq.n	8007d5a <_scanf_float+0x3ea>
 8007d1a:	9903      	ldr	r1, [sp, #12]
 8007d1c:	600a      	str	r2, [r1, #0]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	e9c3 6700 	strd	r6, r7, [r3]
 8007d24:	68e3      	ldr	r3, [r4, #12]
 8007d26:	3301      	adds	r3, #1
 8007d28:	60e3      	str	r3, [r4, #12]
 8007d2a:	e7d9      	b.n	8007ce0 <_scanf_float+0x370>
 8007d2c:	9b04      	ldr	r3, [sp, #16]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d0e4      	beq.n	8007cfc <_scanf_float+0x38c>
 8007d32:	9905      	ldr	r1, [sp, #20]
 8007d34:	230a      	movs	r3, #10
 8007d36:	4640      	mov	r0, r8
 8007d38:	3101      	adds	r1, #1
 8007d3a:	f002 fc8d 	bl	800a658 <_strtol_r>
 8007d3e:	9b04      	ldr	r3, [sp, #16]
 8007d40:	9e05      	ldr	r6, [sp, #20]
 8007d42:	1ac2      	subs	r2, r0, r3
 8007d44:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8007d48:	429e      	cmp	r6, r3
 8007d4a:	bf28      	it	cs
 8007d4c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8007d50:	4630      	mov	r0, r6
 8007d52:	490d      	ldr	r1, [pc, #52]	@ (8007d88 <_scanf_float+0x418>)
 8007d54:	f000 f8f0 	bl	8007f38 <siprintf>
 8007d58:	e7d0      	b.n	8007cfc <_scanf_float+0x38c>
 8007d5a:	076d      	lsls	r5, r5, #29
 8007d5c:	d4dd      	bmi.n	8007d1a <_scanf_float+0x3aa>
 8007d5e:	9d03      	ldr	r5, [sp, #12]
 8007d60:	602a      	str	r2, [r5, #0]
 8007d62:	681d      	ldr	r5, [r3, #0]
 8007d64:	4602      	mov	r2, r0
 8007d66:	460b      	mov	r3, r1
 8007d68:	f7f8 fe50 	bl	8000a0c <__aeabi_dcmpun>
 8007d6c:	b120      	cbz	r0, 8007d78 <_scanf_float+0x408>
 8007d6e:	4807      	ldr	r0, [pc, #28]	@ (8007d8c <_scanf_float+0x41c>)
 8007d70:	f000 f9fc 	bl	800816c <nanf>
 8007d74:	6028      	str	r0, [r5, #0]
 8007d76:	e7d5      	b.n	8007d24 <_scanf_float+0x3b4>
 8007d78:	4630      	mov	r0, r6
 8007d7a:	4639      	mov	r1, r7
 8007d7c:	f7f8 fea4 	bl	8000ac8 <__aeabi_d2f>
 8007d80:	e7f8      	b.n	8007d74 <_scanf_float+0x404>
 8007d82:	f04f 0900 	mov.w	r9, #0
 8007d86:	e62d      	b.n	80079e4 <_scanf_float+0x74>
 8007d88:	0800bfe8 	.word	0x0800bfe8
 8007d8c:	0800c37d 	.word	0x0800c37d

08007d90 <std>:
 8007d90:	2300      	movs	r3, #0
 8007d92:	b510      	push	{r4, lr}
 8007d94:	4604      	mov	r4, r0
 8007d96:	e9c0 3300 	strd	r3, r3, [r0]
 8007d9a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007d9e:	6083      	str	r3, [r0, #8]
 8007da0:	8181      	strh	r1, [r0, #12]
 8007da2:	6643      	str	r3, [r0, #100]	@ 0x64
 8007da4:	81c2      	strh	r2, [r0, #14]
 8007da6:	6183      	str	r3, [r0, #24]
 8007da8:	4619      	mov	r1, r3
 8007daa:	2208      	movs	r2, #8
 8007dac:	305c      	adds	r0, #92	@ 0x5c
 8007dae:	f000 f940 	bl	8008032 <memset>
 8007db2:	4b0d      	ldr	r3, [pc, #52]	@ (8007de8 <std+0x58>)
 8007db4:	6224      	str	r4, [r4, #32]
 8007db6:	6263      	str	r3, [r4, #36]	@ 0x24
 8007db8:	4b0c      	ldr	r3, [pc, #48]	@ (8007dec <std+0x5c>)
 8007dba:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007dbc:	4b0c      	ldr	r3, [pc, #48]	@ (8007df0 <std+0x60>)
 8007dbe:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007dc0:	4b0c      	ldr	r3, [pc, #48]	@ (8007df4 <std+0x64>)
 8007dc2:	6323      	str	r3, [r4, #48]	@ 0x30
 8007dc4:	4b0c      	ldr	r3, [pc, #48]	@ (8007df8 <std+0x68>)
 8007dc6:	429c      	cmp	r4, r3
 8007dc8:	d006      	beq.n	8007dd8 <std+0x48>
 8007dca:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007dce:	4294      	cmp	r4, r2
 8007dd0:	d002      	beq.n	8007dd8 <std+0x48>
 8007dd2:	33d0      	adds	r3, #208	@ 0xd0
 8007dd4:	429c      	cmp	r4, r3
 8007dd6:	d105      	bne.n	8007de4 <std+0x54>
 8007dd8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007ddc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007de0:	f000 b9a4 	b.w	800812c <__retarget_lock_init_recursive>
 8007de4:	bd10      	pop	{r4, pc}
 8007de6:	bf00      	nop
 8007de8:	08007f79 	.word	0x08007f79
 8007dec:	08007f9b 	.word	0x08007f9b
 8007df0:	08007fd3 	.word	0x08007fd3
 8007df4:	08007ff7 	.word	0x08007ff7
 8007df8:	200007a4 	.word	0x200007a4

08007dfc <stdio_exit_handler>:
 8007dfc:	4a02      	ldr	r2, [pc, #8]	@ (8007e08 <stdio_exit_handler+0xc>)
 8007dfe:	4903      	ldr	r1, [pc, #12]	@ (8007e0c <stdio_exit_handler+0x10>)
 8007e00:	4803      	ldr	r0, [pc, #12]	@ (8007e10 <stdio_exit_handler+0x14>)
 8007e02:	f000 b869 	b.w	8007ed8 <_fwalk_sglue>
 8007e06:	bf00      	nop
 8007e08:	20000024 	.word	0x20000024
 8007e0c:	0800ac8d 	.word	0x0800ac8d
 8007e10:	20000034 	.word	0x20000034

08007e14 <cleanup_stdio>:
 8007e14:	6841      	ldr	r1, [r0, #4]
 8007e16:	4b0c      	ldr	r3, [pc, #48]	@ (8007e48 <cleanup_stdio+0x34>)
 8007e18:	b510      	push	{r4, lr}
 8007e1a:	4299      	cmp	r1, r3
 8007e1c:	4604      	mov	r4, r0
 8007e1e:	d001      	beq.n	8007e24 <cleanup_stdio+0x10>
 8007e20:	f002 ff34 	bl	800ac8c <_fflush_r>
 8007e24:	68a1      	ldr	r1, [r4, #8]
 8007e26:	4b09      	ldr	r3, [pc, #36]	@ (8007e4c <cleanup_stdio+0x38>)
 8007e28:	4299      	cmp	r1, r3
 8007e2a:	d002      	beq.n	8007e32 <cleanup_stdio+0x1e>
 8007e2c:	4620      	mov	r0, r4
 8007e2e:	f002 ff2d 	bl	800ac8c <_fflush_r>
 8007e32:	68e1      	ldr	r1, [r4, #12]
 8007e34:	4b06      	ldr	r3, [pc, #24]	@ (8007e50 <cleanup_stdio+0x3c>)
 8007e36:	4299      	cmp	r1, r3
 8007e38:	d004      	beq.n	8007e44 <cleanup_stdio+0x30>
 8007e3a:	4620      	mov	r0, r4
 8007e3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e40:	f002 bf24 	b.w	800ac8c <_fflush_r>
 8007e44:	bd10      	pop	{r4, pc}
 8007e46:	bf00      	nop
 8007e48:	200007a4 	.word	0x200007a4
 8007e4c:	2000080c 	.word	0x2000080c
 8007e50:	20000874 	.word	0x20000874

08007e54 <global_stdio_init.part.0>:
 8007e54:	b510      	push	{r4, lr}
 8007e56:	4b0b      	ldr	r3, [pc, #44]	@ (8007e84 <global_stdio_init.part.0+0x30>)
 8007e58:	4c0b      	ldr	r4, [pc, #44]	@ (8007e88 <global_stdio_init.part.0+0x34>)
 8007e5a:	4a0c      	ldr	r2, [pc, #48]	@ (8007e8c <global_stdio_init.part.0+0x38>)
 8007e5c:	4620      	mov	r0, r4
 8007e5e:	601a      	str	r2, [r3, #0]
 8007e60:	2104      	movs	r1, #4
 8007e62:	2200      	movs	r2, #0
 8007e64:	f7ff ff94 	bl	8007d90 <std>
 8007e68:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007e6c:	2201      	movs	r2, #1
 8007e6e:	2109      	movs	r1, #9
 8007e70:	f7ff ff8e 	bl	8007d90 <std>
 8007e74:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007e78:	2202      	movs	r2, #2
 8007e7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e7e:	2112      	movs	r1, #18
 8007e80:	f7ff bf86 	b.w	8007d90 <std>
 8007e84:	200008dc 	.word	0x200008dc
 8007e88:	200007a4 	.word	0x200007a4
 8007e8c:	08007dfd 	.word	0x08007dfd

08007e90 <__sfp_lock_acquire>:
 8007e90:	4801      	ldr	r0, [pc, #4]	@ (8007e98 <__sfp_lock_acquire+0x8>)
 8007e92:	f000 b94c 	b.w	800812e <__retarget_lock_acquire_recursive>
 8007e96:	bf00      	nop
 8007e98:	200008e5 	.word	0x200008e5

08007e9c <__sfp_lock_release>:
 8007e9c:	4801      	ldr	r0, [pc, #4]	@ (8007ea4 <__sfp_lock_release+0x8>)
 8007e9e:	f000 b947 	b.w	8008130 <__retarget_lock_release_recursive>
 8007ea2:	bf00      	nop
 8007ea4:	200008e5 	.word	0x200008e5

08007ea8 <__sinit>:
 8007ea8:	b510      	push	{r4, lr}
 8007eaa:	4604      	mov	r4, r0
 8007eac:	f7ff fff0 	bl	8007e90 <__sfp_lock_acquire>
 8007eb0:	6a23      	ldr	r3, [r4, #32]
 8007eb2:	b11b      	cbz	r3, 8007ebc <__sinit+0x14>
 8007eb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007eb8:	f7ff bff0 	b.w	8007e9c <__sfp_lock_release>
 8007ebc:	4b04      	ldr	r3, [pc, #16]	@ (8007ed0 <__sinit+0x28>)
 8007ebe:	6223      	str	r3, [r4, #32]
 8007ec0:	4b04      	ldr	r3, [pc, #16]	@ (8007ed4 <__sinit+0x2c>)
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d1f5      	bne.n	8007eb4 <__sinit+0xc>
 8007ec8:	f7ff ffc4 	bl	8007e54 <global_stdio_init.part.0>
 8007ecc:	e7f2      	b.n	8007eb4 <__sinit+0xc>
 8007ece:	bf00      	nop
 8007ed0:	08007e15 	.word	0x08007e15
 8007ed4:	200008dc 	.word	0x200008dc

08007ed8 <_fwalk_sglue>:
 8007ed8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007edc:	4607      	mov	r7, r0
 8007ede:	4688      	mov	r8, r1
 8007ee0:	4614      	mov	r4, r2
 8007ee2:	2600      	movs	r6, #0
 8007ee4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007ee8:	f1b9 0901 	subs.w	r9, r9, #1
 8007eec:	d505      	bpl.n	8007efa <_fwalk_sglue+0x22>
 8007eee:	6824      	ldr	r4, [r4, #0]
 8007ef0:	2c00      	cmp	r4, #0
 8007ef2:	d1f7      	bne.n	8007ee4 <_fwalk_sglue+0xc>
 8007ef4:	4630      	mov	r0, r6
 8007ef6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007efa:	89ab      	ldrh	r3, [r5, #12]
 8007efc:	2b01      	cmp	r3, #1
 8007efe:	d907      	bls.n	8007f10 <_fwalk_sglue+0x38>
 8007f00:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007f04:	3301      	adds	r3, #1
 8007f06:	d003      	beq.n	8007f10 <_fwalk_sglue+0x38>
 8007f08:	4629      	mov	r1, r5
 8007f0a:	4638      	mov	r0, r7
 8007f0c:	47c0      	blx	r8
 8007f0e:	4306      	orrs	r6, r0
 8007f10:	3568      	adds	r5, #104	@ 0x68
 8007f12:	e7e9      	b.n	8007ee8 <_fwalk_sglue+0x10>

08007f14 <iprintf>:
 8007f14:	b40f      	push	{r0, r1, r2, r3}
 8007f16:	b507      	push	{r0, r1, r2, lr}
 8007f18:	4906      	ldr	r1, [pc, #24]	@ (8007f34 <iprintf+0x20>)
 8007f1a:	ab04      	add	r3, sp, #16
 8007f1c:	6808      	ldr	r0, [r1, #0]
 8007f1e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f22:	6881      	ldr	r1, [r0, #8]
 8007f24:	9301      	str	r3, [sp, #4]
 8007f26:	f002 fd19 	bl	800a95c <_vfiprintf_r>
 8007f2a:	b003      	add	sp, #12
 8007f2c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007f30:	b004      	add	sp, #16
 8007f32:	4770      	bx	lr
 8007f34:	20000030 	.word	0x20000030

08007f38 <siprintf>:
 8007f38:	b40e      	push	{r1, r2, r3}
 8007f3a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007f3e:	b500      	push	{lr}
 8007f40:	b09c      	sub	sp, #112	@ 0x70
 8007f42:	ab1d      	add	r3, sp, #116	@ 0x74
 8007f44:	9002      	str	r0, [sp, #8]
 8007f46:	9006      	str	r0, [sp, #24]
 8007f48:	9107      	str	r1, [sp, #28]
 8007f4a:	9104      	str	r1, [sp, #16]
 8007f4c:	4808      	ldr	r0, [pc, #32]	@ (8007f70 <siprintf+0x38>)
 8007f4e:	4909      	ldr	r1, [pc, #36]	@ (8007f74 <siprintf+0x3c>)
 8007f50:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f54:	9105      	str	r1, [sp, #20]
 8007f56:	6800      	ldr	r0, [r0, #0]
 8007f58:	a902      	add	r1, sp, #8
 8007f5a:	9301      	str	r3, [sp, #4]
 8007f5c:	f002 fbda 	bl	800a714 <_svfiprintf_r>
 8007f60:	2200      	movs	r2, #0
 8007f62:	9b02      	ldr	r3, [sp, #8]
 8007f64:	701a      	strb	r2, [r3, #0]
 8007f66:	b01c      	add	sp, #112	@ 0x70
 8007f68:	f85d eb04 	ldr.w	lr, [sp], #4
 8007f6c:	b003      	add	sp, #12
 8007f6e:	4770      	bx	lr
 8007f70:	20000030 	.word	0x20000030
 8007f74:	ffff0208 	.word	0xffff0208

08007f78 <__sread>:
 8007f78:	b510      	push	{r4, lr}
 8007f7a:	460c      	mov	r4, r1
 8007f7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f80:	f000 f886 	bl	8008090 <_read_r>
 8007f84:	2800      	cmp	r0, #0
 8007f86:	bfab      	itete	ge
 8007f88:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007f8a:	89a3      	ldrhlt	r3, [r4, #12]
 8007f8c:	181b      	addge	r3, r3, r0
 8007f8e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007f92:	bfac      	ite	ge
 8007f94:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007f96:	81a3      	strhlt	r3, [r4, #12]
 8007f98:	bd10      	pop	{r4, pc}

08007f9a <__swrite>:
 8007f9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f9e:	461f      	mov	r7, r3
 8007fa0:	898b      	ldrh	r3, [r1, #12]
 8007fa2:	4605      	mov	r5, r0
 8007fa4:	05db      	lsls	r3, r3, #23
 8007fa6:	460c      	mov	r4, r1
 8007fa8:	4616      	mov	r6, r2
 8007faa:	d505      	bpl.n	8007fb8 <__swrite+0x1e>
 8007fac:	2302      	movs	r3, #2
 8007fae:	2200      	movs	r2, #0
 8007fb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007fb4:	f000 f85a 	bl	800806c <_lseek_r>
 8007fb8:	89a3      	ldrh	r3, [r4, #12]
 8007fba:	4632      	mov	r2, r6
 8007fbc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007fc0:	81a3      	strh	r3, [r4, #12]
 8007fc2:	4628      	mov	r0, r5
 8007fc4:	463b      	mov	r3, r7
 8007fc6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007fca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007fce:	f000 b871 	b.w	80080b4 <_write_r>

08007fd2 <__sseek>:
 8007fd2:	b510      	push	{r4, lr}
 8007fd4:	460c      	mov	r4, r1
 8007fd6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007fda:	f000 f847 	bl	800806c <_lseek_r>
 8007fde:	1c43      	adds	r3, r0, #1
 8007fe0:	89a3      	ldrh	r3, [r4, #12]
 8007fe2:	bf15      	itete	ne
 8007fe4:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007fe6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007fea:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007fee:	81a3      	strheq	r3, [r4, #12]
 8007ff0:	bf18      	it	ne
 8007ff2:	81a3      	strhne	r3, [r4, #12]
 8007ff4:	bd10      	pop	{r4, pc}

08007ff6 <__sclose>:
 8007ff6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ffa:	f000 b827 	b.w	800804c <_close_r>

08007ffe <memmove>:
 8007ffe:	4288      	cmp	r0, r1
 8008000:	b510      	push	{r4, lr}
 8008002:	eb01 0402 	add.w	r4, r1, r2
 8008006:	d902      	bls.n	800800e <memmove+0x10>
 8008008:	4284      	cmp	r4, r0
 800800a:	4623      	mov	r3, r4
 800800c:	d807      	bhi.n	800801e <memmove+0x20>
 800800e:	1e43      	subs	r3, r0, #1
 8008010:	42a1      	cmp	r1, r4
 8008012:	d008      	beq.n	8008026 <memmove+0x28>
 8008014:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008018:	f803 2f01 	strb.w	r2, [r3, #1]!
 800801c:	e7f8      	b.n	8008010 <memmove+0x12>
 800801e:	4601      	mov	r1, r0
 8008020:	4402      	add	r2, r0
 8008022:	428a      	cmp	r2, r1
 8008024:	d100      	bne.n	8008028 <memmove+0x2a>
 8008026:	bd10      	pop	{r4, pc}
 8008028:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800802c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008030:	e7f7      	b.n	8008022 <memmove+0x24>

08008032 <memset>:
 8008032:	4603      	mov	r3, r0
 8008034:	4402      	add	r2, r0
 8008036:	4293      	cmp	r3, r2
 8008038:	d100      	bne.n	800803c <memset+0xa>
 800803a:	4770      	bx	lr
 800803c:	f803 1b01 	strb.w	r1, [r3], #1
 8008040:	e7f9      	b.n	8008036 <memset+0x4>
	...

08008044 <_localeconv_r>:
 8008044:	4800      	ldr	r0, [pc, #0]	@ (8008048 <_localeconv_r+0x4>)
 8008046:	4770      	bx	lr
 8008048:	20000170 	.word	0x20000170

0800804c <_close_r>:
 800804c:	b538      	push	{r3, r4, r5, lr}
 800804e:	2300      	movs	r3, #0
 8008050:	4d05      	ldr	r5, [pc, #20]	@ (8008068 <_close_r+0x1c>)
 8008052:	4604      	mov	r4, r0
 8008054:	4608      	mov	r0, r1
 8008056:	602b      	str	r3, [r5, #0]
 8008058:	f7f9 fa21 	bl	800149e <_close>
 800805c:	1c43      	adds	r3, r0, #1
 800805e:	d102      	bne.n	8008066 <_close_r+0x1a>
 8008060:	682b      	ldr	r3, [r5, #0]
 8008062:	b103      	cbz	r3, 8008066 <_close_r+0x1a>
 8008064:	6023      	str	r3, [r4, #0]
 8008066:	bd38      	pop	{r3, r4, r5, pc}
 8008068:	200008e0 	.word	0x200008e0

0800806c <_lseek_r>:
 800806c:	b538      	push	{r3, r4, r5, lr}
 800806e:	4604      	mov	r4, r0
 8008070:	4608      	mov	r0, r1
 8008072:	4611      	mov	r1, r2
 8008074:	2200      	movs	r2, #0
 8008076:	4d05      	ldr	r5, [pc, #20]	@ (800808c <_lseek_r+0x20>)
 8008078:	602a      	str	r2, [r5, #0]
 800807a:	461a      	mov	r2, r3
 800807c:	f7f9 fa33 	bl	80014e6 <_lseek>
 8008080:	1c43      	adds	r3, r0, #1
 8008082:	d102      	bne.n	800808a <_lseek_r+0x1e>
 8008084:	682b      	ldr	r3, [r5, #0]
 8008086:	b103      	cbz	r3, 800808a <_lseek_r+0x1e>
 8008088:	6023      	str	r3, [r4, #0]
 800808a:	bd38      	pop	{r3, r4, r5, pc}
 800808c:	200008e0 	.word	0x200008e0

08008090 <_read_r>:
 8008090:	b538      	push	{r3, r4, r5, lr}
 8008092:	4604      	mov	r4, r0
 8008094:	4608      	mov	r0, r1
 8008096:	4611      	mov	r1, r2
 8008098:	2200      	movs	r2, #0
 800809a:	4d05      	ldr	r5, [pc, #20]	@ (80080b0 <_read_r+0x20>)
 800809c:	602a      	str	r2, [r5, #0]
 800809e:	461a      	mov	r2, r3
 80080a0:	f7f9 f9c4 	bl	800142c <_read>
 80080a4:	1c43      	adds	r3, r0, #1
 80080a6:	d102      	bne.n	80080ae <_read_r+0x1e>
 80080a8:	682b      	ldr	r3, [r5, #0]
 80080aa:	b103      	cbz	r3, 80080ae <_read_r+0x1e>
 80080ac:	6023      	str	r3, [r4, #0]
 80080ae:	bd38      	pop	{r3, r4, r5, pc}
 80080b0:	200008e0 	.word	0x200008e0

080080b4 <_write_r>:
 80080b4:	b538      	push	{r3, r4, r5, lr}
 80080b6:	4604      	mov	r4, r0
 80080b8:	4608      	mov	r0, r1
 80080ba:	4611      	mov	r1, r2
 80080bc:	2200      	movs	r2, #0
 80080be:	4d05      	ldr	r5, [pc, #20]	@ (80080d4 <_write_r+0x20>)
 80080c0:	602a      	str	r2, [r5, #0]
 80080c2:	461a      	mov	r2, r3
 80080c4:	f7f9 f9cf 	bl	8001466 <_write>
 80080c8:	1c43      	adds	r3, r0, #1
 80080ca:	d102      	bne.n	80080d2 <_write_r+0x1e>
 80080cc:	682b      	ldr	r3, [r5, #0]
 80080ce:	b103      	cbz	r3, 80080d2 <_write_r+0x1e>
 80080d0:	6023      	str	r3, [r4, #0]
 80080d2:	bd38      	pop	{r3, r4, r5, pc}
 80080d4:	200008e0 	.word	0x200008e0

080080d8 <__errno>:
 80080d8:	4b01      	ldr	r3, [pc, #4]	@ (80080e0 <__errno+0x8>)
 80080da:	6818      	ldr	r0, [r3, #0]
 80080dc:	4770      	bx	lr
 80080de:	bf00      	nop
 80080e0:	20000030 	.word	0x20000030

080080e4 <__libc_init_array>:
 80080e4:	b570      	push	{r4, r5, r6, lr}
 80080e6:	2600      	movs	r6, #0
 80080e8:	4d0c      	ldr	r5, [pc, #48]	@ (800811c <__libc_init_array+0x38>)
 80080ea:	4c0d      	ldr	r4, [pc, #52]	@ (8008120 <__libc_init_array+0x3c>)
 80080ec:	1b64      	subs	r4, r4, r5
 80080ee:	10a4      	asrs	r4, r4, #2
 80080f0:	42a6      	cmp	r6, r4
 80080f2:	d109      	bne.n	8008108 <__libc_init_array+0x24>
 80080f4:	f003 fb50 	bl	800b798 <_init>
 80080f8:	2600      	movs	r6, #0
 80080fa:	4d0a      	ldr	r5, [pc, #40]	@ (8008124 <__libc_init_array+0x40>)
 80080fc:	4c0a      	ldr	r4, [pc, #40]	@ (8008128 <__libc_init_array+0x44>)
 80080fe:	1b64      	subs	r4, r4, r5
 8008100:	10a4      	asrs	r4, r4, #2
 8008102:	42a6      	cmp	r6, r4
 8008104:	d105      	bne.n	8008112 <__libc_init_array+0x2e>
 8008106:	bd70      	pop	{r4, r5, r6, pc}
 8008108:	f855 3b04 	ldr.w	r3, [r5], #4
 800810c:	4798      	blx	r3
 800810e:	3601      	adds	r6, #1
 8008110:	e7ee      	b.n	80080f0 <__libc_init_array+0xc>
 8008112:	f855 3b04 	ldr.w	r3, [r5], #4
 8008116:	4798      	blx	r3
 8008118:	3601      	adds	r6, #1
 800811a:	e7f2      	b.n	8008102 <__libc_init_array+0x1e>
 800811c:	0800c3e8 	.word	0x0800c3e8
 8008120:	0800c3e8 	.word	0x0800c3e8
 8008124:	0800c3e8 	.word	0x0800c3e8
 8008128:	0800c3ec 	.word	0x0800c3ec

0800812c <__retarget_lock_init_recursive>:
 800812c:	4770      	bx	lr

0800812e <__retarget_lock_acquire_recursive>:
 800812e:	4770      	bx	lr

08008130 <__retarget_lock_release_recursive>:
 8008130:	4770      	bx	lr

08008132 <memchr>:
 8008132:	4603      	mov	r3, r0
 8008134:	b510      	push	{r4, lr}
 8008136:	b2c9      	uxtb	r1, r1
 8008138:	4402      	add	r2, r0
 800813a:	4293      	cmp	r3, r2
 800813c:	4618      	mov	r0, r3
 800813e:	d101      	bne.n	8008144 <memchr+0x12>
 8008140:	2000      	movs	r0, #0
 8008142:	e003      	b.n	800814c <memchr+0x1a>
 8008144:	7804      	ldrb	r4, [r0, #0]
 8008146:	3301      	adds	r3, #1
 8008148:	428c      	cmp	r4, r1
 800814a:	d1f6      	bne.n	800813a <memchr+0x8>
 800814c:	bd10      	pop	{r4, pc}

0800814e <memcpy>:
 800814e:	440a      	add	r2, r1
 8008150:	4291      	cmp	r1, r2
 8008152:	f100 33ff 	add.w	r3, r0, #4294967295
 8008156:	d100      	bne.n	800815a <memcpy+0xc>
 8008158:	4770      	bx	lr
 800815a:	b510      	push	{r4, lr}
 800815c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008160:	4291      	cmp	r1, r2
 8008162:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008166:	d1f9      	bne.n	800815c <memcpy+0xe>
 8008168:	bd10      	pop	{r4, pc}
	...

0800816c <nanf>:
 800816c:	4800      	ldr	r0, [pc, #0]	@ (8008170 <nanf+0x4>)
 800816e:	4770      	bx	lr
 8008170:	7fc00000 	.word	0x7fc00000

08008174 <quorem>:
 8008174:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008178:	6903      	ldr	r3, [r0, #16]
 800817a:	690c      	ldr	r4, [r1, #16]
 800817c:	4607      	mov	r7, r0
 800817e:	42a3      	cmp	r3, r4
 8008180:	db7e      	blt.n	8008280 <quorem+0x10c>
 8008182:	3c01      	subs	r4, #1
 8008184:	00a3      	lsls	r3, r4, #2
 8008186:	f100 0514 	add.w	r5, r0, #20
 800818a:	f101 0814 	add.w	r8, r1, #20
 800818e:	9300      	str	r3, [sp, #0]
 8008190:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008194:	9301      	str	r3, [sp, #4]
 8008196:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800819a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800819e:	3301      	adds	r3, #1
 80081a0:	429a      	cmp	r2, r3
 80081a2:	fbb2 f6f3 	udiv	r6, r2, r3
 80081a6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80081aa:	d32e      	bcc.n	800820a <quorem+0x96>
 80081ac:	f04f 0a00 	mov.w	sl, #0
 80081b0:	46c4      	mov	ip, r8
 80081b2:	46ae      	mov	lr, r5
 80081b4:	46d3      	mov	fp, sl
 80081b6:	f85c 3b04 	ldr.w	r3, [ip], #4
 80081ba:	b298      	uxth	r0, r3
 80081bc:	fb06 a000 	mla	r0, r6, r0, sl
 80081c0:	0c1b      	lsrs	r3, r3, #16
 80081c2:	0c02      	lsrs	r2, r0, #16
 80081c4:	fb06 2303 	mla	r3, r6, r3, r2
 80081c8:	f8de 2000 	ldr.w	r2, [lr]
 80081cc:	b280      	uxth	r0, r0
 80081ce:	b292      	uxth	r2, r2
 80081d0:	1a12      	subs	r2, r2, r0
 80081d2:	445a      	add	r2, fp
 80081d4:	f8de 0000 	ldr.w	r0, [lr]
 80081d8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80081dc:	b29b      	uxth	r3, r3
 80081de:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80081e2:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80081e6:	b292      	uxth	r2, r2
 80081e8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80081ec:	45e1      	cmp	r9, ip
 80081ee:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80081f2:	f84e 2b04 	str.w	r2, [lr], #4
 80081f6:	d2de      	bcs.n	80081b6 <quorem+0x42>
 80081f8:	9b00      	ldr	r3, [sp, #0]
 80081fa:	58eb      	ldr	r3, [r5, r3]
 80081fc:	b92b      	cbnz	r3, 800820a <quorem+0x96>
 80081fe:	9b01      	ldr	r3, [sp, #4]
 8008200:	3b04      	subs	r3, #4
 8008202:	429d      	cmp	r5, r3
 8008204:	461a      	mov	r2, r3
 8008206:	d32f      	bcc.n	8008268 <quorem+0xf4>
 8008208:	613c      	str	r4, [r7, #16]
 800820a:	4638      	mov	r0, r7
 800820c:	f001 f9c4 	bl	8009598 <__mcmp>
 8008210:	2800      	cmp	r0, #0
 8008212:	db25      	blt.n	8008260 <quorem+0xec>
 8008214:	4629      	mov	r1, r5
 8008216:	2000      	movs	r0, #0
 8008218:	f858 2b04 	ldr.w	r2, [r8], #4
 800821c:	f8d1 c000 	ldr.w	ip, [r1]
 8008220:	fa1f fe82 	uxth.w	lr, r2
 8008224:	fa1f f38c 	uxth.w	r3, ip
 8008228:	eba3 030e 	sub.w	r3, r3, lr
 800822c:	4403      	add	r3, r0
 800822e:	0c12      	lsrs	r2, r2, #16
 8008230:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8008234:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8008238:	b29b      	uxth	r3, r3
 800823a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800823e:	45c1      	cmp	r9, r8
 8008240:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008244:	f841 3b04 	str.w	r3, [r1], #4
 8008248:	d2e6      	bcs.n	8008218 <quorem+0xa4>
 800824a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800824e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008252:	b922      	cbnz	r2, 800825e <quorem+0xea>
 8008254:	3b04      	subs	r3, #4
 8008256:	429d      	cmp	r5, r3
 8008258:	461a      	mov	r2, r3
 800825a:	d30b      	bcc.n	8008274 <quorem+0x100>
 800825c:	613c      	str	r4, [r7, #16]
 800825e:	3601      	adds	r6, #1
 8008260:	4630      	mov	r0, r6
 8008262:	b003      	add	sp, #12
 8008264:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008268:	6812      	ldr	r2, [r2, #0]
 800826a:	3b04      	subs	r3, #4
 800826c:	2a00      	cmp	r2, #0
 800826e:	d1cb      	bne.n	8008208 <quorem+0x94>
 8008270:	3c01      	subs	r4, #1
 8008272:	e7c6      	b.n	8008202 <quorem+0x8e>
 8008274:	6812      	ldr	r2, [r2, #0]
 8008276:	3b04      	subs	r3, #4
 8008278:	2a00      	cmp	r2, #0
 800827a:	d1ef      	bne.n	800825c <quorem+0xe8>
 800827c:	3c01      	subs	r4, #1
 800827e:	e7ea      	b.n	8008256 <quorem+0xe2>
 8008280:	2000      	movs	r0, #0
 8008282:	e7ee      	b.n	8008262 <quorem+0xee>
 8008284:	0000      	movs	r0, r0
	...

08008288 <_dtoa_r>:
 8008288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800828c:	4614      	mov	r4, r2
 800828e:	461d      	mov	r5, r3
 8008290:	69c7      	ldr	r7, [r0, #28]
 8008292:	b097      	sub	sp, #92	@ 0x5c
 8008294:	4683      	mov	fp, r0
 8008296:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800829a:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800829c:	b97f      	cbnz	r7, 80082be <_dtoa_r+0x36>
 800829e:	2010      	movs	r0, #16
 80082a0:	f000 fe02 	bl	8008ea8 <malloc>
 80082a4:	4602      	mov	r2, r0
 80082a6:	f8cb 001c 	str.w	r0, [fp, #28]
 80082aa:	b920      	cbnz	r0, 80082b6 <_dtoa_r+0x2e>
 80082ac:	21ef      	movs	r1, #239	@ 0xef
 80082ae:	4ba8      	ldr	r3, [pc, #672]	@ (8008550 <_dtoa_r+0x2c8>)
 80082b0:	48a8      	ldr	r0, [pc, #672]	@ (8008554 <_dtoa_r+0x2cc>)
 80082b2:	f002 fdcf 	bl	800ae54 <__assert_func>
 80082b6:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80082ba:	6007      	str	r7, [r0, #0]
 80082bc:	60c7      	str	r7, [r0, #12]
 80082be:	f8db 301c 	ldr.w	r3, [fp, #28]
 80082c2:	6819      	ldr	r1, [r3, #0]
 80082c4:	b159      	cbz	r1, 80082de <_dtoa_r+0x56>
 80082c6:	685a      	ldr	r2, [r3, #4]
 80082c8:	2301      	movs	r3, #1
 80082ca:	4093      	lsls	r3, r2
 80082cc:	604a      	str	r2, [r1, #4]
 80082ce:	608b      	str	r3, [r1, #8]
 80082d0:	4658      	mov	r0, fp
 80082d2:	f000 fedf 	bl	8009094 <_Bfree>
 80082d6:	2200      	movs	r2, #0
 80082d8:	f8db 301c 	ldr.w	r3, [fp, #28]
 80082dc:	601a      	str	r2, [r3, #0]
 80082de:	1e2b      	subs	r3, r5, #0
 80082e0:	bfaf      	iteee	ge
 80082e2:	2300      	movge	r3, #0
 80082e4:	2201      	movlt	r2, #1
 80082e6:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80082ea:	9303      	strlt	r3, [sp, #12]
 80082ec:	bfa8      	it	ge
 80082ee:	6033      	strge	r3, [r6, #0]
 80082f0:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80082f4:	4b98      	ldr	r3, [pc, #608]	@ (8008558 <_dtoa_r+0x2d0>)
 80082f6:	bfb8      	it	lt
 80082f8:	6032      	strlt	r2, [r6, #0]
 80082fa:	ea33 0308 	bics.w	r3, r3, r8
 80082fe:	d112      	bne.n	8008326 <_dtoa_r+0x9e>
 8008300:	f242 730f 	movw	r3, #9999	@ 0x270f
 8008304:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8008306:	6013      	str	r3, [r2, #0]
 8008308:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800830c:	4323      	orrs	r3, r4
 800830e:	f000 8550 	beq.w	8008db2 <_dtoa_r+0xb2a>
 8008312:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8008314:	f8df a244 	ldr.w	sl, [pc, #580]	@ 800855c <_dtoa_r+0x2d4>
 8008318:	2b00      	cmp	r3, #0
 800831a:	f000 8552 	beq.w	8008dc2 <_dtoa_r+0xb3a>
 800831e:	f10a 0303 	add.w	r3, sl, #3
 8008322:	f000 bd4c 	b.w	8008dbe <_dtoa_r+0xb36>
 8008326:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800832a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800832e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008332:	2200      	movs	r2, #0
 8008334:	2300      	movs	r3, #0
 8008336:	f7f8 fb37 	bl	80009a8 <__aeabi_dcmpeq>
 800833a:	4607      	mov	r7, r0
 800833c:	b158      	cbz	r0, 8008356 <_dtoa_r+0xce>
 800833e:	2301      	movs	r3, #1
 8008340:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8008342:	6013      	str	r3, [r2, #0]
 8008344:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8008346:	b113      	cbz	r3, 800834e <_dtoa_r+0xc6>
 8008348:	4b85      	ldr	r3, [pc, #532]	@ (8008560 <_dtoa_r+0x2d8>)
 800834a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800834c:	6013      	str	r3, [r2, #0]
 800834e:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8008564 <_dtoa_r+0x2dc>
 8008352:	f000 bd36 	b.w	8008dc2 <_dtoa_r+0xb3a>
 8008356:	ab14      	add	r3, sp, #80	@ 0x50
 8008358:	9301      	str	r3, [sp, #4]
 800835a:	ab15      	add	r3, sp, #84	@ 0x54
 800835c:	9300      	str	r3, [sp, #0]
 800835e:	4658      	mov	r0, fp
 8008360:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8008364:	f001 fa30 	bl	80097c8 <__d2b>
 8008368:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800836c:	4681      	mov	r9, r0
 800836e:	2e00      	cmp	r6, #0
 8008370:	d077      	beq.n	8008462 <_dtoa_r+0x1da>
 8008372:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008376:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008378:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800837c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008380:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008384:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8008388:	9712      	str	r7, [sp, #72]	@ 0x48
 800838a:	4619      	mov	r1, r3
 800838c:	2200      	movs	r2, #0
 800838e:	4b76      	ldr	r3, [pc, #472]	@ (8008568 <_dtoa_r+0x2e0>)
 8008390:	f7f7 feea 	bl	8000168 <__aeabi_dsub>
 8008394:	a368      	add	r3, pc, #416	@ (adr r3, 8008538 <_dtoa_r+0x2b0>)
 8008396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800839a:	f7f8 f89d 	bl	80004d8 <__aeabi_dmul>
 800839e:	a368      	add	r3, pc, #416	@ (adr r3, 8008540 <_dtoa_r+0x2b8>)
 80083a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083a4:	f7f7 fee2 	bl	800016c <__adddf3>
 80083a8:	4604      	mov	r4, r0
 80083aa:	4630      	mov	r0, r6
 80083ac:	460d      	mov	r5, r1
 80083ae:	f7f8 f829 	bl	8000404 <__aeabi_i2d>
 80083b2:	a365      	add	r3, pc, #404	@ (adr r3, 8008548 <_dtoa_r+0x2c0>)
 80083b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083b8:	f7f8 f88e 	bl	80004d8 <__aeabi_dmul>
 80083bc:	4602      	mov	r2, r0
 80083be:	460b      	mov	r3, r1
 80083c0:	4620      	mov	r0, r4
 80083c2:	4629      	mov	r1, r5
 80083c4:	f7f7 fed2 	bl	800016c <__adddf3>
 80083c8:	4604      	mov	r4, r0
 80083ca:	460d      	mov	r5, r1
 80083cc:	f7f8 fb34 	bl	8000a38 <__aeabi_d2iz>
 80083d0:	2200      	movs	r2, #0
 80083d2:	4607      	mov	r7, r0
 80083d4:	2300      	movs	r3, #0
 80083d6:	4620      	mov	r0, r4
 80083d8:	4629      	mov	r1, r5
 80083da:	f7f8 faef 	bl	80009bc <__aeabi_dcmplt>
 80083de:	b140      	cbz	r0, 80083f2 <_dtoa_r+0x16a>
 80083e0:	4638      	mov	r0, r7
 80083e2:	f7f8 f80f 	bl	8000404 <__aeabi_i2d>
 80083e6:	4622      	mov	r2, r4
 80083e8:	462b      	mov	r3, r5
 80083ea:	f7f8 fadd 	bl	80009a8 <__aeabi_dcmpeq>
 80083ee:	b900      	cbnz	r0, 80083f2 <_dtoa_r+0x16a>
 80083f0:	3f01      	subs	r7, #1
 80083f2:	2f16      	cmp	r7, #22
 80083f4:	d853      	bhi.n	800849e <_dtoa_r+0x216>
 80083f6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80083fa:	4b5c      	ldr	r3, [pc, #368]	@ (800856c <_dtoa_r+0x2e4>)
 80083fc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008404:	f7f8 fada 	bl	80009bc <__aeabi_dcmplt>
 8008408:	2800      	cmp	r0, #0
 800840a:	d04a      	beq.n	80084a2 <_dtoa_r+0x21a>
 800840c:	2300      	movs	r3, #0
 800840e:	3f01      	subs	r7, #1
 8008410:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008412:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008414:	1b9b      	subs	r3, r3, r6
 8008416:	1e5a      	subs	r2, r3, #1
 8008418:	bf46      	itte	mi
 800841a:	f1c3 0801 	rsbmi	r8, r3, #1
 800841e:	2300      	movmi	r3, #0
 8008420:	f04f 0800 	movpl.w	r8, #0
 8008424:	9209      	str	r2, [sp, #36]	@ 0x24
 8008426:	bf48      	it	mi
 8008428:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800842a:	2f00      	cmp	r7, #0
 800842c:	db3b      	blt.n	80084a6 <_dtoa_r+0x21e>
 800842e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008430:	970e      	str	r7, [sp, #56]	@ 0x38
 8008432:	443b      	add	r3, r7
 8008434:	9309      	str	r3, [sp, #36]	@ 0x24
 8008436:	2300      	movs	r3, #0
 8008438:	930a      	str	r3, [sp, #40]	@ 0x28
 800843a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800843c:	2b09      	cmp	r3, #9
 800843e:	d866      	bhi.n	800850e <_dtoa_r+0x286>
 8008440:	2b05      	cmp	r3, #5
 8008442:	bfc4      	itt	gt
 8008444:	3b04      	subgt	r3, #4
 8008446:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8008448:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800844a:	bfc8      	it	gt
 800844c:	2400      	movgt	r4, #0
 800844e:	f1a3 0302 	sub.w	r3, r3, #2
 8008452:	bfd8      	it	le
 8008454:	2401      	movle	r4, #1
 8008456:	2b03      	cmp	r3, #3
 8008458:	d864      	bhi.n	8008524 <_dtoa_r+0x29c>
 800845a:	e8df f003 	tbb	[pc, r3]
 800845e:	382b      	.short	0x382b
 8008460:	5636      	.short	0x5636
 8008462:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8008466:	441e      	add	r6, r3
 8008468:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800846c:	2b20      	cmp	r3, #32
 800846e:	bfc1      	itttt	gt
 8008470:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008474:	fa08 f803 	lslgt.w	r8, r8, r3
 8008478:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800847c:	fa24 f303 	lsrgt.w	r3, r4, r3
 8008480:	bfd6      	itet	le
 8008482:	f1c3 0320 	rsble	r3, r3, #32
 8008486:	ea48 0003 	orrgt.w	r0, r8, r3
 800848a:	fa04 f003 	lslle.w	r0, r4, r3
 800848e:	f7f7 ffa9 	bl	80003e4 <__aeabi_ui2d>
 8008492:	2201      	movs	r2, #1
 8008494:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8008498:	3e01      	subs	r6, #1
 800849a:	9212      	str	r2, [sp, #72]	@ 0x48
 800849c:	e775      	b.n	800838a <_dtoa_r+0x102>
 800849e:	2301      	movs	r3, #1
 80084a0:	e7b6      	b.n	8008410 <_dtoa_r+0x188>
 80084a2:	900f      	str	r0, [sp, #60]	@ 0x3c
 80084a4:	e7b5      	b.n	8008412 <_dtoa_r+0x18a>
 80084a6:	427b      	negs	r3, r7
 80084a8:	930a      	str	r3, [sp, #40]	@ 0x28
 80084aa:	2300      	movs	r3, #0
 80084ac:	eba8 0807 	sub.w	r8, r8, r7
 80084b0:	930e      	str	r3, [sp, #56]	@ 0x38
 80084b2:	e7c2      	b.n	800843a <_dtoa_r+0x1b2>
 80084b4:	2300      	movs	r3, #0
 80084b6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80084b8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	dc35      	bgt.n	800852a <_dtoa_r+0x2a2>
 80084be:	2301      	movs	r3, #1
 80084c0:	461a      	mov	r2, r3
 80084c2:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80084c6:	9221      	str	r2, [sp, #132]	@ 0x84
 80084c8:	e00b      	b.n	80084e2 <_dtoa_r+0x25a>
 80084ca:	2301      	movs	r3, #1
 80084cc:	e7f3      	b.n	80084b6 <_dtoa_r+0x22e>
 80084ce:	2300      	movs	r3, #0
 80084d0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80084d2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80084d4:	18fb      	adds	r3, r7, r3
 80084d6:	9308      	str	r3, [sp, #32]
 80084d8:	3301      	adds	r3, #1
 80084da:	2b01      	cmp	r3, #1
 80084dc:	9307      	str	r3, [sp, #28]
 80084de:	bfb8      	it	lt
 80084e0:	2301      	movlt	r3, #1
 80084e2:	2100      	movs	r1, #0
 80084e4:	2204      	movs	r2, #4
 80084e6:	f8db 001c 	ldr.w	r0, [fp, #28]
 80084ea:	f102 0514 	add.w	r5, r2, #20
 80084ee:	429d      	cmp	r5, r3
 80084f0:	d91f      	bls.n	8008532 <_dtoa_r+0x2aa>
 80084f2:	6041      	str	r1, [r0, #4]
 80084f4:	4658      	mov	r0, fp
 80084f6:	f000 fd8d 	bl	8009014 <_Balloc>
 80084fa:	4682      	mov	sl, r0
 80084fc:	2800      	cmp	r0, #0
 80084fe:	d139      	bne.n	8008574 <_dtoa_r+0x2ec>
 8008500:	4602      	mov	r2, r0
 8008502:	f240 11af 	movw	r1, #431	@ 0x1af
 8008506:	4b1a      	ldr	r3, [pc, #104]	@ (8008570 <_dtoa_r+0x2e8>)
 8008508:	e6d2      	b.n	80082b0 <_dtoa_r+0x28>
 800850a:	2301      	movs	r3, #1
 800850c:	e7e0      	b.n	80084d0 <_dtoa_r+0x248>
 800850e:	2401      	movs	r4, #1
 8008510:	2300      	movs	r3, #0
 8008512:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008514:	9320      	str	r3, [sp, #128]	@ 0x80
 8008516:	f04f 33ff 	mov.w	r3, #4294967295
 800851a:	2200      	movs	r2, #0
 800851c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8008520:	2312      	movs	r3, #18
 8008522:	e7d0      	b.n	80084c6 <_dtoa_r+0x23e>
 8008524:	2301      	movs	r3, #1
 8008526:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008528:	e7f5      	b.n	8008516 <_dtoa_r+0x28e>
 800852a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800852c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8008530:	e7d7      	b.n	80084e2 <_dtoa_r+0x25a>
 8008532:	3101      	adds	r1, #1
 8008534:	0052      	lsls	r2, r2, #1
 8008536:	e7d8      	b.n	80084ea <_dtoa_r+0x262>
 8008538:	636f4361 	.word	0x636f4361
 800853c:	3fd287a7 	.word	0x3fd287a7
 8008540:	8b60c8b3 	.word	0x8b60c8b3
 8008544:	3fc68a28 	.word	0x3fc68a28
 8008548:	509f79fb 	.word	0x509f79fb
 800854c:	3fd34413 	.word	0x3fd34413
 8008550:	0800bffa 	.word	0x0800bffa
 8008554:	0800c011 	.word	0x0800c011
 8008558:	7ff00000 	.word	0x7ff00000
 800855c:	0800bff6 	.word	0x0800bff6
 8008560:	0800bfc5 	.word	0x0800bfc5
 8008564:	0800bfc4 	.word	0x0800bfc4
 8008568:	3ff80000 	.word	0x3ff80000
 800856c:	0800c108 	.word	0x0800c108
 8008570:	0800c069 	.word	0x0800c069
 8008574:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008578:	6018      	str	r0, [r3, #0]
 800857a:	9b07      	ldr	r3, [sp, #28]
 800857c:	2b0e      	cmp	r3, #14
 800857e:	f200 80a4 	bhi.w	80086ca <_dtoa_r+0x442>
 8008582:	2c00      	cmp	r4, #0
 8008584:	f000 80a1 	beq.w	80086ca <_dtoa_r+0x442>
 8008588:	2f00      	cmp	r7, #0
 800858a:	dd33      	ble.n	80085f4 <_dtoa_r+0x36c>
 800858c:	4b86      	ldr	r3, [pc, #536]	@ (80087a8 <_dtoa_r+0x520>)
 800858e:	f007 020f 	and.w	r2, r7, #15
 8008592:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008596:	05f8      	lsls	r0, r7, #23
 8008598:	e9d3 3400 	ldrd	r3, r4, [r3]
 800859c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80085a0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80085a4:	d516      	bpl.n	80085d4 <_dtoa_r+0x34c>
 80085a6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80085aa:	4b80      	ldr	r3, [pc, #512]	@ (80087ac <_dtoa_r+0x524>)
 80085ac:	2603      	movs	r6, #3
 80085ae:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80085b2:	f7f8 f8bb 	bl	800072c <__aeabi_ddiv>
 80085b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80085ba:	f004 040f 	and.w	r4, r4, #15
 80085be:	4d7b      	ldr	r5, [pc, #492]	@ (80087ac <_dtoa_r+0x524>)
 80085c0:	b954      	cbnz	r4, 80085d8 <_dtoa_r+0x350>
 80085c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80085c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80085ca:	f7f8 f8af 	bl	800072c <__aeabi_ddiv>
 80085ce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80085d2:	e028      	b.n	8008626 <_dtoa_r+0x39e>
 80085d4:	2602      	movs	r6, #2
 80085d6:	e7f2      	b.n	80085be <_dtoa_r+0x336>
 80085d8:	07e1      	lsls	r1, r4, #31
 80085da:	d508      	bpl.n	80085ee <_dtoa_r+0x366>
 80085dc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80085e0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80085e4:	f7f7 ff78 	bl	80004d8 <__aeabi_dmul>
 80085e8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80085ec:	3601      	adds	r6, #1
 80085ee:	1064      	asrs	r4, r4, #1
 80085f0:	3508      	adds	r5, #8
 80085f2:	e7e5      	b.n	80085c0 <_dtoa_r+0x338>
 80085f4:	f000 80d2 	beq.w	800879c <_dtoa_r+0x514>
 80085f8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80085fc:	427c      	negs	r4, r7
 80085fe:	4b6a      	ldr	r3, [pc, #424]	@ (80087a8 <_dtoa_r+0x520>)
 8008600:	f004 020f 	and.w	r2, r4, #15
 8008604:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800860c:	f7f7 ff64 	bl	80004d8 <__aeabi_dmul>
 8008610:	2602      	movs	r6, #2
 8008612:	2300      	movs	r3, #0
 8008614:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008618:	4d64      	ldr	r5, [pc, #400]	@ (80087ac <_dtoa_r+0x524>)
 800861a:	1124      	asrs	r4, r4, #4
 800861c:	2c00      	cmp	r4, #0
 800861e:	f040 80b2 	bne.w	8008786 <_dtoa_r+0x4fe>
 8008622:	2b00      	cmp	r3, #0
 8008624:	d1d3      	bne.n	80085ce <_dtoa_r+0x346>
 8008626:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800862a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800862c:	2b00      	cmp	r3, #0
 800862e:	f000 80b7 	beq.w	80087a0 <_dtoa_r+0x518>
 8008632:	2200      	movs	r2, #0
 8008634:	4620      	mov	r0, r4
 8008636:	4629      	mov	r1, r5
 8008638:	4b5d      	ldr	r3, [pc, #372]	@ (80087b0 <_dtoa_r+0x528>)
 800863a:	f7f8 f9bf 	bl	80009bc <__aeabi_dcmplt>
 800863e:	2800      	cmp	r0, #0
 8008640:	f000 80ae 	beq.w	80087a0 <_dtoa_r+0x518>
 8008644:	9b07      	ldr	r3, [sp, #28]
 8008646:	2b00      	cmp	r3, #0
 8008648:	f000 80aa 	beq.w	80087a0 <_dtoa_r+0x518>
 800864c:	9b08      	ldr	r3, [sp, #32]
 800864e:	2b00      	cmp	r3, #0
 8008650:	dd37      	ble.n	80086c2 <_dtoa_r+0x43a>
 8008652:	1e7b      	subs	r3, r7, #1
 8008654:	4620      	mov	r0, r4
 8008656:	9304      	str	r3, [sp, #16]
 8008658:	2200      	movs	r2, #0
 800865a:	4629      	mov	r1, r5
 800865c:	4b55      	ldr	r3, [pc, #340]	@ (80087b4 <_dtoa_r+0x52c>)
 800865e:	f7f7 ff3b 	bl	80004d8 <__aeabi_dmul>
 8008662:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008666:	9c08      	ldr	r4, [sp, #32]
 8008668:	3601      	adds	r6, #1
 800866a:	4630      	mov	r0, r6
 800866c:	f7f7 feca 	bl	8000404 <__aeabi_i2d>
 8008670:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008674:	f7f7 ff30 	bl	80004d8 <__aeabi_dmul>
 8008678:	2200      	movs	r2, #0
 800867a:	4b4f      	ldr	r3, [pc, #316]	@ (80087b8 <_dtoa_r+0x530>)
 800867c:	f7f7 fd76 	bl	800016c <__adddf3>
 8008680:	4605      	mov	r5, r0
 8008682:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8008686:	2c00      	cmp	r4, #0
 8008688:	f040 809a 	bne.w	80087c0 <_dtoa_r+0x538>
 800868c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008690:	2200      	movs	r2, #0
 8008692:	4b4a      	ldr	r3, [pc, #296]	@ (80087bc <_dtoa_r+0x534>)
 8008694:	f7f7 fd68 	bl	8000168 <__aeabi_dsub>
 8008698:	4602      	mov	r2, r0
 800869a:	460b      	mov	r3, r1
 800869c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80086a0:	462a      	mov	r2, r5
 80086a2:	4633      	mov	r3, r6
 80086a4:	f7f8 f9a8 	bl	80009f8 <__aeabi_dcmpgt>
 80086a8:	2800      	cmp	r0, #0
 80086aa:	f040 828e 	bne.w	8008bca <_dtoa_r+0x942>
 80086ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80086b2:	462a      	mov	r2, r5
 80086b4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80086b8:	f7f8 f980 	bl	80009bc <__aeabi_dcmplt>
 80086bc:	2800      	cmp	r0, #0
 80086be:	f040 8127 	bne.w	8008910 <_dtoa_r+0x688>
 80086c2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80086c6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80086ca:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	f2c0 8163 	blt.w	8008998 <_dtoa_r+0x710>
 80086d2:	2f0e      	cmp	r7, #14
 80086d4:	f300 8160 	bgt.w	8008998 <_dtoa_r+0x710>
 80086d8:	4b33      	ldr	r3, [pc, #204]	@ (80087a8 <_dtoa_r+0x520>)
 80086da:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80086de:	e9d3 3400 	ldrd	r3, r4, [r3]
 80086e2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80086e6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	da03      	bge.n	80086f4 <_dtoa_r+0x46c>
 80086ec:	9b07      	ldr	r3, [sp, #28]
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	f340 8100 	ble.w	80088f4 <_dtoa_r+0x66c>
 80086f4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80086f8:	4656      	mov	r6, sl
 80086fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80086fe:	4620      	mov	r0, r4
 8008700:	4629      	mov	r1, r5
 8008702:	f7f8 f813 	bl	800072c <__aeabi_ddiv>
 8008706:	f7f8 f997 	bl	8000a38 <__aeabi_d2iz>
 800870a:	4680      	mov	r8, r0
 800870c:	f7f7 fe7a 	bl	8000404 <__aeabi_i2d>
 8008710:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008714:	f7f7 fee0 	bl	80004d8 <__aeabi_dmul>
 8008718:	4602      	mov	r2, r0
 800871a:	460b      	mov	r3, r1
 800871c:	4620      	mov	r0, r4
 800871e:	4629      	mov	r1, r5
 8008720:	f7f7 fd22 	bl	8000168 <__aeabi_dsub>
 8008724:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8008728:	9d07      	ldr	r5, [sp, #28]
 800872a:	f806 4b01 	strb.w	r4, [r6], #1
 800872e:	eba6 040a 	sub.w	r4, r6, sl
 8008732:	42a5      	cmp	r5, r4
 8008734:	4602      	mov	r2, r0
 8008736:	460b      	mov	r3, r1
 8008738:	f040 8116 	bne.w	8008968 <_dtoa_r+0x6e0>
 800873c:	f7f7 fd16 	bl	800016c <__adddf3>
 8008740:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008744:	4604      	mov	r4, r0
 8008746:	460d      	mov	r5, r1
 8008748:	f7f8 f956 	bl	80009f8 <__aeabi_dcmpgt>
 800874c:	2800      	cmp	r0, #0
 800874e:	f040 80f8 	bne.w	8008942 <_dtoa_r+0x6ba>
 8008752:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008756:	4620      	mov	r0, r4
 8008758:	4629      	mov	r1, r5
 800875a:	f7f8 f925 	bl	80009a8 <__aeabi_dcmpeq>
 800875e:	b118      	cbz	r0, 8008768 <_dtoa_r+0x4e0>
 8008760:	f018 0f01 	tst.w	r8, #1
 8008764:	f040 80ed 	bne.w	8008942 <_dtoa_r+0x6ba>
 8008768:	4649      	mov	r1, r9
 800876a:	4658      	mov	r0, fp
 800876c:	f000 fc92 	bl	8009094 <_Bfree>
 8008770:	2300      	movs	r3, #0
 8008772:	7033      	strb	r3, [r6, #0]
 8008774:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8008776:	3701      	adds	r7, #1
 8008778:	601f      	str	r7, [r3, #0]
 800877a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800877c:	2b00      	cmp	r3, #0
 800877e:	f000 8320 	beq.w	8008dc2 <_dtoa_r+0xb3a>
 8008782:	601e      	str	r6, [r3, #0]
 8008784:	e31d      	b.n	8008dc2 <_dtoa_r+0xb3a>
 8008786:	07e2      	lsls	r2, r4, #31
 8008788:	d505      	bpl.n	8008796 <_dtoa_r+0x50e>
 800878a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800878e:	f7f7 fea3 	bl	80004d8 <__aeabi_dmul>
 8008792:	2301      	movs	r3, #1
 8008794:	3601      	adds	r6, #1
 8008796:	1064      	asrs	r4, r4, #1
 8008798:	3508      	adds	r5, #8
 800879a:	e73f      	b.n	800861c <_dtoa_r+0x394>
 800879c:	2602      	movs	r6, #2
 800879e:	e742      	b.n	8008626 <_dtoa_r+0x39e>
 80087a0:	9c07      	ldr	r4, [sp, #28]
 80087a2:	9704      	str	r7, [sp, #16]
 80087a4:	e761      	b.n	800866a <_dtoa_r+0x3e2>
 80087a6:	bf00      	nop
 80087a8:	0800c108 	.word	0x0800c108
 80087ac:	0800c0e0 	.word	0x0800c0e0
 80087b0:	3ff00000 	.word	0x3ff00000
 80087b4:	40240000 	.word	0x40240000
 80087b8:	401c0000 	.word	0x401c0000
 80087bc:	40140000 	.word	0x40140000
 80087c0:	4b70      	ldr	r3, [pc, #448]	@ (8008984 <_dtoa_r+0x6fc>)
 80087c2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80087c4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80087c8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80087cc:	4454      	add	r4, sl
 80087ce:	2900      	cmp	r1, #0
 80087d0:	d045      	beq.n	800885e <_dtoa_r+0x5d6>
 80087d2:	2000      	movs	r0, #0
 80087d4:	496c      	ldr	r1, [pc, #432]	@ (8008988 <_dtoa_r+0x700>)
 80087d6:	f7f7 ffa9 	bl	800072c <__aeabi_ddiv>
 80087da:	4633      	mov	r3, r6
 80087dc:	462a      	mov	r2, r5
 80087de:	f7f7 fcc3 	bl	8000168 <__aeabi_dsub>
 80087e2:	4656      	mov	r6, sl
 80087e4:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80087e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80087ec:	f7f8 f924 	bl	8000a38 <__aeabi_d2iz>
 80087f0:	4605      	mov	r5, r0
 80087f2:	f7f7 fe07 	bl	8000404 <__aeabi_i2d>
 80087f6:	4602      	mov	r2, r0
 80087f8:	460b      	mov	r3, r1
 80087fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80087fe:	f7f7 fcb3 	bl	8000168 <__aeabi_dsub>
 8008802:	4602      	mov	r2, r0
 8008804:	460b      	mov	r3, r1
 8008806:	3530      	adds	r5, #48	@ 0x30
 8008808:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800880c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008810:	f806 5b01 	strb.w	r5, [r6], #1
 8008814:	f7f8 f8d2 	bl	80009bc <__aeabi_dcmplt>
 8008818:	2800      	cmp	r0, #0
 800881a:	d163      	bne.n	80088e4 <_dtoa_r+0x65c>
 800881c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008820:	2000      	movs	r0, #0
 8008822:	495a      	ldr	r1, [pc, #360]	@ (800898c <_dtoa_r+0x704>)
 8008824:	f7f7 fca0 	bl	8000168 <__aeabi_dsub>
 8008828:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800882c:	f7f8 f8c6 	bl	80009bc <__aeabi_dcmplt>
 8008830:	2800      	cmp	r0, #0
 8008832:	f040 8087 	bne.w	8008944 <_dtoa_r+0x6bc>
 8008836:	42a6      	cmp	r6, r4
 8008838:	f43f af43 	beq.w	80086c2 <_dtoa_r+0x43a>
 800883c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008840:	2200      	movs	r2, #0
 8008842:	4b53      	ldr	r3, [pc, #332]	@ (8008990 <_dtoa_r+0x708>)
 8008844:	f7f7 fe48 	bl	80004d8 <__aeabi_dmul>
 8008848:	2200      	movs	r2, #0
 800884a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800884e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008852:	4b4f      	ldr	r3, [pc, #316]	@ (8008990 <_dtoa_r+0x708>)
 8008854:	f7f7 fe40 	bl	80004d8 <__aeabi_dmul>
 8008858:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800885c:	e7c4      	b.n	80087e8 <_dtoa_r+0x560>
 800885e:	4631      	mov	r1, r6
 8008860:	4628      	mov	r0, r5
 8008862:	f7f7 fe39 	bl	80004d8 <__aeabi_dmul>
 8008866:	4656      	mov	r6, sl
 8008868:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800886c:	9413      	str	r4, [sp, #76]	@ 0x4c
 800886e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008872:	f7f8 f8e1 	bl	8000a38 <__aeabi_d2iz>
 8008876:	4605      	mov	r5, r0
 8008878:	f7f7 fdc4 	bl	8000404 <__aeabi_i2d>
 800887c:	4602      	mov	r2, r0
 800887e:	460b      	mov	r3, r1
 8008880:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008884:	f7f7 fc70 	bl	8000168 <__aeabi_dsub>
 8008888:	4602      	mov	r2, r0
 800888a:	460b      	mov	r3, r1
 800888c:	3530      	adds	r5, #48	@ 0x30
 800888e:	f806 5b01 	strb.w	r5, [r6], #1
 8008892:	42a6      	cmp	r6, r4
 8008894:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008898:	f04f 0200 	mov.w	r2, #0
 800889c:	d124      	bne.n	80088e8 <_dtoa_r+0x660>
 800889e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80088a2:	4b39      	ldr	r3, [pc, #228]	@ (8008988 <_dtoa_r+0x700>)
 80088a4:	f7f7 fc62 	bl	800016c <__adddf3>
 80088a8:	4602      	mov	r2, r0
 80088aa:	460b      	mov	r3, r1
 80088ac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80088b0:	f7f8 f8a2 	bl	80009f8 <__aeabi_dcmpgt>
 80088b4:	2800      	cmp	r0, #0
 80088b6:	d145      	bne.n	8008944 <_dtoa_r+0x6bc>
 80088b8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80088bc:	2000      	movs	r0, #0
 80088be:	4932      	ldr	r1, [pc, #200]	@ (8008988 <_dtoa_r+0x700>)
 80088c0:	f7f7 fc52 	bl	8000168 <__aeabi_dsub>
 80088c4:	4602      	mov	r2, r0
 80088c6:	460b      	mov	r3, r1
 80088c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80088cc:	f7f8 f876 	bl	80009bc <__aeabi_dcmplt>
 80088d0:	2800      	cmp	r0, #0
 80088d2:	f43f aef6 	beq.w	80086c2 <_dtoa_r+0x43a>
 80088d6:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80088d8:	1e73      	subs	r3, r6, #1
 80088da:	9313      	str	r3, [sp, #76]	@ 0x4c
 80088dc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80088e0:	2b30      	cmp	r3, #48	@ 0x30
 80088e2:	d0f8      	beq.n	80088d6 <_dtoa_r+0x64e>
 80088e4:	9f04      	ldr	r7, [sp, #16]
 80088e6:	e73f      	b.n	8008768 <_dtoa_r+0x4e0>
 80088e8:	4b29      	ldr	r3, [pc, #164]	@ (8008990 <_dtoa_r+0x708>)
 80088ea:	f7f7 fdf5 	bl	80004d8 <__aeabi_dmul>
 80088ee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80088f2:	e7bc      	b.n	800886e <_dtoa_r+0x5e6>
 80088f4:	d10c      	bne.n	8008910 <_dtoa_r+0x688>
 80088f6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80088fa:	2200      	movs	r2, #0
 80088fc:	4b25      	ldr	r3, [pc, #148]	@ (8008994 <_dtoa_r+0x70c>)
 80088fe:	f7f7 fdeb 	bl	80004d8 <__aeabi_dmul>
 8008902:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008906:	f7f8 f86d 	bl	80009e4 <__aeabi_dcmpge>
 800890a:	2800      	cmp	r0, #0
 800890c:	f000 815b 	beq.w	8008bc6 <_dtoa_r+0x93e>
 8008910:	2400      	movs	r4, #0
 8008912:	4625      	mov	r5, r4
 8008914:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008916:	4656      	mov	r6, sl
 8008918:	43db      	mvns	r3, r3
 800891a:	9304      	str	r3, [sp, #16]
 800891c:	2700      	movs	r7, #0
 800891e:	4621      	mov	r1, r4
 8008920:	4658      	mov	r0, fp
 8008922:	f000 fbb7 	bl	8009094 <_Bfree>
 8008926:	2d00      	cmp	r5, #0
 8008928:	d0dc      	beq.n	80088e4 <_dtoa_r+0x65c>
 800892a:	b12f      	cbz	r7, 8008938 <_dtoa_r+0x6b0>
 800892c:	42af      	cmp	r7, r5
 800892e:	d003      	beq.n	8008938 <_dtoa_r+0x6b0>
 8008930:	4639      	mov	r1, r7
 8008932:	4658      	mov	r0, fp
 8008934:	f000 fbae 	bl	8009094 <_Bfree>
 8008938:	4629      	mov	r1, r5
 800893a:	4658      	mov	r0, fp
 800893c:	f000 fbaa 	bl	8009094 <_Bfree>
 8008940:	e7d0      	b.n	80088e4 <_dtoa_r+0x65c>
 8008942:	9704      	str	r7, [sp, #16]
 8008944:	4633      	mov	r3, r6
 8008946:	461e      	mov	r6, r3
 8008948:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800894c:	2a39      	cmp	r2, #57	@ 0x39
 800894e:	d107      	bne.n	8008960 <_dtoa_r+0x6d8>
 8008950:	459a      	cmp	sl, r3
 8008952:	d1f8      	bne.n	8008946 <_dtoa_r+0x6be>
 8008954:	9a04      	ldr	r2, [sp, #16]
 8008956:	3201      	adds	r2, #1
 8008958:	9204      	str	r2, [sp, #16]
 800895a:	2230      	movs	r2, #48	@ 0x30
 800895c:	f88a 2000 	strb.w	r2, [sl]
 8008960:	781a      	ldrb	r2, [r3, #0]
 8008962:	3201      	adds	r2, #1
 8008964:	701a      	strb	r2, [r3, #0]
 8008966:	e7bd      	b.n	80088e4 <_dtoa_r+0x65c>
 8008968:	2200      	movs	r2, #0
 800896a:	4b09      	ldr	r3, [pc, #36]	@ (8008990 <_dtoa_r+0x708>)
 800896c:	f7f7 fdb4 	bl	80004d8 <__aeabi_dmul>
 8008970:	2200      	movs	r2, #0
 8008972:	2300      	movs	r3, #0
 8008974:	4604      	mov	r4, r0
 8008976:	460d      	mov	r5, r1
 8008978:	f7f8 f816 	bl	80009a8 <__aeabi_dcmpeq>
 800897c:	2800      	cmp	r0, #0
 800897e:	f43f aebc 	beq.w	80086fa <_dtoa_r+0x472>
 8008982:	e6f1      	b.n	8008768 <_dtoa_r+0x4e0>
 8008984:	0800c108 	.word	0x0800c108
 8008988:	3fe00000 	.word	0x3fe00000
 800898c:	3ff00000 	.word	0x3ff00000
 8008990:	40240000 	.word	0x40240000
 8008994:	40140000 	.word	0x40140000
 8008998:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800899a:	2a00      	cmp	r2, #0
 800899c:	f000 80db 	beq.w	8008b56 <_dtoa_r+0x8ce>
 80089a0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80089a2:	2a01      	cmp	r2, #1
 80089a4:	f300 80bf 	bgt.w	8008b26 <_dtoa_r+0x89e>
 80089a8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80089aa:	2a00      	cmp	r2, #0
 80089ac:	f000 80b7 	beq.w	8008b1e <_dtoa_r+0x896>
 80089b0:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80089b4:	4646      	mov	r6, r8
 80089b6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80089b8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80089ba:	2101      	movs	r1, #1
 80089bc:	441a      	add	r2, r3
 80089be:	4658      	mov	r0, fp
 80089c0:	4498      	add	r8, r3
 80089c2:	9209      	str	r2, [sp, #36]	@ 0x24
 80089c4:	f000 fc64 	bl	8009290 <__i2b>
 80089c8:	4605      	mov	r5, r0
 80089ca:	b15e      	cbz	r6, 80089e4 <_dtoa_r+0x75c>
 80089cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	dd08      	ble.n	80089e4 <_dtoa_r+0x75c>
 80089d2:	42b3      	cmp	r3, r6
 80089d4:	bfa8      	it	ge
 80089d6:	4633      	movge	r3, r6
 80089d8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80089da:	eba8 0803 	sub.w	r8, r8, r3
 80089de:	1af6      	subs	r6, r6, r3
 80089e0:	1ad3      	subs	r3, r2, r3
 80089e2:	9309      	str	r3, [sp, #36]	@ 0x24
 80089e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80089e6:	b1f3      	cbz	r3, 8008a26 <_dtoa_r+0x79e>
 80089e8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	f000 80b7 	beq.w	8008b5e <_dtoa_r+0x8d6>
 80089f0:	b18c      	cbz	r4, 8008a16 <_dtoa_r+0x78e>
 80089f2:	4629      	mov	r1, r5
 80089f4:	4622      	mov	r2, r4
 80089f6:	4658      	mov	r0, fp
 80089f8:	f000 fd08 	bl	800940c <__pow5mult>
 80089fc:	464a      	mov	r2, r9
 80089fe:	4601      	mov	r1, r0
 8008a00:	4605      	mov	r5, r0
 8008a02:	4658      	mov	r0, fp
 8008a04:	f000 fc5a 	bl	80092bc <__multiply>
 8008a08:	4649      	mov	r1, r9
 8008a0a:	9004      	str	r0, [sp, #16]
 8008a0c:	4658      	mov	r0, fp
 8008a0e:	f000 fb41 	bl	8009094 <_Bfree>
 8008a12:	9b04      	ldr	r3, [sp, #16]
 8008a14:	4699      	mov	r9, r3
 8008a16:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008a18:	1b1a      	subs	r2, r3, r4
 8008a1a:	d004      	beq.n	8008a26 <_dtoa_r+0x79e>
 8008a1c:	4649      	mov	r1, r9
 8008a1e:	4658      	mov	r0, fp
 8008a20:	f000 fcf4 	bl	800940c <__pow5mult>
 8008a24:	4681      	mov	r9, r0
 8008a26:	2101      	movs	r1, #1
 8008a28:	4658      	mov	r0, fp
 8008a2a:	f000 fc31 	bl	8009290 <__i2b>
 8008a2e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008a30:	4604      	mov	r4, r0
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	f000 81c9 	beq.w	8008dca <_dtoa_r+0xb42>
 8008a38:	461a      	mov	r2, r3
 8008a3a:	4601      	mov	r1, r0
 8008a3c:	4658      	mov	r0, fp
 8008a3e:	f000 fce5 	bl	800940c <__pow5mult>
 8008a42:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008a44:	4604      	mov	r4, r0
 8008a46:	2b01      	cmp	r3, #1
 8008a48:	f300 808f 	bgt.w	8008b6a <_dtoa_r+0x8e2>
 8008a4c:	9b02      	ldr	r3, [sp, #8]
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	f040 8087 	bne.w	8008b62 <_dtoa_r+0x8da>
 8008a54:	9b03      	ldr	r3, [sp, #12]
 8008a56:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	f040 8083 	bne.w	8008b66 <_dtoa_r+0x8de>
 8008a60:	9b03      	ldr	r3, [sp, #12]
 8008a62:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008a66:	0d1b      	lsrs	r3, r3, #20
 8008a68:	051b      	lsls	r3, r3, #20
 8008a6a:	b12b      	cbz	r3, 8008a78 <_dtoa_r+0x7f0>
 8008a6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a6e:	f108 0801 	add.w	r8, r8, #1
 8008a72:	3301      	adds	r3, #1
 8008a74:	9309      	str	r3, [sp, #36]	@ 0x24
 8008a76:	2301      	movs	r3, #1
 8008a78:	930a      	str	r3, [sp, #40]	@ 0x28
 8008a7a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	f000 81aa 	beq.w	8008dd6 <_dtoa_r+0xb4e>
 8008a82:	6923      	ldr	r3, [r4, #16]
 8008a84:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008a88:	6918      	ldr	r0, [r3, #16]
 8008a8a:	f000 fbb5 	bl	80091f8 <__hi0bits>
 8008a8e:	f1c0 0020 	rsb	r0, r0, #32
 8008a92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a94:	4418      	add	r0, r3
 8008a96:	f010 001f 	ands.w	r0, r0, #31
 8008a9a:	d071      	beq.n	8008b80 <_dtoa_r+0x8f8>
 8008a9c:	f1c0 0320 	rsb	r3, r0, #32
 8008aa0:	2b04      	cmp	r3, #4
 8008aa2:	dd65      	ble.n	8008b70 <_dtoa_r+0x8e8>
 8008aa4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008aa6:	f1c0 001c 	rsb	r0, r0, #28
 8008aaa:	4403      	add	r3, r0
 8008aac:	4480      	add	r8, r0
 8008aae:	4406      	add	r6, r0
 8008ab0:	9309      	str	r3, [sp, #36]	@ 0x24
 8008ab2:	f1b8 0f00 	cmp.w	r8, #0
 8008ab6:	dd05      	ble.n	8008ac4 <_dtoa_r+0x83c>
 8008ab8:	4649      	mov	r1, r9
 8008aba:	4642      	mov	r2, r8
 8008abc:	4658      	mov	r0, fp
 8008abe:	f000 fcff 	bl	80094c0 <__lshift>
 8008ac2:	4681      	mov	r9, r0
 8008ac4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	dd05      	ble.n	8008ad6 <_dtoa_r+0x84e>
 8008aca:	4621      	mov	r1, r4
 8008acc:	461a      	mov	r2, r3
 8008ace:	4658      	mov	r0, fp
 8008ad0:	f000 fcf6 	bl	80094c0 <__lshift>
 8008ad4:	4604      	mov	r4, r0
 8008ad6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d053      	beq.n	8008b84 <_dtoa_r+0x8fc>
 8008adc:	4621      	mov	r1, r4
 8008ade:	4648      	mov	r0, r9
 8008ae0:	f000 fd5a 	bl	8009598 <__mcmp>
 8008ae4:	2800      	cmp	r0, #0
 8008ae6:	da4d      	bge.n	8008b84 <_dtoa_r+0x8fc>
 8008ae8:	1e7b      	subs	r3, r7, #1
 8008aea:	4649      	mov	r1, r9
 8008aec:	9304      	str	r3, [sp, #16]
 8008aee:	220a      	movs	r2, #10
 8008af0:	2300      	movs	r3, #0
 8008af2:	4658      	mov	r0, fp
 8008af4:	f000 faf0 	bl	80090d8 <__multadd>
 8008af8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008afa:	4681      	mov	r9, r0
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	f000 816c 	beq.w	8008dda <_dtoa_r+0xb52>
 8008b02:	2300      	movs	r3, #0
 8008b04:	4629      	mov	r1, r5
 8008b06:	220a      	movs	r2, #10
 8008b08:	4658      	mov	r0, fp
 8008b0a:	f000 fae5 	bl	80090d8 <__multadd>
 8008b0e:	9b08      	ldr	r3, [sp, #32]
 8008b10:	4605      	mov	r5, r0
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	dc61      	bgt.n	8008bda <_dtoa_r+0x952>
 8008b16:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008b18:	2b02      	cmp	r3, #2
 8008b1a:	dc3b      	bgt.n	8008b94 <_dtoa_r+0x90c>
 8008b1c:	e05d      	b.n	8008bda <_dtoa_r+0x952>
 8008b1e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008b20:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008b24:	e746      	b.n	80089b4 <_dtoa_r+0x72c>
 8008b26:	9b07      	ldr	r3, [sp, #28]
 8008b28:	1e5c      	subs	r4, r3, #1
 8008b2a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008b2c:	42a3      	cmp	r3, r4
 8008b2e:	bfbf      	itttt	lt
 8008b30:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8008b32:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8008b34:	1ae3      	sublt	r3, r4, r3
 8008b36:	18d2      	addlt	r2, r2, r3
 8008b38:	bfa8      	it	ge
 8008b3a:	1b1c      	subge	r4, r3, r4
 8008b3c:	9b07      	ldr	r3, [sp, #28]
 8008b3e:	bfbe      	ittt	lt
 8008b40:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8008b42:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8008b44:	2400      	movlt	r4, #0
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	bfb5      	itete	lt
 8008b4a:	eba8 0603 	sublt.w	r6, r8, r3
 8008b4e:	4646      	movge	r6, r8
 8008b50:	2300      	movlt	r3, #0
 8008b52:	9b07      	ldrge	r3, [sp, #28]
 8008b54:	e730      	b.n	80089b8 <_dtoa_r+0x730>
 8008b56:	4646      	mov	r6, r8
 8008b58:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008b5a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8008b5c:	e735      	b.n	80089ca <_dtoa_r+0x742>
 8008b5e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008b60:	e75c      	b.n	8008a1c <_dtoa_r+0x794>
 8008b62:	2300      	movs	r3, #0
 8008b64:	e788      	b.n	8008a78 <_dtoa_r+0x7f0>
 8008b66:	9b02      	ldr	r3, [sp, #8]
 8008b68:	e786      	b.n	8008a78 <_dtoa_r+0x7f0>
 8008b6a:	2300      	movs	r3, #0
 8008b6c:	930a      	str	r3, [sp, #40]	@ 0x28
 8008b6e:	e788      	b.n	8008a82 <_dtoa_r+0x7fa>
 8008b70:	d09f      	beq.n	8008ab2 <_dtoa_r+0x82a>
 8008b72:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008b74:	331c      	adds	r3, #28
 8008b76:	441a      	add	r2, r3
 8008b78:	4498      	add	r8, r3
 8008b7a:	441e      	add	r6, r3
 8008b7c:	9209      	str	r2, [sp, #36]	@ 0x24
 8008b7e:	e798      	b.n	8008ab2 <_dtoa_r+0x82a>
 8008b80:	4603      	mov	r3, r0
 8008b82:	e7f6      	b.n	8008b72 <_dtoa_r+0x8ea>
 8008b84:	9b07      	ldr	r3, [sp, #28]
 8008b86:	9704      	str	r7, [sp, #16]
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	dc20      	bgt.n	8008bce <_dtoa_r+0x946>
 8008b8c:	9308      	str	r3, [sp, #32]
 8008b8e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008b90:	2b02      	cmp	r3, #2
 8008b92:	dd1e      	ble.n	8008bd2 <_dtoa_r+0x94a>
 8008b94:	9b08      	ldr	r3, [sp, #32]
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	f47f aebc 	bne.w	8008914 <_dtoa_r+0x68c>
 8008b9c:	4621      	mov	r1, r4
 8008b9e:	2205      	movs	r2, #5
 8008ba0:	4658      	mov	r0, fp
 8008ba2:	f000 fa99 	bl	80090d8 <__multadd>
 8008ba6:	4601      	mov	r1, r0
 8008ba8:	4604      	mov	r4, r0
 8008baa:	4648      	mov	r0, r9
 8008bac:	f000 fcf4 	bl	8009598 <__mcmp>
 8008bb0:	2800      	cmp	r0, #0
 8008bb2:	f77f aeaf 	ble.w	8008914 <_dtoa_r+0x68c>
 8008bb6:	2331      	movs	r3, #49	@ 0x31
 8008bb8:	4656      	mov	r6, sl
 8008bba:	f806 3b01 	strb.w	r3, [r6], #1
 8008bbe:	9b04      	ldr	r3, [sp, #16]
 8008bc0:	3301      	adds	r3, #1
 8008bc2:	9304      	str	r3, [sp, #16]
 8008bc4:	e6aa      	b.n	800891c <_dtoa_r+0x694>
 8008bc6:	9c07      	ldr	r4, [sp, #28]
 8008bc8:	9704      	str	r7, [sp, #16]
 8008bca:	4625      	mov	r5, r4
 8008bcc:	e7f3      	b.n	8008bb6 <_dtoa_r+0x92e>
 8008bce:	9b07      	ldr	r3, [sp, #28]
 8008bd0:	9308      	str	r3, [sp, #32]
 8008bd2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	f000 8104 	beq.w	8008de2 <_dtoa_r+0xb5a>
 8008bda:	2e00      	cmp	r6, #0
 8008bdc:	dd05      	ble.n	8008bea <_dtoa_r+0x962>
 8008bde:	4629      	mov	r1, r5
 8008be0:	4632      	mov	r2, r6
 8008be2:	4658      	mov	r0, fp
 8008be4:	f000 fc6c 	bl	80094c0 <__lshift>
 8008be8:	4605      	mov	r5, r0
 8008bea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d05a      	beq.n	8008ca6 <_dtoa_r+0xa1e>
 8008bf0:	4658      	mov	r0, fp
 8008bf2:	6869      	ldr	r1, [r5, #4]
 8008bf4:	f000 fa0e 	bl	8009014 <_Balloc>
 8008bf8:	4606      	mov	r6, r0
 8008bfa:	b928      	cbnz	r0, 8008c08 <_dtoa_r+0x980>
 8008bfc:	4602      	mov	r2, r0
 8008bfe:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008c02:	4b83      	ldr	r3, [pc, #524]	@ (8008e10 <_dtoa_r+0xb88>)
 8008c04:	f7ff bb54 	b.w	80082b0 <_dtoa_r+0x28>
 8008c08:	692a      	ldr	r2, [r5, #16]
 8008c0a:	f105 010c 	add.w	r1, r5, #12
 8008c0e:	3202      	adds	r2, #2
 8008c10:	0092      	lsls	r2, r2, #2
 8008c12:	300c      	adds	r0, #12
 8008c14:	f7ff fa9b 	bl	800814e <memcpy>
 8008c18:	2201      	movs	r2, #1
 8008c1a:	4631      	mov	r1, r6
 8008c1c:	4658      	mov	r0, fp
 8008c1e:	f000 fc4f 	bl	80094c0 <__lshift>
 8008c22:	462f      	mov	r7, r5
 8008c24:	4605      	mov	r5, r0
 8008c26:	f10a 0301 	add.w	r3, sl, #1
 8008c2a:	9307      	str	r3, [sp, #28]
 8008c2c:	9b08      	ldr	r3, [sp, #32]
 8008c2e:	4453      	add	r3, sl
 8008c30:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008c32:	9b02      	ldr	r3, [sp, #8]
 8008c34:	f003 0301 	and.w	r3, r3, #1
 8008c38:	930a      	str	r3, [sp, #40]	@ 0x28
 8008c3a:	9b07      	ldr	r3, [sp, #28]
 8008c3c:	4621      	mov	r1, r4
 8008c3e:	3b01      	subs	r3, #1
 8008c40:	4648      	mov	r0, r9
 8008c42:	9302      	str	r3, [sp, #8]
 8008c44:	f7ff fa96 	bl	8008174 <quorem>
 8008c48:	4639      	mov	r1, r7
 8008c4a:	9008      	str	r0, [sp, #32]
 8008c4c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008c50:	4648      	mov	r0, r9
 8008c52:	f000 fca1 	bl	8009598 <__mcmp>
 8008c56:	462a      	mov	r2, r5
 8008c58:	9009      	str	r0, [sp, #36]	@ 0x24
 8008c5a:	4621      	mov	r1, r4
 8008c5c:	4658      	mov	r0, fp
 8008c5e:	f000 fcb7 	bl	80095d0 <__mdiff>
 8008c62:	68c2      	ldr	r2, [r0, #12]
 8008c64:	4606      	mov	r6, r0
 8008c66:	bb02      	cbnz	r2, 8008caa <_dtoa_r+0xa22>
 8008c68:	4601      	mov	r1, r0
 8008c6a:	4648      	mov	r0, r9
 8008c6c:	f000 fc94 	bl	8009598 <__mcmp>
 8008c70:	4602      	mov	r2, r0
 8008c72:	4631      	mov	r1, r6
 8008c74:	4658      	mov	r0, fp
 8008c76:	920c      	str	r2, [sp, #48]	@ 0x30
 8008c78:	f000 fa0c 	bl	8009094 <_Bfree>
 8008c7c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008c7e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008c80:	9e07      	ldr	r6, [sp, #28]
 8008c82:	ea43 0102 	orr.w	r1, r3, r2
 8008c86:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008c88:	4319      	orrs	r1, r3
 8008c8a:	d110      	bne.n	8008cae <_dtoa_r+0xa26>
 8008c8c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008c90:	d029      	beq.n	8008ce6 <_dtoa_r+0xa5e>
 8008c92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	dd02      	ble.n	8008c9e <_dtoa_r+0xa16>
 8008c98:	9b08      	ldr	r3, [sp, #32]
 8008c9a:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8008c9e:	9b02      	ldr	r3, [sp, #8]
 8008ca0:	f883 8000 	strb.w	r8, [r3]
 8008ca4:	e63b      	b.n	800891e <_dtoa_r+0x696>
 8008ca6:	4628      	mov	r0, r5
 8008ca8:	e7bb      	b.n	8008c22 <_dtoa_r+0x99a>
 8008caa:	2201      	movs	r2, #1
 8008cac:	e7e1      	b.n	8008c72 <_dtoa_r+0x9ea>
 8008cae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	db04      	blt.n	8008cbe <_dtoa_r+0xa36>
 8008cb4:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8008cb6:	430b      	orrs	r3, r1
 8008cb8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008cba:	430b      	orrs	r3, r1
 8008cbc:	d120      	bne.n	8008d00 <_dtoa_r+0xa78>
 8008cbe:	2a00      	cmp	r2, #0
 8008cc0:	dded      	ble.n	8008c9e <_dtoa_r+0xa16>
 8008cc2:	4649      	mov	r1, r9
 8008cc4:	2201      	movs	r2, #1
 8008cc6:	4658      	mov	r0, fp
 8008cc8:	f000 fbfa 	bl	80094c0 <__lshift>
 8008ccc:	4621      	mov	r1, r4
 8008cce:	4681      	mov	r9, r0
 8008cd0:	f000 fc62 	bl	8009598 <__mcmp>
 8008cd4:	2800      	cmp	r0, #0
 8008cd6:	dc03      	bgt.n	8008ce0 <_dtoa_r+0xa58>
 8008cd8:	d1e1      	bne.n	8008c9e <_dtoa_r+0xa16>
 8008cda:	f018 0f01 	tst.w	r8, #1
 8008cde:	d0de      	beq.n	8008c9e <_dtoa_r+0xa16>
 8008ce0:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008ce4:	d1d8      	bne.n	8008c98 <_dtoa_r+0xa10>
 8008ce6:	2339      	movs	r3, #57	@ 0x39
 8008ce8:	9a02      	ldr	r2, [sp, #8]
 8008cea:	7013      	strb	r3, [r2, #0]
 8008cec:	4633      	mov	r3, r6
 8008cee:	461e      	mov	r6, r3
 8008cf0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008cf4:	3b01      	subs	r3, #1
 8008cf6:	2a39      	cmp	r2, #57	@ 0x39
 8008cf8:	d052      	beq.n	8008da0 <_dtoa_r+0xb18>
 8008cfa:	3201      	adds	r2, #1
 8008cfc:	701a      	strb	r2, [r3, #0]
 8008cfe:	e60e      	b.n	800891e <_dtoa_r+0x696>
 8008d00:	2a00      	cmp	r2, #0
 8008d02:	dd07      	ble.n	8008d14 <_dtoa_r+0xa8c>
 8008d04:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008d08:	d0ed      	beq.n	8008ce6 <_dtoa_r+0xa5e>
 8008d0a:	9a02      	ldr	r2, [sp, #8]
 8008d0c:	f108 0301 	add.w	r3, r8, #1
 8008d10:	7013      	strb	r3, [r2, #0]
 8008d12:	e604      	b.n	800891e <_dtoa_r+0x696>
 8008d14:	9b07      	ldr	r3, [sp, #28]
 8008d16:	9a07      	ldr	r2, [sp, #28]
 8008d18:	f803 8c01 	strb.w	r8, [r3, #-1]
 8008d1c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008d1e:	4293      	cmp	r3, r2
 8008d20:	d028      	beq.n	8008d74 <_dtoa_r+0xaec>
 8008d22:	4649      	mov	r1, r9
 8008d24:	2300      	movs	r3, #0
 8008d26:	220a      	movs	r2, #10
 8008d28:	4658      	mov	r0, fp
 8008d2a:	f000 f9d5 	bl	80090d8 <__multadd>
 8008d2e:	42af      	cmp	r7, r5
 8008d30:	4681      	mov	r9, r0
 8008d32:	f04f 0300 	mov.w	r3, #0
 8008d36:	f04f 020a 	mov.w	r2, #10
 8008d3a:	4639      	mov	r1, r7
 8008d3c:	4658      	mov	r0, fp
 8008d3e:	d107      	bne.n	8008d50 <_dtoa_r+0xac8>
 8008d40:	f000 f9ca 	bl	80090d8 <__multadd>
 8008d44:	4607      	mov	r7, r0
 8008d46:	4605      	mov	r5, r0
 8008d48:	9b07      	ldr	r3, [sp, #28]
 8008d4a:	3301      	adds	r3, #1
 8008d4c:	9307      	str	r3, [sp, #28]
 8008d4e:	e774      	b.n	8008c3a <_dtoa_r+0x9b2>
 8008d50:	f000 f9c2 	bl	80090d8 <__multadd>
 8008d54:	4629      	mov	r1, r5
 8008d56:	4607      	mov	r7, r0
 8008d58:	2300      	movs	r3, #0
 8008d5a:	220a      	movs	r2, #10
 8008d5c:	4658      	mov	r0, fp
 8008d5e:	f000 f9bb 	bl	80090d8 <__multadd>
 8008d62:	4605      	mov	r5, r0
 8008d64:	e7f0      	b.n	8008d48 <_dtoa_r+0xac0>
 8008d66:	9b08      	ldr	r3, [sp, #32]
 8008d68:	2700      	movs	r7, #0
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	bfcc      	ite	gt
 8008d6e:	461e      	movgt	r6, r3
 8008d70:	2601      	movle	r6, #1
 8008d72:	4456      	add	r6, sl
 8008d74:	4649      	mov	r1, r9
 8008d76:	2201      	movs	r2, #1
 8008d78:	4658      	mov	r0, fp
 8008d7a:	f000 fba1 	bl	80094c0 <__lshift>
 8008d7e:	4621      	mov	r1, r4
 8008d80:	4681      	mov	r9, r0
 8008d82:	f000 fc09 	bl	8009598 <__mcmp>
 8008d86:	2800      	cmp	r0, #0
 8008d88:	dcb0      	bgt.n	8008cec <_dtoa_r+0xa64>
 8008d8a:	d102      	bne.n	8008d92 <_dtoa_r+0xb0a>
 8008d8c:	f018 0f01 	tst.w	r8, #1
 8008d90:	d1ac      	bne.n	8008cec <_dtoa_r+0xa64>
 8008d92:	4633      	mov	r3, r6
 8008d94:	461e      	mov	r6, r3
 8008d96:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008d9a:	2a30      	cmp	r2, #48	@ 0x30
 8008d9c:	d0fa      	beq.n	8008d94 <_dtoa_r+0xb0c>
 8008d9e:	e5be      	b.n	800891e <_dtoa_r+0x696>
 8008da0:	459a      	cmp	sl, r3
 8008da2:	d1a4      	bne.n	8008cee <_dtoa_r+0xa66>
 8008da4:	9b04      	ldr	r3, [sp, #16]
 8008da6:	3301      	adds	r3, #1
 8008da8:	9304      	str	r3, [sp, #16]
 8008daa:	2331      	movs	r3, #49	@ 0x31
 8008dac:	f88a 3000 	strb.w	r3, [sl]
 8008db0:	e5b5      	b.n	800891e <_dtoa_r+0x696>
 8008db2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8008db4:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8008e14 <_dtoa_r+0xb8c>
 8008db8:	b11b      	cbz	r3, 8008dc2 <_dtoa_r+0xb3a>
 8008dba:	f10a 0308 	add.w	r3, sl, #8
 8008dbe:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8008dc0:	6013      	str	r3, [r2, #0]
 8008dc2:	4650      	mov	r0, sl
 8008dc4:	b017      	add	sp, #92	@ 0x5c
 8008dc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008dca:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008dcc:	2b01      	cmp	r3, #1
 8008dce:	f77f ae3d 	ble.w	8008a4c <_dtoa_r+0x7c4>
 8008dd2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008dd4:	930a      	str	r3, [sp, #40]	@ 0x28
 8008dd6:	2001      	movs	r0, #1
 8008dd8:	e65b      	b.n	8008a92 <_dtoa_r+0x80a>
 8008dda:	9b08      	ldr	r3, [sp, #32]
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	f77f aed6 	ble.w	8008b8e <_dtoa_r+0x906>
 8008de2:	4656      	mov	r6, sl
 8008de4:	4621      	mov	r1, r4
 8008de6:	4648      	mov	r0, r9
 8008de8:	f7ff f9c4 	bl	8008174 <quorem>
 8008dec:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008df0:	9b08      	ldr	r3, [sp, #32]
 8008df2:	f806 8b01 	strb.w	r8, [r6], #1
 8008df6:	eba6 020a 	sub.w	r2, r6, sl
 8008dfa:	4293      	cmp	r3, r2
 8008dfc:	ddb3      	ble.n	8008d66 <_dtoa_r+0xade>
 8008dfe:	4649      	mov	r1, r9
 8008e00:	2300      	movs	r3, #0
 8008e02:	220a      	movs	r2, #10
 8008e04:	4658      	mov	r0, fp
 8008e06:	f000 f967 	bl	80090d8 <__multadd>
 8008e0a:	4681      	mov	r9, r0
 8008e0c:	e7ea      	b.n	8008de4 <_dtoa_r+0xb5c>
 8008e0e:	bf00      	nop
 8008e10:	0800c069 	.word	0x0800c069
 8008e14:	0800bfed 	.word	0x0800bfed

08008e18 <_free_r>:
 8008e18:	b538      	push	{r3, r4, r5, lr}
 8008e1a:	4605      	mov	r5, r0
 8008e1c:	2900      	cmp	r1, #0
 8008e1e:	d040      	beq.n	8008ea2 <_free_r+0x8a>
 8008e20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008e24:	1f0c      	subs	r4, r1, #4
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	bfb8      	it	lt
 8008e2a:	18e4      	addlt	r4, r4, r3
 8008e2c:	f000 f8e6 	bl	8008ffc <__malloc_lock>
 8008e30:	4a1c      	ldr	r2, [pc, #112]	@ (8008ea4 <_free_r+0x8c>)
 8008e32:	6813      	ldr	r3, [r2, #0]
 8008e34:	b933      	cbnz	r3, 8008e44 <_free_r+0x2c>
 8008e36:	6063      	str	r3, [r4, #4]
 8008e38:	6014      	str	r4, [r2, #0]
 8008e3a:	4628      	mov	r0, r5
 8008e3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008e40:	f000 b8e2 	b.w	8009008 <__malloc_unlock>
 8008e44:	42a3      	cmp	r3, r4
 8008e46:	d908      	bls.n	8008e5a <_free_r+0x42>
 8008e48:	6820      	ldr	r0, [r4, #0]
 8008e4a:	1821      	adds	r1, r4, r0
 8008e4c:	428b      	cmp	r3, r1
 8008e4e:	bf01      	itttt	eq
 8008e50:	6819      	ldreq	r1, [r3, #0]
 8008e52:	685b      	ldreq	r3, [r3, #4]
 8008e54:	1809      	addeq	r1, r1, r0
 8008e56:	6021      	streq	r1, [r4, #0]
 8008e58:	e7ed      	b.n	8008e36 <_free_r+0x1e>
 8008e5a:	461a      	mov	r2, r3
 8008e5c:	685b      	ldr	r3, [r3, #4]
 8008e5e:	b10b      	cbz	r3, 8008e64 <_free_r+0x4c>
 8008e60:	42a3      	cmp	r3, r4
 8008e62:	d9fa      	bls.n	8008e5a <_free_r+0x42>
 8008e64:	6811      	ldr	r1, [r2, #0]
 8008e66:	1850      	adds	r0, r2, r1
 8008e68:	42a0      	cmp	r0, r4
 8008e6a:	d10b      	bne.n	8008e84 <_free_r+0x6c>
 8008e6c:	6820      	ldr	r0, [r4, #0]
 8008e6e:	4401      	add	r1, r0
 8008e70:	1850      	adds	r0, r2, r1
 8008e72:	4283      	cmp	r3, r0
 8008e74:	6011      	str	r1, [r2, #0]
 8008e76:	d1e0      	bne.n	8008e3a <_free_r+0x22>
 8008e78:	6818      	ldr	r0, [r3, #0]
 8008e7a:	685b      	ldr	r3, [r3, #4]
 8008e7c:	4408      	add	r0, r1
 8008e7e:	6010      	str	r0, [r2, #0]
 8008e80:	6053      	str	r3, [r2, #4]
 8008e82:	e7da      	b.n	8008e3a <_free_r+0x22>
 8008e84:	d902      	bls.n	8008e8c <_free_r+0x74>
 8008e86:	230c      	movs	r3, #12
 8008e88:	602b      	str	r3, [r5, #0]
 8008e8a:	e7d6      	b.n	8008e3a <_free_r+0x22>
 8008e8c:	6820      	ldr	r0, [r4, #0]
 8008e8e:	1821      	adds	r1, r4, r0
 8008e90:	428b      	cmp	r3, r1
 8008e92:	bf01      	itttt	eq
 8008e94:	6819      	ldreq	r1, [r3, #0]
 8008e96:	685b      	ldreq	r3, [r3, #4]
 8008e98:	1809      	addeq	r1, r1, r0
 8008e9a:	6021      	streq	r1, [r4, #0]
 8008e9c:	6063      	str	r3, [r4, #4]
 8008e9e:	6054      	str	r4, [r2, #4]
 8008ea0:	e7cb      	b.n	8008e3a <_free_r+0x22>
 8008ea2:	bd38      	pop	{r3, r4, r5, pc}
 8008ea4:	200008ec 	.word	0x200008ec

08008ea8 <malloc>:
 8008ea8:	4b02      	ldr	r3, [pc, #8]	@ (8008eb4 <malloc+0xc>)
 8008eaa:	4601      	mov	r1, r0
 8008eac:	6818      	ldr	r0, [r3, #0]
 8008eae:	f000 b825 	b.w	8008efc <_malloc_r>
 8008eb2:	bf00      	nop
 8008eb4:	20000030 	.word	0x20000030

08008eb8 <sbrk_aligned>:
 8008eb8:	b570      	push	{r4, r5, r6, lr}
 8008eba:	4e0f      	ldr	r6, [pc, #60]	@ (8008ef8 <sbrk_aligned+0x40>)
 8008ebc:	460c      	mov	r4, r1
 8008ebe:	6831      	ldr	r1, [r6, #0]
 8008ec0:	4605      	mov	r5, r0
 8008ec2:	b911      	cbnz	r1, 8008eca <sbrk_aligned+0x12>
 8008ec4:	f001 ffb0 	bl	800ae28 <_sbrk_r>
 8008ec8:	6030      	str	r0, [r6, #0]
 8008eca:	4621      	mov	r1, r4
 8008ecc:	4628      	mov	r0, r5
 8008ece:	f001 ffab 	bl	800ae28 <_sbrk_r>
 8008ed2:	1c43      	adds	r3, r0, #1
 8008ed4:	d103      	bne.n	8008ede <sbrk_aligned+0x26>
 8008ed6:	f04f 34ff 	mov.w	r4, #4294967295
 8008eda:	4620      	mov	r0, r4
 8008edc:	bd70      	pop	{r4, r5, r6, pc}
 8008ede:	1cc4      	adds	r4, r0, #3
 8008ee0:	f024 0403 	bic.w	r4, r4, #3
 8008ee4:	42a0      	cmp	r0, r4
 8008ee6:	d0f8      	beq.n	8008eda <sbrk_aligned+0x22>
 8008ee8:	1a21      	subs	r1, r4, r0
 8008eea:	4628      	mov	r0, r5
 8008eec:	f001 ff9c 	bl	800ae28 <_sbrk_r>
 8008ef0:	3001      	adds	r0, #1
 8008ef2:	d1f2      	bne.n	8008eda <sbrk_aligned+0x22>
 8008ef4:	e7ef      	b.n	8008ed6 <sbrk_aligned+0x1e>
 8008ef6:	bf00      	nop
 8008ef8:	200008e8 	.word	0x200008e8

08008efc <_malloc_r>:
 8008efc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f00:	1ccd      	adds	r5, r1, #3
 8008f02:	f025 0503 	bic.w	r5, r5, #3
 8008f06:	3508      	adds	r5, #8
 8008f08:	2d0c      	cmp	r5, #12
 8008f0a:	bf38      	it	cc
 8008f0c:	250c      	movcc	r5, #12
 8008f0e:	2d00      	cmp	r5, #0
 8008f10:	4606      	mov	r6, r0
 8008f12:	db01      	blt.n	8008f18 <_malloc_r+0x1c>
 8008f14:	42a9      	cmp	r1, r5
 8008f16:	d904      	bls.n	8008f22 <_malloc_r+0x26>
 8008f18:	230c      	movs	r3, #12
 8008f1a:	6033      	str	r3, [r6, #0]
 8008f1c:	2000      	movs	r0, #0
 8008f1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008f22:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008ff8 <_malloc_r+0xfc>
 8008f26:	f000 f869 	bl	8008ffc <__malloc_lock>
 8008f2a:	f8d8 3000 	ldr.w	r3, [r8]
 8008f2e:	461c      	mov	r4, r3
 8008f30:	bb44      	cbnz	r4, 8008f84 <_malloc_r+0x88>
 8008f32:	4629      	mov	r1, r5
 8008f34:	4630      	mov	r0, r6
 8008f36:	f7ff ffbf 	bl	8008eb8 <sbrk_aligned>
 8008f3a:	1c43      	adds	r3, r0, #1
 8008f3c:	4604      	mov	r4, r0
 8008f3e:	d158      	bne.n	8008ff2 <_malloc_r+0xf6>
 8008f40:	f8d8 4000 	ldr.w	r4, [r8]
 8008f44:	4627      	mov	r7, r4
 8008f46:	2f00      	cmp	r7, #0
 8008f48:	d143      	bne.n	8008fd2 <_malloc_r+0xd6>
 8008f4a:	2c00      	cmp	r4, #0
 8008f4c:	d04b      	beq.n	8008fe6 <_malloc_r+0xea>
 8008f4e:	6823      	ldr	r3, [r4, #0]
 8008f50:	4639      	mov	r1, r7
 8008f52:	4630      	mov	r0, r6
 8008f54:	eb04 0903 	add.w	r9, r4, r3
 8008f58:	f001 ff66 	bl	800ae28 <_sbrk_r>
 8008f5c:	4581      	cmp	r9, r0
 8008f5e:	d142      	bne.n	8008fe6 <_malloc_r+0xea>
 8008f60:	6821      	ldr	r1, [r4, #0]
 8008f62:	4630      	mov	r0, r6
 8008f64:	1a6d      	subs	r5, r5, r1
 8008f66:	4629      	mov	r1, r5
 8008f68:	f7ff ffa6 	bl	8008eb8 <sbrk_aligned>
 8008f6c:	3001      	adds	r0, #1
 8008f6e:	d03a      	beq.n	8008fe6 <_malloc_r+0xea>
 8008f70:	6823      	ldr	r3, [r4, #0]
 8008f72:	442b      	add	r3, r5
 8008f74:	6023      	str	r3, [r4, #0]
 8008f76:	f8d8 3000 	ldr.w	r3, [r8]
 8008f7a:	685a      	ldr	r2, [r3, #4]
 8008f7c:	bb62      	cbnz	r2, 8008fd8 <_malloc_r+0xdc>
 8008f7e:	f8c8 7000 	str.w	r7, [r8]
 8008f82:	e00f      	b.n	8008fa4 <_malloc_r+0xa8>
 8008f84:	6822      	ldr	r2, [r4, #0]
 8008f86:	1b52      	subs	r2, r2, r5
 8008f88:	d420      	bmi.n	8008fcc <_malloc_r+0xd0>
 8008f8a:	2a0b      	cmp	r2, #11
 8008f8c:	d917      	bls.n	8008fbe <_malloc_r+0xc2>
 8008f8e:	1961      	adds	r1, r4, r5
 8008f90:	42a3      	cmp	r3, r4
 8008f92:	6025      	str	r5, [r4, #0]
 8008f94:	bf18      	it	ne
 8008f96:	6059      	strne	r1, [r3, #4]
 8008f98:	6863      	ldr	r3, [r4, #4]
 8008f9a:	bf08      	it	eq
 8008f9c:	f8c8 1000 	streq.w	r1, [r8]
 8008fa0:	5162      	str	r2, [r4, r5]
 8008fa2:	604b      	str	r3, [r1, #4]
 8008fa4:	4630      	mov	r0, r6
 8008fa6:	f000 f82f 	bl	8009008 <__malloc_unlock>
 8008faa:	f104 000b 	add.w	r0, r4, #11
 8008fae:	1d23      	adds	r3, r4, #4
 8008fb0:	f020 0007 	bic.w	r0, r0, #7
 8008fb4:	1ac2      	subs	r2, r0, r3
 8008fb6:	bf1c      	itt	ne
 8008fb8:	1a1b      	subne	r3, r3, r0
 8008fba:	50a3      	strne	r3, [r4, r2]
 8008fbc:	e7af      	b.n	8008f1e <_malloc_r+0x22>
 8008fbe:	6862      	ldr	r2, [r4, #4]
 8008fc0:	42a3      	cmp	r3, r4
 8008fc2:	bf0c      	ite	eq
 8008fc4:	f8c8 2000 	streq.w	r2, [r8]
 8008fc8:	605a      	strne	r2, [r3, #4]
 8008fca:	e7eb      	b.n	8008fa4 <_malloc_r+0xa8>
 8008fcc:	4623      	mov	r3, r4
 8008fce:	6864      	ldr	r4, [r4, #4]
 8008fd0:	e7ae      	b.n	8008f30 <_malloc_r+0x34>
 8008fd2:	463c      	mov	r4, r7
 8008fd4:	687f      	ldr	r7, [r7, #4]
 8008fd6:	e7b6      	b.n	8008f46 <_malloc_r+0x4a>
 8008fd8:	461a      	mov	r2, r3
 8008fda:	685b      	ldr	r3, [r3, #4]
 8008fdc:	42a3      	cmp	r3, r4
 8008fde:	d1fb      	bne.n	8008fd8 <_malloc_r+0xdc>
 8008fe0:	2300      	movs	r3, #0
 8008fe2:	6053      	str	r3, [r2, #4]
 8008fe4:	e7de      	b.n	8008fa4 <_malloc_r+0xa8>
 8008fe6:	230c      	movs	r3, #12
 8008fe8:	4630      	mov	r0, r6
 8008fea:	6033      	str	r3, [r6, #0]
 8008fec:	f000 f80c 	bl	8009008 <__malloc_unlock>
 8008ff0:	e794      	b.n	8008f1c <_malloc_r+0x20>
 8008ff2:	6005      	str	r5, [r0, #0]
 8008ff4:	e7d6      	b.n	8008fa4 <_malloc_r+0xa8>
 8008ff6:	bf00      	nop
 8008ff8:	200008ec 	.word	0x200008ec

08008ffc <__malloc_lock>:
 8008ffc:	4801      	ldr	r0, [pc, #4]	@ (8009004 <__malloc_lock+0x8>)
 8008ffe:	f7ff b896 	b.w	800812e <__retarget_lock_acquire_recursive>
 8009002:	bf00      	nop
 8009004:	200008e4 	.word	0x200008e4

08009008 <__malloc_unlock>:
 8009008:	4801      	ldr	r0, [pc, #4]	@ (8009010 <__malloc_unlock+0x8>)
 800900a:	f7ff b891 	b.w	8008130 <__retarget_lock_release_recursive>
 800900e:	bf00      	nop
 8009010:	200008e4 	.word	0x200008e4

08009014 <_Balloc>:
 8009014:	b570      	push	{r4, r5, r6, lr}
 8009016:	69c6      	ldr	r6, [r0, #28]
 8009018:	4604      	mov	r4, r0
 800901a:	460d      	mov	r5, r1
 800901c:	b976      	cbnz	r6, 800903c <_Balloc+0x28>
 800901e:	2010      	movs	r0, #16
 8009020:	f7ff ff42 	bl	8008ea8 <malloc>
 8009024:	4602      	mov	r2, r0
 8009026:	61e0      	str	r0, [r4, #28]
 8009028:	b920      	cbnz	r0, 8009034 <_Balloc+0x20>
 800902a:	216b      	movs	r1, #107	@ 0x6b
 800902c:	4b17      	ldr	r3, [pc, #92]	@ (800908c <_Balloc+0x78>)
 800902e:	4818      	ldr	r0, [pc, #96]	@ (8009090 <_Balloc+0x7c>)
 8009030:	f001 ff10 	bl	800ae54 <__assert_func>
 8009034:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009038:	6006      	str	r6, [r0, #0]
 800903a:	60c6      	str	r6, [r0, #12]
 800903c:	69e6      	ldr	r6, [r4, #28]
 800903e:	68f3      	ldr	r3, [r6, #12]
 8009040:	b183      	cbz	r3, 8009064 <_Balloc+0x50>
 8009042:	69e3      	ldr	r3, [r4, #28]
 8009044:	68db      	ldr	r3, [r3, #12]
 8009046:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800904a:	b9b8      	cbnz	r0, 800907c <_Balloc+0x68>
 800904c:	2101      	movs	r1, #1
 800904e:	fa01 f605 	lsl.w	r6, r1, r5
 8009052:	1d72      	adds	r2, r6, #5
 8009054:	4620      	mov	r0, r4
 8009056:	0092      	lsls	r2, r2, #2
 8009058:	f001 ff1a 	bl	800ae90 <_calloc_r>
 800905c:	b160      	cbz	r0, 8009078 <_Balloc+0x64>
 800905e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009062:	e00e      	b.n	8009082 <_Balloc+0x6e>
 8009064:	2221      	movs	r2, #33	@ 0x21
 8009066:	2104      	movs	r1, #4
 8009068:	4620      	mov	r0, r4
 800906a:	f001 ff11 	bl	800ae90 <_calloc_r>
 800906e:	69e3      	ldr	r3, [r4, #28]
 8009070:	60f0      	str	r0, [r6, #12]
 8009072:	68db      	ldr	r3, [r3, #12]
 8009074:	2b00      	cmp	r3, #0
 8009076:	d1e4      	bne.n	8009042 <_Balloc+0x2e>
 8009078:	2000      	movs	r0, #0
 800907a:	bd70      	pop	{r4, r5, r6, pc}
 800907c:	6802      	ldr	r2, [r0, #0]
 800907e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009082:	2300      	movs	r3, #0
 8009084:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009088:	e7f7      	b.n	800907a <_Balloc+0x66>
 800908a:	bf00      	nop
 800908c:	0800bffa 	.word	0x0800bffa
 8009090:	0800c07a 	.word	0x0800c07a

08009094 <_Bfree>:
 8009094:	b570      	push	{r4, r5, r6, lr}
 8009096:	69c6      	ldr	r6, [r0, #28]
 8009098:	4605      	mov	r5, r0
 800909a:	460c      	mov	r4, r1
 800909c:	b976      	cbnz	r6, 80090bc <_Bfree+0x28>
 800909e:	2010      	movs	r0, #16
 80090a0:	f7ff ff02 	bl	8008ea8 <malloc>
 80090a4:	4602      	mov	r2, r0
 80090a6:	61e8      	str	r0, [r5, #28]
 80090a8:	b920      	cbnz	r0, 80090b4 <_Bfree+0x20>
 80090aa:	218f      	movs	r1, #143	@ 0x8f
 80090ac:	4b08      	ldr	r3, [pc, #32]	@ (80090d0 <_Bfree+0x3c>)
 80090ae:	4809      	ldr	r0, [pc, #36]	@ (80090d4 <_Bfree+0x40>)
 80090b0:	f001 fed0 	bl	800ae54 <__assert_func>
 80090b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80090b8:	6006      	str	r6, [r0, #0]
 80090ba:	60c6      	str	r6, [r0, #12]
 80090bc:	b13c      	cbz	r4, 80090ce <_Bfree+0x3a>
 80090be:	69eb      	ldr	r3, [r5, #28]
 80090c0:	6862      	ldr	r2, [r4, #4]
 80090c2:	68db      	ldr	r3, [r3, #12]
 80090c4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80090c8:	6021      	str	r1, [r4, #0]
 80090ca:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80090ce:	bd70      	pop	{r4, r5, r6, pc}
 80090d0:	0800bffa 	.word	0x0800bffa
 80090d4:	0800c07a 	.word	0x0800c07a

080090d8 <__multadd>:
 80090d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80090dc:	4607      	mov	r7, r0
 80090de:	460c      	mov	r4, r1
 80090e0:	461e      	mov	r6, r3
 80090e2:	2000      	movs	r0, #0
 80090e4:	690d      	ldr	r5, [r1, #16]
 80090e6:	f101 0c14 	add.w	ip, r1, #20
 80090ea:	f8dc 3000 	ldr.w	r3, [ip]
 80090ee:	3001      	adds	r0, #1
 80090f0:	b299      	uxth	r1, r3
 80090f2:	fb02 6101 	mla	r1, r2, r1, r6
 80090f6:	0c1e      	lsrs	r6, r3, #16
 80090f8:	0c0b      	lsrs	r3, r1, #16
 80090fa:	fb02 3306 	mla	r3, r2, r6, r3
 80090fe:	b289      	uxth	r1, r1
 8009100:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009104:	4285      	cmp	r5, r0
 8009106:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800910a:	f84c 1b04 	str.w	r1, [ip], #4
 800910e:	dcec      	bgt.n	80090ea <__multadd+0x12>
 8009110:	b30e      	cbz	r6, 8009156 <__multadd+0x7e>
 8009112:	68a3      	ldr	r3, [r4, #8]
 8009114:	42ab      	cmp	r3, r5
 8009116:	dc19      	bgt.n	800914c <__multadd+0x74>
 8009118:	6861      	ldr	r1, [r4, #4]
 800911a:	4638      	mov	r0, r7
 800911c:	3101      	adds	r1, #1
 800911e:	f7ff ff79 	bl	8009014 <_Balloc>
 8009122:	4680      	mov	r8, r0
 8009124:	b928      	cbnz	r0, 8009132 <__multadd+0x5a>
 8009126:	4602      	mov	r2, r0
 8009128:	21ba      	movs	r1, #186	@ 0xba
 800912a:	4b0c      	ldr	r3, [pc, #48]	@ (800915c <__multadd+0x84>)
 800912c:	480c      	ldr	r0, [pc, #48]	@ (8009160 <__multadd+0x88>)
 800912e:	f001 fe91 	bl	800ae54 <__assert_func>
 8009132:	6922      	ldr	r2, [r4, #16]
 8009134:	f104 010c 	add.w	r1, r4, #12
 8009138:	3202      	adds	r2, #2
 800913a:	0092      	lsls	r2, r2, #2
 800913c:	300c      	adds	r0, #12
 800913e:	f7ff f806 	bl	800814e <memcpy>
 8009142:	4621      	mov	r1, r4
 8009144:	4638      	mov	r0, r7
 8009146:	f7ff ffa5 	bl	8009094 <_Bfree>
 800914a:	4644      	mov	r4, r8
 800914c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009150:	3501      	adds	r5, #1
 8009152:	615e      	str	r6, [r3, #20]
 8009154:	6125      	str	r5, [r4, #16]
 8009156:	4620      	mov	r0, r4
 8009158:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800915c:	0800c069 	.word	0x0800c069
 8009160:	0800c07a 	.word	0x0800c07a

08009164 <__s2b>:
 8009164:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009168:	4615      	mov	r5, r2
 800916a:	2209      	movs	r2, #9
 800916c:	461f      	mov	r7, r3
 800916e:	3308      	adds	r3, #8
 8009170:	460c      	mov	r4, r1
 8009172:	fb93 f3f2 	sdiv	r3, r3, r2
 8009176:	4606      	mov	r6, r0
 8009178:	2201      	movs	r2, #1
 800917a:	2100      	movs	r1, #0
 800917c:	429a      	cmp	r2, r3
 800917e:	db09      	blt.n	8009194 <__s2b+0x30>
 8009180:	4630      	mov	r0, r6
 8009182:	f7ff ff47 	bl	8009014 <_Balloc>
 8009186:	b940      	cbnz	r0, 800919a <__s2b+0x36>
 8009188:	4602      	mov	r2, r0
 800918a:	21d3      	movs	r1, #211	@ 0xd3
 800918c:	4b18      	ldr	r3, [pc, #96]	@ (80091f0 <__s2b+0x8c>)
 800918e:	4819      	ldr	r0, [pc, #100]	@ (80091f4 <__s2b+0x90>)
 8009190:	f001 fe60 	bl	800ae54 <__assert_func>
 8009194:	0052      	lsls	r2, r2, #1
 8009196:	3101      	adds	r1, #1
 8009198:	e7f0      	b.n	800917c <__s2b+0x18>
 800919a:	9b08      	ldr	r3, [sp, #32]
 800919c:	2d09      	cmp	r5, #9
 800919e:	6143      	str	r3, [r0, #20]
 80091a0:	f04f 0301 	mov.w	r3, #1
 80091a4:	6103      	str	r3, [r0, #16]
 80091a6:	dd16      	ble.n	80091d6 <__s2b+0x72>
 80091a8:	f104 0909 	add.w	r9, r4, #9
 80091ac:	46c8      	mov	r8, r9
 80091ae:	442c      	add	r4, r5
 80091b0:	f818 3b01 	ldrb.w	r3, [r8], #1
 80091b4:	4601      	mov	r1, r0
 80091b6:	220a      	movs	r2, #10
 80091b8:	4630      	mov	r0, r6
 80091ba:	3b30      	subs	r3, #48	@ 0x30
 80091bc:	f7ff ff8c 	bl	80090d8 <__multadd>
 80091c0:	45a0      	cmp	r8, r4
 80091c2:	d1f5      	bne.n	80091b0 <__s2b+0x4c>
 80091c4:	f1a5 0408 	sub.w	r4, r5, #8
 80091c8:	444c      	add	r4, r9
 80091ca:	1b2d      	subs	r5, r5, r4
 80091cc:	1963      	adds	r3, r4, r5
 80091ce:	42bb      	cmp	r3, r7
 80091d0:	db04      	blt.n	80091dc <__s2b+0x78>
 80091d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80091d6:	2509      	movs	r5, #9
 80091d8:	340a      	adds	r4, #10
 80091da:	e7f6      	b.n	80091ca <__s2b+0x66>
 80091dc:	f814 3b01 	ldrb.w	r3, [r4], #1
 80091e0:	4601      	mov	r1, r0
 80091e2:	220a      	movs	r2, #10
 80091e4:	4630      	mov	r0, r6
 80091e6:	3b30      	subs	r3, #48	@ 0x30
 80091e8:	f7ff ff76 	bl	80090d8 <__multadd>
 80091ec:	e7ee      	b.n	80091cc <__s2b+0x68>
 80091ee:	bf00      	nop
 80091f0:	0800c069 	.word	0x0800c069
 80091f4:	0800c07a 	.word	0x0800c07a

080091f8 <__hi0bits>:
 80091f8:	4603      	mov	r3, r0
 80091fa:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80091fe:	bf3a      	itte	cc
 8009200:	0403      	lslcc	r3, r0, #16
 8009202:	2010      	movcc	r0, #16
 8009204:	2000      	movcs	r0, #0
 8009206:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800920a:	bf3c      	itt	cc
 800920c:	021b      	lslcc	r3, r3, #8
 800920e:	3008      	addcc	r0, #8
 8009210:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009214:	bf3c      	itt	cc
 8009216:	011b      	lslcc	r3, r3, #4
 8009218:	3004      	addcc	r0, #4
 800921a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800921e:	bf3c      	itt	cc
 8009220:	009b      	lslcc	r3, r3, #2
 8009222:	3002      	addcc	r0, #2
 8009224:	2b00      	cmp	r3, #0
 8009226:	db05      	blt.n	8009234 <__hi0bits+0x3c>
 8009228:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800922c:	f100 0001 	add.w	r0, r0, #1
 8009230:	bf08      	it	eq
 8009232:	2020      	moveq	r0, #32
 8009234:	4770      	bx	lr

08009236 <__lo0bits>:
 8009236:	6803      	ldr	r3, [r0, #0]
 8009238:	4602      	mov	r2, r0
 800923a:	f013 0007 	ands.w	r0, r3, #7
 800923e:	d00b      	beq.n	8009258 <__lo0bits+0x22>
 8009240:	07d9      	lsls	r1, r3, #31
 8009242:	d421      	bmi.n	8009288 <__lo0bits+0x52>
 8009244:	0798      	lsls	r0, r3, #30
 8009246:	bf49      	itett	mi
 8009248:	085b      	lsrmi	r3, r3, #1
 800924a:	089b      	lsrpl	r3, r3, #2
 800924c:	2001      	movmi	r0, #1
 800924e:	6013      	strmi	r3, [r2, #0]
 8009250:	bf5c      	itt	pl
 8009252:	2002      	movpl	r0, #2
 8009254:	6013      	strpl	r3, [r2, #0]
 8009256:	4770      	bx	lr
 8009258:	b299      	uxth	r1, r3
 800925a:	b909      	cbnz	r1, 8009260 <__lo0bits+0x2a>
 800925c:	2010      	movs	r0, #16
 800925e:	0c1b      	lsrs	r3, r3, #16
 8009260:	b2d9      	uxtb	r1, r3
 8009262:	b909      	cbnz	r1, 8009268 <__lo0bits+0x32>
 8009264:	3008      	adds	r0, #8
 8009266:	0a1b      	lsrs	r3, r3, #8
 8009268:	0719      	lsls	r1, r3, #28
 800926a:	bf04      	itt	eq
 800926c:	091b      	lsreq	r3, r3, #4
 800926e:	3004      	addeq	r0, #4
 8009270:	0799      	lsls	r1, r3, #30
 8009272:	bf04      	itt	eq
 8009274:	089b      	lsreq	r3, r3, #2
 8009276:	3002      	addeq	r0, #2
 8009278:	07d9      	lsls	r1, r3, #31
 800927a:	d403      	bmi.n	8009284 <__lo0bits+0x4e>
 800927c:	085b      	lsrs	r3, r3, #1
 800927e:	f100 0001 	add.w	r0, r0, #1
 8009282:	d003      	beq.n	800928c <__lo0bits+0x56>
 8009284:	6013      	str	r3, [r2, #0]
 8009286:	4770      	bx	lr
 8009288:	2000      	movs	r0, #0
 800928a:	4770      	bx	lr
 800928c:	2020      	movs	r0, #32
 800928e:	4770      	bx	lr

08009290 <__i2b>:
 8009290:	b510      	push	{r4, lr}
 8009292:	460c      	mov	r4, r1
 8009294:	2101      	movs	r1, #1
 8009296:	f7ff febd 	bl	8009014 <_Balloc>
 800929a:	4602      	mov	r2, r0
 800929c:	b928      	cbnz	r0, 80092aa <__i2b+0x1a>
 800929e:	f240 1145 	movw	r1, #325	@ 0x145
 80092a2:	4b04      	ldr	r3, [pc, #16]	@ (80092b4 <__i2b+0x24>)
 80092a4:	4804      	ldr	r0, [pc, #16]	@ (80092b8 <__i2b+0x28>)
 80092a6:	f001 fdd5 	bl	800ae54 <__assert_func>
 80092aa:	2301      	movs	r3, #1
 80092ac:	6144      	str	r4, [r0, #20]
 80092ae:	6103      	str	r3, [r0, #16]
 80092b0:	bd10      	pop	{r4, pc}
 80092b2:	bf00      	nop
 80092b4:	0800c069 	.word	0x0800c069
 80092b8:	0800c07a 	.word	0x0800c07a

080092bc <__multiply>:
 80092bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092c0:	4614      	mov	r4, r2
 80092c2:	690a      	ldr	r2, [r1, #16]
 80092c4:	6923      	ldr	r3, [r4, #16]
 80092c6:	460f      	mov	r7, r1
 80092c8:	429a      	cmp	r2, r3
 80092ca:	bfa2      	ittt	ge
 80092cc:	4623      	movge	r3, r4
 80092ce:	460c      	movge	r4, r1
 80092d0:	461f      	movge	r7, r3
 80092d2:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80092d6:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80092da:	68a3      	ldr	r3, [r4, #8]
 80092dc:	6861      	ldr	r1, [r4, #4]
 80092de:	eb0a 0609 	add.w	r6, sl, r9
 80092e2:	42b3      	cmp	r3, r6
 80092e4:	b085      	sub	sp, #20
 80092e6:	bfb8      	it	lt
 80092e8:	3101      	addlt	r1, #1
 80092ea:	f7ff fe93 	bl	8009014 <_Balloc>
 80092ee:	b930      	cbnz	r0, 80092fe <__multiply+0x42>
 80092f0:	4602      	mov	r2, r0
 80092f2:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80092f6:	4b43      	ldr	r3, [pc, #268]	@ (8009404 <__multiply+0x148>)
 80092f8:	4843      	ldr	r0, [pc, #268]	@ (8009408 <__multiply+0x14c>)
 80092fa:	f001 fdab 	bl	800ae54 <__assert_func>
 80092fe:	f100 0514 	add.w	r5, r0, #20
 8009302:	462b      	mov	r3, r5
 8009304:	2200      	movs	r2, #0
 8009306:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800930a:	4543      	cmp	r3, r8
 800930c:	d321      	bcc.n	8009352 <__multiply+0x96>
 800930e:	f107 0114 	add.w	r1, r7, #20
 8009312:	f104 0214 	add.w	r2, r4, #20
 8009316:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800931a:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800931e:	9302      	str	r3, [sp, #8]
 8009320:	1b13      	subs	r3, r2, r4
 8009322:	3b15      	subs	r3, #21
 8009324:	f023 0303 	bic.w	r3, r3, #3
 8009328:	3304      	adds	r3, #4
 800932a:	f104 0715 	add.w	r7, r4, #21
 800932e:	42ba      	cmp	r2, r7
 8009330:	bf38      	it	cc
 8009332:	2304      	movcc	r3, #4
 8009334:	9301      	str	r3, [sp, #4]
 8009336:	9b02      	ldr	r3, [sp, #8]
 8009338:	9103      	str	r1, [sp, #12]
 800933a:	428b      	cmp	r3, r1
 800933c:	d80c      	bhi.n	8009358 <__multiply+0x9c>
 800933e:	2e00      	cmp	r6, #0
 8009340:	dd03      	ble.n	800934a <__multiply+0x8e>
 8009342:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009346:	2b00      	cmp	r3, #0
 8009348:	d05a      	beq.n	8009400 <__multiply+0x144>
 800934a:	6106      	str	r6, [r0, #16]
 800934c:	b005      	add	sp, #20
 800934e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009352:	f843 2b04 	str.w	r2, [r3], #4
 8009356:	e7d8      	b.n	800930a <__multiply+0x4e>
 8009358:	f8b1 a000 	ldrh.w	sl, [r1]
 800935c:	f1ba 0f00 	cmp.w	sl, #0
 8009360:	d023      	beq.n	80093aa <__multiply+0xee>
 8009362:	46a9      	mov	r9, r5
 8009364:	f04f 0c00 	mov.w	ip, #0
 8009368:	f104 0e14 	add.w	lr, r4, #20
 800936c:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009370:	f8d9 3000 	ldr.w	r3, [r9]
 8009374:	fa1f fb87 	uxth.w	fp, r7
 8009378:	b29b      	uxth	r3, r3
 800937a:	fb0a 330b 	mla	r3, sl, fp, r3
 800937e:	4463      	add	r3, ip
 8009380:	f8d9 c000 	ldr.w	ip, [r9]
 8009384:	0c3f      	lsrs	r7, r7, #16
 8009386:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800938a:	fb0a c707 	mla	r7, sl, r7, ip
 800938e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8009392:	b29b      	uxth	r3, r3
 8009394:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009398:	4572      	cmp	r2, lr
 800939a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800939e:	f849 3b04 	str.w	r3, [r9], #4
 80093a2:	d8e3      	bhi.n	800936c <__multiply+0xb0>
 80093a4:	9b01      	ldr	r3, [sp, #4]
 80093a6:	f845 c003 	str.w	ip, [r5, r3]
 80093aa:	9b03      	ldr	r3, [sp, #12]
 80093ac:	3104      	adds	r1, #4
 80093ae:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80093b2:	f1b9 0f00 	cmp.w	r9, #0
 80093b6:	d021      	beq.n	80093fc <__multiply+0x140>
 80093b8:	46ae      	mov	lr, r5
 80093ba:	f04f 0a00 	mov.w	sl, #0
 80093be:	682b      	ldr	r3, [r5, #0]
 80093c0:	f104 0c14 	add.w	ip, r4, #20
 80093c4:	f8bc b000 	ldrh.w	fp, [ip]
 80093c8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80093cc:	b29b      	uxth	r3, r3
 80093ce:	fb09 770b 	mla	r7, r9, fp, r7
 80093d2:	4457      	add	r7, sl
 80093d4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80093d8:	f84e 3b04 	str.w	r3, [lr], #4
 80093dc:	f85c 3b04 	ldr.w	r3, [ip], #4
 80093e0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80093e4:	f8be 3000 	ldrh.w	r3, [lr]
 80093e8:	4562      	cmp	r2, ip
 80093ea:	fb09 330a 	mla	r3, r9, sl, r3
 80093ee:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80093f2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80093f6:	d8e5      	bhi.n	80093c4 <__multiply+0x108>
 80093f8:	9f01      	ldr	r7, [sp, #4]
 80093fa:	51eb      	str	r3, [r5, r7]
 80093fc:	3504      	adds	r5, #4
 80093fe:	e79a      	b.n	8009336 <__multiply+0x7a>
 8009400:	3e01      	subs	r6, #1
 8009402:	e79c      	b.n	800933e <__multiply+0x82>
 8009404:	0800c069 	.word	0x0800c069
 8009408:	0800c07a 	.word	0x0800c07a

0800940c <__pow5mult>:
 800940c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009410:	4615      	mov	r5, r2
 8009412:	f012 0203 	ands.w	r2, r2, #3
 8009416:	4607      	mov	r7, r0
 8009418:	460e      	mov	r6, r1
 800941a:	d007      	beq.n	800942c <__pow5mult+0x20>
 800941c:	4c25      	ldr	r4, [pc, #148]	@ (80094b4 <__pow5mult+0xa8>)
 800941e:	3a01      	subs	r2, #1
 8009420:	2300      	movs	r3, #0
 8009422:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009426:	f7ff fe57 	bl	80090d8 <__multadd>
 800942a:	4606      	mov	r6, r0
 800942c:	10ad      	asrs	r5, r5, #2
 800942e:	d03d      	beq.n	80094ac <__pow5mult+0xa0>
 8009430:	69fc      	ldr	r4, [r7, #28]
 8009432:	b97c      	cbnz	r4, 8009454 <__pow5mult+0x48>
 8009434:	2010      	movs	r0, #16
 8009436:	f7ff fd37 	bl	8008ea8 <malloc>
 800943a:	4602      	mov	r2, r0
 800943c:	61f8      	str	r0, [r7, #28]
 800943e:	b928      	cbnz	r0, 800944c <__pow5mult+0x40>
 8009440:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009444:	4b1c      	ldr	r3, [pc, #112]	@ (80094b8 <__pow5mult+0xac>)
 8009446:	481d      	ldr	r0, [pc, #116]	@ (80094bc <__pow5mult+0xb0>)
 8009448:	f001 fd04 	bl	800ae54 <__assert_func>
 800944c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009450:	6004      	str	r4, [r0, #0]
 8009452:	60c4      	str	r4, [r0, #12]
 8009454:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009458:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800945c:	b94c      	cbnz	r4, 8009472 <__pow5mult+0x66>
 800945e:	f240 2171 	movw	r1, #625	@ 0x271
 8009462:	4638      	mov	r0, r7
 8009464:	f7ff ff14 	bl	8009290 <__i2b>
 8009468:	2300      	movs	r3, #0
 800946a:	4604      	mov	r4, r0
 800946c:	f8c8 0008 	str.w	r0, [r8, #8]
 8009470:	6003      	str	r3, [r0, #0]
 8009472:	f04f 0900 	mov.w	r9, #0
 8009476:	07eb      	lsls	r3, r5, #31
 8009478:	d50a      	bpl.n	8009490 <__pow5mult+0x84>
 800947a:	4631      	mov	r1, r6
 800947c:	4622      	mov	r2, r4
 800947e:	4638      	mov	r0, r7
 8009480:	f7ff ff1c 	bl	80092bc <__multiply>
 8009484:	4680      	mov	r8, r0
 8009486:	4631      	mov	r1, r6
 8009488:	4638      	mov	r0, r7
 800948a:	f7ff fe03 	bl	8009094 <_Bfree>
 800948e:	4646      	mov	r6, r8
 8009490:	106d      	asrs	r5, r5, #1
 8009492:	d00b      	beq.n	80094ac <__pow5mult+0xa0>
 8009494:	6820      	ldr	r0, [r4, #0]
 8009496:	b938      	cbnz	r0, 80094a8 <__pow5mult+0x9c>
 8009498:	4622      	mov	r2, r4
 800949a:	4621      	mov	r1, r4
 800949c:	4638      	mov	r0, r7
 800949e:	f7ff ff0d 	bl	80092bc <__multiply>
 80094a2:	6020      	str	r0, [r4, #0]
 80094a4:	f8c0 9000 	str.w	r9, [r0]
 80094a8:	4604      	mov	r4, r0
 80094aa:	e7e4      	b.n	8009476 <__pow5mult+0x6a>
 80094ac:	4630      	mov	r0, r6
 80094ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80094b2:	bf00      	nop
 80094b4:	0800c0d4 	.word	0x0800c0d4
 80094b8:	0800bffa 	.word	0x0800bffa
 80094bc:	0800c07a 	.word	0x0800c07a

080094c0 <__lshift>:
 80094c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80094c4:	460c      	mov	r4, r1
 80094c6:	4607      	mov	r7, r0
 80094c8:	4691      	mov	r9, r2
 80094ca:	6923      	ldr	r3, [r4, #16]
 80094cc:	6849      	ldr	r1, [r1, #4]
 80094ce:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80094d2:	68a3      	ldr	r3, [r4, #8]
 80094d4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80094d8:	f108 0601 	add.w	r6, r8, #1
 80094dc:	42b3      	cmp	r3, r6
 80094de:	db0b      	blt.n	80094f8 <__lshift+0x38>
 80094e0:	4638      	mov	r0, r7
 80094e2:	f7ff fd97 	bl	8009014 <_Balloc>
 80094e6:	4605      	mov	r5, r0
 80094e8:	b948      	cbnz	r0, 80094fe <__lshift+0x3e>
 80094ea:	4602      	mov	r2, r0
 80094ec:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80094f0:	4b27      	ldr	r3, [pc, #156]	@ (8009590 <__lshift+0xd0>)
 80094f2:	4828      	ldr	r0, [pc, #160]	@ (8009594 <__lshift+0xd4>)
 80094f4:	f001 fcae 	bl	800ae54 <__assert_func>
 80094f8:	3101      	adds	r1, #1
 80094fa:	005b      	lsls	r3, r3, #1
 80094fc:	e7ee      	b.n	80094dc <__lshift+0x1c>
 80094fe:	2300      	movs	r3, #0
 8009500:	f100 0114 	add.w	r1, r0, #20
 8009504:	f100 0210 	add.w	r2, r0, #16
 8009508:	4618      	mov	r0, r3
 800950a:	4553      	cmp	r3, sl
 800950c:	db33      	blt.n	8009576 <__lshift+0xb6>
 800950e:	6920      	ldr	r0, [r4, #16]
 8009510:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009514:	f104 0314 	add.w	r3, r4, #20
 8009518:	f019 091f 	ands.w	r9, r9, #31
 800951c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009520:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009524:	d02b      	beq.n	800957e <__lshift+0xbe>
 8009526:	468a      	mov	sl, r1
 8009528:	2200      	movs	r2, #0
 800952a:	f1c9 0e20 	rsb	lr, r9, #32
 800952e:	6818      	ldr	r0, [r3, #0]
 8009530:	fa00 f009 	lsl.w	r0, r0, r9
 8009534:	4310      	orrs	r0, r2
 8009536:	f84a 0b04 	str.w	r0, [sl], #4
 800953a:	f853 2b04 	ldr.w	r2, [r3], #4
 800953e:	459c      	cmp	ip, r3
 8009540:	fa22 f20e 	lsr.w	r2, r2, lr
 8009544:	d8f3      	bhi.n	800952e <__lshift+0x6e>
 8009546:	ebac 0304 	sub.w	r3, ip, r4
 800954a:	3b15      	subs	r3, #21
 800954c:	f023 0303 	bic.w	r3, r3, #3
 8009550:	3304      	adds	r3, #4
 8009552:	f104 0015 	add.w	r0, r4, #21
 8009556:	4584      	cmp	ip, r0
 8009558:	bf38      	it	cc
 800955a:	2304      	movcc	r3, #4
 800955c:	50ca      	str	r2, [r1, r3]
 800955e:	b10a      	cbz	r2, 8009564 <__lshift+0xa4>
 8009560:	f108 0602 	add.w	r6, r8, #2
 8009564:	3e01      	subs	r6, #1
 8009566:	4638      	mov	r0, r7
 8009568:	4621      	mov	r1, r4
 800956a:	612e      	str	r6, [r5, #16]
 800956c:	f7ff fd92 	bl	8009094 <_Bfree>
 8009570:	4628      	mov	r0, r5
 8009572:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009576:	f842 0f04 	str.w	r0, [r2, #4]!
 800957a:	3301      	adds	r3, #1
 800957c:	e7c5      	b.n	800950a <__lshift+0x4a>
 800957e:	3904      	subs	r1, #4
 8009580:	f853 2b04 	ldr.w	r2, [r3], #4
 8009584:	459c      	cmp	ip, r3
 8009586:	f841 2f04 	str.w	r2, [r1, #4]!
 800958a:	d8f9      	bhi.n	8009580 <__lshift+0xc0>
 800958c:	e7ea      	b.n	8009564 <__lshift+0xa4>
 800958e:	bf00      	nop
 8009590:	0800c069 	.word	0x0800c069
 8009594:	0800c07a 	.word	0x0800c07a

08009598 <__mcmp>:
 8009598:	4603      	mov	r3, r0
 800959a:	690a      	ldr	r2, [r1, #16]
 800959c:	6900      	ldr	r0, [r0, #16]
 800959e:	b530      	push	{r4, r5, lr}
 80095a0:	1a80      	subs	r0, r0, r2
 80095a2:	d10e      	bne.n	80095c2 <__mcmp+0x2a>
 80095a4:	3314      	adds	r3, #20
 80095a6:	3114      	adds	r1, #20
 80095a8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80095ac:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80095b0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80095b4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80095b8:	4295      	cmp	r5, r2
 80095ba:	d003      	beq.n	80095c4 <__mcmp+0x2c>
 80095bc:	d205      	bcs.n	80095ca <__mcmp+0x32>
 80095be:	f04f 30ff 	mov.w	r0, #4294967295
 80095c2:	bd30      	pop	{r4, r5, pc}
 80095c4:	42a3      	cmp	r3, r4
 80095c6:	d3f3      	bcc.n	80095b0 <__mcmp+0x18>
 80095c8:	e7fb      	b.n	80095c2 <__mcmp+0x2a>
 80095ca:	2001      	movs	r0, #1
 80095cc:	e7f9      	b.n	80095c2 <__mcmp+0x2a>
	...

080095d0 <__mdiff>:
 80095d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095d4:	4689      	mov	r9, r1
 80095d6:	4606      	mov	r6, r0
 80095d8:	4611      	mov	r1, r2
 80095da:	4648      	mov	r0, r9
 80095dc:	4614      	mov	r4, r2
 80095de:	f7ff ffdb 	bl	8009598 <__mcmp>
 80095e2:	1e05      	subs	r5, r0, #0
 80095e4:	d112      	bne.n	800960c <__mdiff+0x3c>
 80095e6:	4629      	mov	r1, r5
 80095e8:	4630      	mov	r0, r6
 80095ea:	f7ff fd13 	bl	8009014 <_Balloc>
 80095ee:	4602      	mov	r2, r0
 80095f0:	b928      	cbnz	r0, 80095fe <__mdiff+0x2e>
 80095f2:	f240 2137 	movw	r1, #567	@ 0x237
 80095f6:	4b3e      	ldr	r3, [pc, #248]	@ (80096f0 <__mdiff+0x120>)
 80095f8:	483e      	ldr	r0, [pc, #248]	@ (80096f4 <__mdiff+0x124>)
 80095fa:	f001 fc2b 	bl	800ae54 <__assert_func>
 80095fe:	2301      	movs	r3, #1
 8009600:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009604:	4610      	mov	r0, r2
 8009606:	b003      	add	sp, #12
 8009608:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800960c:	bfbc      	itt	lt
 800960e:	464b      	movlt	r3, r9
 8009610:	46a1      	movlt	r9, r4
 8009612:	4630      	mov	r0, r6
 8009614:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009618:	bfba      	itte	lt
 800961a:	461c      	movlt	r4, r3
 800961c:	2501      	movlt	r5, #1
 800961e:	2500      	movge	r5, #0
 8009620:	f7ff fcf8 	bl	8009014 <_Balloc>
 8009624:	4602      	mov	r2, r0
 8009626:	b918      	cbnz	r0, 8009630 <__mdiff+0x60>
 8009628:	f240 2145 	movw	r1, #581	@ 0x245
 800962c:	4b30      	ldr	r3, [pc, #192]	@ (80096f0 <__mdiff+0x120>)
 800962e:	e7e3      	b.n	80095f8 <__mdiff+0x28>
 8009630:	f100 0b14 	add.w	fp, r0, #20
 8009634:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009638:	f109 0310 	add.w	r3, r9, #16
 800963c:	60c5      	str	r5, [r0, #12]
 800963e:	f04f 0c00 	mov.w	ip, #0
 8009642:	f109 0514 	add.w	r5, r9, #20
 8009646:	46d9      	mov	r9, fp
 8009648:	6926      	ldr	r6, [r4, #16]
 800964a:	f104 0e14 	add.w	lr, r4, #20
 800964e:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009652:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009656:	9301      	str	r3, [sp, #4]
 8009658:	9b01      	ldr	r3, [sp, #4]
 800965a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800965e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8009662:	b281      	uxth	r1, r0
 8009664:	9301      	str	r3, [sp, #4]
 8009666:	fa1f f38a 	uxth.w	r3, sl
 800966a:	1a5b      	subs	r3, r3, r1
 800966c:	0c00      	lsrs	r0, r0, #16
 800966e:	4463      	add	r3, ip
 8009670:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009674:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009678:	b29b      	uxth	r3, r3
 800967a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800967e:	4576      	cmp	r6, lr
 8009680:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009684:	f849 3b04 	str.w	r3, [r9], #4
 8009688:	d8e6      	bhi.n	8009658 <__mdiff+0x88>
 800968a:	1b33      	subs	r3, r6, r4
 800968c:	3b15      	subs	r3, #21
 800968e:	f023 0303 	bic.w	r3, r3, #3
 8009692:	3415      	adds	r4, #21
 8009694:	3304      	adds	r3, #4
 8009696:	42a6      	cmp	r6, r4
 8009698:	bf38      	it	cc
 800969a:	2304      	movcc	r3, #4
 800969c:	441d      	add	r5, r3
 800969e:	445b      	add	r3, fp
 80096a0:	461e      	mov	r6, r3
 80096a2:	462c      	mov	r4, r5
 80096a4:	4544      	cmp	r4, r8
 80096a6:	d30e      	bcc.n	80096c6 <__mdiff+0xf6>
 80096a8:	f108 0103 	add.w	r1, r8, #3
 80096ac:	1b49      	subs	r1, r1, r5
 80096ae:	f021 0103 	bic.w	r1, r1, #3
 80096b2:	3d03      	subs	r5, #3
 80096b4:	45a8      	cmp	r8, r5
 80096b6:	bf38      	it	cc
 80096b8:	2100      	movcc	r1, #0
 80096ba:	440b      	add	r3, r1
 80096bc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80096c0:	b199      	cbz	r1, 80096ea <__mdiff+0x11a>
 80096c2:	6117      	str	r7, [r2, #16]
 80096c4:	e79e      	b.n	8009604 <__mdiff+0x34>
 80096c6:	46e6      	mov	lr, ip
 80096c8:	f854 1b04 	ldr.w	r1, [r4], #4
 80096cc:	fa1f fc81 	uxth.w	ip, r1
 80096d0:	44f4      	add	ip, lr
 80096d2:	0c08      	lsrs	r0, r1, #16
 80096d4:	4471      	add	r1, lr
 80096d6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80096da:	b289      	uxth	r1, r1
 80096dc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80096e0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80096e4:	f846 1b04 	str.w	r1, [r6], #4
 80096e8:	e7dc      	b.n	80096a4 <__mdiff+0xd4>
 80096ea:	3f01      	subs	r7, #1
 80096ec:	e7e6      	b.n	80096bc <__mdiff+0xec>
 80096ee:	bf00      	nop
 80096f0:	0800c069 	.word	0x0800c069
 80096f4:	0800c07a 	.word	0x0800c07a

080096f8 <__ulp>:
 80096f8:	4b0e      	ldr	r3, [pc, #56]	@ (8009734 <__ulp+0x3c>)
 80096fa:	400b      	ands	r3, r1
 80096fc:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8009700:	2b00      	cmp	r3, #0
 8009702:	dc08      	bgt.n	8009716 <__ulp+0x1e>
 8009704:	425b      	negs	r3, r3
 8009706:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800970a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800970e:	da04      	bge.n	800971a <__ulp+0x22>
 8009710:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8009714:	4113      	asrs	r3, r2
 8009716:	2200      	movs	r2, #0
 8009718:	e008      	b.n	800972c <__ulp+0x34>
 800971a:	f1a2 0314 	sub.w	r3, r2, #20
 800971e:	2b1e      	cmp	r3, #30
 8009720:	bfd6      	itet	le
 8009722:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8009726:	2201      	movgt	r2, #1
 8009728:	40da      	lsrle	r2, r3
 800972a:	2300      	movs	r3, #0
 800972c:	4619      	mov	r1, r3
 800972e:	4610      	mov	r0, r2
 8009730:	4770      	bx	lr
 8009732:	bf00      	nop
 8009734:	7ff00000 	.word	0x7ff00000

08009738 <__b2d>:
 8009738:	6902      	ldr	r2, [r0, #16]
 800973a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800973c:	f100 0614 	add.w	r6, r0, #20
 8009740:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8009744:	f852 4c04 	ldr.w	r4, [r2, #-4]
 8009748:	4f1e      	ldr	r7, [pc, #120]	@ (80097c4 <__b2d+0x8c>)
 800974a:	4620      	mov	r0, r4
 800974c:	f7ff fd54 	bl	80091f8 <__hi0bits>
 8009750:	4603      	mov	r3, r0
 8009752:	f1c0 0020 	rsb	r0, r0, #32
 8009756:	2b0a      	cmp	r3, #10
 8009758:	f1a2 0504 	sub.w	r5, r2, #4
 800975c:	6008      	str	r0, [r1, #0]
 800975e:	dc12      	bgt.n	8009786 <__b2d+0x4e>
 8009760:	42ae      	cmp	r6, r5
 8009762:	bf2c      	ite	cs
 8009764:	2200      	movcs	r2, #0
 8009766:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800976a:	f1c3 0c0b 	rsb	ip, r3, #11
 800976e:	3315      	adds	r3, #21
 8009770:	fa24 fe0c 	lsr.w	lr, r4, ip
 8009774:	fa04 f303 	lsl.w	r3, r4, r3
 8009778:	fa22 f20c 	lsr.w	r2, r2, ip
 800977c:	ea4e 0107 	orr.w	r1, lr, r7
 8009780:	431a      	orrs	r2, r3
 8009782:	4610      	mov	r0, r2
 8009784:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009786:	42ae      	cmp	r6, r5
 8009788:	bf36      	itet	cc
 800978a:	f1a2 0508 	subcc.w	r5, r2, #8
 800978e:	2200      	movcs	r2, #0
 8009790:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8009794:	3b0b      	subs	r3, #11
 8009796:	d012      	beq.n	80097be <__b2d+0x86>
 8009798:	f1c3 0720 	rsb	r7, r3, #32
 800979c:	fa22 f107 	lsr.w	r1, r2, r7
 80097a0:	409c      	lsls	r4, r3
 80097a2:	430c      	orrs	r4, r1
 80097a4:	42b5      	cmp	r5, r6
 80097a6:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 80097aa:	bf94      	ite	ls
 80097ac:	2400      	movls	r4, #0
 80097ae:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 80097b2:	409a      	lsls	r2, r3
 80097b4:	40fc      	lsrs	r4, r7
 80097b6:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 80097ba:	4322      	orrs	r2, r4
 80097bc:	e7e1      	b.n	8009782 <__b2d+0x4a>
 80097be:	ea44 0107 	orr.w	r1, r4, r7
 80097c2:	e7de      	b.n	8009782 <__b2d+0x4a>
 80097c4:	3ff00000 	.word	0x3ff00000

080097c8 <__d2b>:
 80097c8:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 80097cc:	2101      	movs	r1, #1
 80097ce:	4690      	mov	r8, r2
 80097d0:	4699      	mov	r9, r3
 80097d2:	9e08      	ldr	r6, [sp, #32]
 80097d4:	f7ff fc1e 	bl	8009014 <_Balloc>
 80097d8:	4604      	mov	r4, r0
 80097da:	b930      	cbnz	r0, 80097ea <__d2b+0x22>
 80097dc:	4602      	mov	r2, r0
 80097de:	f240 310f 	movw	r1, #783	@ 0x30f
 80097e2:	4b23      	ldr	r3, [pc, #140]	@ (8009870 <__d2b+0xa8>)
 80097e4:	4823      	ldr	r0, [pc, #140]	@ (8009874 <__d2b+0xac>)
 80097e6:	f001 fb35 	bl	800ae54 <__assert_func>
 80097ea:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80097ee:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80097f2:	b10d      	cbz	r5, 80097f8 <__d2b+0x30>
 80097f4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80097f8:	9301      	str	r3, [sp, #4]
 80097fa:	f1b8 0300 	subs.w	r3, r8, #0
 80097fe:	d024      	beq.n	800984a <__d2b+0x82>
 8009800:	4668      	mov	r0, sp
 8009802:	9300      	str	r3, [sp, #0]
 8009804:	f7ff fd17 	bl	8009236 <__lo0bits>
 8009808:	e9dd 1200 	ldrd	r1, r2, [sp]
 800980c:	b1d8      	cbz	r0, 8009846 <__d2b+0x7e>
 800980e:	f1c0 0320 	rsb	r3, r0, #32
 8009812:	fa02 f303 	lsl.w	r3, r2, r3
 8009816:	430b      	orrs	r3, r1
 8009818:	40c2      	lsrs	r2, r0
 800981a:	6163      	str	r3, [r4, #20]
 800981c:	9201      	str	r2, [sp, #4]
 800981e:	9b01      	ldr	r3, [sp, #4]
 8009820:	2b00      	cmp	r3, #0
 8009822:	bf0c      	ite	eq
 8009824:	2201      	moveq	r2, #1
 8009826:	2202      	movne	r2, #2
 8009828:	61a3      	str	r3, [r4, #24]
 800982a:	6122      	str	r2, [r4, #16]
 800982c:	b1ad      	cbz	r5, 800985a <__d2b+0x92>
 800982e:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009832:	4405      	add	r5, r0
 8009834:	6035      	str	r5, [r6, #0]
 8009836:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800983a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800983c:	6018      	str	r0, [r3, #0]
 800983e:	4620      	mov	r0, r4
 8009840:	b002      	add	sp, #8
 8009842:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8009846:	6161      	str	r1, [r4, #20]
 8009848:	e7e9      	b.n	800981e <__d2b+0x56>
 800984a:	a801      	add	r0, sp, #4
 800984c:	f7ff fcf3 	bl	8009236 <__lo0bits>
 8009850:	9b01      	ldr	r3, [sp, #4]
 8009852:	2201      	movs	r2, #1
 8009854:	6163      	str	r3, [r4, #20]
 8009856:	3020      	adds	r0, #32
 8009858:	e7e7      	b.n	800982a <__d2b+0x62>
 800985a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800985e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009862:	6030      	str	r0, [r6, #0]
 8009864:	6918      	ldr	r0, [r3, #16]
 8009866:	f7ff fcc7 	bl	80091f8 <__hi0bits>
 800986a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800986e:	e7e4      	b.n	800983a <__d2b+0x72>
 8009870:	0800c069 	.word	0x0800c069
 8009874:	0800c07a 	.word	0x0800c07a

08009878 <__ratio>:
 8009878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800987c:	b085      	sub	sp, #20
 800987e:	e9cd 1000 	strd	r1, r0, [sp]
 8009882:	a902      	add	r1, sp, #8
 8009884:	f7ff ff58 	bl	8009738 <__b2d>
 8009888:	468b      	mov	fp, r1
 800988a:	4606      	mov	r6, r0
 800988c:	460f      	mov	r7, r1
 800988e:	9800      	ldr	r0, [sp, #0]
 8009890:	a903      	add	r1, sp, #12
 8009892:	f7ff ff51 	bl	8009738 <__b2d>
 8009896:	460d      	mov	r5, r1
 8009898:	9b01      	ldr	r3, [sp, #4]
 800989a:	4689      	mov	r9, r1
 800989c:	6919      	ldr	r1, [r3, #16]
 800989e:	9b00      	ldr	r3, [sp, #0]
 80098a0:	4604      	mov	r4, r0
 80098a2:	691b      	ldr	r3, [r3, #16]
 80098a4:	4630      	mov	r0, r6
 80098a6:	1ac9      	subs	r1, r1, r3
 80098a8:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80098ac:	1a9b      	subs	r3, r3, r2
 80098ae:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	bfcd      	iteet	gt
 80098b6:	463a      	movgt	r2, r7
 80098b8:	462a      	movle	r2, r5
 80098ba:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80098be:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 80098c2:	bfd8      	it	le
 80098c4:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 80098c8:	464b      	mov	r3, r9
 80098ca:	4622      	mov	r2, r4
 80098cc:	4659      	mov	r1, fp
 80098ce:	f7f6 ff2d 	bl	800072c <__aeabi_ddiv>
 80098d2:	b005      	add	sp, #20
 80098d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080098d8 <__copybits>:
 80098d8:	3901      	subs	r1, #1
 80098da:	b570      	push	{r4, r5, r6, lr}
 80098dc:	1149      	asrs	r1, r1, #5
 80098de:	6914      	ldr	r4, [r2, #16]
 80098e0:	3101      	adds	r1, #1
 80098e2:	f102 0314 	add.w	r3, r2, #20
 80098e6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80098ea:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80098ee:	1f05      	subs	r5, r0, #4
 80098f0:	42a3      	cmp	r3, r4
 80098f2:	d30c      	bcc.n	800990e <__copybits+0x36>
 80098f4:	1aa3      	subs	r3, r4, r2
 80098f6:	3b11      	subs	r3, #17
 80098f8:	f023 0303 	bic.w	r3, r3, #3
 80098fc:	3211      	adds	r2, #17
 80098fe:	42a2      	cmp	r2, r4
 8009900:	bf88      	it	hi
 8009902:	2300      	movhi	r3, #0
 8009904:	4418      	add	r0, r3
 8009906:	2300      	movs	r3, #0
 8009908:	4288      	cmp	r0, r1
 800990a:	d305      	bcc.n	8009918 <__copybits+0x40>
 800990c:	bd70      	pop	{r4, r5, r6, pc}
 800990e:	f853 6b04 	ldr.w	r6, [r3], #4
 8009912:	f845 6f04 	str.w	r6, [r5, #4]!
 8009916:	e7eb      	b.n	80098f0 <__copybits+0x18>
 8009918:	f840 3b04 	str.w	r3, [r0], #4
 800991c:	e7f4      	b.n	8009908 <__copybits+0x30>

0800991e <__any_on>:
 800991e:	f100 0214 	add.w	r2, r0, #20
 8009922:	6900      	ldr	r0, [r0, #16]
 8009924:	114b      	asrs	r3, r1, #5
 8009926:	4298      	cmp	r0, r3
 8009928:	b510      	push	{r4, lr}
 800992a:	db11      	blt.n	8009950 <__any_on+0x32>
 800992c:	dd0a      	ble.n	8009944 <__any_on+0x26>
 800992e:	f011 011f 	ands.w	r1, r1, #31
 8009932:	d007      	beq.n	8009944 <__any_on+0x26>
 8009934:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009938:	fa24 f001 	lsr.w	r0, r4, r1
 800993c:	fa00 f101 	lsl.w	r1, r0, r1
 8009940:	428c      	cmp	r4, r1
 8009942:	d10b      	bne.n	800995c <__any_on+0x3e>
 8009944:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009948:	4293      	cmp	r3, r2
 800994a:	d803      	bhi.n	8009954 <__any_on+0x36>
 800994c:	2000      	movs	r0, #0
 800994e:	bd10      	pop	{r4, pc}
 8009950:	4603      	mov	r3, r0
 8009952:	e7f7      	b.n	8009944 <__any_on+0x26>
 8009954:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009958:	2900      	cmp	r1, #0
 800995a:	d0f5      	beq.n	8009948 <__any_on+0x2a>
 800995c:	2001      	movs	r0, #1
 800995e:	e7f6      	b.n	800994e <__any_on+0x30>

08009960 <sulp>:
 8009960:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009964:	460f      	mov	r7, r1
 8009966:	4690      	mov	r8, r2
 8009968:	f7ff fec6 	bl	80096f8 <__ulp>
 800996c:	4604      	mov	r4, r0
 800996e:	460d      	mov	r5, r1
 8009970:	f1b8 0f00 	cmp.w	r8, #0
 8009974:	d011      	beq.n	800999a <sulp+0x3a>
 8009976:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800997a:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800997e:	2b00      	cmp	r3, #0
 8009980:	dd0b      	ble.n	800999a <sulp+0x3a>
 8009982:	2400      	movs	r4, #0
 8009984:	051b      	lsls	r3, r3, #20
 8009986:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800998a:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800998e:	4622      	mov	r2, r4
 8009990:	462b      	mov	r3, r5
 8009992:	f7f6 fda1 	bl	80004d8 <__aeabi_dmul>
 8009996:	4604      	mov	r4, r0
 8009998:	460d      	mov	r5, r1
 800999a:	4620      	mov	r0, r4
 800999c:	4629      	mov	r1, r5
 800999e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80099a2:	0000      	movs	r0, r0
 80099a4:	0000      	movs	r0, r0
	...

080099a8 <_strtod_l>:
 80099a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099ac:	b09f      	sub	sp, #124	@ 0x7c
 80099ae:	9217      	str	r2, [sp, #92]	@ 0x5c
 80099b0:	2200      	movs	r2, #0
 80099b2:	460c      	mov	r4, r1
 80099b4:	921a      	str	r2, [sp, #104]	@ 0x68
 80099b6:	f04f 0a00 	mov.w	sl, #0
 80099ba:	f04f 0b00 	mov.w	fp, #0
 80099be:	460a      	mov	r2, r1
 80099c0:	9005      	str	r0, [sp, #20]
 80099c2:	9219      	str	r2, [sp, #100]	@ 0x64
 80099c4:	7811      	ldrb	r1, [r2, #0]
 80099c6:	292b      	cmp	r1, #43	@ 0x2b
 80099c8:	d048      	beq.n	8009a5c <_strtod_l+0xb4>
 80099ca:	d836      	bhi.n	8009a3a <_strtod_l+0x92>
 80099cc:	290d      	cmp	r1, #13
 80099ce:	d830      	bhi.n	8009a32 <_strtod_l+0x8a>
 80099d0:	2908      	cmp	r1, #8
 80099d2:	d830      	bhi.n	8009a36 <_strtod_l+0x8e>
 80099d4:	2900      	cmp	r1, #0
 80099d6:	d039      	beq.n	8009a4c <_strtod_l+0xa4>
 80099d8:	2200      	movs	r2, #0
 80099da:	920b      	str	r2, [sp, #44]	@ 0x2c
 80099dc:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80099de:	782a      	ldrb	r2, [r5, #0]
 80099e0:	2a30      	cmp	r2, #48	@ 0x30
 80099e2:	f040 80b1 	bne.w	8009b48 <_strtod_l+0x1a0>
 80099e6:	786a      	ldrb	r2, [r5, #1]
 80099e8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80099ec:	2a58      	cmp	r2, #88	@ 0x58
 80099ee:	d16c      	bne.n	8009aca <_strtod_l+0x122>
 80099f0:	9302      	str	r3, [sp, #8]
 80099f2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80099f4:	4a8e      	ldr	r2, [pc, #568]	@ (8009c30 <_strtod_l+0x288>)
 80099f6:	9301      	str	r3, [sp, #4]
 80099f8:	ab1a      	add	r3, sp, #104	@ 0x68
 80099fa:	9300      	str	r3, [sp, #0]
 80099fc:	9805      	ldr	r0, [sp, #20]
 80099fe:	ab1b      	add	r3, sp, #108	@ 0x6c
 8009a00:	a919      	add	r1, sp, #100	@ 0x64
 8009a02:	f001 fac1 	bl	800af88 <__gethex>
 8009a06:	f010 060f 	ands.w	r6, r0, #15
 8009a0a:	4604      	mov	r4, r0
 8009a0c:	d005      	beq.n	8009a1a <_strtod_l+0x72>
 8009a0e:	2e06      	cmp	r6, #6
 8009a10:	d126      	bne.n	8009a60 <_strtod_l+0xb8>
 8009a12:	2300      	movs	r3, #0
 8009a14:	3501      	adds	r5, #1
 8009a16:	9519      	str	r5, [sp, #100]	@ 0x64
 8009a18:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009a1a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	f040 8584 	bne.w	800a52a <_strtod_l+0xb82>
 8009a22:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009a24:	b1bb      	cbz	r3, 8009a56 <_strtod_l+0xae>
 8009a26:	4650      	mov	r0, sl
 8009a28:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 8009a2c:	b01f      	add	sp, #124	@ 0x7c
 8009a2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a32:	2920      	cmp	r1, #32
 8009a34:	d1d0      	bne.n	80099d8 <_strtod_l+0x30>
 8009a36:	3201      	adds	r2, #1
 8009a38:	e7c3      	b.n	80099c2 <_strtod_l+0x1a>
 8009a3a:	292d      	cmp	r1, #45	@ 0x2d
 8009a3c:	d1cc      	bne.n	80099d8 <_strtod_l+0x30>
 8009a3e:	2101      	movs	r1, #1
 8009a40:	910b      	str	r1, [sp, #44]	@ 0x2c
 8009a42:	1c51      	adds	r1, r2, #1
 8009a44:	9119      	str	r1, [sp, #100]	@ 0x64
 8009a46:	7852      	ldrb	r2, [r2, #1]
 8009a48:	2a00      	cmp	r2, #0
 8009a4a:	d1c7      	bne.n	80099dc <_strtod_l+0x34>
 8009a4c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009a4e:	9419      	str	r4, [sp, #100]	@ 0x64
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	f040 8568 	bne.w	800a526 <_strtod_l+0xb7e>
 8009a56:	4650      	mov	r0, sl
 8009a58:	4659      	mov	r1, fp
 8009a5a:	e7e7      	b.n	8009a2c <_strtod_l+0x84>
 8009a5c:	2100      	movs	r1, #0
 8009a5e:	e7ef      	b.n	8009a40 <_strtod_l+0x98>
 8009a60:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009a62:	b13a      	cbz	r2, 8009a74 <_strtod_l+0xcc>
 8009a64:	2135      	movs	r1, #53	@ 0x35
 8009a66:	a81c      	add	r0, sp, #112	@ 0x70
 8009a68:	f7ff ff36 	bl	80098d8 <__copybits>
 8009a6c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009a6e:	9805      	ldr	r0, [sp, #20]
 8009a70:	f7ff fb10 	bl	8009094 <_Bfree>
 8009a74:	3e01      	subs	r6, #1
 8009a76:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8009a78:	2e04      	cmp	r6, #4
 8009a7a:	d806      	bhi.n	8009a8a <_strtod_l+0xe2>
 8009a7c:	e8df f006 	tbb	[pc, r6]
 8009a80:	201d0314 	.word	0x201d0314
 8009a84:	14          	.byte	0x14
 8009a85:	00          	.byte	0x00
 8009a86:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8009a8a:	05e1      	lsls	r1, r4, #23
 8009a8c:	bf48      	it	mi
 8009a8e:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8009a92:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009a96:	0d1b      	lsrs	r3, r3, #20
 8009a98:	051b      	lsls	r3, r3, #20
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d1bd      	bne.n	8009a1a <_strtod_l+0x72>
 8009a9e:	f7fe fb1b 	bl	80080d8 <__errno>
 8009aa2:	2322      	movs	r3, #34	@ 0x22
 8009aa4:	6003      	str	r3, [r0, #0]
 8009aa6:	e7b8      	b.n	8009a1a <_strtod_l+0x72>
 8009aa8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8009aac:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8009ab0:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8009ab4:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8009ab8:	e7e7      	b.n	8009a8a <_strtod_l+0xe2>
 8009aba:	f8df b178 	ldr.w	fp, [pc, #376]	@ 8009c34 <_strtod_l+0x28c>
 8009abe:	e7e4      	b.n	8009a8a <_strtod_l+0xe2>
 8009ac0:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8009ac4:	f04f 3aff 	mov.w	sl, #4294967295
 8009ac8:	e7df      	b.n	8009a8a <_strtod_l+0xe2>
 8009aca:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009acc:	1c5a      	adds	r2, r3, #1
 8009ace:	9219      	str	r2, [sp, #100]	@ 0x64
 8009ad0:	785b      	ldrb	r3, [r3, #1]
 8009ad2:	2b30      	cmp	r3, #48	@ 0x30
 8009ad4:	d0f9      	beq.n	8009aca <_strtod_l+0x122>
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d09f      	beq.n	8009a1a <_strtod_l+0x72>
 8009ada:	2301      	movs	r3, #1
 8009adc:	9309      	str	r3, [sp, #36]	@ 0x24
 8009ade:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009ae0:	220a      	movs	r2, #10
 8009ae2:	930c      	str	r3, [sp, #48]	@ 0x30
 8009ae4:	2300      	movs	r3, #0
 8009ae6:	461f      	mov	r7, r3
 8009ae8:	9308      	str	r3, [sp, #32]
 8009aea:	930a      	str	r3, [sp, #40]	@ 0x28
 8009aec:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8009aee:	7805      	ldrb	r5, [r0, #0]
 8009af0:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8009af4:	b2d9      	uxtb	r1, r3
 8009af6:	2909      	cmp	r1, #9
 8009af8:	d928      	bls.n	8009b4c <_strtod_l+0x1a4>
 8009afa:	2201      	movs	r2, #1
 8009afc:	494e      	ldr	r1, [pc, #312]	@ (8009c38 <_strtod_l+0x290>)
 8009afe:	f001 f981 	bl	800ae04 <strncmp>
 8009b02:	2800      	cmp	r0, #0
 8009b04:	d032      	beq.n	8009b6c <_strtod_l+0x1c4>
 8009b06:	2000      	movs	r0, #0
 8009b08:	462a      	mov	r2, r5
 8009b0a:	4681      	mov	r9, r0
 8009b0c:	463d      	mov	r5, r7
 8009b0e:	4603      	mov	r3, r0
 8009b10:	2a65      	cmp	r2, #101	@ 0x65
 8009b12:	d001      	beq.n	8009b18 <_strtod_l+0x170>
 8009b14:	2a45      	cmp	r2, #69	@ 0x45
 8009b16:	d114      	bne.n	8009b42 <_strtod_l+0x19a>
 8009b18:	b91d      	cbnz	r5, 8009b22 <_strtod_l+0x17a>
 8009b1a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009b1c:	4302      	orrs	r2, r0
 8009b1e:	d095      	beq.n	8009a4c <_strtod_l+0xa4>
 8009b20:	2500      	movs	r5, #0
 8009b22:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8009b24:	1c62      	adds	r2, r4, #1
 8009b26:	9219      	str	r2, [sp, #100]	@ 0x64
 8009b28:	7862      	ldrb	r2, [r4, #1]
 8009b2a:	2a2b      	cmp	r2, #43	@ 0x2b
 8009b2c:	d077      	beq.n	8009c1e <_strtod_l+0x276>
 8009b2e:	2a2d      	cmp	r2, #45	@ 0x2d
 8009b30:	d07b      	beq.n	8009c2a <_strtod_l+0x282>
 8009b32:	f04f 0c00 	mov.w	ip, #0
 8009b36:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8009b3a:	2909      	cmp	r1, #9
 8009b3c:	f240 8082 	bls.w	8009c44 <_strtod_l+0x29c>
 8009b40:	9419      	str	r4, [sp, #100]	@ 0x64
 8009b42:	f04f 0800 	mov.w	r8, #0
 8009b46:	e0a2      	b.n	8009c8e <_strtod_l+0x2e6>
 8009b48:	2300      	movs	r3, #0
 8009b4a:	e7c7      	b.n	8009adc <_strtod_l+0x134>
 8009b4c:	2f08      	cmp	r7, #8
 8009b4e:	bfd5      	itete	le
 8009b50:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8009b52:	9908      	ldrgt	r1, [sp, #32]
 8009b54:	fb02 3301 	mlale	r3, r2, r1, r3
 8009b58:	fb02 3301 	mlagt	r3, r2, r1, r3
 8009b5c:	f100 0001 	add.w	r0, r0, #1
 8009b60:	bfd4      	ite	le
 8009b62:	930a      	strle	r3, [sp, #40]	@ 0x28
 8009b64:	9308      	strgt	r3, [sp, #32]
 8009b66:	3701      	adds	r7, #1
 8009b68:	9019      	str	r0, [sp, #100]	@ 0x64
 8009b6a:	e7bf      	b.n	8009aec <_strtod_l+0x144>
 8009b6c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009b6e:	1c5a      	adds	r2, r3, #1
 8009b70:	9219      	str	r2, [sp, #100]	@ 0x64
 8009b72:	785a      	ldrb	r2, [r3, #1]
 8009b74:	b37f      	cbz	r7, 8009bd6 <_strtod_l+0x22e>
 8009b76:	4681      	mov	r9, r0
 8009b78:	463d      	mov	r5, r7
 8009b7a:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8009b7e:	2b09      	cmp	r3, #9
 8009b80:	d912      	bls.n	8009ba8 <_strtod_l+0x200>
 8009b82:	2301      	movs	r3, #1
 8009b84:	e7c4      	b.n	8009b10 <_strtod_l+0x168>
 8009b86:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009b88:	3001      	adds	r0, #1
 8009b8a:	1c5a      	adds	r2, r3, #1
 8009b8c:	9219      	str	r2, [sp, #100]	@ 0x64
 8009b8e:	785a      	ldrb	r2, [r3, #1]
 8009b90:	2a30      	cmp	r2, #48	@ 0x30
 8009b92:	d0f8      	beq.n	8009b86 <_strtod_l+0x1de>
 8009b94:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8009b98:	2b08      	cmp	r3, #8
 8009b9a:	f200 84cb 	bhi.w	800a534 <_strtod_l+0xb8c>
 8009b9e:	4681      	mov	r9, r0
 8009ba0:	2000      	movs	r0, #0
 8009ba2:	4605      	mov	r5, r0
 8009ba4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009ba6:	930c      	str	r3, [sp, #48]	@ 0x30
 8009ba8:	3a30      	subs	r2, #48	@ 0x30
 8009baa:	f100 0301 	add.w	r3, r0, #1
 8009bae:	d02a      	beq.n	8009c06 <_strtod_l+0x25e>
 8009bb0:	4499      	add	r9, r3
 8009bb2:	210a      	movs	r1, #10
 8009bb4:	462b      	mov	r3, r5
 8009bb6:	eb00 0c05 	add.w	ip, r0, r5
 8009bba:	4563      	cmp	r3, ip
 8009bbc:	d10d      	bne.n	8009bda <_strtod_l+0x232>
 8009bbe:	1c69      	adds	r1, r5, #1
 8009bc0:	4401      	add	r1, r0
 8009bc2:	4428      	add	r0, r5
 8009bc4:	2808      	cmp	r0, #8
 8009bc6:	dc16      	bgt.n	8009bf6 <_strtod_l+0x24e>
 8009bc8:	230a      	movs	r3, #10
 8009bca:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009bcc:	fb03 2300 	mla	r3, r3, r0, r2
 8009bd0:	930a      	str	r3, [sp, #40]	@ 0x28
 8009bd2:	2300      	movs	r3, #0
 8009bd4:	e018      	b.n	8009c08 <_strtod_l+0x260>
 8009bd6:	4638      	mov	r0, r7
 8009bd8:	e7da      	b.n	8009b90 <_strtod_l+0x1e8>
 8009bda:	2b08      	cmp	r3, #8
 8009bdc:	f103 0301 	add.w	r3, r3, #1
 8009be0:	dc03      	bgt.n	8009bea <_strtod_l+0x242>
 8009be2:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8009be4:	434e      	muls	r6, r1
 8009be6:	960a      	str	r6, [sp, #40]	@ 0x28
 8009be8:	e7e7      	b.n	8009bba <_strtod_l+0x212>
 8009bea:	2b10      	cmp	r3, #16
 8009bec:	bfde      	ittt	le
 8009bee:	9e08      	ldrle	r6, [sp, #32]
 8009bf0:	434e      	mulle	r6, r1
 8009bf2:	9608      	strle	r6, [sp, #32]
 8009bf4:	e7e1      	b.n	8009bba <_strtod_l+0x212>
 8009bf6:	280f      	cmp	r0, #15
 8009bf8:	dceb      	bgt.n	8009bd2 <_strtod_l+0x22a>
 8009bfa:	230a      	movs	r3, #10
 8009bfc:	9808      	ldr	r0, [sp, #32]
 8009bfe:	fb03 2300 	mla	r3, r3, r0, r2
 8009c02:	9308      	str	r3, [sp, #32]
 8009c04:	e7e5      	b.n	8009bd2 <_strtod_l+0x22a>
 8009c06:	4629      	mov	r1, r5
 8009c08:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009c0a:	460d      	mov	r5, r1
 8009c0c:	1c50      	adds	r0, r2, #1
 8009c0e:	9019      	str	r0, [sp, #100]	@ 0x64
 8009c10:	7852      	ldrb	r2, [r2, #1]
 8009c12:	4618      	mov	r0, r3
 8009c14:	e7b1      	b.n	8009b7a <_strtod_l+0x1d2>
 8009c16:	f04f 0900 	mov.w	r9, #0
 8009c1a:	2301      	movs	r3, #1
 8009c1c:	e77d      	b.n	8009b1a <_strtod_l+0x172>
 8009c1e:	f04f 0c00 	mov.w	ip, #0
 8009c22:	1ca2      	adds	r2, r4, #2
 8009c24:	9219      	str	r2, [sp, #100]	@ 0x64
 8009c26:	78a2      	ldrb	r2, [r4, #2]
 8009c28:	e785      	b.n	8009b36 <_strtod_l+0x18e>
 8009c2a:	f04f 0c01 	mov.w	ip, #1
 8009c2e:	e7f8      	b.n	8009c22 <_strtod_l+0x27a>
 8009c30:	0800c1e8 	.word	0x0800c1e8
 8009c34:	7ff00000 	.word	0x7ff00000
 8009c38:	0800c1d0 	.word	0x0800c1d0
 8009c3c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009c3e:	1c51      	adds	r1, r2, #1
 8009c40:	9119      	str	r1, [sp, #100]	@ 0x64
 8009c42:	7852      	ldrb	r2, [r2, #1]
 8009c44:	2a30      	cmp	r2, #48	@ 0x30
 8009c46:	d0f9      	beq.n	8009c3c <_strtod_l+0x294>
 8009c48:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8009c4c:	2908      	cmp	r1, #8
 8009c4e:	f63f af78 	bhi.w	8009b42 <_strtod_l+0x19a>
 8009c52:	f04f 080a 	mov.w	r8, #10
 8009c56:	3a30      	subs	r2, #48	@ 0x30
 8009c58:	920e      	str	r2, [sp, #56]	@ 0x38
 8009c5a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009c5c:	920f      	str	r2, [sp, #60]	@ 0x3c
 8009c5e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009c60:	1c56      	adds	r6, r2, #1
 8009c62:	9619      	str	r6, [sp, #100]	@ 0x64
 8009c64:	7852      	ldrb	r2, [r2, #1]
 8009c66:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8009c6a:	f1be 0f09 	cmp.w	lr, #9
 8009c6e:	d939      	bls.n	8009ce4 <_strtod_l+0x33c>
 8009c70:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8009c72:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8009c76:	1a76      	subs	r6, r6, r1
 8009c78:	2e08      	cmp	r6, #8
 8009c7a:	dc03      	bgt.n	8009c84 <_strtod_l+0x2dc>
 8009c7c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8009c7e:	4588      	cmp	r8, r1
 8009c80:	bfa8      	it	ge
 8009c82:	4688      	movge	r8, r1
 8009c84:	f1bc 0f00 	cmp.w	ip, #0
 8009c88:	d001      	beq.n	8009c8e <_strtod_l+0x2e6>
 8009c8a:	f1c8 0800 	rsb	r8, r8, #0
 8009c8e:	2d00      	cmp	r5, #0
 8009c90:	d14e      	bne.n	8009d30 <_strtod_l+0x388>
 8009c92:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009c94:	4308      	orrs	r0, r1
 8009c96:	f47f aec0 	bne.w	8009a1a <_strtod_l+0x72>
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	f47f aed6 	bne.w	8009a4c <_strtod_l+0xa4>
 8009ca0:	2a69      	cmp	r2, #105	@ 0x69
 8009ca2:	d028      	beq.n	8009cf6 <_strtod_l+0x34e>
 8009ca4:	dc25      	bgt.n	8009cf2 <_strtod_l+0x34a>
 8009ca6:	2a49      	cmp	r2, #73	@ 0x49
 8009ca8:	d025      	beq.n	8009cf6 <_strtod_l+0x34e>
 8009caa:	2a4e      	cmp	r2, #78	@ 0x4e
 8009cac:	f47f aece 	bne.w	8009a4c <_strtod_l+0xa4>
 8009cb0:	499a      	ldr	r1, [pc, #616]	@ (8009f1c <_strtod_l+0x574>)
 8009cb2:	a819      	add	r0, sp, #100	@ 0x64
 8009cb4:	f001 fb8a 	bl	800b3cc <__match>
 8009cb8:	2800      	cmp	r0, #0
 8009cba:	f43f aec7 	beq.w	8009a4c <_strtod_l+0xa4>
 8009cbe:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009cc0:	781b      	ldrb	r3, [r3, #0]
 8009cc2:	2b28      	cmp	r3, #40	@ 0x28
 8009cc4:	d12e      	bne.n	8009d24 <_strtod_l+0x37c>
 8009cc6:	4996      	ldr	r1, [pc, #600]	@ (8009f20 <_strtod_l+0x578>)
 8009cc8:	aa1c      	add	r2, sp, #112	@ 0x70
 8009cca:	a819      	add	r0, sp, #100	@ 0x64
 8009ccc:	f001 fb92 	bl	800b3f4 <__hexnan>
 8009cd0:	2805      	cmp	r0, #5
 8009cd2:	d127      	bne.n	8009d24 <_strtod_l+0x37c>
 8009cd4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009cd6:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8009cda:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8009cde:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8009ce2:	e69a      	b.n	8009a1a <_strtod_l+0x72>
 8009ce4:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8009ce6:	fb08 2101 	mla	r1, r8, r1, r2
 8009cea:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8009cee:	920e      	str	r2, [sp, #56]	@ 0x38
 8009cf0:	e7b5      	b.n	8009c5e <_strtod_l+0x2b6>
 8009cf2:	2a6e      	cmp	r2, #110	@ 0x6e
 8009cf4:	e7da      	b.n	8009cac <_strtod_l+0x304>
 8009cf6:	498b      	ldr	r1, [pc, #556]	@ (8009f24 <_strtod_l+0x57c>)
 8009cf8:	a819      	add	r0, sp, #100	@ 0x64
 8009cfa:	f001 fb67 	bl	800b3cc <__match>
 8009cfe:	2800      	cmp	r0, #0
 8009d00:	f43f aea4 	beq.w	8009a4c <_strtod_l+0xa4>
 8009d04:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009d06:	4988      	ldr	r1, [pc, #544]	@ (8009f28 <_strtod_l+0x580>)
 8009d08:	3b01      	subs	r3, #1
 8009d0a:	a819      	add	r0, sp, #100	@ 0x64
 8009d0c:	9319      	str	r3, [sp, #100]	@ 0x64
 8009d0e:	f001 fb5d 	bl	800b3cc <__match>
 8009d12:	b910      	cbnz	r0, 8009d1a <_strtod_l+0x372>
 8009d14:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009d16:	3301      	adds	r3, #1
 8009d18:	9319      	str	r3, [sp, #100]	@ 0x64
 8009d1a:	f04f 0a00 	mov.w	sl, #0
 8009d1e:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 8009f2c <_strtod_l+0x584>
 8009d22:	e67a      	b.n	8009a1a <_strtod_l+0x72>
 8009d24:	4882      	ldr	r0, [pc, #520]	@ (8009f30 <_strtod_l+0x588>)
 8009d26:	f001 f88f 	bl	800ae48 <nan>
 8009d2a:	4682      	mov	sl, r0
 8009d2c:	468b      	mov	fp, r1
 8009d2e:	e674      	b.n	8009a1a <_strtod_l+0x72>
 8009d30:	eba8 0309 	sub.w	r3, r8, r9
 8009d34:	2f00      	cmp	r7, #0
 8009d36:	bf08      	it	eq
 8009d38:	462f      	moveq	r7, r5
 8009d3a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009d3c:	2d10      	cmp	r5, #16
 8009d3e:	462c      	mov	r4, r5
 8009d40:	9309      	str	r3, [sp, #36]	@ 0x24
 8009d42:	bfa8      	it	ge
 8009d44:	2410      	movge	r4, #16
 8009d46:	f7f6 fb4d 	bl	80003e4 <__aeabi_ui2d>
 8009d4a:	2d09      	cmp	r5, #9
 8009d4c:	4682      	mov	sl, r0
 8009d4e:	468b      	mov	fp, r1
 8009d50:	dc11      	bgt.n	8009d76 <_strtod_l+0x3ce>
 8009d52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	f43f ae60 	beq.w	8009a1a <_strtod_l+0x72>
 8009d5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d5c:	dd76      	ble.n	8009e4c <_strtod_l+0x4a4>
 8009d5e:	2b16      	cmp	r3, #22
 8009d60:	dc5d      	bgt.n	8009e1e <_strtod_l+0x476>
 8009d62:	4974      	ldr	r1, [pc, #464]	@ (8009f34 <_strtod_l+0x58c>)
 8009d64:	4652      	mov	r2, sl
 8009d66:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009d6a:	465b      	mov	r3, fp
 8009d6c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009d70:	f7f6 fbb2 	bl	80004d8 <__aeabi_dmul>
 8009d74:	e7d9      	b.n	8009d2a <_strtod_l+0x382>
 8009d76:	4b6f      	ldr	r3, [pc, #444]	@ (8009f34 <_strtod_l+0x58c>)
 8009d78:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009d7c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8009d80:	f7f6 fbaa 	bl	80004d8 <__aeabi_dmul>
 8009d84:	4682      	mov	sl, r0
 8009d86:	9808      	ldr	r0, [sp, #32]
 8009d88:	468b      	mov	fp, r1
 8009d8a:	f7f6 fb2b 	bl	80003e4 <__aeabi_ui2d>
 8009d8e:	4602      	mov	r2, r0
 8009d90:	460b      	mov	r3, r1
 8009d92:	4650      	mov	r0, sl
 8009d94:	4659      	mov	r1, fp
 8009d96:	f7f6 f9e9 	bl	800016c <__adddf3>
 8009d9a:	2d0f      	cmp	r5, #15
 8009d9c:	4682      	mov	sl, r0
 8009d9e:	468b      	mov	fp, r1
 8009da0:	ddd7      	ble.n	8009d52 <_strtod_l+0x3aa>
 8009da2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009da4:	1b2c      	subs	r4, r5, r4
 8009da6:	441c      	add	r4, r3
 8009da8:	2c00      	cmp	r4, #0
 8009daa:	f340 8096 	ble.w	8009eda <_strtod_l+0x532>
 8009dae:	f014 030f 	ands.w	r3, r4, #15
 8009db2:	d00a      	beq.n	8009dca <_strtod_l+0x422>
 8009db4:	495f      	ldr	r1, [pc, #380]	@ (8009f34 <_strtod_l+0x58c>)
 8009db6:	4652      	mov	r2, sl
 8009db8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009dbc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009dc0:	465b      	mov	r3, fp
 8009dc2:	f7f6 fb89 	bl	80004d8 <__aeabi_dmul>
 8009dc6:	4682      	mov	sl, r0
 8009dc8:	468b      	mov	fp, r1
 8009dca:	f034 040f 	bics.w	r4, r4, #15
 8009dce:	d073      	beq.n	8009eb8 <_strtod_l+0x510>
 8009dd0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8009dd4:	dd48      	ble.n	8009e68 <_strtod_l+0x4c0>
 8009dd6:	2400      	movs	r4, #0
 8009dd8:	46a0      	mov	r8, r4
 8009dda:	46a1      	mov	r9, r4
 8009ddc:	940a      	str	r4, [sp, #40]	@ 0x28
 8009dde:	2322      	movs	r3, #34	@ 0x22
 8009de0:	f04f 0a00 	mov.w	sl, #0
 8009de4:	9a05      	ldr	r2, [sp, #20]
 8009de6:	f8df b144 	ldr.w	fp, [pc, #324]	@ 8009f2c <_strtod_l+0x584>
 8009dea:	6013      	str	r3, [r2, #0]
 8009dec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	f43f ae13 	beq.w	8009a1a <_strtod_l+0x72>
 8009df4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009df6:	9805      	ldr	r0, [sp, #20]
 8009df8:	f7ff f94c 	bl	8009094 <_Bfree>
 8009dfc:	4649      	mov	r1, r9
 8009dfe:	9805      	ldr	r0, [sp, #20]
 8009e00:	f7ff f948 	bl	8009094 <_Bfree>
 8009e04:	4641      	mov	r1, r8
 8009e06:	9805      	ldr	r0, [sp, #20]
 8009e08:	f7ff f944 	bl	8009094 <_Bfree>
 8009e0c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009e0e:	9805      	ldr	r0, [sp, #20]
 8009e10:	f7ff f940 	bl	8009094 <_Bfree>
 8009e14:	4621      	mov	r1, r4
 8009e16:	9805      	ldr	r0, [sp, #20]
 8009e18:	f7ff f93c 	bl	8009094 <_Bfree>
 8009e1c:	e5fd      	b.n	8009a1a <_strtod_l+0x72>
 8009e1e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009e20:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8009e24:	4293      	cmp	r3, r2
 8009e26:	dbbc      	blt.n	8009da2 <_strtod_l+0x3fa>
 8009e28:	4c42      	ldr	r4, [pc, #264]	@ (8009f34 <_strtod_l+0x58c>)
 8009e2a:	f1c5 050f 	rsb	r5, r5, #15
 8009e2e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8009e32:	4652      	mov	r2, sl
 8009e34:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009e38:	465b      	mov	r3, fp
 8009e3a:	f7f6 fb4d 	bl	80004d8 <__aeabi_dmul>
 8009e3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e40:	1b5d      	subs	r5, r3, r5
 8009e42:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8009e46:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009e4a:	e791      	b.n	8009d70 <_strtod_l+0x3c8>
 8009e4c:	3316      	adds	r3, #22
 8009e4e:	dba8      	blt.n	8009da2 <_strtod_l+0x3fa>
 8009e50:	4b38      	ldr	r3, [pc, #224]	@ (8009f34 <_strtod_l+0x58c>)
 8009e52:	eba9 0808 	sub.w	r8, r9, r8
 8009e56:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8009e5a:	4650      	mov	r0, sl
 8009e5c:	e9d8 2300 	ldrd	r2, r3, [r8]
 8009e60:	4659      	mov	r1, fp
 8009e62:	f7f6 fc63 	bl	800072c <__aeabi_ddiv>
 8009e66:	e760      	b.n	8009d2a <_strtod_l+0x382>
 8009e68:	4b33      	ldr	r3, [pc, #204]	@ (8009f38 <_strtod_l+0x590>)
 8009e6a:	4650      	mov	r0, sl
 8009e6c:	9308      	str	r3, [sp, #32]
 8009e6e:	2300      	movs	r3, #0
 8009e70:	4659      	mov	r1, fp
 8009e72:	461e      	mov	r6, r3
 8009e74:	1124      	asrs	r4, r4, #4
 8009e76:	2c01      	cmp	r4, #1
 8009e78:	dc21      	bgt.n	8009ebe <_strtod_l+0x516>
 8009e7a:	b10b      	cbz	r3, 8009e80 <_strtod_l+0x4d8>
 8009e7c:	4682      	mov	sl, r0
 8009e7e:	468b      	mov	fp, r1
 8009e80:	492d      	ldr	r1, [pc, #180]	@ (8009f38 <_strtod_l+0x590>)
 8009e82:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8009e86:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8009e8a:	4652      	mov	r2, sl
 8009e8c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009e90:	465b      	mov	r3, fp
 8009e92:	f7f6 fb21 	bl	80004d8 <__aeabi_dmul>
 8009e96:	4b25      	ldr	r3, [pc, #148]	@ (8009f2c <_strtod_l+0x584>)
 8009e98:	460a      	mov	r2, r1
 8009e9a:	400b      	ands	r3, r1
 8009e9c:	4927      	ldr	r1, [pc, #156]	@ (8009f3c <_strtod_l+0x594>)
 8009e9e:	4682      	mov	sl, r0
 8009ea0:	428b      	cmp	r3, r1
 8009ea2:	d898      	bhi.n	8009dd6 <_strtod_l+0x42e>
 8009ea4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8009ea8:	428b      	cmp	r3, r1
 8009eaa:	bf86      	itte	hi
 8009eac:	f04f 3aff 	movhi.w	sl, #4294967295
 8009eb0:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8009f40 <_strtod_l+0x598>
 8009eb4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8009eb8:	2300      	movs	r3, #0
 8009eba:	9308      	str	r3, [sp, #32]
 8009ebc:	e07a      	b.n	8009fb4 <_strtod_l+0x60c>
 8009ebe:	07e2      	lsls	r2, r4, #31
 8009ec0:	d505      	bpl.n	8009ece <_strtod_l+0x526>
 8009ec2:	9b08      	ldr	r3, [sp, #32]
 8009ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ec8:	f7f6 fb06 	bl	80004d8 <__aeabi_dmul>
 8009ecc:	2301      	movs	r3, #1
 8009ece:	9a08      	ldr	r2, [sp, #32]
 8009ed0:	3601      	adds	r6, #1
 8009ed2:	3208      	adds	r2, #8
 8009ed4:	1064      	asrs	r4, r4, #1
 8009ed6:	9208      	str	r2, [sp, #32]
 8009ed8:	e7cd      	b.n	8009e76 <_strtod_l+0x4ce>
 8009eda:	d0ed      	beq.n	8009eb8 <_strtod_l+0x510>
 8009edc:	4264      	negs	r4, r4
 8009ede:	f014 020f 	ands.w	r2, r4, #15
 8009ee2:	d00a      	beq.n	8009efa <_strtod_l+0x552>
 8009ee4:	4b13      	ldr	r3, [pc, #76]	@ (8009f34 <_strtod_l+0x58c>)
 8009ee6:	4650      	mov	r0, sl
 8009ee8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009eec:	4659      	mov	r1, fp
 8009eee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ef2:	f7f6 fc1b 	bl	800072c <__aeabi_ddiv>
 8009ef6:	4682      	mov	sl, r0
 8009ef8:	468b      	mov	fp, r1
 8009efa:	1124      	asrs	r4, r4, #4
 8009efc:	d0dc      	beq.n	8009eb8 <_strtod_l+0x510>
 8009efe:	2c1f      	cmp	r4, #31
 8009f00:	dd20      	ble.n	8009f44 <_strtod_l+0x59c>
 8009f02:	2400      	movs	r4, #0
 8009f04:	46a0      	mov	r8, r4
 8009f06:	46a1      	mov	r9, r4
 8009f08:	940a      	str	r4, [sp, #40]	@ 0x28
 8009f0a:	2322      	movs	r3, #34	@ 0x22
 8009f0c:	9a05      	ldr	r2, [sp, #20]
 8009f0e:	f04f 0a00 	mov.w	sl, #0
 8009f12:	f04f 0b00 	mov.w	fp, #0
 8009f16:	6013      	str	r3, [r2, #0]
 8009f18:	e768      	b.n	8009dec <_strtod_l+0x444>
 8009f1a:	bf00      	nop
 8009f1c:	0800bfc1 	.word	0x0800bfc1
 8009f20:	0800c1d4 	.word	0x0800c1d4
 8009f24:	0800bfb9 	.word	0x0800bfb9
 8009f28:	0800bff0 	.word	0x0800bff0
 8009f2c:	7ff00000 	.word	0x7ff00000
 8009f30:	0800c37d 	.word	0x0800c37d
 8009f34:	0800c108 	.word	0x0800c108
 8009f38:	0800c0e0 	.word	0x0800c0e0
 8009f3c:	7ca00000 	.word	0x7ca00000
 8009f40:	7fefffff 	.word	0x7fefffff
 8009f44:	f014 0310 	ands.w	r3, r4, #16
 8009f48:	bf18      	it	ne
 8009f4a:	236a      	movne	r3, #106	@ 0x6a
 8009f4c:	4650      	mov	r0, sl
 8009f4e:	9308      	str	r3, [sp, #32]
 8009f50:	4659      	mov	r1, fp
 8009f52:	2300      	movs	r3, #0
 8009f54:	4ea9      	ldr	r6, [pc, #676]	@ (800a1fc <_strtod_l+0x854>)
 8009f56:	07e2      	lsls	r2, r4, #31
 8009f58:	d504      	bpl.n	8009f64 <_strtod_l+0x5bc>
 8009f5a:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009f5e:	f7f6 fabb 	bl	80004d8 <__aeabi_dmul>
 8009f62:	2301      	movs	r3, #1
 8009f64:	1064      	asrs	r4, r4, #1
 8009f66:	f106 0608 	add.w	r6, r6, #8
 8009f6a:	d1f4      	bne.n	8009f56 <_strtod_l+0x5ae>
 8009f6c:	b10b      	cbz	r3, 8009f72 <_strtod_l+0x5ca>
 8009f6e:	4682      	mov	sl, r0
 8009f70:	468b      	mov	fp, r1
 8009f72:	9b08      	ldr	r3, [sp, #32]
 8009f74:	b1b3      	cbz	r3, 8009fa4 <_strtod_l+0x5fc>
 8009f76:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8009f7a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	4659      	mov	r1, fp
 8009f82:	dd0f      	ble.n	8009fa4 <_strtod_l+0x5fc>
 8009f84:	2b1f      	cmp	r3, #31
 8009f86:	dd57      	ble.n	800a038 <_strtod_l+0x690>
 8009f88:	2b34      	cmp	r3, #52	@ 0x34
 8009f8a:	bfd8      	it	le
 8009f8c:	f04f 33ff 	movle.w	r3, #4294967295
 8009f90:	f04f 0a00 	mov.w	sl, #0
 8009f94:	bfcf      	iteee	gt
 8009f96:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8009f9a:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8009f9e:	4093      	lslle	r3, r2
 8009fa0:	ea03 0b01 	andle.w	fp, r3, r1
 8009fa4:	2200      	movs	r2, #0
 8009fa6:	2300      	movs	r3, #0
 8009fa8:	4650      	mov	r0, sl
 8009faa:	4659      	mov	r1, fp
 8009fac:	f7f6 fcfc 	bl	80009a8 <__aeabi_dcmpeq>
 8009fb0:	2800      	cmp	r0, #0
 8009fb2:	d1a6      	bne.n	8009f02 <_strtod_l+0x55a>
 8009fb4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009fb6:	463a      	mov	r2, r7
 8009fb8:	9300      	str	r3, [sp, #0]
 8009fba:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8009fbc:	462b      	mov	r3, r5
 8009fbe:	9805      	ldr	r0, [sp, #20]
 8009fc0:	f7ff f8d0 	bl	8009164 <__s2b>
 8009fc4:	900a      	str	r0, [sp, #40]	@ 0x28
 8009fc6:	2800      	cmp	r0, #0
 8009fc8:	f43f af05 	beq.w	8009dd6 <_strtod_l+0x42e>
 8009fcc:	2400      	movs	r4, #0
 8009fce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009fd0:	eba9 0308 	sub.w	r3, r9, r8
 8009fd4:	2a00      	cmp	r2, #0
 8009fd6:	bfa8      	it	ge
 8009fd8:	2300      	movge	r3, #0
 8009fda:	46a0      	mov	r8, r4
 8009fdc:	9312      	str	r3, [sp, #72]	@ 0x48
 8009fde:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8009fe2:	9316      	str	r3, [sp, #88]	@ 0x58
 8009fe4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009fe6:	9805      	ldr	r0, [sp, #20]
 8009fe8:	6859      	ldr	r1, [r3, #4]
 8009fea:	f7ff f813 	bl	8009014 <_Balloc>
 8009fee:	4681      	mov	r9, r0
 8009ff0:	2800      	cmp	r0, #0
 8009ff2:	f43f aef4 	beq.w	8009dde <_strtod_l+0x436>
 8009ff6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009ff8:	300c      	adds	r0, #12
 8009ffa:	691a      	ldr	r2, [r3, #16]
 8009ffc:	f103 010c 	add.w	r1, r3, #12
 800a000:	3202      	adds	r2, #2
 800a002:	0092      	lsls	r2, r2, #2
 800a004:	f7fe f8a3 	bl	800814e <memcpy>
 800a008:	ab1c      	add	r3, sp, #112	@ 0x70
 800a00a:	9301      	str	r3, [sp, #4]
 800a00c:	ab1b      	add	r3, sp, #108	@ 0x6c
 800a00e:	9300      	str	r3, [sp, #0]
 800a010:	4652      	mov	r2, sl
 800a012:	465b      	mov	r3, fp
 800a014:	9805      	ldr	r0, [sp, #20]
 800a016:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800a01a:	f7ff fbd5 	bl	80097c8 <__d2b>
 800a01e:	901a      	str	r0, [sp, #104]	@ 0x68
 800a020:	2800      	cmp	r0, #0
 800a022:	f43f aedc 	beq.w	8009dde <_strtod_l+0x436>
 800a026:	2101      	movs	r1, #1
 800a028:	9805      	ldr	r0, [sp, #20]
 800a02a:	f7ff f931 	bl	8009290 <__i2b>
 800a02e:	4680      	mov	r8, r0
 800a030:	b948      	cbnz	r0, 800a046 <_strtod_l+0x69e>
 800a032:	f04f 0800 	mov.w	r8, #0
 800a036:	e6d2      	b.n	8009dde <_strtod_l+0x436>
 800a038:	f04f 32ff 	mov.w	r2, #4294967295
 800a03c:	fa02 f303 	lsl.w	r3, r2, r3
 800a040:	ea03 0a0a 	and.w	sl, r3, sl
 800a044:	e7ae      	b.n	8009fa4 <_strtod_l+0x5fc>
 800a046:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800a048:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800a04a:	2d00      	cmp	r5, #0
 800a04c:	bfab      	itete	ge
 800a04e:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800a050:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800a052:	18ef      	addge	r7, r5, r3
 800a054:	1b5e      	sublt	r6, r3, r5
 800a056:	9b08      	ldr	r3, [sp, #32]
 800a058:	bfa8      	it	ge
 800a05a:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800a05c:	eba5 0503 	sub.w	r5, r5, r3
 800a060:	4415      	add	r5, r2
 800a062:	4b67      	ldr	r3, [pc, #412]	@ (800a200 <_strtod_l+0x858>)
 800a064:	f105 35ff 	add.w	r5, r5, #4294967295
 800a068:	bfb8      	it	lt
 800a06a:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800a06c:	429d      	cmp	r5, r3
 800a06e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800a072:	da50      	bge.n	800a116 <_strtod_l+0x76e>
 800a074:	1b5b      	subs	r3, r3, r5
 800a076:	2b1f      	cmp	r3, #31
 800a078:	f04f 0101 	mov.w	r1, #1
 800a07c:	eba2 0203 	sub.w	r2, r2, r3
 800a080:	dc3d      	bgt.n	800a0fe <_strtod_l+0x756>
 800a082:	fa01 f303 	lsl.w	r3, r1, r3
 800a086:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a088:	2300      	movs	r3, #0
 800a08a:	9310      	str	r3, [sp, #64]	@ 0x40
 800a08c:	18bd      	adds	r5, r7, r2
 800a08e:	9b08      	ldr	r3, [sp, #32]
 800a090:	42af      	cmp	r7, r5
 800a092:	4416      	add	r6, r2
 800a094:	441e      	add	r6, r3
 800a096:	463b      	mov	r3, r7
 800a098:	bfa8      	it	ge
 800a09a:	462b      	movge	r3, r5
 800a09c:	42b3      	cmp	r3, r6
 800a09e:	bfa8      	it	ge
 800a0a0:	4633      	movge	r3, r6
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	bfc2      	ittt	gt
 800a0a6:	1aed      	subgt	r5, r5, r3
 800a0a8:	1af6      	subgt	r6, r6, r3
 800a0aa:	1aff      	subgt	r7, r7, r3
 800a0ac:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	dd16      	ble.n	800a0e0 <_strtod_l+0x738>
 800a0b2:	4641      	mov	r1, r8
 800a0b4:	461a      	mov	r2, r3
 800a0b6:	9805      	ldr	r0, [sp, #20]
 800a0b8:	f7ff f9a8 	bl	800940c <__pow5mult>
 800a0bc:	4680      	mov	r8, r0
 800a0be:	2800      	cmp	r0, #0
 800a0c0:	d0b7      	beq.n	800a032 <_strtod_l+0x68a>
 800a0c2:	4601      	mov	r1, r0
 800a0c4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a0c6:	9805      	ldr	r0, [sp, #20]
 800a0c8:	f7ff f8f8 	bl	80092bc <__multiply>
 800a0cc:	900e      	str	r0, [sp, #56]	@ 0x38
 800a0ce:	2800      	cmp	r0, #0
 800a0d0:	f43f ae85 	beq.w	8009dde <_strtod_l+0x436>
 800a0d4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a0d6:	9805      	ldr	r0, [sp, #20]
 800a0d8:	f7fe ffdc 	bl	8009094 <_Bfree>
 800a0dc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a0de:	931a      	str	r3, [sp, #104]	@ 0x68
 800a0e0:	2d00      	cmp	r5, #0
 800a0e2:	dc1d      	bgt.n	800a120 <_strtod_l+0x778>
 800a0e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	dd23      	ble.n	800a132 <_strtod_l+0x78a>
 800a0ea:	4649      	mov	r1, r9
 800a0ec:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800a0ee:	9805      	ldr	r0, [sp, #20]
 800a0f0:	f7ff f98c 	bl	800940c <__pow5mult>
 800a0f4:	4681      	mov	r9, r0
 800a0f6:	b9e0      	cbnz	r0, 800a132 <_strtod_l+0x78a>
 800a0f8:	f04f 0900 	mov.w	r9, #0
 800a0fc:	e66f      	b.n	8009dde <_strtod_l+0x436>
 800a0fe:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800a102:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800a106:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800a10a:	35e2      	adds	r5, #226	@ 0xe2
 800a10c:	fa01 f305 	lsl.w	r3, r1, r5
 800a110:	9310      	str	r3, [sp, #64]	@ 0x40
 800a112:	9113      	str	r1, [sp, #76]	@ 0x4c
 800a114:	e7ba      	b.n	800a08c <_strtod_l+0x6e4>
 800a116:	2300      	movs	r3, #0
 800a118:	9310      	str	r3, [sp, #64]	@ 0x40
 800a11a:	2301      	movs	r3, #1
 800a11c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a11e:	e7b5      	b.n	800a08c <_strtod_l+0x6e4>
 800a120:	462a      	mov	r2, r5
 800a122:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a124:	9805      	ldr	r0, [sp, #20]
 800a126:	f7ff f9cb 	bl	80094c0 <__lshift>
 800a12a:	901a      	str	r0, [sp, #104]	@ 0x68
 800a12c:	2800      	cmp	r0, #0
 800a12e:	d1d9      	bne.n	800a0e4 <_strtod_l+0x73c>
 800a130:	e655      	b.n	8009dde <_strtod_l+0x436>
 800a132:	2e00      	cmp	r6, #0
 800a134:	dd07      	ble.n	800a146 <_strtod_l+0x79e>
 800a136:	4649      	mov	r1, r9
 800a138:	4632      	mov	r2, r6
 800a13a:	9805      	ldr	r0, [sp, #20]
 800a13c:	f7ff f9c0 	bl	80094c0 <__lshift>
 800a140:	4681      	mov	r9, r0
 800a142:	2800      	cmp	r0, #0
 800a144:	d0d8      	beq.n	800a0f8 <_strtod_l+0x750>
 800a146:	2f00      	cmp	r7, #0
 800a148:	dd08      	ble.n	800a15c <_strtod_l+0x7b4>
 800a14a:	4641      	mov	r1, r8
 800a14c:	463a      	mov	r2, r7
 800a14e:	9805      	ldr	r0, [sp, #20]
 800a150:	f7ff f9b6 	bl	80094c0 <__lshift>
 800a154:	4680      	mov	r8, r0
 800a156:	2800      	cmp	r0, #0
 800a158:	f43f ae41 	beq.w	8009dde <_strtod_l+0x436>
 800a15c:	464a      	mov	r2, r9
 800a15e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a160:	9805      	ldr	r0, [sp, #20]
 800a162:	f7ff fa35 	bl	80095d0 <__mdiff>
 800a166:	4604      	mov	r4, r0
 800a168:	2800      	cmp	r0, #0
 800a16a:	f43f ae38 	beq.w	8009dde <_strtod_l+0x436>
 800a16e:	68c3      	ldr	r3, [r0, #12]
 800a170:	4641      	mov	r1, r8
 800a172:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a174:	2300      	movs	r3, #0
 800a176:	60c3      	str	r3, [r0, #12]
 800a178:	f7ff fa0e 	bl	8009598 <__mcmp>
 800a17c:	2800      	cmp	r0, #0
 800a17e:	da45      	bge.n	800a20c <_strtod_l+0x864>
 800a180:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a182:	ea53 030a 	orrs.w	r3, r3, sl
 800a186:	d16b      	bne.n	800a260 <_strtod_l+0x8b8>
 800a188:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d167      	bne.n	800a260 <_strtod_l+0x8b8>
 800a190:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a194:	0d1b      	lsrs	r3, r3, #20
 800a196:	051b      	lsls	r3, r3, #20
 800a198:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a19c:	d960      	bls.n	800a260 <_strtod_l+0x8b8>
 800a19e:	6963      	ldr	r3, [r4, #20]
 800a1a0:	b913      	cbnz	r3, 800a1a8 <_strtod_l+0x800>
 800a1a2:	6923      	ldr	r3, [r4, #16]
 800a1a4:	2b01      	cmp	r3, #1
 800a1a6:	dd5b      	ble.n	800a260 <_strtod_l+0x8b8>
 800a1a8:	4621      	mov	r1, r4
 800a1aa:	2201      	movs	r2, #1
 800a1ac:	9805      	ldr	r0, [sp, #20]
 800a1ae:	f7ff f987 	bl	80094c0 <__lshift>
 800a1b2:	4641      	mov	r1, r8
 800a1b4:	4604      	mov	r4, r0
 800a1b6:	f7ff f9ef 	bl	8009598 <__mcmp>
 800a1ba:	2800      	cmp	r0, #0
 800a1bc:	dd50      	ble.n	800a260 <_strtod_l+0x8b8>
 800a1be:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a1c2:	9a08      	ldr	r2, [sp, #32]
 800a1c4:	0d1b      	lsrs	r3, r3, #20
 800a1c6:	051b      	lsls	r3, r3, #20
 800a1c8:	2a00      	cmp	r2, #0
 800a1ca:	d06a      	beq.n	800a2a2 <_strtod_l+0x8fa>
 800a1cc:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a1d0:	d867      	bhi.n	800a2a2 <_strtod_l+0x8fa>
 800a1d2:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800a1d6:	f67f ae98 	bls.w	8009f0a <_strtod_l+0x562>
 800a1da:	4650      	mov	r0, sl
 800a1dc:	4659      	mov	r1, fp
 800a1de:	4b09      	ldr	r3, [pc, #36]	@ (800a204 <_strtod_l+0x85c>)
 800a1e0:	2200      	movs	r2, #0
 800a1e2:	f7f6 f979 	bl	80004d8 <__aeabi_dmul>
 800a1e6:	4b08      	ldr	r3, [pc, #32]	@ (800a208 <_strtod_l+0x860>)
 800a1e8:	4682      	mov	sl, r0
 800a1ea:	400b      	ands	r3, r1
 800a1ec:	468b      	mov	fp, r1
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	f47f ae00 	bne.w	8009df4 <_strtod_l+0x44c>
 800a1f4:	2322      	movs	r3, #34	@ 0x22
 800a1f6:	9a05      	ldr	r2, [sp, #20]
 800a1f8:	6013      	str	r3, [r2, #0]
 800a1fa:	e5fb      	b.n	8009df4 <_strtod_l+0x44c>
 800a1fc:	0800c200 	.word	0x0800c200
 800a200:	fffffc02 	.word	0xfffffc02
 800a204:	39500000 	.word	0x39500000
 800a208:	7ff00000 	.word	0x7ff00000
 800a20c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800a210:	d165      	bne.n	800a2de <_strtod_l+0x936>
 800a212:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800a214:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a218:	b35a      	cbz	r2, 800a272 <_strtod_l+0x8ca>
 800a21a:	4a99      	ldr	r2, [pc, #612]	@ (800a480 <_strtod_l+0xad8>)
 800a21c:	4293      	cmp	r3, r2
 800a21e:	d12b      	bne.n	800a278 <_strtod_l+0x8d0>
 800a220:	9b08      	ldr	r3, [sp, #32]
 800a222:	4651      	mov	r1, sl
 800a224:	b303      	cbz	r3, 800a268 <_strtod_l+0x8c0>
 800a226:	465a      	mov	r2, fp
 800a228:	4b96      	ldr	r3, [pc, #600]	@ (800a484 <_strtod_l+0xadc>)
 800a22a:	4013      	ands	r3, r2
 800a22c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800a230:	f04f 32ff 	mov.w	r2, #4294967295
 800a234:	d81b      	bhi.n	800a26e <_strtod_l+0x8c6>
 800a236:	0d1b      	lsrs	r3, r3, #20
 800a238:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800a23c:	fa02 f303 	lsl.w	r3, r2, r3
 800a240:	4299      	cmp	r1, r3
 800a242:	d119      	bne.n	800a278 <_strtod_l+0x8d0>
 800a244:	4b90      	ldr	r3, [pc, #576]	@ (800a488 <_strtod_l+0xae0>)
 800a246:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a248:	429a      	cmp	r2, r3
 800a24a:	d102      	bne.n	800a252 <_strtod_l+0x8aa>
 800a24c:	3101      	adds	r1, #1
 800a24e:	f43f adc6 	beq.w	8009dde <_strtod_l+0x436>
 800a252:	f04f 0a00 	mov.w	sl, #0
 800a256:	4b8b      	ldr	r3, [pc, #556]	@ (800a484 <_strtod_l+0xadc>)
 800a258:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a25a:	401a      	ands	r2, r3
 800a25c:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800a260:	9b08      	ldr	r3, [sp, #32]
 800a262:	2b00      	cmp	r3, #0
 800a264:	d1b9      	bne.n	800a1da <_strtod_l+0x832>
 800a266:	e5c5      	b.n	8009df4 <_strtod_l+0x44c>
 800a268:	f04f 33ff 	mov.w	r3, #4294967295
 800a26c:	e7e8      	b.n	800a240 <_strtod_l+0x898>
 800a26e:	4613      	mov	r3, r2
 800a270:	e7e6      	b.n	800a240 <_strtod_l+0x898>
 800a272:	ea53 030a 	orrs.w	r3, r3, sl
 800a276:	d0a2      	beq.n	800a1be <_strtod_l+0x816>
 800a278:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a27a:	b1db      	cbz	r3, 800a2b4 <_strtod_l+0x90c>
 800a27c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a27e:	4213      	tst	r3, r2
 800a280:	d0ee      	beq.n	800a260 <_strtod_l+0x8b8>
 800a282:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a284:	4650      	mov	r0, sl
 800a286:	4659      	mov	r1, fp
 800a288:	9a08      	ldr	r2, [sp, #32]
 800a28a:	b1bb      	cbz	r3, 800a2bc <_strtod_l+0x914>
 800a28c:	f7ff fb68 	bl	8009960 <sulp>
 800a290:	4602      	mov	r2, r0
 800a292:	460b      	mov	r3, r1
 800a294:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a298:	f7f5 ff68 	bl	800016c <__adddf3>
 800a29c:	4682      	mov	sl, r0
 800a29e:	468b      	mov	fp, r1
 800a2a0:	e7de      	b.n	800a260 <_strtod_l+0x8b8>
 800a2a2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800a2a6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800a2aa:	f04f 3aff 	mov.w	sl, #4294967295
 800a2ae:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800a2b2:	e7d5      	b.n	800a260 <_strtod_l+0x8b8>
 800a2b4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a2b6:	ea13 0f0a 	tst.w	r3, sl
 800a2ba:	e7e1      	b.n	800a280 <_strtod_l+0x8d8>
 800a2bc:	f7ff fb50 	bl	8009960 <sulp>
 800a2c0:	4602      	mov	r2, r0
 800a2c2:	460b      	mov	r3, r1
 800a2c4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a2c8:	f7f5 ff4e 	bl	8000168 <__aeabi_dsub>
 800a2cc:	2200      	movs	r2, #0
 800a2ce:	2300      	movs	r3, #0
 800a2d0:	4682      	mov	sl, r0
 800a2d2:	468b      	mov	fp, r1
 800a2d4:	f7f6 fb68 	bl	80009a8 <__aeabi_dcmpeq>
 800a2d8:	2800      	cmp	r0, #0
 800a2da:	d0c1      	beq.n	800a260 <_strtod_l+0x8b8>
 800a2dc:	e615      	b.n	8009f0a <_strtod_l+0x562>
 800a2de:	4641      	mov	r1, r8
 800a2e0:	4620      	mov	r0, r4
 800a2e2:	f7ff fac9 	bl	8009878 <__ratio>
 800a2e6:	2200      	movs	r2, #0
 800a2e8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800a2ec:	4606      	mov	r6, r0
 800a2ee:	460f      	mov	r7, r1
 800a2f0:	f7f6 fb6e 	bl	80009d0 <__aeabi_dcmple>
 800a2f4:	2800      	cmp	r0, #0
 800a2f6:	d06d      	beq.n	800a3d4 <_strtod_l+0xa2c>
 800a2f8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d178      	bne.n	800a3f0 <_strtod_l+0xa48>
 800a2fe:	f1ba 0f00 	cmp.w	sl, #0
 800a302:	d156      	bne.n	800a3b2 <_strtod_l+0xa0a>
 800a304:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a306:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d158      	bne.n	800a3c0 <_strtod_l+0xa18>
 800a30e:	2200      	movs	r2, #0
 800a310:	4630      	mov	r0, r6
 800a312:	4639      	mov	r1, r7
 800a314:	4b5d      	ldr	r3, [pc, #372]	@ (800a48c <_strtod_l+0xae4>)
 800a316:	f7f6 fb51 	bl	80009bc <__aeabi_dcmplt>
 800a31a:	2800      	cmp	r0, #0
 800a31c:	d157      	bne.n	800a3ce <_strtod_l+0xa26>
 800a31e:	4630      	mov	r0, r6
 800a320:	4639      	mov	r1, r7
 800a322:	2200      	movs	r2, #0
 800a324:	4b5a      	ldr	r3, [pc, #360]	@ (800a490 <_strtod_l+0xae8>)
 800a326:	f7f6 f8d7 	bl	80004d8 <__aeabi_dmul>
 800a32a:	4606      	mov	r6, r0
 800a32c:	460f      	mov	r7, r1
 800a32e:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800a332:	9606      	str	r6, [sp, #24]
 800a334:	9307      	str	r3, [sp, #28]
 800a336:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a33a:	4d52      	ldr	r5, [pc, #328]	@ (800a484 <_strtod_l+0xadc>)
 800a33c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800a340:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a342:	401d      	ands	r5, r3
 800a344:	4b53      	ldr	r3, [pc, #332]	@ (800a494 <_strtod_l+0xaec>)
 800a346:	429d      	cmp	r5, r3
 800a348:	f040 80aa 	bne.w	800a4a0 <_strtod_l+0xaf8>
 800a34c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a34e:	4650      	mov	r0, sl
 800a350:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800a354:	4659      	mov	r1, fp
 800a356:	f7ff f9cf 	bl	80096f8 <__ulp>
 800a35a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a35e:	f7f6 f8bb 	bl	80004d8 <__aeabi_dmul>
 800a362:	4652      	mov	r2, sl
 800a364:	465b      	mov	r3, fp
 800a366:	f7f5 ff01 	bl	800016c <__adddf3>
 800a36a:	460b      	mov	r3, r1
 800a36c:	4945      	ldr	r1, [pc, #276]	@ (800a484 <_strtod_l+0xadc>)
 800a36e:	4a4a      	ldr	r2, [pc, #296]	@ (800a498 <_strtod_l+0xaf0>)
 800a370:	4019      	ands	r1, r3
 800a372:	4291      	cmp	r1, r2
 800a374:	4682      	mov	sl, r0
 800a376:	d942      	bls.n	800a3fe <_strtod_l+0xa56>
 800a378:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a37a:	4b43      	ldr	r3, [pc, #268]	@ (800a488 <_strtod_l+0xae0>)
 800a37c:	429a      	cmp	r2, r3
 800a37e:	d103      	bne.n	800a388 <_strtod_l+0x9e0>
 800a380:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a382:	3301      	adds	r3, #1
 800a384:	f43f ad2b 	beq.w	8009dde <_strtod_l+0x436>
 800a388:	f04f 3aff 	mov.w	sl, #4294967295
 800a38c:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 800a488 <_strtod_l+0xae0>
 800a390:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a392:	9805      	ldr	r0, [sp, #20]
 800a394:	f7fe fe7e 	bl	8009094 <_Bfree>
 800a398:	4649      	mov	r1, r9
 800a39a:	9805      	ldr	r0, [sp, #20]
 800a39c:	f7fe fe7a 	bl	8009094 <_Bfree>
 800a3a0:	4641      	mov	r1, r8
 800a3a2:	9805      	ldr	r0, [sp, #20]
 800a3a4:	f7fe fe76 	bl	8009094 <_Bfree>
 800a3a8:	4621      	mov	r1, r4
 800a3aa:	9805      	ldr	r0, [sp, #20]
 800a3ac:	f7fe fe72 	bl	8009094 <_Bfree>
 800a3b0:	e618      	b.n	8009fe4 <_strtod_l+0x63c>
 800a3b2:	f1ba 0f01 	cmp.w	sl, #1
 800a3b6:	d103      	bne.n	800a3c0 <_strtod_l+0xa18>
 800a3b8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	f43f ada5 	beq.w	8009f0a <_strtod_l+0x562>
 800a3c0:	2200      	movs	r2, #0
 800a3c2:	4b36      	ldr	r3, [pc, #216]	@ (800a49c <_strtod_l+0xaf4>)
 800a3c4:	2600      	movs	r6, #0
 800a3c6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a3ca:	4f30      	ldr	r7, [pc, #192]	@ (800a48c <_strtod_l+0xae4>)
 800a3cc:	e7b3      	b.n	800a336 <_strtod_l+0x98e>
 800a3ce:	2600      	movs	r6, #0
 800a3d0:	4f2f      	ldr	r7, [pc, #188]	@ (800a490 <_strtod_l+0xae8>)
 800a3d2:	e7ac      	b.n	800a32e <_strtod_l+0x986>
 800a3d4:	4630      	mov	r0, r6
 800a3d6:	4639      	mov	r1, r7
 800a3d8:	4b2d      	ldr	r3, [pc, #180]	@ (800a490 <_strtod_l+0xae8>)
 800a3da:	2200      	movs	r2, #0
 800a3dc:	f7f6 f87c 	bl	80004d8 <__aeabi_dmul>
 800a3e0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a3e2:	4606      	mov	r6, r0
 800a3e4:	460f      	mov	r7, r1
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d0a1      	beq.n	800a32e <_strtod_l+0x986>
 800a3ea:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800a3ee:	e7a2      	b.n	800a336 <_strtod_l+0x98e>
 800a3f0:	2200      	movs	r2, #0
 800a3f2:	4b26      	ldr	r3, [pc, #152]	@ (800a48c <_strtod_l+0xae4>)
 800a3f4:	4616      	mov	r6, r2
 800a3f6:	461f      	mov	r7, r3
 800a3f8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a3fc:	e79b      	b.n	800a336 <_strtod_l+0x98e>
 800a3fe:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800a402:	9b08      	ldr	r3, [sp, #32]
 800a404:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d1c1      	bne.n	800a390 <_strtod_l+0x9e8>
 800a40c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a410:	0d1b      	lsrs	r3, r3, #20
 800a412:	051b      	lsls	r3, r3, #20
 800a414:	429d      	cmp	r5, r3
 800a416:	d1bb      	bne.n	800a390 <_strtod_l+0x9e8>
 800a418:	4630      	mov	r0, r6
 800a41a:	4639      	mov	r1, r7
 800a41c:	f7f6 fba4 	bl	8000b68 <__aeabi_d2lz>
 800a420:	f7f6 f82c 	bl	800047c <__aeabi_l2d>
 800a424:	4602      	mov	r2, r0
 800a426:	460b      	mov	r3, r1
 800a428:	4630      	mov	r0, r6
 800a42a:	4639      	mov	r1, r7
 800a42c:	f7f5 fe9c 	bl	8000168 <__aeabi_dsub>
 800a430:	460b      	mov	r3, r1
 800a432:	4602      	mov	r2, r0
 800a434:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800a438:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800a43c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a43e:	ea46 060a 	orr.w	r6, r6, sl
 800a442:	431e      	orrs	r6, r3
 800a444:	d069      	beq.n	800a51a <_strtod_l+0xb72>
 800a446:	a30a      	add	r3, pc, #40	@ (adr r3, 800a470 <_strtod_l+0xac8>)
 800a448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a44c:	f7f6 fab6 	bl	80009bc <__aeabi_dcmplt>
 800a450:	2800      	cmp	r0, #0
 800a452:	f47f accf 	bne.w	8009df4 <_strtod_l+0x44c>
 800a456:	a308      	add	r3, pc, #32	@ (adr r3, 800a478 <_strtod_l+0xad0>)
 800a458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a45c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a460:	f7f6 faca 	bl	80009f8 <__aeabi_dcmpgt>
 800a464:	2800      	cmp	r0, #0
 800a466:	d093      	beq.n	800a390 <_strtod_l+0x9e8>
 800a468:	e4c4      	b.n	8009df4 <_strtod_l+0x44c>
 800a46a:	bf00      	nop
 800a46c:	f3af 8000 	nop.w
 800a470:	94a03595 	.word	0x94a03595
 800a474:	3fdfffff 	.word	0x3fdfffff
 800a478:	35afe535 	.word	0x35afe535
 800a47c:	3fe00000 	.word	0x3fe00000
 800a480:	000fffff 	.word	0x000fffff
 800a484:	7ff00000 	.word	0x7ff00000
 800a488:	7fefffff 	.word	0x7fefffff
 800a48c:	3ff00000 	.word	0x3ff00000
 800a490:	3fe00000 	.word	0x3fe00000
 800a494:	7fe00000 	.word	0x7fe00000
 800a498:	7c9fffff 	.word	0x7c9fffff
 800a49c:	bff00000 	.word	0xbff00000
 800a4a0:	9b08      	ldr	r3, [sp, #32]
 800a4a2:	b323      	cbz	r3, 800a4ee <_strtod_l+0xb46>
 800a4a4:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800a4a8:	d821      	bhi.n	800a4ee <_strtod_l+0xb46>
 800a4aa:	a327      	add	r3, pc, #156	@ (adr r3, 800a548 <_strtod_l+0xba0>)
 800a4ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4b0:	4630      	mov	r0, r6
 800a4b2:	4639      	mov	r1, r7
 800a4b4:	f7f6 fa8c 	bl	80009d0 <__aeabi_dcmple>
 800a4b8:	b1a0      	cbz	r0, 800a4e4 <_strtod_l+0xb3c>
 800a4ba:	4639      	mov	r1, r7
 800a4bc:	4630      	mov	r0, r6
 800a4be:	f7f6 fae3 	bl	8000a88 <__aeabi_d2uiz>
 800a4c2:	2801      	cmp	r0, #1
 800a4c4:	bf38      	it	cc
 800a4c6:	2001      	movcc	r0, #1
 800a4c8:	f7f5 ff8c 	bl	80003e4 <__aeabi_ui2d>
 800a4cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a4ce:	4606      	mov	r6, r0
 800a4d0:	460f      	mov	r7, r1
 800a4d2:	b9fb      	cbnz	r3, 800a514 <_strtod_l+0xb6c>
 800a4d4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a4d8:	9014      	str	r0, [sp, #80]	@ 0x50
 800a4da:	9315      	str	r3, [sp, #84]	@ 0x54
 800a4dc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800a4e0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800a4e4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a4e6:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800a4ea:	1b5b      	subs	r3, r3, r5
 800a4ec:	9311      	str	r3, [sp, #68]	@ 0x44
 800a4ee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a4f2:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800a4f6:	f7ff f8ff 	bl	80096f8 <__ulp>
 800a4fa:	4602      	mov	r2, r0
 800a4fc:	460b      	mov	r3, r1
 800a4fe:	4650      	mov	r0, sl
 800a500:	4659      	mov	r1, fp
 800a502:	f7f5 ffe9 	bl	80004d8 <__aeabi_dmul>
 800a506:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800a50a:	f7f5 fe2f 	bl	800016c <__adddf3>
 800a50e:	4682      	mov	sl, r0
 800a510:	468b      	mov	fp, r1
 800a512:	e776      	b.n	800a402 <_strtod_l+0xa5a>
 800a514:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800a518:	e7e0      	b.n	800a4dc <_strtod_l+0xb34>
 800a51a:	a30d      	add	r3, pc, #52	@ (adr r3, 800a550 <_strtod_l+0xba8>)
 800a51c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a520:	f7f6 fa4c 	bl	80009bc <__aeabi_dcmplt>
 800a524:	e79e      	b.n	800a464 <_strtod_l+0xabc>
 800a526:	2300      	movs	r3, #0
 800a528:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a52a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a52c:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800a52e:	6013      	str	r3, [r2, #0]
 800a530:	f7ff ba77 	b.w	8009a22 <_strtod_l+0x7a>
 800a534:	2a65      	cmp	r2, #101	@ 0x65
 800a536:	f43f ab6e 	beq.w	8009c16 <_strtod_l+0x26e>
 800a53a:	2a45      	cmp	r2, #69	@ 0x45
 800a53c:	f43f ab6b 	beq.w	8009c16 <_strtod_l+0x26e>
 800a540:	2301      	movs	r3, #1
 800a542:	f7ff bba6 	b.w	8009c92 <_strtod_l+0x2ea>
 800a546:	bf00      	nop
 800a548:	ffc00000 	.word	0xffc00000
 800a54c:	41dfffff 	.word	0x41dfffff
 800a550:	94a03595 	.word	0x94a03595
 800a554:	3fcfffff 	.word	0x3fcfffff

0800a558 <_strtod_r>:
 800a558:	4b01      	ldr	r3, [pc, #4]	@ (800a560 <_strtod_r+0x8>)
 800a55a:	f7ff ba25 	b.w	80099a8 <_strtod_l>
 800a55e:	bf00      	nop
 800a560:	20000080 	.word	0x20000080

0800a564 <_strtol_l.constprop.0>:
 800a564:	2b24      	cmp	r3, #36	@ 0x24
 800a566:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a56a:	4686      	mov	lr, r0
 800a56c:	4690      	mov	r8, r2
 800a56e:	d801      	bhi.n	800a574 <_strtol_l.constprop.0+0x10>
 800a570:	2b01      	cmp	r3, #1
 800a572:	d106      	bne.n	800a582 <_strtol_l.constprop.0+0x1e>
 800a574:	f7fd fdb0 	bl	80080d8 <__errno>
 800a578:	2316      	movs	r3, #22
 800a57a:	6003      	str	r3, [r0, #0]
 800a57c:	2000      	movs	r0, #0
 800a57e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a582:	460d      	mov	r5, r1
 800a584:	4833      	ldr	r0, [pc, #204]	@ (800a654 <_strtol_l.constprop.0+0xf0>)
 800a586:	462a      	mov	r2, r5
 800a588:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a58c:	5d06      	ldrb	r6, [r0, r4]
 800a58e:	f016 0608 	ands.w	r6, r6, #8
 800a592:	d1f8      	bne.n	800a586 <_strtol_l.constprop.0+0x22>
 800a594:	2c2d      	cmp	r4, #45	@ 0x2d
 800a596:	d12d      	bne.n	800a5f4 <_strtol_l.constprop.0+0x90>
 800a598:	2601      	movs	r6, #1
 800a59a:	782c      	ldrb	r4, [r5, #0]
 800a59c:	1c95      	adds	r5, r2, #2
 800a59e:	f033 0210 	bics.w	r2, r3, #16
 800a5a2:	d109      	bne.n	800a5b8 <_strtol_l.constprop.0+0x54>
 800a5a4:	2c30      	cmp	r4, #48	@ 0x30
 800a5a6:	d12a      	bne.n	800a5fe <_strtol_l.constprop.0+0x9a>
 800a5a8:	782a      	ldrb	r2, [r5, #0]
 800a5aa:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a5ae:	2a58      	cmp	r2, #88	@ 0x58
 800a5b0:	d125      	bne.n	800a5fe <_strtol_l.constprop.0+0x9a>
 800a5b2:	2310      	movs	r3, #16
 800a5b4:	786c      	ldrb	r4, [r5, #1]
 800a5b6:	3502      	adds	r5, #2
 800a5b8:	2200      	movs	r2, #0
 800a5ba:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800a5be:	f10c 3cff 	add.w	ip, ip, #4294967295
 800a5c2:	fbbc f9f3 	udiv	r9, ip, r3
 800a5c6:	4610      	mov	r0, r2
 800a5c8:	fb03 ca19 	mls	sl, r3, r9, ip
 800a5cc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800a5d0:	2f09      	cmp	r7, #9
 800a5d2:	d81b      	bhi.n	800a60c <_strtol_l.constprop.0+0xa8>
 800a5d4:	463c      	mov	r4, r7
 800a5d6:	42a3      	cmp	r3, r4
 800a5d8:	dd27      	ble.n	800a62a <_strtol_l.constprop.0+0xc6>
 800a5da:	1c57      	adds	r7, r2, #1
 800a5dc:	d007      	beq.n	800a5ee <_strtol_l.constprop.0+0x8a>
 800a5de:	4581      	cmp	r9, r0
 800a5e0:	d320      	bcc.n	800a624 <_strtol_l.constprop.0+0xc0>
 800a5e2:	d101      	bne.n	800a5e8 <_strtol_l.constprop.0+0x84>
 800a5e4:	45a2      	cmp	sl, r4
 800a5e6:	db1d      	blt.n	800a624 <_strtol_l.constprop.0+0xc0>
 800a5e8:	2201      	movs	r2, #1
 800a5ea:	fb00 4003 	mla	r0, r0, r3, r4
 800a5ee:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a5f2:	e7eb      	b.n	800a5cc <_strtol_l.constprop.0+0x68>
 800a5f4:	2c2b      	cmp	r4, #43	@ 0x2b
 800a5f6:	bf04      	itt	eq
 800a5f8:	782c      	ldrbeq	r4, [r5, #0]
 800a5fa:	1c95      	addeq	r5, r2, #2
 800a5fc:	e7cf      	b.n	800a59e <_strtol_l.constprop.0+0x3a>
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d1da      	bne.n	800a5b8 <_strtol_l.constprop.0+0x54>
 800a602:	2c30      	cmp	r4, #48	@ 0x30
 800a604:	bf0c      	ite	eq
 800a606:	2308      	moveq	r3, #8
 800a608:	230a      	movne	r3, #10
 800a60a:	e7d5      	b.n	800a5b8 <_strtol_l.constprop.0+0x54>
 800a60c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800a610:	2f19      	cmp	r7, #25
 800a612:	d801      	bhi.n	800a618 <_strtol_l.constprop.0+0xb4>
 800a614:	3c37      	subs	r4, #55	@ 0x37
 800a616:	e7de      	b.n	800a5d6 <_strtol_l.constprop.0+0x72>
 800a618:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800a61c:	2f19      	cmp	r7, #25
 800a61e:	d804      	bhi.n	800a62a <_strtol_l.constprop.0+0xc6>
 800a620:	3c57      	subs	r4, #87	@ 0x57
 800a622:	e7d8      	b.n	800a5d6 <_strtol_l.constprop.0+0x72>
 800a624:	f04f 32ff 	mov.w	r2, #4294967295
 800a628:	e7e1      	b.n	800a5ee <_strtol_l.constprop.0+0x8a>
 800a62a:	1c53      	adds	r3, r2, #1
 800a62c:	d108      	bne.n	800a640 <_strtol_l.constprop.0+0xdc>
 800a62e:	2322      	movs	r3, #34	@ 0x22
 800a630:	4660      	mov	r0, ip
 800a632:	f8ce 3000 	str.w	r3, [lr]
 800a636:	f1b8 0f00 	cmp.w	r8, #0
 800a63a:	d0a0      	beq.n	800a57e <_strtol_l.constprop.0+0x1a>
 800a63c:	1e69      	subs	r1, r5, #1
 800a63e:	e006      	b.n	800a64e <_strtol_l.constprop.0+0xea>
 800a640:	b106      	cbz	r6, 800a644 <_strtol_l.constprop.0+0xe0>
 800a642:	4240      	negs	r0, r0
 800a644:	f1b8 0f00 	cmp.w	r8, #0
 800a648:	d099      	beq.n	800a57e <_strtol_l.constprop.0+0x1a>
 800a64a:	2a00      	cmp	r2, #0
 800a64c:	d1f6      	bne.n	800a63c <_strtol_l.constprop.0+0xd8>
 800a64e:	f8c8 1000 	str.w	r1, [r8]
 800a652:	e794      	b.n	800a57e <_strtol_l.constprop.0+0x1a>
 800a654:	0800c229 	.word	0x0800c229

0800a658 <_strtol_r>:
 800a658:	f7ff bf84 	b.w	800a564 <_strtol_l.constprop.0>

0800a65c <__ssputs_r>:
 800a65c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a660:	461f      	mov	r7, r3
 800a662:	688e      	ldr	r6, [r1, #8]
 800a664:	4682      	mov	sl, r0
 800a666:	42be      	cmp	r6, r7
 800a668:	460c      	mov	r4, r1
 800a66a:	4690      	mov	r8, r2
 800a66c:	680b      	ldr	r3, [r1, #0]
 800a66e:	d82d      	bhi.n	800a6cc <__ssputs_r+0x70>
 800a670:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a674:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a678:	d026      	beq.n	800a6c8 <__ssputs_r+0x6c>
 800a67a:	6965      	ldr	r5, [r4, #20]
 800a67c:	6909      	ldr	r1, [r1, #16]
 800a67e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a682:	eba3 0901 	sub.w	r9, r3, r1
 800a686:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a68a:	1c7b      	adds	r3, r7, #1
 800a68c:	444b      	add	r3, r9
 800a68e:	106d      	asrs	r5, r5, #1
 800a690:	429d      	cmp	r5, r3
 800a692:	bf38      	it	cc
 800a694:	461d      	movcc	r5, r3
 800a696:	0553      	lsls	r3, r2, #21
 800a698:	d527      	bpl.n	800a6ea <__ssputs_r+0x8e>
 800a69a:	4629      	mov	r1, r5
 800a69c:	f7fe fc2e 	bl	8008efc <_malloc_r>
 800a6a0:	4606      	mov	r6, r0
 800a6a2:	b360      	cbz	r0, 800a6fe <__ssputs_r+0xa2>
 800a6a4:	464a      	mov	r2, r9
 800a6a6:	6921      	ldr	r1, [r4, #16]
 800a6a8:	f7fd fd51 	bl	800814e <memcpy>
 800a6ac:	89a3      	ldrh	r3, [r4, #12]
 800a6ae:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a6b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a6b6:	81a3      	strh	r3, [r4, #12]
 800a6b8:	6126      	str	r6, [r4, #16]
 800a6ba:	444e      	add	r6, r9
 800a6bc:	6026      	str	r6, [r4, #0]
 800a6be:	463e      	mov	r6, r7
 800a6c0:	6165      	str	r5, [r4, #20]
 800a6c2:	eba5 0509 	sub.w	r5, r5, r9
 800a6c6:	60a5      	str	r5, [r4, #8]
 800a6c8:	42be      	cmp	r6, r7
 800a6ca:	d900      	bls.n	800a6ce <__ssputs_r+0x72>
 800a6cc:	463e      	mov	r6, r7
 800a6ce:	4632      	mov	r2, r6
 800a6d0:	4641      	mov	r1, r8
 800a6d2:	6820      	ldr	r0, [r4, #0]
 800a6d4:	f7fd fc93 	bl	8007ffe <memmove>
 800a6d8:	2000      	movs	r0, #0
 800a6da:	68a3      	ldr	r3, [r4, #8]
 800a6dc:	1b9b      	subs	r3, r3, r6
 800a6de:	60a3      	str	r3, [r4, #8]
 800a6e0:	6823      	ldr	r3, [r4, #0]
 800a6e2:	4433      	add	r3, r6
 800a6e4:	6023      	str	r3, [r4, #0]
 800a6e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a6ea:	462a      	mov	r2, r5
 800a6ec:	f000 ff2f 	bl	800b54e <_realloc_r>
 800a6f0:	4606      	mov	r6, r0
 800a6f2:	2800      	cmp	r0, #0
 800a6f4:	d1e0      	bne.n	800a6b8 <__ssputs_r+0x5c>
 800a6f6:	4650      	mov	r0, sl
 800a6f8:	6921      	ldr	r1, [r4, #16]
 800a6fa:	f7fe fb8d 	bl	8008e18 <_free_r>
 800a6fe:	230c      	movs	r3, #12
 800a700:	f8ca 3000 	str.w	r3, [sl]
 800a704:	89a3      	ldrh	r3, [r4, #12]
 800a706:	f04f 30ff 	mov.w	r0, #4294967295
 800a70a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a70e:	81a3      	strh	r3, [r4, #12]
 800a710:	e7e9      	b.n	800a6e6 <__ssputs_r+0x8a>
	...

0800a714 <_svfiprintf_r>:
 800a714:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a718:	4698      	mov	r8, r3
 800a71a:	898b      	ldrh	r3, [r1, #12]
 800a71c:	4607      	mov	r7, r0
 800a71e:	061b      	lsls	r3, r3, #24
 800a720:	460d      	mov	r5, r1
 800a722:	4614      	mov	r4, r2
 800a724:	b09d      	sub	sp, #116	@ 0x74
 800a726:	d510      	bpl.n	800a74a <_svfiprintf_r+0x36>
 800a728:	690b      	ldr	r3, [r1, #16]
 800a72a:	b973      	cbnz	r3, 800a74a <_svfiprintf_r+0x36>
 800a72c:	2140      	movs	r1, #64	@ 0x40
 800a72e:	f7fe fbe5 	bl	8008efc <_malloc_r>
 800a732:	6028      	str	r0, [r5, #0]
 800a734:	6128      	str	r0, [r5, #16]
 800a736:	b930      	cbnz	r0, 800a746 <_svfiprintf_r+0x32>
 800a738:	230c      	movs	r3, #12
 800a73a:	603b      	str	r3, [r7, #0]
 800a73c:	f04f 30ff 	mov.w	r0, #4294967295
 800a740:	b01d      	add	sp, #116	@ 0x74
 800a742:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a746:	2340      	movs	r3, #64	@ 0x40
 800a748:	616b      	str	r3, [r5, #20]
 800a74a:	2300      	movs	r3, #0
 800a74c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a74e:	2320      	movs	r3, #32
 800a750:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a754:	2330      	movs	r3, #48	@ 0x30
 800a756:	f04f 0901 	mov.w	r9, #1
 800a75a:	f8cd 800c 	str.w	r8, [sp, #12]
 800a75e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800a8f8 <_svfiprintf_r+0x1e4>
 800a762:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a766:	4623      	mov	r3, r4
 800a768:	469a      	mov	sl, r3
 800a76a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a76e:	b10a      	cbz	r2, 800a774 <_svfiprintf_r+0x60>
 800a770:	2a25      	cmp	r2, #37	@ 0x25
 800a772:	d1f9      	bne.n	800a768 <_svfiprintf_r+0x54>
 800a774:	ebba 0b04 	subs.w	fp, sl, r4
 800a778:	d00b      	beq.n	800a792 <_svfiprintf_r+0x7e>
 800a77a:	465b      	mov	r3, fp
 800a77c:	4622      	mov	r2, r4
 800a77e:	4629      	mov	r1, r5
 800a780:	4638      	mov	r0, r7
 800a782:	f7ff ff6b 	bl	800a65c <__ssputs_r>
 800a786:	3001      	adds	r0, #1
 800a788:	f000 80a7 	beq.w	800a8da <_svfiprintf_r+0x1c6>
 800a78c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a78e:	445a      	add	r2, fp
 800a790:	9209      	str	r2, [sp, #36]	@ 0x24
 800a792:	f89a 3000 	ldrb.w	r3, [sl]
 800a796:	2b00      	cmp	r3, #0
 800a798:	f000 809f 	beq.w	800a8da <_svfiprintf_r+0x1c6>
 800a79c:	2300      	movs	r3, #0
 800a79e:	f04f 32ff 	mov.w	r2, #4294967295
 800a7a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a7a6:	f10a 0a01 	add.w	sl, sl, #1
 800a7aa:	9304      	str	r3, [sp, #16]
 800a7ac:	9307      	str	r3, [sp, #28]
 800a7ae:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a7b2:	931a      	str	r3, [sp, #104]	@ 0x68
 800a7b4:	4654      	mov	r4, sl
 800a7b6:	2205      	movs	r2, #5
 800a7b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a7bc:	484e      	ldr	r0, [pc, #312]	@ (800a8f8 <_svfiprintf_r+0x1e4>)
 800a7be:	f7fd fcb8 	bl	8008132 <memchr>
 800a7c2:	9a04      	ldr	r2, [sp, #16]
 800a7c4:	b9d8      	cbnz	r0, 800a7fe <_svfiprintf_r+0xea>
 800a7c6:	06d0      	lsls	r0, r2, #27
 800a7c8:	bf44      	itt	mi
 800a7ca:	2320      	movmi	r3, #32
 800a7cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a7d0:	0711      	lsls	r1, r2, #28
 800a7d2:	bf44      	itt	mi
 800a7d4:	232b      	movmi	r3, #43	@ 0x2b
 800a7d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a7da:	f89a 3000 	ldrb.w	r3, [sl]
 800a7de:	2b2a      	cmp	r3, #42	@ 0x2a
 800a7e0:	d015      	beq.n	800a80e <_svfiprintf_r+0xfa>
 800a7e2:	4654      	mov	r4, sl
 800a7e4:	2000      	movs	r0, #0
 800a7e6:	f04f 0c0a 	mov.w	ip, #10
 800a7ea:	9a07      	ldr	r2, [sp, #28]
 800a7ec:	4621      	mov	r1, r4
 800a7ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a7f2:	3b30      	subs	r3, #48	@ 0x30
 800a7f4:	2b09      	cmp	r3, #9
 800a7f6:	d94b      	bls.n	800a890 <_svfiprintf_r+0x17c>
 800a7f8:	b1b0      	cbz	r0, 800a828 <_svfiprintf_r+0x114>
 800a7fa:	9207      	str	r2, [sp, #28]
 800a7fc:	e014      	b.n	800a828 <_svfiprintf_r+0x114>
 800a7fe:	eba0 0308 	sub.w	r3, r0, r8
 800a802:	fa09 f303 	lsl.w	r3, r9, r3
 800a806:	4313      	orrs	r3, r2
 800a808:	46a2      	mov	sl, r4
 800a80a:	9304      	str	r3, [sp, #16]
 800a80c:	e7d2      	b.n	800a7b4 <_svfiprintf_r+0xa0>
 800a80e:	9b03      	ldr	r3, [sp, #12]
 800a810:	1d19      	adds	r1, r3, #4
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	9103      	str	r1, [sp, #12]
 800a816:	2b00      	cmp	r3, #0
 800a818:	bfbb      	ittet	lt
 800a81a:	425b      	neglt	r3, r3
 800a81c:	f042 0202 	orrlt.w	r2, r2, #2
 800a820:	9307      	strge	r3, [sp, #28]
 800a822:	9307      	strlt	r3, [sp, #28]
 800a824:	bfb8      	it	lt
 800a826:	9204      	strlt	r2, [sp, #16]
 800a828:	7823      	ldrb	r3, [r4, #0]
 800a82a:	2b2e      	cmp	r3, #46	@ 0x2e
 800a82c:	d10a      	bne.n	800a844 <_svfiprintf_r+0x130>
 800a82e:	7863      	ldrb	r3, [r4, #1]
 800a830:	2b2a      	cmp	r3, #42	@ 0x2a
 800a832:	d132      	bne.n	800a89a <_svfiprintf_r+0x186>
 800a834:	9b03      	ldr	r3, [sp, #12]
 800a836:	3402      	adds	r4, #2
 800a838:	1d1a      	adds	r2, r3, #4
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	9203      	str	r2, [sp, #12]
 800a83e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a842:	9305      	str	r3, [sp, #20]
 800a844:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800a8fc <_svfiprintf_r+0x1e8>
 800a848:	2203      	movs	r2, #3
 800a84a:	4650      	mov	r0, sl
 800a84c:	7821      	ldrb	r1, [r4, #0]
 800a84e:	f7fd fc70 	bl	8008132 <memchr>
 800a852:	b138      	cbz	r0, 800a864 <_svfiprintf_r+0x150>
 800a854:	2240      	movs	r2, #64	@ 0x40
 800a856:	9b04      	ldr	r3, [sp, #16]
 800a858:	eba0 000a 	sub.w	r0, r0, sl
 800a85c:	4082      	lsls	r2, r0
 800a85e:	4313      	orrs	r3, r2
 800a860:	3401      	adds	r4, #1
 800a862:	9304      	str	r3, [sp, #16]
 800a864:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a868:	2206      	movs	r2, #6
 800a86a:	4825      	ldr	r0, [pc, #148]	@ (800a900 <_svfiprintf_r+0x1ec>)
 800a86c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a870:	f7fd fc5f 	bl	8008132 <memchr>
 800a874:	2800      	cmp	r0, #0
 800a876:	d036      	beq.n	800a8e6 <_svfiprintf_r+0x1d2>
 800a878:	4b22      	ldr	r3, [pc, #136]	@ (800a904 <_svfiprintf_r+0x1f0>)
 800a87a:	bb1b      	cbnz	r3, 800a8c4 <_svfiprintf_r+0x1b0>
 800a87c:	9b03      	ldr	r3, [sp, #12]
 800a87e:	3307      	adds	r3, #7
 800a880:	f023 0307 	bic.w	r3, r3, #7
 800a884:	3308      	adds	r3, #8
 800a886:	9303      	str	r3, [sp, #12]
 800a888:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a88a:	4433      	add	r3, r6
 800a88c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a88e:	e76a      	b.n	800a766 <_svfiprintf_r+0x52>
 800a890:	460c      	mov	r4, r1
 800a892:	2001      	movs	r0, #1
 800a894:	fb0c 3202 	mla	r2, ip, r2, r3
 800a898:	e7a8      	b.n	800a7ec <_svfiprintf_r+0xd8>
 800a89a:	2300      	movs	r3, #0
 800a89c:	f04f 0c0a 	mov.w	ip, #10
 800a8a0:	4619      	mov	r1, r3
 800a8a2:	3401      	adds	r4, #1
 800a8a4:	9305      	str	r3, [sp, #20]
 800a8a6:	4620      	mov	r0, r4
 800a8a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a8ac:	3a30      	subs	r2, #48	@ 0x30
 800a8ae:	2a09      	cmp	r2, #9
 800a8b0:	d903      	bls.n	800a8ba <_svfiprintf_r+0x1a6>
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d0c6      	beq.n	800a844 <_svfiprintf_r+0x130>
 800a8b6:	9105      	str	r1, [sp, #20]
 800a8b8:	e7c4      	b.n	800a844 <_svfiprintf_r+0x130>
 800a8ba:	4604      	mov	r4, r0
 800a8bc:	2301      	movs	r3, #1
 800a8be:	fb0c 2101 	mla	r1, ip, r1, r2
 800a8c2:	e7f0      	b.n	800a8a6 <_svfiprintf_r+0x192>
 800a8c4:	ab03      	add	r3, sp, #12
 800a8c6:	9300      	str	r3, [sp, #0]
 800a8c8:	462a      	mov	r2, r5
 800a8ca:	4638      	mov	r0, r7
 800a8cc:	4b0e      	ldr	r3, [pc, #56]	@ (800a908 <_svfiprintf_r+0x1f4>)
 800a8ce:	a904      	add	r1, sp, #16
 800a8d0:	f7fc fc90 	bl	80071f4 <_printf_float>
 800a8d4:	1c42      	adds	r2, r0, #1
 800a8d6:	4606      	mov	r6, r0
 800a8d8:	d1d6      	bne.n	800a888 <_svfiprintf_r+0x174>
 800a8da:	89ab      	ldrh	r3, [r5, #12]
 800a8dc:	065b      	lsls	r3, r3, #25
 800a8de:	f53f af2d 	bmi.w	800a73c <_svfiprintf_r+0x28>
 800a8e2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a8e4:	e72c      	b.n	800a740 <_svfiprintf_r+0x2c>
 800a8e6:	ab03      	add	r3, sp, #12
 800a8e8:	9300      	str	r3, [sp, #0]
 800a8ea:	462a      	mov	r2, r5
 800a8ec:	4638      	mov	r0, r7
 800a8ee:	4b06      	ldr	r3, [pc, #24]	@ (800a908 <_svfiprintf_r+0x1f4>)
 800a8f0:	a904      	add	r1, sp, #16
 800a8f2:	f7fc ff1d 	bl	8007730 <_printf_i>
 800a8f6:	e7ed      	b.n	800a8d4 <_svfiprintf_r+0x1c0>
 800a8f8:	0800c329 	.word	0x0800c329
 800a8fc:	0800c32f 	.word	0x0800c32f
 800a900:	0800c333 	.word	0x0800c333
 800a904:	080071f5 	.word	0x080071f5
 800a908:	0800a65d 	.word	0x0800a65d

0800a90c <__sfputc_r>:
 800a90c:	6893      	ldr	r3, [r2, #8]
 800a90e:	b410      	push	{r4}
 800a910:	3b01      	subs	r3, #1
 800a912:	2b00      	cmp	r3, #0
 800a914:	6093      	str	r3, [r2, #8]
 800a916:	da07      	bge.n	800a928 <__sfputc_r+0x1c>
 800a918:	6994      	ldr	r4, [r2, #24]
 800a91a:	42a3      	cmp	r3, r4
 800a91c:	db01      	blt.n	800a922 <__sfputc_r+0x16>
 800a91e:	290a      	cmp	r1, #10
 800a920:	d102      	bne.n	800a928 <__sfputc_r+0x1c>
 800a922:	bc10      	pop	{r4}
 800a924:	f000 b9da 	b.w	800acdc <__swbuf_r>
 800a928:	6813      	ldr	r3, [r2, #0]
 800a92a:	1c58      	adds	r0, r3, #1
 800a92c:	6010      	str	r0, [r2, #0]
 800a92e:	7019      	strb	r1, [r3, #0]
 800a930:	4608      	mov	r0, r1
 800a932:	bc10      	pop	{r4}
 800a934:	4770      	bx	lr

0800a936 <__sfputs_r>:
 800a936:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a938:	4606      	mov	r6, r0
 800a93a:	460f      	mov	r7, r1
 800a93c:	4614      	mov	r4, r2
 800a93e:	18d5      	adds	r5, r2, r3
 800a940:	42ac      	cmp	r4, r5
 800a942:	d101      	bne.n	800a948 <__sfputs_r+0x12>
 800a944:	2000      	movs	r0, #0
 800a946:	e007      	b.n	800a958 <__sfputs_r+0x22>
 800a948:	463a      	mov	r2, r7
 800a94a:	4630      	mov	r0, r6
 800a94c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a950:	f7ff ffdc 	bl	800a90c <__sfputc_r>
 800a954:	1c43      	adds	r3, r0, #1
 800a956:	d1f3      	bne.n	800a940 <__sfputs_r+0xa>
 800a958:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a95c <_vfiprintf_r>:
 800a95c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a960:	460d      	mov	r5, r1
 800a962:	4614      	mov	r4, r2
 800a964:	4698      	mov	r8, r3
 800a966:	4606      	mov	r6, r0
 800a968:	b09d      	sub	sp, #116	@ 0x74
 800a96a:	b118      	cbz	r0, 800a974 <_vfiprintf_r+0x18>
 800a96c:	6a03      	ldr	r3, [r0, #32]
 800a96e:	b90b      	cbnz	r3, 800a974 <_vfiprintf_r+0x18>
 800a970:	f7fd fa9a 	bl	8007ea8 <__sinit>
 800a974:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a976:	07d9      	lsls	r1, r3, #31
 800a978:	d405      	bmi.n	800a986 <_vfiprintf_r+0x2a>
 800a97a:	89ab      	ldrh	r3, [r5, #12]
 800a97c:	059a      	lsls	r2, r3, #22
 800a97e:	d402      	bmi.n	800a986 <_vfiprintf_r+0x2a>
 800a980:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a982:	f7fd fbd4 	bl	800812e <__retarget_lock_acquire_recursive>
 800a986:	89ab      	ldrh	r3, [r5, #12]
 800a988:	071b      	lsls	r3, r3, #28
 800a98a:	d501      	bpl.n	800a990 <_vfiprintf_r+0x34>
 800a98c:	692b      	ldr	r3, [r5, #16]
 800a98e:	b99b      	cbnz	r3, 800a9b8 <_vfiprintf_r+0x5c>
 800a990:	4629      	mov	r1, r5
 800a992:	4630      	mov	r0, r6
 800a994:	f000 f9e0 	bl	800ad58 <__swsetup_r>
 800a998:	b170      	cbz	r0, 800a9b8 <_vfiprintf_r+0x5c>
 800a99a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a99c:	07dc      	lsls	r4, r3, #31
 800a99e:	d504      	bpl.n	800a9aa <_vfiprintf_r+0x4e>
 800a9a0:	f04f 30ff 	mov.w	r0, #4294967295
 800a9a4:	b01d      	add	sp, #116	@ 0x74
 800a9a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9aa:	89ab      	ldrh	r3, [r5, #12]
 800a9ac:	0598      	lsls	r0, r3, #22
 800a9ae:	d4f7      	bmi.n	800a9a0 <_vfiprintf_r+0x44>
 800a9b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a9b2:	f7fd fbbd 	bl	8008130 <__retarget_lock_release_recursive>
 800a9b6:	e7f3      	b.n	800a9a0 <_vfiprintf_r+0x44>
 800a9b8:	2300      	movs	r3, #0
 800a9ba:	9309      	str	r3, [sp, #36]	@ 0x24
 800a9bc:	2320      	movs	r3, #32
 800a9be:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a9c2:	2330      	movs	r3, #48	@ 0x30
 800a9c4:	f04f 0901 	mov.w	r9, #1
 800a9c8:	f8cd 800c 	str.w	r8, [sp, #12]
 800a9cc:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800ab78 <_vfiprintf_r+0x21c>
 800a9d0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a9d4:	4623      	mov	r3, r4
 800a9d6:	469a      	mov	sl, r3
 800a9d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a9dc:	b10a      	cbz	r2, 800a9e2 <_vfiprintf_r+0x86>
 800a9de:	2a25      	cmp	r2, #37	@ 0x25
 800a9e0:	d1f9      	bne.n	800a9d6 <_vfiprintf_r+0x7a>
 800a9e2:	ebba 0b04 	subs.w	fp, sl, r4
 800a9e6:	d00b      	beq.n	800aa00 <_vfiprintf_r+0xa4>
 800a9e8:	465b      	mov	r3, fp
 800a9ea:	4622      	mov	r2, r4
 800a9ec:	4629      	mov	r1, r5
 800a9ee:	4630      	mov	r0, r6
 800a9f0:	f7ff ffa1 	bl	800a936 <__sfputs_r>
 800a9f4:	3001      	adds	r0, #1
 800a9f6:	f000 80a7 	beq.w	800ab48 <_vfiprintf_r+0x1ec>
 800a9fa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a9fc:	445a      	add	r2, fp
 800a9fe:	9209      	str	r2, [sp, #36]	@ 0x24
 800aa00:	f89a 3000 	ldrb.w	r3, [sl]
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	f000 809f 	beq.w	800ab48 <_vfiprintf_r+0x1ec>
 800aa0a:	2300      	movs	r3, #0
 800aa0c:	f04f 32ff 	mov.w	r2, #4294967295
 800aa10:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aa14:	f10a 0a01 	add.w	sl, sl, #1
 800aa18:	9304      	str	r3, [sp, #16]
 800aa1a:	9307      	str	r3, [sp, #28]
 800aa1c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800aa20:	931a      	str	r3, [sp, #104]	@ 0x68
 800aa22:	4654      	mov	r4, sl
 800aa24:	2205      	movs	r2, #5
 800aa26:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa2a:	4853      	ldr	r0, [pc, #332]	@ (800ab78 <_vfiprintf_r+0x21c>)
 800aa2c:	f7fd fb81 	bl	8008132 <memchr>
 800aa30:	9a04      	ldr	r2, [sp, #16]
 800aa32:	b9d8      	cbnz	r0, 800aa6c <_vfiprintf_r+0x110>
 800aa34:	06d1      	lsls	r1, r2, #27
 800aa36:	bf44      	itt	mi
 800aa38:	2320      	movmi	r3, #32
 800aa3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800aa3e:	0713      	lsls	r3, r2, #28
 800aa40:	bf44      	itt	mi
 800aa42:	232b      	movmi	r3, #43	@ 0x2b
 800aa44:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800aa48:	f89a 3000 	ldrb.w	r3, [sl]
 800aa4c:	2b2a      	cmp	r3, #42	@ 0x2a
 800aa4e:	d015      	beq.n	800aa7c <_vfiprintf_r+0x120>
 800aa50:	4654      	mov	r4, sl
 800aa52:	2000      	movs	r0, #0
 800aa54:	f04f 0c0a 	mov.w	ip, #10
 800aa58:	9a07      	ldr	r2, [sp, #28]
 800aa5a:	4621      	mov	r1, r4
 800aa5c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aa60:	3b30      	subs	r3, #48	@ 0x30
 800aa62:	2b09      	cmp	r3, #9
 800aa64:	d94b      	bls.n	800aafe <_vfiprintf_r+0x1a2>
 800aa66:	b1b0      	cbz	r0, 800aa96 <_vfiprintf_r+0x13a>
 800aa68:	9207      	str	r2, [sp, #28]
 800aa6a:	e014      	b.n	800aa96 <_vfiprintf_r+0x13a>
 800aa6c:	eba0 0308 	sub.w	r3, r0, r8
 800aa70:	fa09 f303 	lsl.w	r3, r9, r3
 800aa74:	4313      	orrs	r3, r2
 800aa76:	46a2      	mov	sl, r4
 800aa78:	9304      	str	r3, [sp, #16]
 800aa7a:	e7d2      	b.n	800aa22 <_vfiprintf_r+0xc6>
 800aa7c:	9b03      	ldr	r3, [sp, #12]
 800aa7e:	1d19      	adds	r1, r3, #4
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	9103      	str	r1, [sp, #12]
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	bfbb      	ittet	lt
 800aa88:	425b      	neglt	r3, r3
 800aa8a:	f042 0202 	orrlt.w	r2, r2, #2
 800aa8e:	9307      	strge	r3, [sp, #28]
 800aa90:	9307      	strlt	r3, [sp, #28]
 800aa92:	bfb8      	it	lt
 800aa94:	9204      	strlt	r2, [sp, #16]
 800aa96:	7823      	ldrb	r3, [r4, #0]
 800aa98:	2b2e      	cmp	r3, #46	@ 0x2e
 800aa9a:	d10a      	bne.n	800aab2 <_vfiprintf_r+0x156>
 800aa9c:	7863      	ldrb	r3, [r4, #1]
 800aa9e:	2b2a      	cmp	r3, #42	@ 0x2a
 800aaa0:	d132      	bne.n	800ab08 <_vfiprintf_r+0x1ac>
 800aaa2:	9b03      	ldr	r3, [sp, #12]
 800aaa4:	3402      	adds	r4, #2
 800aaa6:	1d1a      	adds	r2, r3, #4
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	9203      	str	r2, [sp, #12]
 800aaac:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800aab0:	9305      	str	r3, [sp, #20]
 800aab2:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800ab7c <_vfiprintf_r+0x220>
 800aab6:	2203      	movs	r2, #3
 800aab8:	4650      	mov	r0, sl
 800aaba:	7821      	ldrb	r1, [r4, #0]
 800aabc:	f7fd fb39 	bl	8008132 <memchr>
 800aac0:	b138      	cbz	r0, 800aad2 <_vfiprintf_r+0x176>
 800aac2:	2240      	movs	r2, #64	@ 0x40
 800aac4:	9b04      	ldr	r3, [sp, #16]
 800aac6:	eba0 000a 	sub.w	r0, r0, sl
 800aaca:	4082      	lsls	r2, r0
 800aacc:	4313      	orrs	r3, r2
 800aace:	3401      	adds	r4, #1
 800aad0:	9304      	str	r3, [sp, #16]
 800aad2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aad6:	2206      	movs	r2, #6
 800aad8:	4829      	ldr	r0, [pc, #164]	@ (800ab80 <_vfiprintf_r+0x224>)
 800aada:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800aade:	f7fd fb28 	bl	8008132 <memchr>
 800aae2:	2800      	cmp	r0, #0
 800aae4:	d03f      	beq.n	800ab66 <_vfiprintf_r+0x20a>
 800aae6:	4b27      	ldr	r3, [pc, #156]	@ (800ab84 <_vfiprintf_r+0x228>)
 800aae8:	bb1b      	cbnz	r3, 800ab32 <_vfiprintf_r+0x1d6>
 800aaea:	9b03      	ldr	r3, [sp, #12]
 800aaec:	3307      	adds	r3, #7
 800aaee:	f023 0307 	bic.w	r3, r3, #7
 800aaf2:	3308      	adds	r3, #8
 800aaf4:	9303      	str	r3, [sp, #12]
 800aaf6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aaf8:	443b      	add	r3, r7
 800aafa:	9309      	str	r3, [sp, #36]	@ 0x24
 800aafc:	e76a      	b.n	800a9d4 <_vfiprintf_r+0x78>
 800aafe:	460c      	mov	r4, r1
 800ab00:	2001      	movs	r0, #1
 800ab02:	fb0c 3202 	mla	r2, ip, r2, r3
 800ab06:	e7a8      	b.n	800aa5a <_vfiprintf_r+0xfe>
 800ab08:	2300      	movs	r3, #0
 800ab0a:	f04f 0c0a 	mov.w	ip, #10
 800ab0e:	4619      	mov	r1, r3
 800ab10:	3401      	adds	r4, #1
 800ab12:	9305      	str	r3, [sp, #20]
 800ab14:	4620      	mov	r0, r4
 800ab16:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ab1a:	3a30      	subs	r2, #48	@ 0x30
 800ab1c:	2a09      	cmp	r2, #9
 800ab1e:	d903      	bls.n	800ab28 <_vfiprintf_r+0x1cc>
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d0c6      	beq.n	800aab2 <_vfiprintf_r+0x156>
 800ab24:	9105      	str	r1, [sp, #20]
 800ab26:	e7c4      	b.n	800aab2 <_vfiprintf_r+0x156>
 800ab28:	4604      	mov	r4, r0
 800ab2a:	2301      	movs	r3, #1
 800ab2c:	fb0c 2101 	mla	r1, ip, r1, r2
 800ab30:	e7f0      	b.n	800ab14 <_vfiprintf_r+0x1b8>
 800ab32:	ab03      	add	r3, sp, #12
 800ab34:	9300      	str	r3, [sp, #0]
 800ab36:	462a      	mov	r2, r5
 800ab38:	4630      	mov	r0, r6
 800ab3a:	4b13      	ldr	r3, [pc, #76]	@ (800ab88 <_vfiprintf_r+0x22c>)
 800ab3c:	a904      	add	r1, sp, #16
 800ab3e:	f7fc fb59 	bl	80071f4 <_printf_float>
 800ab42:	4607      	mov	r7, r0
 800ab44:	1c78      	adds	r0, r7, #1
 800ab46:	d1d6      	bne.n	800aaf6 <_vfiprintf_r+0x19a>
 800ab48:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ab4a:	07d9      	lsls	r1, r3, #31
 800ab4c:	d405      	bmi.n	800ab5a <_vfiprintf_r+0x1fe>
 800ab4e:	89ab      	ldrh	r3, [r5, #12]
 800ab50:	059a      	lsls	r2, r3, #22
 800ab52:	d402      	bmi.n	800ab5a <_vfiprintf_r+0x1fe>
 800ab54:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ab56:	f7fd faeb 	bl	8008130 <__retarget_lock_release_recursive>
 800ab5a:	89ab      	ldrh	r3, [r5, #12]
 800ab5c:	065b      	lsls	r3, r3, #25
 800ab5e:	f53f af1f 	bmi.w	800a9a0 <_vfiprintf_r+0x44>
 800ab62:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ab64:	e71e      	b.n	800a9a4 <_vfiprintf_r+0x48>
 800ab66:	ab03      	add	r3, sp, #12
 800ab68:	9300      	str	r3, [sp, #0]
 800ab6a:	462a      	mov	r2, r5
 800ab6c:	4630      	mov	r0, r6
 800ab6e:	4b06      	ldr	r3, [pc, #24]	@ (800ab88 <_vfiprintf_r+0x22c>)
 800ab70:	a904      	add	r1, sp, #16
 800ab72:	f7fc fddd 	bl	8007730 <_printf_i>
 800ab76:	e7e4      	b.n	800ab42 <_vfiprintf_r+0x1e6>
 800ab78:	0800c329 	.word	0x0800c329
 800ab7c:	0800c32f 	.word	0x0800c32f
 800ab80:	0800c333 	.word	0x0800c333
 800ab84:	080071f5 	.word	0x080071f5
 800ab88:	0800a937 	.word	0x0800a937

0800ab8c <__sflush_r>:
 800ab8c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ab90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab92:	0716      	lsls	r6, r2, #28
 800ab94:	4605      	mov	r5, r0
 800ab96:	460c      	mov	r4, r1
 800ab98:	d454      	bmi.n	800ac44 <__sflush_r+0xb8>
 800ab9a:	684b      	ldr	r3, [r1, #4]
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	dc02      	bgt.n	800aba6 <__sflush_r+0x1a>
 800aba0:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	dd48      	ble.n	800ac38 <__sflush_r+0xac>
 800aba6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800aba8:	2e00      	cmp	r6, #0
 800abaa:	d045      	beq.n	800ac38 <__sflush_r+0xac>
 800abac:	2300      	movs	r3, #0
 800abae:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800abb2:	682f      	ldr	r7, [r5, #0]
 800abb4:	6a21      	ldr	r1, [r4, #32]
 800abb6:	602b      	str	r3, [r5, #0]
 800abb8:	d030      	beq.n	800ac1c <__sflush_r+0x90>
 800abba:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800abbc:	89a3      	ldrh	r3, [r4, #12]
 800abbe:	0759      	lsls	r1, r3, #29
 800abc0:	d505      	bpl.n	800abce <__sflush_r+0x42>
 800abc2:	6863      	ldr	r3, [r4, #4]
 800abc4:	1ad2      	subs	r2, r2, r3
 800abc6:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800abc8:	b10b      	cbz	r3, 800abce <__sflush_r+0x42>
 800abca:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800abcc:	1ad2      	subs	r2, r2, r3
 800abce:	2300      	movs	r3, #0
 800abd0:	4628      	mov	r0, r5
 800abd2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800abd4:	6a21      	ldr	r1, [r4, #32]
 800abd6:	47b0      	blx	r6
 800abd8:	1c43      	adds	r3, r0, #1
 800abda:	89a3      	ldrh	r3, [r4, #12]
 800abdc:	d106      	bne.n	800abec <__sflush_r+0x60>
 800abde:	6829      	ldr	r1, [r5, #0]
 800abe0:	291d      	cmp	r1, #29
 800abe2:	d82b      	bhi.n	800ac3c <__sflush_r+0xb0>
 800abe4:	4a28      	ldr	r2, [pc, #160]	@ (800ac88 <__sflush_r+0xfc>)
 800abe6:	410a      	asrs	r2, r1
 800abe8:	07d6      	lsls	r6, r2, #31
 800abea:	d427      	bmi.n	800ac3c <__sflush_r+0xb0>
 800abec:	2200      	movs	r2, #0
 800abee:	6062      	str	r2, [r4, #4]
 800abf0:	6922      	ldr	r2, [r4, #16]
 800abf2:	04d9      	lsls	r1, r3, #19
 800abf4:	6022      	str	r2, [r4, #0]
 800abf6:	d504      	bpl.n	800ac02 <__sflush_r+0x76>
 800abf8:	1c42      	adds	r2, r0, #1
 800abfa:	d101      	bne.n	800ac00 <__sflush_r+0x74>
 800abfc:	682b      	ldr	r3, [r5, #0]
 800abfe:	b903      	cbnz	r3, 800ac02 <__sflush_r+0x76>
 800ac00:	6560      	str	r0, [r4, #84]	@ 0x54
 800ac02:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ac04:	602f      	str	r7, [r5, #0]
 800ac06:	b1b9      	cbz	r1, 800ac38 <__sflush_r+0xac>
 800ac08:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ac0c:	4299      	cmp	r1, r3
 800ac0e:	d002      	beq.n	800ac16 <__sflush_r+0x8a>
 800ac10:	4628      	mov	r0, r5
 800ac12:	f7fe f901 	bl	8008e18 <_free_r>
 800ac16:	2300      	movs	r3, #0
 800ac18:	6363      	str	r3, [r4, #52]	@ 0x34
 800ac1a:	e00d      	b.n	800ac38 <__sflush_r+0xac>
 800ac1c:	2301      	movs	r3, #1
 800ac1e:	4628      	mov	r0, r5
 800ac20:	47b0      	blx	r6
 800ac22:	4602      	mov	r2, r0
 800ac24:	1c50      	adds	r0, r2, #1
 800ac26:	d1c9      	bne.n	800abbc <__sflush_r+0x30>
 800ac28:	682b      	ldr	r3, [r5, #0]
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d0c6      	beq.n	800abbc <__sflush_r+0x30>
 800ac2e:	2b1d      	cmp	r3, #29
 800ac30:	d001      	beq.n	800ac36 <__sflush_r+0xaa>
 800ac32:	2b16      	cmp	r3, #22
 800ac34:	d11d      	bne.n	800ac72 <__sflush_r+0xe6>
 800ac36:	602f      	str	r7, [r5, #0]
 800ac38:	2000      	movs	r0, #0
 800ac3a:	e021      	b.n	800ac80 <__sflush_r+0xf4>
 800ac3c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ac40:	b21b      	sxth	r3, r3
 800ac42:	e01a      	b.n	800ac7a <__sflush_r+0xee>
 800ac44:	690f      	ldr	r7, [r1, #16]
 800ac46:	2f00      	cmp	r7, #0
 800ac48:	d0f6      	beq.n	800ac38 <__sflush_r+0xac>
 800ac4a:	0793      	lsls	r3, r2, #30
 800ac4c:	bf18      	it	ne
 800ac4e:	2300      	movne	r3, #0
 800ac50:	680e      	ldr	r6, [r1, #0]
 800ac52:	bf08      	it	eq
 800ac54:	694b      	ldreq	r3, [r1, #20]
 800ac56:	1bf6      	subs	r6, r6, r7
 800ac58:	600f      	str	r7, [r1, #0]
 800ac5a:	608b      	str	r3, [r1, #8]
 800ac5c:	2e00      	cmp	r6, #0
 800ac5e:	ddeb      	ble.n	800ac38 <__sflush_r+0xac>
 800ac60:	4633      	mov	r3, r6
 800ac62:	463a      	mov	r2, r7
 800ac64:	4628      	mov	r0, r5
 800ac66:	6a21      	ldr	r1, [r4, #32]
 800ac68:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800ac6c:	47e0      	blx	ip
 800ac6e:	2800      	cmp	r0, #0
 800ac70:	dc07      	bgt.n	800ac82 <__sflush_r+0xf6>
 800ac72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ac76:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ac7a:	f04f 30ff 	mov.w	r0, #4294967295
 800ac7e:	81a3      	strh	r3, [r4, #12]
 800ac80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ac82:	4407      	add	r7, r0
 800ac84:	1a36      	subs	r6, r6, r0
 800ac86:	e7e9      	b.n	800ac5c <__sflush_r+0xd0>
 800ac88:	dfbffffe 	.word	0xdfbffffe

0800ac8c <_fflush_r>:
 800ac8c:	b538      	push	{r3, r4, r5, lr}
 800ac8e:	690b      	ldr	r3, [r1, #16]
 800ac90:	4605      	mov	r5, r0
 800ac92:	460c      	mov	r4, r1
 800ac94:	b913      	cbnz	r3, 800ac9c <_fflush_r+0x10>
 800ac96:	2500      	movs	r5, #0
 800ac98:	4628      	mov	r0, r5
 800ac9a:	bd38      	pop	{r3, r4, r5, pc}
 800ac9c:	b118      	cbz	r0, 800aca6 <_fflush_r+0x1a>
 800ac9e:	6a03      	ldr	r3, [r0, #32]
 800aca0:	b90b      	cbnz	r3, 800aca6 <_fflush_r+0x1a>
 800aca2:	f7fd f901 	bl	8007ea8 <__sinit>
 800aca6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d0f3      	beq.n	800ac96 <_fflush_r+0xa>
 800acae:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800acb0:	07d0      	lsls	r0, r2, #31
 800acb2:	d404      	bmi.n	800acbe <_fflush_r+0x32>
 800acb4:	0599      	lsls	r1, r3, #22
 800acb6:	d402      	bmi.n	800acbe <_fflush_r+0x32>
 800acb8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800acba:	f7fd fa38 	bl	800812e <__retarget_lock_acquire_recursive>
 800acbe:	4628      	mov	r0, r5
 800acc0:	4621      	mov	r1, r4
 800acc2:	f7ff ff63 	bl	800ab8c <__sflush_r>
 800acc6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800acc8:	4605      	mov	r5, r0
 800acca:	07da      	lsls	r2, r3, #31
 800accc:	d4e4      	bmi.n	800ac98 <_fflush_r+0xc>
 800acce:	89a3      	ldrh	r3, [r4, #12]
 800acd0:	059b      	lsls	r3, r3, #22
 800acd2:	d4e1      	bmi.n	800ac98 <_fflush_r+0xc>
 800acd4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800acd6:	f7fd fa2b 	bl	8008130 <__retarget_lock_release_recursive>
 800acda:	e7dd      	b.n	800ac98 <_fflush_r+0xc>

0800acdc <__swbuf_r>:
 800acdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acde:	460e      	mov	r6, r1
 800ace0:	4614      	mov	r4, r2
 800ace2:	4605      	mov	r5, r0
 800ace4:	b118      	cbz	r0, 800acee <__swbuf_r+0x12>
 800ace6:	6a03      	ldr	r3, [r0, #32]
 800ace8:	b90b      	cbnz	r3, 800acee <__swbuf_r+0x12>
 800acea:	f7fd f8dd 	bl	8007ea8 <__sinit>
 800acee:	69a3      	ldr	r3, [r4, #24]
 800acf0:	60a3      	str	r3, [r4, #8]
 800acf2:	89a3      	ldrh	r3, [r4, #12]
 800acf4:	071a      	lsls	r2, r3, #28
 800acf6:	d501      	bpl.n	800acfc <__swbuf_r+0x20>
 800acf8:	6923      	ldr	r3, [r4, #16]
 800acfa:	b943      	cbnz	r3, 800ad0e <__swbuf_r+0x32>
 800acfc:	4621      	mov	r1, r4
 800acfe:	4628      	mov	r0, r5
 800ad00:	f000 f82a 	bl	800ad58 <__swsetup_r>
 800ad04:	b118      	cbz	r0, 800ad0e <__swbuf_r+0x32>
 800ad06:	f04f 37ff 	mov.w	r7, #4294967295
 800ad0a:	4638      	mov	r0, r7
 800ad0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ad0e:	6823      	ldr	r3, [r4, #0]
 800ad10:	6922      	ldr	r2, [r4, #16]
 800ad12:	b2f6      	uxtb	r6, r6
 800ad14:	1a98      	subs	r0, r3, r2
 800ad16:	6963      	ldr	r3, [r4, #20]
 800ad18:	4637      	mov	r7, r6
 800ad1a:	4283      	cmp	r3, r0
 800ad1c:	dc05      	bgt.n	800ad2a <__swbuf_r+0x4e>
 800ad1e:	4621      	mov	r1, r4
 800ad20:	4628      	mov	r0, r5
 800ad22:	f7ff ffb3 	bl	800ac8c <_fflush_r>
 800ad26:	2800      	cmp	r0, #0
 800ad28:	d1ed      	bne.n	800ad06 <__swbuf_r+0x2a>
 800ad2a:	68a3      	ldr	r3, [r4, #8]
 800ad2c:	3b01      	subs	r3, #1
 800ad2e:	60a3      	str	r3, [r4, #8]
 800ad30:	6823      	ldr	r3, [r4, #0]
 800ad32:	1c5a      	adds	r2, r3, #1
 800ad34:	6022      	str	r2, [r4, #0]
 800ad36:	701e      	strb	r6, [r3, #0]
 800ad38:	6962      	ldr	r2, [r4, #20]
 800ad3a:	1c43      	adds	r3, r0, #1
 800ad3c:	429a      	cmp	r2, r3
 800ad3e:	d004      	beq.n	800ad4a <__swbuf_r+0x6e>
 800ad40:	89a3      	ldrh	r3, [r4, #12]
 800ad42:	07db      	lsls	r3, r3, #31
 800ad44:	d5e1      	bpl.n	800ad0a <__swbuf_r+0x2e>
 800ad46:	2e0a      	cmp	r6, #10
 800ad48:	d1df      	bne.n	800ad0a <__swbuf_r+0x2e>
 800ad4a:	4621      	mov	r1, r4
 800ad4c:	4628      	mov	r0, r5
 800ad4e:	f7ff ff9d 	bl	800ac8c <_fflush_r>
 800ad52:	2800      	cmp	r0, #0
 800ad54:	d0d9      	beq.n	800ad0a <__swbuf_r+0x2e>
 800ad56:	e7d6      	b.n	800ad06 <__swbuf_r+0x2a>

0800ad58 <__swsetup_r>:
 800ad58:	b538      	push	{r3, r4, r5, lr}
 800ad5a:	4b29      	ldr	r3, [pc, #164]	@ (800ae00 <__swsetup_r+0xa8>)
 800ad5c:	4605      	mov	r5, r0
 800ad5e:	6818      	ldr	r0, [r3, #0]
 800ad60:	460c      	mov	r4, r1
 800ad62:	b118      	cbz	r0, 800ad6c <__swsetup_r+0x14>
 800ad64:	6a03      	ldr	r3, [r0, #32]
 800ad66:	b90b      	cbnz	r3, 800ad6c <__swsetup_r+0x14>
 800ad68:	f7fd f89e 	bl	8007ea8 <__sinit>
 800ad6c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ad70:	0719      	lsls	r1, r3, #28
 800ad72:	d422      	bmi.n	800adba <__swsetup_r+0x62>
 800ad74:	06da      	lsls	r2, r3, #27
 800ad76:	d407      	bmi.n	800ad88 <__swsetup_r+0x30>
 800ad78:	2209      	movs	r2, #9
 800ad7a:	602a      	str	r2, [r5, #0]
 800ad7c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ad80:	f04f 30ff 	mov.w	r0, #4294967295
 800ad84:	81a3      	strh	r3, [r4, #12]
 800ad86:	e033      	b.n	800adf0 <__swsetup_r+0x98>
 800ad88:	0758      	lsls	r0, r3, #29
 800ad8a:	d512      	bpl.n	800adb2 <__swsetup_r+0x5a>
 800ad8c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ad8e:	b141      	cbz	r1, 800ada2 <__swsetup_r+0x4a>
 800ad90:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ad94:	4299      	cmp	r1, r3
 800ad96:	d002      	beq.n	800ad9e <__swsetup_r+0x46>
 800ad98:	4628      	mov	r0, r5
 800ad9a:	f7fe f83d 	bl	8008e18 <_free_r>
 800ad9e:	2300      	movs	r3, #0
 800ada0:	6363      	str	r3, [r4, #52]	@ 0x34
 800ada2:	89a3      	ldrh	r3, [r4, #12]
 800ada4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ada8:	81a3      	strh	r3, [r4, #12]
 800adaa:	2300      	movs	r3, #0
 800adac:	6063      	str	r3, [r4, #4]
 800adae:	6923      	ldr	r3, [r4, #16]
 800adb0:	6023      	str	r3, [r4, #0]
 800adb2:	89a3      	ldrh	r3, [r4, #12]
 800adb4:	f043 0308 	orr.w	r3, r3, #8
 800adb8:	81a3      	strh	r3, [r4, #12]
 800adba:	6923      	ldr	r3, [r4, #16]
 800adbc:	b94b      	cbnz	r3, 800add2 <__swsetup_r+0x7a>
 800adbe:	89a3      	ldrh	r3, [r4, #12]
 800adc0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800adc4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800adc8:	d003      	beq.n	800add2 <__swsetup_r+0x7a>
 800adca:	4621      	mov	r1, r4
 800adcc:	4628      	mov	r0, r5
 800adce:	f000 fc30 	bl	800b632 <__smakebuf_r>
 800add2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800add6:	f013 0201 	ands.w	r2, r3, #1
 800adda:	d00a      	beq.n	800adf2 <__swsetup_r+0x9a>
 800addc:	2200      	movs	r2, #0
 800adde:	60a2      	str	r2, [r4, #8]
 800ade0:	6962      	ldr	r2, [r4, #20]
 800ade2:	4252      	negs	r2, r2
 800ade4:	61a2      	str	r2, [r4, #24]
 800ade6:	6922      	ldr	r2, [r4, #16]
 800ade8:	b942      	cbnz	r2, 800adfc <__swsetup_r+0xa4>
 800adea:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800adee:	d1c5      	bne.n	800ad7c <__swsetup_r+0x24>
 800adf0:	bd38      	pop	{r3, r4, r5, pc}
 800adf2:	0799      	lsls	r1, r3, #30
 800adf4:	bf58      	it	pl
 800adf6:	6962      	ldrpl	r2, [r4, #20]
 800adf8:	60a2      	str	r2, [r4, #8]
 800adfa:	e7f4      	b.n	800ade6 <__swsetup_r+0x8e>
 800adfc:	2000      	movs	r0, #0
 800adfe:	e7f7      	b.n	800adf0 <__swsetup_r+0x98>
 800ae00:	20000030 	.word	0x20000030

0800ae04 <strncmp>:
 800ae04:	b510      	push	{r4, lr}
 800ae06:	b16a      	cbz	r2, 800ae24 <strncmp+0x20>
 800ae08:	3901      	subs	r1, #1
 800ae0a:	1884      	adds	r4, r0, r2
 800ae0c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ae10:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800ae14:	429a      	cmp	r2, r3
 800ae16:	d103      	bne.n	800ae20 <strncmp+0x1c>
 800ae18:	42a0      	cmp	r0, r4
 800ae1a:	d001      	beq.n	800ae20 <strncmp+0x1c>
 800ae1c:	2a00      	cmp	r2, #0
 800ae1e:	d1f5      	bne.n	800ae0c <strncmp+0x8>
 800ae20:	1ad0      	subs	r0, r2, r3
 800ae22:	bd10      	pop	{r4, pc}
 800ae24:	4610      	mov	r0, r2
 800ae26:	e7fc      	b.n	800ae22 <strncmp+0x1e>

0800ae28 <_sbrk_r>:
 800ae28:	b538      	push	{r3, r4, r5, lr}
 800ae2a:	2300      	movs	r3, #0
 800ae2c:	4d05      	ldr	r5, [pc, #20]	@ (800ae44 <_sbrk_r+0x1c>)
 800ae2e:	4604      	mov	r4, r0
 800ae30:	4608      	mov	r0, r1
 800ae32:	602b      	str	r3, [r5, #0]
 800ae34:	f7f6 fb64 	bl	8001500 <_sbrk>
 800ae38:	1c43      	adds	r3, r0, #1
 800ae3a:	d102      	bne.n	800ae42 <_sbrk_r+0x1a>
 800ae3c:	682b      	ldr	r3, [r5, #0]
 800ae3e:	b103      	cbz	r3, 800ae42 <_sbrk_r+0x1a>
 800ae40:	6023      	str	r3, [r4, #0]
 800ae42:	bd38      	pop	{r3, r4, r5, pc}
 800ae44:	200008e0 	.word	0x200008e0

0800ae48 <nan>:
 800ae48:	2000      	movs	r0, #0
 800ae4a:	4901      	ldr	r1, [pc, #4]	@ (800ae50 <nan+0x8>)
 800ae4c:	4770      	bx	lr
 800ae4e:	bf00      	nop
 800ae50:	7ff80000 	.word	0x7ff80000

0800ae54 <__assert_func>:
 800ae54:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ae56:	4614      	mov	r4, r2
 800ae58:	461a      	mov	r2, r3
 800ae5a:	4b09      	ldr	r3, [pc, #36]	@ (800ae80 <__assert_func+0x2c>)
 800ae5c:	4605      	mov	r5, r0
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	68d8      	ldr	r0, [r3, #12]
 800ae62:	b954      	cbnz	r4, 800ae7a <__assert_func+0x26>
 800ae64:	4b07      	ldr	r3, [pc, #28]	@ (800ae84 <__assert_func+0x30>)
 800ae66:	461c      	mov	r4, r3
 800ae68:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ae6c:	9100      	str	r1, [sp, #0]
 800ae6e:	462b      	mov	r3, r5
 800ae70:	4905      	ldr	r1, [pc, #20]	@ (800ae88 <__assert_func+0x34>)
 800ae72:	f000 fba7 	bl	800b5c4 <fiprintf>
 800ae76:	f000 fc3b 	bl	800b6f0 <abort>
 800ae7a:	4b04      	ldr	r3, [pc, #16]	@ (800ae8c <__assert_func+0x38>)
 800ae7c:	e7f4      	b.n	800ae68 <__assert_func+0x14>
 800ae7e:	bf00      	nop
 800ae80:	20000030 	.word	0x20000030
 800ae84:	0800c37d 	.word	0x0800c37d
 800ae88:	0800c34f 	.word	0x0800c34f
 800ae8c:	0800c342 	.word	0x0800c342

0800ae90 <_calloc_r>:
 800ae90:	b570      	push	{r4, r5, r6, lr}
 800ae92:	fba1 5402 	umull	r5, r4, r1, r2
 800ae96:	b93c      	cbnz	r4, 800aea8 <_calloc_r+0x18>
 800ae98:	4629      	mov	r1, r5
 800ae9a:	f7fe f82f 	bl	8008efc <_malloc_r>
 800ae9e:	4606      	mov	r6, r0
 800aea0:	b928      	cbnz	r0, 800aeae <_calloc_r+0x1e>
 800aea2:	2600      	movs	r6, #0
 800aea4:	4630      	mov	r0, r6
 800aea6:	bd70      	pop	{r4, r5, r6, pc}
 800aea8:	220c      	movs	r2, #12
 800aeaa:	6002      	str	r2, [r0, #0]
 800aeac:	e7f9      	b.n	800aea2 <_calloc_r+0x12>
 800aeae:	462a      	mov	r2, r5
 800aeb0:	4621      	mov	r1, r4
 800aeb2:	f7fd f8be 	bl	8008032 <memset>
 800aeb6:	e7f5      	b.n	800aea4 <_calloc_r+0x14>

0800aeb8 <rshift>:
 800aeb8:	6903      	ldr	r3, [r0, #16]
 800aeba:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800aebe:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800aec2:	f100 0414 	add.w	r4, r0, #20
 800aec6:	ea4f 1261 	mov.w	r2, r1, asr #5
 800aeca:	dd46      	ble.n	800af5a <rshift+0xa2>
 800aecc:	f011 011f 	ands.w	r1, r1, #31
 800aed0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800aed4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800aed8:	d10c      	bne.n	800aef4 <rshift+0x3c>
 800aeda:	4629      	mov	r1, r5
 800aedc:	f100 0710 	add.w	r7, r0, #16
 800aee0:	42b1      	cmp	r1, r6
 800aee2:	d335      	bcc.n	800af50 <rshift+0x98>
 800aee4:	1a9b      	subs	r3, r3, r2
 800aee6:	009b      	lsls	r3, r3, #2
 800aee8:	1eea      	subs	r2, r5, #3
 800aeea:	4296      	cmp	r6, r2
 800aeec:	bf38      	it	cc
 800aeee:	2300      	movcc	r3, #0
 800aef0:	4423      	add	r3, r4
 800aef2:	e015      	b.n	800af20 <rshift+0x68>
 800aef4:	46a1      	mov	r9, r4
 800aef6:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800aefa:	f1c1 0820 	rsb	r8, r1, #32
 800aefe:	40cf      	lsrs	r7, r1
 800af00:	f105 0e04 	add.w	lr, r5, #4
 800af04:	4576      	cmp	r6, lr
 800af06:	46f4      	mov	ip, lr
 800af08:	d816      	bhi.n	800af38 <rshift+0x80>
 800af0a:	1a9a      	subs	r2, r3, r2
 800af0c:	0092      	lsls	r2, r2, #2
 800af0e:	3a04      	subs	r2, #4
 800af10:	3501      	adds	r5, #1
 800af12:	42ae      	cmp	r6, r5
 800af14:	bf38      	it	cc
 800af16:	2200      	movcc	r2, #0
 800af18:	18a3      	adds	r3, r4, r2
 800af1a:	50a7      	str	r7, [r4, r2]
 800af1c:	b107      	cbz	r7, 800af20 <rshift+0x68>
 800af1e:	3304      	adds	r3, #4
 800af20:	42a3      	cmp	r3, r4
 800af22:	eba3 0204 	sub.w	r2, r3, r4
 800af26:	bf08      	it	eq
 800af28:	2300      	moveq	r3, #0
 800af2a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800af2e:	6102      	str	r2, [r0, #16]
 800af30:	bf08      	it	eq
 800af32:	6143      	streq	r3, [r0, #20]
 800af34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800af38:	f8dc c000 	ldr.w	ip, [ip]
 800af3c:	fa0c fc08 	lsl.w	ip, ip, r8
 800af40:	ea4c 0707 	orr.w	r7, ip, r7
 800af44:	f849 7b04 	str.w	r7, [r9], #4
 800af48:	f85e 7b04 	ldr.w	r7, [lr], #4
 800af4c:	40cf      	lsrs	r7, r1
 800af4e:	e7d9      	b.n	800af04 <rshift+0x4c>
 800af50:	f851 cb04 	ldr.w	ip, [r1], #4
 800af54:	f847 cf04 	str.w	ip, [r7, #4]!
 800af58:	e7c2      	b.n	800aee0 <rshift+0x28>
 800af5a:	4623      	mov	r3, r4
 800af5c:	e7e0      	b.n	800af20 <rshift+0x68>

0800af5e <__hexdig_fun>:
 800af5e:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800af62:	2b09      	cmp	r3, #9
 800af64:	d802      	bhi.n	800af6c <__hexdig_fun+0xe>
 800af66:	3820      	subs	r0, #32
 800af68:	b2c0      	uxtb	r0, r0
 800af6a:	4770      	bx	lr
 800af6c:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800af70:	2b05      	cmp	r3, #5
 800af72:	d801      	bhi.n	800af78 <__hexdig_fun+0x1a>
 800af74:	3847      	subs	r0, #71	@ 0x47
 800af76:	e7f7      	b.n	800af68 <__hexdig_fun+0xa>
 800af78:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800af7c:	2b05      	cmp	r3, #5
 800af7e:	d801      	bhi.n	800af84 <__hexdig_fun+0x26>
 800af80:	3827      	subs	r0, #39	@ 0x27
 800af82:	e7f1      	b.n	800af68 <__hexdig_fun+0xa>
 800af84:	2000      	movs	r0, #0
 800af86:	4770      	bx	lr

0800af88 <__gethex>:
 800af88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af8c:	468a      	mov	sl, r1
 800af8e:	4690      	mov	r8, r2
 800af90:	b085      	sub	sp, #20
 800af92:	9302      	str	r3, [sp, #8]
 800af94:	680b      	ldr	r3, [r1, #0]
 800af96:	9001      	str	r0, [sp, #4]
 800af98:	1c9c      	adds	r4, r3, #2
 800af9a:	46a1      	mov	r9, r4
 800af9c:	f814 0b01 	ldrb.w	r0, [r4], #1
 800afa0:	2830      	cmp	r0, #48	@ 0x30
 800afa2:	d0fa      	beq.n	800af9a <__gethex+0x12>
 800afa4:	eba9 0303 	sub.w	r3, r9, r3
 800afa8:	f1a3 0b02 	sub.w	fp, r3, #2
 800afac:	f7ff ffd7 	bl	800af5e <__hexdig_fun>
 800afb0:	4605      	mov	r5, r0
 800afb2:	2800      	cmp	r0, #0
 800afb4:	d168      	bne.n	800b088 <__gethex+0x100>
 800afb6:	2201      	movs	r2, #1
 800afb8:	4648      	mov	r0, r9
 800afba:	499f      	ldr	r1, [pc, #636]	@ (800b238 <__gethex+0x2b0>)
 800afbc:	f7ff ff22 	bl	800ae04 <strncmp>
 800afc0:	4607      	mov	r7, r0
 800afc2:	2800      	cmp	r0, #0
 800afc4:	d167      	bne.n	800b096 <__gethex+0x10e>
 800afc6:	f899 0001 	ldrb.w	r0, [r9, #1]
 800afca:	4626      	mov	r6, r4
 800afcc:	f7ff ffc7 	bl	800af5e <__hexdig_fun>
 800afd0:	2800      	cmp	r0, #0
 800afd2:	d062      	beq.n	800b09a <__gethex+0x112>
 800afd4:	4623      	mov	r3, r4
 800afd6:	7818      	ldrb	r0, [r3, #0]
 800afd8:	4699      	mov	r9, r3
 800afda:	2830      	cmp	r0, #48	@ 0x30
 800afdc:	f103 0301 	add.w	r3, r3, #1
 800afe0:	d0f9      	beq.n	800afd6 <__gethex+0x4e>
 800afe2:	f7ff ffbc 	bl	800af5e <__hexdig_fun>
 800afe6:	fab0 f580 	clz	r5, r0
 800afea:	f04f 0b01 	mov.w	fp, #1
 800afee:	096d      	lsrs	r5, r5, #5
 800aff0:	464a      	mov	r2, r9
 800aff2:	4616      	mov	r6, r2
 800aff4:	7830      	ldrb	r0, [r6, #0]
 800aff6:	3201      	adds	r2, #1
 800aff8:	f7ff ffb1 	bl	800af5e <__hexdig_fun>
 800affc:	2800      	cmp	r0, #0
 800affe:	d1f8      	bne.n	800aff2 <__gethex+0x6a>
 800b000:	2201      	movs	r2, #1
 800b002:	4630      	mov	r0, r6
 800b004:	498c      	ldr	r1, [pc, #560]	@ (800b238 <__gethex+0x2b0>)
 800b006:	f7ff fefd 	bl	800ae04 <strncmp>
 800b00a:	2800      	cmp	r0, #0
 800b00c:	d13f      	bne.n	800b08e <__gethex+0x106>
 800b00e:	b944      	cbnz	r4, 800b022 <__gethex+0x9a>
 800b010:	1c74      	adds	r4, r6, #1
 800b012:	4622      	mov	r2, r4
 800b014:	4616      	mov	r6, r2
 800b016:	7830      	ldrb	r0, [r6, #0]
 800b018:	3201      	adds	r2, #1
 800b01a:	f7ff ffa0 	bl	800af5e <__hexdig_fun>
 800b01e:	2800      	cmp	r0, #0
 800b020:	d1f8      	bne.n	800b014 <__gethex+0x8c>
 800b022:	1ba4      	subs	r4, r4, r6
 800b024:	00a7      	lsls	r7, r4, #2
 800b026:	7833      	ldrb	r3, [r6, #0]
 800b028:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800b02c:	2b50      	cmp	r3, #80	@ 0x50
 800b02e:	d13e      	bne.n	800b0ae <__gethex+0x126>
 800b030:	7873      	ldrb	r3, [r6, #1]
 800b032:	2b2b      	cmp	r3, #43	@ 0x2b
 800b034:	d033      	beq.n	800b09e <__gethex+0x116>
 800b036:	2b2d      	cmp	r3, #45	@ 0x2d
 800b038:	d034      	beq.n	800b0a4 <__gethex+0x11c>
 800b03a:	2400      	movs	r4, #0
 800b03c:	1c71      	adds	r1, r6, #1
 800b03e:	7808      	ldrb	r0, [r1, #0]
 800b040:	f7ff ff8d 	bl	800af5e <__hexdig_fun>
 800b044:	1e43      	subs	r3, r0, #1
 800b046:	b2db      	uxtb	r3, r3
 800b048:	2b18      	cmp	r3, #24
 800b04a:	d830      	bhi.n	800b0ae <__gethex+0x126>
 800b04c:	f1a0 0210 	sub.w	r2, r0, #16
 800b050:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b054:	f7ff ff83 	bl	800af5e <__hexdig_fun>
 800b058:	f100 3cff 	add.w	ip, r0, #4294967295
 800b05c:	fa5f fc8c 	uxtb.w	ip, ip
 800b060:	f1bc 0f18 	cmp.w	ip, #24
 800b064:	f04f 030a 	mov.w	r3, #10
 800b068:	d91e      	bls.n	800b0a8 <__gethex+0x120>
 800b06a:	b104      	cbz	r4, 800b06e <__gethex+0xe6>
 800b06c:	4252      	negs	r2, r2
 800b06e:	4417      	add	r7, r2
 800b070:	f8ca 1000 	str.w	r1, [sl]
 800b074:	b1ed      	cbz	r5, 800b0b2 <__gethex+0x12a>
 800b076:	f1bb 0f00 	cmp.w	fp, #0
 800b07a:	bf0c      	ite	eq
 800b07c:	2506      	moveq	r5, #6
 800b07e:	2500      	movne	r5, #0
 800b080:	4628      	mov	r0, r5
 800b082:	b005      	add	sp, #20
 800b084:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b088:	2500      	movs	r5, #0
 800b08a:	462c      	mov	r4, r5
 800b08c:	e7b0      	b.n	800aff0 <__gethex+0x68>
 800b08e:	2c00      	cmp	r4, #0
 800b090:	d1c7      	bne.n	800b022 <__gethex+0x9a>
 800b092:	4627      	mov	r7, r4
 800b094:	e7c7      	b.n	800b026 <__gethex+0x9e>
 800b096:	464e      	mov	r6, r9
 800b098:	462f      	mov	r7, r5
 800b09a:	2501      	movs	r5, #1
 800b09c:	e7c3      	b.n	800b026 <__gethex+0x9e>
 800b09e:	2400      	movs	r4, #0
 800b0a0:	1cb1      	adds	r1, r6, #2
 800b0a2:	e7cc      	b.n	800b03e <__gethex+0xb6>
 800b0a4:	2401      	movs	r4, #1
 800b0a6:	e7fb      	b.n	800b0a0 <__gethex+0x118>
 800b0a8:	fb03 0002 	mla	r0, r3, r2, r0
 800b0ac:	e7ce      	b.n	800b04c <__gethex+0xc4>
 800b0ae:	4631      	mov	r1, r6
 800b0b0:	e7de      	b.n	800b070 <__gethex+0xe8>
 800b0b2:	4629      	mov	r1, r5
 800b0b4:	eba6 0309 	sub.w	r3, r6, r9
 800b0b8:	3b01      	subs	r3, #1
 800b0ba:	2b07      	cmp	r3, #7
 800b0bc:	dc0a      	bgt.n	800b0d4 <__gethex+0x14c>
 800b0be:	9801      	ldr	r0, [sp, #4]
 800b0c0:	f7fd ffa8 	bl	8009014 <_Balloc>
 800b0c4:	4604      	mov	r4, r0
 800b0c6:	b940      	cbnz	r0, 800b0da <__gethex+0x152>
 800b0c8:	4602      	mov	r2, r0
 800b0ca:	21e4      	movs	r1, #228	@ 0xe4
 800b0cc:	4b5b      	ldr	r3, [pc, #364]	@ (800b23c <__gethex+0x2b4>)
 800b0ce:	485c      	ldr	r0, [pc, #368]	@ (800b240 <__gethex+0x2b8>)
 800b0d0:	f7ff fec0 	bl	800ae54 <__assert_func>
 800b0d4:	3101      	adds	r1, #1
 800b0d6:	105b      	asrs	r3, r3, #1
 800b0d8:	e7ef      	b.n	800b0ba <__gethex+0x132>
 800b0da:	2300      	movs	r3, #0
 800b0dc:	f100 0a14 	add.w	sl, r0, #20
 800b0e0:	4655      	mov	r5, sl
 800b0e2:	469b      	mov	fp, r3
 800b0e4:	45b1      	cmp	r9, r6
 800b0e6:	d337      	bcc.n	800b158 <__gethex+0x1d0>
 800b0e8:	f845 bb04 	str.w	fp, [r5], #4
 800b0ec:	eba5 050a 	sub.w	r5, r5, sl
 800b0f0:	10ad      	asrs	r5, r5, #2
 800b0f2:	6125      	str	r5, [r4, #16]
 800b0f4:	4658      	mov	r0, fp
 800b0f6:	f7fe f87f 	bl	80091f8 <__hi0bits>
 800b0fa:	016d      	lsls	r5, r5, #5
 800b0fc:	f8d8 6000 	ldr.w	r6, [r8]
 800b100:	1a2d      	subs	r5, r5, r0
 800b102:	42b5      	cmp	r5, r6
 800b104:	dd54      	ble.n	800b1b0 <__gethex+0x228>
 800b106:	1bad      	subs	r5, r5, r6
 800b108:	4629      	mov	r1, r5
 800b10a:	4620      	mov	r0, r4
 800b10c:	f7fe fc07 	bl	800991e <__any_on>
 800b110:	4681      	mov	r9, r0
 800b112:	b178      	cbz	r0, 800b134 <__gethex+0x1ac>
 800b114:	f04f 0901 	mov.w	r9, #1
 800b118:	1e6b      	subs	r3, r5, #1
 800b11a:	1159      	asrs	r1, r3, #5
 800b11c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800b120:	f003 021f 	and.w	r2, r3, #31
 800b124:	fa09 f202 	lsl.w	r2, r9, r2
 800b128:	420a      	tst	r2, r1
 800b12a:	d003      	beq.n	800b134 <__gethex+0x1ac>
 800b12c:	454b      	cmp	r3, r9
 800b12e:	dc36      	bgt.n	800b19e <__gethex+0x216>
 800b130:	f04f 0902 	mov.w	r9, #2
 800b134:	4629      	mov	r1, r5
 800b136:	4620      	mov	r0, r4
 800b138:	f7ff febe 	bl	800aeb8 <rshift>
 800b13c:	442f      	add	r7, r5
 800b13e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b142:	42bb      	cmp	r3, r7
 800b144:	da42      	bge.n	800b1cc <__gethex+0x244>
 800b146:	4621      	mov	r1, r4
 800b148:	9801      	ldr	r0, [sp, #4]
 800b14a:	f7fd ffa3 	bl	8009094 <_Bfree>
 800b14e:	2300      	movs	r3, #0
 800b150:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b152:	25a3      	movs	r5, #163	@ 0xa3
 800b154:	6013      	str	r3, [r2, #0]
 800b156:	e793      	b.n	800b080 <__gethex+0xf8>
 800b158:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800b15c:	2a2e      	cmp	r2, #46	@ 0x2e
 800b15e:	d012      	beq.n	800b186 <__gethex+0x1fe>
 800b160:	2b20      	cmp	r3, #32
 800b162:	d104      	bne.n	800b16e <__gethex+0x1e6>
 800b164:	f845 bb04 	str.w	fp, [r5], #4
 800b168:	f04f 0b00 	mov.w	fp, #0
 800b16c:	465b      	mov	r3, fp
 800b16e:	7830      	ldrb	r0, [r6, #0]
 800b170:	9303      	str	r3, [sp, #12]
 800b172:	f7ff fef4 	bl	800af5e <__hexdig_fun>
 800b176:	9b03      	ldr	r3, [sp, #12]
 800b178:	f000 000f 	and.w	r0, r0, #15
 800b17c:	4098      	lsls	r0, r3
 800b17e:	ea4b 0b00 	orr.w	fp, fp, r0
 800b182:	3304      	adds	r3, #4
 800b184:	e7ae      	b.n	800b0e4 <__gethex+0x15c>
 800b186:	45b1      	cmp	r9, r6
 800b188:	d8ea      	bhi.n	800b160 <__gethex+0x1d8>
 800b18a:	2201      	movs	r2, #1
 800b18c:	4630      	mov	r0, r6
 800b18e:	492a      	ldr	r1, [pc, #168]	@ (800b238 <__gethex+0x2b0>)
 800b190:	9303      	str	r3, [sp, #12]
 800b192:	f7ff fe37 	bl	800ae04 <strncmp>
 800b196:	9b03      	ldr	r3, [sp, #12]
 800b198:	2800      	cmp	r0, #0
 800b19a:	d1e1      	bne.n	800b160 <__gethex+0x1d8>
 800b19c:	e7a2      	b.n	800b0e4 <__gethex+0x15c>
 800b19e:	4620      	mov	r0, r4
 800b1a0:	1ea9      	subs	r1, r5, #2
 800b1a2:	f7fe fbbc 	bl	800991e <__any_on>
 800b1a6:	2800      	cmp	r0, #0
 800b1a8:	d0c2      	beq.n	800b130 <__gethex+0x1a8>
 800b1aa:	f04f 0903 	mov.w	r9, #3
 800b1ae:	e7c1      	b.n	800b134 <__gethex+0x1ac>
 800b1b0:	da09      	bge.n	800b1c6 <__gethex+0x23e>
 800b1b2:	1b75      	subs	r5, r6, r5
 800b1b4:	4621      	mov	r1, r4
 800b1b6:	462a      	mov	r2, r5
 800b1b8:	9801      	ldr	r0, [sp, #4]
 800b1ba:	f7fe f981 	bl	80094c0 <__lshift>
 800b1be:	4604      	mov	r4, r0
 800b1c0:	1b7f      	subs	r7, r7, r5
 800b1c2:	f100 0a14 	add.w	sl, r0, #20
 800b1c6:	f04f 0900 	mov.w	r9, #0
 800b1ca:	e7b8      	b.n	800b13e <__gethex+0x1b6>
 800b1cc:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b1d0:	42bd      	cmp	r5, r7
 800b1d2:	dd6f      	ble.n	800b2b4 <__gethex+0x32c>
 800b1d4:	1bed      	subs	r5, r5, r7
 800b1d6:	42ae      	cmp	r6, r5
 800b1d8:	dc34      	bgt.n	800b244 <__gethex+0x2bc>
 800b1da:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b1de:	2b02      	cmp	r3, #2
 800b1e0:	d022      	beq.n	800b228 <__gethex+0x2a0>
 800b1e2:	2b03      	cmp	r3, #3
 800b1e4:	d024      	beq.n	800b230 <__gethex+0x2a8>
 800b1e6:	2b01      	cmp	r3, #1
 800b1e8:	d115      	bne.n	800b216 <__gethex+0x28e>
 800b1ea:	42ae      	cmp	r6, r5
 800b1ec:	d113      	bne.n	800b216 <__gethex+0x28e>
 800b1ee:	2e01      	cmp	r6, #1
 800b1f0:	d10b      	bne.n	800b20a <__gethex+0x282>
 800b1f2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b1f6:	9a02      	ldr	r2, [sp, #8]
 800b1f8:	2562      	movs	r5, #98	@ 0x62
 800b1fa:	6013      	str	r3, [r2, #0]
 800b1fc:	2301      	movs	r3, #1
 800b1fe:	6123      	str	r3, [r4, #16]
 800b200:	f8ca 3000 	str.w	r3, [sl]
 800b204:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b206:	601c      	str	r4, [r3, #0]
 800b208:	e73a      	b.n	800b080 <__gethex+0xf8>
 800b20a:	4620      	mov	r0, r4
 800b20c:	1e71      	subs	r1, r6, #1
 800b20e:	f7fe fb86 	bl	800991e <__any_on>
 800b212:	2800      	cmp	r0, #0
 800b214:	d1ed      	bne.n	800b1f2 <__gethex+0x26a>
 800b216:	4621      	mov	r1, r4
 800b218:	9801      	ldr	r0, [sp, #4]
 800b21a:	f7fd ff3b 	bl	8009094 <_Bfree>
 800b21e:	2300      	movs	r3, #0
 800b220:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b222:	2550      	movs	r5, #80	@ 0x50
 800b224:	6013      	str	r3, [r2, #0]
 800b226:	e72b      	b.n	800b080 <__gethex+0xf8>
 800b228:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d1f3      	bne.n	800b216 <__gethex+0x28e>
 800b22e:	e7e0      	b.n	800b1f2 <__gethex+0x26a>
 800b230:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b232:	2b00      	cmp	r3, #0
 800b234:	d1dd      	bne.n	800b1f2 <__gethex+0x26a>
 800b236:	e7ee      	b.n	800b216 <__gethex+0x28e>
 800b238:	0800c1d0 	.word	0x0800c1d0
 800b23c:	0800c069 	.word	0x0800c069
 800b240:	0800c37e 	.word	0x0800c37e
 800b244:	1e6f      	subs	r7, r5, #1
 800b246:	f1b9 0f00 	cmp.w	r9, #0
 800b24a:	d130      	bne.n	800b2ae <__gethex+0x326>
 800b24c:	b127      	cbz	r7, 800b258 <__gethex+0x2d0>
 800b24e:	4639      	mov	r1, r7
 800b250:	4620      	mov	r0, r4
 800b252:	f7fe fb64 	bl	800991e <__any_on>
 800b256:	4681      	mov	r9, r0
 800b258:	2301      	movs	r3, #1
 800b25a:	4629      	mov	r1, r5
 800b25c:	1b76      	subs	r6, r6, r5
 800b25e:	2502      	movs	r5, #2
 800b260:	117a      	asrs	r2, r7, #5
 800b262:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800b266:	f007 071f 	and.w	r7, r7, #31
 800b26a:	40bb      	lsls	r3, r7
 800b26c:	4213      	tst	r3, r2
 800b26e:	4620      	mov	r0, r4
 800b270:	bf18      	it	ne
 800b272:	f049 0902 	orrne.w	r9, r9, #2
 800b276:	f7ff fe1f 	bl	800aeb8 <rshift>
 800b27a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800b27e:	f1b9 0f00 	cmp.w	r9, #0
 800b282:	d047      	beq.n	800b314 <__gethex+0x38c>
 800b284:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b288:	2b02      	cmp	r3, #2
 800b28a:	d015      	beq.n	800b2b8 <__gethex+0x330>
 800b28c:	2b03      	cmp	r3, #3
 800b28e:	d017      	beq.n	800b2c0 <__gethex+0x338>
 800b290:	2b01      	cmp	r3, #1
 800b292:	d109      	bne.n	800b2a8 <__gethex+0x320>
 800b294:	f019 0f02 	tst.w	r9, #2
 800b298:	d006      	beq.n	800b2a8 <__gethex+0x320>
 800b29a:	f8da 3000 	ldr.w	r3, [sl]
 800b29e:	ea49 0903 	orr.w	r9, r9, r3
 800b2a2:	f019 0f01 	tst.w	r9, #1
 800b2a6:	d10e      	bne.n	800b2c6 <__gethex+0x33e>
 800b2a8:	f045 0510 	orr.w	r5, r5, #16
 800b2ac:	e032      	b.n	800b314 <__gethex+0x38c>
 800b2ae:	f04f 0901 	mov.w	r9, #1
 800b2b2:	e7d1      	b.n	800b258 <__gethex+0x2d0>
 800b2b4:	2501      	movs	r5, #1
 800b2b6:	e7e2      	b.n	800b27e <__gethex+0x2f6>
 800b2b8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b2ba:	f1c3 0301 	rsb	r3, r3, #1
 800b2be:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b2c0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d0f0      	beq.n	800b2a8 <__gethex+0x320>
 800b2c6:	f04f 0c00 	mov.w	ip, #0
 800b2ca:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b2ce:	f104 0314 	add.w	r3, r4, #20
 800b2d2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b2d6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b2da:	4618      	mov	r0, r3
 800b2dc:	f853 2b04 	ldr.w	r2, [r3], #4
 800b2e0:	f1b2 3fff 	cmp.w	r2, #4294967295
 800b2e4:	d01b      	beq.n	800b31e <__gethex+0x396>
 800b2e6:	3201      	adds	r2, #1
 800b2e8:	6002      	str	r2, [r0, #0]
 800b2ea:	2d02      	cmp	r5, #2
 800b2ec:	f104 0314 	add.w	r3, r4, #20
 800b2f0:	d13c      	bne.n	800b36c <__gethex+0x3e4>
 800b2f2:	f8d8 2000 	ldr.w	r2, [r8]
 800b2f6:	3a01      	subs	r2, #1
 800b2f8:	42b2      	cmp	r2, r6
 800b2fa:	d109      	bne.n	800b310 <__gethex+0x388>
 800b2fc:	2201      	movs	r2, #1
 800b2fe:	1171      	asrs	r1, r6, #5
 800b300:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b304:	f006 061f 	and.w	r6, r6, #31
 800b308:	fa02 f606 	lsl.w	r6, r2, r6
 800b30c:	421e      	tst	r6, r3
 800b30e:	d13a      	bne.n	800b386 <__gethex+0x3fe>
 800b310:	f045 0520 	orr.w	r5, r5, #32
 800b314:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b316:	601c      	str	r4, [r3, #0]
 800b318:	9b02      	ldr	r3, [sp, #8]
 800b31a:	601f      	str	r7, [r3, #0]
 800b31c:	e6b0      	b.n	800b080 <__gethex+0xf8>
 800b31e:	4299      	cmp	r1, r3
 800b320:	f843 cc04 	str.w	ip, [r3, #-4]
 800b324:	d8d9      	bhi.n	800b2da <__gethex+0x352>
 800b326:	68a3      	ldr	r3, [r4, #8]
 800b328:	459b      	cmp	fp, r3
 800b32a:	db17      	blt.n	800b35c <__gethex+0x3d4>
 800b32c:	6861      	ldr	r1, [r4, #4]
 800b32e:	9801      	ldr	r0, [sp, #4]
 800b330:	3101      	adds	r1, #1
 800b332:	f7fd fe6f 	bl	8009014 <_Balloc>
 800b336:	4681      	mov	r9, r0
 800b338:	b918      	cbnz	r0, 800b342 <__gethex+0x3ba>
 800b33a:	4602      	mov	r2, r0
 800b33c:	2184      	movs	r1, #132	@ 0x84
 800b33e:	4b19      	ldr	r3, [pc, #100]	@ (800b3a4 <__gethex+0x41c>)
 800b340:	e6c5      	b.n	800b0ce <__gethex+0x146>
 800b342:	6922      	ldr	r2, [r4, #16]
 800b344:	f104 010c 	add.w	r1, r4, #12
 800b348:	3202      	adds	r2, #2
 800b34a:	0092      	lsls	r2, r2, #2
 800b34c:	300c      	adds	r0, #12
 800b34e:	f7fc fefe 	bl	800814e <memcpy>
 800b352:	4621      	mov	r1, r4
 800b354:	9801      	ldr	r0, [sp, #4]
 800b356:	f7fd fe9d 	bl	8009094 <_Bfree>
 800b35a:	464c      	mov	r4, r9
 800b35c:	6923      	ldr	r3, [r4, #16]
 800b35e:	1c5a      	adds	r2, r3, #1
 800b360:	6122      	str	r2, [r4, #16]
 800b362:	2201      	movs	r2, #1
 800b364:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b368:	615a      	str	r2, [r3, #20]
 800b36a:	e7be      	b.n	800b2ea <__gethex+0x362>
 800b36c:	6922      	ldr	r2, [r4, #16]
 800b36e:	455a      	cmp	r2, fp
 800b370:	dd0b      	ble.n	800b38a <__gethex+0x402>
 800b372:	2101      	movs	r1, #1
 800b374:	4620      	mov	r0, r4
 800b376:	f7ff fd9f 	bl	800aeb8 <rshift>
 800b37a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b37e:	3701      	adds	r7, #1
 800b380:	42bb      	cmp	r3, r7
 800b382:	f6ff aee0 	blt.w	800b146 <__gethex+0x1be>
 800b386:	2501      	movs	r5, #1
 800b388:	e7c2      	b.n	800b310 <__gethex+0x388>
 800b38a:	f016 061f 	ands.w	r6, r6, #31
 800b38e:	d0fa      	beq.n	800b386 <__gethex+0x3fe>
 800b390:	4453      	add	r3, sl
 800b392:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800b396:	f7fd ff2f 	bl	80091f8 <__hi0bits>
 800b39a:	f1c6 0620 	rsb	r6, r6, #32
 800b39e:	42b0      	cmp	r0, r6
 800b3a0:	dbe7      	blt.n	800b372 <__gethex+0x3ea>
 800b3a2:	e7f0      	b.n	800b386 <__gethex+0x3fe>
 800b3a4:	0800c069 	.word	0x0800c069

0800b3a8 <L_shift>:
 800b3a8:	f1c2 0208 	rsb	r2, r2, #8
 800b3ac:	0092      	lsls	r2, r2, #2
 800b3ae:	b570      	push	{r4, r5, r6, lr}
 800b3b0:	f1c2 0620 	rsb	r6, r2, #32
 800b3b4:	6843      	ldr	r3, [r0, #4]
 800b3b6:	6804      	ldr	r4, [r0, #0]
 800b3b8:	fa03 f506 	lsl.w	r5, r3, r6
 800b3bc:	432c      	orrs	r4, r5
 800b3be:	40d3      	lsrs	r3, r2
 800b3c0:	6004      	str	r4, [r0, #0]
 800b3c2:	f840 3f04 	str.w	r3, [r0, #4]!
 800b3c6:	4288      	cmp	r0, r1
 800b3c8:	d3f4      	bcc.n	800b3b4 <L_shift+0xc>
 800b3ca:	bd70      	pop	{r4, r5, r6, pc}

0800b3cc <__match>:
 800b3cc:	b530      	push	{r4, r5, lr}
 800b3ce:	6803      	ldr	r3, [r0, #0]
 800b3d0:	3301      	adds	r3, #1
 800b3d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b3d6:	b914      	cbnz	r4, 800b3de <__match+0x12>
 800b3d8:	6003      	str	r3, [r0, #0]
 800b3da:	2001      	movs	r0, #1
 800b3dc:	bd30      	pop	{r4, r5, pc}
 800b3de:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b3e2:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800b3e6:	2d19      	cmp	r5, #25
 800b3e8:	bf98      	it	ls
 800b3ea:	3220      	addls	r2, #32
 800b3ec:	42a2      	cmp	r2, r4
 800b3ee:	d0f0      	beq.n	800b3d2 <__match+0x6>
 800b3f0:	2000      	movs	r0, #0
 800b3f2:	e7f3      	b.n	800b3dc <__match+0x10>

0800b3f4 <__hexnan>:
 800b3f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3f8:	2500      	movs	r5, #0
 800b3fa:	680b      	ldr	r3, [r1, #0]
 800b3fc:	4682      	mov	sl, r0
 800b3fe:	115e      	asrs	r6, r3, #5
 800b400:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b404:	f013 031f 	ands.w	r3, r3, #31
 800b408:	bf18      	it	ne
 800b40a:	3604      	addne	r6, #4
 800b40c:	1f37      	subs	r7, r6, #4
 800b40e:	4690      	mov	r8, r2
 800b410:	46b9      	mov	r9, r7
 800b412:	463c      	mov	r4, r7
 800b414:	46ab      	mov	fp, r5
 800b416:	b087      	sub	sp, #28
 800b418:	6801      	ldr	r1, [r0, #0]
 800b41a:	9301      	str	r3, [sp, #4]
 800b41c:	f846 5c04 	str.w	r5, [r6, #-4]
 800b420:	9502      	str	r5, [sp, #8]
 800b422:	784a      	ldrb	r2, [r1, #1]
 800b424:	1c4b      	adds	r3, r1, #1
 800b426:	9303      	str	r3, [sp, #12]
 800b428:	b342      	cbz	r2, 800b47c <__hexnan+0x88>
 800b42a:	4610      	mov	r0, r2
 800b42c:	9105      	str	r1, [sp, #20]
 800b42e:	9204      	str	r2, [sp, #16]
 800b430:	f7ff fd95 	bl	800af5e <__hexdig_fun>
 800b434:	2800      	cmp	r0, #0
 800b436:	d151      	bne.n	800b4dc <__hexnan+0xe8>
 800b438:	9a04      	ldr	r2, [sp, #16]
 800b43a:	9905      	ldr	r1, [sp, #20]
 800b43c:	2a20      	cmp	r2, #32
 800b43e:	d818      	bhi.n	800b472 <__hexnan+0x7e>
 800b440:	9b02      	ldr	r3, [sp, #8]
 800b442:	459b      	cmp	fp, r3
 800b444:	dd13      	ble.n	800b46e <__hexnan+0x7a>
 800b446:	454c      	cmp	r4, r9
 800b448:	d206      	bcs.n	800b458 <__hexnan+0x64>
 800b44a:	2d07      	cmp	r5, #7
 800b44c:	dc04      	bgt.n	800b458 <__hexnan+0x64>
 800b44e:	462a      	mov	r2, r5
 800b450:	4649      	mov	r1, r9
 800b452:	4620      	mov	r0, r4
 800b454:	f7ff ffa8 	bl	800b3a8 <L_shift>
 800b458:	4544      	cmp	r4, r8
 800b45a:	d952      	bls.n	800b502 <__hexnan+0x10e>
 800b45c:	2300      	movs	r3, #0
 800b45e:	f1a4 0904 	sub.w	r9, r4, #4
 800b462:	f844 3c04 	str.w	r3, [r4, #-4]
 800b466:	461d      	mov	r5, r3
 800b468:	464c      	mov	r4, r9
 800b46a:	f8cd b008 	str.w	fp, [sp, #8]
 800b46e:	9903      	ldr	r1, [sp, #12]
 800b470:	e7d7      	b.n	800b422 <__hexnan+0x2e>
 800b472:	2a29      	cmp	r2, #41	@ 0x29
 800b474:	d157      	bne.n	800b526 <__hexnan+0x132>
 800b476:	3102      	adds	r1, #2
 800b478:	f8ca 1000 	str.w	r1, [sl]
 800b47c:	f1bb 0f00 	cmp.w	fp, #0
 800b480:	d051      	beq.n	800b526 <__hexnan+0x132>
 800b482:	454c      	cmp	r4, r9
 800b484:	d206      	bcs.n	800b494 <__hexnan+0xa0>
 800b486:	2d07      	cmp	r5, #7
 800b488:	dc04      	bgt.n	800b494 <__hexnan+0xa0>
 800b48a:	462a      	mov	r2, r5
 800b48c:	4649      	mov	r1, r9
 800b48e:	4620      	mov	r0, r4
 800b490:	f7ff ff8a 	bl	800b3a8 <L_shift>
 800b494:	4544      	cmp	r4, r8
 800b496:	d936      	bls.n	800b506 <__hexnan+0x112>
 800b498:	4623      	mov	r3, r4
 800b49a:	f1a8 0204 	sub.w	r2, r8, #4
 800b49e:	f853 1b04 	ldr.w	r1, [r3], #4
 800b4a2:	429f      	cmp	r7, r3
 800b4a4:	f842 1f04 	str.w	r1, [r2, #4]!
 800b4a8:	d2f9      	bcs.n	800b49e <__hexnan+0xaa>
 800b4aa:	1b3b      	subs	r3, r7, r4
 800b4ac:	f023 0303 	bic.w	r3, r3, #3
 800b4b0:	3304      	adds	r3, #4
 800b4b2:	3401      	adds	r4, #1
 800b4b4:	3e03      	subs	r6, #3
 800b4b6:	42b4      	cmp	r4, r6
 800b4b8:	bf88      	it	hi
 800b4ba:	2304      	movhi	r3, #4
 800b4bc:	2200      	movs	r2, #0
 800b4be:	4443      	add	r3, r8
 800b4c0:	f843 2b04 	str.w	r2, [r3], #4
 800b4c4:	429f      	cmp	r7, r3
 800b4c6:	d2fb      	bcs.n	800b4c0 <__hexnan+0xcc>
 800b4c8:	683b      	ldr	r3, [r7, #0]
 800b4ca:	b91b      	cbnz	r3, 800b4d4 <__hexnan+0xe0>
 800b4cc:	4547      	cmp	r7, r8
 800b4ce:	d128      	bne.n	800b522 <__hexnan+0x12e>
 800b4d0:	2301      	movs	r3, #1
 800b4d2:	603b      	str	r3, [r7, #0]
 800b4d4:	2005      	movs	r0, #5
 800b4d6:	b007      	add	sp, #28
 800b4d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4dc:	3501      	adds	r5, #1
 800b4de:	2d08      	cmp	r5, #8
 800b4e0:	f10b 0b01 	add.w	fp, fp, #1
 800b4e4:	dd06      	ble.n	800b4f4 <__hexnan+0x100>
 800b4e6:	4544      	cmp	r4, r8
 800b4e8:	d9c1      	bls.n	800b46e <__hexnan+0x7a>
 800b4ea:	2300      	movs	r3, #0
 800b4ec:	2501      	movs	r5, #1
 800b4ee:	f844 3c04 	str.w	r3, [r4, #-4]
 800b4f2:	3c04      	subs	r4, #4
 800b4f4:	6822      	ldr	r2, [r4, #0]
 800b4f6:	f000 000f 	and.w	r0, r0, #15
 800b4fa:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800b4fe:	6020      	str	r0, [r4, #0]
 800b500:	e7b5      	b.n	800b46e <__hexnan+0x7a>
 800b502:	2508      	movs	r5, #8
 800b504:	e7b3      	b.n	800b46e <__hexnan+0x7a>
 800b506:	9b01      	ldr	r3, [sp, #4]
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d0dd      	beq.n	800b4c8 <__hexnan+0xd4>
 800b50c:	f04f 32ff 	mov.w	r2, #4294967295
 800b510:	f1c3 0320 	rsb	r3, r3, #32
 800b514:	40da      	lsrs	r2, r3
 800b516:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800b51a:	4013      	ands	r3, r2
 800b51c:	f846 3c04 	str.w	r3, [r6, #-4]
 800b520:	e7d2      	b.n	800b4c8 <__hexnan+0xd4>
 800b522:	3f04      	subs	r7, #4
 800b524:	e7d0      	b.n	800b4c8 <__hexnan+0xd4>
 800b526:	2004      	movs	r0, #4
 800b528:	e7d5      	b.n	800b4d6 <__hexnan+0xe2>

0800b52a <__ascii_mbtowc>:
 800b52a:	b082      	sub	sp, #8
 800b52c:	b901      	cbnz	r1, 800b530 <__ascii_mbtowc+0x6>
 800b52e:	a901      	add	r1, sp, #4
 800b530:	b142      	cbz	r2, 800b544 <__ascii_mbtowc+0x1a>
 800b532:	b14b      	cbz	r3, 800b548 <__ascii_mbtowc+0x1e>
 800b534:	7813      	ldrb	r3, [r2, #0]
 800b536:	600b      	str	r3, [r1, #0]
 800b538:	7812      	ldrb	r2, [r2, #0]
 800b53a:	1e10      	subs	r0, r2, #0
 800b53c:	bf18      	it	ne
 800b53e:	2001      	movne	r0, #1
 800b540:	b002      	add	sp, #8
 800b542:	4770      	bx	lr
 800b544:	4610      	mov	r0, r2
 800b546:	e7fb      	b.n	800b540 <__ascii_mbtowc+0x16>
 800b548:	f06f 0001 	mvn.w	r0, #1
 800b54c:	e7f8      	b.n	800b540 <__ascii_mbtowc+0x16>

0800b54e <_realloc_r>:
 800b54e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b552:	4680      	mov	r8, r0
 800b554:	4615      	mov	r5, r2
 800b556:	460c      	mov	r4, r1
 800b558:	b921      	cbnz	r1, 800b564 <_realloc_r+0x16>
 800b55a:	4611      	mov	r1, r2
 800b55c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b560:	f7fd bccc 	b.w	8008efc <_malloc_r>
 800b564:	b92a      	cbnz	r2, 800b572 <_realloc_r+0x24>
 800b566:	f7fd fc57 	bl	8008e18 <_free_r>
 800b56a:	2400      	movs	r4, #0
 800b56c:	4620      	mov	r0, r4
 800b56e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b572:	f000 f8c4 	bl	800b6fe <_malloc_usable_size_r>
 800b576:	4285      	cmp	r5, r0
 800b578:	4606      	mov	r6, r0
 800b57a:	d802      	bhi.n	800b582 <_realloc_r+0x34>
 800b57c:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b580:	d8f4      	bhi.n	800b56c <_realloc_r+0x1e>
 800b582:	4629      	mov	r1, r5
 800b584:	4640      	mov	r0, r8
 800b586:	f7fd fcb9 	bl	8008efc <_malloc_r>
 800b58a:	4607      	mov	r7, r0
 800b58c:	2800      	cmp	r0, #0
 800b58e:	d0ec      	beq.n	800b56a <_realloc_r+0x1c>
 800b590:	42b5      	cmp	r5, r6
 800b592:	462a      	mov	r2, r5
 800b594:	4621      	mov	r1, r4
 800b596:	bf28      	it	cs
 800b598:	4632      	movcs	r2, r6
 800b59a:	f7fc fdd8 	bl	800814e <memcpy>
 800b59e:	4621      	mov	r1, r4
 800b5a0:	4640      	mov	r0, r8
 800b5a2:	f7fd fc39 	bl	8008e18 <_free_r>
 800b5a6:	463c      	mov	r4, r7
 800b5a8:	e7e0      	b.n	800b56c <_realloc_r+0x1e>

0800b5aa <__ascii_wctomb>:
 800b5aa:	4603      	mov	r3, r0
 800b5ac:	4608      	mov	r0, r1
 800b5ae:	b141      	cbz	r1, 800b5c2 <__ascii_wctomb+0x18>
 800b5b0:	2aff      	cmp	r2, #255	@ 0xff
 800b5b2:	d904      	bls.n	800b5be <__ascii_wctomb+0x14>
 800b5b4:	228a      	movs	r2, #138	@ 0x8a
 800b5b6:	f04f 30ff 	mov.w	r0, #4294967295
 800b5ba:	601a      	str	r2, [r3, #0]
 800b5bc:	4770      	bx	lr
 800b5be:	2001      	movs	r0, #1
 800b5c0:	700a      	strb	r2, [r1, #0]
 800b5c2:	4770      	bx	lr

0800b5c4 <fiprintf>:
 800b5c4:	b40e      	push	{r1, r2, r3}
 800b5c6:	b503      	push	{r0, r1, lr}
 800b5c8:	4601      	mov	r1, r0
 800b5ca:	ab03      	add	r3, sp, #12
 800b5cc:	4805      	ldr	r0, [pc, #20]	@ (800b5e4 <fiprintf+0x20>)
 800b5ce:	f853 2b04 	ldr.w	r2, [r3], #4
 800b5d2:	6800      	ldr	r0, [r0, #0]
 800b5d4:	9301      	str	r3, [sp, #4]
 800b5d6:	f7ff f9c1 	bl	800a95c <_vfiprintf_r>
 800b5da:	b002      	add	sp, #8
 800b5dc:	f85d eb04 	ldr.w	lr, [sp], #4
 800b5e0:	b003      	add	sp, #12
 800b5e2:	4770      	bx	lr
 800b5e4:	20000030 	.word	0x20000030

0800b5e8 <__swhatbuf_r>:
 800b5e8:	b570      	push	{r4, r5, r6, lr}
 800b5ea:	460c      	mov	r4, r1
 800b5ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b5f0:	4615      	mov	r5, r2
 800b5f2:	2900      	cmp	r1, #0
 800b5f4:	461e      	mov	r6, r3
 800b5f6:	b096      	sub	sp, #88	@ 0x58
 800b5f8:	da0c      	bge.n	800b614 <__swhatbuf_r+0x2c>
 800b5fa:	89a3      	ldrh	r3, [r4, #12]
 800b5fc:	2100      	movs	r1, #0
 800b5fe:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b602:	bf14      	ite	ne
 800b604:	2340      	movne	r3, #64	@ 0x40
 800b606:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b60a:	2000      	movs	r0, #0
 800b60c:	6031      	str	r1, [r6, #0]
 800b60e:	602b      	str	r3, [r5, #0]
 800b610:	b016      	add	sp, #88	@ 0x58
 800b612:	bd70      	pop	{r4, r5, r6, pc}
 800b614:	466a      	mov	r2, sp
 800b616:	f000 f849 	bl	800b6ac <_fstat_r>
 800b61a:	2800      	cmp	r0, #0
 800b61c:	dbed      	blt.n	800b5fa <__swhatbuf_r+0x12>
 800b61e:	9901      	ldr	r1, [sp, #4]
 800b620:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b624:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b628:	4259      	negs	r1, r3
 800b62a:	4159      	adcs	r1, r3
 800b62c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b630:	e7eb      	b.n	800b60a <__swhatbuf_r+0x22>

0800b632 <__smakebuf_r>:
 800b632:	898b      	ldrh	r3, [r1, #12]
 800b634:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b636:	079d      	lsls	r5, r3, #30
 800b638:	4606      	mov	r6, r0
 800b63a:	460c      	mov	r4, r1
 800b63c:	d507      	bpl.n	800b64e <__smakebuf_r+0x1c>
 800b63e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b642:	6023      	str	r3, [r4, #0]
 800b644:	6123      	str	r3, [r4, #16]
 800b646:	2301      	movs	r3, #1
 800b648:	6163      	str	r3, [r4, #20]
 800b64a:	b003      	add	sp, #12
 800b64c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b64e:	466a      	mov	r2, sp
 800b650:	ab01      	add	r3, sp, #4
 800b652:	f7ff ffc9 	bl	800b5e8 <__swhatbuf_r>
 800b656:	9f00      	ldr	r7, [sp, #0]
 800b658:	4605      	mov	r5, r0
 800b65a:	4639      	mov	r1, r7
 800b65c:	4630      	mov	r0, r6
 800b65e:	f7fd fc4d 	bl	8008efc <_malloc_r>
 800b662:	b948      	cbnz	r0, 800b678 <__smakebuf_r+0x46>
 800b664:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b668:	059a      	lsls	r2, r3, #22
 800b66a:	d4ee      	bmi.n	800b64a <__smakebuf_r+0x18>
 800b66c:	f023 0303 	bic.w	r3, r3, #3
 800b670:	f043 0302 	orr.w	r3, r3, #2
 800b674:	81a3      	strh	r3, [r4, #12]
 800b676:	e7e2      	b.n	800b63e <__smakebuf_r+0xc>
 800b678:	89a3      	ldrh	r3, [r4, #12]
 800b67a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b67e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b682:	81a3      	strh	r3, [r4, #12]
 800b684:	9b01      	ldr	r3, [sp, #4]
 800b686:	6020      	str	r0, [r4, #0]
 800b688:	b15b      	cbz	r3, 800b6a2 <__smakebuf_r+0x70>
 800b68a:	4630      	mov	r0, r6
 800b68c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b690:	f000 f81e 	bl	800b6d0 <_isatty_r>
 800b694:	b128      	cbz	r0, 800b6a2 <__smakebuf_r+0x70>
 800b696:	89a3      	ldrh	r3, [r4, #12]
 800b698:	f023 0303 	bic.w	r3, r3, #3
 800b69c:	f043 0301 	orr.w	r3, r3, #1
 800b6a0:	81a3      	strh	r3, [r4, #12]
 800b6a2:	89a3      	ldrh	r3, [r4, #12]
 800b6a4:	431d      	orrs	r5, r3
 800b6a6:	81a5      	strh	r5, [r4, #12]
 800b6a8:	e7cf      	b.n	800b64a <__smakebuf_r+0x18>
	...

0800b6ac <_fstat_r>:
 800b6ac:	b538      	push	{r3, r4, r5, lr}
 800b6ae:	2300      	movs	r3, #0
 800b6b0:	4d06      	ldr	r5, [pc, #24]	@ (800b6cc <_fstat_r+0x20>)
 800b6b2:	4604      	mov	r4, r0
 800b6b4:	4608      	mov	r0, r1
 800b6b6:	4611      	mov	r1, r2
 800b6b8:	602b      	str	r3, [r5, #0]
 800b6ba:	f7f5 fefb 	bl	80014b4 <_fstat>
 800b6be:	1c43      	adds	r3, r0, #1
 800b6c0:	d102      	bne.n	800b6c8 <_fstat_r+0x1c>
 800b6c2:	682b      	ldr	r3, [r5, #0]
 800b6c4:	b103      	cbz	r3, 800b6c8 <_fstat_r+0x1c>
 800b6c6:	6023      	str	r3, [r4, #0]
 800b6c8:	bd38      	pop	{r3, r4, r5, pc}
 800b6ca:	bf00      	nop
 800b6cc:	200008e0 	.word	0x200008e0

0800b6d0 <_isatty_r>:
 800b6d0:	b538      	push	{r3, r4, r5, lr}
 800b6d2:	2300      	movs	r3, #0
 800b6d4:	4d05      	ldr	r5, [pc, #20]	@ (800b6ec <_isatty_r+0x1c>)
 800b6d6:	4604      	mov	r4, r0
 800b6d8:	4608      	mov	r0, r1
 800b6da:	602b      	str	r3, [r5, #0]
 800b6dc:	f7f5 fef9 	bl	80014d2 <_isatty>
 800b6e0:	1c43      	adds	r3, r0, #1
 800b6e2:	d102      	bne.n	800b6ea <_isatty_r+0x1a>
 800b6e4:	682b      	ldr	r3, [r5, #0]
 800b6e6:	b103      	cbz	r3, 800b6ea <_isatty_r+0x1a>
 800b6e8:	6023      	str	r3, [r4, #0]
 800b6ea:	bd38      	pop	{r3, r4, r5, pc}
 800b6ec:	200008e0 	.word	0x200008e0

0800b6f0 <abort>:
 800b6f0:	2006      	movs	r0, #6
 800b6f2:	b508      	push	{r3, lr}
 800b6f4:	f000 f834 	bl	800b760 <raise>
 800b6f8:	2001      	movs	r0, #1
 800b6fa:	f7f5 fe8c 	bl	8001416 <_exit>

0800b6fe <_malloc_usable_size_r>:
 800b6fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b702:	1f18      	subs	r0, r3, #4
 800b704:	2b00      	cmp	r3, #0
 800b706:	bfbc      	itt	lt
 800b708:	580b      	ldrlt	r3, [r1, r0]
 800b70a:	18c0      	addlt	r0, r0, r3
 800b70c:	4770      	bx	lr

0800b70e <_raise_r>:
 800b70e:	291f      	cmp	r1, #31
 800b710:	b538      	push	{r3, r4, r5, lr}
 800b712:	4605      	mov	r5, r0
 800b714:	460c      	mov	r4, r1
 800b716:	d904      	bls.n	800b722 <_raise_r+0x14>
 800b718:	2316      	movs	r3, #22
 800b71a:	6003      	str	r3, [r0, #0]
 800b71c:	f04f 30ff 	mov.w	r0, #4294967295
 800b720:	bd38      	pop	{r3, r4, r5, pc}
 800b722:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b724:	b112      	cbz	r2, 800b72c <_raise_r+0x1e>
 800b726:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b72a:	b94b      	cbnz	r3, 800b740 <_raise_r+0x32>
 800b72c:	4628      	mov	r0, r5
 800b72e:	f000 f831 	bl	800b794 <_getpid_r>
 800b732:	4622      	mov	r2, r4
 800b734:	4601      	mov	r1, r0
 800b736:	4628      	mov	r0, r5
 800b738:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b73c:	f000 b818 	b.w	800b770 <_kill_r>
 800b740:	2b01      	cmp	r3, #1
 800b742:	d00a      	beq.n	800b75a <_raise_r+0x4c>
 800b744:	1c59      	adds	r1, r3, #1
 800b746:	d103      	bne.n	800b750 <_raise_r+0x42>
 800b748:	2316      	movs	r3, #22
 800b74a:	6003      	str	r3, [r0, #0]
 800b74c:	2001      	movs	r0, #1
 800b74e:	e7e7      	b.n	800b720 <_raise_r+0x12>
 800b750:	2100      	movs	r1, #0
 800b752:	4620      	mov	r0, r4
 800b754:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b758:	4798      	blx	r3
 800b75a:	2000      	movs	r0, #0
 800b75c:	e7e0      	b.n	800b720 <_raise_r+0x12>
	...

0800b760 <raise>:
 800b760:	4b02      	ldr	r3, [pc, #8]	@ (800b76c <raise+0xc>)
 800b762:	4601      	mov	r1, r0
 800b764:	6818      	ldr	r0, [r3, #0]
 800b766:	f7ff bfd2 	b.w	800b70e <_raise_r>
 800b76a:	bf00      	nop
 800b76c:	20000030 	.word	0x20000030

0800b770 <_kill_r>:
 800b770:	b538      	push	{r3, r4, r5, lr}
 800b772:	2300      	movs	r3, #0
 800b774:	4d06      	ldr	r5, [pc, #24]	@ (800b790 <_kill_r+0x20>)
 800b776:	4604      	mov	r4, r0
 800b778:	4608      	mov	r0, r1
 800b77a:	4611      	mov	r1, r2
 800b77c:	602b      	str	r3, [r5, #0]
 800b77e:	f7f5 fe3a 	bl	80013f6 <_kill>
 800b782:	1c43      	adds	r3, r0, #1
 800b784:	d102      	bne.n	800b78c <_kill_r+0x1c>
 800b786:	682b      	ldr	r3, [r5, #0]
 800b788:	b103      	cbz	r3, 800b78c <_kill_r+0x1c>
 800b78a:	6023      	str	r3, [r4, #0]
 800b78c:	bd38      	pop	{r3, r4, r5, pc}
 800b78e:	bf00      	nop
 800b790:	200008e0 	.word	0x200008e0

0800b794 <_getpid_r>:
 800b794:	f7f5 be28 	b.w	80013e8 <_getpid>

0800b798 <_init>:
 800b798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b79a:	bf00      	nop
 800b79c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b79e:	bc08      	pop	{r3}
 800b7a0:	469e      	mov	lr, r3
 800b7a2:	4770      	bx	lr

0800b7a4 <_fini>:
 800b7a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7a6:	bf00      	nop
 800b7a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b7aa:	bc08      	pop	{r3}
 800b7ac:	469e      	mov	lr, r3
 800b7ae:	4770      	bx	lr
